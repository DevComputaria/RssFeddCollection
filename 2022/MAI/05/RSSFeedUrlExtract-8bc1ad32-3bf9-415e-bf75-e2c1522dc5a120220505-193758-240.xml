<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?>
<?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-1176949257541686127</id>
  <updated>2022-04-28T12:21:57.904-04:00</updated>
  <category term="android security" />
  <category term="Security" />
  <category term="android" />
  <category term="Open Source" />
  <category term="chrome" />
  <category term="privacy" />
  <category term="vulnerabilities" />
  <category term="chrome security" />
  <category term="pha family highlights" />
  <category term="rust" />
  <category term="#sharethemicincyber" />
  <category term="C++" />
  <category term="app security" />
  <category term="diversity" />
  <category term="google play" />
  <category term="supply chain" />
  <category term="#supplychain #security #opensource" />
  <category term="CTF" />
  <category term="Gboard" />
  <category term="Rowhammer" />
  <category term="Titan M2" />
  <category term="VDP" />
  <category term="android tr" />
  <category term="big data" />
  <category term="biometrics" />
  <category term="blackhat" />
  <category term="encryption" />
  <category term="federated learning" />
  <category term="fuzzing" />
  <category term="google play protect" />
  <category term="hacking" />
  <category term="interoperability" />
  <category term="kubernetes" />
  <category term="linux kernel" />
  <category term="memory safety" />
  <category term="pixel" />
  <category term="private compute core" />
  <category term="security rewards program" />
  <category term="sigstore" />
  <category term="spyware" />
  <category term="targeted spyware" />
  <category term="tensor" />
  <category term="workshop" />
  <title type="text">Google Online Security Blog</title>
  <subtitle type="html">The latest news and insights from Google on security and safety on the Internet.</subtitle>
  <link rel="alternate" type="text/html" href="http://security.googleblog.com/" />
  <link rel="next" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default?start-index=26&amp;max-results=25&amp;redirect=false" />
  <author>
    <name>ninu</name>
    <uri>http://www.blogger.com/profile/10142184839697363753</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
  </author>
  <generator version="7.00" uri="http://www.blogger.com">Blogger</generator>
  <openSearch:totalResults>475</openSearch:totalResults>
  <openSearch:startIndex>1</openSearch:startIndex>
  <openSearch:itemsPerPage>25</openSearch:itemsPerPage>
  <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/GoogleOnlineSecurityBlog" />
  <feedburner:info xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" uri="googleonlinesecurityblog" />
  <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" />
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-5264948080671210292</id>
    <published>2022-04-28T12:05:00.008-04:00</published>
    <updated>2022-04-28T12:21:24.709-04:00</updated>
    <title type="text">The Package Analysis Project: Scalable detection of malicious open source packages </title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Caleb Brown, Open Source Security Team&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Despite open source software’s essential role in all software built today, it’s far too easy for bad actors to circulate malicious packages that attack the systems and users running that software. Unlike mobile app stores that can scan for and reject malicious contributions, package repositories have limited resources to review the thousands of daily updates and must maintain an open model where anyone can freely contribute. As a result, malicious packages like &lt;a href="https://github.com/advisories/GHSA-pjwm-rvh2-c87w"&gt;ua-parser-js&lt;/a&gt;, and &lt;a href="https://snyk.io/blog/peacenotwar-malicious-npm-node-ipc-package-vulnerability/"&gt;node-ipc&lt;/a&gt; are regularly uploaded to popular repositories despite their best efforts, with sometimes devastating consequences for users. &lt;br /&gt;&lt;br /&gt;Google, a member of the &lt;a href="https://openssf.org/"&gt;Open Source Security Foundation&lt;/a&gt; (OpenSSF), is proud to support the OpenSSF’s &lt;a href="https://openssf.org/blog/2022/04/28/introducing-package-analysis-scanning-open-source-packages-for-malicious-behavior"&gt;Package Analysis project,&lt;/a&gt; which is a welcome step toward helping secure the open source packages we all depend on. The Package Analysis program performs dynamic analysis of all packages uploaded to popular open source repositories and catalogs the results in a BigQuery table. By detecting malicious activities and alerting consumers to suspicious behavior before they select packages, this program contributes to a more secure software supply chain and greater trust in open source software. The program also gives insight into the types of malicious packages that are most common at any given time, which can guide decisions about how to better protect the ecosystem. &lt;br /&gt;&lt;br /&gt;To better understand how the Package Analysis program is contributing to supply chain security, we analyzed the nearly 200 malicious packages it captured over a one-month period. Here’s what we discovered:&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Results&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;All signals collected are published in our &lt;a href="https://console.cloud.google.com/bigquery?d=packages&amp;amp;p=ossf-malware-analysis&amp;amp;t=analysis&amp;amp;page=table"&gt;BigQuery table&lt;/a&gt;. Using simple queries on this table, we found around 200 meaningful results from the packages uploaded to NPM and PyPI in a period of just over a month. Here are some notable examples, with &lt;a href="https://github.com/ossf/package-analysis/blob/main/docs/case_studies.md"&gt;more available in the repository&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;PyPI: discordcmd&lt;/b&gt;&lt;/div&gt;&lt;div&gt;This Python package will attack the desktop client for Discord on Windows. It was found by spotting the unusual requests to raw.githubusercontent.com, Discord API, and ipinfo.io.&lt;br /&gt;&lt;br /&gt;First, it downloaded a backdoor from GitHub and installed it into the Discord electron client.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;span class="byline-author"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="border: none; display: inline-block; height: 221px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 594px;"&gt;&lt;img src="https://lh3.googleusercontent.com/teKmDM4L2ldfQKTo3zirXpxmNCoX8Gk_Km7qXkSdeo-SyywPq8v0XZDUOp7EhLKEhE7WzBIigkh9bFG1QAA4C6Q6WDcFNQ0-xq_A5NbixFQN45RQWEtDaAL3_p9MrzIQXDEpEzrmmIx-_KAX8c_irTw=s16000" style="margin-left: 0px; margin-top: 0px;" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/span&gt;Next, it looked through various local databases for the user's Discord token.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;img src="https://lh3.googleusercontent.com/GPHIrBJV9GrH8Z7IkSya5J-2WlQQfbNxQxa8zZ4oJaKLCoE2cYzsbsKL3Q6iRyad073ZxFcvaTha6od1RzLjTt_j2CXqgLhlyysJjA6kMyHMkXCAMr7CqTa__4hrY1x1Bw8bLKujEYHubK5kyxnuXpk=s16000" style="font-size: 11pt; margin-left: 0px; margin-top: 0px; text-align: center; white-space: pre-wrap;" /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally, it grabbed the data associated with the token from the Discord API and exfiltrated it back to a Discord server controlled by the attacker.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;NPM: @roku-web-core/ajax&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;During install, this NPM package exfiltrates details of the machine it is running on and then opens a reverse shell, allowing the remote execution of commands.&lt;/div&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="border: none; display: inline-block; height: 325px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 468px;"&gt;&lt;img height="325" src="https://lh4.googleusercontent.com/1jd-N8kdkObZ6OIyMen3qt5XMcJHcWdaJV0qYWJr0sUtf4jEkzbHaT0MnRXIrxgd1AOANgx9_DD6wykDwQyTZU4zlosPUeQB853UADW7X0wlm9VclIzswAB4eMy0-sYM_BjMP4wzef84WiSjxM9XMkc" style="margin-left: 0px; margin-top: 0px;" width="468" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/span&gt;This package was discovered from its requests to an attacker-controlled address.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Dependency Confusion / Typosquatting&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The vast majority of the malicious packages we detected are dependency confusion and &lt;a href="https://www.darkreading.com/vulnerabilities-threats/beware-the-package-typosquatting-supply-chain-attack"&gt;typosquatting attacks&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The packages we found usually contain a simple script that runs during an install and calls home with a few details about the host. These packages are most likely the work of security researchers looking for bug bounties, since most are not exfiltrating meaningful data except the name of the machine or a username, and they make no attempt to disguise their behavior.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;These dependency confusion attacks were discovered through the domains they used, such as burpcollaborator.net, pipedream.com, interact.sh, which are commonly used for reporting back attacks. The same domains appear across unrelated packages and have no apparent connection to the packages themselves. Many packages also used unusual version numbers that were high (e.g. v5.0.0, v99.10.9) for a package with no previous versions.&lt;span class="byline-author"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="border: none; display: inline-block; height: 113px; overflow: hidden; width: 624px;"&gt;&lt;img height="227.21782206542693" src="https://lh3.googleusercontent.com/v924Z887zD34PXzNOQCOyycHnJ5uOE0GGtLPEdxlca3r8wxoooNL8DU7Vqoq72S9tUq2QeOS-F54T0igpr1EXLjxQzjhnUWY5vGLq1LHK3nDkfEHBC97qQgvyNtmk9QXzPzFLThZpPeWYCLQQpKWJys" style="margin-left: -5.56433px; margin-top: -114.218px;" width="629.5643312101911" /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;b&gt;Conclusions&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;The short time frame and low sophistication needed for finding the results above underscore the challenge facing open source package repositories. While many of the results above were likely the work of security researchers, any one of these packages could have done far more to hurt the unfortunate victims who installed them.&lt;br /&gt;&lt;br /&gt;These results show the clear need for more investment in vetting packages being published in order to keep users safe. This is a growing space, and having an open standard for reporting would help centralize analysis results and offer consumers a trusted place to assess the packages they’re considering using. Creating an open standard should also foster healthy competition, promote integration, and raise the overall security of open source packages.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &lt;br /&gt;Over time we hope that the Package Analysis program will offer comprehensive knowledge about the behavior and capabilities of packages across open source software, and help guide the future efforts needed to make the ecosystem more secure for everyone. To get involved, please check out the &lt;a href="https://github.com/ossf/package-analysis"&gt;GitHub Project&lt;/a&gt; and &lt;a href="https://github.com/ossf/package-analysis/milestones"&gt;Milestones&lt;/a&gt; for opportunities to contribute. &lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=yB72EfJrBsM:9woT2UGFW50:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=yB72EfJrBsM:9woT2UGFW50:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=yB72EfJrBsM:9woT2UGFW50:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/5264948080671210292/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5264948080671210292&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5264948080671210292" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5264948080671210292" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/04/the-package-analysis-project-scalable.html" title="The Package Analysis Project: Scalable detection of malicious open source packages " />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh3.googleusercontent.com/teKmDM4L2ldfQKTo3zirXpxmNCoX8Gk_Km7qXkSdeo-SyywPq8v0XZDUOp7EhLKEhE7WzBIigkh9bFG1QAA4C6Q6WDcFNQ0-xq_A5NbixFQN45RQWEtDaAL3_p9MrzIQXDEpEzrmmIx-_KAX8c_irTw=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-906768766717947517</id>
    <published>2022-04-27T12:01:00.000-04:00</published>
    <updated>2022-04-27T12:01:06.684-04:00</updated>
    <title type="text">How we fought bad apps and developers in 2021</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Steve Kafka and Khawaja Shams, Android Security and Privacy Team&lt;/span&gt; &lt;p&gt;Providing a safe experience to billions of users continues to be one of the &lt;a href="https://android-developers.googleblog.com/2022/03/privacy-and-security-direction.html"&gt;highest priorities&lt;/a&gt; for Google Play. Last year we introduced multiple privacy focused features, enhanced our protections against bad apps and developers, and improved &lt;a href="https://en.wikipedia.org/wiki/Software_development_kit"&gt;SDK&lt;/a&gt; data safety. In addition, Google Play Protect continues to scan billions of installed apps each day across billions of devices to keep people safe from malware and unwanted software.  &lt;/p&gt;&lt;p&gt;  &lt;/p&gt;&lt;p&gt;We continue to enhance our machine learning systems and review processes, and in 2021 we blocked 1.2 million policy violating apps from being published on Google Play, preventing billions of harmful installations. We also continued in our efforts to combat malicious and spammy developers, banning 190k bad accounts in 2021. In addition, we have closed around 500k developer accounts that are inactive or abandoned. &lt;/p&gt;&lt;p&gt;In May we &lt;a href="https://android-developers.googleblog.com/2021/05/new-safety-section-in-google-play-will.html"&gt;announced&lt;/a&gt; our new Data safety section for Google Play where developers will be required to give users deeper insight into the privacy and security practices of the apps they download, and provide transparency into the data the app may collect and why. The Data safety section &lt;a href="https://blog.google/products/google-play/data-safety/"&gt;launched&lt;/a&gt; this week, and developers are required to complete this section for their apps by July 20th.  &lt;/p&gt;&lt;p&gt;We’ve also invested in making life easier for our developers. We added the &lt;a href="https://play.google.com/console/about/policystatus/"&gt;Policy and Programs&lt;/a&gt; section to Google Play Console to help developers manage all their app compliance issues in one central location. This includes the ability to appeal a decision and &lt;a href="https://support.google.com/googleplay/android-developer/answer/9842754?hl=en"&gt;track its status&lt;/a&gt; from this page. &lt;/p&gt;&lt;p&gt;In addition, we continued to partner with SDK developers to improve app safety, limit how user data is shared, and &lt;a href="https://support.google.com/googleplay/android-developer/answer/10358880"&gt;improve lines of communication with app developers&lt;/a&gt;. SDKs provide functionality for app developers, but it can sometimes be tricky to know when an SDK is safe to use. Last year, we engaged with SDK developers to build a safer Android and Google Play ecosystem. As a result of this work, SDK developers have improved the safety of SDKs used by hundreds of thousands of apps impacting billions of users. This remains a huge investment area for our team, and we will continue in our efforts to make SDKs safer across the ecosystem.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Limiting access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The best way to ensure users' data stays safe is to limit access to it in the first place.  &lt;/p&gt;&lt;p&gt;As a result of new platform protections and &lt;a href="https://support.google.com/googleplay/android-developer/answer/10467955"&gt;policies&lt;/a&gt;, developer collaboration and education, 98% of apps migrating to Android 11 or higher have reduced their access to sensitive APIs and user data. We've also significantly reduced the unnecessary, dangerous, or disallowed use of &lt;a href="https://support.google.com/googleplay/android-developer/answer/10964491?hl=en#:~:text=Google%20Play%20permits%20the%20use,that%20they%20are%20accessibility%20tools."&gt;Accessibility APIs&lt;/a&gt; in apps migrating to Android 12, while preserving the functionality of legitimate use cases. &lt;/p&gt;&lt;p&gt;We also continued in our commitment to make Android a great place for families. Last year we disallowed the collection of Advertising ID (AAID) and other device identifiers from all users in apps solely targeting children, and gave all users the ability to delete their Advertising ID entirely, regardless of the app.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Pixel enhancements&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For Pixel users, we had even more great features to help keep you safe. Our new &lt;a href="https://security.googleblog.com/2021/10/pixel-6-setting-new-standard-for-mobile.html"&gt;Security hub&lt;/a&gt; helps protect your phone, apps, Google Account, and passwords by giving you a central view of your device’s current configuration. Security hub also provides recommendations to improve your security, helping you decide what settings best meet your needs.  &lt;/p&gt;&lt;p&gt;In addition, Pixels now use new machine learning models that improve the detection of malware in Google Play Protect. The detection runs on your Pixel, and uses a privacy preserving technology called federated analytics to discover bad apps. &lt;/p&gt;&lt;p&gt;Our global teams are dedicated to keeping our billions of users safe, and look forward to many exciting announcements in 2022. &lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=UFuBYdIu6g4:mt8GurA42sY:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=UFuBYdIu6g4:mt8GurA42sY:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=UFuBYdIu6g4:mt8GurA42sY:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/906768766717947517/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=906768766717947517&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/906768766717947517" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/906768766717947517" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/04/how-we-fought-bad-apps-and-developers.html" title="How we fought bad apps and developers in 2021" />
    <author>
      <name>Google</name>
      <uri>http://www.blogger.com/profile/11822708545141062574</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-2456668474452167313</id>
    <published>2022-04-14T13:28:00.008-04:00</published>
    <updated>2022-04-14T13:34:54.614-04:00</updated>
    <title type="text">How to SLSA Part 3 - Putting it all together</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Tom Hennen, software engineer, BCID &amp;amp; GOSST&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;In our last two posts (&lt;a href="https://security.googleblog.com/2022/04/how-to-slsa-part-1-basics.html"&gt;1&lt;/a&gt;,&lt;a href="https://security.googleblog.com/2022/04/how-to-slsa-part-2-details.html"&gt;2&lt;/a&gt;) we introduced a fictional example of Squirrel, Oppy, and Acme learning to SLSA and covered the basics and details of how they’d use SLSA for their organizations. Today we’ll close out the series by exploring how each organization pulls together the various solutions into a heterogeneous supply chain. &lt;br /&gt;&lt;br /&gt;As a reminder, Acme is trying to produce a container image that contains three artifacts:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;The Squirrel package ‘foo’&lt;/li&gt;&lt;li&gt;The Oppy package ‘baz’&lt;/li&gt;&lt;li&gt;A custom executable, ‘bar’, written by Acme employees.&lt;/li&gt;&lt;/ol&gt;The process starts with ‘foo’ package authors triggering a build using GitHub Actions. This results in a new version of ‘foo’ (an artifact with hash ‘abc’) being pushed to the Squirrel repo along with its SLSA provenance (signed by Fulcio) and &lt;a href="https://github.com/in-toto/attestation/issues/47"&gt;source attestation&lt;/a&gt;. When Squirrel gets this push request it verifies the artifact against the specific policy for ‘foo’ which checks that it was built by GitHub Actions from the expected source repository. After the artifact passes the policy check a VSA is created and the new package, its original SLSA provenance, and the VSA are made public in the Squirrel repo, available to all users of package ‘foo’.&lt;br /&gt;&lt;br /&gt;Next the maintainers of the Oppy ‘baz’ package trigger a new build using the Oppy Autobuilder. This results in a new version of ‘baz’ (an artifact with hash ‘def’) being pushed to a public Oppy repo with the SLSA provenance (signed by their org-specific keys) published to Rekor. When the repo gets the push request it makes the artifact available to the public. The repo does not perform any verification at this time.&lt;br /&gt;&lt;br /&gt;An Acme employee then makes a change to their Dockerfile, sending it for review by their co-worker, who approves the change and merges the PR. This then causes the Acme builder to trigger a build. During this build:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;bar is compiled from source code stored in the same source repo as the Dockerfile.&lt;/li&gt;&lt;li&gt;acorn install downloads ‘foo’ from the Squirrel repo, verifying the VSA, and recording the use of acorn://foo@abc and its VSA in the build.&lt;/li&gt;&lt;li&gt;acme_oppy_get install (a custom script made by Acme) downloads the latest version of the Oppy ‘baz’ package and queries its SLSA provenance and other attestations from Rekor. It then performs a full verification checking that it was built by ‘https://oppy.example/slsa/builder/v1’ and the publicized key. Once verification is complete it records the use of oppy://baz@def and the associated attestations in the build.&lt;/li&gt;&lt;li&gt;The build process assembles the SLSA provenance for the container by:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Recording the Acme git repo the bar source and Dockerfile came from, into &lt;a href="https://slsa.dev/provenance/v0.2#materials"&gt;materials&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Copying the reported dependencies of acorn://foo@abc and oppy://baz@def into &lt;a href="https://slsa.dev/provenance/v0.2#materials"&gt;materials&lt;/a&gt; and adding their attestations to the output &lt;a href="https://github.com/in-toto/attestation/blob/main/spec/bundle.md"&gt;in-toto bundle&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Recording the CI/CD entrypoint as the &lt;a href="https://slsa.dev/provenance/v0.2#invocation"&gt;invocation&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Creating a signed &lt;a href="https://github.com/secure-systems-lab/dsse"&gt;DSSE&lt;/a&gt; with the SLSA provenance and adding it to the output &lt;a href="https://github.com/in-toto/attestation/blob/main/spec/bundle.md"&gt;in-toto bundle&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;Once the container is ready for release the Acme verifier checks the SLSA provenance (and other data in the in-toto bundle) using the policy from their own policy repo and issues a VSA. The VSA and all associated attestations are then published to an internal Rekor instance. Acme can then create an &lt;a href="https://en.wikipedia.org/wiki/Software_bill_of_materials"&gt;SBOM&lt;/a&gt; for the container leveraging data about the build as stored in Rekor. Acme then publishes the container image, the VSA, and the SBOM on Dockerhub.&lt;br /&gt;&lt;br /&gt;Downstream users of this Acme container can then check the Acme issued VSA, and if there are any problems Acme can consult their internal Rekor instance to get more details on the build allowing Acme to trace all of their dependencies back to source code and the systems used to create them.&lt;br /&gt;Conclusion&lt;br /&gt;&lt;br /&gt;With SLSA implemented in the ways described in this series, downstream users are protected from many of &lt;a href="https://slsa.dev/spec/v0.1/threats"&gt;the threats affecting the software supply chain today&lt;/a&gt;. While users still need to trust certain parties, the number of systems requiring trust is much lower and users are in a much better position to investigate any issues that arise. &lt;br /&gt;&lt;br /&gt;We’d love to see the ideas in this series implemented, refuted, or used as a foundation to build even stronger solutions. We’d also love to hear some other methods on how to solve these issues. &lt;a href="https://github.com/slsa-framework/slsa#get-involved"&gt;Show us&lt;/a&gt; how you like to SLSA.&amp;nbsp;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=Z7Wv1wMpukg:aGx8fUtyqJI:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=Z7Wv1wMpukg:aGx8fUtyqJI:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=Z7Wv1wMpukg:aGx8fUtyqJI:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/2456668474452167313/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=2456668474452167313&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2456668474452167313" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2456668474452167313" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/04/how-to-slsa-part-3-putting-it-all.html" title="How to SLSA Part 3 - Putting it all together" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-5612903452487693830</id>
    <published>2022-04-13T12:00:00.002-04:00</published>
    <updated>2022-04-13T12:35:03.233-04:00</updated>
    <title type="text">How to SLSA Part 2 - The Details</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Tom&amp;nbsp; Hennen, software engineer, BCID &amp;amp; GOSST&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-6dda854b-7fff-91c4-18ba-7c8c98353417"&gt;In &lt;a href="https://security.googleblog.com/2022/04/how-to-slsa-part-1-basics.html"&gt;our last post&lt;/a&gt; we introduced a fictional example of Squirrel, Oppy, and Acme learning to use SLSA and covered the basics of what their implementations might look like. Today we’ll cover the details: where to store attestations and policies, what policies should check, and how to handle key distribution and trust.&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Attestation storage&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;Attestations play a large role in SLSA and it’s essential that consumers of artifacts know where to find the attestations for those artifacts.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Co-located in repo&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Attestations could be colocated in the repository that hosts the artifact. This is how Squirrel plans to store attestations for packages. They even want to add support to the Squirrel CLI (e.g. acorn get-attestations foo@1.2.3).&lt;br /&gt;&lt;br /&gt;Acme really likes this approach because the attestations are always available and it doesn’t introduce any new dependencies.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Rekor&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;Meanwhile, Oppy plans to store attestations in &lt;a href="https://github.com/sigstore/rekor"&gt;Rekor&lt;/a&gt;. They like being able to direct users to an existing public instance while not having to maintain any new infrastructure themselves, and the in-depth defense the transparency log provides against tampering with the attestations.&lt;br /&gt;&lt;br /&gt;Though the latency of querying attestations from Rekor is likely too high for doing verification at time of use, Oppy isn’t too concerned since they expect users to query Rekor at install time.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Hybrid&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;A hybrid model is also available where the publisher stores the attestations in Rekor as well as co-located with the artifact in the repo—along with Rekor’s inclusion proof. This provides confidence the data was added to Rekor while providing the benefits of co-locating attestations in the repository.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Policy content&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;‘Policy’ refers to the rules used to determine if an artifact should be allowed for a use case.&lt;br /&gt;&lt;br /&gt;Policies often use the package name as a proxy for determining the use case. An example being, if you want to find the policy to apply you could look up the policy using the package name of the artifact you’re evaluating.&lt;br /&gt;&lt;br /&gt;Policy specifics may vary based on ease of use, availability of data, risk tolerance and more. Full verification needs more from policies than delegated verification does.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Default policy&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Default policies allow admission decisions without the need to create specific policies for each package. A default policy is a way of saying “anything that doesn’t have a more specific policy must comply with this policy”.&lt;br /&gt;&lt;br /&gt;Squirrel plans to eventually implement a default policy of “any package without a more specific policy will be accepted as long as it meets SLSA 3”, but they recognize that most packages don’t support this yet. Until they achieve critical mass they’ll have a default SLSA 0 policy (all artifacts are accepted).&lt;br /&gt;&lt;br /&gt;While Oppy is leaving verification to their users, they’ll suggest a default policy of “any package built by ‘https://oppy.example/slsa/builder/v1’”.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Specific policy&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Squirrel also plans to allow users to create policies for specific packages. For example, this policy requires that package ‘foo’ must have been built by GitHub Actions, from github.com/foo/acorn-foo, and be SLSA 4.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-color: rgb(224, 224, 224); border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-style: solid; border-top: solid #e0e0e0 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;scope&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'acorn://foo'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;target_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L4&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;allow_github_actions &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;workflow&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'https://github.com/gossts/slsa-acorn/.github/workflows/builder.yml@main'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;source_repo&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'https://github.com/foo/acorn-foo.git'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;allow_branch&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'main'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;Squirrel will also allow packages to create SLSA 0 policies if they’re not using SLSA compliant infrastructure.&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-color: rgb(224, 224, 224); border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-style: solid; border-top: solid #e0e0e0 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;scope&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'acorn://qux'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;target_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;Policy auto generation&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Squirrel has an enormous number of existing packages. It’s not feasible to get all those package maintainers to create specific policies themselves. Therefore, Squirrel plans to leverage &lt;a href="https://en.wikipedia.org/wiki/Process_mining"&gt;process mining&lt;/a&gt; to auto generate policies for packages based on the history of the package. E.g. “The last 10 times Squirrel package foo was published it was built by GitHub Actions from github.com/foo/acorn-foo, and met SLSA 4 (this is the policy above). Let’s create a policy that requires that and send it to the maintainers to review.”&lt;br /&gt;Policy add-ons&lt;br /&gt;&lt;br /&gt;Policy evaluation could do more than just evaluate the SLSA requirements. The same policies that check SLSA requirements are well placed to check other properties that are important to organizations like “was static analysis performed”, “are there any known CVEs in this artifact”, “was integration testing successful”, etc…&lt;br /&gt;&lt;br /&gt;Acme is really interested in some of these policy add-ons. They’d like to avoid the embarrassing situation of publishing a new container image with known CVEs. They’re not sure how to implement it yet but they’ll be on the lookout for tools that can help them do so.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Delegated policies&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;When using delegated verification there’s much less that actually needs to be checked and they can be hard-coded directly in tooling. A minimal delegated verification policy might be “allow if trusted-party verified this artifact (identified by digest) as &amp;lt;package name&amp;gt;”. This can be tightened further by adding requirements on the artifact &amp;amp; its dependencies SLSA levels (data which is available in the VSA). For example, “allow if trusted-party verified this artifact as &amp;lt;package name&amp;gt; at SLSA 3 and it doesn’t have any dependencies less than SLSA 2”.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-color: rgb(224, 224, 224); border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-style: solid; border-top: solid #e0e0e0 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #455a64; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;# Delegated verification implicitly checks that the package name we're&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #455a64; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;# checking matches the VSA's subject.name field.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;allow_delegated_verification &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;trusted_verifier&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'https://delegatedverifier.com/slsa/v1'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;minimum_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L3&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;minimum_dependency_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L2&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Policy storage&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;&lt;br /&gt;When using specific, non-default, policies verifiers need to know where to find the policy they need to evaluate.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Co-located in repo&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Squirrel plans to store specific policies as a property of the package in the repository. This makes them very easy for users and their tooling to find. It also allows the maintainer of the package to easily set the policy (they already have write permissions!).&lt;br /&gt;&lt;br /&gt;A potential downside is that the write permissions are the same as for the package itself. An attacker that compromises the developer’s credentials could also change the policy. This may not be as bad as it seems. Policies are human-readable so anyone paying attention would notice that package foo’s policy now says that it can be built from github.com/not-foo/acorn-foo. Squirrel plans to notify interested parties (including the maintainer!) when the policy changes, potentially letting them “sound the alarm” if anything nefarious happens.&lt;br /&gt;&lt;br /&gt;A similar approach is taken in a number of contact-change workflows. For example, when you change your address with your bank, the bank will send you an email (and a letter to the old address) letting you know the address has been changed. This type of notification would alert the maintainer to a potential compromise.&lt;br /&gt;&lt;br /&gt;Squirrel would also consider requiring a second person to review any policy changes for packages with over 10,000 users.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;b&gt;Public canonical Git repo&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Another option might be to just create a canonical git repo (e.g. github.com/slsa-framework/slsa-acorn-policies) and let people publish proposed policies there. This has the advantage of using a separate ACL control mechanism from the package repository itself, but the disadvantages of being difficult to ensure the author of the policy is actually allowed to set the policy for that package and not scaling well as the repo grows.&lt;br /&gt;&lt;br /&gt;The approach outlined in policy auto generation could help here. Automation in the repo could just look at the last N releases of the package and determine if the proposed policy matches what’s actually been published. Proactive changes to the policy (like deciding to switch from GitHub Actions to CircleCI) would be harder to coordinate however.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;b&gt;Org specific repo&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Acme plans to establish their own org specific repo for policy storage. This gives them a single place to store all their policies, regardless of ecosystem type, and lets them provide more specific policies for packages provided by upstream repos. Since Oppy doesn’t have any plans to provide package-specific policies this gives Acme a place to store their own policies for Oppy packages (if they ever get around to it).&lt;br /&gt;&lt;br /&gt;Organizations can also use their policy repo to vet any upstream changes to policy and potentially add additional checks (e.g. “doesn’t have any known vulnerabilities”).&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;rusted Verifier&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;Acme wants to use delegated verification and that relies on having trusted verifiers to make decisions for downstream users. Who are these trusted verifiers?&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Public verifier&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;A public repo is in a great position to act as a trusted verifier for their users. Users already trust these repos and they may already be doing verification on import.&lt;br /&gt;&lt;br /&gt;Squirrel plans to make use of this by making VSAs available for each artifact published, publicizing their verifier ID (i.e. ‘https://squirrel.example/slsa-verifier’) and the public key used to sign the VSAs. They even plan to build VSA verification directly into the Squirrel tooling, so that users can get SLSA protection by default.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;b&gt;Org-wide verifier&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;While Acme is happy to use Squirrel’s verifier (and the verification built into the tooling) they still need their own verifier so they can publish VSAs to Acme customers. So Acme plans to stand up their own verification service and publish their verifier ID (i.e. ‘https://acme.example/private-verifier’) and signing key. Acme customers can then verify the software they get from Acme.&lt;br /&gt;&lt;br /&gt;In the future Acme could require all software used throughout the company to be verified with this verifier (instead of relying on public verifiers). They’d do the verification and generate VSAs whenever artifacts are imported into their private Artifactory instance. They could then configure this ID/key pair for use throughout Acme and be confident that any software used has been verified according to Acme policy. That’s not Acme’s highest priority at the moment, but they like having this option open to them.&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Key distribution &amp;amp; Trust&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Both full and delegated verification depend upon key distribution to the users doing the verification. Depending on the specifics and what’s getting verified this can be a difficult problem.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Org-specific keys&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;When using delegated verification this could be the easiest case. Squirrel can just build the key they used for delegated verification directly into the Squirrel tooling. Acme can also fairly easily configure the use of their keys through the company using existing configuration control mechanisms.&lt;br /&gt;&lt;br /&gt;When using full verification this can be harder. If there are multiple builders that could be accepted the keys that sign the attestations need to be distributed to everyone that might use that builder. For Squirrel this would be really difficult since they plan to allow package maintainers to use whatever builder they want. How those keys get configured would be tricky just for Squirrel, and much more difficult if downstream Squirrel users wanted to do full verification of the Squirrel packages.&lt;br /&gt;&lt;br /&gt;The situation is easier, however, for Oppy. That’s because Oppy plans to only accept artifacts built by their autobuilder network. Oppy can configure this network to use a single (or small set) of keys and then publish those keys (and the SLSA level Oppy believes it meets) for downstream users.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Fulcio&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Squirrel plans to solve the problem of which keys they accept by leveraging Fulcio. Squirrel will build support for Fulcio root keys into their verifier and then express which Fulcio subject is allowed to sign attestations in the specific policy of each package. E.g. “Squirrel package ‘foo’ must have been built &amp;amp; signed by ‘spiffe://foobar.com/foo-builder, from github.com/foo/acorn-foo, and be SLSA 4”.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-color: rgb(224, 224, 224); border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-style: solid; border-top: solid #e0e0e0 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;scope&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'acorn://foo'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;target_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L4&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;allow_fulcio_builder &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;id&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'spiffe://foobar.com/foo-builder'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;source_repo&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'https://github.com/foo/acorn-foo.git'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;allow_branch&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'main'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;allow_entrypoint&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'package.json'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Update Framework (TUF)&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;The above methods could be further enhanced with &lt;a href="https://theupdateframework.io/"&gt;TUF&lt;/a&gt; to allow the secure maintenance of keys. TUF metadata could include all the SLSA keys, the build services and other entities they’re valid for, and the SLSA levels they’re qualified at. Oppy is considering using TUF to let verifiers securely fetch and update keys used by the Autobuilder network. Oppy would use a TUF delegation to indicate that these keys should only be used for the builder id ‘https://oppy.example/slsa/builder/v1’. Squirrel might do something similar to allow for updating the Fulcio key in its tooling.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Recording &amp;amp; verifying dependencies&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;Acme wants to record and verify the dependencies that go into its container into the SLSA provenance. Acme would prefer that this functionality were just built-in their build service, but that feature isn’t available yet. Instead they’ll need to do something themselves. They have a few options at their disposal:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Tool wrappers&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Since Oppy doesn’t build SLSA into it’s tooling Acme will create wrapper scripts for dependency import/installation that record and verify (using &lt;a href="https://github.com/sigstore/cosign"&gt;cosign&lt;/a&gt;) dependencies as they’re installed. Acme will update their build scripts to replace all instances of Oppy package installation with the wrapper script and then use the recorded results to help populate the &lt;a href="https://slsa.dev/provenance/v0.2#materials"&gt;materials&lt;/a&gt; section of the provenance.&lt;br /&gt;&lt;br /&gt;A downside is that this approach, if run in the build itself, is not guaranteed to be complete and cannot meet the “&lt;a href="https://slsa.dev/spec/v0.1/requirements#non-falsifiable"&gt;non-falsifiable&lt;/a&gt;” requirement (since the results reported by the wrapper could be falsified by the build process), relegating this approach to SLSA 2. Still, it allows Acme to make progress SLSA-fying their builds and provides a starting point for achieving higher SLSA levels.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;b&gt;Built into ecosystem tooling&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Since Squirrel does build verification into their tooling, Acme can just use acorn install to verify the dependencies and record what was installed. Acme can use this information to populate the Squirrel packages installed in the materials section of the provenance and it can include the attestations of those dependencies in the in-toto bundle for their container image.&lt;br /&gt;&lt;br /&gt;As with tool wrappers, if this method is used in the build itself it cannot meet “non-falsifiable” requirement.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Proxied verification&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Acme considered creating a proxy for their existing builder to proxy outbound connections. This proxy could verify everything fetched and use its logs to populate the provenance. Since this proxy is trusted it would be easier to meet “non-falsifiable” requirement. Unfortunately it’s also a lot of work for Acme so they’re going to defer this idea for now.&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Next time&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;In the first two parts of this series, we’ve covered the basics of getting started with SLSA and the details of policy and provenance storage, policy verification, and key handling. In our next post we’ll cover how Squirrel, Oppy, and Acme put this all together to protect a heterogeneous supply chain.&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=lIRsvboUYYM:GHWBechcerM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=lIRsvboUYYM:GHWBechcerM:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=lIRsvboUYYM:GHWBechcerM:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/5612903452487693830/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5612903452487693830&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5612903452487693830" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5612903452487693830" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/04/how-to-slsa-part-2-details.html" title="How to SLSA Part 2 - The Details" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-7341553905426522930</id>
    <published>2022-04-12T12:00:00.002-04:00</published>
    <updated>2022-04-13T12:30:56.491-04:00</updated>
    <title type="text">How to SLSA Part 1 - The Basics</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Tom Hennen, Software Engineer, BCID &amp;amp; GOSST&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;One of the great benefits of SLSA (&lt;a href="http://slsa.dev"&gt;Supply-chain Levels for Software Artifacts&lt;/a&gt;) is its flexibility. As an open source framework designed to improve the integrity of software packages and infrastructure, it is as applicable to small open source projects as to enterprise organizations. But with this flexibility can come a bewildering array of options for beginners—much like salsa dancing, someone just starting out might be left on the dance floor wondering how and where to jump in.&lt;br /&gt;&lt;br /&gt;Though it’s tempting to try to establish a single standard for how to use SLSA, it’s not possible: SLSA is not a line dance where everyone does the same moves, at the same time, to the same song. It’s a varied system with different styles, moves, and flourishes. The open source community, organizations, and consumers may all implement SLSA differently, but they can still work with each other.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;In this three-part series, we’ll explore how three fictional organizations would apply SLSA to meet their different needs. In doing so, we will answer some of the main questions that newcomers to SLSA have:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Part 1: The basics&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;How and when do you verify a package with SLSA?&lt;/li&gt;&lt;li&gt;How to handle artifacts without provenance?&lt;/li&gt;&lt;/ul&gt;Part 2: The details&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Where is the provenance stored?&lt;/li&gt;&lt;li&gt;Where is the appropriate policy stored and who should verify it?&lt;/li&gt;&lt;li&gt;What should the policies check?&lt;/li&gt;&lt;li&gt;How do you establish trust &amp;amp; distribute keys?&lt;/li&gt;&lt;/ul&gt;Part 3: Putting it all together&lt;ul style="text-align: left;"&gt;&lt;li&gt;What does a secure, heterogeneous supply chain look like?&lt;/li&gt;&lt;/ul&gt;&lt;h1 style="text-align: left;"&gt;The Situation&lt;/h1&gt;Our fictional example involves three organizations that want to use SLSA:&lt;br /&gt;&lt;br /&gt;Squirrel: a package manager with a large number of developers and users&lt;br /&gt;&lt;br /&gt;Oppy: an open source operating system with an enterprise distribution&lt;br /&gt;&lt;br /&gt;Acme: a mid sized enterprise. &lt;br /&gt;&lt;br /&gt;Squirrel wants to make SLSA as easy for their users as possible, even if that means abstracting some details away. Meanwhile, Oppy doesn’t want to abstract anything away from their users under the philosophy that they should explicitly understand exactly what they’re consuming.&lt;br /&gt;&lt;br /&gt;Acme is trying to produce a container image that contains three artifacts:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;The Squirrel package ‘foo’&lt;/li&gt;&lt;li&gt;The Oppy package ‘baz’&lt;/li&gt;&lt;li&gt;A custom executable, ‘bar’, written by Acme employees&lt;/li&gt;&lt;/ol&gt;This series demonstrates one approach to using SLSA that lets Acme verify the Squirrel and Oppy packages ‘foo’ and ‘baz’ and its customers verify the container image. Though not every suggested solution is perfect, the solutions described can be a starting point for discussion and a foundation for new solutions.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;Basics&lt;/h1&gt;In order to SLSA, Squirrel, Oppy, and Acme will all need SLSA capable build services. Squirrel wants to give their maintainers wide latitude to pick a builder service of their own. To support this, Squirrel will qualify some build services at specific SLSA levels (meaning they can produce artifacts up to that level). To start, Squirrel plans to qualify GitHub Actions using an approach &lt;a href="https://security.googleblog.com/2022/04/improving-software-supply-chain.html"&gt;like this&lt;/a&gt;, and hopes it can achieve SLSA 4 (pending the result of an independent audit). They’re also willing to qualify other build services as needed. Oppy on the other hand, doesn’t need to support arbitrary build services. They plan to have everyone use their Autobuilder network which they hope to qualify at SLSA 4 (they’ll conduct the audit/certification themselves). Finally, Acme plans to use Google Cloud Build which they’ll self-certify at SLSA 4 (pending the result of a Google-conducted audit).&lt;br /&gt;&lt;br /&gt;Squirrel, Oppy, and Acme will follow a similar qualification process for the source control systems they plan to support.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;Verification options&lt;/h1&gt;&lt;b&gt;Full verification&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;At some point, one or more of the organizations will need to do full verification of each artifact to determine if it is acceptable for a given use case. This is accomplished by checking if the artifact meets the appropriate policy.&lt;br /&gt;&lt;br /&gt;Typically, full verification would take place with &lt;a href="http://slsa.dev/provenance"&gt;SLSA provenance&lt;/a&gt;, &lt;a href="https://github.com/in-toto/attestation/issues/47"&gt;source attestations&lt;/a&gt;, and perhaps other specialized attestations (like &lt;a href="https://github.com/in-toto/attestation/issues/58"&gt;vulnerability scan results&lt;/a&gt;). While having to coordinate this data for all of its dependencies seems like a lot of work to Acme, they’re prepared to do full verification if Squirrel and Oppy are unable to.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;Delegated verification&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;When Acme isn’t using full verification, they can instead use delegated verification where they check if an artifact is acceptable for a use case by checking if some other trusted party who performed a full verification (such as Squirrel or Oppy) believes the artifact is acceptable.&lt;br /&gt;&lt;br /&gt;Delegated verification is easier to perform quickly with limited data and network connectivity. It may also be easier for some users who value if someone they trust verified the artifact is good.&lt;br /&gt;&lt;br /&gt;Squirrel likes how easy delegated verification would make things for their users and plans to support it by creating a &lt;a href="https://slsa.dev/verification_summary/v0.1"&gt;Verification Summary Attestation (VSA)&lt;/a&gt; when they perform full verification.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;When to verify&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Verification (full or delegated) could happen at a number of different times.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;On import to repo&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Squirrel plans to perform full verification when an artifact is published to their repo. This will ensure that packages in the repo have met their corresponding policy. It’s also helpful because all the required data can be gathered when latency isn’t critical.&lt;br /&gt;&lt;br /&gt;If this were the only time verification is performed, it would put the repository's storage in the trusted computing base (TCB) of its users. Squirrel’s plans to use delegated verification (and issue VSAs) can prevent this. The signature on the VSA will prevent the artifacts from being tampered with while sitting in storage, even if they’re just SLSA 0. Downstream users will just need to verify the VSA.&lt;br /&gt;&lt;br /&gt;Acme also wants to do some sort of verification on the import to their internal repo since it simplifies their security story. They’re not quite sure what this will look like yet.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;On install&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Acme also wants to do verification when an artifact is actually installed since it can remove a number of intermediaries from their TCB (their repo, the network, upstream storage systems).&lt;br /&gt;&lt;br /&gt;If they perform full verification at install then they must gather all the required information. That could be a lot of data, but it might be simplified by gathering the data from external sources and caching it in their internal repo. A larger problem is that it requires Acme to have established trust in all parties that produced that information (e.g. every builder of every package). For a complex supply chain that may be difficult.&lt;br /&gt;&lt;br /&gt;If Acme performs delegated verification, they only need the VSA for the packages being installed and to explicitly trust a handful of parties. This allows the complex full verification to be performed once while allowing all users of that package to perform a much simpler operation.&lt;br /&gt;&lt;br /&gt;Given these tradeoffs Acme prefers delegated verification at install time. Squirrel also really likes the idea and plans to build install time verification directly into the Squirrel tool.&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;On use&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Verification could also take place each time an artifact is actually used. In this model, latency and reliability are very important (a sudden increase in site traffic may necessitate a scaling operation launching many new jobs).&lt;br /&gt;&lt;br /&gt;Time of use verification allows the most context with which decisions can be made (“is this job allowed to run this code and is it free from vulns right now?”). It also allows policy changes to affect already built &amp;amp; installed software (which may or may not be desirable).&lt;br /&gt;&lt;br /&gt;Acme wants their users to be able to verify on use without too many dependencies so they plan to provide VSAs users can use to perform delegated verification when they start the container (perhaps using something like &lt;a href="https://kyverno.io/docs/writing-policies/verify-images/#verifying-image-attestations"&gt;Kyverno&lt;/a&gt;).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;How to handle artifacts without provenance?&lt;/b&gt;&lt;/h1&gt;Inevitably a build or system may require that an artifact without ‘original’ provenance is used. In these cases it may be desirable for the importer to generate provenance that details where it got this artifact. For example, this generated provenance shows that http://example.com/foo.tgz with sha256:abc was imported by ‘auto-importer’:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEhmAA5fBrS7Mhd_8uGzHUaOUCRED1TfAJSa7e2g7PijIWy42BY9pKsvNVYu5PJ1Zz_z9gRz5yqBbvWZeSJJyMAqH2QZs2aD2JkXw4DlFrTa2hL8FgFS014LBMryf9NqPsMjCg82QGYvlU632L6KsvfgibR9NP2qn489XX5LDagNYp4cRiIUKdwsqaP_pA" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="362" data-original-width="629" height="368" src="https://blogger.googleusercontent.com/img/a/AVvXsEhmAA5fBrS7Mhd_8uGzHUaOUCRED1TfAJSa7e2g7PijIWy42BY9pKsvNVYu5PJ1Zz_z9gRz5yqBbvWZeSJJyMAqH2QZs2aD2JkXw4DlFrTa2hL8FgFS014LBMryf9NqPsMjCg82QGYvlU632L6KsvfgibR9NP2qn489XX5LDagNYp4cRiIUKdwsqaP_pA=w640-h368" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Such an artifact would likely not be accepted at higher SLSA levels, but the provenance can be used to: 1) prevent tampering with the artifact after it’s been imported and 2) be a data point for future analysis (e.g. should we prioritize asking for foo.tgz to be distributed with native SLSA provenance?).&lt;br /&gt;&lt;br /&gt;Acme might be interested in taking this approach at some point, but they don’t need it at the moment.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;Next time&lt;/b&gt;&lt;/h1&gt;In our next post we’ll cover specific approaches that can be used to answer questions like “where should attestations and policies be stored?” and “how do I trust the attestations that I receive?”&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=HiWMOvBujTc:WFMLHFGpCHY:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=HiWMOvBujTc:WFMLHFGpCHY:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=HiWMOvBujTc:WFMLHFGpCHY:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/7341553905426522930/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=7341553905426522930&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7341553905426522930" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7341553905426522930" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/04/how-to-slsa-part-1-basics.html" title="How to SLSA Part 1 - The Basics" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/a/AVvXsEhmAA5fBrS7Mhd_8uGzHUaOUCRED1TfAJSa7e2g7PijIWy42BY9pKsvNVYu5PJ1Zz_z9gRz5yqBbvWZeSJJyMAqH2QZs2aD2JkXw4DlFrTa2hL8FgFS014LBMryf9NqPsMjCg82QGYvlU632L6KsvfgibR9NP2qn489XX5LDagNYp4cRiIUKdwsqaP_pA=s72-w640-h368-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-4063859688883354856</id>
    <published>2022-04-07T09:00:00.002-04:00</published>
    <updated>2022-04-07T11:33:30.120-04:00</updated>
    <title type="text">Improving software supply chain security with tamper-proof builds</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Asra Ali and Laurent Simon, Google Open Source Security Team (GOSST)&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Many of the recent high-profile software attacks that have alarmed open-source users globally were consequences of supply chain integrity vulnerabilities: attackers gained control of a build server to &lt;a href="https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/"&gt;use malicious source files&lt;/a&gt;, &lt;a href="https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/"&gt;inject malicious artifacts&lt;/a&gt; into a compromised build platform, and bypass trusted builders to &lt;a href="https://about.codecov.io/apr-2021-post-mortem/"&gt;upload malicious artifacts&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;Each of these attacks could have been prevented if there were a way to detect that the delivered artifacts diverged from the expected origin of the software. But until now, generating verifiable information that described where, when, and how software artifacts were produced (information known as provenance) was difficult. This information allows users to trace artifacts verifiably back to the source and develop risk-based policies around what they consume. Currently, provenance generation is not widely supported, and solutions that do exist may require migrating build processes to services like &lt;a href="https://github.com/tektoncd/chains"&gt;Tekton Chains&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This blog post describes a new method of generating non-forgeable provenance using &lt;a href="https://docs.github.com/en/actions/using-workflows"&gt;GitHub Actions workflows&lt;/a&gt; for isolation and &lt;a href="https://www.sigstore.dev/"&gt;Sigstore’s&lt;/a&gt; signing tools for authenticity. Using this approach, projects building on GitHub runners can achieve &lt;a href="https://slsa.dev/spec/v0.1/requirements"&gt;SLSA 3&lt;/a&gt; (the third of four progressive SLSA “levels”), which affirms to consumers that your artifacts are authentic and trustworthy. &lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Provenance&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;&lt;br /&gt;&lt;a href="https://slsa.dev/"&gt;SLSA&lt;/a&gt; ("Supply-chain Levels for Software Artifacts”) is a framework to help improve the integrity of your project throughout its development cycle, allowing consumers to trace the final piece of software you release all the way back to the source. Achieving a high SLSA level helps to improve the trust that your artifacts are what you say they are.&lt;br /&gt;&lt;br /&gt;This blog post focuses on build provenance, which gives users important information about the build: who performed the release process? Was the build artifact protected against malicious tampering? Source provenance describes how the source code was protected, which we’ll cover in future blog posts, so stay tuned.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Go prototype to generate non-forgeable build provenance&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;&lt;br /&gt;To create tamperless evidence of the build and allow consumer verification, you need to:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Isolate the provenance generation from the build process;&lt;/li&gt;&lt;li&gt;Isolate against maintainers interfering in the workflow;&lt;/li&gt;&lt;li&gt;Provide a mechanism to identify the builder during provenance verification.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;The full isolation described in the first two points allows consumers to trust that the provenance was faithfully recorded; entities that provide this guarantee are called trusted builders.&lt;br /&gt;&lt;br /&gt;Our &lt;a href="https://github.com/slsa-framework/slsa-github-generator-go"&gt;Go prototype&lt;/a&gt; solves all three challenges. It also includes running the build inside the trusted builder, which provides a strong guarantee that the build achieves SLSA 3’s &lt;a href="https://slsa.dev/spec/v0.1/requirements#ephemeral-environment"&gt;ephemeral&lt;/a&gt; and &lt;a href="https://slsa.dev/spec/v0.1/requirements#isolated"&gt;isolated&lt;/a&gt; requirement.&lt;h2 style="text-align: left;"&gt;&lt;/h2&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;How does it work?&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;The following steps create the trusted builder that is necessary to generate provenance in isolation from the build and maintainer’s interference.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Step One: Create a reusable workflow on GitHub runners&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Leveraging GitHub’s &lt;a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows"&gt;reusable workflows&lt;/a&gt; provides the isolation mechanism from both maintainers’ caller workflows and from the build process. Within the workflow, Github Actions creates &lt;a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#the-components-of-github-actions"&gt;fresh instances of virtual machines (VMs), called runners, for each job&lt;/a&gt;. These separate VMs give the necessary isolation for a trusted builder, so that different VMs compile the project and generate and sign the SLSA provenance (see diagram below).&lt;br /&gt;&lt;br /&gt;Running the workflow on &lt;a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners"&gt;GitHub-hosted runners&lt;/a&gt; gives the guarantee that the code run is in fact the intended workflow, which &lt;a href="https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners"&gt;self-hosted runners&lt;/a&gt; do not. This prototype relies on GitHub to run the exact code defined in the workflow.&lt;br /&gt;&lt;br /&gt;The reusable workflow also protects against possible interference from maintainers, who could otherwise try to define the workflow in a way that interferes with the builder. The only way to interact with a reusable workflow is through the input parameters it exposes to the calling workflow, which stops maintainers from altering information via &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#env"&gt;environment variables&lt;/a&gt;, &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idsteps"&gt;steps&lt;/a&gt;, &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idservices"&gt;services&lt;/a&gt; and &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#defaults"&gt;defaults&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;To protect against the possibility of one job (e.g. the build step) tampering with the other artifacts used by another job (the provenance step), this approach uses a trusted channel to protect the integrity of the data. We use &lt;a href="https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs"&gt;job outputs&lt;/a&gt; to send hashes (due to size limitations) and then use the hashes to verify the binary received via the untrusted artifact registry. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Step 2: Use OpenID Connect (OIDC) to prove the identity of the workflow to an external service (Sigstore)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;OpenID Connect (OIDC) is a standard used across the web for identity providers (e.g., Google) to attest to the identity of a user for a third party. GitHub now &lt;a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect"&gt;supports&lt;/a&gt; OIDC in their workflows. Each time a workflow is run, a runner can mint a unique &lt;a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token"&gt;JWT token&lt;/a&gt; from GitHub’s OIDC provider. The token contains verifiable information of the workflow identity, including the caller repository, commit hash, trigger, and the current (reuseable) workflow path and reference. &lt;br /&gt;&lt;br /&gt;Using OIDC, the workflow proves its identity to &lt;a href="https://www.sigstore.dev/"&gt;Sigstore's&lt;/a&gt; Fulcio root Certificate Authority, which acts as an external verification service. Fulcio signs a short-lived certificate attesting to an ephemeral signing key generated in the runner and tying it to the workload identity. A record of signing the provenance is kept in Sigstore’s transparency log &lt;a href="https://github.com/sigstore/rekor"&gt;Rekor&lt;/a&gt;. Users can use the signing certificate as a trust anchor to verify that the provenance was authenticated and non-forgeable; it must have been created inside the trusted builder.&lt;h1 style="text-align: left;"&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;Verification&lt;/b&gt;&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;The consumer can verify the artifact and its signed provenance with these steps:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Look up the corresponding Rekor log entry and verify the signature;&lt;/li&gt;&lt;li&gt;Verify the trusted builder identity by extracting it from the signing certificate;&lt;/li&gt;&lt;li&gt;Check that the provenance information matches the expected source and build.&lt;/li&gt;&lt;/ol&gt;See an &lt;a href="https://github.com/slsa-framework/slsa-github-generator-go"&gt;example in action&lt;/a&gt; in the official repository.&lt;br /&gt;&lt;br /&gt;Performing these steps guarantees to the consumer that the binary was produced in the trusted builder at a given commit hash attested to in the provenance. They can trust that the information in the provenance was non-forgeable, allowing them to trust the build “recipe” and trace their artifact verifiably back to the source.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Extra Bonus: Keyless signing&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;One extra benefit of this method is that maintainers don’t need to manage or distribute cryptographic keys for signing, avoiding the &lt;a href="https://caremad.io/posts/2013/07/packaging-signing-not-holy-grail/"&gt;notoriously difficult problem&lt;/a&gt; of key management. The OIDC protocol requires no hardcoded, long-term secrets be stored in GitHub's secrets, which sidesteps the potential problem of key mismanagement invalidating the SLSA provenance. Consumers simply use OIDC to verify that the binary artifact was built from a trusted builder that produced the expected provenance. &lt;br /&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Next Steps&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;Utilizing the SLSA framework is a proven way for ensuring software supply-chain integrity at scale. This prototype shows  that achieving high SLSA levels is easier than ever thanks to the newest features of popular CI/CD systems and open-source tooling. Increased adoption of tamper-safe (SLSA 3+) build services will contribute to a stronger open-source ecosystem and help close one easily exploited gap in the current supply chain.&lt;br /&gt;&lt;br /&gt;We encourage testing and adoption and welcome any improvements to the project. Please share feedback, comments and suggestions at &lt;a href="https://github.com/slsa-framework/slsa-github-generator-go"&gt;slsa-github-generator-go&lt;/a&gt; and &lt;a href="https://github.com/slsa-framework/slsa-verifier"&gt;slsa-verifier&lt;/a&gt; project repositories. We will officially release v1 in a few weeks!&lt;br /&gt;&lt;br /&gt;In follow-up posts, we will demonstrate adding non-forgeable source provenance attesting to secure repository settings, and showcase the same techniques for other build toolchains and package managers, etc. Stay tuned!&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=2eT0KHD6RCQ:dY0zq1WiAYw:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=2eT0KHD6RCQ:dY0zq1WiAYw:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=2eT0KHD6RCQ:dY0zq1WiAYw:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/4063859688883354856/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=4063859688883354856&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4063859688883354856" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4063859688883354856" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/04/improving-software-supply-chain.html" title="Improving software supply chain security with tamper-proof builds" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-5716345963742339085</id>
    <published>2022-04-05T09:00:00.006-04:00</published>
    <updated>2022-04-05T10:48:50.720-04:00</updated>
    <title type="text">Find and $eek! Increased rewards for Google Nest &amp; Fitbit devices</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Medha Jain, Program Manager, Devices &amp;amp; Services Security&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;At Google, we constantly invest in security research to raise the bar for our devices, keeping our users safe and building their trust in our products. In 2021, we published &lt;a href="https://safety.google/nest/"&gt;Google Nest security commitments&lt;/a&gt;, in which we committed to engage with the research community to examine our products and services and report vulnerabilities.&lt;br /&gt;&lt;br /&gt;We are now looking to deepen this relationship and accelerate the path toward building more secure devices. Starting today, we will introduce a new vulnerability rewards structure for submissions impacting &lt;a href="https://store.google.com/category/connected_home?e=SharedFeatureEnablePolarisNavTest%3A%3ALaunch&amp;amp;hl=en-US"&gt;smart home&lt;/a&gt; (Google Nest) and &lt;a href="https://store.google.com/category/fitbit?e=SharedFeatureEnablePolarisNavTest%3A%3ALaunch&amp;amp;hl=en-US"&gt;wearables&lt;/a&gt; (Fitbit) devices through our &lt;a href="https://bughunters.google.com/about"&gt;Bug Hunters&lt;/a&gt; platform. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Bonus!&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;We are paying higher rewards retroactively for eligible Google Nest and Fitbit devices reports submitted in 2021. And, starting today, for the next six months, will double the reward amount for all new eligible reports applicable to Google Nest &amp;amp; Fitbit devices in scope.&lt;br /&gt;&lt;br /&gt;We will continue to take reports on our web applications, services, and mobile apps at their existing reward levels. Please keep those coming! &lt;br /&gt;&lt;br /&gt;&lt;b&gt;An enhanced rewards program&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Building on our previous programs to improve devices' embedded security posture, we’re bringing all our first-party devices under a single program, starting with Google Nest, Fitbit, and Pixel.&lt;br /&gt;This program extends the Android Security Reward Program, making it easier for researchers to submit a vulnerability in first-party devices and improving consistency across our severity assignments. Refer to the &lt;a href="https://bughunters.google.com/about/rules/6171833274204160/android-security-rewards-program-rules"&gt;Android and Google Devices Security Reward Program&lt;/a&gt; for more details.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;What interests us?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;We encourage researchers to report firmware, system software, and hardware vulnerabilities. Our wide diversity of platforms provides researchers with a smorgasbord of environments to explore. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;What's next?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;We will be at the &lt;a href="http://Hardwear.io"&gt;Hardwear.io&lt;/a&gt; conference this year! The VRP team is looking forward to meeting our security peers in person. We’ll be talking about the architecture of a couple of our devices, hoping to give security researchers a head start in finding vulnerabilities. We’ll have plenty of swag, too!&lt;br /&gt;&lt;br /&gt;We will continue to enhance the researchers' experience and participation. We intend to add training documentations and target areas that interest us as we grow the program.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;A huge thanks to Sarah Jacobus, Adam Bacchus,  Ankur Chakraborty, Eduardo' Vela" &amp;lt;Nava&amp;gt;, Jay Cox, and Nic Watson.&lt;/i&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=lXwoWR8o25k:5yBtGAb2yvo:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=lXwoWR8o25k:5yBtGAb2yvo:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=lXwoWR8o25k:5yBtGAb2yvo:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/5716345963742339085/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5716345963742339085&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5716345963742339085" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5716345963742339085" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/04/find-and-eek-increased-rewards-for.html" title="Find and $eek! Increased rewards for Google Nest &amp; Fitbit devices" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-3845543190783835216</id>
    <published>2022-03-10T13:33:00.003-05:00</published>
    <updated>2022-03-23T13:03:26.249-04:00</updated>
    <title type="text">What's up with in-the-wild exploits? Plus, what we're doing about it.</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Adrian Taylor, Chrome Security Team&lt;/span&gt;&lt;p&gt;If you are a regular reader of our &lt;a href="https://chromereleases.googleblog.com/search/label/Stable%20updates"&gt;Chrome release blog&lt;/a&gt;, you may have noticed that phrases like 'exploit for CVE-1234-567 exists in the wild' have been appearing more often recently. In this post we'll explore why there seems to be such an increase in exploits, and clarify some misconceptions in the process. We'll then share how Chrome is continuing to make it harder for attackers to achieve their goals. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;How things work today &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;While the increase may initially seem concerning, it’s important to understand the reason behind this trend. If it's because there are many more exploits in the wild, it could point to a worrying trend. On the other hand, if we’re simply gaining more visibility into exploitation by attackers, it's actually a good thing! It’s good because it means we can respond by providing bug fixes to our users faster, and we can learn more about how real attackers operate. &lt;/p&gt;&lt;p&gt;So, which is it? It’s likely a little of both. &lt;/p&gt;&lt;p&gt;Our colleagues at Project Zero &lt;a href="https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=1123292625"&gt;publicly track all known in-the-wild “zero day” bugs&lt;/a&gt;. Here’s what they’ve reported for browsers: &lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEiQB-OawbmqsOQaigkJxRchRxwzNGb5sIZlPiYo1378oNW_CIq_ze7MkasyAohYGNQZS59-wmbQY5Q36CS5RjRG5pLRE1ko51GOYhY29oWZhxp6gXLHPPHKu9uk55yzcQ2LRjR45MeAs-dR8o8SKSq_5oEtL9Is_gcy994qKzZG72U9CtFIVup05Spnpw" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img alt="" border="0" data-original-height="339" data-original-width="555" src="https://blogger.googleusercontent.com/img/a/AVvXsEiQB-OawbmqsOQaigkJxRchRxwzNGb5sIZlPiYo1378oNW_CIq_ze7MkasyAohYGNQZS59-wmbQY5Q36CS5RjRG5pLRE1ko51GOYhY29oWZhxp6gXLHPPHKu9uk55yzcQ2LRjR45MeAs-dR8o8SKSq_5oEtL9Is_gcy994qKzZG72U9CtFIVup05Spnpw" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;First, we don’t believe there was &lt;em&gt;no&lt;/em&gt; exploitation of Chromium based browsers between 2015 and 2018. We recognize that we don’t have full view into active exploitation, and just because we didn’t detect any zero-days during those years, doesn’t mean exploitation didn’t happen. Available exploitation data suffers from sampling bias. &lt;/p&gt;&lt;p&gt;Teams like Google’s &lt;a href="https://blog.google/threat-analysis-group/how-we-protect-users-0-day-attacks/"&gt;Threat Analysis Group&lt;/a&gt; are also becoming increasingly sophisticated in their efforts to protect users by discovering zero-days and in-the-wild attacks. A good example is &lt;a href="https://www.youtube.com/watch?v=g09EvzVsDbk"&gt;a bug in our Portals feature&lt;/a&gt; that we fixed last fall. This bug was discovered by a team member in Switzerland and reported to Chrome through our bug tracker. While Chrome normally keeps each web page locked away in a box called the “renderer sandbox,” this bug allowed the code to break out, potentially allowing attackers to steal information. Working across multiple time zones and teams, it took the team three days to come up with a fix and roll it out, as detailed in our video on the process:    &lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe class="BLOG_video_class" allowfullscreen="" youtube-src-id="VN-3-ov8uMM" width="600" height="498" src="https://www.youtube.com/embed/VN-3-ov8uMM"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Why so many exploits? &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;There are a number of factors at play, from changes in vendor and attacker behavior, to changes in the software itself. Here are four in particular that we've been discussing and exploring as a team. &lt;/p&gt;&lt;p&gt;First, we believe we’re seeing more bugs thanks to vendor transparency. Historically, many browser makers didn’t announce that a bug was being exploited in the wild, even if they knew it was happening. Today, most major browser makers have increased transparency via publishing details in release communications, and that may account for more publicly tracked “in the wild” exploitation. These efforts have been spearheaded by both browser security teams and dedicated research groups, such as &lt;a href="https://googleprojectzero.blogspot.com/"&gt;Project Zero.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Second, we believe we’re seeing more exploits due to evolved attacker focus. There are two reasons to suspect attackers might be choosing to attack Chrome more than they did in the past. &lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;strong&gt;Flash deprecation&lt;/strong&gt;: In 2015 and 2016, Flash was a primary exploitation target. Chrome gradually made Flash a less attractive target for attackers &lt;a href="https://www.chromium.org/flash-roadmap/"&gt;(for instance requiring user clicks to activate Flash content)&lt;/a&gt; before finally removing it in Chrome 88 in January last year. As Flash is no longer available, attackers have had to switch to a harder target: the browser itself.  &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Chromium popularity&lt;/strong&gt;: Attackers go for the most popular target. In early 2020, Edge switched to using the Chromium rendering engine. If attackers can find a bug in Chromium, they can now attack a greater percentage of users. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Third, some attacks that could previously be accomplished with a single bug now require multiple bugs. Before 2015, only a single in-the-wild bug was required to steal a user’s secrets from other websites, because multiple web pages lived together in a single &lt;a href="https://www.chromium.org/developers/design-documents/multi-process-architecture"&gt;renderer process&lt;/a&gt;. If an attacker could compromise the renderer process belonging to a malicious website that a user visited, they might have been able to access the credentials for some other more sensitive website. &lt;/p&gt;&lt;p&gt;With Chrome’s multiyear &lt;a href="https://www.chromium.org/Home/chromium-security/site-isolation"&gt;Site Isolation&lt;/a&gt; project largely complete, a single bug is almost never sufficient to do anything really bad. Attackers often need to &lt;em&gt;chain &lt;/em&gt;at least two bugs: first, to compromise the renderer process, and second, to jump into the privileged Chrome browser process or directly into the device operating system. Sometimes multiple bugs are needed to achieve one or both of these steps. &lt;/p&gt;&lt;p&gt;So, to achieve the same result, an attacker generally now has to use more bugs than they previously did. For exactly the same level of attacker success, we’d see more in-the-wild bugs reported over time, as we add more layers of defense that the attacker needs to bypass. &lt;/p&gt;&lt;p&gt;Fourth, there’s simply the fact that &lt;em&gt;software has bugs&lt;/em&gt;. Some fraction of those bugs are exploitable. Browsers increasingly mirror the complexity of operating systems — providing access to your peripherals, filesystem, 3D rendering, GPUs — and more complexity means more bugs. &lt;/p&gt;&lt;p&gt;Ultimately, we believe data is an important part of the story, but the absolute number of exploited bugs isn't a sufficient measure of security risk. Since some security bugs are inevitable, how a software vendor architects their software (so that the impact of any single bug is limited) and responds to critical security bugs is often much more important than the specifics of any single bug. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;How Chrome is raising the bar&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The Chrome team works hard to both detect and fix bugs before releases and get bug fixes out to users as quickly as possible. We’re proud of &lt;a href="https://googleprojectzero.blogspot.com/2022/02/a-walk-through-project-zero-metrics.html"&gt;our record at fixing serious bugs quickly&lt;/a&gt;, &lt;em&gt;and&lt;/em&gt; we are continually working to do better. &lt;/p&gt;&lt;p&gt;For example, one area of concern for us is the risk of n-day attacks: that is, exploitation of bugs we’ve already fixed, where the fixes are visible in our open-source code repositories. We have greatly reduced our “patch gap” from 35 days in Chrome 76 to an average of 18 days in subsequent milestones, and we expect this to reduce slightly further with &lt;a href="https://blog.chromium.org/2021/03/speeding-up-release-cycle.html"&gt;Chrome’s faster release cycle&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;Irrespective of how quickly bugs are fixed, any in-the-wild exploitation is bad. Chrome is working hard to make it expensive and difficult for attackers to achieve their goals. &lt;/p&gt;&lt;p&gt;Some examples of the projects ongoing: &lt;/p&gt;&lt;ul&gt; &lt;li&gt;We continue to strengthen Site Isolation, &lt;a href="https://security.googleblog.com/2021/07/protecting-more-with-site-isolation.html"&gt;especially on Android&lt;/a&gt;.  &lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit#heading=h.fg3qxf1x0p2q"&gt;The V8 heap sandbox&lt;/a&gt; will prevent attackers using JavaScript just-in-time (JIT) compilation bugs to compromise the renderer process. This will require attackers to add a &lt;em&gt;third&lt;/em&gt; bug to these exploit chains, which means increased security, but could increase the amount of in-the-wild exploits reported.   &lt;/li&gt;&lt;li&gt;The &lt;a href="https://www.youtube.com/watch?v=gevcleRHRZ4"&gt;MiraclePtr and *Scan&lt;/a&gt; projects aim to prevent exploitability of many of our largest class of browser process bugs, called “use-after-free”. We will be applying similar systematic solutions to other classes of bugs over time.  &lt;/li&gt;&lt;li&gt;Since “memory safety” bugs account for 70% of the exploitable security bugs, we aim to write new parts of Chrome in &lt;a href="https://security.googleblog.com/2021/09/an-update-on-memory-safety-in-chrome.html"&gt;memory-safe languages&lt;/a&gt;.  &lt;/li&gt;&lt;li&gt;We continue to work on post-exploitation mitigations such as &lt;a href="https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html"&gt;CET&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard"&gt;CFG&lt;/a&gt;. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We are well past the stage of having “easy wins” when it comes to raising the bar for security. All of these are long term projects with significant engineering challenges. But as we've shown with Site Isolation, Chrome isn't afraid of making long term investments in major security engineering projects. One of the major challenges is performance: all of these technologies (except memory safe languages) could risk slowing the browser. Expect a series of blog posts over the coming months as we explore performance vs. security trade-offs. These decisions are &lt;em&gt;really hard&lt;/em&gt;: we do not want to make Chrome slower for billions of people, especially as this disproportionately hits users with slower devices – we strive to make Chrome secure for all our users, not just those with the high end systems. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;How you can help&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Above all: if Chrome is reminding you to update, please do! &lt;/p&gt;&lt;p&gt;If you’re an enterprise IT professional, keep your users up-to-date by keeping auto-update on, and familiarize yourself with &lt;a href="https://chromeenterprise.google/browser/security/"&gt;the added enterprise policies and controls &lt;/a&gt;that you can apply to Chrome within your organization. We strongly advise not focusing on zero-days when making decisions about updates, but instead to assume any Chrome security bug is under exploitation as an n-day. &lt;/p&gt;&lt;p&gt;If you're a security researcher, you can report bugs you find to the &lt;a href="https://g.co/chrome/vrp"&gt;Chrome Vulnerability Rewards Program&lt;/a&gt; — and thanks for helping us make Chrome safer for everyone! &lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=FtKMSpzhp40:Hh2k00kLaa0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=FtKMSpzhp40:Hh2k00kLaa0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=FtKMSpzhp40:Hh2k00kLaa0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/3845543190783835216/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=3845543190783835216&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/3845543190783835216" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/3845543190783835216" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/03/whats-up-with-in-wild-exploits-plus.html" title="What's up with in-the-wild exploits? Plus, what we're doing about it." />
    <author>
      <name>Google</name>
      <uri>http://www.blogger.com/profile/11822708545141062574</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/a/AVvXsEiQB-OawbmqsOQaigkJxRchRxwzNGb5sIZlPiYo1378oNW_CIq_ze7MkasyAohYGNQZS59-wmbQY5Q36CS5RjRG5pLRE1ko51GOYhY29oWZhxp6gXLHPPHKu9uk55yzcQ2LRjR45MeAs-dR8o8SKSq_5oEtL9Is_gcy994qKzZG72U9CtFIVup05Spnpw=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-4848280266237406480</id>
    <published>2022-02-23T12:00:00.012-05:00</published>
    <updated>2022-02-23T14:07:46.338-05:00</updated>
    <title type="text">Mitigating kernel risks on 32-bit ARM</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Ard Biesheuvel, Google Open Source Security Team&amp;nbsp;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;Linux kernel support for the 32-bit ARM architecture was contributed in the late 90s, when there was little corporate involvement in Linux development, and most contributors were students or hobbyists, tinkering with development boards, often without much in the way of documentation.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;img height="395" src="https://lh3.googleusercontent.com/xqtprmH0Vz8UB1pP0jKkThzSX9SL2FQuquzfu2T0Y4Yf_7IytXO6ECeuS8jPrLWT3Q_o6dv1_np28fIgyDXucoNNtwGdcUU8hNQtnMAtLPK1HUzQBoIWBByZtF5fQXUMXig6vGjJpudISN3HMhJppzERq0ZTvKkIA4SbKO6BLKiITWxy=w640-h395" width="640" /&gt;&lt;/div&gt;&lt;br /&gt;Now 20+ years later, 32-bit ARM's maintainer has downgraded its support level to &lt;a href="https://git.kernel.org/linus/18bd49043caa8b272649d4868c29133eb0a3d143"&gt;'odd fixes&lt;/a&gt;,' while remaining active as a kernel contributor. This is a common pattern for aging and obsolete architectures: corporate funding for Linux kernel development has tremendously increased the pace of development, but only for architectures with a high return on investment. As a result, the 32-bit ARM port of Linux is essentially in maintenance-only mode, and lacks core Linux advancements such as THREAD_INFO_IN_TASK or VMAP_STACK, which protect against stack overflow attacks.&lt;br /&gt;&lt;br /&gt;The lack of developer attention does not imply that the 32-bit ARM port has ceased to make economic sense, though. Instead, it has evolved from being one of the spearheads of Linux innovation to a stable and mature platform, and while funding its upstream development may not make sense in the long term, deploying 32-bit ARM into the field today most certainly still makes economic sense when margins are razor thin and &lt;a href="https://en.wikipedia.org/wiki/Bill_of_materials"&gt;BOM&lt;/a&gt; costs need to be kept to an absolute minimum. This is why 32-bit ARM is still widely used in embedded systems like set-top boxes and wireless routers.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;Running 32-bit Linux on 64-bit ARM systems&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Ironically, at these low price points, the DRAM is actually the dominant component in terms of BOM cost, and many of these 32-bit ARM systems incorporate a cheap ARMv8 &lt;a href="https://en.wikipedia.org/wiki/System_on_a_chip"&gt;SoC&lt;/a&gt; that happens to be capable of running in 64-bit mode as well. The reason for running 32-bit applications nonetheless is that these generally use less of the expensive DRAM, and can be deployed directly without the need to recompile the binaries. As 32-bit applications don't need a 64-bit kernel (which itself uses more memory due to its internal use of 64-bit pointers), the product ships with a 32-bit kernel instead.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;If you're choosing to use a 32-bit kernel for its smaller memory footprint, it's not without risks. You'll likely experience performance issues, unpatched vulnerabilities, and unexpected misbehaviors such as:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;32-bit kernels generally cannot manage more than 1 GiB of physical memory without resorting to HIGHMEM bouncing, and cannot provide a full virtual address space of 4 GiB to user space, as 64-bit kernels can.&lt;/li&gt;&lt;li&gt;Side channels or other flaws caused by silicon errata may exist that haven't been mitigated in 32-bit kernels. For example, the hardening against Spectre and Meltdown vulnerabilities were only done for ARMv7 32-bit only CPUs, and many ARMv8 cores running in 32-bit mode may still be vulnerable (only Cortex-A73 and A75 are handled specifically). And in general, silicon flaws in 64-bit parts that affect the 32-bit kernel are less likely to be found or documented, simply because the silicon validation teams don’t prioritize them.&lt;/li&gt;&lt;li&gt;The 32-bit ARM kernel does not implement the elaborate &lt;a href="https://youtu.be/CUAXCeRjw3c?t=2687"&gt;alternatives patching framework&lt;/a&gt; that is used by other architectures to implement handling of silicon errata, which are particular to certain revisions of certain CPUs. Instead, on 32-bit multiplatform kernels, we simply enable all errata workarounds that may be needed by any of the cores that may ever run the image in question, potentially affecting performance unnecessarily on cores that have no need for them.&lt;/li&gt;&lt;li&gt;Silicon vendors are phasing out 32-bit support in the longer term. Given an ecosystem containing a handful of operating systems and thousands of applications, support for 32-bit operating systems (which is more complex technically) is highly likely to be dropped first. For products with longer life cycles, long-term procurement contracts for components available today are usually much more costly than adjusting the BOM over time and using newer, cheaper parts.&lt;/li&gt;&lt;li&gt;The 32-bit kernel does not implement &lt;a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f80fb3a3d50843a401dac4b566b3b131da8077a2"&gt;kernel address space randomization&lt;/a&gt;, and even if it did, its comparatively tiny address space simply leaves very little space for randomization. Other hardening features, such as &lt;a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c55191e96caa9"&gt;rodata=full&lt;/a&gt; or &lt;a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=87143f404f338"&gt;hierarchical eXecute Never attributes&lt;/a&gt;, are missing as well on 32-bit, and are not likely to be implemented, either due to lack of support in the architecture, or because of the complexity of the 32-bit memory management code, which still supports all of the different architecture revisions dating back to the initial Linux port running on the &lt;a href="https://en.wikipedia.org/wiki/Risc_PC"&gt;Risc PC&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Keeping the 32-bit ARM kernel secure&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;There are cases, though, where using the 32-bit kernel is the only option, e.g., if the CPUs are in fact 32-bit only (which is the case even for some ARMv8 cores such as Cortex-A32), or when relying on an existing 32-bit only codebase running in the kernel (drivers for legacy peripherals). Note that in such cases, it still makes sense to use the most recent kernel version compatible with the hardware, since we are in fact making an effort to enable some of the existing hardening features on 32-bit ARM as well.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;THREAD_INFO_IN_TASK for v7 SMP cores&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;The v5.16 release of the Linux kernel &lt;a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=18ed1c01a7dd3d7c780b06a49124da237a4c1790"&gt;implements&lt;/a&gt; support for THREAD_INFO_IN_TASK when running on ARMv7 SMP systems. This protects the kernel's per-task bookkeeping (called thread_info), which lives on the far (and normally unused) end of the stack, against stack overflows which may occur in rare -yet sometimes exploitable- cases where the control flow of the program simply ends up accumulating more state than the stack can hold. (Note that a stack overflow is not the same as a stack buffer overflow, where the overflow happens in the opposite direction.)&lt;/blockquote&gt;&lt;br /&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;By moving thread_info off the stack and into the kernel heap, and by using a special SMP CPU register to keep track of its location, we can mitigate the risk of stack overflows resulting in thread_info corruption. However, it does not prevent stack overflows themselves: these may still occur, and result in corruption of other data structures that happen to be adjacent to the task stack in memory.&lt;/blockquote&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;THREAD_INFO_IN_TASK for other cores&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;For CPUs that lack this special SMP CPU register, we also proposed an implementation of THREAD_INFO_IN_TASK that is expected to land in v5.18. Instead of a special register, it uses a global variable to keep track of the location of thread_info.&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;VMAP_STACK support&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;Preventing stack overflows from corrupting unrelated memory contents is the goal of VMAP_STACK, which we are &lt;a href="https://lore.kernel.org/linux-arm-kernel/20211122092816.2865873-1-ardb@kernel.org/"&gt;enabling for 32-bit ARM&lt;/a&gt; as well. When VMAP_STACK is enabled, kernel mode stacks are allocated from the kernel heap as before, but mapped into a different part of the kernel's address space, and surrounded by guard regions, which are guaranteed to be kept unpopulated. Given that accesses to such unpopulated regions will trigger an exception, the kernel's memory management layer can step in and terminate the program as soon as a stack overflow occurs, and prevent it from causing memory corruption.&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Support for IRQ stacks&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Coming up with a bounded worst case on which to base the size of the kernel stack is rather hard, especially given the fact that it is shared between the program itself and any exception handling routines that may be called on its behalf, including interrupt handlers. To mitigate the risk of a pathological worst case occurring, where an interrupt fires that needs a lot of stack space right at a time when most of the stack is already being used by the program, we are also &lt;a href="https://lore.kernel.org/linux-arm-kernel/20211115084732.3704393-1-ardb@kernel.org/"&gt;enabling IRQ_STACKS for 32-bit ARM&lt;/a&gt;, which will run handlers of both hard and soft interrupts from a dedicated stack, one for each CPU. By decoupling the task and interrupt contexts like this, the likelihood that a well-behaved program needs to be terminated due to stack overflow should be all but eliminated.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;div&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;With &lt;a href="https://lore.kernel.org/linux-arm-kernel/20211208092611.1012773-1-ardb@kernel.org/"&gt;these changes&lt;/a&gt; in place, kernel stack overflow protection will be available for all ARM systems supported by Linux, including ancient ones like the Risc PC or &lt;a href="https://lore.kernel.org/linux-arm-kernel/874k7pn923.wl-maz@kernel.org/"&gt;Netwinder&lt;/a&gt;, provided that it runs a Linux distribution that is &lt;a href="https://security.googleblog.com/2021/08/linux-kernel-security-done-right.html"&gt;keeping up with the times.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;img height="400" src="https://lh4.googleusercontent.com/2jCuWtsHluCbA9MGLUDJbLpQUngJ1CSXHkcsqdKKa6IJPryo4Bf0isYrjc1yIio5gaXKuujE4B8d2G7CbigY6E5BBwLq15U9HWZ4tuihwicOvSHKzS_4tPs5kULck9LvtTIXZxV0N3EQ_F1dcVEictxPKdjA1BLoEJPwuaXOf2w_hU2v=w300-h400" width="300" /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;However, relying on legacy hardware and software comes with a risk, and even though we try to help keep users of the 32-bit kernel as safe as we reasonably can, it is not the right choice for new designs that incorporate 64-bit capable hardware.&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=dtkX4NMfhwE:mBC9GLtk3eE:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=dtkX4NMfhwE:mBC9GLtk3eE:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=dtkX4NMfhwE:mBC9GLtk3eE:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/4848280266237406480/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=4848280266237406480&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4848280266237406480" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4848280266237406480" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/02/mitigating-kernel-risks-on-32-bit-arm.html" title="Mitigating kernel risks on 32-bit ARM" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh3.googleusercontent.com/xqtprmH0Vz8UB1pP0jKkThzSX9SL2FQuquzfu2T0Y4Yf_7IytXO6ECeuS8jPrLWT3Q_o6dv1_np28fIgyDXucoNNtwGdcUU8hNQtnMAtLPK1HUzQBoIWBByZtF5fQXUMXig6vGjJpudISN3HMhJppzERq0ZTvKkIA4SbKO6BLKiITWxy=s72-w640-h395-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-1466237426374934289</id>
    <published>2022-02-14T12:07:00.001-05:00</published>
    <updated>2022-02-14T12:07:20.862-05:00</updated>
    <title type="text">🌹 Roses are red, Violets are blue 💙 Giving leets 🧑‍💻 more sweets 🍭 All of 2022!</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Eduardo Vela, Vulnerability Matchmaker&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;Until December 31 2022 we will pay 20,000 to 91,337 USD for exploits of vulnerabilities in the Linux Kernel, Kubernetes, GKE or kCTF that are exploitable on our test lab.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We launched an &lt;a href="https://security.googleblog.com/2021/11/trick-treat-paying-leets-and-sweets-for.html"&gt;expansion&lt;/a&gt; of kCTF VRP on November 1, 2021 in which we paid 31,337 to 50,337 USD to those that are able to compromise our kCTF cluster and obtain a flag. We increased our rewards because we recognized that in order to attract the attention of the community we needed to match our rewards to their expectations. We consider the expansion to have been a success, and because of that we would like to extend it even further to at least until the end of the year (2022).&lt;br /&gt;&lt;br /&gt;During the last three months, we received 9 submissions and paid over 175,000 USD so far. The submissions included five 0days and two 1days. Three of these are already fixed and are public: &lt;a href="https://access.redhat.com/security/cve/cve-2021-4154"&gt;CVE-2021-4154&lt;/a&gt;, &lt;a href="https://ubuntu.com/security/CVE-2021-22600"&gt;CVE-2021-22600&lt;/a&gt; (&lt;a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=ec6af094ea28f0f2dda1a6a33b14cd57e36a9755"&gt;patch&lt;/a&gt;) and &lt;a href="https://ubuntu.com/security/CVE-2022-0185"&gt;CVE-2022-0185&lt;/a&gt; (&lt;a href="https://www.willsroot.io/2022/01/cve-2022-0185.html"&gt;writeup&lt;/a&gt;). These three bugs were first found by &lt;a href="https://syzkaller.appspot.com/upstream"&gt;Syzkaller&lt;/a&gt;, and two of them had already been fixed on the mainline and stable versions of the Linux Kernel at the time they were reported to us.&lt;br /&gt;&lt;br /&gt;Based on our experience these last 3 months, we made a few improvements to the submission process:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Reporting a 0day will not require including a flag at first. We heard some concerns from participants that exploiting a 0day in the shared cluster could leak it to other participants. As such, we will only ask for the exploit checksum (but you still have to exploit the bug and submit the flag within a week after the patch is merged on &lt;a href="https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux"&gt;mainline&lt;/a&gt;). Please make sure that your exploit &lt;a href="https://cloud.google.com/container-optimized-os/docs/concepts/security#security-hardened_kernel"&gt;works on COS&lt;/a&gt; with minimal modifications (test it on your own &lt;a href="https://github.com/google/google-ctf/tree/master/vrp"&gt;kCTF cluster&lt;/a&gt;), as some common exploit primitives (like eBPF and userfaultfd) might not be available.&lt;/li&gt;&lt;li&gt;Reporting a 1day will require including a link to the patch. We will automatically publish the patches of all submissions if the flag is valid. We also encourage you all to include a link to a Syzkaller dashboard report if applicable in order to help reduce duplicate submissions and so you can see which bugs were exploited already.&lt;/li&gt;&lt;li&gt;You will be able to submit the exploit in the same form you submit the flag. If you had submitted an exploit checksum for a 0day, please make sure that you include the original exploit as well as the final exploit and make sure to submit it within a week after the patch is merged on &lt;a href="https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux"&gt;mainline&lt;/a&gt;. The original exploit shouldn't require major modifications to work. Note that we need to be able to understand your exploit, so please add comments to explain what it is doing.&lt;/li&gt;&lt;li&gt;We are now running two clusters, one on the &lt;a href="https://cloud.google.com/kubernetes-engine/docs/release-notes-regular"&gt;REGULAR&lt;/a&gt; release channel and another one on the &lt;a href="https://cloud.google.com/kubernetes-engine/docs/release-notes-rapid"&gt;RAPID&lt;/a&gt; release channel. This should provide more flexibility whenever a vulnerability is only exploitable on modern versions of the Linux Kernel or Kubernetes.&lt;/li&gt;&lt;/ul&gt;We are also changing the reward structure slightly. Going forward the rewards will be:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;31,337 USD to the first valid exploit submission for a given vulnerability. This will only be paid once per vulnerability and only once per cluster version/build (available at /etc/node-os-release).&lt;/li&gt;&lt;li&gt;0 USD for exploits for duplicate exploits for the same vulnerability. The bonuses below might still apply.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Bonuses&lt;/b&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;20,000 USD for exploits for 0day vulnerabilities. This will only be paid once per vulnerability to the first valid exploit submission.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;To submit 0days, please test your exploit (we recommend to test it on your own kCTF cluster to avoid leaking it to other participants), make a checksum and send the checksum to us. Within a week after the vulnerability is fixed on the &lt;a href="https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux"&gt;mainline&lt;/a&gt;, submit the form as a 1day and include the exploit of which you sent a checksum to us.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;20,000 USD for exploits for vulnerabilities that do not require unprivileged user namespaces (CLONE_NEWUSER). This will only be paid once per vulnerability to the first valid exploit submission.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Our test lab allows unprivileged user namespaces, so we will manually check the exploits to check if they work without unprivileged user namespaces when deciding whether to issue the bonus. We decided to issue additional rewards for exploits that do not require unprivileged user namespaces because containers &lt;a href="https://github.com/moby/moby/blob/3c06ebd876687555fdf030a3307a66908c4fa57c/profiles/seccomp/default_linux.go#L576"&gt;default seccomp policy&lt;/a&gt; does not allow the use of unprivileged user namespaces on containers that are run without CAP_SYS_ADMIN. This feature is now &lt;a href="https://kubernetes.io/docs/tutorials/security/seccomp/"&gt;available&lt;/a&gt; on Kubernetes and all nodes running on &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview#container_isolation"&gt;GKE Autopilot&lt;/a&gt; have it enabled by default.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;20,000 USD for exploits using novel exploit techniques. This is a bonus in addition to the base rewards (applies for duplicate exploits). To qualify for this additional reward please send us a write-up explaining it.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;An example of something considered as a novel technique could be the exploitation of previously unknown objects to transform a limited primitive into a more powerful one, such as an arbitrary/out-of-bounds read/write or arbitrary free. For example, in all our submissions, researchers leveraged message queues to achieve kernel information leaks. We are looking for similarly powerful techniques that allow heap exploits to be “plugged in” and immediately allow kernel access. Another example is bypassing a common security mitigation or a technique for exploiting a class of vulnerabilities more reliably.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;These changes increase some 1day exploits to 71,337 USD (up from 31,337 USD), and makes it so that the maximum reward for a single exploit is 91,337 USD (up from 50,337 USD). We also are going to pay even for duplicates at least 20,000 USD if they demonstrate novel exploit techniques (up from 0 USD). However, we will also limit the number of rewards for 1days to only one per version/build. There are 12-18 &lt;a href="https://cloud.google.com/kubernetes-engine/docs/release-notes"&gt;GKE releases&lt;/a&gt; per year on each channel, and we have two clusters on different channels, so we will pay the 31,337 USD base rewards up to 36 times (no limit for the bonuses). While we don't expect every upgrade to have a valid 1day submission, we would love to learn otherwise. You can find the flag submission status for our clusters (and their versions) &lt;a href="https://google.github.io/kctf/vrp#notes"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;We look forward to hearing from you, and continue to strengthen our shared ecosystem. If you are interested to participate but don't know where to start, Arizona State University has a free public Kernel Exploitation workshop at &lt;a href="https://dojo.pwn.college/challenges/kernel"&gt;https://dojo.pwn.college/challenges/kernel&lt;/a&gt; as part of an overall memory corruption course and you can find a community-maintained list of past Linux Kernel vulnerabilities, exploits and writeups curated by Andrey Konovalov at &lt;a href="https://github.com/xairy/linux-kernel-exploitation"&gt;https://github.com/xairy/linux-kernel-exploitation&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This is part of our Vulnerability Reward Program, which we've been running for over 10 years, and &lt;a href="https://bughunters.google.com/about/rules/6625378258649088"&gt;the rules&lt;/a&gt; include some more information. Same as with our other rewards, we will double them if they are donated to charity, and submitters will be included on our site at &lt;a href="http://bughunters.google.com/"&gt;bughunters.google.com&lt;/a&gt;. If you are ready to submit something, please read the instructions on our site &lt;a href="https://google.github.io/kctf/vrp"&gt;here&lt;/a&gt; and if you have any other questions please contact us &lt;a href="https://discord.gg/V8UqnZ6JBG"&gt;on Discord&lt;/a&gt;.&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=f-qBuaGvdQs:CtekpwWTtn0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=f-qBuaGvdQs:CtekpwWTtn0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=f-qBuaGvdQs:CtekpwWTtn0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/1466237426374934289/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=1466237426374934289&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/1466237426374934289" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/1466237426374934289" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/02/roses-are-red-violets-are-blue-giving.html" title="🌹 Roses are red, Violets are blue 💙 Giving leets 🧑‍💻 more sweets 🍭 All of 2022!" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-7394518561764086856</id>
    <published>2022-02-10T12:00:00.003-05:00</published>
    <updated>2022-04-12T17:47:40.748-04:00</updated>
    <title type="text">Vulnerability Reward Program: 2021 Year in Review</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Sarah Jacobus, Vulnerability Rewards Team&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-b09b6b01-7fff-8fb9-cc76-e258b7dbd164"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Last year was another record setter for our Vulnerability Reward Programs (VRPs). Throughout 2021, we partnered with the security researcher community to identify and fix thousands of&amp;nbsp; vulnerabilities – helping keep our users and the internet safe.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Thanks to these incredible researchers, Vulnerability Reward Programs across Google continued to grow, and we are excited to report that in 2021 we awarded a record breaking $8,700,000 in vulnerability rewards – with researchers donating over $300,000 of their rewards to a charity of their choice.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;We also &lt;/span&gt;&lt;a href="https://security.googleblog.com/2021/07/a-new-chapter-for-googles-vulnerability.html" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;launched&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;a href="https://bughunters.google.com/" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;bughunters.google.com&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; in 2021, a public researcher portal dedicated to keeping Google products and the internet safe and secure. This new platform brings all of our VRPs (Google, Android, Abuse, Chrome, and Google Play) closer together and provides a single intake form, making security bug submission easier than ever. We’re excited about everything the new Bug Hunters portal has to offer, including:&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;More opportunities for interaction and a bit of healthy competition through gamification, per-country leaderboards, awards/badges for certain bugs, and more!&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;A more functional and aesthetically pleasing &lt;/span&gt;&lt;a href="https://bughunters.google.com/leaderboard" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;leaderboard&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. We know a lot of you are using your achievements in our VRPs to find jobs (we’re hiring!) and we hope this acts as a useful resource.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;A stronger emphasis on learning: bug hunters can improve their skills through the content available in our new &lt;/span&gt;&lt;a href="https://bughunters.google.com/learn" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Bug Hunter University&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Streamlined publication process: we know the value that knowledge sharing brings to our community. That’s why we want to make it easier for you to&lt;/span&gt;&lt;a href="https://bughunters.google.com/report/reports" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt; publish your bug reports&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;We now offer &lt;/span&gt;&lt;a href="https://twitter.com/GoogleVRP/status/1420129759833493507" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;swag&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;! The first 20 folks who share this blog post on Twitter and tag &lt;/span&gt;&lt;a href="https://twitter.com/GoogleVRP" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;@GoogleVRP&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; will receive a gift voucher for swag in their DMs.&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span face="Roboto, sans-serif"&gt;&lt;span style="font-size: 14.6667px; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;As in &lt;/span&gt;&lt;a href="https://security.googleblog.com/2020/01/vulnerability-reward-program-2019-year.html" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;past years&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, we are sharing our 2021 Year in Review statistics across all of our programs. We would like to give a special thank you to all of our dedicated researchers - we look forward to more collaboration in the future! &lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="border: none; display: inline-block; height: 352px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 624px;"&gt;&lt;img height="352" src="https://lh5.googleusercontent.com/-zCM3_4wvpTRCKBwcjW5Uie2v-FP5EJar9TTb1M7Hb0WdDxuFJkr9Xa4BdcwcghYfAb3l603yY-3R_cLMKQfiYgDkfx7m2-3Agv4jNhuQwJyOmVPAkvO1zHoHT76ZmA-O6TYLCos7A" style="margin-left: 0px; margin-top: 0px;" width="624" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="border: none; display: inline-block; height: 352px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 624px;"&gt;&lt;img height="352" src="https://lh6.googleusercontent.com/v_Sn_uOYMoxg1oVOLbE1I0JCPkPeA20kl592-Dlf5Gq8VJKml1WVDwFhVkgNQWUBDrOyoC3Bda-r7LK69pOrSvTWNl1-qY5n0-V0yLXVvvQ5WRy4qM4DeJKAYaknnWcJODk447Fqgw" style="margin-left: 0px; margin-top: 0px;" width="624" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Android&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The Android VRP doubled its 2020 total payouts in 2021 with nearly $3 million dollars in rewards, and awarded the highest payout in Android VRP history: an exploit chain discovered in Android receiving a reward of $157,000!&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Our industry leading prize of $1,500,000 for a compromise of our Titan-M Security chip used in our Pixel device remains unclaimed - for more information on this reward and Android exploit chain rewards, please visit our &lt;/span&gt;&lt;a href="https://bughunters.google.com/about/rules/6171833274204160" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;public rules page&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The program also launched the Android Chipset Security Reward Program (ACSRP), a vulnerability reward program offered by Google in collaboration with manufacturers of certain popular Android chipsets. This private, invite-only program, provides reward and recognition for contributions of security researchers who invest their time and effort into helping make Android devices more secure. In 2021 the ACSRP paid out $296,000 for over 220 valid and unique security reports.&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="border: none; display: inline-block; height: 352px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 624px;"&gt;&lt;img height="352" src="https://lh6.googleusercontent.com/QKDuHaA6LlLBC8zk1pFLWQ6Kv1KOVRhaSYtLHl99kiNmgm0jmRWvyLQXvWSg0D-R28PYhY9bt7vcbytHJtxbMn3uSnbbzWbCqCQAXu686KB_adLlS5Ys970EYixANWxnUK5fHfZPEQ" style="margin-left: 0px; margin-top: 0px;" width="624" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;We would like to give a special shoutout to some of our top researchers whose continued hard work keeps Android safe and secure:&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Aman Pandey of &lt;/span&gt;&lt;a href="https://bugsmirror.com" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Bugsmirror Team&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; has skyrocketed to our top researcher last year, submitting 232 vulnerabilities in 2021! Since submitting their first report in 2019, Aman has reported over 280 valid vulnerabilities to the Android VRP and has been a crucial part of making our program so successful.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: white; color: #222222; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Yu-Cheng Lin (林禹成) (&lt;/span&gt;&lt;a href="https://twitter.com/AndroBugs" style="text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;@AndroBugs&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;)&lt;/span&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; has been another phenomenal researcher for the Android VRP, submitting a whopping 128 valid reports to the program in 2021.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Researcher &lt;/span&gt;&lt;span style="background-color: white; color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;gzobqq@gmail.com&lt;/span&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; discovered a critical exploit chain in Android (CVE-2021-39698) , receiving the highest payout in Android VRP history of $157,000.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Chrome&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;This year the Chrome VRP also set some new records – 115 Chrome VRP researchers were rewarded for 333 unique Chrome security bug reports submitted in 2021, totaling $3.3 million in VRP rewards. The contributions not only help us to improve Chrome, but also the web at large by bolstering the security of all browsers based on Chromium.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Of the $3.3 million, $3.1 million was awarded for Chrome Browser security bugs and $250,500 for Chrome OS bugs, including a $45,000 top reward amount for an &lt;/span&gt;&lt;a href="https://crbug.com/1166932" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;individual Chrome OS security bug report&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and $27,000 for an &lt;/span&gt;&lt;a href="https://crbug.com/1197904" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;individual Chrome Browser security bug report&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="border: none; display: inline-block; height: 352px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 624px;"&gt;&lt;img height="352" src="https://lh6.googleusercontent.com/BNEYocp-xblKeUMruL3m00zkiZsJyxLP7d0h5uXt8NC8ao6y8qeygcopKfhpi10lbqZGfjmXNMEkPw8R4S0N6M3Cs9dj2MvbuCwkDbHDCuGOgloR7QjEj7kFLk1_nMs_9UrPcfHikw" style="margin-left: 0px; margin-top: 0px;" width="624" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Of these totals, $58,000 was awarded for security issues discovered by fuzzers contributed by VRP researchers to the &lt;/span&gt;&lt;a href="https://bughunters.google.com/about/rules/5745167867576320#:~:text=%245%2C000%20%2D%20%2415%2C000-,Chrome%20Fuzzer%20Program,-The%20Chrome%20Fuzzer" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Chrome Fuzzing program&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. Each valid report from an externally provided fuzzer received a $1,000 patch bonus, with &lt;/span&gt;&lt;a href="https://crbug.com/1242257" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;one fuzzer report&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; receiving a $16,000 reward.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The Chrome VRP would not be able to smash these records over the last year without the efforts of so many exceptional VRP researchers. We’d like to highlight a few researcher achievements made in 2021:&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Rory McNamara, a Chrome OS VRP researcher who has been participating in the Chrome VRP for five years, became the highest awarded Chrome VRP researcher of all time. This year he was rewarded for six reports achieving root privilege escalation in Chrome OS, one of which received the highest reward amount achieved for a &lt;/span&gt;&lt;a href="https://crbug.com/1166932" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;single Chrome bug report&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; in 2021 at $45,000.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Chrome Browser VRP researcher Leecraso &lt;/span&gt;&lt;span style="background-color: white; color: #222222; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;(@leecraso) of 360 Vulnerability Research Institute&lt;/span&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; was the most awarded researcher of 2021, with 18 valid bug reports; a majority of which were for memory corruption vulnerabilities affecting the browser process.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Roboto, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;We love when researchers write about their findings (only after we have publicly disclosed the bug, of course)! Chrome Browser VRP researcher Brendon Tiszka wrote an excellent two-part blog series on his &lt;/span&gt;&lt;a href="https://tiszka.com/blog/CVE_2021_21225.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;discovery&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and &lt;/span&gt;&lt;a href="https://tiszka.com/blog/CVE_2021_21225_exploit.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;exploitation&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; of a V8 vulnerability, CVE-2021-21225, the analysis and reporting of which earned him a $22,000 VRP reward.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Huge thanks and congratulations to all Chrome VRP researchers that helped us make Chrome and Chrome OS more safe for all users in 2021!.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Google Play&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Google Play paid out $550,000 in rewards to over 60 unique security researchers.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The Google Play Security Reward Program also &lt;/span&gt;&lt;a href="https://bughunters.google.com/learn/presentations/5783688075542528" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;released their Android App Hacking Workshop content&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and published a &lt;/span&gt;&lt;a href="https://security.googleblog.com/2021/12/empowering-next-generation-of-android.html" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;blog&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; on their work to empower the next generation of Android Application Security Researchers.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;kCTF VRP&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;In November we &lt;/span&gt;&lt;a href="https://security.googleblog.com/2021/11/trick-treat-paying-leets-and-sweets-for.html" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;expanded&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; our reward amounts for exploits against our kCTF cluster from 5,000-10,000 up to 31,337-50,337 USD. In the last 3 months we were happy to have several participants receive $175,685 USD in rewards. We also extended the timeline of the increased rewards until February 14 (from January 31) which should give everyone a couple more weeks to finalize any almost-working exploits.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;GCP VRP Prize&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To encourage security researchers to focus on Google Cloud Platform, we initiated the annual GCP VRP Prize in 2019. In March this year, we &lt;/span&gt;&lt;a href="https://security.googleblog.com/2021/03/announcing-winners-of-2020-gcp-vrp-prize.html" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;announced&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; the winners of the 2020 edition of the prize and paid out $313,337 in prizes. Ezequiel Pereira won the top prize of $133,337 for finding an &lt;/span&gt;&lt;a href="https://bughunters.google.com/report/reports/5105155099590656" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;RCE in Google Cloud Deployment Manager&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. We saw some amazing research on Google Cloud Platform this year too. Stay tuned for the 2021 winners!&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Research Grants&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Six years ago, the Google VRP launched an experimental &lt;/span&gt;&lt;a href="https://bughunters.google.com/about/rules/5479188746993664" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Vulnerability Research Grant program&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; to encourage seasoned security researchers to take a detailed and extensive look into the security of Google products and services. And reward them even if there are no vulnerabilities found. Six years later, we are happy to announce that in 2021 we awarded over $200,000 in grants to more than 120 security researchers around the world.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If you are a Google VRP researcher and want to be considered for a Vulnerability Research Grant make sure you opted in on your &lt;/span&gt;&lt;a href="https://bughunters.google.com/" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;bughunters profile&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Looking forward&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;With the launch of the new Bug Hunters portal, we plan to continue improving our platform and listening to you - our researchers - on ways we can improve our platform and Bug Hunter University.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Thank you again for making Google, the Internet, and our users safe and secure! Follow us on &lt;/span&gt;&lt;a href="http://twitter.com/googlevrp" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;@GoogleVRP&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 11pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Thank you to Adam Bacchus, Dirk Göhmann, Sarah Jacobus, Amy Ressler, Martin Straka, Jan Keller, Jon Bottarini, and Rishika Hooda&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=9JRDi0PTk3I:P5LqCVoJf2I:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=9JRDi0PTk3I:P5LqCVoJf2I:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=9JRDi0PTk3I:P5LqCVoJf2I:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/7394518561764086856/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=7394518561764086856&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7394518561764086856" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7394518561764086856" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/02/vulnerability-reward-program-2021-year.html" title="Vulnerability Reward Program: 2021 Year in Review" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh5.googleusercontent.com/-zCM3_4wvpTRCKBwcjW5Uie2v-FP5EJar9TTb1M7Hb0WdDxuFJkr9Xa4BdcwcghYfAb3l603yY-3R_cLMKQfiYgDkfx7m2-3Agv4jNhuQwJyOmVPAkvO1zHoHT76ZmA-O6TYLCos7A=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-7760610047731455991</id>
    <published>2022-01-19T10:00:00.014-05:00</published>
    <updated>2022-01-19T10:00:00.226-05:00</updated>
    <title type="text">Reducing Security Risks in Open Source Software at Scale: Scorecards Launches V4</title>
    <content type="html">&lt;div style="text-align: center;"&gt;&lt;img height="200" src="https://lh3.googleusercontent.com/-4-NjiZmRTN8/YedAkA5JwAI/AAAAAAAAA4E/xnaOqjf3cz8DmSicZpblCHaU5ygphxI1wCNcBGAsYHQ/w103-h200/image.png" width="103" /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class="byline-author"&gt;Posted by&amp;nbsp;Laurent Simon and Azeem Shaikh, Google Open Source Security Team (GOSST)&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;Since our &lt;a href="https://security.googleblog.com/2021/07/measuring-security-risks-in-open-source.html"&gt;July announcement&lt;/a&gt; of Scorecards V2, the Scorecards project—an automated security tool to flag risky supply chain practices in open source projects—has grown steadily to over 40 unique contributors and 18 implemented security checks. Today we are proud to announce the V4 release of Scorecards, with larger scaling, a new security check, and a new Scorecards GitHub Action for easier security automation.&lt;br /&gt;&lt;br /&gt;The Scorecards Action is released in partnership with GitHub and is available from &lt;a href="https://github.com/marketplace/actions/ossf-scorecard-action"&gt;GitHub's Marketplace&lt;/a&gt;. The Action makes using Scorecards easier than ever: it runs automatically on repository changes to alert developers about risky supply-chain practices. Maintainers can view the alerts on GitHub's &lt;a href="https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/managing-code-scanning-alerts-for-your-repository"&gt;code scanning dashboard&lt;/a&gt;, which is available for free to public repositories on GitHub.com and via GitHub Advanced Security for private repositories. &lt;br /&gt;&lt;br /&gt;Additionally, we have scaled our weekly Scorecards scans to over one million GitHub repositories, and have partnered with the &lt;a href="http://deps.dev/"&gt;Open Source Insights&lt;/a&gt; website for easy user access to the data. &lt;br /&gt;&lt;br /&gt;For more details about the release, including the new Dangerous-Workflow security check, visit the OpenSSF's official blog post &lt;a href=" https://openssf.org/blog/2022/01/19/reducing-security-risks-in-open-source-software-at-scale-scorecards-launches-v4"&gt;here&lt;/a&gt;. &lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=Tv4a4OHNmmU:OinVYFgrKog:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=Tv4a4OHNmmU:OinVYFgrKog:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=Tv4a4OHNmmU:OinVYFgrKog:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/7760610047731455991/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=7760610047731455991&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7760610047731455991" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7760610047731455991" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2022/01/reducing-security-risks-in-open-source.html" title="Reducing Security Risks in Open Source Software at Scale: Scorecards Launches V4" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh3.googleusercontent.com/-4-NjiZmRTN8/YedAkA5JwAI/AAAAAAAAA4E/xnaOqjf3cz8DmSicZpblCHaU5ygphxI1wCNcBGAsYHQ/s72-w103-h200-c/image.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-8067105097958314719</id>
    <published>2021-12-17T21:08:00.002-05:00</published>
    <updated>2021-12-17T21:11:02.503-05:00</updated>
    <title type="text">Apache Log4j Vulnerability</title>
    <content type="html">Like many other companies, we’re closely following the multiple CVEs regarding Apache Log4j 2. Our security teams are investigating any potential impact on Google products and services and are focused on protecting our users and customers.&lt;br /&gt;&lt;br /&gt;We encourage anyone who manages environments containing Log4j 2 to update to the &lt;a href="https://logging.apache.org/log4j/2.x/download.html"&gt;latest version&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Based on findings in our ongoing investigations, here is our list of product and service updates as of December 17th (&lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228"&gt;CVE-2021-44228&lt;/a&gt; &amp;amp; &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45046"&gt;CVE-2021-45046&lt;/a&gt;):&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Android&lt;/b&gt; is not aware of any impact to the Android Platform or Enterprise. At this time, no update is required for this specific vulnerability, but we encourage our customers to ensure that the latest security updates are applied to their devices.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Chrome OS&amp;nbsp;&amp;nbsp;&lt;/b&gt;releases and infrastructure are not using versions of Log4j affected by the vulnerability.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Chrome Browser&lt;/b&gt; releases, infrastructure and admin console are not using versions of Log4j affected by the vulnerability.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Google Cloud&lt;/b&gt; has a &lt;a href="https://cloud.google.com/log4j2-security-advisory"&gt;specific advisory&lt;/a&gt; dedicated to updating customers on the status of GCP and Workspace products and services. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Google Marketing Platform,&lt;/b&gt; &lt;b&gt;including Google Ads &lt;/b&gt;is not using versions of Log4j affected by the vulnerability. This includes Display &amp;amp; Video 360, Search Ads 360, Google Ads, Analytics (360 and free), Optimize 360, Surveys 360  &amp;amp; Tag Manager 360. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;YouTube&amp;nbsp;&amp;nbsp;&lt;/b&gt;is not using versions of Log4j affected by the vulnerability.  &lt;br /&gt;&lt;br /&gt;We will continue to update this advisory with the latest information. &lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=bgO1sJeQLPg:zNjSZNqdQ1I:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=bgO1sJeQLPg:zNjSZNqdQ1I:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=bgO1sJeQLPg:zNjSZNqdQ1I:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/8067105097958314719/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=8067105097958314719&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8067105097958314719" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8067105097958314719" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/12/apache-log4j-vulnerability.html" title="Apache Log4j Vulnerability" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-7789131255185229942</id>
    <published>2021-12-17T12:25:00.002-05:00</published>
    <updated>2021-12-21T10:54:50.821-05:00</updated>
    <title type="text">Understanding the Impact of Apache Log4j Vulnerability</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by James Wetter and Nicky Ringland, Open Source Insights Team&amp;nbsp;&lt;br /&gt;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Editors Note:&lt;/b&gt;&lt;/div&gt;&lt;p style="text-align: left;"&gt;&lt;br /&gt;&lt;i&gt;The below numbers were calculated based on both log4j-core and log4j-api, as both were listed on the CVE. Since then, the CVE has been updated with the clarification that only log4j-core is affected.&lt;/i&gt;&lt;/p&gt;&lt;i&gt;&lt;br /&gt;The ecosystem impact numbers for just log4j-core, as of 19th December are over 17,000 packages affected, which is roughly 4% of the ecosystem. 25% of affected packages have fixed versions available.&lt;br /&gt;&lt;br /&gt;The &lt;a href="https://commondatastorage.googleapis.com/log4j_vulnerability/log4j_top_500_dependents.csv"&gt;linked list&lt;/a&gt;, which continues to be updated, only includes packages which depend on log4j-core.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;##&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;More than 35,000 Java packages, amounting to over 8% of the &lt;a href="https://www.maven.org/"&gt;Maven Central repository&lt;/a&gt; (the most significant Java package repository), have been impacted by the recently disclosed log4j vulnerabilities (&lt;a href="https://deps.dev/advisory/GHSA/GHSA-jfh8-c2jp-5v3q"&gt;1&lt;/a&gt;, &lt;a href="https://deps.dev/advisory/GHSA/GHSA-7rjr-3q55-vv33"&gt;2&lt;/a&gt;), with widespread fallout across the software industry. The vulnerabilities allow an attacker to perform remote code execution by exploiting the insecure JNDI lookups feature exposed by the logging library log4j. This exploitable feature was enabled by default in many versions of the library.&lt;div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This vulnerability has captivated the information security ecosystem since its disclosure on December 9th because of both its severity and widespread impact. As a popular logging tool, log4j is used by tens of thousands of software packages (known as artifacts in the Java ecosystem) and projects across the software industry. User’s lack of visibility into their dependencies and transitive dependencies has made patching difficult; it has also made it difficult to determine the full blast radius of this vulnerability. Using &lt;a href="https://deps.dev/"&gt;Open Source Insights&lt;/a&gt;, a project to help understand open source dependencies, we surveyed all versions of all artifacts in the &lt;a href="https://www.maven.org/"&gt;Maven Central Repository&lt;/a&gt; to determine the scope of the issue in the open source ecosystem of JVM based languages, and to track the ongoing efforts to mitigate the affected packages.&lt;div&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span&gt;&lt;span style="font-size: x-large;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span&gt;&lt;span style="font-size: x-large;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-5fefaa6d-7fff-4bf0-d3b4-aba698ec7bd3"&gt;&lt;span style="font-size: x-large;"&gt;&lt;b&gt;How widespread is the log4j vulnerability?&lt;/b&gt;&lt;/span&gt;&lt;div&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;As of December 16, 2021, we found that 35,863 of the available Java artifacts from Maven Central depend on the affected log4j code. This means that more than 8% of all packages on Maven Central have at least one version that is impacted by this vulnerability. (These numbers do not encompass all Java packages, such as directly distributed binaries, but Maven Central is a strong proxy for the state of the ecosystem.)&lt;br /&gt;&lt;br /&gt;As far as ecosystem impact goes, 8% is enormous. The average ecosystem impact of advisories affecting Maven Central is 2%, with the median less than 0.1%.&lt;span class="byline-author"&gt;&lt;p dir="ltr" style="color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;"&gt;&lt;span style="color: black; font-size: 11pt; font-style: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; text-align: center; white-space: pre-wrap;"&gt;&lt;span style="border: none; display: inline-block; height: 121px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 624px;"&gt;&lt;img height="124" src="https://lh4.googleusercontent.com/f1zSNf74wbe6cy1bdPVdkxTUza9nnUTflp9AygbgYHNnwkZp2_XwfWjyJpUcdg4VZ2SVfQRC9vrffoqu-T5kLOGt-IFBXKq_4STLP8jTOdoba7Kr3MYRZ4i91dFe9OBLu5fog3ejlGM1NSaD42fHTTu0NY_zvDd1NYa4u5_VkdHehH85=w640-h124" style="margin-left: 0px; margin-top: 0px;" width="640" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;"&gt;&lt;span style="color: black; font-size: 11pt; font-style: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;Direct dependencies account for around 7,000 of the affected artifacts, meaning that any of its versions depend upon an affected version of log4j-core or log4j-api, as described in the CVEs. The majority of affected artifacts come from indirect dependencies (that is, the dependencies of one’s own dependencies), meaning log4j is not explicitly defined as a dependency of the artifact, but gets pulled in as a transitive dependency.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;br /&gt;&lt;p dir="ltr" style="color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center; white-space: pre-wrap;"&gt;&lt;span style="color: black; font-size: 11pt; font-style: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span style="border: none; display: inline-block; height: 245px; overflow: hidden; width: 624px;"&gt;&lt;img height="252" src="https://lh4.googleusercontent.com/EjNUi1ZvMv7PQ6z1NCszLP0P96SoBVGZcYnV7F7iQsIv_TDCPpiWrroKuLnCDpSKFLj-mg3hQV29yjDpsEA3qehfK7X42qRMa-xq3mqytSXT40lDR0Vd6IS_CQnofmw-mCqlePNeA3s90ygortIpMKbrxPeu0Q8ZcVMm3W3ohTel74ko=w627-h252" style="margin-left: 0px; margin-top: 0px;" width="627" /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;"&gt;&lt;span style="background-color: transparent; color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 dir="ltr" style="color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;"&gt;&lt;span style="background-color: transparent; color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/span&gt;&lt;b&gt;&lt;span style="font-size: x-large;"&gt;What is the current progress in fixing the open source JVM ecosystem? &lt;/span&gt;&lt;/b&gt;&lt;br /&gt;We counted an artifact as fixed if the artifact had at least one version affected and has released a greater stable version (according to &lt;a href="http://semver.org/"&gt;semantic&lt;/a&gt; versioning) that is unaffected. An artifact affected by log4j is considered fixed if it has updated to 2.16.0 or removed its dependency on log4j altogether.&lt;br /&gt;&lt;br /&gt;At the time of writing, nearly five thousand of the affected artifacts have been fixed. This represents a rapid response and mammoth effort both by the log4j maintainers and the wider community of open source consumers.&lt;br /&gt;&lt;br /&gt;That leaves over 30,000 artifacts affected, many of which are dependent on another artifact to patch (the transitive dependency) and are likely blocked. &lt;br /&gt;&lt;br /&gt;&lt;div style="color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; text-align: center; white-space: pre-wrap;"&gt;&lt;img height="316" src="https://lh3.googleusercontent.com/1vHuxMI_nMbgiwQITYrXHNB6Gr-QToUfrbGlnSS5Qhf9mNW317z93LUBsNGIGDvOrMXNbDpl83uxERdS_1EhU5pT2Acv62_2oUJd-n5OE3WeTWWVrDtTe6gF5fAqIhXlHVxFo6AM8ZhtmeUvffgt23SXADhlWs5EOOwQeyb3zacSoj4e=w400-h316" style="color: black; font-size: 11pt; font-style: normal; margin-left: 0px; margin-top: 0px;" width="400" /&gt;&lt;/div&gt;&lt;b&gt;&lt;span style="font-size: x-large;"&gt;&lt;div&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;b&gt;&lt;span style="font-size: x-large;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;Why is fixing the JVM ecosystem hard?&lt;/span&gt;&lt;/b&gt;&lt;div&gt;&lt;span id="docs-internal-guid-dcffc5f7-7fff-ecfa-4ef4-886ed83d4692"&gt;Most artifacts that depend on log4j do so indirectly. The deeper the vulnerability is in a dependency chain, the more steps are required for it to be fixed. The following diagram shows a histogram of how deeply an affected log4j package (core or api) first appears in consumers dependency graphs. F&lt;b&gt;or greater than 80% of the packages, the vulnerability is more than one level deep, with a majority affected five levels down (and some as many as nine levels down). &lt;/b&gt;These packages will require fixes throughout all parts of the tree, starting from the deepest dependencies first.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;span&gt;&lt;span class="byline-author"&gt;&lt;p dir="ltr" style="color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;"&gt;&lt;span style="color: black; font-size: 11pt; font-style: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; text-align: center; white-space: pre-wrap;"&gt;&lt;span style="border: none; display: inline-block; height: 424px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 624px;"&gt;&lt;img height="435" src="https://lh6.googleusercontent.com/aXekml2-nSR0d6-5UbKk4LuEedmDJvq0pBph-DfApUzmYVHcoZ-Bb5pSJ_KBUfftGwV6-Cwtz5T0JArcpZjTN3eNXCaxsSBz4wnCVtst2Lp4YcktXlgXR5cCJ2UapfdRDi6CyEFqFU_2AqRwBh5_fnGPCl2cCE4WfXXcD2kBCD5SFtm0=w613-h435" style="margin-left: 0px; margin-top: 0px;" width="613" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;"&gt;&lt;span style="color: black; font-size: 11pt; font-style: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Another difficulty is caused by ecosystem-level choices in the dependency resolution algorithm and requirement specification conventions. &lt;br /&gt;&lt;br /&gt;In the Java ecosystem, it’s common practice to specify “&lt;a href="https://maven.apache.org/pom.html#Dependency_Version_Requirement_Specification"&gt;soft&lt;/a&gt;” version requirements — exact versions that are used by the resolution algorithm if no other version of the same package appears earlier in the dependency graph. Propagating a fix often requires explicit action by the maintainers to update the dependency requirements to a patched version.&lt;br /&gt;&lt;br /&gt;This practice is in contrast to other ecosystems, such as npm, where it’s common for developers to specify open ranges for dependency requirements. Open ranges allow the resolution algorithm to select the most recently released version that satisfies dependency requirements, thereby pulling in new fixes. Consumers can get a patched version on the next build after the patch is available, which propagates up the dependencies quickly. (This approach is not without its drawbacks; pulling in new fixes can also pull in new problems.)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;b&gt;&lt;span style="font-size: x-large;"&gt;How long will it take for this vulnerability to be fixed across the entire ecosystem?&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: medium;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;b&gt;&lt;span style="font-size: medium;"&gt;&lt;/span&gt;&lt;/b&gt;&lt;div&gt;&lt;span&gt;It’s hard to say. We looked at all publicly disclosed critical advisories affecting Maven packages to get a sense of how quickly other vulnerabilities have been fully addressed. Less than half (48%) of the artifacts affected by a vulnerability have been fixed, so we might be in for a long wait, likely years. &lt;br /&gt;&lt;br /&gt;But things are looking promising on the log4j front. After less than a week, 4,620 affected artifacts (~13%) have been fixed. This, more than any other stat, speaks to the massive effort by open source maintainers, information security teams and consumers across the globe.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;span&gt;&lt;span style="font-size: x-large;"&gt;&lt;b&gt;Where to focus next?&lt;/b&gt;&lt;/span&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;Thanks and congratulations are due to the open source maintainers and consumers who have already upgraded their versions of log4j. As part of our investigation, we pulled together &lt;a href="https://commondatastorage.googleapis.com/log4j_vulnerability/log4j_top_500_dependents.csv"&gt;a list&lt;/a&gt; of 500 affected packages with some of the highest transitive usage. If you are a maintainer or user helping with the patching effort, prioritizing these packages could maximize your impact and unblock more of the community. &lt;br /&gt;&lt;br /&gt;We encourage the open source community to continue to strengthen security in these packages by enabling automated dependency updates and adding security mitigations. Improvements such as these could qualify for financial rewards from the &lt;a href="https://sos.dev/"&gt;Secure Open Source Rewards program&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;You can explore your package dependencies and their vulnerabilities by using &lt;a href="https://deps.dev/"&gt;Open Source Insights&lt;/a&gt;.&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=1QP88nWj7tU:pkWYDFrJTjM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=1QP88nWj7tU:pkWYDFrJTjM:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=1QP88nWj7tU:pkWYDFrJTjM:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/7789131255185229942/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=7789131255185229942&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7789131255185229942" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7789131255185229942" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html" title="Understanding the Impact of Apache Log4j Vulnerability" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh4.googleusercontent.com/f1zSNf74wbe6cy1bdPVdkxTUza9nnUTflp9AygbgYHNnwkZp2_XwfWjyJpUcdg4VZ2SVfQRC9vrffoqu-T5kLOGt-IFBXKq_4STLP8jTOdoba7Kr3MYRZ4i91dFe9OBLu5fog3ejlGM1NSaD42fHTTu0NY_zvDd1NYa4u5_VkdHehH85=s72-w640-h124-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-5168597051246635235</id>
    <published>2021-12-16T17:04:00.017-05:00</published>
    <updated>2021-12-16T17:28:18.453-05:00</updated>
    <title type="text">Improving OSS-Fuzz and Jazzer to catch Log4Shell</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Jonathan Metzman, Google Open Source Security Team&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;The discovery of the &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228"&gt;Log4Shell vulnerability&lt;/a&gt; has set the internet on fire. Similar to &lt;a href="https://en.wikipedia.org/wiki/Shellshock_(software_bug)"&gt;shellshock&lt;/a&gt; and &lt;a href="https://heartbleed.com/"&gt;heartbleed&lt;/a&gt;, Log4Shell is just the latest catastrophic vulnerability in &lt;a href="https://github.com/NCSC-NL/log4shell/tree/main/software"&gt;software that runs the internet&lt;/a&gt;. Our mission as the Google Open Source Security Team is to secure the open source libraries the world depends on, such as Log4j. One of our capabilities in this space is OSS-Fuzz, a free fuzzing service that is used by over 500 critical open source projects and has found more than &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/list?q=type%3Dbug-security%20-status%3Aduplicate%2Cwontfix&amp;amp;can=1"&gt;7,000 vulnerabilities&lt;/a&gt; in its lifetime. &lt;br /&gt;&lt;br /&gt;We want to empower open source developers to secure their code on their own. Over the next year we will work on better automated detection of non-memory corruption vulnerabilities such as Log4Shell. We have started this work by partnering with the security company &lt;a href="https://www.code-intelligence.com/"&gt;Code Intelligence&lt;/a&gt; to &lt;a href="https://github.com/google/oss-fuzz/pull/7016"&gt;provide continuous fuzzing for Log4j&lt;/a&gt;, as part of OSS-Fuzz. Also as part of this partnership, Code-Intelligence improved their &lt;a href="https://github.com/CodeIntelligenceTesting/jazzer"&gt;Jazzer fuzzing engine&lt;/a&gt; to make it &lt;a href="https://github.com/CodeIntelligenceTesting/jazzer/blob/3fed476bed7c61370e12062b5b97a939e3c5e591/sanitizers/src/main/java/com/code_intelligence/jazzer/sanitizers/NamingContextLookup.kt#L90"&gt;capable of detecting remote JNDI lookups&lt;/a&gt;. We have awarded Code Intelligence $25,000 for this effort and will continue to work with them on securing the open source ecosystem.&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="border: none; display: inline-block; height: 395px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 624px;"&gt;&lt;img height="405" src="https://lh4.googleusercontent.com/RoHqQrRbnOfSMkkbVXUrpUKyDs1hjMtb1t0PNTexG82Lw5OMdes58AnUi0Mkx894hZjFlwTEvxkKw0SS_O71sQiSCnODIA-fyijTZRX50iPMjKlHB_wBKyyRiwaB6nGBi9iAut2J=w640-h405" style="margin-left: 0px; margin-top: 0px;" width="640" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Caption: OSS-Fuzz and Jazzer finding the Log4Shell Vulnerability&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;Vulnerabilities like Log4Shell are an eye-opener for the industry in terms of new attack vectors. With OSS-Fuzz and Jazzer, we can now detect this class of vulnerability so that they can be fixed before they become a problem in production code.&lt;br /&gt;&lt;br /&gt;Over the past year we have made a number of investments to strengthen the security of critical open source projects, and recently announced our $&lt;a href="https://blog.google/technology/safety-security/why-were-committing-10-billion-to-advance-cybersecurity/"&gt;10 billion commitment to cybersecurity&lt;/a&gt; defense including $100 million to support third-party foundations that manage open source security priorities and help fix vulnerabilities.&lt;br /&gt;&lt;br /&gt;We appreciate the maintainers, security engineers and incident responders that are working to mitigate Log4j and make our internet ecosystem safer. &lt;br /&gt;&lt;br /&gt;Check out &lt;a href="https://google.github.io/oss-fuzz/getting-started/new-project-guide/jvm-lang/"&gt;our documentation&lt;/a&gt; to get started using OSS-Fuzz.&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=AhMl8X5NWhI:j9nMeOmL914:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=AhMl8X5NWhI:j9nMeOmL914:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=AhMl8X5NWhI:j9nMeOmL914:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/5168597051246635235/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5168597051246635235&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5168597051246635235" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5168597051246635235" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/12/improving-oss-fuzz-and-jazzer-to-catch.html" title="Improving OSS-Fuzz and Jazzer to catch Log4Shell" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh4.googleusercontent.com/RoHqQrRbnOfSMkkbVXUrpUKyDs1hjMtb1t0PNTexG82Lw5OMdes58AnUi0Mkx894hZjFlwTEvxkKw0SS_O71sQiSCnODIA-fyijTZRX50iPMjKlHB_wBKyyRiwaB6nGBi9iAut2J=s72-w640-h405-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-2358047685818393685</id>
    <published>2021-12-14T13:00:00.001-05:00</published>
    <updated>2021-12-14T13:01:03.681-05:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="android" />
    <category scheme="http://www.blogger.com/atom/ns#" term="google play" />
    <category scheme="http://www.blogger.com/atom/ns#" term="hacking" />
    <category scheme="http://www.blogger.com/atom/ns#" term="security rewards program" />
    <category scheme="http://www.blogger.com/atom/ns#" term="VDP" />
    <category scheme="http://www.blogger.com/atom/ns#" term="workshop" />
    <title type="text">Empowering the next generation of Android Application Security Researchers</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Jon Bottarini, Security Program Manager &amp; Lena Katib, Strategic Partnerships Manager&lt;/span&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEj__FPoryOQkfv08Kd0I_8h4S3SUW4eAw_Dp85PNHFPYdD6R5XuhBGVnj9Zf6gNWxd-eFguruHR8Al526zAU-KHH3fMx0kqzwovuRhJejCKIZj-GxD253xvRh4TRouotkv1p9gB0r-i7oWGu2SZemNc-UMRYTQp9UMkNMhLkOYbjC2S2mxYtDTg5HEc8A" style="display: block; padding: 1em 0; text-align: center; "&gt;&lt;img alt="" border="0" data-original-height="165" data-original-width="318" src="https://blogger.googleusercontent.com/img/a/AVvXsEj__FPoryOQkfv08Kd0I_8h4S3SUW4eAw_Dp85PNHFPYdD6R5XuhBGVnj9Zf6gNWxd-eFguruHR8Al526zAU-KHH3fMx0kqzwovuRhJejCKIZj-GxD253xvRh4TRouotkv1p9gB0r-i7oWGu2SZemNc-UMRYTQp9UMkNMhLkOYbjC2S2mxYtDTg5HEc8A"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;The external security researcher community plays an integral role in making the Google Play ecosystem safe and secure. Through this partnership with the community, Google has been able to collaborate with third-party developers to fix thousands of security issues in Android applications before they are exploited and reward security researchers for their hard work and dedication.  &lt;/p&gt;&lt;p&gt;In order to empower the next generation of Android security researchers, Google has collaborated with industry partners including &lt;a href="https://www.hackerone.com/"&gt;HackerOne&lt;/a&gt; and PayPal to host a number of Android App Hacking Workshops. These workshops are an effort designed to educate security researchers and cybersecurity students of all skill levels on how to find Android application vulnerabilities through a series of hands-on working sessions, both in-person and virtual. &lt;/p&gt;&lt;p&gt;Through these workshops, we’ve seen attendees from groups such as &lt;a href="https://merrittsecurity.com/"&gt;Merritt College's cybersecurity program&lt;/a&gt; and alumni of &lt;a href="https://www.hackthehood.org/"&gt;Hack the Hood&lt;/a&gt; go on to report real-world security vulnerabilities to the &lt;a href="https://bughunters.google.com/about/rules/5604090422493184"&gt;Google Play Security Rewards program&lt;/a&gt;. This reward program is designed to identify and mitigate vulnerabilities in apps on Google Play, and keep Android users, developers and the Google Play ecosystem safe. &lt;/p&gt;&lt;p&gt;Today, we are releasing our slide deck and workshop materials, including source code for a custom-built Android application that allows you to test your Android application security skills in a variety of capture the flag style challenges.  &lt;/p&gt;&lt;p&gt;These materials cover a wide range of techniques for finding vulnerabilities in Android applications. Whether you’re just getting started or have already found many bugs - chances are you’ll learn something new from these challenges! If you get stuck and need a hint on solving a challenge, the solutions for each are available in the Android App Hacking Workshop &lt;a href="https://bughunters.google.com/learn/presentations/5783688075542528"&gt;here&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;As you work through the challenges and learn more about the techniques and tips described in our workshop materials, we’d love to &lt;a href="https://forms.gle/DUA1tNpaLCLR21h87"&gt;hear your feedback&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;&lt;span style="text-decoration:underline;"&gt;Additional Resources:&lt;/span&gt;&lt;/p&gt;&lt;ul&gt; &lt;li&gt;If you want to learn more about how to prepare, launch, and run a Vulnerability Disclosure Program (VDP) or discover how to work with external security researchers, check out our VDP course &lt;a href="https://playacademy.exceedlms.com/student/path/27914?utm_source=google&amp;utm_medium=blog&amp;utm_campaign=androidsecresearchblog&amp;utm_content=androidsecresearchblog"&gt;here&lt;/a&gt;.  &lt;li&gt;If you’re a developer looking to build more secure applications, check out Android app security best practices &lt;a href="https://developer.android.com/topic/security/best-practices"&gt;here&lt;/a&gt;.&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=RMaME9TJtqc:U8SL2HFs0Ag:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=RMaME9TJtqc:U8SL2HFs0Ag:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=RMaME9TJtqc:U8SL2HFs0Ag:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/2358047685818393685/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=2358047685818393685&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2358047685818393685" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2358047685818393685" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/12/empowering-next-generation-of-android.html" title="Empowering the next generation of Android Application Security Researchers" />
    <author>
      <name>Google</name>
      <uri>http://www.blogger.com/profile/11822708545141062574</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/a/AVvXsEj__FPoryOQkfv08Kd0I_8h4S3SUW4eAw_Dp85PNHFPYdD6R5XuhBGVnj9Zf6gNWxd-eFguruHR8Al526zAU-KHH3fMx0kqzwovuRhJejCKIZj-GxD253xvRh4TRouotkv1p9gB0r-i7oWGu2SZemNc-UMRYTQp9UMkNMhLkOYbjC2S2mxYtDTg5HEc8A=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-5154884564693495624</id>
    <published>2021-12-02T15:00:00.000-05:00</published>
    <updated>2021-12-02T15:00:00.190-05:00</updated>
    <title type="text">Exploring Container Security: A Storage Vulnerability Deep Dive</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Fabricio Voznika and Mauricio Poppe, Google Cloud&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Kubernetes Security is constantly evolving - keeping pace with enhanced functionality, usability and flexibility while also balancing the security needs of a wide and diverse set of use-cases.&lt;br /&gt;&lt;br /&gt;Recently, the GKE Security team discovered a &lt;a href="https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2021-018"&gt;high severity vulnerability&lt;/a&gt; that allowed workloads to have access to parts of the host filesystem outside the mounted volumes boundaries. Although the vulnerability was patched back in September we thought it would be beneficial to write up a more in-depth analysis of the issue to share with the community.&lt;br /&gt;&lt;br /&gt;We assessed the impact of the vulnerability as described in &lt;a href="https://cloud.google.com/blog/products/containers-kubernetes/exploring-container-security-vulnerability-management-in-open-source-kubernetes"&gt;vulnerability management in open-source Kubernetes&lt;/a&gt; and worked closely with the GKE Storage team and &lt;a href="https://github.com/kubernetes/committee-security-response"&gt;the Kubernetes Security Response Committee&lt;/a&gt; to find a fix. In this post we’ll give some background on how the subpath storage system works, an overview of the vulnerability, the steps to find the root cause and the fix, and finally some recommendations for GKE and Anthos users.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Kubernetes Filesystems: Intro to Volume Subpath&lt;/b&gt;&lt;br /&gt;The vulnerability, &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25741"&gt;CVE-2021-25741,&lt;/a&gt; was caused by a race condition during the creation of a subpath bind mount&lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#using-subpath"&gt; inside a container, and&lt;/a&gt; allowed an attacker to gain unauthorized access to the underlying node filesystem and its sensitive files. We’ll describe how that system is supposed to work, and then talk about the vulnerability.&lt;br /&gt;&lt;br /&gt;The &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#using-subpath"&gt;volume subpath&lt;/a&gt; feature in Kubernetes enables sharing a volume in multiple containers inside a pod. For example, we could create a Pod with an InitContainer that creates directories with pre-populated data in a mounted filesystem volume. These directories can then be used by containers in the same Pod by mounting the same volume and optionally specifying a subpath field to limit what's visible inside the container.&lt;br /&gt;&lt;br /&gt;While there are some great use cases for this feature, it’s an area that has had vulnerabilities discovered in the past. The kubelet must be extra cautious when handling user-owned subpaths because it operates with privileges in the host. One vulnerability that has been previously discovered involved the creation of a malicious workload where an InitContainer would create a symlink pointing to any location in the host. For example, the InitContainer could mount a volume in /mnt and create a symlink /mnt/attack inside the container pointing to /etc. Later in the Pod lifecycle, another container would attempt to mount the same volume with subpath attack. While preparing the volumes for the container, the kubelet would end up following the symlink to the host’s /etc instead of the container’s /etc, unknowingly exposing the host filesystem to the container. &lt;a href="https://kubernetes.io/blog/2018/04/04/fixing-subpath-volume-vulnerability/"&gt;A previous fix&lt;/a&gt; made sure that the subpath mount location is resolved and validated to point to a location inside the base volume and that it's not changeable by the user in between the time the path was validated and when the container runtime bind mounts it.  This race condition is known as &lt;a href="https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use"&gt;time of check to time of use (TOCTOU)&lt;/a&gt; where the subject being validated changes after it has been validated.&lt;br /&gt;&lt;br /&gt;These validations and others are summarized in the following container lifecycle sequence diagram.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img height="528" src="https://lh5.googleusercontent.com/EQCWiv_1gdD_ZxcNaatdzDzpQT3Py5khj8qjZe3PUlGB4CoZZTpAZgR4FVPqwN6HpYZpe9w5uDZnUnWQ4P87_r4jDFo7MCa2H5c7gB9j8bVZ_Ro9qv0CLa195fZoufpLUtNTIgqw8xE7Tsc0UCXuRH7j4EMjcN92eqoXzC5UQUkYDnrV=w640-h528" width="640" /&gt;&lt;br /&gt;&lt;br /&gt;Volume subpath validations before the container startup&lt;br /&gt;&lt;br /&gt;&lt;b&gt;A New TOCTOU Vulnerability: CVE-2021-25741&lt;/b&gt;&lt;br /&gt;The latest vulnerability was discovered by performing a symlink attack similar to the one explained above, with the difference being that it constantly swapped the symlink with a directory in a tight loop, using the RENAME_EXCHANGE option with &lt;a href="https://man7.org/linux/man-pages/man2/rename.2.html"&gt;renameat(2)&lt;/a&gt;. If the timing is just right, the kubelet will see the path as a directory and pass the validation check. Then the mount utility may find that the path is a symlink pointing to the host and follow it, exposing the host filesystem to the container. This is visualized in the following diagram:&lt;br /&gt;&lt;br /&gt;&lt;img height="174" src="https://lh3.googleusercontent.com/Fb7JNY1-fB2aJd81xl6axtqxBeFG-hT_-knHw6UZEas7OU7g2av8blc6ZmwadIetOEy5cYBNqZYge8sr_G66A04ruxbf9FX10Bfm0sUKbY3JPsz2StBacW8r6qDLCBmPGHPfthtJX5uUasqAJprKh91WCg7yhmQtajCNYVlWaVzhYSos=w640-h174" width="640" /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;i&gt;The expectation and the attack outcome&lt;/i&gt;&lt;/div&gt;&lt;br /&gt;The GKE Security and Storage teams worked closely to revise the fix done previously to find a solution. The previous fix takes several steps to ensure that the directory being mounted is safely opened and validated. After the file is opened and validated, the kubelet uses the magic-link path under /proc/[pid]/fd directory for all subsequent operations to ensure the file remains unchanged. However, we found out that all of the efforts were undone by the &lt;a href="https://man7.org/linux/man-pages/man8/mount.8.html"&gt;mount(8)&lt;/a&gt; linux utility which was dereferencing the procfs magic-link by default. Once the problem was understood, the fix involved making sure that the mount utility doesn't dereference the magic-links by using the --no-canonicalize flag in the mount command.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The fix is in&lt;/b&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Once the problem was well understood, we fixed it inside Kubernetes and quickly &lt;a href="https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2021-018"&gt;released the fix to GKE and Anthos&lt;/a&gt;.  If GKE auto-upgrade is enabled in your clusters there's no action on your part for this vulnerability, your nodes have already been patched. We strongly recommend that customers utilize &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-upgrades"&gt;auto-upgrades&lt;/a&gt;. Auto-upgrade gives peace of mind that your clusters are running with the latest patches.&lt;br /&gt;&lt;br /&gt;GKE released a &lt;a href="https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2021-018"&gt;Google Kubernetes Engine security bulletin&lt;/a&gt; on this vulnerability, which detailed what customers can do to immediately remediate this issue across GKE and Anthos. We also provided guidance to customers who manually manage their node versions, ensuring that fixed releases were available in every region for our &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels"&gt;Static and Release Channels&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Moving forward&lt;/b&gt;&lt;br /&gt;Google continues to invest heavily in the security of GKE and Kubernetes. We encourage users interested in finding vulnerabilities to participate in the &lt;a href="https://security.googleblog.com/2020/01/securing-open-source-how-google.html"&gt;Kubernetes bug bounty program&lt;/a&gt; and in the &lt;a href="https://security.googleblog.com/2020/05/expanding-our-work-with-open-source.html"&gt;Google Vulnerability Rewards Program (VRP)&lt;/a&gt; which was recently expanded to cover GKE vulnerabilities. For the latest guidance on security issues, please follow our &lt;a href="https://cloud.google.com/anthos/clusters/docs/security-bulletins"&gt;GKE Security Bulletins&lt;/a&gt;.&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=1Y7Uo0KZ4PI:OVyW19UuoR8:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=1Y7Uo0KZ4PI:OVyW19UuoR8:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=1Y7Uo0KZ4PI:OVyW19UuoR8:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/5154884564693495624/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5154884564693495624&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5154884564693495624" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5154884564693495624" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/12/exploring-container-security-storage.html" title="Exploring Container Security: A Storage Vulnerability Deep Dive" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh5.googleusercontent.com/EQCWiv_1gdD_ZxcNaatdzDzpQT3Py5khj8qjZe3PUlGB4CoZZTpAZgR4FVPqwN6HpYZpe9w5uDZnUnWQ4P87_r4jDFo7MCa2H5c7gB9j8bVZ_Ro9qv0CLa195fZoufpLUtNTIgqw8xE7Tsc0UCXuRH7j4EMjcN92eqoXzC5UQUkYDnrV=s72-w640-h528-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-4732798997432167076</id>
    <published>2021-11-11T07:00:00.002-05:00</published>
    <updated>2021-11-11T13:13:06.291-05:00</updated>
    <title type="text">ClusterFuzzLite: Continuous fuzzing for all </title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Jonathan Metzman, Google Open Source Security Team&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-af5e27f3-7fff-3089-1292-796e4c36069f"&gt;&lt;br /&gt;In recent years, &lt;a href="https://github.com/google/fuzzing/blob/master/docs/intro-to-fuzzing.md"&gt;continuous fuzzing&lt;/a&gt; has become an essential part of the software development lifecycle. By feeding unexpected or random data into a program, fuzzing catches bugs that would otherwise slip through the most thorough manual checks and provides coverage that would take staggering human effort to replicate. &lt;a href="https://www.nist.gov/itl/executive-order-improving-nations-cybersecurity/recommended-minimum-standards-vendor-or"&gt;NIST’s guidelines for software verification&lt;/a&gt;, recently released in response to the White House &lt;a href="https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/"&gt;Executive Order on Improving the Nation’s Cybersecurity&lt;/a&gt;, specify fuzzing among the minimum standard requirements for code verification.&lt;br /&gt;&lt;br /&gt;Today, we are excited to announce &lt;a href="https://github.com/google/clusterfuzzlite"&gt;ClusterFuzzLite&lt;/a&gt;, a continuous fuzzing solution that runs as part of CI/CD workflows to find vulnerabilities faster than ever before. With just a few lines of code, GitHub users can integrate ClusterFuzzLite into their workflow and fuzz pull requests to catch bugs before they are committed, enhancing the overall security of the software supply chain.&lt;br /&gt;&lt;br /&gt;Since its release in 2016, over 500 critical open source projects have integrated into Google’s &lt;a href="https://security.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html"&gt;OSS-Fuzz&lt;/a&gt; program, resulting in over &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/list?q=Type%3DBug-Security%20status%3AVerified&amp;amp;can=1"&gt;6,500&lt;/a&gt; vulnerabilities and &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/list?q=Type%3DBug%20status%3AVerified%20-Type%3DBug-Security&amp;amp;can=1"&gt;21,000&lt;/a&gt; functional bugs being fixed. ClusterFuzzLite goes hand-in-hand with OSS-Fuzz, by catching regression bugs much earlier in the development process.&lt;br /&gt;&lt;br /&gt;Large projects including &lt;a href="https://github.com/systemd/systemd/actions/workflows/cifuzz.yml"&gt;systemd&lt;/a&gt; and &lt;a href="https://github.com/curl/curl/actions/workflows/fuzz.yml"&gt;curl&lt;/a&gt; are already using ClusterFuzzLite during code review, with positive results. According to Daniel Stenberg, author of curl, “When the human reviewers nod and have approved the code and your static code analyzers and linters can't detect any more issues, fuzzing is what takes you to the next level of code maturity and robustness. OSS-Fuzz and ClusterFuzzLite help us maintain curl as a quality project, around the clock, every day and every commit.”&lt;br /&gt;&lt;br /&gt;With the release of ClusterFuzzLite, any project can integrate this essential testing standard and benefit from fuzzing. ClusterFuzzLite offers many of the same features as &lt;a href="https://github.com/google/clusterfuzz"&gt;ClusterFuzz&lt;/a&gt;, such as continuous fuzzing, sanitizer support, corpus management, and coverage report generation. Most importantly, it’s easy to set up and works with closed source projects, making ClusterFuzzLite a convenient option for any developer who wants to fuzz their software.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;span&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="border: none; display: inline-block; height: 300px; overflow: hidden; width: 624px;"&gt;&lt;img height="300" src="https://lh6.googleusercontent.com/nqA6se8bAeMQLtStK891nq997BZVGVmC9KlUKaSKMdSl1FebUpfl_qxmGb1YTSurmMZgtAFIYZnEWIPrg3dkWGUxy2RxfMufOrJ2JMZFxDoVG4RpwQ-7YBjggbY6qwComl4PU8ImsQ" style="margin-left: 0px; margin-top: 0px;" width="624" /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;With ClusterFuzzLite, fuzzing is no longer just an idealized "bonus" round of testing for those who have access to it, but a critical must-have step that everyone can use continuously on every software project. By finding and preventing bugs before they enter the codebase we can build a more secure software ecosystem. &lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;To learn more, check out the &lt;a href="https://google.github.io/clusterfuzzlite/"&gt;ClusterFuzzLite documentation&lt;/a&gt;. ClusterFuzzLite currently supports &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;,&amp;nbsp;&lt;a href="https://cloud.google.com/build"&gt;Google Cloud Build&lt;/a&gt;&amp;nbsp;and &lt;a href="https://github.com/kubernetes/test-infra/tree/master/prow#readme"&gt;Prow&lt;/a&gt;. We built this with CI system extensibility in mind, and adding support for other CI systems is straightforward. Please &lt;a href="https://github.com/google/clusterfuzzlite/issues/new"&gt;contact us&lt;/a&gt; if you’re interested in contributing support, or have any questions, feedback or feature requests.&lt;/span&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=Bo0saIm3f6g:IjOiZIMPzUw:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=Bo0saIm3f6g:IjOiZIMPzUw:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=Bo0saIm3f6g:IjOiZIMPzUw:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/4732798997432167076/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=4732798997432167076&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4732798997432167076" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4732798997432167076" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/11/clusterfuzzlite-continuous-fuzzing-for.html" title="ClusterFuzzLite: Continuous fuzzing for all " />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh6.googleusercontent.com/nqA6se8bAeMQLtStK891nq997BZVGVmC9KlUKaSKMdSl1FebUpfl_qxmGb1YTSurmMZgtAFIYZnEWIPrg3dkWGUxy2RxfMufOrJ2JMZFxDoVG4RpwQ-7YBjggbY6qwComl4PU8ImsQ=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-6878352249353260399</id>
    <published>2021-11-01T12:30:00.003-04:00</published>
    <updated>2021-11-01T12:41:31.735-04:00</updated>
    <title type="text">Trick &amp; Treat! 🎃 Paying Leets and Sweets for Linux Kernel privescs and k8s escapes</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Eduardo Vela, Google Bug Hunters Team&amp;nbsp;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;Starting today and for the next 3 months (until January 31 2022), we will pay 31,337 USD to security researchers that exploit privilege escalation in our lab environment with a patched vulnerability, and 50,337 USD to those that use a previously unpatched vulnerability, or a new exploit technique.&lt;br /&gt;&lt;br /&gt;We are constantly investing in the security of the Linux Kernel because much of the internet, and Google—from the devices in our pockets, to the services running on &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; in the cloud—depend on the security of it. We &lt;a href="https://googleprojectzero.blogspot.com/2021/10/how-simple-linux-kernel-memory.html"&gt;research its vulnerabilities and attacks&lt;/a&gt;, as well as &lt;a href="https://security.googleblog.com/2021/08/linux-kernel-security-done-right.html"&gt;study and develop its defenses&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;But we know that there is more work to do. That’s why we have decided to build on top of our &lt;a href="https://security.googleblog.com/2020/05/expanding-our-work-with-open-source.html"&gt;kCTF VRP&lt;/a&gt; from last year and triple our previous reward amounts (for at least the next 3 months).&lt;br /&gt;&lt;br /&gt;Our base rewards for each publicly patched vulnerability is 31,337 USD (at most one exploit per vulnerability), but the reward can go up to 50,337 USD in two cases:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If the vulnerability was otherwise unpatched in the Kernel (0day)&lt;/li&gt;&lt;li&gt;If the exploit uses a new attack or technique, as determined by Google&lt;/li&gt;&lt;/ul&gt;We hope the new rewards will encourage the security community to explore new Kernel exploitation techniques to achieve privilege escalation and drive quicker fixes for these vulnerabilities. It is important to note, that the easiest exploitation primitives are not available in our lab environment due to the hardening done on &lt;a href="https://cloud.google.com/container-optimized-os/docs"&gt;Container-Optimized OS&lt;/a&gt;. Note this program complements Android's VRP rewards, so exploits that work on Android could also be eligible for up to &lt;a href="https://bughunters.google.com/about/rules/6171833274204160"&gt;250,000 USD&lt;/a&gt; (that's in addition to this program).&lt;br /&gt;&lt;br /&gt;The mechanics are:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Connect to the &lt;a href="https://google.github.io/kctf/vrp"&gt;kCTF VRP cluster&lt;/a&gt;, obtain root and read the flag (read &lt;a href="https://github.com/google/security-research/blob/master/pocs/linux/cve-2021-22555/writeup.md"&gt;this writeup&lt;/a&gt; for how it was done before, and &lt;a href="https://google.github.io/kctf/security-threat-model.html"&gt;this threat model&lt;/a&gt; for inspiration), and then submit your flag and a checksum of your exploit &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSeQf6aWmIIjtG4sbEKfgOBK0KL3zzeHCrsgA1EcPr-xsFAk7w/viewform"&gt;in this form&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;(If applicable) report vulnerabilities to &lt;a href="https://github.com/google/kctf/blob/v1/SECURITY.md"&gt;upstream&lt;/a&gt;.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;We strongly recommend including a patch since that could qualify for an &lt;a href="https://bughunters.google.com/about/patch-rewards"&gt;additional reward&lt;/a&gt; from our Patch Reward Program, but please report vulnerabilities upstream promptly once you confirm they are exploitable.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;a href="https://bughunters.google.com/report/vrp"&gt;Report your finding&lt;/a&gt; to Google VRP once all patches are publicly available (we don't want to receive details of unpatched vulnerabilities ahead of the public.)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Provide the exploit code and the algorithm used to calculate the hash checksum.&lt;/li&gt;&lt;li&gt;A rough description of the exploit strategy is welcome.&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;Reports will be triaged on a weekly basis. If anyone has problems with the lab environment (if it's unavailable, technical issues or other questions), contact us on Discord in &lt;a href="https://discord.gg/V8UqnZ6JBG"&gt;#kctf&lt;/a&gt;. You can read more details about the program &lt;a href="https://google.github.io/kctf/vrp"&gt;here&lt;/a&gt;. Happy hunting!&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=GK5RjuPTjd0:xeJl1nNgiGg:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=GK5RjuPTjd0:xeJl1nNgiGg:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=GK5RjuPTjd0:xeJl1nNgiGg:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/6878352249353260399/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=6878352249353260399&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/6878352249353260399" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/6878352249353260399" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/11/trick-treat-paying-leets-and-sweets-for.html" title="Trick &amp; Treat! 🎃 Paying Leets and Sweets for Linux Kernel privescs and k8s escapes" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-1843713848226030872</id>
    <published>2021-10-28T13:00:00.006-04:00</published>
    <updated>2021-10-28T13:00:00.216-04:00</updated>
    <title type="text"> Protecting your device information with Private Set Membership</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Kevin Yeo and Sarvar Patel, Private Computing Team&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-3c78fa0f-7fff-ab5d-1002-2e6b786a6fbf"&gt;At Google, keeping you safe online is our top priority, so we continuously build the most advanced privacy-preserving technologies into our products. Over the past few years, we've utilized innovations in cryptographic research to keep your personal information private by design and secure by default. As part of this, we launched &lt;a href="https://security.googleblog.com/2019/02/protect-your-accounts-from-data.html"&gt;Password Checkup&lt;/a&gt;, which protects account credentials by notifying you if an entered username and password are known to have been compromised in a prior data breach. Using cryptographic techniques, Password Checkup can do this without revealing your credentials to anyone, including Google. Today, Password Checkup protects users across many platforms including &lt;a href="https://security.googleblog.com/2021/02/new-password-checkup-feature-coming-to.html"&gt;Android&lt;/a&gt;, &lt;a href="https://security.googleblog.com/2019/12/better-password-protections-in-chrome.html"&gt;Chrome&lt;/a&gt; and &lt;a href="https://blog.google/technology/safety-security/password-checkup/"&gt;Google Password Manager&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Another example is &lt;a href="https://security.googleblog.com/2019/06/helping-organizations-do-more-without-collecting-more-data.html"&gt;Private Join and Compute&lt;/a&gt;, an open source protocol which enables organizations to work together and draw insights from confidential data sets. Two parties are able to encrypt their data sets, join them, and compute statistics over the joint data. By leveraging secure multi-party computation, Private Join and Compute is designed to ensure that the plaintext data sets are concealed from all parties.&lt;br /&gt;&lt;br /&gt;In this post, we introduce the next iteration of our research, Private Set Membership, as well as its &lt;a href="https://github.com/google/private-membership"&gt;open-source availability&lt;/a&gt;. At a high level, Private Set Membership considers the scenario in which Google holds a database of items, and user devices need to contact Google to check whether a specific item is found in the database. As an example, users may want to check membership of a computer program on a block list consisting of known malicious software before executing the program. Often, the set’s contents and the queried items are sensitive, so we designed Private Set Membership to perform this task while preserving the privacy of our users. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Protecting your device information during enrollment&lt;/b&gt;&lt;br /&gt;Beginning in Chrome 94, Private Set Membership will enable Chrome OS devices to complete the enrollment process in a privacy-preserving manner. Device enrollment is an integral part of the out-of-box experience that welcomes you when getting started with a Chrome OS device. &lt;br /&gt;&lt;br /&gt;The device enrollment process requires checking membership of device information in encrypted Google databases, including checking if a device is enterprise enrolled or determining if a device was pre-packaged with a license. The correct end state of your Chrome OS device is determined using the results of these membership checks.&lt;br /&gt;&lt;br /&gt;During the enrollment process, we protect your Chrome OS devices by ensuring no information ever leaves the device that may be decrypted by anyone else when using Private Set Membership. Google will never learn any device information and devices will not learn any unnecessary information about other devices. ​​To our knowledge, this is the first instance of advanced cryptographic tools being leveraged to protect device information during the enrollment process.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;A deeper look at Private Set Membership&lt;/b&gt;&lt;br /&gt;Private Set Membership is built upon two cryptographic tools:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span id="docs-internal-guid-3c78fa0f-7fff-ab5d-1002-2e6b786a6fbf"&gt;Homomorphic encryption is a powerful cryptographic tool that enables computation over encrypted data without the need for decryption. As an example, given the encryptions of values X and Y, homomorphic encryption enables computing the encryption of the sum of X and Y without ever needing to decrypt.  This preserves privacy as the data remains concealed during the computation. Private Set Membership is built upon Google’s &lt;a href="https://github.com/google/shell-encryption"&gt;open source&lt;/a&gt; homomorphic encryption library.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span id="docs-internal-guid-3c78fa0f-7fff-ab5d-1002-2e6b786a6fbf"&gt;Oblivious hashing is a cryptographic technique that enables two parties to jointly compute a hash, H(K, x), where the sender holds the key, K, and the receiver holds the hash input, x. The receiver will obtain the hash, H(K, x), without learning the key K. At the same time, the input x will be hidden from the sender.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;Take a look at how Private Set Membership utilizes homomorphic encryption and oblivious hashing to protect data below:&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://storage.googleapis.com/gweb-uniblog-publish-prod/documents/psm.pdf" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="688" data-original-width="616" src="https://blogger.googleusercontent.com/img/a/AVvXsEiJaM0GzCnA3R642aSkxt2nNU3sCOVR0AdlJwFu3bo6rHeFQ1HZgULR4CoqLQDKq0-9iw-h5l8S06vrTjieZ6NrJfmdpsb0lHvGdntkB1qj12xzseT-jezupi6F2tPjBmGbPbk6MBbzZtJ9DvdcmDIBjKF4euKhNaolmUpe_GJSPpp2ynVhoFjw1gwQeA=s16000" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;For a deeper look into the technology behind Private Set Membership, you can also &lt;a href="https://github.com/google/private-membership"&gt;access our open source code&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Privacy properties&lt;/b&gt;&lt;br /&gt;By using Private Set Membership, the following privacy properties are obtained:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span id="docs-internal-guid-3c78fa0f-7fff-ab5d-1002-2e6b786a6fbf"&gt;No data leaves the device when checking membership. We designed Private Set Membership using advanced cryptographic techniques to ensure that data never leaves the device in an unencrypted manner when performing membership checks. As a result, the data on your device will be concealed from everyone, including Google.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span id="docs-internal-guid-3c78fa0f-7fff-ab5d-1002-2e6b786a6fbf"&gt;Devices learn only membership information and nothing else. Private Set Membership was designed to prevent devices from learning any unnecessary information about other devices when querying. For each query, devices learn only the results of the membership check and no other information.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Using Private Set Membership to solve more problems&lt;/b&gt;&lt;br /&gt;Private Set Membership is a powerful tool that solves a fundamental problem in a privacy-preserving manner. This is just the beginning of what’s possible using this technology. Private Set Membership can help preserve user privacy across a wide array of applications. For example:&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span id="docs-internal-guid-3c78fa0f-7fff-ab5d-1002-2e6b786a6fbf"&gt;Checking allow or block lists. In this setting, users check membership in an allow or block list to determine whether to proceed with the desired action. Private Set Membership enables this check without any information about the software leaving the device.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span id="docs-internal-guid-3c78fa0f-7fff-ab5d-1002-2e6b786a6fbf"&gt;Control flows with conditional membership checks. Control flows are a common computer science concept that represent arbitrary computer programs with conditional branching. In many cases, the conditional branches require checking membership of sensitive data to determine the next step of the algorithm. By utilizing Private Set Membership, we enable execution of these algorithms while ensuring data never leaves the user’s device.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;We still have a ways to go before Private Set Membership is used for general membership checks by devices. At Google, we are exploring a number of potential use cases to protect your privacy using Private Set Membership. We are excited to continue advancing the state-of-the-art cryptographic research to keep you safe.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;Acknowledgements&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The work in this post is the result of a collaboration between a large group of current and former Google engineers, research scientists and others including: Amr Aboelkher, Asra Ali, Ghous Amjad, Yves Arrouye, Roland Bock, Xi Chen, Maksim Ivanov, Dennis Kalinichenko, Nirdhar Khazanie, Dawon Lee, Tancrède Lepoint, Lawrence Lui, Pavol Marko, Thiemo Nagel, Mariana Raykova, Aaron Segal, Joon Young Seo, Karn Seth, and Jason Wong.&lt;/span&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=YaGw3qNjrUc:KxtiEuJebX0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=YaGw3qNjrUc:KxtiEuJebX0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=YaGw3qNjrUc:KxtiEuJebX0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/1843713848226030872/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=1843713848226030872&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/1843713848226030872" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/1843713848226030872" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/10/protecting-your-device-information-with.html" title=" Protecting your device information with Private Set Membership" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/a/AVvXsEiJaM0GzCnA3R642aSkxt2nNU3sCOVR0AdlJwFu3bo6rHeFQ1HZgULR4CoqLQDKq0-9iw-h5l8S06vrTjieZ6NrJfmdpsb0lHvGdntkB1qj12xzseT-jezupi6F2tPjBmGbPbk6MBbzZtJ9DvdcmDIBjKF4euKhNaolmUpe_GJSPpp2ynVhoFjw1gwQeA=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-2510750256939667799</id>
    <published>2021-10-27T13:01:00.003-04:00</published>
    <updated>2021-10-27T15:01:30.649-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="android" />
    <category scheme="http://www.blogger.com/atom/ns#" term="android security" />
    <category scheme="http://www.blogger.com/atom/ns#" term="pixel" />
    <category scheme="http://www.blogger.com/atom/ns#" term="tensor" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Titan M2" />
    <title type="text">Pixel 6: Setting a new standard for mobile security</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Dave Kleidermacher, Jesse Seed, Brandon Barbello, and Stephan Somogyi, Android, Pixel &amp;amp; Tensor security teams &lt;/span&gt;&lt;p&gt;With Pixel 6 and Pixel 6 Pro, we’re launching our most secure Pixel phone yet, with &lt;a href="https://support.google.com/pixelphone/answer/4457705?p=pixel_android_updates&amp;amp;visit_id=637708689245917155-1925669063&amp;amp;rd=1"&gt;5 years of security updates&lt;/a&gt; and the most layers of hardware security. These new Pixel smartphones take a layered security approach, with innovations spanning across the &lt;a href="https://blog.google/products/pixel/introducing-google-tensor/"&gt;Google Tensor&lt;/a&gt; system on a chip (SoC) hardware to new Pixel-first features in the Android operating system, making it the first Pixel phone with Google security from the silicon all the way to the data center. Multiple dedicated security teams have also worked to ensure that Pixel’s security is provable through transparency and external validation.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Secure to the Core &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Google has put user data protection and transparency at the forefront of hardware security with Google Tensor. Google Tensor’s main processors are Arm-based and utilize &lt;a href="https://developer.arm.com/ip-products/security-ip/trustzone"&gt;TrustZone&lt;/a&gt;™ technology. TrustZone is a key part of our security architecture for general secure processing, but the security improvements included in Google Tensor go beyond TrustZone. &lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEgW93LQv9wD4E9OHjnaX3Q85FFW7AP0j7LMuesju3j4a9VsY-Z5dj7-JzhAFZ6d8457UcQqu6ZYEL6p4ovY07HXcKx_dbYYUasryeDbR1zjWWpIHXjnLKXkA1rmISjv7bkUEjNQus8diJLSuPfrlYylVMcCDUJ_VGrpAD2VwfS4-z0wOuSoECoGPr55QA=s1388" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="700" data-original-width="1388" src="https://blogger.googleusercontent.com/img/a/AVvXsEgW93LQv9wD4E9OHjnaX3Q85FFW7AP0j7LMuesju3j4a9VsY-Z5dj7-JzhAFZ6d8457UcQqu6ZYEL6p4ovY07HXcKx_dbYYUasryeDbR1zjWWpIHXjnLKXkA1rmISjv7bkUEjNQus8diJLSuPfrlYylVMcCDUJ_VGrpAD2VwfS4-z0wOuSoECoGPr55QA=s16000" /&gt;&lt;/a&gt;Figure 1. Pixel Secure Environments&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;Google Tensor security core&lt;/strong&gt; is a custom designed security subsystem dedicated to the preservation of user privacy.  It's distinct from the application processor, not only logically, but physically, and consists of a dedicated CPU, ROM, one-time-programmable (OTP) memory, crypto engine, internal SRAM, and protected DRAM.  For Pixel 6 and 6 Pro, the security core’s primary use cases include protecting user data keys at runtime, hardening secure boot, and interfacing with Titan M2&lt;sup&gt;TM&lt;/sup&gt;. &lt;/p&gt;&lt;p&gt;Your secure hardware is only as good as your secure OS, and we are using &lt;strong&gt;&lt;a href="https://source.android.com/security/trusty"&gt;Trusty&lt;/a&gt;&lt;/strong&gt;, our open source trusted execution environment. Trusty OS is the secure OS used both in TrustZone and the Google Tensor security core. &lt;/p&gt;&lt;p&gt;With Pixel 6 and Pixel 6 Pro your security is enhanced by the new &lt;strong&gt;Titan M2&lt;sup&gt;TM&lt;/sup&gt;&lt;/strong&gt;, our discrete security chip, fully designed and developed by Google. In this next generation chip, we moved to an in-house designed RISC-V processor, with extra speed and memory, and made it even more resilient to advanced attacks. Titan M2&lt;sup&gt;TM&lt;/sup&gt; has been tested against the most rigorous standard for vulnerability assessment, AVA_VAN.5, by an independent, accredited evaluation lab. Titan M2™ supports &lt;a href="https://developer.android.com/training/articles/keystore#HardwareSecurityModule"&gt;Android Strongbox&lt;/a&gt;, which securely generates and stores keys used to protect your PINs and password, and works hand-in-hand with Google Tensor security core to protect user data keys while in use in the SoC. &lt;/p&gt;&lt;p&gt;Moving a step higher in the system, Pixel 6 and Pixel 6 Pro ship with &lt;a href="https://android-developers.googleblog.com/2021/10/android-12-is-live-in-aosp.html"&gt;Android 12&lt;/a&gt; and a slew of Pixel-first and Pixel-exclusive features. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Enhanced Controls&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;We aim to give users better ways to control their data and manage their devices with every release of Android. Starting with Android 12 on Pixel, you can use the new Security hub to manage all your security settings in one place. It helps protect your phone, apps, Google Account, and passwords by giving you a central view of your device’s current configuration. Security hub also provides recommendations to improve your security, helping you decide what settings best meet your needs. &lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEgl9VLXf1PrWim1Phxp81Vhyph5DMNSOkj094kgbGTOENO5u6ByXflTutWURfLuBoVYgZxr8pgLyfHn-Uz0aa1TCMya1SRAaEzowi4zdLvSywyGprxz3PzVffYURIsS3QwhWsJKA3VOaOSs-jfKdV4EJ-PydsIg259bVJfX8taQ4rfH7oq-wFpooDNgvQ" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img alt="" border="0" data-original-height="578" data-original-width="832" src="https://blogger.googleusercontent.com/img/a/AVvXsEgl9VLXf1PrWim1Phxp81Vhyph5DMNSOkj094kgbGTOENO5u6ByXflTutWURfLuBoVYgZxr8pgLyfHn-Uz0aa1TCMya1SRAaEzowi4zdLvSywyGprxz3PzVffYURIsS3QwhWsJKA3VOaOSs-jfKdV4EJ-PydsIg259bVJfX8taQ4rfH7oq-wFpooDNgvQ" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;For privacy, we are launching Privacy Dashboard, which will give you a simple and clear timeline view of the apps that have accessed your location, microphone and camera in the last 24 hours. If you notice apps that are accessing more data than you expected, the dashboard provides a path to controls to change those permissions on the fly.  &lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEhrAK3P4E6YP7ohHtruLt7LpVbi5Wcwyk3FtP15-rnUn7UE14MplHOt7diZqIeajyzs3SdnRTcjM51Z7iKNuYK3jvz9l1iBYkbeTB_SkojpGPoj61PaB9aN7DutDrnS4RZm-f2PHDkNQ1coEwLjj0CnS0Ru0uEswxKr2OowhehhbOSNTbNPSJi7Vn0Qgw" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img alt="" border="0" data-original-height="1080" data-original-width="1920" src="https://blogger.googleusercontent.com/img/a/AVvXsEhrAK3P4E6YP7ohHtruLt7LpVbi5Wcwyk3FtP15-rnUn7UE14MplHOt7diZqIeajyzs3SdnRTcjM51Z7iKNuYK3jvz9l1iBYkbeTB_SkojpGPoj61PaB9aN7DutDrnS4RZm-f2PHDkNQ1coEwLjj0CnS0Ru0uEswxKr2OowhehhbOSNTbNPSJi7Vn0Qgw" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;To provide additional transparency, new indicators in Pixel’s status bar will show you when your camera and mic are being accessed by apps. If you want to disable that access, new privacy toggles give you the ability to turn off camera or microphone access across apps on your phone with a single tap, at any time. &lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEhrS6pFaSYXwboXPlmusWizMXj8RFN79D8ZiPy1p9nWApFrangRiW2XBzcD3_cbPClDJd9ZE7z41piQFL9pBBJyz3w8fkKd_yrL98VX0wPyrLBbNS_91HaiHPeiKEC7gyXAIp64iJBqSDjXb2exsvxE2esFO4oo-mJlI8Vf5SoW5P710ycsXbuLUdJRYw" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img alt="" border="0" data-original-height="1080" data-original-width="1920" src="https://blogger.googleusercontent.com/img/a/AVvXsEhrS6pFaSYXwboXPlmusWizMXj8RFN79D8ZiPy1p9nWApFrangRiW2XBzcD3_cbPClDJd9ZE7z41piQFL9pBBJyz3w8fkKd_yrL98VX0wPyrLBbNS_91HaiHPeiKEC7gyXAIp64iJBqSDjXb2exsvxE2esFO4oo-mJlI8Vf5SoW5P710ycsXbuLUdJRYw" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;The Pixel 6 and Pixel 6 Pro also include a toggle that lets you remove your device’s ability to connect to less-secure 2G networks. While necessary in certain situations, accessing 2G networks can open up additional attack vectors; this toggle helps users mitigate those risks when 2G connectivity isn’t needed. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Built-in security&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By making all of our products secure by default, Google keeps more people safe online than anyone else in the world. With the Pixel 6 and Pixel 6 Pro, we’re also ratcheting up the dial on default, built-in protections.  &lt;/p&gt;&lt;p&gt;Our new optical under-display fingerprint sensor ensures that your biometric information is secure and never leaves your device. As part of our ongoing security development lifecycle, Pixel 6 and 6 Pro’s fingerprint unlock has been externally validated by security experts as a strong and secure biometric unlock mechanism meeting the &lt;a href="https://source.android.com/security/biometric/measure#tiered-authentication"&gt;Class 3 strength&lt;/a&gt; requirements defined in the &lt;a href="https://source.android.com/compatibility/android-cdd"&gt;Android 12 Compatibility Definition Document&lt;/a&gt; (CDD).  &lt;/p&gt;&lt;p&gt;Phishing continues to be a huge attack vector, affecting everyone across different devices.  &lt;/p&gt;&lt;p&gt;The Pixel 6 and Pixel 6 Pro introduce new anti-phishing protections. Built-in protections automatically scan for potential threats from phone calls, text messages, emails, and links sent through apps, notifying you if there’s a potential problem.  &lt;/p&gt;&lt;p&gt;Users are also now better protected against bad apps by enhancements to our &lt;a href="https://developers.google.com/android/play-protect/client-protections#offline-scan"&gt;on-device detection capabilities&lt;/a&gt; within Google Play Protect. Since its launch in 2017, Google Play Protect has provided the ability to detect malicious applications even when the device is offline. The Pixel 6 and Pixel 6 Pro uses new machine learning models that improve the detection of malware in Google Play Protect. The detection runs on your Pixel, and uses a privacy preserving technology called federated analytics to discover commonly-run bad apps. This will help to further protect over 3 billion users by improving Google Play Protect, which already analyzes over 100 billion apps every day to detect threats.  &lt;/p&gt;&lt;p&gt;Many of Pixel’s privacy-preserving features run inside Private Compute Core, an open source sandbox isolated from the rest of the operating system and apps. Our open source &lt;a href="https://security.googleblog.com/2021/09/introducing-androids-private-compute.html"&gt;Private Compute Services&lt;/a&gt; manages network communication for these features, and uses federated learning, federated analytics, and private information retrieval to improve features while preserving privacy. Some features already running on Private Compute Core include Live Caption, Now Playing, and Smart Reply suggestions. &lt;/p&gt;&lt;p&gt;Google Binary Transparency (GBT) is the newest addition to our open and verifiable security infrastructure, providing a new layer of software integrity for your device. Building on the principles pioneered by &lt;a href="https://certificate.transparency.dev/"&gt;Certificate Transparency&lt;/a&gt;, GBT helps ensure your Pixel is only running verified OS software. It works by using append-only logs to store signed hashes of the system images. The logs are public and can be used to verify that what’s published is the same as what’s on the device – giving users and researchers the ability to independently verify OS integrity for the first time.   &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Beyond the Phone&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Defense-in-depth isn’t just a matter of hardware and software layers. Security is a rigorous process. Pixel 6 and Pixel 6 Pro benefit from in-depth design and architecture reviews, memory-safe rewrites to security critical code, static analysis, formal verification of source code,  &lt;a href="https://source.android.com/devices/tech/debug/libfuzzer"&gt;fuzzing of critical components&lt;/a&gt;, and red-teaming, including with external security labs to pen-test our devices. Pixel is also part of the Android &lt;a href="https://www.google.com/about/appsecurity/android-rewards/"&gt;Vulnerability Rewards Program&lt;/a&gt;, which &lt;a href="https://security.googleblog.com/2021/02/vulnerability-reward-program-2020-year.html\"&gt;paid out $1.75 million last year&lt;/a&gt;, creating a valuable feedback loop between us and the security research community and, most importantly, helping us keep our users safe. &lt;/p&gt;&lt;p&gt;Capping off this combined hardware and software security system, is the Titan Backup Architecture, which gives your Pixel a secure foot in the cloud. &lt;a href="https://security.googleblog.com/2018/10/google-and-android-have-your-back-by.html"&gt;Launched in 2018&lt;/a&gt;, the combination of Android’s Backup Service and Google Cloud’s Titan Technology means that backed-up application data can only be decrypted by a randomly generated key that isn't known to anyone besides the client, including Google. This end-to-end service was independently audited by a third party security lab&amp;nbsp;to ensure no one can access a user's backed-up application data without specifically knowing their passcode. &lt;/p&gt;&lt;p&gt;To top it all off, this end-to-end security from the hardware across the software to the data center comes with no fewer than &lt;strong&gt;5 years of guaranteed Android security updates&lt;/strong&gt; on Pixel 6 and Pixel 6 Pro devices from the date they launch in the US. This is an important commitment for the industry, and we hope that other smartphone manufacturers broaden this trend. &lt;/p&gt;&lt;p&gt;Together, our secure chipset, software and processes make Pixel 6 and Pixel 6 Pro the most secure Pixel phone yet.  &lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=WaOcH_rkLRQ:dWMjHU04ya0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=WaOcH_rkLRQ:dWMjHU04ya0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=WaOcH_rkLRQ:dWMjHU04ya0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/2510750256939667799/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=2510750256939667799&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2510750256939667799" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2510750256939667799" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/10/pixel-6-setting-new-standard-for-mobile.html" title="Pixel 6: Setting a new standard for mobile security" />
    <author>
      <name>Google</name>
      <uri>http://www.blogger.com/profile/11822708545141062574</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/a/AVvXsEgW93LQv9wD4E9OHjnaX3Q85FFW7AP0j7LMuesju3j4a9VsY-Z5dj7-JzhAFZ6d8457UcQqu6ZYEL6p4ovY07HXcKx_dbYYUasryeDbR1zjWWpIHXjnLKXkA1rmISjv7bkUEjNQus8diJLSuPfrlYylVMcCDUJ_VGrpAD2VwfS4-z0wOuSoECoGPr55QA=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-8329847286410310083</id>
    <published>2021-10-27T10:47:00.001-04:00</published>
    <updated>2021-10-27T15:41:13.486-04:00</updated>
    <title type="text">Launching a collaborative minimum security baseline </title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Royal Hansen, Vice President, Security&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;According to an &lt;a breaches="" c="" go="" href="https://www.businesswire.com/news/home/20181115005665/en/Opus-Ponemon-Institute-Announce-Results-of-2018-Third-Party-Data-Risk-Study-59-of-Companies-Experienced-a-Third-Party-Data-Breach-Yet-Only-16-Say-They-Effectively-Mitigate-Third-Party-Risks#:~:text=According%20to%20the%20Opus%20and,their%20vendors%20or%20third%20parties.&amp;amp;text=What" in="" many="" months.="" more="" past="" s="" the=""&gt;Opus and Ponemon Institute study&lt;/a&gt;, 59% of companies have experienced a data breach caused by one of their vendors or third parties. Outsourcing operations to third-party vendors has become a popular business strategy as it allows organizations to save money and increase operational efficiency. While these are positives for business operations, they do create significant security risks. These vendors have access to critical systems and customer data and so their security posture becomes equally as important.&lt;br /&gt;&lt;br /&gt;Up until today, organizations of all sizes have had to design and implement their own security baselines for vendors that align with their risk posture. Unfortunately, this creates an impossible situation for vendors and organizations alike as they try to accommodate thousands of different requirements.&lt;br /&gt;&lt;br /&gt;To solve this challenge, organizations across the industry teamed up to design &lt;a href="https://mvsp.dev/"&gt;Minimum Viable Secure Product&lt;/a&gt; or MVSP – a vendor-neutral security baseline that is designed to eliminate overhead, complexity and confusion during the procurement, RFP and vendor security assessment process by establishing minimum acceptable security baselines. With MVSP, the industry can increase clarity during each phase so parties on both sides of the equation can achieve their goals, and reduce the onboarding and sales cycle by weeks or even months.&lt;br /&gt;&lt;br /&gt;MVSP was developed and is backed by companies across the industry, including Google, Salesforce, Okta, Slack and more. Our goal is to increase the minimum bar for security across the industry while simplifying the vetting process.&lt;br /&gt;&lt;br /&gt;MVSP is a collaborative baseline focused on developing a set of minimum security requirements for business-to-business software and business process outsourcing suppliers. Designed with simplicity in mind, it contains only those controls that must, at a minimum, be implemented to ensure a reasonable security posture. MVSP is presented in the form of a minimum baseline checklist that can be used to verify the security posture of a solution.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;How can MVSP help you?&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;img height="319" src="https://lh5.googleusercontent.com/SjdgPz9ywVpTOzbHB_TpjzE43RiNmwEpR_gETxnMdXykdtJh9OMR0flfYr019VazF8EmiX5JmRcfTwJsdh_sDlisAhs5mFL0b57OxDkdyY16lOkMUVCnqsggYlgALS8-EMSUhcIKiKE2RRjqrnQIZWg3BrITzK_hLiMRO0WSkDk5Gclc=w640-h319" width="640" /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Security teams measuring vendor offerings against a set of minimum security baselines&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;MVSP ensures that vendor selection and RFP include a minimum baseline that is backed by the industry. Communicating minimum requirements up front ensures everyone understands where they stand and that the expectations are clear.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;Internal teams looking to measure your security against minimum requirements&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;MVSP provides a set of minimum security baselines that can be used as a checklist to understand gaps in the security of a product or service. This can be used to highlight opportunities for improvement and raise their visibility within the organization, with clearly defined benefits.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Procurement teams gathering information about vendor services&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;MVSP provides a single set of security-relevant questions that are publicly available and industry-backed. Aligning on a single set of baselines allows clearer understanding from vendors, resulting in a quicker and more accurate response.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Legal teams negotiating contractual controls&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;MVSP ensures expectations regarding minimum security controls are understood up front, reducing discussions of controls at the contract negotiation stage. Referencing an external baseline helps to simplify contract language and increases familiarity with the requirements.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;Compliance teams documenting processes&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;MVSP provides an externally recognized and adopted set of security baselines on top of which to build your compliance efforts.&lt;br /&gt;&lt;br /&gt;We welcome &lt;a href="https://github.com/vendorsec/mvsp"&gt;community feedback&lt;/a&gt; and interest from other organizations who want to contribute to the MVSP baseline. Together we can raise the minimum bar for security across the industry and make everyone safer.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Acknowledgements&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;The work in this post is the result of a collaboration between a large number of security practitioners across the industry including: Marat Vyshegorodtsev, Chris John Riley, Gabor Acs-Kurucz, Sebastian Oglaza, Gen Buckley, and Kevin Clark.&lt;/i&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=x9gjQHathY4:LCz-EgwlSJE:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=x9gjQHathY4:LCz-EgwlSJE:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=x9gjQHathY4:LCz-EgwlSJE:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/8329847286410310083/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=8329847286410310083&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8329847286410310083" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8329847286410310083" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/10/launching-collaborative-minimum.html" title="Launching a collaborative minimum security baseline " />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh5.googleusercontent.com/SjdgPz9ywVpTOzbHB_TpjzE43RiNmwEpR_gETxnMdXykdtJh9OMR0flfYr019VazF8EmiX5JmRcfTwJsdh_sDlisAhs5mFL0b57OxDkdyY16lOkMUVCnqsggYlgALS8-EMSUhcIKiKE2RRjqrnQIZWg3BrITzK_hLiMRO0WSkDk5Gclc=s72-w640-h319-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-6908516399136053321</id>
    <published>2021-10-05T09:00:00.001-04:00</published>
    <updated>2021-10-05T09:00:00.234-04:00</updated>
    <title type="text">Google Protects Your Accounts – Even When You No Longer Use Them</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Sam Heft-Luthy, Product Manager, Privacy &amp;amp; Data Protection Office&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;What happens to our digital accounts when we stop using them? It’s a question we should all ask ourselves, because when we are no longer keeping tabs on what’s happening with old accounts, they can become targets for cybercrime.&lt;br /&gt;&lt;br /&gt;In fact, quite a few recent high-profile breaches targeted inactive accounts. The &lt;a href="https://www.crn.com/news/security/colonial-pipeline-hacked-via-inactive-account-without-mfa"&gt;Colonial Pipeline&lt;/a&gt; ransomware attack came through an inactive account that didn’t use multifactor authentication, according to a consultant who investigated the incident. And in the case of the recent &lt;a href="https://techcrunch.com/2021/08/18/t-mobile-says-at-least-47m-current-and-former-customers-affected-by-data-breach/"&gt;T-Mobile breach &lt;/a&gt;this summer, information from inactive prepaid accounts was accessed through old billing files. Inactive accounts can pose a serious security risk.&lt;br /&gt;&lt;br /&gt;For Google users, &lt;a href="https://support.google.com/accounts/answer/3036546?hl=en"&gt;Inactive Account Manager&lt;/a&gt; helps with that problem. You can decide when Google should consider your account inactive and whether Google should delete your data or share it with a trusted contact.    &lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Here’s How it Works&lt;/h3&gt;Once you &lt;a href="https://myaccount.google.com/inactive"&gt;sign up&lt;/a&gt; for Inactive Account Manager, available in My Account settings, you are asked to decide three things:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;When the account should be considered inactive: &lt;/b&gt;You can choose 3, 6, 12 or 18 months of inactivity before Google takes action on your account. Google will notify you a month before the designated time via a message sent to your phone and an email sent to the address you provide.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Who to notify and what to share: &lt;/b&gt;You can choose up to 10 people for Google to notify once your Google Account becomes inactive (they won’t be notified during setup). You can also give them access to some of your data. If you choose to share data with your trusted contacts, the email will include a list of the selected data you wanted to share with them, and a link they can follow to download that data. This can include things like photos, contacts, emails, documents and other data that you specifically choose to share with your trusted contact. You can also choose to set up a Gmail AutoReply, with a custom subject and message explaining that you’ve ceased using the account.&lt;/li&gt;&lt;li&gt;&lt;b&gt;If your inactive Google Account should be deleted: &lt;/b&gt;After your account becomes inactive, Google can delete all its content or send it to your designated contacts. If you’ve decided to allow someone to download your content, they’ll be able to do so for 3 months before it gets deleted. If you choose to delete your Google Account, this will include your publicly shared data (for example, your YouTube videos, or blogs on Blogger). You can review the data associated with your account on the &lt;a href="https://myaccount.google.com/dashboard"&gt;Google Dashboard&lt;/a&gt;. If you use Gmail with your account, you'll no longer be able to access that email once your account becomes inactive. You'll also be unable to reuse that Gmail username.&lt;/li&gt;&lt;/ol&gt;Setting up an Inactive Account plan is a simple step you can take to protect your data, secure your account in case it becomes inactive, and ensure that your digital legacy is shared with your trusted contacts in case you become unable to access your account. Our &lt;a href="https://myaccount.google.com/intro/privacycheckup?hl=en"&gt;Privacy Checkup&lt;/a&gt; now reminds you to set up a plan for your account, and we’ll send you an occasional reminder about your plan via email.&lt;br /&gt;&lt;br /&gt;At Google, we are constantly working to keep you safer online. This October, as we celebrate Cybersecurity Awareness Month, we want to remind our users of the security and privacy controls they have at their fingertips. For more ways to enhance your security check out our &lt;a href="https://safety.google/security/security-tips/"&gt;top five safety tips&lt;/a&gt; and visit our &lt;a href="https://safety.google/?utm_medium=blogpost&amp;amp;utm_source=google&amp;amp;utm_campaign=sid2021"&gt;Safety Center&lt;/a&gt; to learn all the ways Google helps keep you safer online, every day.&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=l65GmjhLgBc:1Ssk3lz0BKE:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=l65GmjhLgBc:1Ssk3lz0BKE:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=l65GmjhLgBc:1Ssk3lz0BKE:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/6908516399136053321/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=6908516399136053321&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/6908516399136053321" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/6908516399136053321" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/10/google-protects-your-accounts-even-when.html" title="Google Protects Your Accounts – Even When You No Longer Use Them" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-4816878964593628808</id>
    <published>2021-10-01T10:22:00.000-04:00</published>
    <updated>2021-10-01T10:22:15.911-04:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="Open Source" />
    <category scheme="http://www.blogger.com/atom/ns#" term="Security" />
    <category scheme="http://www.blogger.com/atom/ns#" term="supply chain" />
    <title type="text">Introducing the Secure Open Source Pilot Program</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Meder Kydyraliev and Kim Lewandowski, Google Open Source Security Team&lt;/span&gt;&lt;div&gt;&lt;br /&gt;Over the past year we have made a number of investments to strengthen the security of critical open source projects, and recently announced our &lt;a href="https://blog.google/technology/safety-security/why-were-committing-10-billion-to-advance-cybersecurity/"&gt;$10 billion commitment to cybersecurity defense&lt;/a&gt; including $100 million to support third-party foundations that manage open source security priorities and help fix vulnerabilities. &lt;br /&gt;&lt;br /&gt;Today, we are excited to announce our sponsorship for the &lt;a href="https://sos.dev/"&gt;Secure Open Source (SOS) pilot program&lt;/a&gt; run by the Linux Foundation. This program financially rewards developers for enhancing the security of critical open source projects that we all depend on. We are starting with a $1 million investment and plan to expand the scope of the program based on community feedback.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Why SOS?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;SOS rewards a very broad range of improvements that proactively harden critical open source projects and supporting infrastructure against application and supply chain attacks. To complement existing programs that reward vulnerability management, SOS’s scope is comparatively wider in the type of work it rewards, in order to support project developers.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;What projects are in scope?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Since there is no one definition of what makes an open source project critical, our selection process will be holistic. During submission evaluation we will consider the guidelines established by the &lt;a href="https://www.nist.gov/system/files/documents/2021/06/25/EO%20Critical%20FINAL_1.pdf"&gt;National Institute of Standards and Technology’s definition&lt;/a&gt; in response to the recent &lt;a href="https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/"&gt;Executive Order on Cybersecurity&lt;/a&gt; along with criteria listed below:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The impact of the project:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;How many and what types of users will be affected by the security improvements?&lt;/li&gt;&lt;li&gt;Will the improvements have a significant impact on infrastructure and user security?&lt;/li&gt;&lt;li&gt;If the project were compromised, how serious or wide-reaching would the implications be?&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The project’s rankings in existing open source criticality research:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Is the project included in the &lt;a href="https://www.coreinfrastructure.org/programs/census-program-ii/"&gt;Havard 2 Census Study&lt;/a&gt; of most-used packages, or does it have a score of 0.6 or above in the &lt;a href="https://github.com/ossf/criticality_score"&gt;OpenSSF Critically Score&lt;/a&gt; project?&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;b&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;What security improvements qualify?&amp;nbsp;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The program is initially focused on rewarding the following work:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Software supply chain security improvements including hardening CI/CD pipelines and distribution infrastructure. The &lt;a href="http://slsa.dev/"&gt;SLSA framework&lt;/a&gt; suggests specific requirements to consider, such as basic provenance generation and verification.&lt;/li&gt;&lt;li&gt;Adoption of software artifact signing and verification. One option to consider is Sigstore's set of utilities (e.g. &lt;a href="https://github.com/sigstore/cosign"&gt;cosign&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Project improvements that produce higher &lt;a href="https://github.com/ossf/scorecard"&gt;OpenSSF Scorecard&lt;/a&gt; results. For example, a contributor can follow remediation suggestions for the following Scorecard checks:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Code-Review&lt;/li&gt;&lt;li&gt;Branch-Protection&lt;/li&gt;&lt;li&gt;Pinned-Dependencies&lt;/li&gt;&lt;li&gt;Dependency-Update-Tool&lt;/li&gt;&lt;li&gt;Fuzzing&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Use of&amp;nbsp;&lt;a href="https://github.com/ossf/allstar"&gt;OpenSSF Allstar&lt;/a&gt;&amp;nbsp;and remediation of discovered issues.&lt;/li&gt;&lt;li&gt;Earning a &lt;a href="https://bestpractices.coreinfrastructure.org/"&gt;CII Best Practice Badge&lt;/a&gt; (which also improves the Scorecard results).&lt;/li&gt;&lt;/ul&gt;We'll continue adding to the above list, so check our &lt;a href="https://sos.dev/#frequently-asked-questions"&gt;FAQ&lt;/a&gt; for updates. You may also submit improvements not listed above, if you provide justification and evidence to help us understand the complexity and impact of the work.&lt;br /&gt;&lt;br /&gt;Only work completed after October 1, 2021 qualifies for SOS rewards.&lt;br /&gt;&lt;br /&gt;Upfront funding is available on a limited case by case basis for impactful improvements of moderate to high complexity over a longer time span. Such requests should explain why funding is required upfront and provide a detailed plan of how the improvements will be landed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;How to participate&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Review our &lt;a href="https://sos.dev/#frequently-asked-questions"&gt;FAQ&lt;/a&gt; and fill out &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdm8YFKTKHxcYiAyCH8Q9t5mor6jrucYKTp0J9pI60F4zvaqQ/viewform"&gt;this form&lt;/a&gt; to submit your application.&lt;br /&gt;&lt;br /&gt;Please include as much data or supporting evidence as possible to help us evaluate the significance of the project and your improvements.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Reward amounts&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Reward amounts are determined based on complexity and impact of work:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;$10,000 &lt;/b&gt;or more for complicated, high-impact and lasting improvements that almost certainly prevent major vulnerabilities in the affected code or supporting infrastructure.&lt;/li&gt;&lt;li&gt;&lt;b&gt;$5,000-$10,000&lt;/b&gt; for moderately complex improvements that offer compelling security benefits.&lt;/li&gt;&lt;li&gt;&lt;b&gt;$1,000-$5,000 &lt;/b&gt;for submissions of modest complexity and impact.&lt;/li&gt;&lt;li&gt;&lt;b&gt;$505 &lt;/b&gt;for small improvements that nevertheless have merit from a security standpoint.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;&lt;br /&gt;Looking Ahead&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The SOS program is part of a broader effort to address a growing truth: the world relies on open source software, but widespread support and financial contributions are necessary to keep that software safe and secure. This $1 million investment is just the beginning—we envision the SOS pilot program as the starting point for future efforts that will hopefully bring together other large organizations and turn it into a sustainable, long-term initiative under the OpenSSF. We welcome &lt;a href="mailto:sos-rewards@googlegroups.com"&gt;community feedback&lt;/a&gt; and interest from others who want to contribute to the SOS program. Together we can pool our support to give back to the open source community that makes the modern internet possible. &lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=KaGn0C1cM2Q:kXV-rQbl6G4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=KaGn0C1cM2Q:kXV-rQbl6G4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=KaGn0C1cM2Q:kXV-rQbl6G4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/4816878964593628808/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=4816878964593628808&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4816878964593628808" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4816878964593628808" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/10/introducing-secure-open-source-pilot.html" title="Introducing the Secure Open Source Pilot Program" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-1176949257541686127.post-5574409369339596433</id>
    <published>2021-09-28T09:00:00.002-04:00</published>
    <updated>2021-09-28T09:00:00.214-04:00</updated>
    <title type="text">Announcing New Patch Reward Program for Tsunami Security Scanner</title>
    <content type="html">&lt;span class="byline-author"&gt;Posted by Guoli Ma, Sebastian Lekies &amp;amp; Claudio Criscione, Google Vulnerability Management Team&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;One year ago, we &lt;a href="https://opensource.googleblog.com/2020/06/tsunami-extensible-network-scanning.html"&gt;published&lt;/a&gt; the &lt;a href="https://github.com/google/tsunami-security-scanner"&gt;Tsunami security scanner&lt;/a&gt; with the goal of detecting high severity, actively exploited vulnerabilities with high confidence. In the last several months, the Tsunami scanner team has been working closely with our vulnerability rewards program, &lt;a href="https://bughunters.google.com/about"&gt;Bug Hunters&lt;/a&gt;, to further improve Tsunami's security detection capabilities.&lt;br /&gt;&lt;br /&gt;Today, we are announcing a new experimental Patch Reward Program for the Tsunami project. Participants in the program will receive patch rewards for providing novel Tsunami detection plugins and web application fingerprints. We hope this program will allow us to quickly extend the detection capabilities of the scanner to better benefit our users and  uncover more vulnerabilities in their network infrastructure.&lt;br /&gt;&lt;br /&gt;For this launch, we will accept two types of contributions:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Vulnerability detection plugins:&lt;/b&gt; In order to expand Tsunami scanner's detection capabilities, we encourage everyone who is interested in making contributions to this project to add new vulnerabilities detection plugins. All plugin contributions will be reviewed by our panel members in Google's Vulnerability Management team and the reward amount will be determined by the severity as well as the time sensitivity of the vulnerability.&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Web application fingerprints: &lt;/b&gt;Several months ago, we added new web application fingerprinting capabilities to Tsunami that detect popular off-the-shelf web applications. It achieves this goal by matching application fingerprints against a database of known web application fingerprints. More fingerprint data is needed for this approach to support more web applications. You will be rewarded with a flat amount for each application added to the database.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;As with other Security Reward Programs, rewards can be donated to charity—and we'll double your donation if you choose to do so. We'll run this program in iterations so that everyone interested has the opportunity to participate.&lt;br /&gt;&lt;br /&gt;To learn more about this program, please check out our &lt;a href="https://bughunters.google.com/about/rules/4928084514701312"&gt;official rules and guidelines&lt;/a&gt;. And if you have any questions or suggestions for the program, feel free to contact us at &lt;a href="mailto:tsunami-patch-rewards@google.com"&gt;tsunami-patch-rewards@google.com&lt;/a&gt;.&lt;br /&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=QEPIl_i_moY:UHWj2T0qdtk:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?a=QEPIl_i_moY:UHWj2T0qdtk:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/GoogleOnlineSecurityBlog?i=QEPIl_i_moY:UHWj2T0qdtk:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="http://security.googleblog.com/feeds/5574409369339596433/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5574409369339596433&amp;isPopup=true" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5574409369339596433" />
    <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5574409369339596433" />
    <link rel="alternate" type="text/html" href="http://security.googleblog.com/2021/09/announcing-new-patch-reward-program-for.html" title="Announcing New Patch Reward Program for Tsunami Security Scanner" />
    <author>
      <name>Kaylin Trychon</name>
      <uri>http://www.blogger.com/profile/03448433013126421036</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
</feed>