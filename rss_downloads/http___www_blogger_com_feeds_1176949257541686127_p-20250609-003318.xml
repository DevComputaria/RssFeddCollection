<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1176949257541686127.post-2456668474452167313</id><published>2022-04-14T13:28:00.008-04:00</published><updated>2022-04-14T13:34:54.614-04:00</updated><title type='text'>How to SLSA Part 3 - Putting it all together</title><content type='html'>&lt;span class=&quot;byline-author&quot;&gt;Posted by Tom Hennen, software engineer, BCID &amp;amp; GOSST&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class=&quot;byline-author&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;In our last two posts (&lt;a href=&quot;https://security.googleblog.com/2022/04/how-to-slsa-part-1-basics.html&quot;&gt;1&lt;/a&gt;,&lt;a href=&quot;https://security.googleblog.com/2022/04/how-to-slsa-part-2-details.html&quot;&gt;2&lt;/a&gt;) we introduced a fictional example of Squirrel, Oppy, and Acme learning to SLSA and covered the basics and details of how they’d use SLSA for their organizations. Today we’ll close out the series by exploring how each organization pulls together the various solutions into a heterogeneous supply chain. &lt;br /&gt;&lt;br /&gt;As a reminder, Acme is trying to produce a container image that contains three artifacts:&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;The Squirrel package ‘foo’&lt;/li&gt;&lt;li&gt;The Oppy package ‘baz’&lt;/li&gt;&lt;li&gt;A custom executable, ‘bar’, written by Acme employees.&lt;/li&gt;&lt;/ol&gt;The process starts with ‘foo’ package authors triggering a build using GitHub Actions. This results in a new version of ‘foo’ (an artifact with hash ‘abc’) being pushed to the Squirrel repo along with its SLSA provenance (signed by Fulcio) and &lt;a href=&quot;https://github.com/in-toto/attestation/issues/47&quot;&gt;source attestation&lt;/a&gt;. When Squirrel gets this push request it verifies the artifact against the specific policy for ‘foo’ which checks that it was built by GitHub Actions from the expected source repository. After the artifact passes the policy check a VSA is created and the new package, its original SLSA provenance, and the VSA are made public in the Squirrel repo, available to all users of package ‘foo’.&lt;br /&gt;&lt;br /&gt;Next the maintainers of the Oppy ‘baz’ package trigger a new build using the Oppy Autobuilder. This results in a new version of ‘baz’ (an artifact with hash ‘def’) being pushed to a public Oppy repo with the SLSA provenance (signed by their org-specific keys) published to Rekor. When the repo gets the push request it makes the artifact available to the public. The repo does not perform any verification at this time.&lt;br /&gt;&lt;br /&gt;An Acme employee then makes a change to their Dockerfile, sending it for review by their co-worker, who approves the change and merges the PR. This then causes the Acme builder to trigger a build. During this build:&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;bar is compiled from source code stored in the same source repo as the Dockerfile.&lt;/li&gt;&lt;li&gt;acorn install downloads ‘foo’ from the Squirrel repo, verifying the VSA, and recording the use of acorn://foo@abc and its VSA in the build.&lt;/li&gt;&lt;li&gt;acme_oppy_get install (a custom script made by Acme) downloads the latest version of the Oppy ‘baz’ package and queries its SLSA provenance and other attestations from Rekor. It then performs a full verification checking that it was built by ‘https://oppy.example/slsa/builder/v1’ and the publicized key. Once verification is complete it records the use of oppy://baz@def and the associated attestations in the build.&lt;/li&gt;&lt;li&gt;The build process assembles the SLSA provenance for the container by:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Recording the Acme git repo the bar source and Dockerfile came from, into &lt;a href=&quot;https://slsa.dev/provenance/v0.2#materials&quot;&gt;materials&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Copying the reported dependencies of acorn://foo@abc and oppy://baz@def into &lt;a href=&quot;https://slsa.dev/provenance/v0.2#materials&quot;&gt;materials&lt;/a&gt; and adding their attestations to the output &lt;a href=&quot;https://github.com/in-toto/attestation/blob/main/spec/bundle.md&quot;&gt;in-toto bundle&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Recording the CI/CD entrypoint as the &lt;a href=&quot;https://slsa.dev/provenance/v0.2#invocation&quot;&gt;invocation&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Creating a signed &lt;a href=&quot;https://github.com/secure-systems-lab/dsse&quot;&gt;DSSE&lt;/a&gt; with the SLSA provenance and adding it to the output &lt;a href=&quot;https://github.com/in-toto/attestation/blob/main/spec/bundle.md&quot;&gt;in-toto bundle&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;Once the container is ready for release the Acme verifier checks the SLSA provenance (and other data in the in-toto bundle) using the policy from their own policy repo and issues a VSA. The VSA and all associated attestations are then published to an internal Rekor instance. Acme can then create an &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_bill_of_materials&quot;&gt;SBOM&lt;/a&gt; for the container leveraging data about the build as stored in Rekor. Acme then publishes the container image, the VSA, and the SBOM on Dockerhub.&lt;br /&gt;&lt;br /&gt;Downstream users of this Acme container can then check the Acme issued VSA, and if there are any problems Acme can consult their internal Rekor instance to get more details on the build allowing Acme to trace all of their dependencies back to source code and the systems used to create them.&lt;br /&gt;Conclusion&lt;br /&gt;&lt;br /&gt;With SLSA implemented in the ways described in this series, downstream users are protected from many of &lt;a href=&quot;https://slsa.dev/spec/v0.1/threats&quot;&gt;the threats affecting the software supply chain today&lt;/a&gt;. While users still need to trust certain parties, the number of systems requiring trust is much lower and users are in a much better position to investigate any issues that arise. &lt;br /&gt;&lt;br /&gt;We’d love to see the ideas in this series implemented, refuted, or used as a foundation to build even stronger solutions. We’d also love to hear some other methods on how to solve these issues. &lt;a href=&quot;https://github.com/slsa-framework/slsa#get-involved&quot;&gt;Show us&lt;/a&gt; how you like to SLSA.&amp;nbsp;</content><link rel='replies' type='application/atom+xml' href='http://security.googleblog.com/feeds/2456668474452167313/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment/fullpage/post/1176949257541686127/2456668474452167313?isPopup=true' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/2456668474452167313'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/2456668474452167313'/><link rel='alternate' type='text/html' href='http://security.googleblog.com/2022/04/how-to-slsa-part-3-putting-it-all.html' title='How to SLSA Part 3 - Putting it all together'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><thr:total>0</thr:total></entry>