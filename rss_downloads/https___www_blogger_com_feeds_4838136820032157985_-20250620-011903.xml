<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-4838136820032157985.post-7868790017880077590</id><published>2021-12-01T10:38:00.002-08:00</published><updated>2021-12-01T14:27:11.840-08:00</updated><title type='text'>This shouldn&#39;t have happened: A vulnerability postmortem</title><content type='html'>&lt;style type=&quot;text/css&quot;&gt;@import url(&#39;https://themes.googleusercontent.com/fonts/css?kit=t66UaDGGO9uRFa9A_n0Ge4kPz49mG1-u2NJpkhDAP5E&#39;);.lst-kix_q4elz23jmthh-5&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-5}ol.lst-kix_q4elz23jmthh-6.start{counter-reset:lst-ctn-kix_q4elz23jmthh-6 0}ul.lst-kix_wy7koemfbmv1-3{list-style-type:none}ul.lst-kix_wy7koemfbmv1-2{list-style-type:none}ul.lst-kix_wy7koemfbmv1-5{list-style-type:none}.lst-kix_2hgb22nra90i-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_wy7koemfbmv1-4{list-style-type:none}ul.lst-kix_wy7koemfbmv1-1{list-style-type:none}.lst-kix_2hgb22nra90i-7&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_wy7koemfbmv1-0{list-style-type:none}ol.lst-kix_q4elz23jmthh-0.start{counter-reset:lst-ctn-kix_q4elz23jmthh-0 0}.lst-kix_2hgb22nra90i-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_2hgb22nra90i-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_2hgb22nra90i-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_z8xtsan2wa5s-5{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-6{list-style-type:none}.lst-kix_q4elz23jmthh-7&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-7}ul.lst-kix_z8xtsan2wa5s-7{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-8{list-style-type:none}.lst-kix_2hgb22nra90i-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_2hgb22nra90i-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_2hgb22nra90i-3&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_z8xtsan2wa5s-0{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-1{list-style-type:none}ul.lst-kix_wy7koemfbmv1-7{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-2{list-style-type:none}ul.lst-kix_wy7koemfbmv1-6{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-3{list-style-type:none}ul.lst-kix_z8xtsan2wa5s-4{list-style-type:none}.lst-kix_2hgb22nra90i-1&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_wy7koemfbmv1-8{list-style-type:none}.lst-kix_q4elz23jmthh-5&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_q4elz23jmthh-5,lower-roman) &quot;. &quot;}.lst-kix_q4elz23jmthh-6&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_q4elz23jmthh-6,decimal) &quot;. &quot;}.lst-kix_q4elz23jmthh-4&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_q4elz23jmthh-4,lower-latin) &quot;. &quot;}.lst-kix_q4elz23jmthh-8&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_q4elz23jmthh-8,lower-roman) &quot;. &quot;}.lst-kix_oetzaqvyxxoa-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_oetzaqvyxxoa-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_oetzaqvyxxoa-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_oetzaqvyxxoa-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_q4elz23jmthh-7&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_q4elz23jmthh-7,lower-latin) &quot;. &quot;}.lst-kix_q4elz23jmthh-0&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_q4elz23jmthh-0,decimal) &quot;. &quot;}.lst-kix_q4elz23jmthh-1&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_q4elz23jmthh-1,lower-latin) &quot;. &quot;}.lst-kix_q4elz23jmthh-2&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_q4elz23jmthh-2,lower-roman) &quot;. &quot;}.lst-kix_q4elz23jmthh-3&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-3}.lst-kix_q4elz23jmthh-3&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_q4elz23jmthh-3,decimal) &quot;. &quot;}ul.lst-kix_ohd9cwgi2ci1-5{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-4{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-7{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-6{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-8{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-2{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-3{list-style-type:none}.lst-kix_oetzaqvyxxoa-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_oetzaqvyxxoa-7&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_ugjdqlaeq7aq-0{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-1{list-style-type:none}ol.lst-kix_q4elz23jmthh-5.start{counter-reset:lst-ctn-kix_q4elz23jmthh-5 0}ul.lst-kix_ugjdqlaeq7aq-6{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-7{list-style-type:none}.lst-kix_oetzaqvyxxoa-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_oetzaqvyxxoa-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_oetzaqvyxxoa-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_ugjdqlaeq7aq-4{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-5{list-style-type:none}ul.lst-kix_ugjdqlaeq7aq-8{list-style-type:none}.lst-kix_x7i5vtjupm2f-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_x7i5vtjupm2f-6&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_2fd9br43vo52-4{list-style-type:none}ul.lst-kix_2fd9br43vo52-3{list-style-type:none}.lst-kix_ohd9cwgi2ci1-3&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_2fd9br43vo52-6{list-style-type:none}ul.lst-kix_2fd9br43vo52-5{list-style-type:none}ul.lst-kix_2fd9br43vo52-8{list-style-type:none}.lst-kix_fvn7czyjg1wz-2&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_2fd9br43vo52-7{list-style-type:none}.lst-kix_x7i5vtjupm2f-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_2fd9br43vo52-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_fvn7czyjg1wz-4&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_2fd9br43vo52-0{list-style-type:none}.lst-kix_2fd9br43vo52-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_2fd9br43vo52-2{list-style-type:none}ul.lst-kix_2fd9br43vo52-1{list-style-type:none}.lst-kix_4idwybng3hbx-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_2fd9br43vo52-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_fvn7czyjg1wz-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_ohd9cwgi2ci1-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_4idwybng3hbx-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_fvn7czyjg1wz-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_x7i5vtjupm2f-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_ugjdqlaeq7aq-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_fvn7czyjg1wz-2{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-1{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-0{list-style-type:none}.lst-kix_wy7koemfbmv1-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_ugjdqlaeq7aq-6&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_q4elz23jmthh-7.start{counter-reset:lst-ctn-kix_q4elz23jmthh-7 0}.lst-kix_wy7koemfbmv1-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_wy7koemfbmv1-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_ugjdqlaeq7aq-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_ohd9cwgi2ci1-5&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_ohd9cwgi2ci1-7&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_2fd9br43vo52-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_ugjdqlaeq7aq-2&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_2hgb22nra90i-0{list-style-type:none}ul.lst-kix_2hgb22nra90i-1{list-style-type:none}ul.lst-kix_2hgb22nra90i-2{list-style-type:none}ul.lst-kix_2hgb22nra90i-3{list-style-type:none}.lst-kix_fvn7czyjg1wz-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_ugjdqlaeq7aq-4&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_2hgb22nra90i-4{list-style-type:none}ul.lst-kix_2hgb22nra90i-5{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-8{list-style-type:none}ul.lst-kix_2hgb22nra90i-6{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-7{list-style-type:none}ul.lst-kix_2hgb22nra90i-7{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-6{list-style-type:none}ul.lst-kix_2hgb22nra90i-8{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-5{list-style-type:none}ul.lst-kix_fvn7czyjg1wz-4{list-style-type:none}.lst-kix_x7i5vtjupm2f-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_fvn7czyjg1wz-3{list-style-type:none}ul.lst-kix_81cegzboe9ky-8{list-style-type:none}ul.lst-kix_81cegzboe9ky-5{list-style-type:none}ul.lst-kix_81cegzboe9ky-4{list-style-type:none}ul.lst-kix_81cegzboe9ky-7{list-style-type:none}ul.lst-kix_81cegzboe9ky-6{list-style-type:none}ol.lst-kix_q4elz23jmthh-8.start{counter-reset:lst-ctn-kix_q4elz23jmthh-8 0}ul.lst-kix_oetzaqvyxxoa-2{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-3{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-0{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-1{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-6{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-7{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-4{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-5{list-style-type:none}ul.lst-kix_oetzaqvyxxoa-8{list-style-type:none}ul.lst-kix_4idwybng3hbx-5{list-style-type:none}ul.lst-kix_4idwybng3hbx-4{list-style-type:none}.lst-kix_81cegzboe9ky-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_81cegzboe9ky-4&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_4idwybng3hbx-7{list-style-type:none}ul.lst-kix_4idwybng3hbx-6{list-style-type:none}.lst-kix_wy7koemfbmv1-6&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_4idwybng3hbx-8{list-style-type:none}.lst-kix_2gk0zovl15u8-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_81cegzboe9ky-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_81cegzboe9ky-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_81cegzboe9ky-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_wy7koemfbmv1-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_4idwybng3hbx-1{list-style-type:none}ul.lst-kix_4idwybng3hbx-0{list-style-type:none}ul.lst-kix_4idwybng3hbx-3{list-style-type:none}.lst-kix_2gk0zovl15u8-6&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_4idwybng3hbx-2{list-style-type:none}.lst-kix_prwgb47nvxz6-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_2gk0zovl15u8-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_81cegzboe9ky-1{list-style-type:none}ul.lst-kix_81cegzboe9ky-0{list-style-type:none}ul.lst-kix_81cegzboe9ky-3{list-style-type:none}ul.lst-kix_81cegzboe9ky-2{list-style-type:none}.lst-kix_z8xtsan2wa5s-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_z8xtsan2wa5s-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_z8xtsan2wa5s-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_prwgb47nvxz6-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_z8xtsan2wa5s-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_z8xtsan2wa5s-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_prwgb47nvxz6-1&gt;li:before{content:&quot;\0025cb  &quot;}ol.lst-kix_q4elz23jmthh-4{list-style-type:none}ol.lst-kix_q4elz23jmthh-3{list-style-type:none}ol.lst-kix_q4elz23jmthh-3.start{counter-reset:lst-ctn-kix_q4elz23jmthh-3 0}ol.lst-kix_q4elz23jmthh-6{list-style-type:none}ol.lst-kix_q4elz23jmthh-5{list-style-type:none}ol.lst-kix_q4elz23jmthh-0{list-style-type:none}ol.lst-kix_q4elz23jmthh-2{list-style-type:none}ol.lst-kix_q4elz23jmthh-1{list-style-type:none}.lst-kix_prwgb47nvxz6-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_prwgb47nvxz6-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_z8xtsan2wa5s-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_prwgb47nvxz6-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_z8xtsan2wa5s-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_z8xtsan2wa5s-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_prwgb47nvxz6-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_prwgb47nvxz6-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_2gk0zovl15u8-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_q4elz23jmthh-6&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-6}.lst-kix_2gk0zovl15u8-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_2gk0zovl15u8-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_cw1yal3teuur-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_2gk0zovl15u8-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_cw1yal3teuur-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_cw1yal3teuur-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_q4elz23jmthh-4&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-4}ol.lst-kix_q4elz23jmthh-8{list-style-type:none}ol.lst-kix_q4elz23jmthh-7{list-style-type:none}.lst-kix_z8xtsan2wa5s-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_cw1yal3teuur-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_cw1yal3teuur-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_cw1yal3teuur-3&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_q4elz23jmthh-4.start{counter-reset:lst-ctn-kix_q4elz23jmthh-4 0}.lst-kix_cw1yal3teuur-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_cw1yal3teuur-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_cw1yal3teuur-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_4idwybng3hbx-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_4idwybng3hbx-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_4idwybng3hbx-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_q4elz23jmthh-0&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-0}.lst-kix_4idwybng3hbx-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_4idwybng3hbx-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_4idwybng3hbx-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_x7i5vtjupm2f-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_x7i5vtjupm2f-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_x7i5vtjupm2f-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_ohd9cwgi2ci1-4&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_2fd9br43vo52-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_fvn7czyjg1wz-3&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_x7i5vtjupm2f-8{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-1{list-style-type:none}ul.lst-kix_x7i5vtjupm2f-4{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-0{list-style-type:none}ul.lst-kix_x7i5vtjupm2f-5{list-style-type:none}ul.lst-kix_ohd9cwgi2ci1-3{list-style-type:none}.lst-kix_2fd9br43vo52-4&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_x7i5vtjupm2f-6{list-style-type:none}.lst-kix_fvn7czyjg1wz-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_ohd9cwgi2ci1-2{list-style-type:none}ul.lst-kix_x7i5vtjupm2f-7{list-style-type:none}.lst-kix_ohd9cwgi2ci1-2&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_x7i5vtjupm2f-0{list-style-type:none}ul.lst-kix_x7i5vtjupm2f-1{list-style-type:none}ul.lst-kix_prwgb47nvxz6-8{list-style-type:none}.lst-kix_4idwybng3hbx-1&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_x7i5vtjupm2f-2{list-style-type:none}.lst-kix_x7i5vtjupm2f-1&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_x7i5vtjupm2f-3{list-style-type:none}.lst-kix_ohd9cwgi2ci1-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_2fd9br43vo52-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_fvn7czyjg1wz-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_wy7koemfbmv1-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_prwgb47nvxz6-2{list-style-type:none}ul.lst-kix_prwgb47nvxz6-3{list-style-type:none}ul.lst-kix_prwgb47nvxz6-0{list-style-type:none}ul.lst-kix_prwgb47nvxz6-1{list-style-type:none}ul.lst-kix_prwgb47nvxz6-6{list-style-type:none}ul.lst-kix_prwgb47nvxz6-7{list-style-type:none}ul.lst-kix_prwgb47nvxz6-4{list-style-type:none}ul.lst-kix_prwgb47nvxz6-5{list-style-type:none}.lst-kix_wy7koemfbmv1-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_ugjdqlaeq7aq-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_wy7koemfbmv1-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_ohd9cwgi2ci1-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_ugjdqlaeq7aq-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_2fd9br43vo52-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_fvn7czyjg1wz-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_ugjdqlaeq7aq-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_ugjdqlaeq7aq-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_q4elz23jmthh-1&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-1}.lst-kix_ohd9cwgi2ci1-8&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_q4elz23jmthh-1.start{counter-reset:lst-ctn-kix_q4elz23jmthh-1 0}.lst-kix_q4elz23jmthh-8&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-8}.lst-kix_q4elz23jmthh-2&gt;li{counter-increment:lst-ctn-kix_q4elz23jmthh-2}.lst-kix_81cegzboe9ky-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_81cegzboe9ky-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_81cegzboe9ky-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_2fd9br43vo52-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_wy7koemfbmv1-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_81cegzboe9ky-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_2gk0zovl15u8-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_2gk0zovl15u8-0{list-style-type:none}ul.lst-kix_2gk0zovl15u8-2{list-style-type:none}.lst-kix_2gk0zovl15u8-7&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_2gk0zovl15u8-1{list-style-type:none}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}ul.lst-kix_2gk0zovl15u8-4{list-style-type:none}ul.lst-kix_2gk0zovl15u8-3{list-style-type:none}ul.lst-kix_cw1yal3teuur-5{list-style-type:none}.lst-kix_prwgb47nvxz6-7&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_2gk0zovl15u8-6{list-style-type:none}ul.lst-kix_cw1yal3teuur-4{list-style-type:none}ul.lst-kix_2gk0zovl15u8-5{list-style-type:none}ul.lst-kix_cw1yal3teuur-7{list-style-type:none}ul.lst-kix_2gk0zovl15u8-8{list-style-type:none}ul.lst-kix_cw1yal3teuur-6{list-style-type:none}ul.lst-kix_2gk0zovl15u8-7{list-style-type:none}ul.lst-kix_cw1yal3teuur-8{list-style-type:none}ul.lst-kix_cw1yal3teuur-1{list-style-type:none}ol.lst-kix_q4elz23jmthh-2.start{counter-reset:lst-ctn-kix_q4elz23jmthh-2 0}ul.lst-kix_cw1yal3teuur-0{list-style-type:none}ul.lst-kix_cw1yal3teuur-3{list-style-type:none}ul.lst-kix_cw1yal3teuur-2{list-style-type:none}ol{margin:0;padding:0}table td,table th{padding:0}.c15{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c6{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:&quot;Arial&quot;;font-style:italic}.c2{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.c31{background-color:#ffffff;padding-top:0pt;padding-bottom:0pt;line-height:1.3;text-align:left;height:11pt}.c13{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c19{background-color:#ffffff;font-size:8pt;font-family:Consolas,&quot;Courier New&quot;;color:#009900;font-weight:400}.c34{background-color:#ffffff;padding-top:0pt;padding-bottom:0pt;line-height:1.3;text-align:left}.c12{background-color:#ffffff;font-size:8pt;font-family:Consolas,&quot;Courier New&quot;;color:#993333;font-weight:400}.c1{background-color:#ffffff;font-size:8pt;font-family:Consolas,&quot;Courier New&quot;;color:#212529;font-weight:400}.c45{color:#333333;text-decoration:none;vertical-align:baseline;font-size:30pt;font-family:&quot;Amatic SC&quot;}.c7{font-size:8pt;font-family:Consolas,&quot;Courier New&quot;;color:#333333;font-weight:400}.c4{margin-left:36pt;border-spacing:0;border-collapse:collapse;margin-right:auto}.c14{border-spacing:0;border-collapse:collapse;margin-right:auto}.c26{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c11{color:#000000;font-weight:400;font-size:11pt;font-family:&quot;Arial&quot;}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c10{font-size:8pt;font-family:Consolas,&quot;Courier New&quot;;color:#0000ff;font-weight:400}.c40{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:center}.c24{color:#000000;font-weight:700;font-size:11pt;font-family:&quot;Arial&quot;}.c0{font-size:9pt;font-family:Consolas,&quot;Courier New&quot;;color:#333333;font-weight:400}.c18{font-size:8pt;font-family:Consolas,&quot;Courier New&quot;;color:#008080;font-weight:400}.c5{font-size:9pt;font-family:Consolas,&quot;Courier New&quot;;color:#0000ff;font-weight:400}.c30{color:#000000;font-weight:400;font-size:10pt;font-family:&quot;Arial&quot;}.c42{background-color:#ffffff;font-size:8pt;color:#b1b100}.c47{font-weight:400;font-size:8pt;font-family:&quot;Arial&quot;}.c28{background-color:#ffffff;font-size:8pt;color:#000066}.c38{background-color:#ffffff;font-size:8pt;color:#ff0000}.c23{background-color:#ffffff;font-size:8pt;color:#339933}.c8{text-decoration:none;vertical-align:baseline;font-style:normal}.c50{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c46{text-decoration:none;vertical-align:baseline;font-style:italic}.c51{background-color:#ffffff;font-size:8pt;color:#0000dd}.c9{color:inherit;text-decoration:inherit}.c27{margin-left:36pt;padding-left:0pt}.c17{padding:0;margin:0}.c22{font-size:9pt;color:#008000}.c21{font-weight:400;font-family:Consolas,&quot;Courier New&quot;}.c33{orphans:2;widows:2}.c44{width:33%;height:1px}.c35{font-weight:400;font-style:italic}.c48{font-size:8pt;color:#8b0000}.c29{height:0pt}.c39{font-size:11pt}.c32{font-weight:700}.c41{font-size:10pt}.c20{vertical-align:super}.c49{height:11pt}.c36{color:#000000}.c16{page-break-after:avoid}.c37{font-size:5pt}.c43{margin-left:36pt}.c25{font-size:9pt}.title{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#000000;font-size:10pt;padding-bottom:0pt;font-family:&quot;Arial&quot;;line-height:1.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}p{margin:0;color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}h1{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:0pt;color:#000000;font-weight:700;font-size:11pt;padding-bottom:0pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;c50&quot;&gt;&lt;div&gt;
 &lt;p class=&quot;c3 c33 c16 subtitle&quot; id=&quot;h.hkm9sn4jh6p1&quot;&gt;&lt;span class=&quot;c30 c8&quot;&gt;Posted by Tavis Ormandy, Project Zero&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c13 c16&quot; id=&quot;h.ce7bhufj5ofg&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;Introduction&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;This is an unusual blog post. I normally write posts to highlight some hidden attack surface or interesting complex vulnerability class. This time, I want to talk about a vulnerability that is neither of those things. The striking thing about this vulnerability is just how simple it is. This should have been caught earlier, and I want to explore why that didn&amp;rsquo;t happen.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;In 2021, all good bugs need a catchy name, so I&amp;rsquo;m calling this one &amp;ldquo;BigSig&amp;rdquo;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;First, let&amp;rsquo;s take a look at the bug, I&amp;rsquo;ll explain how I found it and then try to understand why we missed it for so long.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c13 c16&quot; id=&quot;h.7ttrpxxbs2f9&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;Analysis&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Overview&quot;&gt;Network Security Services&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(NSS) is Mozilla&amp;#39;s widely used, cross-platform cryptography library. &lt;/span&gt;&lt;span&gt;When you verify an ASN.1 encoded digital signature&lt;/span&gt;&lt;span&gt;, NSS will create a &lt;/span&gt;&lt;span class=&quot;c26 c21&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/mozilla-central/rev/f8576fec48d866c5f988baaf1fa8d2f8cce2a82f/security/nss/lib/cryptohi/secvfy.c#120&quot;&gt;VFYContext&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;structure to store the necessary data. This includes things like the public key, the hash algorithm, and the signature itself.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.9a4d5980e1b13f527ae3eec9673b5d4e7a7010ba&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.0&quot;&gt;&lt;/a&gt;&lt;table class=&quot;c14&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c10&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c18&quot;&gt;VFYContextStr&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c18&quot;&gt;SECOidTag&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;hashAlg; &lt;/span&gt;&lt;span class=&quot;c21 c48&quot;&gt;/* the hash algorithm */&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c18&quot;&gt;SECKEYPublicKey&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;*key;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;buffer[1];&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;dsasig[DSA_MAX_SIGNATURE_LEN];&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;ecdsasig[2 * MAX_ECKEY_LEN];&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;rsasig[(RSA_MAX_MODULUS_BITS + 7) / 8];&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp; &amp;nbsp;} u;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;pkcs1RSADigestInfoLen;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;*pkcs1RSADigestInfo;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;*wincx;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;*hashcx;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c18&quot;&gt;SECHashObject&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;*&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;hashobj&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c18&quot;&gt;SECOidTag&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;encAlg; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c21 c48&quot;&gt;/* enc alg */&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c18&quot;&gt;PRBool&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;hasSignature;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c18&quot;&gt;SECItem&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;*params;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c34&quot;&gt;&lt;span class=&quot;c7&quot;&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3 c16 c33 subtitle&quot; id=&quot;h.scw51sqnutu4&quot;&gt;&lt;span class=&quot;c32&quot;&gt;Fig 1&lt;/span&gt;&lt;span&gt;. The &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;VFYContext&lt;/span&gt;&lt;span class=&quot;c30 c8&quot;&gt;&amp;nbsp;structure from NSS.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;&lt;br&gt;The maximum size signature that this structure can handle is whatever the largest union member is, in this case that&amp;rsquo;s RSA at &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/mozilla-central/rev/f8576fec48d866c5f988baaf1fa8d2f8cce2a82f/security/nss/lib/freebl/blapit.h#139&quot;&gt;2048 bytes&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;That&amp;rsquo;s 16384 bits, large enough to accommodate signatures from even the most ridiculously oversized keys.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;Okay, but what happens if you just....make a signature that&amp;rsquo;s bigger than that?&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;Well, it turns out the answer is memory corruption. Yes, really.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;br&gt;The untrusted signature is simply copied into this fixed-sized buffer, overwriting adjacent members with arbitrary attacker-controlled data.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;The bug is simple to reproduce and affects multiple algorithms. The easiest to demonstrate is RSA-PSS. In fact, just these three commands work:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.488dd1b55b75f3df66e36d7bc8b67538aa8c4fd3&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.1&quot;&gt;&lt;/a&gt;&lt;table class=&quot;c14&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;# We need 16384 bits to fill the buffer, then 32 + 64 + 64 + 64 bits to overflow to &lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;hashobj&lt;/span&gt;&lt;span class=&quot;c5 c8&quot;&gt;, &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5 c8&quot;&gt;# which contains function pointers (bigger would work too, but takes longer to generate).&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c21 c25&quot;&gt;$ openssl &lt;/span&gt;&lt;span class=&quot;c21 c25&quot;&gt;genpkey&lt;/span&gt;&lt;span class=&quot;c21 c25&quot;&gt;&amp;nbsp;-algorithm rsa-pss -pkeyopt rsa_keygen_bits:$((16384 + 32 + 64 + 64 + 64)) -pkeyopt rsa_keygen_primes:5 -out &lt;/span&gt;&lt;span class=&quot;c21 c25&quot;&gt;bigsig.key&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5 c8&quot;&gt;# Generate a self-signed certificate from that key&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c8 c21 c36 c25&quot;&gt;$ openssl req -x509 -new -key bigsig.key -subj &amp;quot;/CN=BigSig&amp;quot; -sha256 -out bigsig.cer&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5 c8&quot;&gt;# Verify it with NSS...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c21 c25&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c21 c25&quot;&gt;vfychain&lt;/span&gt;&lt;span class=&quot;c8 c21 c36 c25&quot;&gt;&amp;nbsp;-a bigsig.cer &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c8 c21 c25 c36&quot;&gt;Segmentation fault&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3 c33 c16 subtitle&quot; id=&quot;h.48dytsqrxb61&quot;&gt;&lt;span class=&quot;c32&quot;&gt;Fig 2&lt;/span&gt;&lt;span class=&quot;c30 c8&quot;&gt;. Reproducing the BigSig vulnerability in three easy commands.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;The actual code that does the corruption varies based on the algorithm; &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/mozilla-central/rev/f8576fec48d866c5f988baaf1fa8d2f8cce2a82f/security/nss/lib/cryptohi/secvfy.c#477&quot;&gt;here is the code&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for RSA-PSS. The bug is that there is simply no bounds checking at all; &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;sig&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;key&lt;/span&gt;&lt;span&gt;&amp;nbsp;are &amp;nbsp;arbitrary-length, attacker-controlled blobs, and &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;cx-&amp;gt;u&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;is a fixed-size buffer.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.5f5007590f34efd7a404c6d3f020f980f0b97070&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.2&quot;&gt;&lt;/a&gt;&lt;table class=&quot;c14&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;rsaPssKey&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sigLen = SECKEY_SignatureLen(key);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;(sigLen == 0) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c21 c48&quot;&gt;/* error set by SECKEY_SignatureLen */&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rv = SECFailure;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c31&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp;(sig-&amp;gt;len != sigLen) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;PORT_SetError(SEC_ERROR_BAD_SIGNATURE);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rv = SECFailure;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;c7 c8&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c31&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7 c8&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;PORT_Memcpy(cx-&amp;gt;u.buffer, sig-&amp;gt;data, sigLen);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c34&quot;&gt;&lt;span class=&quot;c7&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c10&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3 c33 c16 subtitle&quot; id=&quot;h.b383i7m17o2u&quot;&gt;&lt;span class=&quot;c32&quot;&gt;Fig 3&lt;/span&gt;&lt;span&gt;. The signature size must match the size of the key, but there are no other limitations. &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;cx-&amp;gt;u&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a fixed-size buffer, and &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;c30 c8&quot;&gt;&amp;nbsp;is an arbitrary-length, attacker-controlled blob.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;I think this vulnerability raises a few immediate questions:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_2fd9br43vo52-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Was this a recent code change or regression that hadn&amp;rsquo;t been around long enough to be discovered? &lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;No&lt;/span&gt;&lt;span&gt;, the original code was &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://hg.mozilla.org/projects/nss/annotate/41f5eb9e5df23951883ba3243f3ae51550663d77/security/nss/lib/cryptohi/secvfy.c#l158&quot;&gt;checked in&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;with ECC support on the 17th October 2003, but wasn&amp;#39;t exploitable until some &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://hg.mozilla.org/projects/nss/diff/10393/security/nss/lib/cryptohi/seckey.c#l1.63&quot;&gt;refactoring&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in June 2012. In 2017, RSA-PSS support was &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://hg.mozilla.org/projects/nss/rev/84e886ea090e36c69df58a71665a97bd25c62d02&quot;&gt;added&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;and made the same error.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_81cegzboe9ky-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Does this bug require a long time to generate a key that triggers the bug? &lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;No&lt;/span&gt;&lt;span&gt;, the example above generates a real key and signature, but it can just be garbage as the overflow happens before the signature check. A few kilobytes of &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;A&lt;/span&gt;&lt;span&gt;&amp;rsquo;s works just fine.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_2gk0zovl15u8-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Does reaching the vulnerable code require some complicated state that fuzzers and static analyzers would have difficulty synthesizing, like hashes or checksums? &lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;No&lt;/span&gt;&lt;span&gt;, it has to &lt;/span&gt;&lt;span&gt;be well-formed&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;DER, that&amp;rsquo;s about it.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_z8xtsan2wa5s-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Is this an uncommon code path? &lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;No&lt;/span&gt;&lt;span&gt;, Firefox does not use this code path for RSA-PSS signatures, but the default entrypoint for certificate verification in NSS, &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;CERT_VerifyCertificate(),&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;is vulnerable.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_oetzaqvyxxoa-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Is it specific to the RSA-PSS algorithm? &lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;No&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;, it also affects DSA signatures.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_prwgb47nvxz6-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Is it unexploitable, or otherwise limited impact? &lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;No&lt;/span&gt;&lt;span&gt;, the &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;hashobj&lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;member can be clobbered. That object contains &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/mozilla-central/rev/41a8c58186206985c0d70d3d460c04ac844d11d0/security/nss/lib/util/hasht.h#45&quot;&gt;function pointers&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;which are used immediately.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c32&quot;&gt;This wasn&amp;rsquo;t a process failure, the vendor did everything right&lt;/span&gt;&lt;span&gt;. Mozilla has a mature, world-class security team. They pioneered &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://www.mozilla.org/en-US/security/bug-bounty/&quot;&gt;bug bounties&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;invest&lt;/span&gt;&lt;span&gt;&amp;nbsp;in &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://research.mozilla.org/rust/&quot;&gt;memory safety&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, fuzzing and &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://coverage.moz.tools/&quot;&gt;test coverage&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;NSS was one of the very first projects included with &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://google.github.io/oss-fuzz/&quot;&gt;oss-fuzz&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, it was officially supported since at least &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://github.com/google/oss-fuzz/commit/3d325bf20f0b09961b6c7de34aa4da0d16cfa67d&quot;&gt;October 2014&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Mozilla also fuzz NSS themselves with &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://llvm.org/docs/LibFuzzer.html&quot;&gt;libFuzzer&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and have contributed their own &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/mozilla-central/source/security/nss/fuzz/asn1_mutators.cc&quot;&gt;mutator&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;collection and distilled &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://github.com/mozilla/nss-fuzzing-corpus&quot;&gt;coverage corpus&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. There is an extensive testsuite, and nightly &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://firefox-source-docs.mozilla.org/tools/sanitizer/asan.html&quot;&gt;ASAN&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;builds.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;I&amp;#39;m generally skeptical of static analysis, but this seems like a simple missing bounds check that should be easy to find. Coverity has been monitoring NSS since at least &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://scan.coverity.com/projects/nss&quot;&gt;December 2008&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and also &lt;/span&gt;&lt;span&gt;appears&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;to have failed to discover this.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;Until 2015, Google Chrome &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://chromium.googlesource.com/chromium/third_party/nss/+/refs/heads/master/README.chromium&quot;&gt;used&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;NSS, and maintained their own testsuite and fuzzing infrastructure independent of Mozilla. Today, Chrome platforms use &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://boringssl.googlesource.com/boringssl/&quot;&gt;BoringSSL&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;, but the NSS port is still maintained.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_ohd9cwgi2ci1-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Did Mozilla have good test coverage for the vulnerable areas? &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://coverage.moz.tools/#revision=latest&amp;path=security%2Fnss%2Flib%2Fcryptohi%2Fsecvfy.c&amp;suite=gtest&amp;view=file&amp;line=201&quot;&gt;YES&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Did Mozilla/chrome/oss-fuzz have relevant inputs in their fuzz corpus? &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://storage.googleapis.com/oss-fuzz-coverage/nss/reports/20211027/linux/src/nss/lib/cryptohi/secvfy.c.html#L201&quot;&gt;YES&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Is there a mutator capable of extending &lt;/span&gt;&lt;span&gt;ASN1_ITEM&lt;/span&gt;&lt;span&gt;s? &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://codereview.chromium.org/1677803002/patch/180001/190008&quot;&gt;YES&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Is this an &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://github.com/google/sanitizers/wiki/AddressSanitizerIntraObjectOverflow&quot;&gt;intra-object overflow&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, or other form of corruption that ASAN would have difficulty detecting? NO, it&amp;#39;s a textbook buffer overflow that ASAN can easily detect.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c13 c16&quot; id=&quot;h.rdx8pm6yen5&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;How did I find the bug?&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;I&amp;#39;ve been experimenting with alternative methods for measuring code coverage, to see if any have any practical use in fuzzing. The fuzzer that discovered this vulnerability used a combination of two approaches, stack coverage and object isolation.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c13 c16&quot; id=&quot;h.j6f1q7cn6h69&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;Stack Coverage&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;The most common method of measuring code coverage is block coverage, or &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://clang.llvm.org/docs/SanitizerCoverage.html#edge-coverage&quot;&gt;edge coverage&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;when source code is available. I&amp;rsquo;ve been curious if that is always sufficient. For example, consider a simple dispatch table with a combination of trusted and untrusted parameters, as in &lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;Fig 4&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.bd548b01b21e1cf0cdd7eaa859aff19f6d0661e5&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.3&quot;&gt;&lt;/a&gt;&lt;table class=&quot;c14&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c23 c21&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c23 c21&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c23 c21&quot;&gt;#include &amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1 c8&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c12&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c21 c51&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1 c8&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c12&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;cmd_handler_foo&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c28 c21&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c12&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;cmd_handler_bar&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;cmd_handler_foo&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c21 c38&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c12&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;cmd_handler_baz&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;a&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;b&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;cmd_handler_bar&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;buf&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1 c8&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c12&quot;&gt;typedef&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;dispatch_t&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1 c8&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;dispatch_t handlers&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;UCHAR_MAX&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp; &amp;nbsp; cmd_handler_foo&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp; &amp;nbsp; cmd_handler_bar&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp; &amp;nbsp; cmd_handler_baz&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c19&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1 c8&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c12&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;main&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;argc&lt;/span&gt;&lt;span class=&quot;c21 c23&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c19&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c12&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;cmd&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1 c8&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c21 c42&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;cmd &lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c28 c21&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;EOF&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c42 c21&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; handlers&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;c21 c28&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c28 c21&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c23 c21&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c19&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c19&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3 c33 c16 subtitle&quot; id=&quot;h.9a31y6u3z63v&quot;&gt;&lt;span class=&quot;c32&quot;&gt;Fig 4.&lt;/span&gt;&lt;span&gt;&amp;nbsp;The coverage &lt;/span&gt;&lt;span&gt;of command&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;bar&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a superset of command &lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;foo&lt;/span&gt;&lt;span&gt;, so an input containing the latter would be discarded during corpus minimization. There is a vulnerability unreachable via command &lt;/span&gt;&lt;span class=&quot;c32&quot;&gt;bar &lt;/span&gt;&lt;span&gt;that might never be discovered. Stack coverage would correctly keep both inputs.&lt;/span&gt;&lt;sup&gt;&lt;a href=&quot;#ftnt1&quot; id=&quot;ftnt_ref1&quot; name=&quot;ftnt_ref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;To solve this problem, I&amp;rsquo;ve been experimenting with monitoring the call stack during execution.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;The naive implementation is too slow to be practical, but after a lot of optimization I had come up with a library that was fast enough to be integrated into coverage-guided fuzzing, and was testing how it performed with NSS and other libraries.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c13 c16&quot; id=&quot;h.hx3w7e9emdvh&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;Object Isolation&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;Many data types are constructed from smaller records. PNG files are made of chunks, PDF files are made of streams, ELF files are made of sections, and X.509 certificates are made of ASN.1 TLV items. If a fuzzer has some understanding of the underlying format, it can isolate these records and extract the one(s) causing some new stack trace to be found.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;The fuzzer I was using is able to isolate and extract interesting new ASN.1 OIDs, SEQUENCEs, INTEGERs, and so on. Once extracted, it can then randomly combine or insert them into template data. This isn&amp;rsquo;t really a new idea, but is a new implementation. I&amp;#39;m planning to open source this code in the future.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c13 c16&quot; id=&quot;h.eyoyd5te8xd4&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;Do these approaches work?&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;I wish that I could say that discovering this bug validates my ideas, but I&amp;rsquo;m not sure it does. I was doing some moderately novel fuzzing, but I see no reason this bug couldn&amp;rsquo;t have been found earlier with even rudimentary fuzzing techniques.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c13 c16&quot; id=&quot;h.gjjikaq7urz2&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;Lessons Learned&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;How did extensive, customized fuzzing with impressive coverage metrics fail to discover this bug?&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 class=&quot;c13 c16&quot; id=&quot;h.jjxdnfbzkeky&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;What went wrong&lt;/span&gt;&lt;/h3&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 class=&quot;c13 c16&quot; id=&quot;h.tq5bofk5duby&quot;&gt;&lt;span&gt;Issue #1 &lt;/span&gt;&lt;span class=&quot;c35&quot;&gt;Missing end-to-end testing&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;.&lt;/span&gt;&lt;/h4&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;NSS is a &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_API_Guidelines&quot;&gt;modular&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;library. This layered design is reflected in the &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/nss/source/fuzz/&quot;&gt;fuzzing&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;approach, as each component is fuzzed independently. For example, the &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_Tech_Notes/nss_tech_note1#how_to_use_the_nss_asn.1_and_quickder_decoders&quot;&gt;QuickDER&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;decoder is tested &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/nss/source/fuzz/quickder_target.cc&quot;&gt;extensively&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but the fuzzer simply &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/nss/rev/5f2fa238b58c9158a52c0681ca2a67958a353082/fuzz/quickder_target.cc#72&quot;&gt;creates and discards&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;objects and never uses them.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.f4e0f36d5a94fbada814aadd6ad3730de37e434f&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.4&quot;&gt;&lt;/a&gt;&lt;table class=&quot;c4&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;extern&lt;/span&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c21 c22&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;LLVMFuzzerTestOneInput(&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;c0 c8&quot;&gt;&amp;nbsp;uint8_t *Data, size_t Size) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;c0 c8&quot;&gt;&amp;nbsp;*dest[2048];&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c31&quot;&gt;&lt;span class=&quot;c0 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;c0 c8&quot;&gt;&amp;nbsp;tpl : templates) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0 c8&quot;&gt;&amp;nbsp; &amp;nbsp;PORTCheapArenaPool pool;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;SECItem buf = {siBuffer, &lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;const_cast&lt;/span&gt;&lt;span class=&quot;c0&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;c0 c8&quot;&gt;&amp;nbsp;*&amp;gt;(Data),&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;c0&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;c0 c8&quot;&gt;&amp;gt;(Size)};&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c31&quot;&gt;&lt;span class=&quot;c0 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0 c8&quot;&gt;&amp;nbsp; &amp;nbsp;PORT_InitCheapArena(&amp;amp;pool, DER_DEFAULT_CHUNKSIZE);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;c0 c8&quot;&gt;)SEC_QuickDERDecodeItem(&amp;amp;pool.arena, dest, tpl, &amp;amp;buf);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0 c8&quot;&gt;&amp;nbsp; &amp;nbsp;PORT_DestroyCheapArena(&amp;amp;pool);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c34&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c29&quot;&gt;&lt;td class=&quot;c15&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3 c16 subtitle&quot; id=&quot;h.9rchnmg47ypy&quot;&gt;&lt;span class=&quot;c32&quot;&gt;Fig 5.&lt;/span&gt;&lt;span class=&quot;c8 c30&quot;&gt;&amp;nbsp;The QuickDER fuzzer simply creates and discards objects. This verifies the ASN.1 parsing, but not whether other components handle the resulting objects correctly.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p class=&quot;c2 c43&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;This fuzzer might have produced a &lt;/span&gt;&lt;span class=&quot;c21&quot;&gt;SECKEYPublicKey&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;that could have reached the vulnerable code, but as the result was never used to verify a signature, the bug could never be discovered.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 class=&quot;c13 c16&quot; id=&quot;h.y3p8hf8j0qqo&quot;&gt;&lt;span&gt;Issue #2 &lt;/span&gt;&lt;span class=&quot;c35&quot;&gt;Arbitrary size limits&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;.&lt;/span&gt;&lt;/h4&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;There is an arbitrary limit of &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/nss/source/fuzz/options/quickder.options&quot;&gt;10000 bytes&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;placed on fuzzed input. There is no such limit within NSS; many structures can exceed this size. This vulnerability demonstrates that errors happen at extremes, so this limit should be chosen thoughtfully.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;A reasonable choice might be 2&lt;/span&gt;&lt;span class=&quot;c20&quot;&gt;24&lt;/span&gt;&lt;span&gt;-1 bytes, the &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://datatracker.ietf.org/doc/html/rfc8446#section-4.4.2&quot;&gt;largest possible&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;certificate that can be presented by a server during a TLS handshake negotiation.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;While NSS might handle objects even larger than this, TLS cannot possibly be involved, reducing the overall severity of any vulnerabilities missed.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 class=&quot;c13 c16&quot; id=&quot;h.fny13amxfoss&quot;&gt;&lt;span&gt;Issue #3 &lt;/span&gt;&lt;span class=&quot;c35&quot;&gt;Misleading metrics&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;.&lt;/span&gt;&lt;/h4&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c46&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;All of the NSS fuzzers are represented in combined coverage metrics by oss-fuzz, rather than their individual coverage. This data proved misleading, as the vulnerable code is fuzzed extensively but by fuzzers that could not possibly generate a relevant input.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;This is because fuzzers like the &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/nss/source/fuzz/tls_server_target.cc&quot;&gt;tls_server_target&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;use fixed, &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://searchfox.org/nss/source/fuzz/tls_server_certs.cc&quot;&gt;hardcoded&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;&amp;nbsp;certificates. This exercises code relevant to certificate verification, but only fuzzes TLS messages and protocol state changes.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 class=&quot;c13 c16&quot; id=&quot;h.5iljytmv85wn&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;What Worked&lt;/span&gt;&lt;/h3&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_4idwybng3hbx-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;The design of the mozilla::pkix validation library prevented this bug from being worse than it could have been. &lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;Unfortunately it is unused outside of Firefox and Thunderbird.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;It&amp;rsquo;s debatable whether this was just good fortune or not. It seems likely RSA-PSS would eventually be permitted by mozilla::pkix, even though it was not today.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c8 c11&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c13 c16&quot; id=&quot;h.t0ijbutqkb5h&quot;&gt;&lt;span class=&quot;c8 c24&quot;&gt;Recommendations&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;This issue demonstrates that even extremely well-maintained C/C++ can have fatal, trivial mistakes.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 class=&quot;c13 c16&quot; id=&quot;h.yesvwttsgrsf&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;Short Term&lt;/span&gt;&lt;/h3&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_x7i5vtjupm2f-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;Raise the maximum size of ASN.1 objects produced by libFuzzer from 10,000 to 2&lt;/span&gt;&lt;span class=&quot;c20&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;-1 = 16,777,215 &amp;nbsp;bytes.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c17 lst-kix_wy7koemfbmv1-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;The QuickDER fuzzer should call some relevant APIs with any objects successfully created before destroying them.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c13 c27 li-bullet-0&quot;&gt;&lt;span&gt;The oss-fuzz code coverage metrics should be divided by fuzzer, not by project.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c13 c16&quot; id=&quot;h.i49j9otzq1oi&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;Solution&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;This vulnerability is &lt;/span&gt;&lt;span&gt;CVE-2021-43527,&lt;/span&gt;&lt;span&gt;&amp;nbsp;and is resolved in &lt;/span&gt;&lt;span class=&quot;c26&quot;&gt;&lt;a class=&quot;c91&quot; href=&quot;https://www.mozilla.org/en-US/security/advisories/&quot;&gt;NSS 3.73.0&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;. If you are a vendor that distributes NSS in your products, you will most likely need to update or backport the patch.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;c13 c16&quot; id=&quot;h.9canxlbf0rtp&quot;&gt;&lt;span class=&quot;c24 c8&quot;&gt;Credits&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;I would not have been able to find this bug without assistance from my colleagues from Ch&lt;/span&gt;&lt;span&gt;rome, Ryan S&lt;/span&gt;&lt;span class=&quot;c11 c8&quot;&gt;leevi and David Benjamin, who helped answer my ASN.1 encoding questions and engaged in thoughtful discussion on the topic.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c2&quot;&gt;&lt;span class=&quot;c11 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c13&quot;&gt;&lt;span&gt;Thanks to the NSS team, who helped triage and analyze the vulnerability.&lt;/span&gt;&lt;/p&gt;&lt;hr class=&quot;c44&quot;&gt;&lt;div&gt;
 &lt;p class=&quot;c3 c33&quot;&gt;&lt;a href=&quot;#ftnt_ref1&quot; id=&quot;ftnt1&quot; name=&quot;ftnt1&quot;&gt;[1]&lt;/a&gt;&lt;span class=&quot;c8 c36 c47&quot;&gt;&amp;nbsp;In this minimal example, a workaround if source was available would be to use a combination of sancov&amp;#39;s data-flow instrumentation options, but that also fails on more complex variants.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://googleprojectzero.blogspot.com/feeds/7868790017880077590/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://googleprojectzero.blogspot.com/2021/12/this-shouldnt-have-happened.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/7868790017880077590'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/7868790017880077590'/><link rel='alternate' type='text/html' href='https://googleprojectzero.blogspot.com/2021/12/this-shouldnt-have-happened.html' title='This shouldn&#39;t have happened: A vulnerability postmortem'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><thr:total>0</thr:total></entry>