<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1176949257541686127.post-4063859688883354856</id><published>2022-04-07T09:00:00.002-04:00</published><updated>2022-04-07T11:33:30.120-04:00</updated><title type='text'>Improving software supply chain security with tamper-proof builds</title><content type='html'>&lt;span class=&quot;byline-author&quot;&gt;Posted by Asra Ali and Laurent Simon, Google Open Source Security Team (GOSST)&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Many of the recent high-profile software attacks that have alarmed open-source users globally were consequences of supply chain integrity vulnerabilities: attackers gained control of a build server to &lt;a href=&quot;https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/&quot;&gt;use malicious source files&lt;/a&gt;, &lt;a href=&quot;https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/&quot;&gt;inject malicious artifacts&lt;/a&gt; into a compromised build platform, and bypass trusted builders to &lt;a href=&quot;https://about.codecov.io/apr-2021-post-mortem/&quot;&gt;upload malicious artifacts&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;Each of these attacks could have been prevented if there were a way to detect that the delivered artifacts diverged from the expected origin of the software. But until now, generating verifiable information that described where, when, and how software artifacts were produced (information known as provenance) was difficult. This information allows users to trace artifacts verifiably back to the source and develop risk-based policies around what they consume. Currently, provenance generation is not widely supported, and solutions that do exist may require migrating build processes to services like &lt;a href=&quot;https://github.com/tektoncd/chains&quot;&gt;Tekton Chains&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This blog post describes a new method of generating non-forgeable provenance using &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows&quot;&gt;GitHub Actions workflows&lt;/a&gt; for isolation and &lt;a href=&quot;https://www.sigstore.dev/&quot;&gt;Sigstore’s&lt;/a&gt; signing tools for authenticity. Using this approach, projects building on GitHub runners can achieve &lt;a href=&quot;https://slsa.dev/spec/v0.1/requirements&quot;&gt;SLSA 3&lt;/a&gt; (the third of four progressive SLSA “levels”), which affirms to consumers that your artifacts are authentic and trustworthy. &lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;h1 style=&quot;text-align: left;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Provenance&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;&lt;br /&gt;&lt;a href=&quot;https://slsa.dev/&quot;&gt;SLSA&lt;/a&gt; (&quot;Supply-chain Levels for Software Artifacts”) is a framework to help improve the integrity of your project throughout its development cycle, allowing consumers to trace the final piece of software you release all the way back to the source. Achieving a high SLSA level helps to improve the trust that your artifacts are what you say they are.&lt;br /&gt;&lt;br /&gt;This blog post focuses on build provenance, which gives users important information about the build: who performed the release process? Was the build artifact protected against malicious tampering? Source provenance describes how the source code was protected, which we’ll cover in future blog posts, so stay tuned.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h1 style=&quot;text-align: left;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Go prototype to generate non-forgeable build provenance&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;&lt;br /&gt;To create tamperless evidence of the build and allow consumer verification, you need to:&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Isolate the provenance generation from the build process;&lt;/li&gt;&lt;li&gt;Isolate against maintainers interfering in the workflow;&lt;/li&gt;&lt;li&gt;Provide a mechanism to identify the builder during provenance verification.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;The full isolation described in the first two points allows consumers to trust that the provenance was faithfully recorded; entities that provide this guarantee are called trusted builders.&lt;br /&gt;&lt;br /&gt;Our &lt;a href=&quot;https://github.com/slsa-framework/slsa-github-generator-go&quot;&gt;Go prototype&lt;/a&gt; solves all three challenges. It also includes running the build inside the trusted builder, which provides a strong guarantee that the build achieves SLSA 3’s &lt;a href=&quot;https://slsa.dev/spec/v0.1/requirements#ephemeral-environment&quot;&gt;ephemeral&lt;/a&gt; and &lt;a href=&quot;https://slsa.dev/spec/v0.1/requirements#isolated&quot;&gt;isolated&lt;/a&gt; requirement.&lt;h2 style=&quot;text-align: left;&quot;&gt;&lt;/h2&gt;&lt;h1 style=&quot;text-align: left;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;How does it work?&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;The following steps create the trusted builder that is necessary to generate provenance in isolation from the build and maintainer’s interference.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Step One: Create a reusable workflow on GitHub runners&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Leveraging GitHub’s &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/reusing-workflows&quot;&gt;reusable workflows&lt;/a&gt; provides the isolation mechanism from both maintainers’ caller workflows and from the build process. Within the workflow, Github Actions creates &lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#the-components-of-github-actions&quot;&gt;fresh instances of virtual machines (VMs), called runners, for each job&lt;/a&gt;. These separate VMs give the necessary isolation for a trusted builder, so that different VMs compile the project and generate and sign the SLSA provenance (see diagram below).&lt;br /&gt;&lt;br /&gt;Running the workflow on &lt;a href=&quot;https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners&quot;&gt;GitHub-hosted runners&lt;/a&gt; gives the guarantee that the code run is in fact the intended workflow, which &lt;a href=&quot;https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners&quot;&gt;self-hosted runners&lt;/a&gt; do not. This prototype relies on GitHub to run the exact code defined in the workflow.&lt;br /&gt;&lt;br /&gt;The reusable workflow also protects against possible interference from maintainers, who could otherwise try to define the workflow in a way that interferes with the builder. The only way to interact with a reusable workflow is through the input parameters it exposes to the calling workflow, which stops maintainers from altering information via &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#env&quot;&gt;environment variables&lt;/a&gt;, &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idsteps&quot;&gt;steps&lt;/a&gt;, &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idservices&quot;&gt;services&lt;/a&gt; and &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#defaults&quot;&gt;defaults&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;To protect against the possibility of one job (e.g. the build step) tampering with the other artifacts used by another job (the provenance step), this approach uses a trusted channel to protect the integrity of the data. We use &lt;a href=&quot;https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs&quot;&gt;job outputs&lt;/a&gt; to send hashes (due to size limitations) and then use the hashes to verify the binary received via the untrusted artifact registry. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Step 2: Use OpenID Connect (OIDC) to prove the identity of the workflow to an external service (Sigstore)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;OpenID Connect (OIDC) is a standard used across the web for identity providers (e.g., Google) to attest to the identity of a user for a third party. GitHub now &lt;a href=&quot;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect&quot;&gt;supports&lt;/a&gt; OIDC in their workflows. Each time a workflow is run, a runner can mint a unique &lt;a href=&quot;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token&quot;&gt;JWT token&lt;/a&gt; from GitHub’s OIDC provider. The token contains verifiable information of the workflow identity, including the caller repository, commit hash, trigger, and the current (reuseable) workflow path and reference. &lt;br /&gt;&lt;br /&gt;Using OIDC, the workflow proves its identity to &lt;a href=&quot;https://www.sigstore.dev/&quot;&gt;Sigstore&#39;s&lt;/a&gt; Fulcio root Certificate Authority, which acts as an external verification service. Fulcio signs a short-lived certificate attesting to an ephemeral signing key generated in the runner and tying it to the workload identity. A record of signing the provenance is kept in Sigstore’s transparency log &lt;a href=&quot;https://github.com/sigstore/rekor&quot;&gt;Rekor&lt;/a&gt;. Users can use the signing certificate as a trust anchor to verify that the provenance was authenticated and non-forgeable; it must have been created inside the trusted builder.&lt;h1 style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Verification&lt;/b&gt;&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;The consumer can verify the artifact and its signed provenance with these steps:&lt;br /&gt;&lt;ol style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Look up the corresponding Rekor log entry and verify the signature;&lt;/li&gt;&lt;li&gt;Verify the trusted builder identity by extracting it from the signing certificate;&lt;/li&gt;&lt;li&gt;Check that the provenance information matches the expected source and build.&lt;/li&gt;&lt;/ol&gt;See an &lt;a href=&quot;https://github.com/slsa-framework/slsa-github-generator-go&quot;&gt;example in action&lt;/a&gt; in the official repository.&lt;br /&gt;&lt;br /&gt;Performing these steps guarantees to the consumer that the binary was produced in the trusted builder at a given commit hash attested to in the provenance. They can trust that the information in the provenance was non-forgeable, allowing them to trust the build “recipe” and trace their artifact verifiably back to the source.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h1 style=&quot;text-align: left;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Extra Bonus: Keyless signing&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;One extra benefit of this method is that maintainers don’t need to manage or distribute cryptographic keys for signing, avoiding the &lt;a href=&quot;https://caremad.io/posts/2013/07/packaging-signing-not-holy-grail/&quot;&gt;notoriously difficult problem&lt;/a&gt; of key management. The OIDC protocol requires no hardcoded, long-term secrets be stored in GitHub&#39;s secrets, which sidesteps the potential problem of key mismanagement invalidating the SLSA provenance. Consumers simply use OIDC to verify that the binary artifact was built from a trusted builder that produced the expected provenance. &lt;br /&gt;&lt;h1 style=&quot;text-align: left;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Next Steps&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;Utilizing the SLSA framework is a proven way for ensuring software supply-chain integrity at scale. This prototype shows  that achieving high SLSA levels is easier than ever thanks to the newest features of popular CI/CD systems and open-source tooling. Increased adoption of tamper-safe (SLSA 3+) build services will contribute to a stronger open-source ecosystem and help close one easily exploited gap in the current supply chain.&lt;br /&gt;&lt;br /&gt;We encourage testing and adoption and welcome any improvements to the project. Please share feedback, comments and suggestions at &lt;a href=&quot;https://github.com/slsa-framework/slsa-github-generator-go&quot;&gt;slsa-github-generator-go&lt;/a&gt; and &lt;a href=&quot;https://github.com/slsa-framework/slsa-verifier&quot;&gt;slsa-verifier&lt;/a&gt; project repositories. We will officially release v1 in a few weeks!&lt;br /&gt;&lt;br /&gt;In follow-up posts, we will demonstrate adding non-forgeable source provenance attesting to secure repository settings, and showcase the same techniques for other build toolchains and package managers, etc. Stay tuned!&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://security.googleblog.com/feeds/4063859688883354856/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment/fullpage/post/1176949257541686127/4063859688883354856?isPopup=true' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/4063859688883354856'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/4063859688883354856'/><link rel='alternate' type='text/html' href='http://security.googleblog.com/2022/04/improving-software-supply-chain.html' title='Improving software supply chain security with tamper-proof builds'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><thr:total>0</thr:total></entry>