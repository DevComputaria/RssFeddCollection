<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1176949257541686127.post-7789131255185229942</id><published>2021-12-17T12:25:00.003-05:00</published><updated>2022-12-01T20:58:11.770-05:00</updated><title type='text'>Understanding the Impact of Apache Log4j Vulnerability</title><content type='html'>&lt;span class=&quot;byline-author&quot;&gt;Posted by James Wetter and Nicky Ringland, Open Source Insights Team&amp;nbsp;&lt;br /&gt;&lt;/span&gt;&lt;div&gt;&lt;span class=&quot;byline-author&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Editors Note:&lt;/b&gt;&lt;/div&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;i&gt;The below numbers were calculated based on both log4j-core and log4j-api, as both were listed on the CVE. Since then, the CVE has been updated with the clarification that only log4j-core is affected.&lt;/i&gt;&lt;/p&gt;&lt;i&gt;&lt;br /&gt;The ecosystem impact numbers for just log4j-core, as of 19th December are over 17,000 packages affected, which is roughly 4% of the ecosystem. 25% of affected packages have fixed versions available.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://commondatastorage.googleapis.com/log4j_vulnerability/log4j_top_500_dependents.csv&quot;&gt;linked list&lt;/a&gt;, which continues to be updated, only includes packages which depend on log4j-core.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;##&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;More than 35,000 Java packages, amounting to over 8% of the &lt;a href=&quot;https://www.maven.org/&quot;&gt;Maven Central repository&lt;/a&gt; (the most significant Java package repository), have been impacted by the recently disclosed log4j vulnerabilities (&lt;a href=&quot;https://deps.dev/advisory/GHSA/GHSA-jfh8-c2jp-5v3q&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://deps.dev/advisory/GHSA/GHSA-7rjr-3q55-vv33&quot;&gt;2&lt;/a&gt;), with widespread fallout across the software industry. The vulnerabilities allow an attacker to perform remote code execution by exploiting the insecure JNDI lookups feature exposed by the logging library log4j. This exploitable feature was enabled by default in many versions of the library.&lt;div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This vulnerability has captivated the information security ecosystem since its disclosure on December 9th because of both its severity and widespread impact. As a popular logging tool, log4j is used by tens of thousands of software packages (known as artifacts in the Java ecosystem) and projects across the software industry. User’s lack of visibility into their dependencies and transitive dependencies has made patching difficult; it has also made it difficult to determine the full blast radius of this vulnerability. Using &lt;a href=&quot;https://deps.dev/&quot;&gt;Open Source Insights&lt;/a&gt;, a project to help understand open source dependencies, we surveyed all versions of all artifacts in the &lt;a href=&quot;https://www.maven.org/&quot;&gt;Maven Central Repository&lt;/a&gt; to determine the scope of the issue in the open source ecosystem of JVM based languages, and to track the ongoing efforts to mitigate the affected packages.&lt;div&gt;&lt;div&gt;&lt;span class=&quot;byline-author&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;&quot;&gt;&lt;span&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;&quot;&gt;&lt;span id=&quot;docs-internal-guid-5fefaa6d-7fff-4bf0-d3b4-aba698ec7bd3&quot;&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;&lt;b&gt;How widespread is the log4j vulnerability?&lt;/b&gt;&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;&quot;&gt;As of December 16, 2021, we found that 35,863 of the available Java artifacts from Maven Central depend on the affected log4j code. This means that more than 8% of all packages on Maven Central have at least one version that is impacted by this vulnerability. (These numbers do not encompass all Java packages, such as directly distributed binaries, but Maven Central is a strong proxy for the state of the ecosystem.)&lt;br /&gt;&lt;br /&gt;As far as ecosystem impact goes, 8% is enormous. The average ecosystem impact of advisories affecting Maven Central is 2%, with the median less than 0.1%.&lt;span class=&quot;byline-author&quot;&gt;&lt;p dir=&quot;ltr&quot; style=&quot;color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;&quot;&gt;&lt;span style=&quot;color: black; font-size: 11pt; font-style: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh64t6qSWti7pxsnFZF4bSB-5ugAUNKY1eKFXVScRDaclhnLSOGc4sTwPe10D4Gli3LLY94B92dP_p1K0nzUJX_Jh_1m93YcV-TfAenMu3Mhzlq6OVvzTOlnbcdIRAsiBZ7ewno3Qlacm_PDS5sRj4bNatSO0I7uTFsUKvY-k4Gnp1IM-nOLBOni1we/s1338/Log4J%201.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;261&quot; data-original-width=&quot;1338&quot; height=&quot;124&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh64t6qSWti7pxsnFZF4bSB-5ugAUNKY1eKFXVScRDaclhnLSOGc4sTwPe10D4Gli3LLY94B92dP_p1K0nzUJX_Jh_1m93YcV-TfAenMu3Mhzlq6OVvzTOlnbcdIRAsiBZ7ewno3Qlacm_PDS5sRj4bNatSO0I7uTFsUKvY-k4Gnp1IM-nOLBOni1we/w640-h124/Log4J%201.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; text-align: center; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/span&gt;Direct dependencies account for around 7,000 of the affected artifacts, meaning that any of its versions depend upon an affected version of log4j-core or log4j-api, as described in the CVEs. The majority of affected artifacts come from indirect dependencies (that is, the dependencies of one’s own dependencies), meaning log4j is not explicitly defined as a dependency of the artifact, but gets pulled in as a transitive dependency.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;&quot;&gt;&lt;span class=&quot;byline-author&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgue3AQ4iy3WGLwBEjtOjMuMalL0OLno4zTrpLFu0eI_VY3OMKvT0VzusRyR2S3hHfXkL4ZDZ85B9GmkgAgO0uU5PQRY4c0jDv7QU0YHm4PhYAsy4843v-KtXiwHWh006Q_3BYPXuhAB0iQUhf7Aft9OCWvX1cd1uFHEzQd8x2vU1zRFlb7QMl85YdS/s1600/Log4J%202.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;629&quot; data-original-width=&quot;1600&quot; height=&quot;252&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgue3AQ4iy3WGLwBEjtOjMuMalL0OLno4zTrpLFu0eI_VY3OMKvT0VzusRyR2S3hHfXkL4ZDZ85B9GmkgAgO0uU5PQRY4c0jDv7QU0YHm4PhYAsy4843v-KtXiwHWh006Q_3BYPXuhAB0iQUhf7Aft9OCWvX1cd1uFHEzQd8x2vU1zRFlb7QMl85YdS/w640-h252/Log4J%202.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p dir=&quot;ltr&quot; style=&quot;color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;What is the current progress in fixing the open source JVM ecosystem? &lt;/span&gt;&lt;/b&gt;&lt;br /&gt;We counted an artifact as fixed if the artifact had at least one version affected and has released a greater stable version (according to &lt;a href=&quot;http://semver.org/&quot;&gt;semantic&lt;/a&gt; versioning) that is unaffected. An artifact affected by log4j is considered fixed if it has updated to 2.16.0 or removed its dependency on log4j altogether.&lt;br /&gt;&lt;br /&gt;At the time of writing, nearly five thousand of the affected artifacts have been fixed. This represents a rapid response and mammoth effort both by the log4j maintainers and the wider community of open source consumers.&lt;br /&gt;&lt;br /&gt;That leaves over 30,000 artifacts affected, many of which are dependent on another artifact to patch (the transitive dependency) and are likely blocked. &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh6YU-NgMcN_lzPgScXm2oct-FgOZKQzM7hd7ooJH1znolf3H3AMfWvW1XwoTvNMMCp92OVjnUIQ-gWjyZ3wx5RsbJAvbHeGUkI0YRlzsUGJoQAKoMhyWYJqg19Os6NFr9H7JepPSYdaAzZGHH4xXXU4xoOiwjrpPoU0nHR3vMcrA43giHRKV5TO0FD/s728/Log4J%203.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;577&quot; data-original-width=&quot;728&quot; height=&quot;254&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh6YU-NgMcN_lzPgScXm2oct-FgOZKQzM7hd7ooJH1znolf3H3AMfWvW1XwoTvNMMCp92OVjnUIQ-gWjyZ3wx5RsbJAvbHeGUkI0YRlzsUGJoQAKoMhyWYJqg19Os6NFr9H7JepPSYdaAzZGHH4xXXU4xoOiwjrpPoU0nHR3vMcrA43giHRKV5TO0FD/w320-h254/Log4J%203.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; text-align: center; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;Why is fixing the JVM ecosystem hard?&lt;/span&gt;&lt;/b&gt;&lt;div&gt;&lt;span id=&quot;docs-internal-guid-dcffc5f7-7fff-ecfa-4ef4-886ed83d4692&quot;&gt;Most artifacts that depend on log4j do so indirectly. The deeper the vulnerability is in a dependency chain, the more steps are required for it to be fixed. The following diagram shows a histogram of how deeply an affected log4j package (core or api) first appears in consumers dependency graphs. F&lt;b&gt;or greater than 80% of the packages, the vulnerability is more than one level deep, with a majority affected five levels down (and some as many as nine levels down). &lt;/b&gt;These packages will require fixes throughout all parts of the tree, starting from the deepest dependencies first.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;span&gt;&lt;span class=&quot;byline-author&quot;&gt;&lt;p dir=&quot;ltr&quot; style=&quot;color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;&quot;&gt;&lt;span style=&quot;color: black; font-size: 11pt; font-style: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiqltLkdLdBANJSHKQe5oPpunAUsi58ikJjTpdqehxAGF249R8ooIVaC7HDMEk1FZJh_KEUxLu6VRMr6owf_kmuBOrfJ3jq3W_guCWbjsUTK5PgggU8oOpsJ2KluFlsYJ-xbthN2JfAVZTsNJWdwMRR905AZE06UeteMMxyUr-06mr7K5O8Jd8EC5Mc/s1283/Log4J%204.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;871&quot; data-original-width=&quot;1283&quot; height=&quot;434&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiqltLkdLdBANJSHKQe5oPpunAUsi58ikJjTpdqehxAGF249R8ooIVaC7HDMEk1FZJh_KEUxLu6VRMr6owf_kmuBOrfJ3jq3W_guCWbjsUTK5PgggU8oOpsJ2KluFlsYJ-xbthN2JfAVZTsNJWdwMRR905AZE06UeteMMxyUr-06mr7K5O8Jd8EC5Mc/w640-h434/Log4J%204.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; color: #434343; font-family: Arial; font-size: 14pt; font-style: italic; font-weight: 400; text-align: center; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/span&gt;Another difficulty is caused by ecosystem-level choices in the dependency resolution algorithm and requirement specification conventions. &lt;br /&gt;&lt;br /&gt;In the Java ecosystem, it’s common practice to specify “&lt;a href=&quot;https://maven.apache.org/pom.html#Dependency_Version_Requirement_Specification&quot;&gt;soft&lt;/a&gt;” version requirements — exact versions that are used by the resolution algorithm if no other version of the same package appears earlier in the dependency graph. Propagating a fix often requires explicit action by the maintainers to update the dependency requirements to a patched version.&lt;br /&gt;&lt;br /&gt;This practice is in contrast to other ecosystems, such as npm, where it’s common for developers to specify open ranges for dependency requirements. Open ranges allow the resolution algorithm to select the most recently released version that satisfies dependency requirements, thereby pulling in new fixes. Consumers can get a patched version on the next build after the patch is available, which propagates up the dependencies quickly. (This approach is not without its drawbacks; pulling in new fixes can also pull in new problems.)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span class=&quot;byline-author&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;b&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;How long will it take for this vulnerability to be fixed across the entire ecosystem?&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;&lt;/span&gt;&lt;/b&gt;&lt;div&gt;&lt;span&gt;It’s hard to say. We looked at all publicly disclosed critical advisories affecting Maven packages to get a sense of how quickly other vulnerabilities have been fully addressed. Less than half (48%) of the artifacts affected by a vulnerability have been fixed, so we might be in for a long wait, likely years. &lt;br /&gt;&lt;br /&gt;But things are looking promising on the log4j front. After less than a week, 4,620 affected artifacts (~13%) have been fixed. This, more than any other stat, speaks to the massive effort by open source maintainers, information security teams and consumers across the globe.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;&lt;b&gt;Where to focus next?&lt;/b&gt;&lt;/span&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;Thanks and congratulations are due to the open source maintainers and consumers who have already upgraded their versions of log4j. As part of our investigation, we pulled together &lt;a href=&quot;https://commondatastorage.googleapis.com/log4j_vulnerability/log4j_top_500_dependents.csv&quot;&gt;a list&lt;/a&gt; of 500 affected packages with some of the highest transitive usage. If you are a maintainer or user helping with the patching effort, prioritizing these packages could maximize your impact and unblock more of the community. &lt;br /&gt;&lt;br /&gt;We encourage the open source community to continue to strengthen security in these packages by enabling automated dependency updates and adding security mitigations. Improvements such as these could qualify for financial rewards from the &lt;a href=&quot;https://sos.dev/&quot;&gt;Secure Open Source Rewards program&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;You can explore your package dependencies and their vulnerabilities by using &lt;a href=&quot;https://deps.dev/&quot;&gt;Open Source Insights&lt;/a&gt;.&lt;span class=&quot;byline-author&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://security.googleblog.com/feeds/7789131255185229942/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment/fullpage/post/1176949257541686127/7789131255185229942?isPopup=true' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/7789131255185229942'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/7789131255185229942'/><link rel='alternate' type='text/html' href='http://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html' title='Understanding the Impact of Apache Log4j Vulnerability'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh64t6qSWti7pxsnFZF4bSB-5ugAUNKY1eKFXVScRDaclhnLSOGc4sTwPe10D4Gli3LLY94B92dP_p1K0nzUJX_Jh_1m93YcV-TfAenMu3Mhzlq6OVvzTOlnbcdIRAsiBZ7ewno3Qlacm_PDS5sRj4bNatSO0I7uTFsUKvY-k4Gnp1IM-nOLBOni1we/s72-w640-h124-c/Log4J%201.png" height="72" width="72"/><thr:total>0</thr:total></entry>