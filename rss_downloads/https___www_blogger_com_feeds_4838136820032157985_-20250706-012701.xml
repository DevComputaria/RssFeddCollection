<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-4838136820032157985.post-3023870154175197326</id><published>2022-04-19T09:06:00.002-07:00</published><updated>2022-08-24T12:00:49.125-07:00</updated><title type='text'>The More You Know, The More You Know You Donâ€™t Know</title><content type='html'>&lt;style type=&quot;text/css&quot;&gt;@import url(&#39;https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&#39;);.lst-kix_qhs0t3wlsx02-8&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-8}ol.lst-kix_h2vtkcla8l9d-2.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-2 0}ul.lst-kix_9i24fh2252ug-1{list-style-type:none}.lst-kix_h2vtkcla8l9d-3&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-3}ul.lst-kix_9i24fh2252ug-0{list-style-type:none}ul.lst-kix_9i24fh2252ug-3{list-style-type:none}ul.lst-kix_9i24fh2252ug-2{list-style-type:none}ul.lst-kix_9i24fh2252ug-5{list-style-type:none}ul.lst-kix_9i24fh2252ug-4{list-style-type:none}ul.lst-kix_9i24fh2252ug-7{list-style-type:none}.lst-kix_czzguda5pqu4-1&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-1}ul.lst-kix_9i24fh2252ug-6{list-style-type:none}.lst-kix_jdourvkzhmg1-7&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-7}ul.lst-kix_9i24fh2252ug-8{list-style-type:none}ul.lst-kix_grz5i5wr9ig-0{list-style-type:none}ul.lst-kix_grz5i5wr9ig-2{list-style-type:none}ul.lst-kix_grz5i5wr9ig-1{list-style-type:none}ul.lst-kix_grz5i5wr9ig-4{list-style-type:none}ul.lst-kix_718o7hzyu4f-1{list-style-type:none}ul.lst-kix_grz5i5wr9ig-3{list-style-type:none}ul.lst-kix_718o7hzyu4f-2{list-style-type:none}ul.lst-kix_grz5i5wr9ig-6{list-style-type:none}ul.lst-kix_grz5i5wr9ig-5{list-style-type:none}ul.lst-kix_718o7hzyu4f-0{list-style-type:none}ul.lst-kix_grz5i5wr9ig-8{list-style-type:none}ul.lst-kix_grz5i5wr9ig-7{list-style-type:none}ol.lst-kix_czzguda5pqu4-8.start{counter-reset:lst-ctn-kix_czzguda5pqu4-8 0}ul.lst-kix_bqyk3pvm93qj-0{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-8{list-style-type:none}ul.lst-kix_718o7hzyu4f-5{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-7{list-style-type:none}ul.lst-kix_718o7hzyu4f-6{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-6{list-style-type:none}ul.lst-kix_718o7hzyu4f-3{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-8.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-8 0}ol.lst-kix_jdourvkzhmg1-4.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-4 0}ul.lst-kix_bqyk3pvm93qj-5{list-style-type:none}ul.lst-kix_718o7hzyu4f-4{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-4{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-3{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-2{list-style-type:none}ul.lst-kix_718o7hzyu4f-7{list-style-type:none}ul.lst-kix_bqyk3pvm93qj-1{list-style-type:none}ul.lst-kix_718o7hzyu4f-8{list-style-type:none}.lst-kix_g56cmc7ljnve-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_g56cmc7ljnve-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_1mxsacho6zj1-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_1mxsacho6zj1-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_9i24fh2252ug-1&gt;li:before{content:&quot;\0025cb  &quot;}ol.lst-kix_qhs0t3wlsx02-3.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-3 0}.lst-kix_qhs0t3wlsx02-4&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_qhs0t3wlsx02-4,lower-latin) &quot;. &quot;}.lst-kix_qhs0t3wlsx02-6&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_qhs0t3wlsx02-6,decimal) &quot;. &quot;}ol.lst-kix_h2vtkcla8l9d-7.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-7 0}.lst-kix_g56cmc7ljnve-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_g56cmc7ljnve-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_9i24fh2252ug-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_qhs0t3wlsx02-5&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_qhs0t3wlsx02-5,lower-roman) &quot;. &quot;}.lst-kix_g56cmc7ljnve-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_g56cmc7ljnve-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_g56cmc7ljnve-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_qhs0t3wlsx02-8&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_qhs0t3wlsx02-8,lower-roman) &quot;. &quot;}.lst-kix_9i24fh2252ug-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_qhs0t3wlsx02-0&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_qhs0t3wlsx02-0,decimal) &quot;. &quot;}.lst-kix_h2vtkcla8l9d-1&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-1}.lst-kix_qhs0t3wlsx02-7&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_qhs0t3wlsx02-7,lower-latin) &quot;. &quot;}.lst-kix_g56cmc7ljnve-2&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_rvy0q9fw47sg-8{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-7{list-style-type:none}.lst-kix_9i24fh2252ug-2&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_rvy0q9fw47sg-6{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-5{list-style-type:none}.lst-kix_czzguda5pqu4-8&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-8}ul.lst-kix_rvy0q9fw47sg-4{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-3{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-2{list-style-type:none}.lst-kix_qhs0t3wlsx02-4&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-4}ul.lst-kix_bfmkl5o48mun-0{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-1{list-style-type:none}ul.lst-kix_rvy0q9fw47sg-0{list-style-type:none}ul.lst-kix_bfmkl5o48mun-2{list-style-type:none}ul.lst-kix_bfmkl5o48mun-1{list-style-type:none}.lst-kix_h2vtkcla8l9d-7&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-7}.lst-kix_g56cmc7ljnve-6&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_3zaknyhdqv25-0{list-style-type:none}ul.lst-kix_3zaknyhdqv25-2{list-style-type:none}ul.lst-kix_3zaknyhdqv25-1{list-style-type:none}ul.lst-kix_3zaknyhdqv25-4{list-style-type:none}ul.lst-kix_3zaknyhdqv25-3{list-style-type:none}ul.lst-kix_3zaknyhdqv25-6{list-style-type:none}ul.lst-kix_3zaknyhdqv25-5{list-style-type:none}ul.lst-kix_3zaknyhdqv25-8{list-style-type:none}ul.lst-kix_3zaknyhdqv25-7{list-style-type:none}.lst-kix_jdourvkzhmg1-5&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-5}ul.lst-kix_givsp5ka59r-1{list-style-type:none}ul.lst-kix_givsp5ka59r-2{list-style-type:none}ul.lst-kix_givsp5ka59r-3{list-style-type:none}ul.lst-kix_givsp5ka59r-4{list-style-type:none}ul.lst-kix_givsp5ka59r-0{list-style-type:none}.lst-kix_qhs0t3wlsx02-1&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_qhs0t3wlsx02-1,lower-latin) &quot;. &quot;}.lst-kix_qhs0t3wlsx02-2&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_qhs0t3wlsx02-2,lower-roman) &quot;. &quot;}.lst-kix_qhs0t3wlsx02-3&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_qhs0t3wlsx02-3,decimal) &quot;. &quot;}ol.lst-kix_qhs0t3wlsx02-8.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-8 0}.lst-kix_qhs0t3wlsx02-2&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-2}.lst-kix_h2vtkcla8l9d-1&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_h2vtkcla8l9d-1,lower-latin) &quot;. &quot;}ul.lst-kix_givsp5ka59r-5{list-style-type:none}ul.lst-kix_givsp5ka59r-6{list-style-type:none}.lst-kix_jdourvkzhmg1-8&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_jdourvkzhmg1-8,lower-roman) &quot;. &quot;}ul.lst-kix_givsp5ka59r-7{list-style-type:none}.lst-kix_rvy0q9fw47sg-4&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_givsp5ka59r-8{list-style-type:none}ol.lst-kix_jdourvkzhmg1-3.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-3 0}.lst-kix_czzguda5pqu4-5&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-5}.lst-kix_h2vtkcla8l9d-3&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_h2vtkcla8l9d-3,decimal) &quot;. &quot;}.lst-kix_h2vtkcla8l9d-5&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_h2vtkcla8l9d-5,lower-roman) &quot;. &quot;}.lst-kix_jdourvkzhmg1-2&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_jdourvkzhmg1-2,lower-roman) &quot;. &quot;}.lst-kix_jdourvkzhmg1-6&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_jdourvkzhmg1-6,decimal) &quot;. &quot;}.lst-kix_rvy0q9fw47sg-2&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_czzguda5pqu4-7.start{counter-reset:lst-ctn-kix_czzguda5pqu4-7 0}.lst-kix_3zaknyhdqv25-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_jdourvkzhmg1-4&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_jdourvkzhmg1-4,lower-latin) &quot;. &quot;}.lst-kix_rvy0q9fw47sg-0&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_h2vtkcla8l9d-1.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-1 0}.lst-kix_bqyk3pvm93qj-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_3zaknyhdqv25-3&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_bfmkl5o48mun-4{list-style-type:none}ul.lst-kix_bfmkl5o48mun-3{list-style-type:none}.lst-kix_h2vtkcla8l9d-7&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_h2vtkcla8l9d-7,lower-latin) &quot;. &quot;}ul.lst-kix_bfmkl5o48mun-6{list-style-type:none}ul.lst-kix_bfmkl5o48mun-5{list-style-type:none}ul.lst-kix_bfmkl5o48mun-8{list-style-type:none}ul.lst-kix_bfmkl5o48mun-7{list-style-type:none}.lst-kix_czzguda5pqu4-7&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-7}.lst-kix_jdourvkzhmg1-0&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_jdourvkzhmg1-0,decimal) &quot;. &quot;}.lst-kix_3zaknyhdqv25-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_knibgsincpme-7{list-style-type:none}.lst-kix_9i24fh2252ug-7&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_knibgsincpme-8{list-style-type:none}.lst-kix_rwsfzn4jdl6v-7&gt;li:before{content:&quot;\0025cb  &quot;}ol.lst-kix_qhs0t3wlsx02-0.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-0 0}.lst-kix_rvy0q9fw47sg-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_1mxsacho6zj1-4&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_knibgsincpme-1{list-style-type:none}ul.lst-kix_knibgsincpme-2{list-style-type:none}.lst-kix_9i24fh2252ug-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_knibgsincpme-0{list-style-type:none}ul.lst-kix_knibgsincpme-5{list-style-type:none}.lst-kix_1mxsacho6zj1-2&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_knibgsincpme-6{list-style-type:none}ul.lst-kix_knibgsincpme-3{list-style-type:none}.lst-kix_rvy0q9fw47sg-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_knibgsincpme-4{list-style-type:none}.lst-kix_3zaknyhdqv25-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_givsp5ka59r-4&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_1mxsacho6zj1-4{list-style-type:none}ul.lst-kix_1mxsacho6zj1-5{list-style-type:none}ul.lst-kix_1mxsacho6zj1-2{list-style-type:none}.lst-kix_grz5i5wr9ig-1&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_1mxsacho6zj1-3{list-style-type:none}.lst-kix_jdourvkzhmg1-3&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-3}ul.lst-kix_1mxsacho6zj1-0{list-style-type:none}.lst-kix_1mxsacho6zj1-6&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_1mxsacho6zj1-1{list-style-type:none}.lst-kix_givsp5ka59r-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_1mxsacho6zj1-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_1mxsacho6zj1-8{list-style-type:none}.lst-kix_rwsfzn4jdl6v-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_1mxsacho6zj1-6{list-style-type:none}ul.lst-kix_1mxsacho6zj1-7{list-style-type:none}.lst-kix_givsp5ka59r-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_rwsfzn4jdl6v-3&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_jdourvkzhmg1-5.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-5 0}ol.lst-kix_h2vtkcla8l9d-4.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-4 0}.lst-kix_jdourvkzhmg1-4&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-4}ol.lst-kix_jdourvkzhmg1-6.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-6 0}.lst-kix_rwsfzn4jdl6v-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_h2vtkcla8l9d-8&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-8}.lst-kix_qhs0t3wlsx02-3&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-3}.lst-kix_czzguda5pqu4-7&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_czzguda5pqu4-7,lower-latin) &quot;. &quot;}.lst-kix_czzguda5pqu4-3&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_czzguda5pqu4-3,decimal) &quot;. &quot;}.lst-kix_czzguda5pqu4-5&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_czzguda5pqu4-5,lower-roman) &quot;. &quot;}ol.lst-kix_h2vtkcla8l9d-3.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-3 0}.lst-kix_knibgsincpme-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_czzguda5pqu4-1&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_czzguda5pqu4-1,lower-latin) &quot;. &quot;}.lst-kix_czzguda5pqu4-6&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-6}.lst-kix_h2vtkcla8l9d-2&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-2}.lst-kix_knibgsincpme-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_knibgsincpme-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_knibgsincpme-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_knibgsincpme-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_knibgsincpme-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_jdourvkzhmg1-6&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-6}.lst-kix_czzguda5pqu4-0&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-0}.lst-kix_h2vtkcla8l9d-4&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-4}ol.lst-kix_jdourvkzhmg1-5{list-style-type:none}ol.lst-kix_jdourvkzhmg1-6{list-style-type:none}ol.lst-kix_jdourvkzhmg1-7.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-7 0}ol.lst-kix_jdourvkzhmg1-7{list-style-type:none}ol.lst-kix_jdourvkzhmg1-8{list-style-type:none}.lst-kix_qhs0t3wlsx02-7&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-7}.lst-kix_bfmkl5o48mun-0&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_qhs0t3wlsx02-1.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-1 0}ol.lst-kix_czzguda5pqu4-0.start{counter-reset:lst-ctn-kix_czzguda5pqu4-0 0}.lst-kix_knibgsincpme-8&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_h2vtkcla8l9d-7{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-8{list-style-type:none}.lst-kix_bfmkl5o48mun-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_bfmkl5o48mun-8&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_h2vtkcla8l9d-3{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-4{list-style-type:none}ol.lst-kix_jdourvkzhmg1-1.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-1 0}.lst-kix_bfmkl5o48mun-6&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_h2vtkcla8l9d-5{list-style-type:none}ol.lst-kix_czzguda5pqu4-5.start{counter-reset:lst-ctn-kix_czzguda5pqu4-5 0}ol.lst-kix_h2vtkcla8l9d-6{list-style-type:none}.lst-kix_grz5i5wr9ig-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_bfmkl5o48mun-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_czzguda5pqu4-2&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-2}ol.lst-kix_qhs0t3wlsx02-6.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-6 0}.lst-kix_grz5i5wr9ig-8&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_jdourvkzhmg1-1{list-style-type:none}ol.lst-kix_jdourvkzhmg1-2{list-style-type:none}ol.lst-kix_jdourvkzhmg1-3{list-style-type:none}ol.lst-kix_jdourvkzhmg1-4{list-style-type:none}.lst-kix_grz5i5wr9ig-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_grz5i5wr9ig-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_bfmkl5o48mun-2&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_jdourvkzhmg1-0{list-style-type:none}.lst-kix_grz5i5wr9ig-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_grz5i5wr9ig-6&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_h2vtkcla8l9d-0{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-5.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-5 0}.lst-kix_bfmkl5o48mun-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_bfmkl5o48mun-4&gt;li:before{content:&quot;\0025cb  &quot;}ol.lst-kix_h2vtkcla8l9d-1{list-style-type:none}ol.lst-kix_h2vtkcla8l9d-2{list-style-type:none}.lst-kix_bfmkl5o48mun-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_grz5i5wr9ig-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_givsp5ka59r-2&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_h2vtkcla8l9d-0.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-0 0}.lst-kix_givsp5ka59r-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_givsp5ka59r-0&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_g56cmc7ljnve-8{list-style-type:none}ol.lst-kix_jdourvkzhmg1-2.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-2 0}.lst-kix_bqyk3pvm93qj-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_h2vtkcla8l9d-6&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-6}.lst-kix_jdourvkzhmg1-8&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-8}.lst-kix_qhs0t3wlsx02-5&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-5}.lst-kix_bqyk3pvm93qj-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_bqyk3pvm93qj-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_h2vtkcla8l9d-0&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-0}ol.lst-kix_jdourvkzhmg1-8.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-8 0}.lst-kix_bqyk3pvm93qj-5&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_qhs0t3wlsx02-7.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-7 0}.lst-kix_bqyk3pvm93qj-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_bqyk3pvm93qj-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_718o7hzyu4f-5&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_h2vtkcla8l9d-6.start{counter-reset:lst-ctn-kix_h2vtkcla8l9d-6 0}.lst-kix_718o7hzyu4f-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_718o7hzyu4f-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_rwsfzn4jdl6v-1{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-2.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-2 0}ul.lst-kix_rwsfzn4jdl6v-2{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-0{list-style-type:none}.lst-kix_718o7hzyu4f-7&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_rwsfzn4jdl6v-5{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-6{list-style-type:none}.lst-kix_718o7hzyu4f-6&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_rwsfzn4jdl6v-3{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-4{list-style-type:none}ul.lst-kix_g56cmc7ljnve-3{list-style-type:none}ol.lst-kix_czzguda5pqu4-6{list-style-type:none}ul.lst-kix_g56cmc7ljnve-2{list-style-type:none}ol.lst-kix_czzguda5pqu4-7{list-style-type:none}ul.lst-kix_g56cmc7ljnve-1{list-style-type:none}ol.lst-kix_czzguda5pqu4-4{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-7{list-style-type:none}ul.lst-kix_g56cmc7ljnve-0{list-style-type:none}ol.lst-kix_czzguda5pqu4-5{list-style-type:none}ul.lst-kix_rwsfzn4jdl6v-8{list-style-type:none}ul.lst-kix_g56cmc7ljnve-7{list-style-type:none}.lst-kix_bqyk3pvm93qj-8&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_czzguda5pqu4-2{list-style-type:none}ul.lst-kix_g56cmc7ljnve-6{list-style-type:none}ol.lst-kix_czzguda5pqu4-3{list-style-type:none}.lst-kix_jdourvkzhmg1-2&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-2}ul.lst-kix_g56cmc7ljnve-5{list-style-type:none}ol.lst-kix_czzguda5pqu4-0{list-style-type:none}.lst-kix_718o7hzyu4f-0&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_g56cmc7ljnve-4{list-style-type:none}ol.lst-kix_czzguda5pqu4-1{list-style-type:none}.lst-kix_718o7hzyu4f-1&gt;li:before{content:&quot;\0025cb  &quot;}ol.lst-kix_czzguda5pqu4-6.start{counter-reset:lst-ctn-kix_czzguda5pqu4-6 0}.lst-kix_718o7hzyu4f-3&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_czzguda5pqu4-8{list-style-type:none}.lst-kix_718o7hzyu4f-2&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_jdourvkzhmg1-0.start{counter-reset:lst-ctn-kix_jdourvkzhmg1-0 0}ol.lst-kix_czzguda5pqu4-4.start{counter-reset:lst-ctn-kix_czzguda5pqu4-4 0}.lst-kix_h2vtkcla8l9d-0&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_h2vtkcla8l9d-0,decimal) &quot;. &quot;}.lst-kix_jdourvkzhmg1-7&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_jdourvkzhmg1-7,lower-latin) &quot;. &quot;}ol.lst-kix_qhs0t3wlsx02-5.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-5 0}.lst-kix_jdourvkzhmg1-0&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-0}.lst-kix_h2vtkcla8l9d-4&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_h2vtkcla8l9d-4,lower-latin) &quot;. &quot;}.lst-kix_jdourvkzhmg1-3&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_jdourvkzhmg1-3,decimal) &quot;. &quot;}.lst-kix_rvy0q9fw47sg-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_h2vtkcla8l9d-2&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_h2vtkcla8l9d-2,lower-roman) &quot;. &quot;}.lst-kix_h2vtkcla8l9d-6&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_h2vtkcla8l9d-6,decimal) &quot;. &quot;}.lst-kix_rvy0q9fw47sg-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_jdourvkzhmg1-1&gt;li{counter-increment:lst-ctn-kix_jdourvkzhmg1-1}.lst-kix_3zaknyhdqv25-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_jdourvkzhmg1-5&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_jdourvkzhmg1-5,lower-roman) &quot;. &quot;}.lst-kix_qhs0t3wlsx02-1&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-1}.lst-kix_3zaknyhdqv25-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_3zaknyhdqv25-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_bqyk3pvm93qj-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_h2vtkcla8l9d-8&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_h2vtkcla8l9d-8,lower-roman) &quot;. &quot;}.lst-kix_czzguda5pqu4-4&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-4}.lst-kix_3zaknyhdqv25-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_jdourvkzhmg1-1&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_jdourvkzhmg1-1,lower-latin) &quot;. &quot;}.lst-kix_rwsfzn4jdl6v-6&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_czzguda5pqu4-1.start{counter-reset:lst-ctn-kix_czzguda5pqu4-1 0}.lst-kix_rvy0q9fw47sg-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_9i24fh2252ug-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_9i24fh2252ug-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_rwsfzn4jdl6v-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_rvy0q9fw47sg-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_1mxsacho6zj1-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_3zaknyhdqv25-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_9i24fh2252ug-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_givsp5ka59r-3&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_qhs0t3wlsx02-8{list-style-type:none}.lst-kix_1mxsacho6zj1-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_givsp5ka59r-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_givsp5ka59r-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_grz5i5wr9ig-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_1mxsacho6zj1-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_rwsfzn4jdl6v-4&gt;li:before{content:&quot;\0025cb  &quot;}ol.lst-kix_qhs0t3wlsx02-3{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-2{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-1{list-style-type:none}ol.lst-kix_czzguda5pqu4-2.start{counter-reset:lst-ctn-kix_czzguda5pqu4-2 0}ol.lst-kix_qhs0t3wlsx02-0{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-7{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-6{list-style-type:none}.lst-kix_rwsfzn4jdl6v-2&gt;li:before{content:&quot;\0025a0  &quot;}ol.lst-kix_qhs0t3wlsx02-5{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-4{list-style-type:none}ol.lst-kix_qhs0t3wlsx02-4.start{counter-reset:lst-ctn-kix_qhs0t3wlsx02-4 0}ol.lst-kix_czzguda5pqu4-3.start{counter-reset:lst-ctn-kix_czzguda5pqu4-3 0}.lst-kix_rwsfzn4jdl6v-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_czzguda5pqu4-8&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_czzguda5pqu4-8,lower-roman) &quot;. &quot;}.lst-kix_qhs0t3wlsx02-0&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-0}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_czzguda5pqu4-6&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_czzguda5pqu4-6,decimal) &quot;. &quot;}.lst-kix_knibgsincpme-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_czzguda5pqu4-0&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_czzguda5pqu4-0,decimal) &quot;. &quot;}.lst-kix_czzguda5pqu4-4&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_czzguda5pqu4-4,lower-latin) &quot;. &quot;}.lst-kix_knibgsincpme-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_h2vtkcla8l9d-5&gt;li{counter-increment:lst-ctn-kix_h2vtkcla8l9d-5}.lst-kix_qhs0t3wlsx02-6&gt;li{counter-increment:lst-ctn-kix_qhs0t3wlsx02-6}.lst-kix_czzguda5pqu4-3&gt;li{counter-increment:lst-ctn-kix_czzguda5pqu4-3}.lst-kix_czzguda5pqu4-2&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_czzguda5pqu4-2,lower-roman) &quot;. &quot;}ol{margin:0;padding:0}table td,table th{padding:0}.HNYIspzEBn-c4{margin-left:36pt;padding-top:0pt;padding-left:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c11{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c13{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:&quot;Arial&quot;;font-style:normal}.HNYIspzEBn-c16{color:#666666;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:15pt;font-family:&quot;Arial&quot;;font-style:normal}.HNYIspzEBn-c8{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:&quot;Arial&quot;;font-style:italic}.HNYIspzEBn-c7{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c2{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left;height:11pt}.HNYIspzEBn-c12{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:&quot;Arial&quot;;font-style:normal}.HNYIspzEBn-c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:&quot;Arial&quot;;font-style:normal}.HNYIspzEBn-c18{padding-top:0pt;padding-bottom:16pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c5{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.HNYIspzEBn-c1{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.HNYIspzEBn-c10{font-family:Consolas,&quot;Courier New&quot;;color:#0d904f;font-weight:400}.HNYIspzEBn-c19{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.HNYIspzEBn-c3{color:inherit;text-decoration:inherit}.HNYIspzEBn-c6{padding:0;margin:0}.HNYIspzEBn-c9{font-weight:700;font-style:italic}.HNYIspzEBn-c17{font-weight:700}.HNYIspzEBn-c14{font-style:italic}.HNYIspzEBn-c15{margin-left:36pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}p{margin:0;color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;HNYIspzEBn-c19&quot;&gt;
 &lt;p class=&quot;c18 subtitle&quot; id=&quot;h.bcdrmuya7iqp&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c16&quot;&gt;A Year in Review of 0-days Used In-the-Wild in 2021&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Posted by Maddie Stone, Google Project Zero&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;This is our third annual year in review of 0-days exploited in-the-wild [&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2021/02/deja-vu-lnerability.html&quot;&gt;2020&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2020/07/detection-deficit-year-in-review-of-0.html&quot;&gt;2019&lt;/a&gt;&lt;/span&gt;&lt;span&gt;]. Each year we&amp;rsquo;ve looked back at all of the detected and disclosed in-the-wild 0-days as a group and synthesized what we think the trends and takeaways are. The goal of this report is not to detail each individual exploit, but instead to analyze the exploits from the year as a group, looking for trends, gaps, lessons learned, successes, etc. If you&amp;rsquo;re interested in the analysis of individual exploits, please check out our &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/p/rca.html&quot;&gt;root cause analysis repository&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;We perform and share this analysis in order to &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c17&quot;&gt;make 0-day hard&lt;/span&gt;&lt;span&gt;. We want it to be more costly, more resource intensive, and overall more difficult for attackers to use 0-day capabilities. 2021 highlighted just how important it is to stay relentless in our pursuit to make it harder for attackers to exploit users with 0-days. We heard &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://forbiddenstories.org/about-the-pegasus-project/&quot;&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://citizenlab.ca/2021/07/hooking-candiru-another-mercenary-spyware-vendor-comes-into-focus/&quot;&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://www.amnesty.org/en/latest/research/2021/11/devices-of-palestinian-human-rights-defenders-hacked-with-nso-groups-pegasus-spyware-2/&quot;&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;about how governments were targeting journalists, minoritized populations, politicians, human rights defenders, and even security researchers around the world. The decisions we make in the security and tech communities can have real impacts on society and our fellow humans&amp;rsquo; lives.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;We&amp;rsquo;ll provide our evidence and process for our conclusions in the body of this post, and then wrap it all up with our thoughts on next steps and hopes for 2022 in the conclusion. If digging into the bits and bytes is not your thing, then feel free to just check-out the Executive Summary and Conclusion.&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;HNYIspzEBn-c11&quot; id=&quot;h.tf3r1j8la9a4&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c13&quot;&gt;Executive Summary&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;2021 included the detection and disclosure of &lt;/span&gt;&lt;span&gt;58&lt;/span&gt;&lt;span&gt;&amp;nbsp;in-the-wild 0-days, the most ever recorded since Project Zero began tracking in mid-2014. That&amp;rsquo;s more than double the previous maximum of 28 detected in 2015 and especially stark when you consider that there were only 25 detected in 2020. We&amp;rsquo;ve tracked publicly known in-the-wild 0-day exploits in &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=0&quot;&gt;this spreadsheet&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;since mid-2014.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;While we often talk about the number of 0-day exploits &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c9&quot;&gt;used&lt;/span&gt;&lt;span&gt;&amp;nbsp;in-the-wild, what we&amp;rsquo;re actually discussing is the number of 0-day exploits &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c9&quot;&gt;detected and disclosed&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c14&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;as in-the-wild. And that leads into our first conclusion: we believe the large uptick in in-the-wild 0-days in 2021 is due to increased detection and disclosure of these 0-days, rather than simply increased usage of 0-day exploits.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;With this record number of in-the-wild 0-days to analyze we saw that attacker methodology hasn&amp;rsquo;t actually had to change much from previous years&lt;/span&gt;&lt;span&gt;. Attackers are having success using the same bug patterns and exploitation techniques and going after the same attack surfaces. Project Zero&amp;rsquo;s mission is &amp;ldquo;make 0day hard&amp;rdquo;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;0-day will be harder when, overall, attackers are not able to use public methods and techniques for developing their 0-day exploits. When we look over these 58 0-days used in 2021, what we see instead are 0-days that are similar to previous &amp;amp; publicly known vulnerabilities. Only two 0-days stood out as novel: one for the technical sophistication of its exploit and the other for its use of logic bugs to escape the sandbox.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;So while we recognize the industry&amp;rsquo;s improvement in the detection and disclosure of in-the-wild 0-days, we also acknowledge that there&amp;rsquo;s a lot more improving to be done.&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;Having access to more &amp;ldquo;ground truth&amp;rdquo; of how attackers are actually using 0-days shows us that they are able to have success by using previously known techniques and methods rather than having to invest in developing novel techniques. This is a clear area of opportunity for the tech industry.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;We had so many more data points in 2021 to learn about attacker behavior than we&amp;rsquo;ve had in the past. Having all this data, though, has left us with even more questions than we had before. &lt;/span&gt;&lt;span&gt;Unfortunately, attackers who actively use 0-day exploits do not share the 0-days they&amp;rsquo;re using or what percentage of 0-days we&amp;rsquo;re missing in our tracking, so we&amp;rsquo;ll never know exactly what proportion of 0-days are currently being found and disclosed publi&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;cly. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Based on our analysis of the 2021 0-days we hope to see the following progress in 2022 in order to continue taking steps towards making 0-day hard:&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;c6 lst-kix_jdourvkzhmg1-0 start&quot; start=&quot;1&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;All vendors agree to disclose the in-the-wild exploitation status of vulnerabilities in their security bulletins.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Exploit samples or detailed technical descriptions of the exploits are shared more widely.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Continued concerted efforts on reducing memory corruption vulnerabilities or rendering them unexploitable.Launch mitigations that will significantly impact the exploitability of memory corruption vulnerabilities.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 class=&quot;HNYIspzEBn-c11&quot; id=&quot;h.ka5ptbumk5o1&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c13&quot;&gt;A Record Year for In-the-Wild 0-days&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;2021 was a record year for in-the-wild 0-days. So what happened?&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;

   
   &lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjC72HVhQEdwHNIzMiyb18bUFr6hPCWJiKL2Mm43-tW11qc0ucOPI8A9oChEXQe0-QNOBF83SIcfyjcyvPveuWvgipbiBzHWqZTx2-LilJFYIbx6uQeno9f481HJQ0CgylQkh8Ks7AbGC6tjhYDNBcI7jh6ihhzJATA0r_P4bQUBm-1lmHp2DPvWM6I/s1200/image1%287%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjC72HVhQEdwHNIzMiyb18bUFr6hPCWJiKL2Mm43-tW11qc0ucOPI8A9oChEXQe0-QNOBF83SIcfyjcyvPveuWvgipbiBzHWqZTx2-LilJFYIbx6uQeno9f481HJQ0CgylQkh8Ks7AbGC6tjhYDNBcI7jh6ihhzJATA0r_P4bQUBm-1lmHp2DPvWM6I/s1200/image1%287%29.png&quot; border=&quot;0&quot; alt=&quot;bar graph showing the number of in-the-wild 0-day detected per year from 2015-2021. The totals are taken from this tracking spreadsheet: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; style=&quot;max-height: 750; max-width: 600px;&quot;title=&quot;bar graph showing the number of in-the-wild 0-day detected per year from 2015-2021. The totals are taken from this tracking spreadsheet: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Is it that software security is getting worse? Or is it that attackers are using 0-day exploits more? Or has our ability to detect and disclose 0-days increased? When looking at the significant uptick from 2020 to 2021, we think it&amp;#39;s mostly explained by the latter. While we believe there has been a steady growth in interest and investment in 0-day exploits by attackers in the past several years, and that security still needs to urgently improve, it appears that the security industry&amp;#39;s ability to detect and disclose in-the-wild 0-day exploits is the primary explanation for the increase in observed 0-day exploits in 2021.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;While we often talk about &amp;ldquo;0-day exploits &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c9&quot;&gt;used &lt;/span&gt;&lt;span&gt;in-the-wild&amp;rdquo;, what we&amp;rsquo;re actually tracking are &amp;ldquo;0-day exploits &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c9&quot;&gt;detected and disclosed&lt;/span&gt;&lt;span&gt;&amp;nbsp;as used in-the-wild&amp;rdquo;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;There are more factors than just the &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c9&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c14&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;that contribute to an increase in that number, most notably: detection and disclosure. Better detection of 0-day exploits and more transparently disclosed exploited 0-day vulnerabilities is a positive indicator for security and progress in the industry. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Overall, we can break down the uptick in the number of in-the-wild 0-days into:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_rwsfzn4jdl6v-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;More detection of in-the-wild 0-day exploits&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;More public disclosure of in-the-wild 0-day exploitation&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.irhic7h0695k&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;More detection&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;In the &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2020/07/detection-deficit-year-in-review-of-0.html&quot;&gt;2019 Year in Review&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, we wrote about the &amp;ldquo;Detection Deficit&amp;rdquo;. We stated &amp;ldquo;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c17&quot;&gt;As a community, our ability to detect 0-days being used in the wild is severely lacking to the point that we can&amp;rsquo;t draw significant conclusions due to the lack of (and biases in) the data we have collected&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;.&amp;rdquo; In the last two years, we believe that there&amp;rsquo;s been progress on this gap. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Anecdotally, we hear from more people that they&amp;rsquo;ve begun working more on detection of 0-day exploits. Quantitatively, while a &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c14&quot;&gt;very&lt;/span&gt;&lt;span&gt;&amp;nbsp;rough measure, we&amp;rsquo;re also seeing the number of entities credited with reporting in-the-wild 0-days increasing. I&lt;/span&gt;&lt;span&gt;t stands to reason that if the number of people working on trying to find 0-day exploits increases, then the number of in-the-wild 0-day exploits detected may increase.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;/p&gt;

 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMbFpoEKSSn5AbAzsovaZ0yN6_OFXo9u4hpDCXJBpro8LRUWJlVQ9CSqtzT2V9ohrhOvP3_RnrYsOzFGPK0FZGJmW2713g2vVW82ReJVXpjAZc57BCxtHg8i-6AdR_ThDZB6UKvzAKekbmAkuUBliMyDyWSBW87z4ZZQJC3KX-_ptZIHveotLGoJ9I/s1200/image5%284%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMbFpoEKSSn5AbAzsovaZ0yN6_OFXo9u4hpDCXJBpro8LRUWJlVQ9CSqtzT2V9ohrhOvP3_RnrYsOzFGPK0FZGJmW2713g2vVW82ReJVXpjAZc57BCxtHg8i-6AdR_ThDZB6UKvzAKekbmAkuUBliMyDyWSBW87z4ZZQJC3KX-_ptZIHveotLGoJ9I/s1200/image5%284%29.png&quot; border=&quot;0&quot; alt=&quot;A bar graph showing the number of distinct reporters of 0-day in-the-wild vulnerabilities per year for 2019-2021. 2019: 9, 2020: 10, 2021: 20. The data is taken from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; style=&quot;max-height: 750; max-width: 600px;&quot;title=&quot;A bar graph showing the number of distinct reporters of 0-day in-the-wild vulnerabilities per year for 2019-2021. 2019: 9, 2020: 10, 2021: 20. The data is taken from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;/p&gt;

 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgRS0t_2Bwvc3U_EIr5h7NcWpQyjzHCPb4OMiDpzPxPs587otAEj8bzwch8UMFlgKchwdSq4L_PXRn1O6KGLHUl4X9voLBdZJNQsgQyJcMCVB4Y8-aRHaXRpOYZw7KVtyNYwdWpwX8ILUV1fyG2kDsXVWORsSPUBGVTON90gWf9POhhxA4edxNe1eoV/s1200/image2%285%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgRS0t_2Bwvc3U_EIr5h7NcWpQyjzHCPb4OMiDpzPxPs587otAEj8bzwch8UMFlgKchwdSq4L_PXRn1O6KGLHUl4X9voLBdZJNQsgQyJcMCVB4Y8-aRHaXRpOYZw7KVtyNYwdWpwX8ILUV1fyG2kDsXVWORsSPUBGVTON90gWf9POhhxA4edxNe1eoV/s1200/image2%285%29.png&quot; border=&quot;0&quot; alt=&quot;a line graph showing how many in-the-wild 0-days were found by their own vendor per year from 2015 to 2021. 2015: 0, 2016: 0, 2017: 2, 2018: 0, 2019: 4, 2020: 5, 2021: 17. Data comes from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; style=&quot;max-height: 750; max-width: 600px;&quot;title=&quot;a line graph showing how many in-the-wild 0-days were found by their own vendor per year from 2015 to 2021. 2015: 0, 2016: 0, 2017: 2, 2018: 0, 2019: 4, 2020: 5, 2021: 17. Data comes from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;We&amp;rsquo;ve also seen the number of vendors detecting in-the-wild 0-days in their own products increasing.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Whether or not these vendors were previously working on detection, vendors seem to have found ways to be more successful in 2021. Vendors likely have the most telemetry and overall knowledge and visibility into their products so it&amp;rsquo;s important that they are investing in (and hopefully having success in) detecting 0-days targeting their own products. As shown in the &lt;/span&gt;&lt;span&gt;chart above&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;, there was a significant increase in the number of in-the-wild 0-days discovered by vendors in their own products. Google discovered 7 of the in-the-wild 0-days in their own products and Microsoft discovered 10 in their products!&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.bkkzvkf2rtnk&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;More disclosure&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;The second reason why the number of detected in-the-wild 0-days has increased is due to more disclosure of these vulnerabilities. Apple and Google Android &lt;/span&gt;&lt;span&gt;(we &lt;/span&gt;&lt;span&gt;differentiate&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;ldquo;Google Android&amp;rdquo; rather than just &amp;ldquo;Google&amp;rdquo; because Google Chrome has been annotating their security bulletins for the last few years)&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;first began labeling vulnerabilities in their security advisories with the information about potential in-the-wild exploitation in November 2020 and January 2021 respectively. When vendors don&amp;rsquo;t annotate their release notes, the only way we know that a 0-day was exploited in-the-wild is if the researcher who discovered the exploitation comes forward. If Apple and Google Android had not begun annotating their release notes, the public would likely not know about at least 7 of the Apple in-the-wild 0-days and 5 of the Android in-the-wild 0-days. Why? Because these vulnerabilities were reported by &amp;ldquo;Anonymous&amp;rdquo; reporters. If the reporters didn&amp;rsquo;t want credit for the vulnerability, it&amp;rsquo;s unlikely that they would have gone public to say that there were indications of exploitation. That is 12 0-days that wouldn&amp;rsquo;t have been included in this year&amp;rsquo;s list if Apple and Google Android had not begun transparently annotating their security advisories. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;/p&gt;

 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPe_J-0Wu9Ap-0n3Yj5BoXiWTnjViyyGasIChhb3juADZosK9nTbyiaWtzuRyjwG3frQNjLsvRMRoQHrFfo1iKa3GjmcuLHqat40GcoechQ16XbhpVGwF7m_TJ0Oucvy3wvm8x0aXbVnJfhkG2FNkxI4cJf5ONBqEYnPxQDUmZChvByLHE8OzSU20N/s1200/image3%287%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPe_J-0Wu9Ap-0n3Yj5BoXiWTnjViyyGasIChhb3juADZosK9nTbyiaWtzuRyjwG3frQNjLsvRMRoQHrFfo1iKa3GjmcuLHqat40GcoechQ16XbhpVGwF7m_TJ0Oucvy3wvm8x0aXbVnJfhkG2FNkxI4cJf5ONBqEYnPxQDUmZChvByLHE8OzSU20N/s1200/image3%287%29.png&quot; border=&quot;0&quot; alt=&quot;bar graph that shows the number of Android and Apple (WebKit + iOS + macOS) in-the-wild 0-days per year. The bar graph is split into two color: yellow for Anonymously reported 0-days and green for non-anonymous reported 0-days. 2021 is the only year with any anonymously reported 0-days. 2015: 0, 2016: 3, 2018: 2, 2019: 1, 2020: 3, 2021: Non-Anonymous: 8, Anonymous- 12. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; style=&quot;max-height: 750; max-width: 600px;&quot; title=&quot;bar graph that shows the number of Android and Apple (WebKit + iOS + macOS) in-the-wild 0-days per year. The bar graph is split into two color: yellow for Anonymously reported 0-days and green for non-anonymous reported 0-days. 2021 is the only year with any anonymously reported 0-days. 2015: 0, 2016: 3, 2018: 2, 2019: 1, 2020: 3, 2021: Non-Anonymous: 8, Anonymous- 12. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Kudos and thank you to Microsoft, Google Chrome, and Adobe who have been annotating their security bulletins for transparency for multiple years now! And thanks to Apache who also annotated their release notes for &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://httpd.apache.org/security/vulnerabilities_24.html&quot;&gt;CVE-2021-41773&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;this past year. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;In-the-wild 0-days in Qualcomm and ARM products were annotated as in-the-wild in Android security bulletins, but not in the vendor&amp;rsquo;s own security advisories.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;It&amp;#39;s highly likely that in 2021, there were other 0-days that were exploited in the wild and detected, but vendors did not mention this in their release notes. In 2022, we hope that more vendors start noting when they patch vulnerabilities that have been exploited in-the-wild. Until we&amp;rsquo;re confident that all vendors are transparently disclosing in-the-wild status, there&amp;rsquo;s a big question of how many in-the-wild 0-days are discovered, but not labeled publicly by vendors.&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;HNYIspzEBn-c11&quot; id=&quot;h.s04j4o5mq8tl&quot;&gt;&lt;span&gt;New Year, Old Techniques&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;We had a record number of &amp;ldquo;data points&amp;rdquo; in 2021 to understand how attackers are actually using 0-day exploits. A bit surprising to us though, out of all those data points, there was nothing new amongst all this data. 0-day exploits are considered one of the most &lt;/span&gt;&lt;span&gt;advanced&lt;/span&gt;&lt;span&gt;&amp;nbsp;attack methods an actor can use, so it would be easy to conclude that attackers must be using special tricks and attack surfaces. But instead, the 0-days we saw in 2021 generally followed the same bug patterns, attack surfaces, and exploit &amp;ldquo;shapes&amp;rdquo; previously seen in public research. Once &amp;ldquo;0-day is hard&amp;rdquo;, we&amp;rsquo;d expect that to be successful, attackers would have to find new bug classes of vulnerabilities in new attack surfaces using never before seen exploitation methods. &lt;/span&gt;&lt;span&gt;In general, &lt;/span&gt;&lt;span&gt;that wasn&amp;#39;t what the&lt;/span&gt;&lt;span&gt;&amp;nbsp;data showed us this year. With two exceptions (described below in the iOS section) out of the 58, everything we saw was pretty &amp;ldquo;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://www.dictionary.com/browse/meh#:~:text=unimpressive%3B%20boring%3A&quot;&gt;meh&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;rdquo; or standard.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Out of the 58 in-the-wild 0-days for the year, 39, or 67% were memory corruption vulnerabilities. Memory corruption vulnerabilities have been the standard for attacking software for the last few decades and it&amp;rsquo;s still how attackers are having success. Out of these memory corruption vulnerabilities, the majority also stuck with very popular and well-known bug classes:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_bfmkl5o48mun-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;17 use-after-free&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;6 out-of-bounds read &amp;amp; write&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;4 buffer overflow&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;4 integer overflow&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;In the next sections we&amp;rsquo;ll dive into each major platform that we saw in-the-wild 0-days for this year. We&amp;rsquo;ll share the trends and explain why what we saw was pretty unexceptional.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.421487jv8qwq&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;Chromium (Chrome)&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Chromium had a record high number of 0-days detected and disclosed in 2021 with 14. Out of these 14, 10 were renderer remote code execution bugs, 2 were sandbox escapes, 1 was an infoleak, and 1 was used to open a webpage in Android apps other than Google Chrome.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;The 14 0-day vulnerabilities were in the following components:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_1mxsacho6zj1-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;6 JavaScript Engine - v8 (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/02/stable-channel-update-for-desktop_4.html&quot;&gt;CVE-2021-21148&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/02/stable-channel-update-for-desktop_4.html&quot;&gt;CVE-2021-30551&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/07/stable-channel-update-for-desktop.html&quot;&gt;CVE-2021-30563&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30632.html&quot;&gt;CVE-2021-30632&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-37975.html&quot;&gt;CVE-2021-37975&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/10/stable-channel-update-for-desktop_28.html&quot;&gt;CVE-2021-38003&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;2 DOM Engine - Blink (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/03/stable-channel-update-for-desktop_12.html&quot;&gt;CVE-2021-21193&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;amp; &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/04/stable-channel-update-for-desktop.html&quot;&gt;CVE-2021-21206&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 WebGL (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/06/stable-channel-update-for-desktop_17.html&quot;&gt;CVE-2021-30554&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 IndexedDB (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/09/stable-channel-update-for-desktop.html&quot;&gt;CVE-2021-30633&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 webaudio (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-21166.html&quot;&gt;CVE-2021-21166&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 Portals (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/09/stable-channel-update-for-desktop_24.html&quot;&gt;CVE-2021-37973&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 Android Intents (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-38000.html&quot;&gt;CVE-2021-38000&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 Core (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://chromereleases.googleblog.com/2021/09/stable-channel-update-for-desktop_30.html&quot;&gt;CVE-2021-37976&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;When we look at the components targeted by these bugs, they&amp;rsquo;re all attack surfaces seen before in public security research and previous exploits. If anything, there are a few less DOM bugs and more targeting these other components of browsers like IndexedDB and WebGL than previously. 13 out of the 14 Chromium 0-days were memory corruption bugs. Similar to last year, most of those memory corruption bugs are use-after-free vulnerabilities.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;A couple of the Chromium bugs were even similar to previous in-the-wild 0-days. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-21166.html&quot;&gt;CVE-2021-21166&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an issue in &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c10&quot;&gt;ScriptProcessorNode::Process()&lt;/span&gt;&lt;span&gt;&amp;nbsp;in webaudio where there&amp;rsquo;s insufficient locks such that buffers are accessible in both the main thread and the audio rendering thread at the same time. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2019/CVE-2019-13720.html&quot;&gt;CVE-2019-13720&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an in-the-wild 0-day from 2019. It was a vulnerability in &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c10&quot;&gt;ConvolverHandler::Process()&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;in webaudio where there were also insufficient locks such that a buffer was accessible in both the main thread and the audio rendering thread at the same time.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30632.html&quot;&gt;CVE-2021-30632&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is another Chromium in-the-wild 0-day from 2021. It&amp;rsquo;s a type confusion in the &amp;nbsp;TurboFan JIT in Chromium&amp;rsquo;s JavaScript Engine, v8, where Turbofan fails to deoptimize code after a&lt;/span&gt;&lt;span&gt;&amp;nbsp;property map is changed&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30632.html&quot;&gt;CVE-2021-30632&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in particular deals with code that stores global properties. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-16009.html&quot;&gt;CVE-2020-16009&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;was also an in-the-wild 0-day that was due to Turbofan failing to deoptimize code after map deprecation.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.q5lkhzsdchwk&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;WebKit (Safari)&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Prior to 2021, Apple had only acknowledged &lt;/span&gt;&lt;span&gt;1 publicly known in-the-wild 0-day targeting WebKit/Safari, and that was due &lt;/span&gt;&lt;span&gt;the sharing by an external researcher. In 2021 there were 7. This makes it hard for us to assess trends or changes since we don&amp;rsquo;t have historical samples to go off of. Instead, we&amp;rsquo;ll look at 2021&amp;rsquo;s WebKit bugs in the context of other Safari bugs not known to be in-the-wild and other browser in-the-wild 0-days. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;The 7 in-the-wild 0-days targeted the following components:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_knibgsincpme-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;4 Javascript Engine - JavaScript Core (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212146&quot;&gt;CVE-2021-1870&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212146&quot;&gt;CVE-2021-1871&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212336&quot;&gt;CVE-2021-30663&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212336&quot;&gt;CVE-2021-30665&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_grz5i5wr9ig-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 IndexedDB (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30858.html&quot;&gt;CVE-2021-30858&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 Storage (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212317&quot;&gt;CVE-2021-30661&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 Plugi&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;s (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1879.html&quot;&gt;CVE-2021-1879&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;The one semi-surprise is that no DOM bugs were detected and disclosed. In previous years, vulnerabilities in the DOM engine have generally made up 15-20% of the in-the-wild browser 0-days, but none were detected and disclosed for WebKit in 2021. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;It would not be surprising if attackers are beginning to shift to other modules, like third party libraries or things like IndexedDB. The modules may be more promising to attackers going forward because there&amp;rsquo;s a better chance that the vulnerability may exist in multiple browsers or platforms&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&amp;nbsp;For example, the webaudio bug in Chromium, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-21166.html&quot;&gt;CVE-2021-21166&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, also existed in WebKit and was fixed as &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212223&quot;&gt;CVE-2021-1844&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, though there was no evidence it was exploited in-the-wild in WebKit. The IndexedDB in-the-wild 0-day that was used against Safari in 2021, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-30858.html&quot;&gt;CVE-2021-30858&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, was very, very similar to a &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=1032890&quot;&gt;bug fixed in Chromium in January 2020&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.pypmw8ahj82o&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;Internet Explorer&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Since we began tracking in-the-wild 0-days, Internet Explorer has had a pretty consistent number of 0-days each year. 2021 actually tied 2016 for the most in-the-wild Internet Explorer 0-days we&amp;rsquo;ve ever tracked even though Internet Explorer&amp;rsquo;s market share of web browser users continues to decrease.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;/p&gt;

 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjbMTlnGhVLcVL8K20S3s6hSrpyB6kZAA9CWvWNpn1isbEbLFv0c2rs_dPvM0ALT45NtTvyhp8rGehGDRIAEJ6OZYSkk5mezOEoPJOquVXXyHeqrVOvRGEiQHv_J7Je8Itjc5qhwXMCR-E4y79abuxiddCYoeF2VrVakY-L1q82NeMEPjTA0fFC-t8h/s1200/image4%286%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjbMTlnGhVLcVL8K20S3s6hSrpyB6kZAA9CWvWNpn1isbEbLFv0c2rs_dPvM0ALT45NtTvyhp8rGehGDRIAEJ6OZYSkk5mezOEoPJOquVXXyHeqrVOvRGEiQHv_J7Je8Itjc5qhwXMCR-E4y79abuxiddCYoeF2VrVakY-L1q82NeMEPjTA0fFC-t8h/s1200/image4%286%29.png&quot; border=&quot;0&quot; alt=&quot;Bar graph showing the number of Internet Explorer itw 0-days discovered per year from 2015-2021. 2015: 3, 2016: 4, 2017: 3, 2018: 1, 2019: 3, 2020: 2, 2021: 4. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; style=&quot;max-height: 750; max-width: 600px;&quot;title=&quot;Bar graph showing the number of Internet Explorer itw 0-days discovered per year from 2015-2021. 2015: 3, 2016: 4, 2017: 3, 2018: 1, 2019: 3, 2020: 2, 2021: 4. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;So why are we seeing so little change in the number of in-the-wild 0-days despite the change in market share? Internet Explorer is still a ripe attack surface for initial entry into Windows machines, even if the user doesn&amp;rsquo;t use Internet Explorer as their Internet browser. While the number of 0-days stayed pretty consistent to what we&amp;rsquo;ve seen in previous years, the components targeted and the delivery methods of the exploits changed. 3 of the 4 0-days seen in 2021 targeted the MSHTML browser engine and were delivered via methods other than the web. Instead they were delivered to targets via Office documents or other file formats. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;The four 0-days targeted the following components:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_bqyk3pvm93qj-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;MSHTML browser engine (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26411.html&quot;&gt;CVE-2021-26411&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2021/CVE-2021-33742.html&quot;&gt;CVE-2021-33742&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444&quot;&gt;CVE-2021-40444&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;Javascript Engine - JScript9 (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34448&quot;&gt;CVE-2021-34448&lt;/a&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;For &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26411.html&quot;&gt;CVE-2021-26411&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;t&lt;/span&gt;&lt;span&gt;argets of the campaign initially received a &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c10&quot;&gt;.mht&lt;/span&gt;&lt;span&gt;&amp;nbsp;file, which prompted the user to open in Internet Explorer. Once it was opened in Internet Explorer, the exploit was downloaded and run. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-33742.html&quot;&gt;CVE-2021-33742&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444&quot;&gt;CVE-2021-40444&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;were delivered to targets via malicious Office documents.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26411.html&quot;&gt;CVE-2021-26411&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-33742.html&quot;&gt;CVE-2021-33742&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;were two common memory corruption bug patterns: a use-after-free due to a user controlled callback in between two actions using an object and the user frees the object during that callback and a buffer overflow.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;There were a few different vulnerabilities used in the exploit chain that used &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444&quot;&gt;CVE-2021-40444&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but the one within MSHTML was that as soon as the Office document was opened the payload would run: a CAB file was downloaded, decompressed, and then a function from within a DLL in that CAB was executed. Unlike the previous two MSHTML bugs, this was a logic error in URL parsing rather than a memory corruption bug.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.i2yh4xx4r7n0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;Windows&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Windows is the platform where we&amp;rsquo;ve seen the most change in components targeted compared with previous years. However, this shift has generally been in progress for a few years and predicted with the end-of-life of Windows 7 in 2020 and thus why it&amp;rsquo;s still not especially novel.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;In 2021 there were 10 Windows in-the-wild 0-days targeting 7 different components:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_rvy0q9fw47sg-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;2 Enhanced crypto provider (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31199&quot;&gt;CVE-2021-31199&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31201&quot;&gt;CVE-2021-31201&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;2 NTOS kernel (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-33771&quot;&gt;CVE-2021-33771&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31979&quot;&gt;CVE-2021-31979&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;2 Win32k (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1732.html&quot;&gt;CVE-2021-1732&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://securelist.com/mysterysnail-attacks-with-windows-zero-day/104509/&quot;&gt;CVE-2021-40449&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 Windows update medic (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36948&quot;&gt;CVE-2021-36948&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;) &lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 SuperFetch (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31955&quot;&gt;CVE-2021-31955&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 dwmcore.dll (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-28310&quot;&gt;CVE-2021-28310&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_718o7hzyu4f-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;1 ntfs.sys (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-31956&quot;&gt;CVE-2021-31956&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;The number of different components targeted is the shift from past years. For example, in 2019 75% of Windows 0-days targeted Win32k while in 2021 Win32k only made up 20% of the Windows 0-days. The reason that this was expected and predicted was that 6 out of 8 of those 0-days that targeted Win32k in 2019 did not target the latest release of Windows 10 at that time; they were targeting older versions. With Windows 10 Microsoft began dedicating more and more resources to locking down the attack surface of Win32k so as those older versions have hit end-of-life, Win32k is a less and less attractive attack surface.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Similar to the many Win32k vulnerabilities seen over the years, the &lt;/span&gt;&lt;span&gt;two 2021 Win32k in-the-wild 0-days are due to custom user callbacks&lt;/span&gt;&lt;span&gt;. The user calls functions that change the state of an object during the callback and Win32k does not correctly handle those changes. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1732.html&quot;&gt;CVE-2021-1732&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a type confusion vulnerability due to a user callback in &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c10&quot;&gt;xxxClientAllocWindowClassExtraBytes&lt;/span&gt;&lt;span&gt;&amp;nbsp;which leads to out-of-bounds read and write. If &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c10&quot;&gt;NtUserConsoleControl&lt;/span&gt;&lt;span&gt;&amp;nbsp;is called during the callback a flag is set in the window structure to signal that a field is an offset into the kernel heap. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c10&quot;&gt;xxxClientAllocWindowClassExtraBytes&lt;/span&gt;&lt;span&gt;&amp;nbsp;doesn&amp;rsquo;t check this and writes that field as a user-mode pointer without clearing the flag. The first in-the-wild 0-day detected and disclosed in 2022, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2022/CVE-2022-21882.html&quot;&gt;CVE-2022-21882&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, is due to &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1732.html&quot;&gt;CVE-2021-1732&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;actually not being fixed completely. The attackers found a way to bypass the original patch and still trigger the vulnerability. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://securelist.com/mysterysnail-attacks-with-windows-zero-day/104509/&quot;&gt;CVE-2021-40449&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a use-after-free in &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c10&quot;&gt;NtGdiResetDC&lt;/span&gt;&lt;span&gt;&amp;nbsp;due to the object being freed during the user callback. &lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.dzyrqam42oqk&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;iOS/macOS&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;As discussed in the &amp;ldquo;More disclosure&amp;rdquo; section above, 2021 was the first full year that Apple annotated their release notes with in-the-wild status of vulnerabilities. 5 iOS in-the-wild 0-days were detected and disclosed this year. The first publicly known macOS in-the-wild 0-day (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/&quot;&gt;CVE-2021-30869&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;) was also found. In this section we&amp;rsquo;re going to discuss iOS and macOS together because: 1) the two operating systems include similar components and 2) the sample size for macOS is very small (just this one vulnerability).&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPGaOlQUGIYyvpDY_M0rGh3JekH4mwXHfN459HYcklg74v4Mfp8j6fgh2SM09mjhA4svdgN_TdSN3R5Bb-DJTHnlo63qnRTsvLs1EZgAE3fBpRtsZhxKhyBNTb_khdS6mNT3EtSHnS_R-TshtHx-gSWnEPpHjmSqO_9Y7JxupGcDKZ0-xwsxgbX6zR/s1200/image6%284%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPGaOlQUGIYyvpDY_M0rGh3JekH4mwXHfN459HYcklg74v4Mfp8j6fgh2SM09mjhA4svdgN_TdSN3R5Bb-DJTHnlo63qnRTsvLs1EZgAE3fBpRtsZhxKhyBNTb_khdS6mNT3EtSHnS_R-TshtHx-gSWnEPpHjmSqO_9Y7JxupGcDKZ0-xwsxgbX6zR/s1200/image6%284%29.png&quot; border=&quot;0&quot; alt=&quot;Bar graph showing the number of macOS and iOS itw 0-days discovered per year. macOs is 0 for every year except 2021 when 1 was discovered. iOS - 2015: 0, 2016: 2, 2017: 0, 2018: 2, 2019: 0, 2020: 3, 2021: 5. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; style=&quot;max-height: 750; max-width: 600px; &quot;title=&quot;Bar graph showing the number of macOS and iOS itw 0-days discovered per year. macOs is 0 for every year except 2021 when 1 was discovered. iOS - 2015: 0, 2016: 2, 2017: 0, 2018: 2, 2019: 0, 2020: 3, 2021: 5. Data from: https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=2129022708&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;For the 5 total iOS and macOS in-the-wild 0-days&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;, they targeted 3 different attack surfaces:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_givsp5ka59r-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;IOMobileFrameBuffer (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212623&quot;&gt;CVE-2021-30807&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212846&quot;&gt;CVE-2021-30883&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;XNU Kernel (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212146&quot;&gt;CVE-2021-1782&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;amp; &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/&quot;&gt;CVE-2021-30869&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;CoreGraphics (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html&quot;&gt;CVE-2021-30860&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;CommCenter&lt;/span&gt;&lt;span&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html&quot;&gt;FORCEDENTRY sandbox escape&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;- CVE requested, not yet assigned)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;These 4 attack surfaces are not novel. IOMobileFrameBuffer has been a target of public security research for many years. For example, &lt;/span&gt;&lt;span&gt;the Pangu Jailbreak from 2016 used &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://www.blackhat.com/docs/us-16/materials/us-16-Wang-Pangu-9-Internals.pdf&quot;&gt;CVE-2016-4654&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, a heap buffer overflow in IOMobileFrameBuffer.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;IOMobileFrameBuffer manages the screen&amp;rsquo;s frame buffer. For iPhone 11 (A13) and below, IOMobileFrameBuffer was a kernel driver. Beginning with A14, it runs on a coprocessor, the DCP. &amp;nbsp;It&amp;rsquo;s a popular attack surface because historically it&amp;rsquo;s been accessible from sandboxed apps. In 2021 there were two in-the-wild 0-days in IOMobileFrameBuffer. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212623&quot;&gt;CVE-2021-30807&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an out-of-bounds read and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212846&quot;&gt;CVE-2021-30883&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is an integer overflow, both common memory corruption vulnerabilities. In 2022, we already have another in-the-wild 0-day in IOMobileFrameBuffer, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT213053&quot;&gt;CVE-2022-22587&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;One iOS 0-day and the macOS 0-day both exploited vulnerabilities in the XNU kernel and both vulnerabilities were in code related to XNU&amp;rsquo;s inter-process communication (IPC) functionality. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT212146&quot;&gt;CVE-2021-1782&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;exploited a vulnerability in mach vouchers while &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/&quot;&gt;CVE-2021-30869&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;exploited a vulnerability in mach messages. This is not the first time we&amp;rsquo;ve seen &lt;/span&gt;&lt;span&gt;iOS in-the-wild 0-days&lt;/span&gt;&lt;span&gt;, much less public security research, targeting mach vouchers and mach messages. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://support.apple.com/en-us/HT209443&quot;&gt;CVE-2019-6625&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was exploited as a part of &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2019/08/in-wild-ios-exploit-chain-5.html&quot;&gt;an exploit chain targeting iOS 11.4.1-12.1.2&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and was also a &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2019/01/voucherswap-exploiting-mig-reference.html&quot;&gt;vulnerability in mach vouchers&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Mach messages have also been a popular target for public security research. In 2020 there were two in-the-wild 0-days also in mach messages: &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27932.html&quot;&gt;CVE-2020-27932&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;amp; &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27950.html&quot;&gt;CVE-2020-27950&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This year&amp;rsquo;s &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://blog.google/threat-analysis-group/analyzing-watering-hole-campaign-using-macos-exploits/&quot;&gt;CVE-2021-30869&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a pretty close variant to 2020&amp;rsquo;s &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27932.html&quot;&gt;CVE-2020-27932&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Tielei Wang and Xinru Chi actually &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://github.com/wangtielei/Slides/blob/main/zer0con21.pdf&quot;&gt;presented on this vulnerability at zer0con 2021&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in April 2021. In their presentation, they explained that they found it while doing variant analysis on &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2020/CVE-2020-27932.html&quot;&gt;CVE-2020-27932&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://twitter.com/WangTielei/status/1486266258152726530&quot;&gt;TieLei Wang explained via Twitter&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;that they had found the vulnerability in December 2020 and had noticed it was fixed in beta versions of iOS 14.4 and macOS 11.2 which is why they presented it at Zer0Con. The in-the-wild exploit only targeted macOS 10, but used the same exploitation technique as the one presented.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;The two FORCEDENTRY exploits (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html&quot;&gt;CVE-2021-30860&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and the &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html&quot;&gt;sandbox escape&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) were the only times that made us all go &amp;ldquo;wow!&amp;rdquo; this year. For &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html&quot;&gt;CVE-2021-30860&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the integer overflow in CoreGraphics, it was because: &lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;c6 lst-kix_qhs0t3wlsx02-0 start&quot; start=&quot;1&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;For years we&amp;rsquo;ve all heard about how attackers are using 0-click iMessage bugs and finally we have a public example, and&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;The exploit was an impressive work of art. &lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;The sandbox escape (CVE requested, not yet assigned) was impressive because it&amp;rsquo;s one of the few times we&amp;rsquo;ve seen a sandbox escape in-the-wild that uses only logic bugs, rather than the standard memory corruption bugs. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;For &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html&quot;&gt;CVE-2021-30860&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the vulnerability itself wasn&amp;rsquo;t especially notable: a classic integer overflow within the JBIG2 parser of the CoreGraphics PDF decoder. The exploit, though, was described by Samuel Gro&amp;szlig; &amp;amp; Ian Beer as &amp;ldquo;one of the most technically sophisticated exploits [they]&amp;rsquo;ve ever seen&amp;rdquo;. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html&quot;&gt;Their blogpost shares all the details&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;, but the highlight is that the exploit uses the logical operators available in JBIG2 to build NAND gates which are used to build its own computer architecture. The exploit then writes the rest of its exploit using that new custom architecture. From their blogpost:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5 HNYIspzEBn-c15&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c8&quot;&gt;Using over 70,000 segment commands defining logical bit operations, they define a small computer architecture with features such as registers and a full 64-bit adder and comparator which they use to search memory and perform arithmetic operations. It&amp;#39;s not as fast as Javascript, but it&amp;#39;s fundamentally computationally equivalent.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2 HNYIspzEBn-c15&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5 HNYIspzEBn-c15&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c8&quot;&gt;The bootstrapping operations for the sandbox escape exploit are written to run on this logic circuit and the whole thing runs in this weird, emulated environment created out of a single decompression pass through a JBIG2 stream. It&amp;#39;s pretty incredible, and at the same time, pretty terrifying.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;This is an example of what &lt;/span&gt;&lt;span&gt;making 0-day exploitation hard could&lt;/span&gt;&lt;span&gt;&amp;nbsp;look like:&lt;/span&gt;&lt;span&gt;&amp;nbsp;attackers having to develop a new and novel way to exploit a bug and that method requires lots of expertise and/or time to develop.&lt;/span&gt;&lt;span&gt;&amp;nbsp;This year, the two FORCEDENTRY exploits were the only 0-days out of the 58 that really impressed us. Hopefully in the future, the bar has been raised such that this will be required for any successful exploitation.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.tyseasm1qg7w&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;Android&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;There were 7 Android in-the-wild 0-days detected and disclosed this year. Prior to 2021 there had only been 1 and it was in 2019: &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2019/CVE-2019-2215.html&quot;&gt;CVE-2019-2215&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;. Like WebKit, this lack of data makes it hard for us to assess trends and changes. Instead, we&amp;rsquo;ll compare it to public security research.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;For the 7 Android 0-days they targeted the following components:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c6 lst-kix_3zaknyhdqv25-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;Qualcomm Adreno GPU driver (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://source.android.com/security/bulletin/2021-01-01&quot;&gt;CVE-2020-11261&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2021/CVE-2021-1905.html&quot;&gt;CVE-2021-1905&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://source.android.com/security/bulletin/2021-05-01&quot;&gt;CVE-2021-1906&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;ARM Mali GPU driver (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://source.android.com/security/bulletin/2021-05-01&quot;&gt;CVE-2021-28663&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://source.android.com/security/bulletin/2021-05-01&quot;&gt;CVE-2021-28664&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span&gt;Upstream Linux kernel (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1048.html&quot;&gt;CVE-2021-1048&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://source.android.com/security/bulletin/2021-11-01#kernel-components&quot;&gt;CVE-2021-0920&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;5 of the 7 0-days from 2021 targeted GPU drivers. This is actually not that surprising when we consider the evolution of the Android ecosystem as well as recent public security research into Android. The Android ecosystem is quite &lt;/span&gt;&lt;span&gt;fragmented&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;: many different kernel versions, different manufacturer customizations, etc. If an attacker wants a capability against &amp;ldquo;Android devices&amp;rdquo;, they generally need to maintain many different exploits to have a decent percentage of the Android ecosystem covered. However, if the attacker chooses to target the GPU kernel driver instead of another component, they will only need to have two exploits since most Android devices use 1 of 2 GPUs: either the Qualcomm Adreno GPU or the ARM Mali GPU. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Public security research mirrored this choice in the last couple of years as well. &lt;/span&gt;&lt;span&gt;When developing full exploit chains&lt;/span&gt;&lt;span&gt;&amp;nbsp;(for defensive purposes) to target Android devices, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://github.com/secmob/TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices/blob/master/us-20-Gong-TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices-wp.pdf&quot;&gt;Guang Gong&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://securitylab.github.com/research/one_day_short_of_a_fullchain_android/&quot;&gt;Man Yue Mo&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.blogspot.com/2020/09/attacking-qualcomm-adreno-gpu.html&quot;&gt;Ben Hawkes&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;all chose to attack the GPU kernel driver for local privilege escalation. Seeing the in-the-wild 0-days also target the GPU was more of a confirmation rather than a revelation. Of the &lt;/span&gt;&lt;span&gt;5 0-days targeting &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;GPU drivers, 3 were in the Qualcomm Adreno driver and 2 in the ARM Mali driver. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;The two non-GPU driver 0-days (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://source.android.com/security/bulletin/2021-11-01#kernel-components&quot;&gt;CVE-2021-0920&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1048.html&quot;&gt;CVE-2021-1048&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) targeted the upstream Linux kernel. Unfortunately, these 2 bugs shared a singular characteristic with the Android in-the-wild 0-day seen in 2019: all 3 were previously known upstream before their exploitation in Android. While the sample size is small, it&amp;rsquo;s still quite &lt;/span&gt;&lt;span&gt;striking&lt;/span&gt;&lt;span&gt;&amp;nbsp;to see that 100% of the known in-the-wild Android 0-days that target the kernel &lt;/span&gt;&lt;span&gt;are bugs that actually were known about before their exploitation.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;The vulnerability now referred to as &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://source.android.com/security/bulletin/2021-11-01#kernel-components&quot;&gt;CVE-2021-0920&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was actually found in September 2016 and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://lore.kernel.org/lkml/CAOssrKcfncAYsQWkfLGFgoOxAQJVT2hYVWdBA6Cw7hhO8RJ_wQ@mail.gmail.com/&quot;&gt;discussed on the Linux kernel mailing lists&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. A &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://lore.kernel.org/lkml/1475150954-10152-1-git-send-email-mszeredi@redhat.com/&quot;&gt;patch was even developed back in 2016&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but it didn&amp;rsquo;t end up being submitted. The bug was finally &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=cbcf01128d0a92e131bd09f1688fe032480b65ca&quot;&gt;fixed in the Linux kernel in July 2021&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;after the detection of the in-the-wild exploit targeting Android. The patch then made it into the &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://source.android.com/security/bulletin/2021-11-01#kernel-components&quot;&gt;Android security bulletin in November 2021&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-1048.html&quot;&gt;CVE-2021-1048&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;remained unpatched in Android for 14 months after it was patched in the Linux kernel. The Linux kernel was actually only vulnerable to the issue for a few weeks, but due to Android patching practices, that few weeks became almost a year for some Android devices. If an Android OEM synced to the upstream kernel, then they likely were patched against the vulnerability at some point. But many devices, such as recent Samsung devices, had not and thus were left vulnerable.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.go76pditpwq7&quot;&gt;&lt;span&gt;Microsoft &lt;/span&gt;&lt;span&gt;Exchange Server&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;In 2021, there were 5 in-the-wild 0-days targeting Microsoft Exchange Server. This is the first time any Exchange Server in-the-wild 0-days have been detected and disclosed since we began tracking in-the-wild 0-days. The first four (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26855.html&quot;&gt;CVE-2021-26855&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26857&quot;&gt;CVE-2021-26857&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26858&quot;&gt;CVE-2021-26858&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065&quot;&gt;CVE-2021-27065&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) &amp;nbsp;were all disclosed and patched at the same time and used together in a &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/&quot;&gt;single operation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;The fifth (&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321&quot;&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) was patched on its own in November 2021. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321&quot;&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;was demonstrated at Tianfu Cup and then discovered in-the-wild by Microsoft. While no other in-the-wild 0-days were disclosed as part of the chain with &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321&quot;&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the attackers would have required at least another 0-day for successful exploitation since &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321&quot;&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;is a post-authentication bug.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Of the four Exchange in-the-wild 0-days used in the first campaign, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26855.html&quot;&gt;CVE-2021-26855&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, which is also known as &amp;ldquo;ProxyLogon&amp;rdquo;, is the only one that&amp;rsquo;s pre-auth. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2021/CVE-2021-26855.html&quot;&gt;CVE-2021-26855&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a server side request forgery (SSRF) vulnerability that allows unauthenticated attackers to send arbitrary HTTP requests as the Exchange server. The other three vulnerabilities were post-authentication. For example, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26858&quot;&gt;CVE-2021-26858&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065&quot;&gt;CVE-2021-27065&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;allowed attackers to write arbitrary files to the system. &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26857&quot;&gt;CVE-2021-26857&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;is a remote code execution vulnerability due to a deserialization bug in the Unified Messaging service. This allowed attackers to run code as the privileged SYSTEM user.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;For the second campaign, &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-42321&quot;&gt;CVE-2021-42321&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, like &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26858&quot;&gt;CVE-2021-26858&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;, is a post-authentication RCE vulnerability due to insecure deserialization. It seems that while attempting to harden Exchange, Microsoft inadvertently introduced another deserialization vulnerability.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;While there were a significant amount of 0-days in Exchange detected and disclosed in 2021, it&amp;rsquo;s important to remember that they were all used as 0-day in only two different campaigns. &lt;/span&gt;&lt;span&gt;This is an example of why we don&amp;rsquo;t suggest &lt;/span&gt;&lt;span&gt;using the number&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;of 0-days in a product as a metric to assess the security of a product. Requiring the use of four 0-days for attackers to have success is preferable to an attacker only needing one 0-day to successfully gain access.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;While this is the first time Exchange in-the-wild 0-days have been detected and disclosed&lt;/span&gt;&lt;span&gt;&amp;nbsp;since Project Zero began our tracking, this is not unexpected. In 2020 there was &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://www.cisa.gov/uscert/ncas/current-activity/2020/03/10/unpatched-microsoft-exchange-servers-vulnerable-cve-2020-0688&quot;&gt;n-day exploitation of Exchange Servers&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Whether this was the first year that attackers began the 0-day exploitation or if this was the first year that defenders began detecting the 0-day exploitation, this is not an unexpected evolution and we&amp;rsquo;ll likely see it continue into 2022.&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;HNYIspzEBn-c11&quot; id=&quot;h.1cg90di44ry5&quot;&gt;&lt;span&gt;Outstanding Questions&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;While there has been progress on detection and disclosure, that progress has shown just how much work there still is to do. The more data we gained, the more questions that arose about biases in detection, what we&amp;rsquo;re missing and why, and the need for more transparency from both vendors and researchers.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Until the day that attackers decide to happily share all their exploits with us, we can&amp;rsquo;t fully know what percentage of 0-days are &lt;/span&gt;&lt;span&gt;publicly known about&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;. However when we pull together our expertise as security researchers and anecdotes from others in the industry, it paints a picture of some of the data we&amp;rsquo;re very likely missing. From that, these are some of the key questions we&amp;rsquo;re asking ourselves as we move into 2022:&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.9mkiyelw2l4a&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;Where are the [x] 0-days?&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Despite the number of 0-days found in 2021, there are key targets missing from the 0-days discovered. For example, we know that messaging applications like WhatsApp, Signal, Telegram, etc. are targets of interest to attackers and yet there&amp;rsquo;s only 1 messaging app, in this case iMessage, 0-day found this past year. Since we began tracking in mid-2014 the total is two: a WhatsApp 0-day in 2019 and this iMessage 0-day found in 2021.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Along with messaging apps, there are other platforms/targets we&amp;rsquo;d expect to see 0-days targeting, yet there are no or very few public examples. For example, since mid-2014 there&amp;rsquo;s only one in-the-wild 0-day each for macOS and &lt;/span&gt;&lt;span&gt;Linux&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;. There are no known in-the-wild 0-days targeting cloud, CPU vulnerabilities, or other phone components such as the WiFi chip or the baseband.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;This leads to the question of whether these 0-days are absent due to lack of detection, lack of disclosure, or both?&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.lmeqy4ji80fr&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;Do some vendors have no known in-the-wild 0-days because they&amp;rsquo;ve never been found or because they don&amp;rsquo;t publicly disclose?&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Unless a vendor has told us that they will publicly disclose exploitation status for all vulnerabilities in their platforms, we, the public, don&amp;rsquo;t know if the absence of an annotation means that there is no known exploitation of a vulnerability or if there is, but the vendor is just not sharing that information publicly. &lt;/span&gt;&lt;span&gt;Thankfully this question is something that has a pretty clear solution: all device and software vendors agreeing to publicly disclose when there is evidence to suggest that a vulnerability in their product is being exploited in-the-wild.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.dckkx2d1dyz5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;Are we seeing the same bug patterns because that&amp;rsquo;s what we know how to detect?&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;As we described earlier in this report, all the 0-days we saw in 2021 had similarities to previously seen vulnerabilities. This leads us to wonder whether or not that&amp;rsquo;s actually representative of what attackers are using. Are attackers actually having success exclusively using vulnerabilities in bug classes and components that are previously public? Or are we detecting all these 0-days with known bug patterns because that&amp;rsquo;s what we know how to detect? Public security research would suggest that yes, attackers are still able to have success with using vulnerabilities in known components and bug classes the majority of the time. But we&amp;rsquo;d still expect to see a few novel and unexpected vulnerabilities in the grouping. We posed this question back in the 2019 year-in-review and it still lingers. &lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;HNYIspzEBn-c7&quot; id=&quot;h.w9alsmed3bqy&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c12&quot;&gt;Where are the spl0itz?&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;To successfully exploit a vulnerability there are two key pieces that make up that exploit: the vulnerability being exploited, and the exploitation method (how that vulnerability is turned into something useful). &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Unfortunately, this report could only really analyze one of these components: the vulnerability. Out of the 58 0-days, only 5 have an exploit sample publicly available. Discovered in-the-wild 0-days are the failure case for attackers and a key opportunity for defenders to learn what attackers are doing and make it harder, more time-intensive, more costly, to do it again. Yet without the exploit sample or a detailed technical write-up based upon the sample, we can only focus on fixing the vulnerability rather than also mitigating the exploitation method. This means that attackers are able to continue to use their existing exploit methods rather than having to go back to the design and development phase to build a new exploitation method. While acknowledging that sharing exploit samples can be challenging (we have that challenge too!), we hope in 2022 there will be more &lt;/span&gt;&lt;span&gt;sharing of exploit samples or detailed technical write-ups so that we can come together to use every possible piece of information to make it harder for the attackers to exploit more users.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;As an aside, if you have an exploit sample that you&amp;rsquo;re willing to share with us, please reach out. Whether it&amp;rsquo;s sharing with us and having us write a detailed technical description and analysis or having us share it publicly, we&amp;rsquo;d be happy to work with you.&lt;/span&gt;&lt;/p&gt;&lt;h1 class=&quot;HNYIspzEBn-c11&quot; id=&quot;h.e19lp542ae55&quot;&gt;&lt;span&gt;Conclusion&lt;/span&gt;&lt;/h1&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Looking back on 2021, what comes to mind is &lt;/span&gt;&lt;span&gt;&amp;ldquo;baby steps&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;rdquo;. We can see clear industry improvement in the detection and disclosure of 0-day exploits. But the better detection and disclosure has highlighted other opportunities for progress. As an industry we&amp;rsquo;re not making 0-day hard. Attackers are having success using vulnerabilities similar to what we&amp;rsquo;ve seen previously and in components that have previously been discussed as attack surfaces.The goal is to force attackers to start from scratch each time we detect one of their exploits: they&amp;rsquo;re forced to discover a whole new vulnerability, they have to invest the time in learning and analyzing a new attack surface, they must develop a brand new exploitation method. &amp;nbsp;And while we made distinct progress in detection and disclosure it has shown us areas where that can continue to improve.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;While this all may seem daunting, the promising part is that we&amp;rsquo;ve done it before: we have made clear progress on previously daunting goals. In 2019, we discussed the large detection deficit for 0-day exploits and 2 years later more than double were detected and disclose&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;. So while there is still plenty more work to do, it&amp;rsquo;s a tractable problem. There are concrete steps that the tech and security industries can take to make it even more progress:&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;c6 lst-kix_czzguda5pqu4-0 start&quot; start=&quot;1&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Make it an industry standard behavior for all vendors to publicly disclose when there is evidence to suggest that a vulnerability in their product is being exploited,&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Vendors and security researchers sharing exploit samples or detailed descriptions of the exploit techniques.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c4 li-bullet-0&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;Continued concerted efforts on reducing memory corruption vulnerabilities or rendering them unexploitable.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;Through 2021 we continually saw the real world impacts of the use of 0-day exploits against users and entities. Amnesty International, the Citizen Lab, and others highlighted &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://citizenlab.ca/2021/10/breaking-news-new-york-times-journalist-ben-hubbard-pegasus/&quot;&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://www.amnesty.org/en/documents/doc10/4491/2021/en/&quot;&gt;over&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;how governments were using commercial surveillance products against &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://forbiddenstories.org/pegasus-the-new-global-weapon-for-silencing-journalists/&quot;&gt;journalists&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://www.amnesty.org/en/latest/research/2021/11/devices-of-palestinian-human-rights-defenders-hacked-with-nso-groups-pegasus-spyware-2/&quot;&gt;human rights defenders&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://www.reuters.com/technology/exclusive-us-state-department-phones-hacked-with-israeli-company-spyware-sources-2021-12-03/&quot;&gt;government officials&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. We saw many enterprises scrambling to remediate and protect themselves from the&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/&quot;&gt;Exchange Server 0-days&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. And we even learned of peer &lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://blog.google/threat-analysis-group/update-campaign-targeting-security-researchers/&quot;&gt;security researchers being targeted by &lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c1&quot;&gt;&lt;a class=&quot;HNYIspzEBn-c31&quot; href=&quot;https://blog.google/threat-analysis-group/update-campaign-targeting-security-researchers/&quot;&gt;North Korean government hackers&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;. While the majority of people on the planet do not need to worry about their own personal risk of being targeted with 0-days, 0-day exploitation still affects us all. These 0-days tend to have an outsized impact on society so we need to continue doing whatever we can to make it harder for attackers to be successful in these attacks.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c2&quot;&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;HNYIspzEBn-c5&quot;&gt;&lt;span&gt;2021 showed us we&amp;rsquo;re on the right track and making progress, but there&amp;rsquo;s plenty more to be done to make &lt;/span&gt;&lt;span&gt;0-day&lt;/span&gt;&lt;span class=&quot;HNYIspzEBn-c0&quot;&gt;&amp;nbsp;hard.&lt;/span&gt;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='https://googleprojectzero.blogspot.com/feeds/3023870154175197326/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://googleprojectzero.blogspot.com/2022/04/the-more-you-know-more-you-know-you.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/3023870154175197326'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/3023870154175197326'/><link rel='alternate' type='text/html' href='https://googleprojectzero.blogspot.com/2022/04/the-more-you-know-more-you-know-you.html' title='The More You Know, The More You Know You Donâ€™t Know'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjC72HVhQEdwHNIzMiyb18bUFr6hPCWJiKL2Mm43-tW11qc0ucOPI8A9oChEXQe0-QNOBF83SIcfyjcyvPveuWvgipbiBzHWqZTx2-LilJFYIbx6uQeno9f481HJQ0CgylQkh8Ks7AbGC6tjhYDNBcI7jh6ihhzJATA0r_P4bQUBm-1lmHp2DPvWM6I/s72-c/image1%287%29.png" height="72" width="72"/><thr:total>0</thr:total></entry>