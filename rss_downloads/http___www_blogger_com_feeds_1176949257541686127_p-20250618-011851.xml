<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1176949257541686127.post-4732798997432167076</id><published>2021-11-11T07:00:00.003-05:00</published><updated>2022-11-18T10:39:15.533-05:00</updated><title type='text'>ClusterFuzzLite: Continuous fuzzing for all </title><content type='html'>&lt;span class=&quot;byline-author&quot;&gt;Posted by Jonathan Metzman, Google Open Source Security Team&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id=&quot;docs-internal-guid-af5e27f3-7fff-3089-1292-796e4c36069f&quot;&gt;&lt;br /&gt;In recent years, &lt;a href=&quot;https://github.com/google/fuzzing/blob/master/docs/intro-to-fuzzing.md&quot;&gt;continuous fuzzing&lt;/a&gt; has become an essential part of the software development lifecycle. By feeding unexpected or random data into a program, fuzzing catches bugs that would otherwise slip through the most thorough manual checks and provides coverage that would take staggering human effort to replicate. &lt;a href=&quot;https://www.nist.gov/itl/executive-order-improving-nations-cybersecurity/recommended-minimum-standards-vendor-or&quot;&gt;NIST’s guidelines for software verification&lt;/a&gt;, recently released in response to the White House &lt;a href=&quot;https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/&quot;&gt;Executive Order on Improving the Nation’s Cybersecurity&lt;/a&gt;, specify fuzzing among the minimum standard requirements for code verification.&lt;br /&gt;&lt;br /&gt;Today, we are excited to announce &lt;a href=&quot;https://github.com/google/clusterfuzzlite&quot;&gt;ClusterFuzzLite&lt;/a&gt;, a continuous fuzzing solution that runs as part of CI/CD workflows to find vulnerabilities faster than ever before. With just a few lines of code, GitHub users can integrate ClusterFuzzLite into their workflow and fuzz pull requests to catch bugs before they are committed, enhancing the overall security of the software supply chain.&lt;br /&gt;&lt;br /&gt;Since its release in 2016, over 500 critical open source projects have integrated into Google’s &lt;a href=&quot;https://security.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html&quot;&gt;OSS-Fuzz&lt;/a&gt; program, resulting in over &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?q=Type%3DBug-Security%20status%3AVerified&amp;amp;can=1&quot;&gt;6,500&lt;/a&gt; vulnerabilities and &lt;a href=&quot;https://bugs.chromium.org/p/oss-fuzz/issues/list?q=Type%3DBug%20status%3AVerified%20-Type%3DBug-Security&amp;amp;can=1&quot;&gt;21,000&lt;/a&gt; functional bugs being fixed. ClusterFuzzLite goes hand-in-hand with OSS-Fuzz, by catching regression bugs much earlier in the development process.&lt;br /&gt;&lt;br /&gt;Large projects including &lt;a href=&quot;https://github.com/systemd/systemd/actions/workflows/cifuzz.yml&quot;&gt;systemd&lt;/a&gt; and &lt;a href=&quot;https://github.com/curl/curl/actions/workflows/fuzz.yml&quot;&gt;curl&lt;/a&gt; are already using ClusterFuzzLite during code review, with positive results. According to Daniel Stenberg, author of curl, “When the human reviewers nod and have approved the code and your static code analyzers and linters can&#39;t detect any more issues, fuzzing is what takes you to the next level of code maturity and robustness. OSS-Fuzz and ClusterFuzzLite help us maintain curl as a quality project, around the clock, every day and every commit.”&lt;br /&gt;&lt;br /&gt;With the release of ClusterFuzzLite, any project can integrate this essential testing standard and benefit from fuzzing. ClusterFuzzLite offers many of the same features as &lt;a href=&quot;https://github.com/google/clusterfuzz&quot;&gt;ClusterFuzz&lt;/a&gt;, such as continuous fuzzing, sanitizer support, corpus management, and coverage report generation. Most importantly, it’s easy to set up and works with closed source projects, making ClusterFuzzLite a convenient option for any developer who wants to fuzz their software.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEihsL52uisFpiXP1Mlxr-_BDG4HEVjIXceRqAbZq9YjN6ZmvvhwF-JmWs25VNbTNbVxeiIOOXP1fC30BcUOXgDIHzMd6uWxgM-rZ58w6Mzq5_-ZBQF-mUCEM9snM3L17V6OLrs5Qq8pe_5D5E_-_PZcOf40jfSz46MhYJq6l_GwwjaZqiQuqn91TMQgMw/s800/fuzzer.gif&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;384&quot; data-original-width=&quot;800&quot; height=&quot;308&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEihsL52uisFpiXP1Mlxr-_BDG4HEVjIXceRqAbZq9YjN6ZmvvhwF-JmWs25VNbTNbVxeiIOOXP1fC30BcUOXgDIHzMd6uWxgM-rZ58w6Mzq5_-ZBQF-mUCEM9snM3L17V6OLrs5Qq8pe_5D5E_-_PZcOf40jfSz46MhYJq6l_GwwjaZqiQuqn91TMQgMw/w640-h308/fuzzer.gif&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; text-align: left; white-space: pre-wrap;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;With ClusterFuzzLite, fuzzing is no longer just an idealized &quot;bonus&quot; round of testing for those who have access to it, but a critical must-have step that everyone can use continuously on every software project. By finding and preventing bugs before they enter the codebase we can build a more secure software ecosystem. &lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;To learn more, check out the &lt;a href=&quot;https://google.github.io/clusterfuzzlite/&quot;&gt;ClusterFuzzLite documentation&lt;/a&gt;. ClusterFuzzLite currently supports &lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;GitHub Actions&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;https://cloud.google.com/build&quot;&gt;Google Cloud Build&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;https://github.com/kubernetes/test-infra/tree/master/prow#readme&quot;&gt;Prow&lt;/a&gt;. We built this with CI system extensibility in mind, and adding support for other CI systems is straightforward. Please &lt;a href=&quot;https://github.com/google/clusterfuzzlite/issues/new&quot;&gt;contact us&lt;/a&gt; if you’re interested in contributing support, or have any questions, feedback or feature requests.&lt;/span&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://security.googleblog.com/feeds/4732798997432167076/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment/fullpage/post/1176949257541686127/4732798997432167076?isPopup=true' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/4732798997432167076'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/4732798997432167076'/><link rel='alternate' type='text/html' href='http://security.googleblog.com/2021/11/clusterfuzzlite-continuous-fuzzing-for.html' title='ClusterFuzzLite: Continuous fuzzing for all '/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEihsL52uisFpiXP1Mlxr-_BDG4HEVjIXceRqAbZq9YjN6ZmvvhwF-JmWs25VNbTNbVxeiIOOXP1fC30BcUOXgDIHzMd6uWxgM-rZ58w6Mzq5_-ZBQF-mUCEM9snM3L17V6OLrs5Qq8pe_5D5E_-_PZcOf40jfSz46MhYJq6l_GwwjaZqiQuqn91TMQgMw/s72-w640-h308-c/fuzzer.gif" height="72" width="72"/><thr:total>0</thr:total></entry>