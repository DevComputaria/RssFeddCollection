<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-4838136820032157985.post-5073082417618502919</id><published>2021-12-15T09:00:00.001-08:00</published><updated>2022-08-23T12:03:57.118-07:00</updated><title type='text'>A deep dive into an NSO zero-click iMessage exploit: Remote Code Execution</title><content type='html'>&lt;style type=&quot;text/css&quot;&gt;@import url(&#39;https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&#39;);ol{margin:0;padding:0}table td,table th{padding:0}.c13{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#b7b7b7;border-top-width:1pt;border-right-width:1pt;border-left-color:#b7b7b7;vertical-align:top;border-right-color:#b7b7b7;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#b7b7b7;border-bottom-style:solid}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:&quot;Courier New&quot;;font-style:normal}.c5{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:&quot;Arial&quot;;font-style:normal}.c20{padding-top:20pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c19{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:&quot;Arial&quot;;font-style:normal}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:right;height:11pt}.c4{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:center}.c14{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:&quot;Arial&quot;;font-style:normal}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c9{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:&quot;Arial&quot;}.c12{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:right}.c23{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c22{border-spacing:0;border-collapse:collapse;margin-right:auto}.c21{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c16{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c17{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c2{color:inherit;text-decoration:inherit}.c15{font-weight:400;font-family:Consolas,&quot;Courier New&quot;}.c6{font-weight:400;font-family:&quot;Courier New&quot;}.c8{font-weight:700}.c11{height:0pt}.c7{font-style:italic}.c10{height:11pt}.c18{background-color:#00ff00}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}p{margin:0;color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;c17&quot;&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;Posted by Ian Beer &amp;amp; Samuel Gro&amp;szlig; of Google Project Zero&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c7&quot;&gt;We want to thank Citizen Lab for sharing a sample of the FORCEDENTRY exploit with us, and Apple&amp;rsquo;s Security Engineering and Architecture (SEAR) group for collaborating with us on the technical analysis. The editorial opinions reflected below are solely Project Zero&amp;rsquo;s and do not necessarily reflect those of the organizations we collaborated with during this research. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Earlier this year, Citizen Lab managed to capture an NSO iMessage-based zero-click exploit being used to target a Saudi activist.&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;In this two-part blog post series we will describe &lt;/span&gt;&lt;span&gt;for the first time&lt;/span&gt;&lt;span&gt;&amp;nbsp;how an in-the-wild zero-click iMessage exploit works.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Based on our research and findings, we &lt;/span&gt;&lt;span&gt;assess&lt;/span&gt;&lt;span&gt;&amp;nbsp;this to be &lt;/span&gt;&lt;span&gt;one of the most technically sophisticated exploits we&amp;#39;ve ever seen, further&lt;/span&gt;&lt;span&gt;&amp;nbsp;demonstrating &lt;/span&gt;&lt;span&gt;that the capabilities NSO provides rival those previously thought to be accessible to only a handful of nation states.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;The vulnerability discussed in this blog post was fixed on September 13, 2021 in &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://support.apple.com/en-us/HT212807&quot;&gt;iOS 14.8&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;as CVE-2021-30860.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c14 c8&quot;&gt;NSO&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://en.wikipedia.org/wiki/NSO_Group&quot;&gt;NSO&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://en.wikipedia.org/wiki/NSO_Group&quot;&gt;&amp;nbsp;Group&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;&amp;nbsp;one of the &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://www.atlanticcouncil.org/in-depth-research-reports/report/countering-cyber-proliferation-zeroing-in-on-access-as-a-service/&quot;&gt;highest-profile providers of &amp;quot;access-as-a-service&amp;quot;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, selling packaged hacking solutions which &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://www.atlanticcouncil.org/in-depth-research-reports/issue-brief/surveillance-technology-at-the-fair/&quot;&gt;enable nation state actors without a home-grown offensive cyber capability to &amp;quot;pay-to-play&amp;quot;&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;, vastly expanding the number of nations with such cyber capabilities.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;For years, groups like Citizen Lab and Amnesty International have been tracking the use of NSO&amp;#39;s mobile spyware package &amp;quot;Pegasus&amp;quot;. Despite NSO&amp;#39;s claims that they &amp;quot;&lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://www.nsogroup.com/governance/human-rights-policy/&quot;&gt;[evaluate] the potential for adverse human rights impacts arising from the misuse of NSO products&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;quot; Pegasus has been linked to &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://citizenlab.ca/2020/01/stopping-the-press-new-york-times-journalist-targeted-by-saudi-linked-pegasus-spyware-operator/&quot;&gt;the hacking of the New York Times journalist Ben Hubbard by the Saudi regime&lt;/a&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://www.amnesty.org/en/latest/research/2019/10/morocco-human-rights-defenders-targeted-with-nso-groups-spyware/&quot;&gt;hacking of human rights defenders in Morocco&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://citizenlab.ca/2021/08/bahrain-hacks-activists-with-nso-group-zero-click-iphone-exploits/&quot;&gt;Bahrain&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://www.amnesty.org/en/latest/research/2018/08/amnesty-international-among-targets-of-nso-powered-campaign/&quot;&gt;the targeting of Amnesty International staff&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;and dozens of other cases.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Last month the United States added NSO to the &amp;quot;Entity List&amp;quot;, severely restricting the ability of US companies to do business with NSO and &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://www.commerce.gov/news/press-releases/2021/11/commerce-adds-nso-group-and-other-foreign-companies-entity-list&quot;&gt;stating in a press release&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;that &amp;quot;[NSO&amp;#39;s tools] enabled foreign governments to conduct transnational repression, which is the practice of authoritarian governments targeting dissidents, journalists and activists outside of their sovereign borders to silence dissent.&amp;quot;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Citizen Lab was able to recover these Pegasus exploits from an iPhone and therefore this analysis covers NSO&amp;#39;s capabilities against iPhone. We are aware that NSO sells similar zero-click capabilities which target Android devices; Project Zero&lt;/span&gt;&lt;span&gt;&amp;nbsp;does not have samples of these exploits&lt;/span&gt;&lt;span&gt;&amp;nbsp;but if you do, &lt;/span&gt;&lt;span&gt;please reach out.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c14 c8&quot;&gt;From One to Zero&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;In previous cases such as the &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/&quot;&gt;Million Dollar Dissident from 2016&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;, targets were sent links in SMS messages:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;/p&gt;
  
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvP0VlEQXC6TZWOu-zPOWC-Pnyy3uqOJpwPeP3Y_rz-ZO_MvrqjiMtMwxzIz_E8NdNyrV_Fvx-RRApoMxAPrYQcHO4eiico20He9zMm3UT5-j84CCRZDJq5hjMmeIKd0aLMsflCkfrfVHp1z1PbQmYPFX6UlVtn6_gF8P6iTQaAHL3EQ6iKs4VDdEZ/s870/image2%281%29.jpg&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvP0VlEQXC6TZWOu-zPOWC-Pnyy3uqOJpwPeP3Y_rz-ZO_MvrqjiMtMwxzIz_E8NdNyrV_Fvx-RRApoMxAPrYQcHO4eiico20He9zMm3UT5-j84CCRZDJq5hjMmeIKd0aLMsflCkfrfVHp1z1PbQmYPFX6UlVtn6_gF8P6iTQaAHL3EQ6iKs4VDdEZ/s870/image2%281%29.jpg&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;Screenshots of Phishing SMSs reported to Citizen Lab in 2016&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c7&quot;&gt;source: &lt;/span&gt;&lt;span class=&quot;c16 c7&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/&quot;&gt;https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;The target was only hacked when they clicked the link, a technique known as a one-click exploit. Recently, however, it has been documented that NSO is offering their clients zero-click exploitation technology, where even very technically savvy targets who might not click a phishing link are completely unaware they are being targeted. In the zero-click scenario no user interaction is required. Meaning, t&lt;/span&gt;&lt;span&gt;he attacker doesn&amp;#39;t need to send phishing messages; the exploit just works silently in the background&lt;/span&gt;&lt;span&gt;. Short of not using a device, t&lt;/span&gt;&lt;span&gt;here is no way to prevent exploitation by a zero-click exploit; it&amp;#39;s a weapon against which there is no defense&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c8&quot;&gt;One weird trick&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;The initial entry point for Pegasus on iPhone is iMessage. This means that a victim can be targeted just using their phone number or AppleID username.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;iMessage has native support for GIF images, the typically small and low quality animated images popular in meme culture. You can send and receive GIFs in iMessage chats and they show up in the chat window. Apple wanted to make those GIFs loop endlessly rather than only play once, so very early on in the &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://googleprojectzero.blogspot.com/2021/01/a-look-at-imessage-in-ios-14.html&quot;&gt;iMessage parsing and processing pipeline&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;(after a message has been received but well before the message is shown), iMessage calls the following method in the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;IMTranscoderAgent&lt;/span&gt;&lt;span&gt;&amp;nbsp;process&lt;/span&gt;&lt;span&gt;&amp;nbsp;(outside the &amp;quot;BlastDoor&amp;quot; sandbox), passing any image file received with the extension &lt;/span&gt;&lt;span class=&quot;c15&quot;&gt;.gif&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c15 c23&quot;&gt;&amp;nbsp; [IMGIFUtils copyGifFromPath:toDestinationPath:error]&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Looking at the selector name, the intention here was probably to just copy the GIF file before editing the loop count field, but the semantics of this method are different. Under the hood it uses the CoreGraphics APIs to &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;render&lt;/span&gt;&lt;span&gt;&amp;nbsp;the source image to a &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;new&lt;/span&gt;&lt;span&gt;&amp;nbsp;GIF file at the destination path. And just because the source filename has to end in &lt;/span&gt;&lt;span class=&quot;c15&quot;&gt;.gif&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;, that doesn&amp;#39;t mean it&amp;#39;s really a GIF file.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;The ImageIO library, &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://googleprojectzero.blogspot.com/2020/04/fuzzing-imageio.html&quot;&gt;as detailed in a previous Project Zero blogpost&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;, is used to guess the correct format of the source file and parse it, completely ignoring the file extension. Using this &amp;quot;fake gif&amp;quot; trick, over 20 image codecs are suddenly part of the iMessage zero-click attack surface, including some very obscure and complex formats, remotely exposing probably hundreds of thousands of lines of code. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;Note: Apple inform us that they have restricted the available ImageIO formats reachable from IMTranscoderAgent starting in iOS 14.8.1 (26 October 2021), and completely removed the GIF code path from IMTranscoderAgent starting in iOS 15.0 (20 September 2021), with GIF decoding taking place entirely within BlastDoor.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c8&quot;&gt;A PDF in your GIF&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;NSO uses the &amp;quot;fake gif&amp;quot; trick to target a vulnerability in the CoreGraphics PDF parser.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;PDF was a popular target for exploitation around a decade ago, due to its ubiquity and complexity. Plus, the availability of javascript inside PDFs made development of reliable exploits far easier. The CoreGraphics PDF parser doesn&amp;#39;t &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;seem&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;to interpret javascript, but NSO managed to find something equally powerful inside the CoreGraphics PDF parser...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c14 c8&quot;&gt;Extreme compression&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;In the late 1990&amp;#39;s, bandwidth and storage were much more scarce than they are now. It was in that environment that the &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://en.wikipedia.org/wiki/JBIG2&quot;&gt;JBIG2&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;standard emerged. JBIG2 is a domain specific image codec designed to compress images where pixels can only be black or white.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;It was developed to achieve extremely high compression ratios for scans of text documents and was implemented and used in high-end office scanner/printer devices like the XEROX WorkCenter device shown below. If you used the &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;scan to pdf&lt;/span&gt;&lt;span&gt;&amp;nbsp;functionality of a device like this a decade ago, your PDF likely had a JBIG2 stream in it.&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3gos8L_dEuVS2ltgPw-T3WxC6COMIyYoq4DlSN8Z8XgNueXzXBBlQF_BusBrKSJowwIu0OouJLMwZwPZyMiORoXCShUtbb65C3ZkKU9Tzo8ANc5862ImuSa9v1pjcjxR2v4T-UdpMYlV7DEsVgr43Mj3yAjHn_EXcxVxXFhxHqq1QXoEdP3S1JnRm/s700/image10.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3gos8L_dEuVS2ltgPw-T3WxC6COMIyYoq4DlSN8Z8XgNueXzXBBlQF_BusBrKSJowwIu0OouJLMwZwPZyMiORoXCShUtbb65C3ZkKU9Tzo8ANc5862ImuSa9v1pjcjxR2v4T-UdpMYlV7DEsVgr43Mj3yAjHn_EXcxVxXFhxHqq1QXoEdP3S1JnRm/s700/image10.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;A Xerox WorkCentre 7500 series multifunction printer, which used JBIG2&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c7&quot;&gt;for its scan-to-pdf functionality&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c7&quot;&gt;source: &lt;/span&gt;&lt;span class=&quot;c16 c7&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://www.office.xerox.com/en-us/multifunction-printers/workcentre-7545-7556/specifications&quot;&gt;https://www.office.xerox.com/en-us/multifunction-printers/workcentre-7545-7556/specifications&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;The PDFs files produced by those scanners were exceptionally small, perhaps only a few kilobytes. There are two novel techniques which JBIG2 uses to achieve these extreme compression ratios which are relevant to this exploit:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c8&quot;&gt;Technique&lt;/span&gt;&lt;span class=&quot;c8&quot;&gt;&amp;nbsp;1: &lt;/span&gt;&lt;span class=&quot;c14 c8&quot;&gt;Segmentation and substitution&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Effectively every text document, especially those written in languages with small alphabets like English or German, consists of many repeated letters (also known as &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;glyphs&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;) on each page. JBIG2 tries to segment each page into glyphs then uses simple pattern matching to match up glyphs which look the same:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c4&quot;&gt;&lt;/p&gt;
  
 &lt;p class=&quot;c4&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi2YXgDQeGK1E3GixB5S11rI1e7Xqi3cQJKuL4ZklPLYw8U1hbbEDXGOyCfcqqhoQT2evw5kHYC3Ba9RWx21XHknWvjxFKg5te5-K19ZYaoTR2wD4AmBw_c-9RXNUuonuD2TT21aTlvihuC_i_t3GgYFjw2pzL7YshGF7BZa4bq-i44V63NN6Pv7yzy/s352/image4%284%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi2YXgDQeGK1E3GixB5S11rI1e7Xqi3cQJKuL4ZklPLYw8U1hbbEDXGOyCfcqqhoQT2evw5kHYC3Ba9RWx21XHknWvjxFKg5te5-K19ZYaoTR2wD4AmBw_c-9RXNUuonuD2TT21aTlvihuC_i_t3GgYFjw2pzL7YshGF7BZa4bq-i44V63NN6Pv7yzy/s352/image4%284%29.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;Simple pattern matching can find all the shapes which look similar on a page,&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;in this case all the &amp;#39;e&amp;#39;s&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;JBIG2 doesn&amp;#39;t actually know anything about glyphs and it isn&amp;#39;t doing OCR (optical character recognition.) A JBIG encoder is just looking for connected regions of pixels and grouping similar looking regions together. The compression algorithm is to simply substitute all &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;sufficiently-similar&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;looking regions with a copy of just one of them:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c4&quot;&gt;&lt;/p&gt;
  
 &lt;p class=&quot;c4&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj2k3SPN7fikk3DnL-5YdWTK6_n1JTjvlb6qC-4tVnHeqU16cM6VWYjmMzNL9ZwMK0MXOhWITS_P0kgsx3YFHDaI2Rd5R8f1CM55ccmCBROIlyymNW2jSSCRWCpddWLuIzhGG6uB8PDKcDg5IpWW7NjdvVPZRFme3Hk4EHHmXZwEJYoohHgaVa31w0u/s327/image1%285%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj2k3SPN7fikk3DnL-5YdWTK6_n1JTjvlb6qC-4tVnHeqU16cM6VWYjmMzNL9ZwMK0MXOhWITS_P0kgsx3YFHDaI2Rd5R8f1CM55ccmCBROIlyymNW2jSSCRWCpddWLuIzhGG6uB8PDKcDg5IpWW7NjdvVPZRFme3Hk4EHHmXZwEJYoohHgaVa31w0u/s327/image1%285%29.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;Replacing all occurrences of similar glyphs with a copy of just one often yields a document which is still quite legible and enables very high compression ratios&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;In this case the output is perfectly readable but the amount of information to be stored is significantly reduced. Rather than needing to store all the original pixel information for the whole page you only need a compressed version of the &amp;quot;reference glyph&amp;quot; for each character and the relative coordinates of all the places where copies should be made. The decompression algorithm then treats the output page like a canvas and &amp;quot;draws&amp;quot; the exact same glyph at all the stored locations.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;There&amp;#39;s a significant issue with such a scheme: it&amp;#39;s far too easy for a poor encoder to accidentally swap similar looking characters, and this can happen with interesting consequences. &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;http://www.dkriesel.com/en/blog/2013/0802_xerox-workcentres_are_switching_written_numbers_when_scanning&quot;&gt;D. Kriesel&amp;#39;s blog has some motivating examples&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;where PDFs of scanned invoices have different figures or PDFs of scanned construction drawings end up with incorrect measurements. These aren&amp;#39;t the issues we&amp;#39;re looking at, but they are one significant reason why JBIG2 is not a common compression format anymore.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c8&quot;&gt;Technique &lt;/span&gt;&lt;span class=&quot;c8&quot;&gt;2: &lt;/span&gt;&lt;span class=&quot;c8&quot;&gt;Refinement coding&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;As mentioned above, the substitution based compression output is lossy. After a round of compression and decompression the rendered output doesn&amp;#39;t look exactly like the input. But JBIG2 also supports lossless compression as well as an intermediate &amp;quot;less lossy&amp;quot; compression mode.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;It does this by also storing (and compressing) the &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;between the substituted glyph and each original glyph. Here&amp;#39;s an example showing a difference mask between a substituted character on the left and the original lossless character in the middle:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c4&quot;&gt;&lt;/p&gt;
  
 &lt;p class=&quot;c4&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-7RiEuIp4vanQlf6nxJf1tfbuA7B61DISNjLlNxXrvSqFnqxcvSLPN6_60h2ypZdjDKHtNmCN3Nr5W66JaLw_j5iSxxntOZ0eXFB2wEQHfUjs_9LIwmckCXdTzurtKgpwyaWkGfInvM35YC3kp_K4qyJYxV4HDEf0E9W_Zqt3OelULvnfSlWAc2Kw/s267/image3%285%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-7RiEuIp4vanQlf6nxJf1tfbuA7B61DISNjLlNxXrvSqFnqxcvSLPN6_60h2ypZdjDKHtNmCN3Nr5W66JaLw_j5iSxxntOZ0eXFB2wEQHfUjs_9LIwmckCXdTzurtKgpwyaWkGfInvM35YC3kp_K4qyJYxV4HDEf0E9W_Zqt3OelULvnfSlWAc2Kw/s267/image3%285%29.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;Using the XOR operator on bitmaps to compute a difference image&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;In this simple example the encoder can store the difference mask shown on the right, then during decompression the difference mask can be XORed with the substituted character to recover the exact pixels making up the original character. There are some more tricks outside of the scope of this blog post to further compress that difference mask using the intermediate forms of the substituted character as a &amp;quot;context&amp;quot; for the compression.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Rather than completely encoding the entire difference in one go, it can be done in steps, with each iteration using a logical operator (one of AND, OR, XOR or XNOR) to set, clear or flip bits. Each successive refinement step brings the rendered output closer to the original and this allows a level of control over the &amp;quot;&lt;/span&gt;&lt;span&gt;lossiness&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;quot; of the compression. The implementation of these refinement coding steps is very flexible and they are also able to &amp;quot;read&amp;quot; values already present on the output canvas.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c14 c8&quot;&gt;A JBIG2 stream&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Most of the CoreGraphics PDF decoder appears to be Apple proprietary code, but the JBIG2 implementation is from Xpdf, &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://www.xpdfreader.com/download.html&quot;&gt;the source code for which is freely available&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;The JBIG2 format is a series of segments, which can be thought of as a series of drawing commands which are executed sequentially in a single pass. The CoreGraphics JBIG2 parser supports 19 different segment types which include operations like defining a new page, decoding a huffman table or rendering a bitmap to given coordinates on the page.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Segments are represented by the class &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Segment&lt;/span&gt;&lt;span&gt;&amp;nbsp;and its subclasses &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2SymbolDict&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;A &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;represents a rectangular array of pixels. Its &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;field points to a backing-buffer containing the rendering canvas.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;A &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2SymbolDict&lt;/span&gt;&lt;span&gt;&amp;nbsp;groups &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmaps&lt;/span&gt;&lt;span&gt;&amp;nbsp;together. The destination page is represented as a &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;, as are individual glyphs.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Segments&lt;/span&gt;&lt;span&gt;&amp;nbsp;can be referred to by a segment number and the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;vector type stores pointers to all the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Segments&lt;/span&gt;&lt;span&gt;. To look up a segment by segment number the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;is scanned sequentially.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c14 c8&quot;&gt;The vulnerability&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;The vulnerability is a classic integer overflow when collating referenced segments:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.7ed94ce0bf920398965583c15daf9916cc6dcfb3&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.0&quot;&gt;&lt;/a&gt;&lt;table class=&quot;c22&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;c11&quot;&gt;&lt;td class=&quot;c13&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c0 c18&quot;&gt;Guint numSyms; // (1)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; numSyms = 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; for (i = 0; i &amp;lt; nRefSegs; ++i) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; if ((seg = findSegment(refSegs[i]))) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (seg-&amp;gt;getType() == jbig2SegSymbolDict) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c0 c18&quot;&gt;numSyms += ((JBIG2SymbolDict *)seg)-&amp;gt;getSize(); &amp;nbsp;// (2)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; } else if (seg-&amp;gt;getType() == jbig2SegCodeTable) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; codeTables-&amp;gt;append(seg);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; error(errSyntaxError, getPos(),&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Invalid segment reference in JBIG2 text region&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; delete codeTables;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; // get the symbol bitmaps&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c6 c18&quot;&gt;syms = (&lt;/span&gt;&lt;span class=&quot;c6 c18&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class=&quot;c6 c18&quot;&gt;&amp;nbsp;**)gmallocn(numSyms, sizeof(&lt;/span&gt;&lt;span class=&quot;c6 c18&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class=&quot;c0 c18&quot;&gt;&amp;nbsp;*)); // (3)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; kk = 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; for (i = 0; i &amp;lt; nRefSegs; ++i) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; if ((seg = findSegment(refSegs[i]))) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (seg-&amp;gt;getType() == jbig2SegSymbolDict) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; symbolDict = (JBIG2SymbolDict *)seg;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for (k = 0; k &amp;lt; symbolDict-&amp;gt;getSize(); ++k) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c0 c18&quot;&gt;syms[kk++] = symbolDict-&amp;gt;getBitmap(k); // (4)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c0&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c21&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c6&quot;&gt;numSyms&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a 32-bit integer declared at &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;(1)&lt;/span&gt;&lt;span&gt;. By supplying carefully crafted &lt;/span&gt;&lt;span&gt;reference segments&lt;/span&gt;&lt;span&gt;&amp;nbsp;it&amp;#39;s possible for the repeated addition at &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;(2)&lt;/span&gt;&lt;span&gt;&amp;nbsp;to cause &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;numSyms&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;to overflow to a controlled, small value.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;That smaller value is used for the heap allocation size at &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;(3)&lt;/span&gt;&lt;span&gt;&amp;nbsp;meaning &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;points to an undersized buffer.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Inside the inner-most loop at &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;(4)&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointer values are written into the undersized &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;buffer.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Without another trick this loop would write over 32GB of data into the undersized &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;syms&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer, certainly causing a crash. To avoid that crash the heap is groomed such that the first few writes off of the end of the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;syms&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer corrupt the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;backing buffer. This &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;stores all known segments and is used by the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;findSegments&lt;/span&gt;&lt;span&gt;&amp;nbsp;routine to map from the segment numbers passed in &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;refSegs&lt;/span&gt;&lt;span&gt;&amp;nbsp;to &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Segment&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointers. The overflow causes the JBIG2Segment pointers in the GList to be overwritten with &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointers at &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;(4)&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Conveniently since &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;inherits from &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Segment&lt;/span&gt;&lt;span&gt;&amp;nbsp;the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;seg-&amp;gt;getType()&lt;/span&gt;&lt;span&gt;&amp;nbsp;virtual call succeed even on devices where Pointer Authentication is enabled (which is used to perform a weak type check on virtual calls) but the returned type will now &lt;/span&gt;&lt;span class=&quot;c8&quot;&gt;not&lt;/span&gt;&lt;span&gt;&amp;nbsp;be equal to &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;jbig2SegSymbolDict&lt;/span&gt;&lt;span&gt;&amp;nbsp;thus causing further writes at &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;(4)&lt;/span&gt;&lt;span&gt;&amp;nbsp;to not be reached and bounding the extent of the memory corruption&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c4&quot;&gt;&lt;/p&gt;
  
  
 &lt;p class=&quot;c4&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9fFsg7COjTu5Aq2rV9CTyka-eczC_BvD3wrGUP3XL5W9RHoGOKElzDMbDWLrgp1BJfRvEjcw36ZdMgbA2iwnjj0jqDKGBS94UL2tdcH0evSr66V5uGUrhra3PlGyKvCznPT2rSUL3ZegDR-FXRbKw6SJFzNrgubTbAzKXKVrga6h-B3VcHFqOU9zx/s506/image6%282%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9fFsg7COjTu5Aq2rV9CTyka-eczC_BvD3wrGUP3XL5W9RHoGOKElzDMbDWLrgp1BJfRvEjcw36ZdMgbA2iwnjj0jqDKGBS94UL2tdcH0evSr66V5uGUrhra3PlGyKvCznPT2rSUL3ZegDR-FXRbKw6SJFzNrgubTbAzKXKVrga6h-B3VcHFqOU9zx/s506/image6%282%29.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;A simplified view of the memory layout when the heap overflow occurs showing the undersized-buffer below the GList backing buffer and the JBIG2Bitmap&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c8 c14&quot;&gt;Boundless unbounding&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;Directly after the corrupted segments &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;GList&lt;/span&gt;&lt;span&gt;, the attacker grooms the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;object which represents the current page (the place to where current drawing commands render). &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmaps&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;are simple wrappers around a backing buffer, storing the buffer&amp;rsquo;s width and height (in bits) as well as a line value which defines how many bytes are stored for each line.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c4&quot;&gt;&lt;/p&gt;
  
 &lt;p class=&quot;c4&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0hdaagzsqy4Esf9vjf9KS6euQUhDYTUMu9xDO8q4nxUCbVjpLmxBCJkixLWpg8YETgQNC-2DYLlPss0Eo46knC-qDRI0dLEcOHPvjbwGfaF_E_7EimexamWDy68_id27V2y9k0J2moeJg94okQoOtrMyejAg7bYepIgtdcgNH7NRz7Ne-mWeWs1QA/s1070/image7%282%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0hdaagzsqy4Esf9vjf9KS6euQUhDYTUMu9xDO8q4nxUCbVjpLmxBCJkixLWpg8YETgQNC-2DYLlPss0Eo46knC-qDRI0dLEcOHPvjbwGfaF_E_7EimexamWDy68_id27V2y9k0J2moeJg94okQoOtrMyejAg7bYepIgtdcgNH7NRz7Ne-mWeWs1QA/s1070/image7%282%29.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;The memory layout of the JBIG2Bitmap object showing the segnum, w, h and line fields which are corrupted during the overflow&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;By carefully structuring &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;refSegs&lt;/span&gt;&lt;span&gt;&amp;nbsp;they can stop the overflow after writing exactly three more &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointers after the end of the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;segments&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;GList&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer. This overwrites the vtable pointer and the first four fields of the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;representing the current page.&lt;/span&gt;&lt;span&gt;&amp;nbsp;Due to the nature of the iOS address space layout these pointers are very likely to be in the second 4GB of virtual memory, with addresses between &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;0x100000000&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;0x1ffffffff&lt;/span&gt;&lt;span&gt;. Since all iOS hardware is little endian (meaning that the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;w&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;line&lt;/span&gt;&lt;span&gt;&amp;nbsp;fields are likely to be overwritten with &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;0x1&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;mdash; &lt;/span&gt;&lt;span&gt;the most-significant half of a &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;pointer) and the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;segNum&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;h&lt;/span&gt;&lt;span&gt;&amp;nbsp;fields are likely to be overwritten with the least-significant half of such a pointer, a fairly random value depending on heap layout and ASLR somewhere between &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;0x100000&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;This gives the current destination page &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;an unknown, but very large, value for &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;h&lt;/span&gt;&lt;span&gt;. Since that &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;h&lt;/span&gt;&lt;span&gt;&amp;nbsp;value is used for bounds checking and is supposed to reflect the allocated size of the page backing buffer, this has the effect of &amp;quot;unbounding&amp;quot; the drawing canvas. This means that subsequent &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;segment commands can read and write memory outside of the original bounds of the page backing buffer.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;The heap groom also places the current page&amp;#39;s backing buffer just below the undersized &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;syms&lt;/span&gt;&lt;span&gt;&amp;nbsp;buffer, such that when the page &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;is unbounded, it&amp;#39;s able to &lt;/span&gt;&lt;span&gt;read and write&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;its own fields:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c4&quot;&gt;&lt;hr style=&quot;page-break-before:always;display:none;&quot;&gt;&lt;/p&gt;

 &lt;p class=&quot;c4&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEidgMVssjmRf7_LhtPKH-MCSJdXOZk5t6EAm-FLazQh5ssP2ksV4kIlzxSIOGz5Elrm8ROuBz92K4-Jthwu4WYa8vN61EgdpB5dbtuCULDRFhqK1TkPOE8xl63p9MAIgf1dNwYKgkYMwlgoNEFcvdDmXy6GdlcRQ5ESrN8d3bAYIEse7dGPQc3cbo8h/s550/image5%282%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEidgMVssjmRf7_LhtPKH-MCSJdXOZk5t6EAm-FLazQh5ssP2ksV4kIlzxSIOGz5Elrm8ROuBz92K4-Jthwu4WYa8vN61EgdpB5dbtuCULDRFhqK1TkPOE8xl63p9MAIgf1dNwYKgkYMwlgoNEFcvdDmXy6GdlcRQ5ESrN8d3bAYIEse7dGPQc3cbo8h/s550/image5%282%29.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;The memory layout showing how the unbounded bitmap backing buffer is able to reference the JBIG2Bitmap object and modify fields in it as it is located after the backing buffer in memory&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;By rendering 4-byte bitmaps at the correct canvas coordinates they can write to all the fields of the page &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span&gt;&amp;nbsp;and b&lt;/span&gt;&lt;span&gt;y carefully choosing new values for &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;w&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;h&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;line&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;they can write to arbitrary offsets from the page backing buffer.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;At this point it would also be possible to write to arbitrary absolute memory addresses if you knew their offsets from the page backing buffer. But how to compute those offsets? Thus far, this exploit has proceeded in a manner very similar to a &amp;quot;canonical&amp;quot; scripting language exploit which in Javascript might end up with an unbounded ArrayBuffer object with access to memory. But in those cases the attacker has the ability to run arbitrary Javascript which can obviously be used to compute offsets and perform arbitrary computations. How do you do that in a single-pass image parser?&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c14 c8&quot;&gt;My other compression format is turing-complete!&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c14 c8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;As mentioned earlier, the sequence of steps which implement JBIG2 refinement are very flexible. Refinement steps can reference both the output bitmap and any previously created segments, as well as render output to either the current page or a segment. By carefully crafting the context-dependent part of the refinement decompression, it&amp;#39;s possible to craft sequences of segments where only the refinement combination operators have any effect.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;In practice this means it is possible to apply the AND, OR, XOR and XNOR logical operators between memory regions at arbitrary offsets from the current page&amp;#39;s &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;JBIG2Bitmap&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;backing buffer. And since that has been unbounded&amp;hellip; it&amp;#39;s possible to perform those logical operations on memory at arbitrary out-of-bounds offsets:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c4&quot;&gt;&lt;/p&gt;
 &lt;p class=&quot;c4&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjFkcS4JjzhV7pzJ5kVEmFj7WLW5Zzdc0JkYDaQBhVYIDayiYOksOID0LFOFGr9qQA44qwe3LRN9KNqOelKIflmcTDnR3k6qrtfvJ4wsoTDyuM59nmE6DGM_n_wOUMNY8HoLybtywIMq2-VdeFVwHHc9aDe0tkExa4hfvXKJ6o_m2QYT2LXp4NGDNJI/s551/image9%281%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjFkcS4JjzhV7pzJ5kVEmFj7WLW5Zzdc0JkYDaQBhVYIDayiYOksOID0LFOFGr9qQA44qwe3LRN9KNqOelKIflmcTDnR3k6qrtfvJ4wsoTDyuM59nmE6DGM_n_wOUMNY8HoLybtywIMq2-VdeFVwHHc9aDe0tkExa4hfvXKJ6o_m2QYT2LXp4NGDNJI/s551/image9%281%29.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;The memory layout showing how logical operators can be applied out-of-bounds&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;It&amp;#39;s when you take this to its most extreme form that things start to get really interesting. What if rather than operating on glyph-sized sub-rectangles you instead operated on single bits?&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c8&quot;&gt;You can now provide as input a sequence of JBIG2 segment commands which implement a sequence of logical bit operations to apply to the page. And since the page buffer has been unbounded those bit operations can operate on arbitrary memory.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;With a bit of back-of-the-envelope scribbling you can convince yourself that with just the available AND, OR, XOR and XNOR logical&lt;/span&gt;&lt;span&gt;&amp;nbsp;operators&lt;/span&gt;&lt;span&gt;&amp;nbsp;you can in fact compute &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;nbsp;computable function - the simplest proof being that you can create a logical NOT operator by XORing with 1 and then putting an AND gate in front of that to form a NAND gate:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c4&quot;&gt;&lt;/p&gt;

 &lt;p class=&quot;c4&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjBpKF2iKJhndHIFtGm9xUBVjpXOM4GYcwSdNyfuUvwI-883zmbnhi_Ch6CR4XEaA6D2uaGkU3g8rNocZS_ZlWXD8rTSRGTgYact6ar43k8ywMZG6hnjDz8Yr3pC3Fh4W3dggIA_XriPw1Vc6myG-18TPe8Ffj_NGuywLqz4tpdlrbMAso-CBZcM_4X/s265/image8%282%29.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjBpKF2iKJhndHIFtGm9xUBVjpXOM4GYcwSdNyfuUvwI-883zmbnhi_Ch6CR4XEaA6D2uaGkU3g8rNocZS_ZlWXD8rTSRGTgYact6ar43k8ywMZG6hnjDz8Yr3pC3Fh4W3dggIA_XriPw1Vc6myG-18TPe8Ffj_NGuywLqz4tpdlrbMAso-CBZcM_4X/s265/image8%282%29.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c12&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;An AND gate connected to one input of an XOR gate. The other XOR gate input is connected to the constant value 1 creating an NAND.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c9 c7&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;A NAND gate is an example of a universal logic gate; one from which all other gates can be built and from which a circuit can be &lt;/span&gt;&lt;span class=&quot;c16&quot;&gt;&lt;a class=&quot;c21&quot; href=&quot;https://www.nand2tetris.org/&quot;&gt;built to compute any computable function&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c5&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c14 c8&quot;&gt;Practical circuits&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;JBIG2 doesn&amp;#39;t have scripting capabilities, but when combined with a vulnerability, it does have the ability to emulate circuits of arbitrary logic gates operating on arbitrary memory. So why not just use that to build your &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;own&lt;/span&gt;&lt;span&gt;&amp;nbsp;computer architecture and script that!? That&amp;#39;s exactly what this exploit does. Using over 70,000 segment commands defining logical bit operations, they define a small computer architecture with features such as registers and a full 64-bit adder and comparator which they use to search memory and perform arithmetic operations. It&amp;#39;s not as fast as Javascript, but it&amp;#39;s fundamentally computationally equivalent&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span class=&quot;c5&quot;&gt;The bootstrapping operations for the sandbox escape exploit are written to run on this logic circuit and the whole thing runs in this weird, emulated environment created out of a single decompression pass through a JBIG2 stream. It&amp;#39;s pretty incredible, and at the same time, pretty terrifying.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3 c10&quot;&gt;&lt;span class=&quot;c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c3&quot;&gt;&lt;span&gt;In a future post (currently being finished),&lt;/span&gt;&lt;span&gt;&amp;nbsp;we&amp;#39;ll take a look at exactly how they escape the &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;IMTranscoderAgent&lt;/span&gt;&lt;span&gt;&amp;nbsp;sandbox.&lt;/span&gt;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='https://googleprojectzero.blogspot.com/feeds/5073082417618502919/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/5073082417618502919'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/5073082417618502919'/><link rel='alternate' type='text/html' href='https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html' title='A deep dive into an NSO zero-click iMessage exploit: Remote Code Execution'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvP0VlEQXC6TZWOu-zPOWC-Pnyy3uqOJpwPeP3Y_rz-ZO_MvrqjiMtMwxzIz_E8NdNyrV_Fvx-RRApoMxAPrYQcHO4eiico20He9zMm3UT5-j84CCRZDJq5hjMmeIKd0aLMsflCkfrfVHp1z1PbQmYPFX6UlVtn6_gF8P6iTQaAHL3EQ6iKs4VDdEZ/s72-c/image2%281%29.jpg" height="72" width="72"/><thr:total>0</thr:total></entry>