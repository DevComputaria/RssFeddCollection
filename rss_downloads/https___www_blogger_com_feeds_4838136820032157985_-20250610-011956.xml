<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-4838136820032157985.post-3562308922263769538</id><published>2023-01-12T08:59:00.000-08:00</published><updated>2023-01-12T08:59:29.903-08:00</updated><title type='text'>DER Entitlements: The (Brief) Return of the Psychic Paper</title><content type='html'>&lt;style type=&quot;text/css&quot;&gt;@import url(&#39;https://themes.googleusercontent.com/fonts/css?kit=pYEwJuzr3ZMDX2Y1syVbvx06if6osnyAslCuLPPf50A&#39;);ul.lst-kix_h97ui6n3g8c8-4{list-style-type:none}ul.lst-kix_h97ui6n3g8c8-5{list-style-type:none}ul.lst-kix_h97ui6n3g8c8-2{list-style-type:none}ul.lst-kix_h97ui6n3g8c8-3{list-style-type:none}ul.lst-kix_h97ui6n3g8c8-8{list-style-type:none}ul.lst-kix_h97ui6n3g8c8-6{list-style-type:none}.lst-kix_o4b5kflpgafe-7&gt;li:before{content:&quot;-  &quot;}ul.lst-kix_h97ui6n3g8c8-7{list-style-type:none}ul.lst-kix_5nbkgo2blvl3-0{list-style-type:none}ul.lst-kix_5nbkgo2blvl3-1{list-style-type:none}ul.lst-kix_h97ui6n3g8c8-0{list-style-type:none}ul.lst-kix_5nbkgo2blvl3-4{list-style-type:none}.lst-kix_o4b5kflpgafe-8&gt;li:before{content:&quot;-  &quot;}ul.lst-kix_h97ui6n3g8c8-1{list-style-type:none}ul.lst-kix_5nbkgo2blvl3-5{list-style-type:none}ul.lst-kix_5nbkgo2blvl3-2{list-style-type:none}ul.lst-kix_5nbkgo2blvl3-3{list-style-type:none}.lst-kix_c2aw6txn2xw5-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_5nbkgo2blvl3-8{list-style-type:none}ul.lst-kix_5nbkgo2blvl3-6{list-style-type:none}ul.lst-kix_5nbkgo2blvl3-7{list-style-type:none}.lst-kix_c2aw6txn2xw5-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_c2aw6txn2xw5-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_c2aw6txn2xw5-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_n26z3gtxgors-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_c2aw6txn2xw5-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_n26z3gtxgors-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_c2aw6txn2xw5-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_o4b5kflpgafe-0&gt;li:before{content:&quot;-  &quot;}.lst-kix_c2aw6txn2xw5-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_o4b5kflpgafe-1&gt;li:before{content:&quot;-  &quot;}.lst-kix_n26z3gtxgors-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_o4b5kflpgafe-2&gt;li:before{content:&quot;-  &quot;}.lst-kix_n26z3gtxgors-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_n26z3gtxgors-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_o4b5kflpgafe-3&gt;li:before{content:&quot;-  &quot;}.lst-kix_n26z3gtxgors-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_o4b5kflpgafe-6&gt;li:before{content:&quot;-  &quot;}.lst-kix_pb72mncojys1-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_c2aw6txn2xw5-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_pb72mncojys1-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_o4b5kflpgafe-4&gt;li:before{content:&quot;-  &quot;}.lst-kix_c2aw6txn2xw5-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_o4b5kflpgafe-5&gt;li:before{content:&quot;-  &quot;}.lst-kix_n26z3gtxgors-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_pb72mncojys1-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_pb72mncojys1-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_pb72mncojys1-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_pb72mncojys1-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_pb72mncojys1-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_pb72mncojys1-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_pb72mncojys1-0&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_n26z3gtxgors-5{list-style-type:none}.lst-kix_mk2jd2ji027g-8&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_n26z3gtxgors-4{list-style-type:none}ul.lst-kix_n26z3gtxgors-7{list-style-type:none}ul.lst-kix_n26z3gtxgors-6{list-style-type:none}ul.lst-kix_n26z3gtxgors-1{list-style-type:none}ul.lst-kix_n26z3gtxgors-0{list-style-type:none}ul.lst-kix_n26z3gtxgors-3{list-style-type:none}.lst-kix_mk2jd2ji027g-7&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_n26z3gtxgors-2{list-style-type:none}.lst-kix_mk2jd2ji027g-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_mk2jd2ji027g-6&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_mk2jd2ji027g-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_n26z3gtxgors-8{list-style-type:none}.lst-kix_h97ui6n3g8c8-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_h97ui6n3g8c8-7&gt;li:before{content:&quot;\0025cb  &quot;}ul.lst-kix_o4b5kflpgafe-4{list-style-type:none}ul.lst-kix_o4b5kflpgafe-3{list-style-type:none}ul.lst-kix_o4b5kflpgafe-2{list-style-type:none}.lst-kix_h97ui6n3g8c8-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_h97ui6n3g8c8-6&gt;li:before{content:&quot;\0025cf  &quot;}ul.lst-kix_o4b5kflpgafe-1{list-style-type:none}ul.lst-kix_o4b5kflpgafe-8{list-style-type:none}ul.lst-kix_o4b5kflpgafe-7{list-style-type:none}ul.lst-kix_o4b5kflpgafe-6{list-style-type:none}.lst-kix_h97ui6n3g8c8-5&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_o4b5kflpgafe-5{list-style-type:none}.lst-kix_mk2jd2ji027g-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_h97ui6n3g8c8-0&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_h97ui6n3g8c8-2&gt;li:before{content:&quot;\0025a0  &quot;}ul.lst-kix_o4b5kflpgafe-0{list-style-type:none}.lst-kix_mk2jd2ji027g-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_h97ui6n3g8c8-3&gt;li:before{content:&quot;\0025cf  &quot;}.lst-kix_mk2jd2ji027g-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_mk2jd2ji027g-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_h97ui6n3g8c8-1&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_5nbkgo2blvl3-5&gt;li:before{content:&quot;-  &quot;}ul.lst-kix_pb72mncojys1-5{list-style-type:none}ul.lst-kix_pb72mncojys1-4{list-style-type:none}.lst-kix_5nbkgo2blvl3-6&gt;li:before{content:&quot;-  &quot;}.lst-kix_5nbkgo2blvl3-7&gt;li:before{content:&quot;-  &quot;}ul.lst-kix_pb72mncojys1-3{list-style-type:none}ul.lst-kix_pb72mncojys1-2{list-style-type:none}ul.lst-kix_pb72mncojys1-8{list-style-type:none}.lst-kix_5nbkgo2blvl3-8&gt;li:before{content:&quot;-  &quot;}ul.lst-kix_pb72mncojys1-7{list-style-type:none}ul.lst-kix_pb72mncojys1-6{list-style-type:none}ul.lst-kix_pb72mncojys1-1{list-style-type:none}ul.lst-kix_pb72mncojys1-0{list-style-type:none}ul.lst-kix_mk2jd2ji027g-3{list-style-type:none}ul.lst-kix_c2aw6txn2xw5-2{list-style-type:none}ul.lst-kix_mk2jd2ji027g-2{list-style-type:none}ul.lst-kix_c2aw6txn2xw5-3{list-style-type:none}ul.lst-kix_mk2jd2ji027g-1{list-style-type:none}ul.lst-kix_c2aw6txn2xw5-0{list-style-type:none}ul.lst-kix_mk2jd2ji027g-0{list-style-type:none}ul.lst-kix_c2aw6txn2xw5-1{list-style-type:none}ul.lst-kix_mk2jd2ji027g-7{list-style-type:none}ul.lst-kix_mk2jd2ji027g-6{list-style-type:none}ul.lst-kix_mk2jd2ji027g-5{list-style-type:none}ul.lst-kix_mk2jd2ji027g-4{list-style-type:none}ul.lst-kix_mk2jd2ji027g-8{list-style-type:none}.lst-kix_5nbkgo2blvl3-4&gt;li:before{content:&quot;-  &quot;}.lst-kix_5nbkgo2blvl3-2&gt;li:before{content:&quot;-  &quot;}.lst-kix_5nbkgo2blvl3-3&gt;li:before{content:&quot;-  &quot;}.lst-kix_n26z3gtxgors-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_5nbkgo2blvl3-1&gt;li:before{content:&quot;-  &quot;}.lst-kix_n26z3gtxgors-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_5nbkgo2blvl3-0&gt;li:before{content:&quot;-  &quot;}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}ul.lst-kix_c2aw6txn2xw5-6{list-style-type:none}ul.lst-kix_c2aw6txn2xw5-7{list-style-type:none}ul.lst-kix_c2aw6txn2xw5-4{list-style-type:none}ul.lst-kix_c2aw6txn2xw5-5{list-style-type:none}ul.lst-kix_c2aw6txn2xw5-8{list-style-type:none}ol{margin:0;padding:0}table td,table th{padding:0}.wUhACgDjbS-c33{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#e0e0e0;border-top-width:1pt;border-right-width:1pt;border-left-color:#e0e0e0;vertical-align:top;border-right-color:#e0e0e0;border-left-width:1pt;border-top-style:solid;background-color:#fafafa;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#e0e0e0;border-bottom-style:solid}.wUhACgDjbS-c36{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#e0e0e0;border-top-width:1pt;border-right-width:1pt;border-left-color:#e0e0e0;vertical-align:top;border-right-color:#e0e0e0;border-left-width:1pt;border-top-style:solid;background-color:#fafafa;border-left-style:solid;border-bottom-width:1pt;width:471pt;border-top-color:#e0e0e0;border-bottom-style:solid}.wUhACgDjbS-c9{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.wUhACgDjbS-c6{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:&quot;Arial&quot;;font-style:normal}.wUhACgDjbS-c20{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:center}.wUhACgDjbS-c1{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.wUhACgDjbS-c7{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left;height:11pt}.wUhACgDjbS-c10{padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-align:left}.wUhACgDjbS-c0{font-size:10pt;font-family:Consolas,&quot;Courier New&quot;;color:#616161;font-weight:400}.wUhACgDjbS-c3{font-size:10pt;font-family:Consolas,&quot;Courier New&quot;;color:#0f9d58;font-weight:400}.wUhACgDjbS-c16{border-spacing:0;border-collapse:collapse;margin-right:auto}.wUhACgDjbS-c35{margin-left:-3pt;border-spacing:0;border-collapse:collapse;margin-right:auto}.wUhACgDjbS-c15{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.wUhACgDjbS-c11{color:#000000;text-decoration:none;vertical-align:baseline;font-style:normal}.wUhACgDjbS-c31{font-weight:400;text-decoration:none;vertical-align:baseline;font-family:&quot;Arial&quot;}.wUhACgDjbS-c26{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.wUhACgDjbS-c32{font-size:10pt;font-family:&quot;Roboto&quot;;font-weight:400}.wUhACgDjbS-c21{font-weight:400;font-size:16pt;font-family:&quot;Arial&quot;}.wUhACgDjbS-c22{text-decoration:none;vertical-align:baseline;font-style:normal}.wUhACgDjbS-c5{font-size:10pt;font-family:Consolas,&quot;Courier New&quot;;font-weight:400}.wUhACgDjbS-c25{padding:0;margin:0}.wUhACgDjbS-c23{font-weight:400;font-family:Consolas,&quot;Courier New&quot;}.wUhACgDjbS-c34{font-weight:700;font-family:&quot;Arial&quot;}.wUhACgDjbS-c18{color:inherit;text-decoration:inherit}.wUhACgDjbS-c4{font-weight:400;font-family:&quot;Courier New&quot;}.wUhACgDjbS-c19{margin-left:36pt;padding-left:0pt}.wUhACgDjbS-c2{margin-left:36pt;height:11pt}.wUhACgDjbS-c12{height:11pt}.wUhACgDjbS-c24{color:#c53929}.wUhACgDjbS-c8{color:#3367d6}.wUhACgDjbS-c28{color:#455a64}.wUhACgDjbS-c13{color:#000000}.wUhACgDjbS-c17{color:#9c27b0}.wUhACgDjbS-c29{font-style:italic}.wUhACgDjbS-c30{font-size:11pt}.wUhACgDjbS-c14{height:0pt}.wUhACgDjbS-c27{color:#990000}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}p{margin:0;color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;c26 doc-content&quot;&gt;&lt;div&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Posted by &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;Ivan Fratric, Project Zero&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c13 wUhACgDjbS-c29 wUhACgDjbS-c30 wUhACgDjbS-c31&quot;&gt;Note: The vulnerability discussed here, CVE-2022-42855, was fixed in iOS 15.7.2 and macOS Monterey 12.6.2. While the vulnerability did not appear to be exploitable on iOS 16 and macOS Ventura, iOS 16.2 and macOS Ventura 13.1 nevertheless shipped hardening changes related to it.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Last year, I spent a lot of time researching the security of applications built on top of &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://en.wikipedia.org/wiki/XMPP&quot;&gt;XMPP&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, an instant messaging protocol based on XML. More specifically, my research focused on how subtle quirks in XML parsing can be used to undermine the security of such applications. (If you are interested in learning more about that research, I did a talk on it at Black Hat USA 2022. The slides and the recording can be found &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://www.blackhat.com/us-22/briefings/schedule/index.html#xmpp-stanza-smuggling-or-how-i-hacked-zoom-26618&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://www.youtube.com/watch?v=ERaRNsvCBrw&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;At some point, when a part of my research was published, people pointed out other examples (unrelated to XMPP) where quirks in XML parsing led to security vulnerabilities. One of those examples was a vulnerability dubbed &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://blog.siguza.net/psychicpaper/&quot;&gt;Psychic Paper&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, a really neat vulnerability in the way Apple operating system checks what &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c29&quot;&gt;entitlements&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;an application has.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Entitlements are one of the core security concepts of Apple&amp;rsquo;s operating systems. As &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://developer.apple.com/documentation/bundleresources/entitlements?language=objc&quot;&gt;Apple&amp;rsquo;s documentation&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;explains, &amp;ldquo;An entitlement is a right or privilege that grants an executable particular capabilities.&amp;rdquo; For example, an application on an Apple operating system can&amp;rsquo;t debug another application without possessing proper entitlements, even if those two applications run as the same user. Even applications running as root can&amp;rsquo;t perform all actions (such as accessing some of the kernel APIs) without appropriate entitlements.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Psychic Paper was a vulnerability in the way entitlements were checked. Entitlements were stored inside the application&amp;rsquo;s signature blob in the XML format, so naturally the operating system needed to parse those at some point using an XML parser. The problem was that the OS didn&amp;rsquo;t have a single parser for this, but rather a staggering four parsers that were used in different places in the operating system. One parser was used for the initial check that the application only has permitted entitlements, and a different parser was later used when checking whether the application has an entitlement to perform a specific action&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;When giving my talk on XMPP, I gave a challenge to the audience: Find me two different XML parsers that always, for every input, result in the same output. The reason why that is difficult is because XML, although intended to be a simple format, in reality is anything but simple. So it shouldn&amp;rsquo;t come as a surprise that a way was found for one of Apple&amp;#39;s XML parsers to return one set of entitlements and another parser to see a different set of entitlements when parsing the same entitlements blob.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;The fix for the Psychic Paper bug: originally, the problem occurred because Apple had four XML parsers in the OS, so, surprisingly, the fix was to add a fifth one.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;So, after my XMPP research, when I learned about the Psychic Paper bug, I decided to take a look at these XML parsers and see if I can somehow find another way to trigger the bug even after the fix. After playing with various Apple XML parsers, I had an XML snippet I wanted to try out. However when I actually tried to use it in an application, I discovered that the system for checking entitlements behaved completely differently than I thought. This was because of&amp;hellip;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;wUhACgDjbS-c9&quot; id=&quot;h.143u383vs24&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c21&quot;&gt;DER Entitlements&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;According to &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://developer.apple.com/documentation/xcode/using-the-latest-code-signature-format&quot;&gt;Apple developer documentation&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, &amp;ldquo;Starting in iOS 15, iPadOS 15, tvOS 15, and watchOS 8, the system checks for a new, more secure signature format that uses Distinguished Encoding Rules, or DER, to embed entitlements into your app&amp;rsquo;s signature&amp;rdquo;. As &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://developer.apple.com/documentation/technotes/tn3125-inside-code-signing-provisioning-profiles#The-future-is-DER&quot;&gt;another Apple article&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;boldly proclaims, &amp;ldquo;The future is DER&amp;rdquo;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;So, what is DER?&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Unlike the previous text-based XML format, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://en.wikipedia.org/wiki/X.690#DER_encoding&quot;&gt;DER&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is a binary format, also commonly used in digital certificates. The format is specified in the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf&quot;&gt;X.690 standard&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;DER follows relatively simple type-length-data encoding rules. An image from the specification illustrates that:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh_ctQx4QBRr-XKiIsWHuUO3d6r1cbG935MHyu2EXDNwm1tWeaGC1A5yniZErHOJ8qqwg185tDe6tU4u8ObWuPf-0CnLI9Pk5QhdQBOKcK6YAzqg30Xz1cuDtkcX9ryZ70vGbk3JKVwwkB0ozGkW6jqEIl-Q7jpeQZTM0PXmGtbsB7g1ApOut3xBwOX/s599/image2.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh_ctQx4QBRr-XKiIsWHuUO3d6r1cbG935MHyu2EXDNwm1tWeaGC1A5yniZErHOJ8qqwg185tDe6tU4u8ObWuPf-0CnLI9Pk5QhdQBOKcK6YAzqg30Xz1cuDtkcX9ryZ70vGbk3JKVwwkB0ozGkW6jqEIl-Q7jpeQZTM0PXmGtbsB7g1ApOut3xBwOX/s599/image2.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot;title=&quot;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;The Identifier field encodes the object type, which can be a primitive (e.g. a string or a boolean), but also a &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c29&quot;&gt;constructed&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;type (an object containing other objects, e.g. an array/sequence). The length field encodes the number of bytes in the content. Length can be encoded differently, depending on the length of content (e.g. if content is smaller than 128 bytes, then the length field only takes a single byte). Length field is followed by the content itself. In case of constructed types, the content is also encoded using the same encoding rules.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;An &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://developer.apple.com/documentation/technotes/tn3125-inside-code-signing-provisioning-profiles#The-future-is-DER&quot;&gt;example from Apple developer documentation&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;shows what DER-encoded entitlements might look like:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.b0d92d5a95e353be337a6acc5beb2363c4a55559&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.0&quot;&gt;&lt;/a&gt;&lt;table class=&quot;wUhACgDjbS-c16&quot;&gt;&lt;tr class=&quot;wUhACgDjbS-c14&quot;&gt;&lt;td class=&quot;wUhACgDjbS-c33&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;appl &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c24&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp;INTEGER &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c24&quot;&gt;01&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp;cont &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c24&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&amp;nbsp; SEQUENCE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp; &amp;nbsp;UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;identifier&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp; &amp;nbsp;UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;SKMME9E2Y8&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;samplecode&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;ProfileExplainer&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&amp;nbsp; SEQUENCE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp; &amp;nbsp;UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;identifier&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp; &amp;nbsp;UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;SKMME9E2Y8&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&amp;nbsp; SEQUENCE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp; &amp;nbsp;UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;allow&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp; &amp;nbsp;BOOLEAN &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c24&quot;&gt;255&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&amp;nbsp; SEQUENCE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp; &amp;nbsp;UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;keychain&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;groups&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp;SEQUENCE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp; &amp;nbsp; UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;SKMME9E2Y8&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.*&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;&amp;nbsp; &amp;nbsp; UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c13&quot;&gt;token&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Each individual entitlement is a sequence which has two elements: a key and a value, e.g. &amp;ldquo;get-task-allow&amp;rdquo;:boolean(true). All entitlements are also a part of a constructed type (denoted as &amp;ldquo;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;cont [ 16 ]&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;rdquo; in the listing).&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;DER is meant to have unique binary representation and replacing XML with DER was very likely motivated, at least in part, by preventing issues such as Psychic Paper. But does it necessarily succeed in that goal?&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;wUhACgDjbS-c9&quot; id=&quot;h.xx7qiyjgj2wn&quot;&gt;&lt;span&gt;How entitlements are checked&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;To understand how entitlements are checked, it is useful to also look at the bigger picture and understand what security/integrity checks Apple operating systems perform on binaries before (and in some cases, while) running them.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Integrity information in Apple binaries is stored in a structure called the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://github.com/apple-oss-distributions/Security/blob/e4ea024c9bbd3bfda30ec6df270bfb4c7438d1a9/OSX/libsecurity_codesigning/lib/sigblob.h#L43&quot;&gt;Embedded Signature Blob&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;. This structure is a container for various other structures that play a role in integrity checking: The digital signature itself, but also entitlements and an important structure called the Code Directory. The Code Directory contains a hash of every page in the binary (up to the Signature Blob), but also other information, including the hash of the entitlements blob. The hash of the CodeDirectory is called cdHash and it is used to uniquely identify the binary. For example, it is cdHash that the digital signature actually signs. Since Code Directory contains a hash of the entitlements blob, note that any change to entitlements will lead to cdHash being different.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;As also noted in the Psychic Paper writeup, there are several ways a binary might be signed:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_o4b5kflpgafe-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;The cdHash of the binary could be in the system&amp;rsquo;s Trust Cache, which stores the hashes of system binaries.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;The binary could be signed by the Apple App Store.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;The binary could be signed by the developer, but in that case it must reference a &amp;ldquo;Provisioning Profile&amp;rdquo; signed by Apple.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;On macOS only, a binary could also be self-signed.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c2&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;We are mostly interested in the last two cases, because they are the only ones that allow us to provide custom entitlements. However, in those cases, any entitlements a binary has must either be a subset of those allowed by the provisioning profile created by Apple (in the &amp;ldquo;provisioning profile&amp;rdquo; case) or entitlements must only contain those whitelisted by the OS (in the self-signed case). That is, unless one has a vulnerability like Psychic Paper.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;An entrypoint into file integrity checks is the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;vnode_check_signature&lt;/span&gt;&lt;span&gt;&amp;nbsp;function inside the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;AppleMobileFileIntegrity&lt;/span&gt;&lt;span&gt;&amp;nbsp;kernel extension. &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;AppleMobileFileIntegrity&lt;/span&gt;&lt;span&gt;&amp;nbsp;is the kernel component of integrity checking, but there is also the userspace demon: &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span&gt;&amp;nbsp;which &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;AppleMobileFileIntegrity&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;uses to perform certain actions as noted further in the text.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;We are not going to analyze the full behavior of &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;vnode_check_signature&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;. However, I will highlight the most important actions and those relevant to understanding DER entitlements workflow:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_mk2jd2ji027g-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;First, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;vnode_check_signature &lt;/span&gt;&lt;span&gt;retrieves the entitlements in the DER format. If the currently loaded binary does not contain DER entitlements and only contains entitlements in the XML format, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;AppleMobileFileIntegrity &lt;/span&gt;&lt;span&gt;calls &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;transmuteEntitlementsInDaemon&lt;/span&gt;&lt;span&gt;&amp;nbsp;which uses &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span&gt;&amp;nbsp;to convert entitlements from XML into DER format. The conversion itself is done via &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CFPropertyListCreateWithData&lt;/span&gt;&lt;span&gt;&amp;nbsp;(to convert XML to CFDictionary) and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CESerializeCFDictionary&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;(which converts CFDictionary to DER representation).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c2&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_mk2jd2ji027g-0&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;Checks on the signature are performed using the CoreTrust library by calling &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CTEvaluateAMFICodeSignatureCMS&lt;/span&gt;&lt;span&gt;. This process has recently been documented in &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://worthdoingbadly.com/coretrust/&quot;&gt;another vulnerability writeup&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and will not be examined in detail as it does not relate to entitlements directly&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_mk2jd2ji027g-0&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;Additional checks on the signature and entitlements are performed in &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span&gt;&amp;nbsp;via the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;verify_code_directory&lt;/span&gt;&lt;span&gt;&amp;nbsp;function. This call will be analyzed in-depth later. One interesting detail about this interaction is that &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span&gt;&amp;nbsp;receives the path to the executable as a parameter. In order to prevent race conditions where the file was changed between being loaded by kernel and checked by &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;returns the cdHash of the checked file. It is then verified that this cdHash matches the cdHash of the file in the kernel.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_mk2jd2ji027g-0&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;Provisioning profile information is retrieved and it is checked that the entitlements in the binary are a subset of the entitlements in the provisioning profile. This is done with the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextIsSubset&lt;/span&gt;&lt;span&gt;&amp;nbsp;function. This step does not appear to be present on macOS running on Intel CPUs, however even in that case, the entitlements are still checked in &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;as will be shown below.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;The &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;verify_code_directory&lt;/span&gt;&lt;span&gt;&amp;nbsp;function of &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;performs (among other things) the following actions:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_n26z3gtxgors-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;Parses the binary and extracts all the relevant information for integrity checking. The code that does that is part of the open-source &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://github.com/apple-oss-distributions/Security&quot;&gt;Security&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;library and the two most relevant classes here are &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://github.com/apple-oss-distributions/Security/blob/e4ea024c9bbd3bfda30ec6df270bfb4c7438d1a9/OSX/libsecurity_codesigning/lib/StaticCode.cpp&quot;&gt;StaticCode&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://github.com/apple-oss-distributions/Security/blob/e4ea024c9bbd3bfda30ec6df270bfb4c7438d1a9/OSX/libsecurity_codesigning/lib/SecStaticCode.cpp&quot;&gt;SecStaticCode&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. This code is also responsible for extracting the DER-encoded entitlements. Once again, if only XML-encoded entitlements are present, they get converted to DER format. This is, once again, done by the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CFPropertyListCreateWithData&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CESerializeCFDictionary&lt;/span&gt;&lt;span&gt;&amp;nbsp;pair of functions. Additionally, for later use, entitlements are also converted to CFDictionary representation. This conversion from DER to CFDictionary is done using the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEManagedContextFromCFData&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEQueryContextToCFDictionary&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;function pair.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c2&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_n26z3gtxgors-0&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;Checks that the signature signs the correct cdHash and checks the signature itself. The checking of the digital signature certificate chain isn&amp;rsquo;t actually done by the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span&gt;&amp;nbsp;process. &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;call&lt;/span&gt;&lt;span&gt;s into &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;trustd&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;for that.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_n26z3gtxgors-0&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;On macOS, the entitlements contained in the binary are filtered into restricted and unrestricted ones. On macOS, the unrestricted entitlements are &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;com.apple.application-identifier&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;com.apple.security.application-groups*&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;com.apple.private.signing-identifier&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;com.apple.security.*&lt;/span&gt;&lt;span&gt;. If the binary contains &lt;/span&gt;&lt;span&gt;any entitlements&lt;/span&gt;&lt;span&gt;&amp;nbsp;not listed above, it needs to be checked against a provisioning profile. The check here relies on the entitlements CFDictionary, extracted earlier in &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Later, when the binary runs, if the operating system wants to check that the binary contains an entitlement to perform a specific action, it can do this in several ways. The &amp;ldquo;old way&amp;rdquo; of doing this is to retrieve a dictionary representation of entitlements and query a dictionary for a specific key. However, there is also a new API for querying entitlements, where the caller first creates a &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEQuery&lt;/span&gt;&lt;span&gt;&amp;nbsp;object containing the entitlement key they want to query (and, optionally, the expected value) and then performs the query by calling &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextQuery&lt;/span&gt;&lt;span&gt;&amp;nbsp;function with the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEQuery&lt;/span&gt;&lt;span&gt;&amp;nbsp;object as a parameter. For example, the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;IOTaskHasEntitlement&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;function, which takes an entitlement name and returns bool relies on the latter API.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;wUhACgDjbS-c9&quot; id=&quot;h.a9n48gmjlgpm&quot;&gt;&lt;span&gt;libCoreEntitlements&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;You might have noticed that a lot of functions for interacting with DER entitlements start with the letters &amp;ldquo;CE&amp;rdquo;, such as &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEQueryContextToCFDictionary&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextQuery&lt;/span&gt;&lt;span&gt;. Here, CE stands for libCoreEntitlements, which is a new library created specifically for DER-encoded entitlements. libCoreEntitlements is present both in the userspace (as libCoreEntitlements.dylib) and in the OS kernel (as a part of &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;AppleMobileFileIntegrity&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;kernel extension). So any vulnerability related to parsing the DER entitlement format would be located there.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;ldquo;There are no vulnerabilities here&amp;rdquo;, I declared in one of the Project Zero team meetings. At the time, I based this claim on the following:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_h97ui6n3g8c8-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;There is a single library for parsing DER entitlements, unlike the &lt;/span&gt;&lt;span&gt;four&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;/five used for XML entitlements. While there are two versions of the library, in userspace and kernel, those appear to be the same. Thus, there is no potential for parsing differential bugs like Psychic Paper. In addition to this, binary formats are much less susceptible to such issues in the first place.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c2&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_h97ui6n3g8c8-0&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;The library is &lt;/span&gt;&lt;span&gt;quite&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;small. I both reviewed and fuzzed the library for memory corruption vulnerabilities and didn&amp;rsquo;t find anything.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;It turns out I was completely wrong (as it often happens when someone declares code is bug free). But first&amp;hellip;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;wUhACgDjbS-c9&quot; id=&quot;h.oj2j45cupao4&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c21&quot;&gt;Interlude: SHA1 Collisions&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;After my failure to find a good libCoreEntitlements bug, I turned to other ideas. One thing I noticed when digging into Apple integrity checks is that SHA1 is still supported as a valid hash type for Code Directory / cdHash. Since practical SHA1 collision attacks have been known for some time, I wanted to see if they can somehow be applied to break the entitlement check.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;It should be noted that there are two kinds of SHA1 collision attacks:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_5nbkgo2blvl3-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;Identical prefix attacks, where an attacker starts with a common file prefix and then constructs collision blocks such that SHA1(prefix + collision_blocks1) == SHA1(prefix + collision_blocks2).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_5nbkgo2blvl3-0&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;Chosen prefix attacks, where the attacker starts with two different prefixes chosen by the attacker and constructs collision blocks such that SHA1(prefix1 + collision_blocks1) == SHA1(prefix2 + collision_blocks2).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c2&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;While both attacks are currently practical against SHA1, the first type is significantly cheaper than the second one. According to &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://eprint.iacr.org/2020/014.pdf&quot;&gt;SHA-1 is a Shambles&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;paper from 2020, the authors report a &amp;ldquo;cost of US$ 11k for a (identical prefix) collision, and US$ 45k for a chosen-prefix collision&amp;rdquo;. So I wanted to see if an identical prefix attack on DER entitlements is possible. Special thanks to Ange Albertini for bringing me up to speed on the current state of SHA1 collision attacks.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;My general idea was to&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_pb72mncojys1-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;Construct two sets of entitlements that have the same SHA1 hash&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;Since entitlements will have the same SHA1 hash, the cdHash of the corresponding binaries will also be the same, as long as the corresponding Code Directories use SHA1 as the hash algorithm.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;Exploit a race condition and switch the binary between being opened by the kernel and being opened by &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c4 wUhACgDjbS-c30&quot;&gt;amfid&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;If everything goes well, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfid&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;is going to see one set of entitlements and the kernel another set of entitlements, while believing that the binary hasn&amp;rsquo;t changed.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c2&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;In order to construct an identical-prefix collision, my plan was to have an entitlements file that contains a long string. The string would declare a 16-bit size and the identical prefix would end right at the place where string length is stored. That way, when a collision is found, lengths of the string in two files would differ. Following the lengths would be more collision data (junk), but that would be considered string content and the parsing of the file would still succeed. Since the length of the string in two files would be different, parsing would continue from two different places in the two files. This idea is illustrated in the following image.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c20&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c20&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKH4YXCWNDGpdZpJY-pcTZcKjJDNFfkMBFIjM37d1kbkxhKV0mmf3rc-NqA7GPuolVdoPRR5z294n68KjKI5GHUOlBS5dK-M-UiQPAkHZr1SO8Zafcv7e5sY6QyLrxnqqcqCjGERmAks1i6xk0IyIhZj6pfViJwl21tiaxoGFFyPJwihmUEn2vPMG6/s388/image3.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKH4YXCWNDGpdZpJY-pcTZcKjJDNFfkMBFIjM37d1kbkxhKV0mmf3rc-NqA7GPuolVdoPRR5z294n68KjKI5GHUOlBS5dK-M-UiQPAkHZr1SO8Zafcv7e5sY6QyLrxnqqcqCjGERmAks1i6xk0IyIhZj6pfViJwl21tiaxoGFFyPJwihmUEn2vPMG6/s388/image3.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot;title=&quot;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c20&quot;&gt;&lt;span&gt;A (failed) idea for exploiting an identical prefix SHA1 collision against DER entitlements. The blue parts of the files are the same, while &lt;/span&gt;&lt;span&gt;green and the red part&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;represent (different) collision blocks.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;Except it won&amp;rsquo;t work.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;The reason it won&amp;rsquo;t work is that every object in DER, including an object that contains other objects, has a size. Once again, hat tip to Ange Albertini who pointed out right away that this is going to be a problem.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;Since each individual entitlement is stored in a separate sequence object, with our collision we could change the length of a string inside the sequence object (e.g. a value of some entitlement), but not change the length of the sequence object itself. Having a mismatch between the sequence length and the length of content inside the sequence could, depending on how the parser is implemented, lead to a parsing failure. Alternatively, if the parser was more permissive, the parser would succeed but would continue parsing after the end of the current sequence, so the collision wouldn&amp;rsquo;t cause different entitlements to be seen in two different files.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;Unless the sequence length is completely ignored.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;So I took another look at the library, specifically at how sequence length was handled in different parts of the library, and that is when I found the actual bug.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;wUhACgDjbS-c9&quot; id=&quot;h.d4pdjgxvhjix&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c21&quot;&gt;The actual bug&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;libCoreEntitlements does not implement traversing DER entitlements in a single place. Instead, traversing is implemented in (at least) three different places:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c25 lst-kix_c2aw6txn2xw5-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span&gt;Inside &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;recursivelyValidateEntitlements&lt;/span&gt;&lt;span&gt;, called from &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEValidate&lt;/span&gt;&lt;span&gt;&amp;nbsp;which is used to validate entitlements before being loaded (e.g. &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEValidate&lt;/span&gt;&lt;span&gt;&amp;nbsp;is called from &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEManagedContextFromCFData &lt;/span&gt;&lt;span&gt;which&lt;/span&gt;&lt;span&gt;&amp;nbsp;was mentioned before). Among other things, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEValidate&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;ensures that entitlements are in alphabetical order and there are no duplicate entitlements.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;der_vm_iterate&lt;/span&gt;&lt;span&gt;, which is used when converting entitlements to dictionary (&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEQueryContextToCFDictionary&lt;/span&gt;&lt;span&gt;), but also from &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextIsSubset&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c1 c19 li-bullet-0&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;der_vm_execute_nocopy&lt;/span&gt;&lt;span&gt;, which is used when querying entitlements using &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextQuery&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;API.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;The actual bug is that these traversal algorithms behave slightly differently, in particular in how they handle entitlement sequence length. &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;der_vm_iterate&lt;/span&gt;&lt;span&gt;&amp;nbsp;behaved correctly and, after processing a single key/value sequence, continued processing after the sequence end (as indicated by the sequence length). &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;recursivelyValidateEntitlements&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;der_vm_execute_nocopy&lt;/span&gt;&lt;span&gt;&amp;nbsp;however completely ignore the sequence length (beyond an initial check that it is within bounds of the entitlements blob) and, after processing a single entitlement (key/value sequence), would continue processing after the end of the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c29&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;. This difference in iterating over entitlements is illustrated in the following image.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c20&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c20&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgmvwezbU_bZy1U1HC0Q6sUq3JUoC-jU2MpAhMjCdDg8-BGmChj0b9dJKuuU2c5jSLIZFcx19cVcw6tTK693jo5NGAFdJJbDx1fLPK5sJ2oijvW6nMa4Q-d7s4yz0JQSmL8LIWIToeqeA14Y8OvS2xC-oS4qZ3v-4a7NAYoTM3X7_EXnHU9MnLRQBor/s473/image1.png&quot; style=&quot;display: block; padding: 1em 0;text-align: center;&quot;&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgmvwezbU_bZy1U1HC0Q6sUq3JUoC-jU2MpAhMjCdDg8-BGmChj0b9dJKuuU2c5jSLIZFcx19cVcw6tTK693jo5NGAFdJJbDx1fLPK5sJ2oijvW6nMa4Q-d7s4yz0JQSmL8LIWIToeqeA14Y8OvS2xC-oS4qZ3v-4a7NAYoTM3X7_EXnHU9MnLRQBor/s473/image1.png&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;max-height: 750px; max-width: 600px;&quot;title=&quot;&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c20&quot;&gt;&lt;span&gt;Illustration of how different algorithms within libCoreEntitlements traverse the same DER structure. &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;der_vm_iterate&lt;/span&gt;&lt;span&gt;&amp;nbsp;is &lt;/span&gt;&lt;span&gt;shown as green arrows&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;on the left while &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;der_vm_execute&lt;/span&gt;&lt;span&gt;&amp;nbsp;is shown as red arrows on the right&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;. The red parts of the file represent a &amp;ldquo;hidden&amp;rdquo; entitlement that is only visible to the second algorithm.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;This allowed hiding entitlements by embedding them as children of other entitlements, as shown below. Such entitlements would then be visible to &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEValidate&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextQuery&lt;/span&gt;&lt;span&gt;, but hidden from &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEQueryContextToCFDictionary&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextIsSubset&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.049393eeee169e67583853ed549fe2b5bc2da995&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.1&quot;&gt;&lt;/a&gt;&lt;table class=&quot;wUhACgDjbS-c35&quot;&gt;&lt;tr class=&quot;wUhACgDjbS-c14&quot;&gt;&lt;td class=&quot;wUhACgDjbS-c36&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;SEQUENCE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;identifier&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;:testapp&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c22 wUhACgDjbS-c5 wUhACgDjbS-c27&quot;&gt;&amp;nbsp; SEQUENCE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c22 wUhACgDjbS-c5 wUhACgDjbS-c27&quot;&gt;&amp;nbsp; &amp;nbsp; UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;:com.apple.private.foo&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c22 wUhACgDjbS-c5 wUhACgDjbS-c27&quot;&gt;&amp;nbsp; &amp;nbsp; UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;:bar&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;SEQUENCE &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; UTF8STRING &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;allow&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; BOOLEAN &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;255&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Luckily (for an attacker), the functions used to perform the check that all entitlements in the binary are a subset of those in the provisioning profile wouldn&amp;rsquo;t see these hidden entitlements, which would only surface when the kernel would query for a presence of a specific entitlement using the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextQuery&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;API.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Since &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEValidate&lt;/span&gt;&lt;span&gt;&amp;nbsp;would also see the &amp;ldquo;hidden&amp;rdquo; entitlements, these would need to be in alphabetical order together with &amp;ldquo;normal&amp;rdquo; entitlements. However, because generally allowed entitlements such as &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;application-identifier&lt;/span&gt;&lt;span&gt;&amp;nbsp;on iOS and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;com.apple.application-identifier&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;on macOS appear pretty soon in the alphabetical order, this requirement doesn&amp;rsquo;t pose an obstacle for exploitation.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;wUhACgDjbS-c9&quot; id=&quot;h.f25ljzimqosv&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c21&quot;&gt;Exploitation&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;In order to try to exploit these issues, some tooling was required. Firstly, tooling to create crafted entitlements DER. For this, I created a small utility called &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://bugs.chromium.org/p/project-zero/issues/attachmentText?aid=575126&quot;&gt;createder.cpp&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;which can be used for example as &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;./createder entitlements.der com.apple.application-identifier=testapp -- com.apple.private.security.kext-collection-management&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c32&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;where entitlements.der is the output DER encoded entitlements file, entitlements before &amp;ldquo;--&amp;rdquo; are &amp;ldquo;normal&amp;rdquo; entitlements and those after &amp;ldquo;--&amp;rdquo; are hidden.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Next, I needed a way to embed such crafted entitlements into a signature blob. Normally, for signing binaries, Apple&amp;rsquo;s &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c23&quot;&gt;codesign&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;utility is used. However, this utility only accepts XML entitlements as input and the user can&amp;rsquo;t provide a DER blob. At some point, codesign converts the user-provided XML to DER and embeds both in the resulting binary.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;I decided the easiest way to embed custom DER in a binary would be to modify codesign behavior, specifically the XML to DER conversion process. To do this, I used &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://github.com/googleprojectzero/TinyInst&quot;&gt;TinyInst&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;, a dynamic instrumentation library I developed together with contributors. TinyInst currently supports macOS and Windows.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;In order to embed custom DER, I hooked two functions from libCoreEntitlements that are used during XML to DER conversion: &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CESizeSerialization&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CESerialize&lt;/span&gt;&lt;span&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CESerializeWithOptions&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;on macOS 13 / iOS 16). The first one computes the size of DER while the second one outputs DER bytes.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Initially, I wrote these hooks using TinyInst&amp;rsquo;s general-purpose low-level instrumentation API. However, since this process was more cumbersome than necessary, in the meantime I created an API specifically for function hooking. So instead of linking to my initial implementation that I sent with the bug report to Apple, let me instead show how the hooks would be implemented using the new &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://github.com/googleprojectzero/TinyInst/blob/master/hook.md&quot;&gt;TinyInst Hook API&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;cehook.h&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.863226f2b3c730a2a545d1ba90b5dcb5d69797f0&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.2&quot;&gt;&lt;/a&gt;&lt;table class=&quot;wUhACgDjbS-c16&quot;&gt;&lt;tr class=&quot;wUhACgDjbS-c14&quot;&gt;&lt;td class=&quot;wUhACgDjbS-c33&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c28&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;hook.h&amp;quot;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CESizeSerializationHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;HookReplace&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CESizeSerializationHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;HookReplace&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;libCoreEntitlements.dylib&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0 wUhACgDjbS-c22&quot;&gt;,&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;_CESizeSerialization&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c24&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;protected&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;OnFunctionEntered&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;};&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CESerializeWithOptionsHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;HookReplace&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CESerializeWithOptionsHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;HookReplace&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;libCoreEntitlements.dylib&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0 wUhACgDjbS-c22&quot;&gt;,&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;_CESerializeWithOptions&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c24&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;protected&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;OnFunctionEntered&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;};&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c28&quot;&gt;// the main client&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CEInst&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;TinyInst&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CEInst&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;();&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;protected&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;OnModuleLoaded&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;module_name&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;cehook.cpp&lt;/span&gt;&lt;/p&gt;&lt;a id=&quot;t.884ca52e44ea9f7b2ed792b4cd006659b87029bb&quot;&gt;&lt;/a&gt;&lt;a id=&quot;t.3&quot;&gt;&lt;/a&gt;&lt;table class=&quot;wUhACgDjbS-c16&quot;&gt;&lt;tr class=&quot;wUhACgDjbS-c14&quot;&gt;&lt;td class=&quot;wUhACgDjbS-c33&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c28&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;cehook.h&amp;quot;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c28&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;der&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;size_t der_size&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;size_t kCENoError&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c28&quot;&gt;// read entitlements.der into buffer&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;ReadEntitlementsFile&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; std&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;ifstream file&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;entitlements.der&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;std&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;binary &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;std&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;ate&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; FATAL&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;Error reading entitlements file&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; der_size &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;tellg&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;();&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; file&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;seekg&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c24&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;std&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;beg&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; der &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;der_size&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; file&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;der&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;der_size&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CESizeSerializationHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;OnFunctionEntered&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c28&quot;&gt;// 3rd argument (output) is a pointer to the size&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; printf&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;In CESizeSerialization\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; size_t out_addr &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;GetArg&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c24&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;RemoteWrite&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;out_addr&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;der_size&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;der_size&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;));&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;SetReturnValue&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;kCENoError&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CESerializeWithOptionsHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;OnFunctionEntered&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c28&quot;&gt;// 5th argument points to output buffer&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; printf&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;In CESerializeWithOptions\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; size_t out_addr &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;GetArg&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c24&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;RemoteWrite&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;out_addr&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;der&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;der_size&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;SetReturnValue&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;kCENoError&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CEInst&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CEInst&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;ReadEntitlementsFile&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;();&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;RegisterHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CESizeSerializationHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;());&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;RegisterHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CESerializeWithOptionsHook&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;());&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c7&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;CEInst&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;OnModuleLoaded&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;module_name&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;module_name&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;libCoreEntitlements.dylib&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c28&quot;&gt;// we must get the value of kCENoError,&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c28&quot;&gt;// which is libCoreEntitlements return value in case no error&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; size_t kCENoError_addr &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;GetSymbolAddress&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;_kCENoError&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;kCENoError_addr&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;FATAL&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c3&quot;&gt;&amp;quot;Error resolving symbol&amp;quot;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;RemoteRead&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;kCENoError_addr&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;kCENoError&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;kCENoError&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;));&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;TinyInst&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c8&quot;&gt;OnModuleLoaded&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5 wUhACgDjbS-c17&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c5&quot;&gt;&amp;nbsp;module_name&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c10&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;HookReplace (base class for our 2 hooks) is a helper class used to completely replace the function implementation with the hook. &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CESizeSerializationHook::OnFunctionEntered()&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CESerializeWithOptionsHook::OnFunctionEntered()&lt;/span&gt;&lt;span&gt;&amp;nbsp;are the bodies of the hooks. Additional code is needed to read the replacement entitlement DER and also to retrieve the value of kCENoError, which is a value libCoreEntitlements functions return on success and that we must return from our hooked versions. Note that, on macOS Monterey, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CESerializeWithOptions&lt;/span&gt;&lt;span&gt;&amp;nbsp;should be replaced with &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CESerialize&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;and the 3rd argument will be the output address rather than 4th.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;So, with that in place, I could sign a binary using DER provided in the entitlements.der file.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Now, with the tooling in place, the question becomes, how to exploit it. Or rather, which entitlement to target. In order to exploit the issue, we need to find an entitlement check that is ultimately made using &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextQuery&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;API. Unfortunately, that rules out most userspace daemons - all the ones I looked at still did entitlement checking the &amp;ldquo;old way&amp;rdquo;, by first obtaining a dictionary representation of entitlements. That leaves &amp;ldquo;just&amp;rdquo; the entitlement checks done by the OS kernel.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Fortunately, a lot of checks in the kernel are made using the vulnerable API. Some of these checks are done by &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;AppleMobileFileIntegrity&lt;/span&gt;&lt;span&gt;&amp;nbsp;itself using functions like &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;OSEntitlements::queryEntitlementsFor&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;AppleMobileFileIntegrity::AMFIEntitlementGetBool&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;proc_has_entitlement&lt;/span&gt;&lt;span&gt;. But there are other APIs as well. For example, the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;IOTaskHasEntitlement&lt;/span&gt;&lt;span&gt;&amp;nbsp;and &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;IOCurrentTaskHasEntitlement&lt;/span&gt;&lt;span&gt;&amp;nbsp;functions that are used from over a hundred places in the kernel (according to macOS Monterey kernel cache) end up calling &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextQuery&lt;/span&gt;&lt;span&gt;&amp;nbsp;(by first calling &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;amfi-&amp;gt;OSEntitlements_query()&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;One other potentially vulnerable API was &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;IOUserClient::copyClientEntitlement&lt;/span&gt;&lt;span&gt;, but only on Apple silicon, where &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;pmap_cs_enabled()&lt;/span&gt;&lt;span&gt;&amp;nbsp;is true. Although I didn&amp;rsquo;t test this, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://github.com/apple-oss-distributions/xnu/blob/e7776783b89a353188416a9a346c6cdb4928faad/iokit/Kernel/IOUserClient.cpp#L1480&quot;&gt;there is some indication&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;that in that case the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;CEContextQuery&lt;/span&gt;&lt;span&gt;&amp;nbsp;API or something similar to it is used. &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;IOUserClient::copyClientEntitlement&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;is most notably used by device drivers to check entitlements.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;I attempted to exploit the issue on both macOS and iOS. On macOS, I found places where such an entitlement bypass could be used to unlock previously unreachable attack surfaces, but nothing that would immediately provide a stand-alone exploit. In the end, to report something while looking for a better primitive, I &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c15&quot;&gt;&lt;a class=&quot;wUhACgDjbS-c181&quot; href=&quot;https://bugs.chromium.org/p/project-zero/issues/detail?id=2376&quot;&gt;reported&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;that I was able to invoke functionality of the &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;kext_request&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;API (kernel extension API) that I normally shouldn&amp;rsquo;t be able to do, even as the root user. At the time, I did my testing on macOS Monterey, versions 12.6 and 12.6.1.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;On iOS, exploiting such an issue would potentially be more interesting, as it could be used as part of a jailbreak. I was experimenting with iOS 16.1 and nothing I tried seemed to work, but due to the lack of introspection on the iOS platform I couldn&amp;rsquo;t figure out why at the time.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;That is, until I received a reply from Apple on my macOS report, asking me if I can reproduce on macOS Ventura. macOS Ventura was just released in the same week when I sent my report to Apple and I was hesitant to upgrade to a new major version while having a working setup on macOS Monterey. But indeed, when I upgraded to Ventura, and after making sure my tooling still works, the DER issue wouldn&amp;rsquo;t reproduce anymore. This was likely also the reason all of my iOS experiments were unsuccessful: iOS 16 shares the codebase with macOS Ventura.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;It appears that the issue was fixed due to refactoring and not as a security issue (macOS Monterey would be updated in this case as well as Apple releases some security patches not just for the latest major version of macOS, but also for the two previous ones). Looking at the code, it appears the API &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;libCoreEntitlements&lt;/span&gt;&lt;span&gt;&amp;nbsp;uses to do low-level DER parsing has changed somewhat - on macOS Monterey, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;libCoreEntitlements&lt;/span&gt;&lt;span&gt;&amp;nbsp;used mostly &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;ccder_decode&lt;/span&gt;&lt;span&gt;* functions to interact with DER, while on macOS ventura &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;ccder_blob_decode&lt;/span&gt;&lt;span&gt;* functions are used more often. The latter additionally take the parent DER structure as input and thus make processing of hierarchical DER structure somewhat less error-prone. As a consequence of this change, &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;der_vm_execute_nocopy&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;continues processing the next key/value sequence after the end of the current one (which is the intended behavior) and not, as before, after the end of the value object. &amp;nbsp;At this point, since I could no longer reproduce the issue on the latest OS release, I was no longer motivated to write the exploit and stopped my efforts in order to focus on other projects.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;Apple addressed the issue as CVE-2022-42855 on December 13, 2022. While Apple applied the CVE to all supported versions of their operating systems, including macOS Ventura and iOS 16, on those latest OS versions the patch seems to serve as an additional validation step. Specifically, on macOS Ventura, the patch is applied to function &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c4&quot;&gt;der_decode_key_value&lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&amp;nbsp;and makes sure that the key/value sequence does not contain other elements besides just key and the value (in other words, it makes sure that the length of the sequence matches length of key + value objects).&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;wUhACgDjbS-c9&quot; id=&quot;h.wim4vvikllfz&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c11 wUhACgDjbS-c21&quot;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;It is difficult to claim that a particular code base has no vulnterabilities. While that might be possible for a &lt;/span&gt;&lt;span class=&quot;wUhACgDjbS-c29&quot;&gt;specific type&lt;/span&gt;&lt;span&gt;&amp;nbsp;of vulnerabilities, it is difficult, and potentially impossible, to predict all types of vulnerabilities a complex codebase might have. After all, you can&amp;rsquo;t reason about what you don&amp;rsquo;t know.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;While DER encoding is certainly a much safer choice than XML when it comes to parsing logic issues, this blog post demonstrates that such issues are still possible even with the DER format.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1&quot;&gt;&lt;span&gt;And what about the SHA1 collision? While the identical prefix attack shouldn&amp;rsquo;t work against DER, doesn&amp;rsquo;t that still leave the chosen prefix attack? Maybe, but that&amp;rsquo;s something to explore another time. Or maybe (hopefully) Apple will remove SHA1 support in their signature blobs and there will be nothing to explore at all.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;wUhACgDjbS-c1 wUhACgDjbS-c12&quot;&gt;&lt;span class=&quot;wUhACgDjbS-c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='https://googleprojectzero.blogspot.com/feeds/3562308922263769538/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://googleprojectzero.blogspot.com/2023/01/der-entitlements-brief-return-of.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/3562308922263769538'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/3562308922263769538'/><link rel='alternate' type='text/html' href='https://googleprojectzero.blogspot.com/2023/01/der-entitlements-brief-return-of.html' title='DER Entitlements: The (Brief) Return of the Psychic Paper'/><author><name>Google Project Zero</name><uri>http://www.blogger.com/profile/08975904405228580347</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh_ctQx4QBRr-XKiIsWHuUO3d6r1cbG935MHyu2EXDNwm1tWeaGC1A5yniZErHOJ8qqwg185tDe6tU4u8ObWuPf-0CnLI9Pk5QhdQBOKcK6YAzqg30Xz1cuDtkcX9ryZ70vGbk3JKVwwkB0ozGkW6jqEIl-Q7jpeQZTM0PXmGtbsB7g1ApOut3xBwOX/s72-c/image2.png" height="72" width="72"/><thr:total>0</thr:total></entry>