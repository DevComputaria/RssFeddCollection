<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1176949257541686127.post-5154884564693495624</id><published>2021-12-02T15:00:00.000-05:00</published><updated>2021-12-02T15:00:00.190-05:00</updated><title type='text'>Exploring Container Security: A Storage Vulnerability Deep Dive</title><content type='html'>&lt;span class=&quot;byline-author&quot;&gt;Posted by Fabricio Voznika and Mauricio Poppe, Google Cloud&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Kubernetes Security is constantly evolving - keeping pace with enhanced functionality, usability and flexibility while also balancing the security needs of a wide and diverse set of use-cases.&lt;br /&gt;&lt;br /&gt;Recently, the GKE Security team discovered a &lt;a href=&quot;https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2021-018&quot;&gt;high severity vulnerability&lt;/a&gt; that allowed workloads to have access to parts of the host filesystem outside the mounted volumes boundaries. Although the vulnerability was patched back in September we thought it would be beneficial to write up a more in-depth analysis of the issue to share with the community.&lt;br /&gt;&lt;br /&gt;We assessed the impact of the vulnerability as described in &lt;a href=&quot;https://cloud.google.com/blog/products/containers-kubernetes/exploring-container-security-vulnerability-management-in-open-source-kubernetes&quot;&gt;vulnerability management in open-source Kubernetes&lt;/a&gt; and worked closely with the GKE Storage team and &lt;a href=&quot;https://github.com/kubernetes/committee-security-response&quot;&gt;the Kubernetes Security Response Committee&lt;/a&gt; to find a fix. In this post we’ll give some background on how the subpath storage system works, an overview of the vulnerability, the steps to find the root cause and the fix, and finally some recommendations for GKE and Anthos users.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Kubernetes Filesystems: Intro to Volume Subpath&lt;/b&gt;&lt;br /&gt;The vulnerability, &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25741&quot;&gt;CVE-2021-25741,&lt;/a&gt; was caused by a race condition during the creation of a subpath bind mount&lt;a href=&quot;https://kubernetes.io/docs/concepts/storage/volumes/#using-subpath&quot;&gt; inside a container, and&lt;/a&gt; allowed an attacker to gain unauthorized access to the underlying node filesystem and its sensitive files. We’ll describe how that system is supposed to work, and then talk about the vulnerability.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://kubernetes.io/docs/concepts/storage/volumes/#using-subpath&quot;&gt;volume subpath&lt;/a&gt; feature in Kubernetes enables sharing a volume in multiple containers inside a pod. For example, we could create a Pod with an InitContainer that creates directories with pre-populated data in a mounted filesystem volume. These directories can then be used by containers in the same Pod by mounting the same volume and optionally specifying a subpath field to limit what&#39;s visible inside the container.&lt;br /&gt;&lt;br /&gt;While there are some great use cases for this feature, it’s an area that has had vulnerabilities discovered in the past. The kubelet must be extra cautious when handling user-owned subpaths because it operates with privileges in the host. One vulnerability that has been previously discovered involved the creation of a malicious workload where an InitContainer would create a symlink pointing to any location in the host. For example, the InitContainer could mount a volume in /mnt and create a symlink /mnt/attack inside the container pointing to /etc. Later in the Pod lifecycle, another container would attempt to mount the same volume with subpath attack. While preparing the volumes for the container, the kubelet would end up following the symlink to the host’s /etc instead of the container’s /etc, unknowingly exposing the host filesystem to the container. &lt;a href=&quot;https://kubernetes.io/blog/2018/04/04/fixing-subpath-volume-vulnerability/&quot;&gt;A previous fix&lt;/a&gt; made sure that the subpath mount location is resolved and validated to point to a location inside the base volume and that it&#39;s not changeable by the user in between the time the path was validated and when the container runtime bind mounts it.  This race condition is known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use&quot;&gt;time of check to time of use (TOCTOU)&lt;/a&gt; where the subject being validated changes after it has been validated.&lt;br /&gt;&lt;br /&gt;These validations and others are summarized in the following container lifecycle sequence diagram.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img height=&quot;528&quot; src=&quot;https://lh5.googleusercontent.com/EQCWiv_1gdD_ZxcNaatdzDzpQT3Py5khj8qjZe3PUlGB4CoZZTpAZgR4FVPqwN6HpYZpe9w5uDZnUnWQ4P87_r4jDFo7MCa2H5c7gB9j8bVZ_Ro9qv0CLa195fZoufpLUtNTIgqw8xE7Tsc0UCXuRH7j4EMjcN92eqoXzC5UQUkYDnrV=w640-h528&quot; width=&quot;640&quot; /&gt;&lt;br /&gt;&lt;br /&gt;Volume subpath validations before the container startup&lt;br /&gt;&lt;br /&gt;&lt;b&gt;A New TOCTOU Vulnerability: CVE-2021-25741&lt;/b&gt;&lt;br /&gt;The latest vulnerability was discovered by performing a symlink attack similar to the one explained above, with the difference being that it constantly swapped the symlink with a directory in a tight loop, using the RENAME_EXCHANGE option with &lt;a href=&quot;https://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt;renameat(2)&lt;/a&gt;. If the timing is just right, the kubelet will see the path as a directory and pass the validation check. Then the mount utility may find that the path is a symlink pointing to the host and follow it, exposing the host filesystem to the container. This is visualized in the following diagram:&lt;br /&gt;&lt;br /&gt;&lt;img height=&quot;174&quot; src=&quot;https://lh3.googleusercontent.com/Fb7JNY1-fB2aJd81xl6axtqxBeFG-hT_-knHw6UZEas7OU7g2av8blc6ZmwadIetOEy5cYBNqZYge8sr_G66A04ruxbf9FX10Bfm0sUKbY3JPsz2StBacW8r6qDLCBmPGHPfthtJX5uUasqAJprKh91WCg7yhmQtajCNYVlWaVzhYSos=w640-h174&quot; width=&quot;640&quot; /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;i&gt;The expectation and the attack outcome&lt;/i&gt;&lt;/div&gt;&lt;br /&gt;The GKE Security and Storage teams worked closely to revise the fix done previously to find a solution. The previous fix takes several steps to ensure that the directory being mounted is safely opened and validated. After the file is opened and validated, the kubelet uses the magic-link path under /proc/[pid]/fd directory for all subsequent operations to ensure the file remains unchanged. However, we found out that all of the efforts were undone by the &lt;a href=&quot;https://man7.org/linux/man-pages/man8/mount.8.html&quot;&gt;mount(8)&lt;/a&gt; linux utility which was dereferencing the procfs magic-link by default. Once the problem was understood, the fix involved making sure that the mount utility doesn&#39;t dereference the magic-links by using the --no-canonicalize flag in the mount command.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The fix is in&lt;/b&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Once the problem was well understood, we fixed it inside Kubernetes and quickly &lt;a href=&quot;https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2021-018&quot;&gt;released the fix to GKE and Anthos&lt;/a&gt;.  If GKE auto-upgrade is enabled in your clusters there&#39;s no action on your part for this vulnerability, your nodes have already been patched. We strongly recommend that customers utilize &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-upgrades&quot;&gt;auto-upgrades&lt;/a&gt;. Auto-upgrade gives peace of mind that your clusters are running with the latest patches.&lt;br /&gt;&lt;br /&gt;GKE released a &lt;a href=&quot;https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2021-018&quot;&gt;Google Kubernetes Engine security bulletin&lt;/a&gt; on this vulnerability, which detailed what customers can do to immediately remediate this issue across GKE and Anthos. We also provided guidance to customers who manually manage their node versions, ensuring that fixed releases were available in every region for our &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels&quot;&gt;Static and Release Channels&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Moving forward&lt;/b&gt;&lt;br /&gt;Google continues to invest heavily in the security of GKE and Kubernetes. We encourage users interested in finding vulnerabilities to participate in the &lt;a href=&quot;https://security.googleblog.com/2020/01/securing-open-source-how-google.html&quot;&gt;Kubernetes bug bounty program&lt;/a&gt; and in the &lt;a href=&quot;https://security.googleblog.com/2020/05/expanding-our-work-with-open-source.html&quot;&gt;Google Vulnerability Rewards Program (VRP)&lt;/a&gt; which was recently expanded to cover GKE vulnerabilities. For the latest guidance on security issues, please follow our &lt;a href=&quot;https://cloud.google.com/anthos/clusters/docs/security-bulletins&quot;&gt;GKE Security Bulletins&lt;/a&gt;.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://security.googleblog.com/feeds/5154884564693495624/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment/fullpage/post/1176949257541686127/5154884564693495624?isPopup=true' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/5154884564693495624'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1176949257541686127/posts/default/5154884564693495624'/><link rel='alternate' type='text/html' href='http://security.googleblog.com/2021/12/exploring-container-security-storage.html' title='Exploring Container Security: A Storage Vulnerability Deep Dive'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lh5.googleusercontent.com/EQCWiv_1gdD_ZxcNaatdzDzpQT3Py5khj8qjZe3PUlGB4CoZZTpAZgR4FVPqwN6HpYZpe9w5uDZnUnWQ4P87_r4jDFo7MCa2H5c7gB9j8bVZ_Ro9qv0CLa195fZoufpLUtNTIgqw8xE7Tsc0UCXuRH7j4EMjcN92eqoXzC5UQUkYDnrV=s72-w640-h528-c" height="72" width="72"/><thr:total>0</thr:total></entry>