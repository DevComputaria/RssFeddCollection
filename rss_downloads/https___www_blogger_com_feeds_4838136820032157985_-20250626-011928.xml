<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><entry xmlns='http://www.w3.org/2005/Atom' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-4838136820032157985.post-2146117790598367776</id><published>2021-05-20T10:07:00.000-07:00</published><updated>2021-05-20T12:20:17.752-07:00</updated><title type='text'>Fuzzing iOS code on macOS at native speed</title><content type='html'>&lt;style type=&quot;text/css&quot;&gt;@import url(&#39;https://themes.googleusercontent.com/fonts/css?kit=cGvuclDC_Z1vE_cnVEU6Ae_NZQ7StBcqH_vXVqoPMX0&#39;);.lst-kix_adz5e91jwu7t-8&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_adz5e91jwu7t-8,lower-roman) &quot;. &quot;}.lst-kix_aacxccbo6zlx-1&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-1}.lst-kix_adz5e91jwu7t-3&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-3}.lst-kix_adz5e91jwu7t-7&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_adz5e91jwu7t-7,lower-latin) &quot;. &quot;}ol.lst-kix_ii04ufl4nr9k-3.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-3 0}ol.lst-kix_aacxccbo6zlx-0.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-0 0}.lst-kix_adz5e91jwu7t-5&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_adz5e91jwu7t-5,lower-roman) &quot;. &quot;}.lst-kix_adz5e91jwu7t-4&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_adz5e91jwu7t-4,lower-latin) &quot;. &quot;}.lst-kix_adz5e91jwu7t-6&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_adz5e91jwu7t-6,decimal) &quot;. &quot;}ol.lst-kix_kfxac5q5c62u-7.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-7 0}.lst-kix_adz5e91jwu7t-1&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_adz5e91jwu7t-1,lower-latin) &quot;. &quot;}.lst-kix_adz5e91jwu7t-0&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_adz5e91jwu7t-0,decimal) &quot;. &quot;}.lst-kix_adz5e91jwu7t-2&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_adz5e91jwu7t-2,lower-roman) &quot;. &quot;}ol.lst-kix_ii04ufl4nr9k-0.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-0 0}.lst-kix_kfxac5q5c62u-1&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-1}.lst-kix_adz5e91jwu7t-3&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_adz5e91jwu7t-3,decimal) &quot;. &quot;}.lst-kix_hvcf6tgq957j-7&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_hvcf6tgq957j-6&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_adz5e91jwu7t-1.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-1 0}.lst-kix_aacxccbo6zlx-0&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-0}ol.lst-kix_kfxac5q5c62u-4.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-4 0}.lst-kix_hvcf6tgq957j-5&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_hvcf6tgq957j-4&gt;li:before{content:&quot;\0025cb  &quot;}.lst-kix_hvcf6tgq957j-1&gt;li:before{content:&quot;\0025cb  &quot;}ol.lst-kix_adz5e91jwu7t-4.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-4 0}ol.lst-kix_kfxac5q5c62u-8{list-style-type:none}.lst-kix_hvcf6tgq957j-3&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_kfxac5q5c62u-7{list-style-type:none}.lst-kix_hvcf6tgq957j-2&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_hvcf6tgq957j-0&gt;li:before{content:&quot;\0025cf  &quot;}ol.lst-kix_aacxccbo6zlx-3.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-3 0}ol.lst-kix_adz5e91jwu7t-7.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-7 0}.lst-kix_kfxac5q5c62u-2&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-2}ol.lst-kix_kfxac5q5c62u-4{list-style-type:none}ol.lst-kix_kfxac5q5c62u-3{list-style-type:none}ol.lst-kix_kfxac5q5c62u-6{list-style-type:none}ol.lst-kix_kfxac5q5c62u-5{list-style-type:none}ol.lst-kix_kfxac5q5c62u-0{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-6.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-6 0}ol.lst-kix_kfxac5q5c62u-2{list-style-type:none}.lst-kix_ii04ufl4nr9k-8&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-8}ol.lst-kix_kfxac5q5c62u-1{list-style-type:none}.lst-kix_aacxccbo6zlx-2&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-2}ul.lst-kix_ghczzllgiqkw-6{list-style-type:none}ul.lst-kix_ghczzllgiqkw-7{list-style-type:none}ul.lst-kix_ghczzllgiqkw-4{list-style-type:none}ul.lst-kix_ghczzllgiqkw-5{list-style-type:none}ol.lst-kix_aacxccbo6zlx-0{list-style-type:none}ul.lst-kix_ghczzllgiqkw-2{list-style-type:none}ol.lst-kix_aacxccbo6zlx-1{list-style-type:none}.lst-kix_adz5e91jwu7t-0&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-0}ul.lst-kix_ghczzllgiqkw-3{list-style-type:none}ol.lst-kix_aacxccbo6zlx-2{list-style-type:none}ul.lst-kix_ghczzllgiqkw-0{list-style-type:none}ol.lst-kix_aacxccbo6zlx-3{list-style-type:none}ul.lst-kix_ghczzllgiqkw-1{list-style-type:none}ol.lst-kix_aacxccbo6zlx-4{list-style-type:none}.lst-kix_aacxccbo6zlx-4&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-4}.lst-kix_ii04ufl4nr9k-1&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-1}.lst-kix_kfxac5q5c62u-5&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-5}ol.lst-kix_adz5e91jwu7t-0.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-0 0}.lst-kix_ii04ufl4nr9k-7&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-7}ol.lst-kix_ii04ufl4nr9k-5.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-5 0}ol.lst-kix_adz5e91jwu7t-1{list-style-type:none}ol.lst-kix_aacxccbo6zlx-5{list-style-type:none}.lst-kix_adz5e91jwu7t-1&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-1}ol.lst-kix_adz5e91jwu7t-2{list-style-type:none}ol.lst-kix_aacxccbo6zlx-6{list-style-type:none}ol.lst-kix_adz5e91jwu7t-3{list-style-type:none}ol.lst-kix_adz5e91jwu7t-6.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-6 0}ol.lst-kix_aacxccbo6zlx-7{list-style-type:none}ol.lst-kix_adz5e91jwu7t-4{list-style-type:none}ol.lst-kix_aacxccbo6zlx-6.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-6 0}ol.lst-kix_aacxccbo6zlx-8{list-style-type:none}ol.lst-kix_adz5e91jwu7t-5{list-style-type:none}ol.lst-kix_adz5e91jwu7t-6{list-style-type:none}ol.lst-kix_adz5e91jwu7t-7{list-style-type:none}ol.lst-kix_adz5e91jwu7t-8{list-style-type:none}.lst-kix_kfxac5q5c62u-4&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-4}.lst-kix_ghczzllgiqkw-1&gt;li:before{content:&quot;-  &quot;}.lst-kix_adz5e91jwu7t-7&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-7}.lst-kix_adz5e91jwu7t-4&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-4}.lst-kix_ghczzllgiqkw-2&gt;li:before{content:&quot;-  &quot;}.lst-kix_ghczzllgiqkw-7&gt;li:before{content:&quot;-  &quot;}.lst-kix_ghczzllgiqkw-0&gt;li:before{content:&quot;-  &quot;}.lst-kix_ghczzllgiqkw-8&gt;li:before{content:&quot;-  &quot;}ol.lst-kix_ii04ufl4nr9k-4.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-4 0}.lst-kix_kfxac5q5c62u-0&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_kfxac5q5c62u-0,decimal) &quot;. &quot;}.lst-kix_kfxac5q5c62u-1&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_kfxac5q5c62u-1,lower-latin) &quot;. &quot;}.lst-kix_ghczzllgiqkw-6&gt;li:before{content:&quot;-  &quot;}.lst-kix_kfxac5q5c62u-2&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_kfxac5q5c62u-2,lower-roman) &quot;. &quot;}.lst-kix_ghczzllgiqkw-5&gt;li:before{content:&quot;-  &quot;}.lst-kix_ghczzllgiqkw-3&gt;li:before{content:&quot;-  &quot;}ol.lst-kix_aacxccbo6zlx-5.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-5 0}ol.lst-kix_kfxac5q5c62u-5.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-5 0}.lst-kix_kfxac5q5c62u-3&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_kfxac5q5c62u-3,decimal) &quot;. &quot;}.lst-kix_ghczzllgiqkw-4&gt;li:before{content:&quot;-  &quot;}.lst-kix_kfxac5q5c62u-6&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_kfxac5q5c62u-6,decimal) &quot;. &quot;}.lst-kix_aacxccbo6zlx-7&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-7}.lst-kix_ii04ufl4nr9k-1&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_ii04ufl4nr9k-1,lower-latin) &quot;. &quot;}ol.lst-kix_aacxccbo6zlx-7.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-7 0}ol.lst-kix_adz5e91jwu7t-5.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-5 0}.lst-kix_kfxac5q5c62u-4&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_kfxac5q5c62u-4,lower-latin) &quot;. &quot;}.lst-kix_kfxac5q5c62u-8&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_kfxac5q5c62u-8,lower-roman) &quot;. &quot;}.lst-kix_kfxac5q5c62u-5&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_kfxac5q5c62u-5,lower-roman) &quot;. &quot;}.lst-kix_ii04ufl4nr9k-0&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_ii04ufl4nr9k-0,decimal) &quot;. &quot;}.lst-kix_ii04ufl4nr9k-3&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_ii04ufl4nr9k-3,decimal) &quot;. &quot;}.lst-kix_ii04ufl4nr9k-4&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-4}.lst-kix_kfxac5q5c62u-8&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-8}.lst-kix_kfxac5q5c62u-7&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_kfxac5q5c62u-7,lower-latin) &quot;. &quot;}.lst-kix_ii04ufl4nr9k-2&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_ii04ufl4nr9k-2,lower-roman) &quot;. &quot;}ol.lst-kix_aacxccbo6zlx-4.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-4 0}.lst-kix_ii04ufl4nr9k-7&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_ii04ufl4nr9k-7,lower-latin) &quot;. &quot;}ol.lst-kix_adz5e91jwu7t-8.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-8 0}.lst-kix_adz5e91jwu7t-8&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-8}.lst-kix_ii04ufl4nr9k-4&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_ii04ufl4nr9k-4,lower-latin) &quot;. &quot;}.lst-kix_ii04ufl4nr9k-8&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_ii04ufl4nr9k-8,lower-roman) &quot;. &quot;}ol.lst-kix_ii04ufl4nr9k-7.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-7 0}.lst-kix_ii04ufl4nr9k-3&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-3}.lst-kix_kfxac5q5c62u-7&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-7}.lst-kix_ii04ufl4nr9k-5&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_ii04ufl4nr9k-5,lower-roman) &quot;. &quot;}.lst-kix_ii04ufl4nr9k-6&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_ii04ufl4nr9k-6,decimal) &quot;. &quot;}ol.lst-kix_aacxccbo6zlx-1.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-1 0}.lst-kix_ii04ufl4nr9k-2&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-2}.lst-kix_ii04ufl4nr9k-5&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-5}ol.lst-kix_kfxac5q5c62u-6.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-6 0}ol.lst-kix_adz5e91jwu7t-0{list-style-type:none}.lst-kix_aacxccbo6zlx-8&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-8}ol.lst-kix_kfxac5q5c62u-3.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-3 0}ul.lst-kix_hvcf6tgq957j-0{list-style-type:none}ul.lst-kix_hvcf6tgq957j-5{list-style-type:none}ul.lst-kix_hvcf6tgq957j-6{list-style-type:none}ul.lst-kix_hvcf6tgq957j-7{list-style-type:none}ul.lst-kix_hvcf6tgq957j-8{list-style-type:none}.lst-kix_aacxccbo6zlx-5&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-5}ul.lst-kix_hvcf6tgq957j-1{list-style-type:none}ol.lst-kix_kfxac5q5c62u-0.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-0 0}ul.lst-kix_hvcf6tgq957j-2{list-style-type:none}.lst-kix_adz5e91jwu7t-6&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-6}ul.lst-kix_ghczzllgiqkw-8{list-style-type:none}ul.lst-kix_hvcf6tgq957j-3{list-style-type:none}ul.lst-kix_hvcf6tgq957j-4{list-style-type:none}ol.lst-kix_aacxccbo6zlx-2.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-2 0}ol.lst-kix_adz5e91jwu7t-3.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-3 0}ol.lst-kix_ii04ufl4nr9k-8.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-8 0}.lst-kix_aacxccbo6zlx-1&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_aacxccbo6zlx-1,lower-latin) &quot;. &quot;}.lst-kix_aacxccbo6zlx-0&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_aacxccbo6zlx-0,decimal) &quot;. &quot;}.lst-kix_adz5e91jwu7t-5&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-5}.lst-kix_aacxccbo6zlx-3&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_aacxccbo6zlx-3,decimal) &quot;. &quot;}.lst-kix_aacxccbo6zlx-2&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_aacxccbo6zlx-2,lower-roman) &quot;. &quot;}.lst-kix_aacxccbo6zlx-6&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_aacxccbo6zlx-6,decimal) &quot;. &quot;}.lst-kix_ii04ufl4nr9k-6&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-6}ol.lst-kix_kfxac5q5c62u-1.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-1 0}.lst-kix_aacxccbo6zlx-5&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_aacxccbo6zlx-5,lower-roman) &quot;. &quot;}.lst-kix_ii04ufl4nr9k-0&gt;li{counter-increment:lst-ctn-kix_ii04ufl4nr9k-0}ol.lst-kix_ii04ufl4nr9k-2.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-2 0}.lst-kix_aacxccbo6zlx-4&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_aacxccbo6zlx-4,lower-latin) &quot;. &quot;}.lst-kix_kfxac5q5c62u-6&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-6}.lst-kix_kfxac5q5c62u-3&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-3}ol.lst-kix_ii04ufl4nr9k-2{list-style-type:none}.lst-kix_aacxccbo6zlx-7&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_aacxccbo6zlx-7,lower-latin) &quot;. &quot;}ol.lst-kix_ii04ufl4nr9k-3{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-0{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-1{list-style-type:none}.lst-kix_aacxccbo6zlx-3&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-3}ol.lst-kix_aacxccbo6zlx-8.start{counter-reset:lst-ctn-kix_aacxccbo6zlx-8 0}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_adz5e91jwu7t-2&gt;li{counter-increment:lst-ctn-kix_adz5e91jwu7t-2}.lst-kix_hvcf6tgq957j-8&gt;li:before{content:&quot;\0025a0  &quot;}.lst-kix_kfxac5q5c62u-0&gt;li{counter-increment:lst-ctn-kix_kfxac5q5c62u-0}.lst-kix_aacxccbo6zlx-6&gt;li{counter-increment:lst-ctn-kix_aacxccbo6zlx-6}.lst-kix_aacxccbo6zlx-8&gt;li:before{content:&quot;&quot; counter(lst-ctn-kix_aacxccbo6zlx-8,lower-roman) &quot;. &quot;}ol.lst-kix_ii04ufl4nr9k-8{list-style-type:none}ol.lst-kix_kfxac5q5c62u-2.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-2 0}ol.lst-kix_ii04ufl4nr9k-6{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-7{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-4{list-style-type:none}ol.lst-kix_ii04ufl4nr9k-5{list-style-type:none}ol.lst-kix_kfxac5q5c62u-8.start{counter-reset:lst-ctn-kix_kfxac5q5c62u-8 0}ol.lst-kix_ii04ufl4nr9k-1.start{counter-reset:lst-ctn-kix_ii04ufl4nr9k-1 0}ol.lst-kix_adz5e91jwu7t-2.start{counter-reset:lst-ctn-kix_adz5e91jwu7t-2 0}ol{margin:0;padding:0}table td,table th{padding:0}.c13{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:Consolas,&quot;Courier New&quot;;font-style:normal}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:Consolas,&quot;Courier New&quot;;font-style:normal}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:Consolas,&quot;Courier New&quot;;font-style:normal}.c9{padding-top:18pt;padding-bottom:6pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c12{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:&quot;Arial&quot;;font-style:normal}.c20{padding-top:0pt;padding-bottom:16pt;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c17{color:#666666;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:15pt;font-family:&quot;Arial&quot;;font-style:normal}.c6{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:&quot;Arial&quot;;font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.c7{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c15{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c18{color:#000000;text-decoration:none;vertical-align:baseline;font-style:normal}.c19{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c11{font-weight:400;font-family:Consolas,&quot;Courier New&quot;}.c8{padding:0;margin:0}.c5{border:1px solid black;margin:5px}.c10{color:inherit;text-decoration:inherit}.c1{margin-left:36pt;padding-left:0pt}.c16{font-family:Consolas,&quot;Courier New&quot;;font-weight:700}.c4{height:11pt}.c14{font-size:10pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}p{margin:0;color:#000000;font-size:11pt;font-family:&quot;Arial&quot;}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:&quot;Arial&quot;;line-height:1.5;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}&lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;c19&quot;&gt;
 &lt;p class=&quot;c20 subtitle&quot; id=&quot;h.57asgx9sxnba&quot;&gt;&lt;span class=&quot;c17&quot;&gt;Or how iOS apps on macOS work under the hood&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;Posted by Samuel Gro&amp;szlig;, Project Zero&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;This short post explains how code compiled for iOS can be run natively on Apple Silicon Macs.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;With the introduction of &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://developer.apple.com/documentation/apple_silicon&quot;&gt;Apple Silicon Macs&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, Apple also made it possible to run iOS apps natively on these Macs. This is fundamentally possible due to (1) iPhones and Apple Silicon Macs both using the arm64 instruction set architecture (ISA) and (2) macOS using a mostly compatible set of runtime libraries and frameworks while also providing /System/iOSSupport which contains the parts of the iOS runtime that do not exist on macOS. &lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;Due to this, it should be possible to run not just complete apps but also standalone iOS binaries or libraries on Mac. This might be interesting for a number of reasons, including:&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;padding: 0;&quot; class=&quot;c8 lst-kix_ghczzllgiqkw-0 start&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;It allows fuzzing closed-source code compiled for iOS on a Mac&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;It allows dynamic analysis of iOS code in a more &amp;ldquo;friendly&amp;rdquo; environment&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;This post explains how this can be achieved in practice. The corresponding code can be found &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://github.com/googleprojectzero/p0tools/tree/master/iOSOnMac&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and allows &lt;/span&gt;&lt;span&gt;executing arbitrary iOS binaries and library code natively on macOS. The tool assumes that &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection&quot;&gt;SIP has been disabled&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and has been tested on macOS 11.2 and 11.3&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;. With SIP enabled, certain steps will probably fail.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;We originally developed this tool for fuzzing a 3rd-party iOS messaging app. While that particular project didn&amp;rsquo;t yield any interesting results, we are making the tool public as it could help lower the barrier of entry for iOS security research.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c9&quot; id=&quot;h.aw851uzeigjt&quot;&gt;&lt;span class=&quot;c12&quot;&gt;The Goal&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;The ultimate goal of this project is to execute code compiled for iOS natively on macOS. While it would be possible to achieve this goal (at least for some binaries/libraries) simply by swapping the platform identifier in the mach-o binary, our approach will instead use the existing infrastructure for running iOS apps on macOS. This has two benefits:&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;c8 lst-kix_aacxccbo6zlx-0 start&quot; start=&quot;1&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;It will guarantee that all dependent system libraries of the iOS code will exist. In practice, this means that if a dependent library does not already exist on macOS, it will automatically be loaded from /System/iOSSupport instead&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;The runtime (OS services, frameworks, etc.) will, if necessary, emulate their iOS behavior since they will know that the process is an iOS one&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;To start, we&amp;rsquo;ll take a simple piece of C source code and compile it for iOS:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&amp;gt; cat hello.c&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;int main() {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;Hello from an iOS binary!&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&amp;gt; clang -arch arm64 hello.c -o hello -isysroot \&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&amp;gt; file hello&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;hello: Mach-O 64-bit executable arm64&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&amp;gt; otool -l hello&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;hellip;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;Load command 10&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; cmd LC_BUILD_VERSION&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; cmdsize 32&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp;platform 2 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # Platform 2 is iOS&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; minos 14.4&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; sdk 14.4&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp;ntools 1&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;tool 3&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; version 609.8&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;hellip;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c9&quot; id=&quot;h.e03m0s8m33wi&quot;&gt;&lt;span class=&quot;c12&quot;&gt;The Kernel&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;Attempting&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;to execute the freshly compiled binary (on macOS 11.2) will simply result in&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&amp;gt; ./hello&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;[1] &amp;nbsp; &amp;nbsp;13699 killed &amp;nbsp; &amp;nbsp; ./hello&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;While the exit status informs us that the process was terminated through SIGKILL, it does not contain any additional information about the specific reason for that. However, it does seem likely that the process is terminated by the kernel during the &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;execve(2)&lt;/span&gt;&lt;span&gt;&amp;nbsp;or &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;posix_spawn(2)&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;syscall. And indeed, the crash report generated by the system states: &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;Termination Reason: &amp;nbsp; &amp;nbsp;EXEC, [0xe] Binary with wrong platform&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;This error correspon&lt;/span&gt;&lt;span&gt;ds to &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/bsd/sys/reason.h#L249&quot;&gt;EXEC_EXIT_REASON_WRONG_PLATFORM&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in the kernel&lt;/span&gt;&lt;span&gt;, and that constant is only referenced in a single function: &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/bsd/kern/kern_exec.c#L6768&quot;&gt;check_for_signature&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;static int&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;check_for_signature(proc_t p, struct image_params *imgp)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;hellip;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#if XNU_TARGET_OS_OSX&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/* Check for platform passed in spawn attr if iOS binary is being spawned */&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (proc_platform(p) == PLATFORM_IOS) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;struct _posix_spawnattr *psa = imgp-&amp;gt;ip_px_sa;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (psa == NULL || psa-&amp;gt;psa_platform == 0) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;hellip;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; signature_failure_reason = os_reason_create(OS_REASON_EXEC,&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c11 c14&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c14 c16&quot;&gt;EXEC_EXIT_REASON_WRONG_PLATFORM&lt;/span&gt;&lt;span class=&quot;c3&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; error = EACCES;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; goto done;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (psa-&amp;gt;psa_platform != PLATFORM_IOS) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/* Simulator binary spawned with wrong platform */&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;signature_failure_reason = os_reason_create(OS_REASON_EXEC,&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c11 c14&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;span class=&quot;c16 c14&quot;&gt;EXEC_EXIT_REASON_WRONG_PLATFORM&lt;/span&gt;&lt;span class=&quot;c3&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;error = EACCES;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;goto done;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c11 c14&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf(&amp;quot;Allowing spawn of iOS binary %s since&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; correct platform was passed in spawn\n&amp;quot;, p-&amp;gt;p_name);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#endif /* XNU_TARGET_OS_OSX */&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;hellip;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;This code is active on macOS and will execute if the platform of the to-be-executed process is &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;PLATFORM_IOS&lt;/span&gt;&lt;span&gt;. In essence, the code checks for an undocumented &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;posix_spawn&lt;/span&gt;&lt;span&gt;&amp;nbsp;attribute, &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;psa_platform&lt;/span&gt;&lt;span&gt;, and in the absence of it (or if its value is not &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;PLATFORM_IOS&lt;/span&gt;&lt;span&gt;), will terminate the process in the way we have previously observed.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;As such, to avoid &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;EXEC_EXIT_REASON_WRONG_PLATFORM&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&amp;nbsp;it should only be necessary to use the undocumented &lt;/span&gt;&lt;span class=&quot;c7 c11&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/libsyscall/wrappers/spawn/posix_spawn.c#L1073&quot;&gt;posix_spawnattr_set_platform_np&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;syscall to set the target platform to &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;PLATFORM_IOS&lt;/span&gt;&lt;span&gt;, then invoke &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://man7.org/linux/man-pages/man3/posix_spawn.3.html&quot;&gt;posix_spawn&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;to execute the iOS binary:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_t attr;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_init(&amp;amp;attr);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_set_platform_np(&amp;amp;attr, PLATFORM_IOS, 0);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; posix_spawn(&amp;amp;pid, binary_path, NULL, &amp;amp;attr, argv, environ);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;Doing that will now result in:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;gt; ./runner hello&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;[*] Child exited with status 5&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;No more SIGKILL, progress! Exit status 5 corresponds to SIGTRAP, which likely implies that the process is now terminating in userspace. And indeed, the crash report confirms that the process is crashing sometime during library initialization now.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c9&quot; id=&quot;h.p4xsg0nqawvp&quot;&gt;&lt;span class=&quot;c12&quot;&gt;Userspace&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;At this point we have a &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;PLATFORM_IOS&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;process running in macOS userspace. The next thing that now happens is that &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://en.wikipedia.org/wiki/Dynamic_linker&quot;&gt;dyld&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, the dynamic linker, starts mapping all libraries that the binary depends on and executes any initializers they might have. Unfortunately, one of the first libraries now being initialized, &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;libsystem_secinit.dylib&lt;/span&gt;&lt;span&gt;, tries to determine whether it should initialize the app sandbox based on the binary&amp;rsquo;s platform and its &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://developer.apple.com/documentation/bundleresources/entitlements&quot;&gt;entitlements&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;. The logic is roughly:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;initialize_app_sandbox = False&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;if entitlement(&amp;ldquo;com.apple.security.app-sandbox&amp;rdquo;) == True:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; initialize_app_sandbox = True&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;if active_platform() == PLATFORM_IOS &amp;amp;&amp;amp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp;entitlement(&amp;ldquo;com.apple.private.security.no-sandbox&amp;rdquo;) != True:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; initialize_app_sandbox = True&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;As such, &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;libsystem_secinit&lt;/span&gt;&lt;span&gt;&amp;nbsp;will decide that it should initialize the app sandbox and will then contact &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;secinitd(8)&lt;/span&gt;&lt;span&gt;, &amp;ldquo;the security policy initialization daemon&amp;rdquo;, to obtain a sandbox profile. As that daemon cannot determine the app corresponding to the process in question it will fail, and &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;libsystem_secinit.dylib&lt;/span&gt;&lt;span&gt;&amp;nbsp;will then &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;abort(3)&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;the process:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;(lldb) bt&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;* thread #1, queue = &amp;#39;com.apple.main-thread&amp;#39;, stop reason = EXC_BREAKPOINT&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; * frame #0: libsystem_secinit.dylib`_libsecinit_appsandbox.cold.5&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #1: libsystem_secinit.dylib`_libsecinit_appsandbox&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #2: libsystem_trace.dylib` ...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #3: libsystem_secinit.dylib`_libsecinit_initializer&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #4: libSystem.B.dylib`libSystem_initializer&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #5: libdyld.dylib`...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #6: libdyld.dylib`...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #7: libdyld.dylib`dyld3::AllImages::runLibSystemInitializer&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #8: libdyld.dylib`...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #9: dyld`...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #10: dyld`dyld::_main&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #11: dyld`dyldbootstrap::start&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; frame #12: dyld`_dyld_start + 56&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;As a side note, logic like the above will turn out to be a somewhat common theme: various components responsible for the runtime environment will have special handling for iOS binaries, in which case they tend to enforce various policies more aggressively.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;One possible way to solve this would be to sign the iOS binary with a &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://support.apple.com/guide/keychain-access/create-self-signed-certificates-kyca8916/mac&quot;&gt;self-signed (and locally trusted) code signing certificate&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and granting it the &amp;ldquo;com.apple.private.security.no-sandbox&amp;rdquo; entitlement. This would then cause &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;libsystem_secinit&lt;/span&gt;&lt;span&gt;&amp;nbsp;to not attempt to initialize the app sandbox. Unfortunately, it seems that while AppleMobileFileIntegrity (&amp;ldquo;amfi&amp;rdquo; - the OS component implementing various security policies like entitlement and code signing checks) will allow macOS binaries to be signed by locally-trusted code-signing certificates if SIP is disabled, it will not do so for iOS binaries. Instead, it appears to enforce roughly the same requirements as on iOS, namely that the binary must either be signed by Apple directly (in case the app is downloaded from the app store) or there must exist a valid (i.e. one signed by Apple) &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://developer.apple.com/documentation/appstoreconnectapi/profiles&quot;&gt;provisioning profile&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;for the code-signing entity which explicitly allows the entitlements. As such, this path appears like a dead end.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;Another way to work around the sandbox initialization would be to use &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://opensource.apple.com/source/dyld/dyld-97.1/include/mach-o/dyld-interposing.h.auto.html&quot;&gt;dyld interposing&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to replace &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;xpc_copy_entitlements_for_self&lt;/span&gt;&lt;span&gt;, which &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;libsystem_secinit&lt;/span&gt;&lt;span&gt;&amp;nbsp;invokes to obtain the process&amp;rsquo; entitlements, with another function that would simply return the &amp;ldquo;com.apple.private.security.no-sandbox&amp;rdquo; entitlement. This would in turn prevent &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;libsystem_secinit&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;from attempting to initialize the sandbox.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;Unfortunately, the iOS process is subject to further restrictions, likely part of the &amp;ldquo;&lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://developer.apple.com/documentation/security/hardened_runtime&quot;&gt;hardened runtime&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;rdquo; suite, which causes dyld to disable library interposing (some more information on this mechanism is available &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://saagarjha.com/blog/2020/05/20/mac-app-store-sandbox-escape/&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;). This policy is also implemented by amfi, in AppleMobileFileIntegrity.kext (the kernel component of amfi):&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;__int64 __fastcall macos_dyld_policy_library_interposing(proc *a1, int *a2)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; int v3; // w8&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; v3 = *a2;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; ...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; if ( (v3 &amp;amp; 0x10400) == 0x10000 ) &amp;nbsp; // flag is set for iOS binaries&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; logDyldPolicyRejection(a1, &amp;quot;library interposing&amp;quot;, &amp;quot;Denying library interposing for iOS app\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; return 0LL;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; return 64LL;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;As can be seen, AMFI will deny library interposing for all iOS binaries. Unfortunately, I couldn&amp;rsquo;t come up with a better solution for this than to patch the code of dyld at runtime to ignore AMFI&amp;rsquo;s policy decision and thus allow library interposing. Fortunately though, doing lightweight runtime code patching is fairly easy through the use of some classic &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;http://web.mit.edu/darwin/src/modules/xnu/osfmk/man/&quot;&gt;mach APIs&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;c8 lst-kix_ii04ufl4nr9k-0 start&quot; start=&quot;1&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;Find the offset of &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;_amfi_check_dyld_policy_self&lt;/span&gt;&lt;span&gt;&amp;nbsp;in /usr/lib/dyld, e.g. with &lt;/span&gt;&lt;span class=&quot;c2&quot;&gt;nm(1)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;Start the iOS process with the &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;POSIX_SPAWN_START_SUSPENDED&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;attribute so it is initially suspended (the equivalent of SIGSTOP). At this point, only dyld and the binary itself will have been mapped into the process&amp;rsquo; memory space by the kernel.&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;&amp;ldquo;Attach&amp;rdquo; to the process using &lt;/span&gt;&lt;span class=&quot;c2&quot;&gt;task_for_pid&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;Find the location of dyld in memory through &lt;/span&gt;&lt;span class=&quot;c7 c11&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://developer.apple.com/documentation/kernel/1585424-vm_region_recurse_64&quot;&gt;vm_region_recurse_64&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;Map dyld&amp;rsquo;s code section writable using &lt;/span&gt;&lt;span class=&quot;c7 c11&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://developer.apple.com/documentation/kernel/1585294-vm_protect&quot;&gt;vm_protect&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;(VM_PROT_READ | VM_PROT_WRITE | VM_PROT_COPY)&lt;/span&gt;&lt;span&gt;&amp;nbsp;(where &lt;/span&gt;&lt;span class=&quot;c7 c11&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/osfmk/mach/vm_prot.h#L116&quot;&gt;VM_PROT_COPY&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;is seemingly necessary to force the pages to be copied since they are shared)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;Patch &amp;nbsp;&lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;_amfi_check_dyld_policy_self&lt;/span&gt;&lt;span&gt;&amp;nbsp;through &lt;/span&gt;&lt;span class=&quot;c7 c11&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://developer.apple.com/documentation/kernel/1585462-vm_write&quot;&gt;vm_write&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to simply return 0x5f (indicating that dyld interposing and other features should be allowed)&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;Map dyld&amp;rsquo;s code section executable again&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;To be able to use the &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;task_for_pid&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;trap, the runner binary will either need the &amp;ldquo;com.apple.security.cs.debugger&amp;rdquo; entitlement or root privileges. However, as the runner is a macOS binary, it can be given this entitlement through a self-signed certificate which amfi will then allow.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;As such, the full steps necessary to launch an iOS binary on macOS are:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;c8 lst-kix_kfxac5q5c62u-0 start&quot; start=&quot;1&quot;&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;Use the &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;posix_spawnattr_set_platform_np&lt;/span&gt;&lt;span&gt;&amp;nbsp;API to set the target platform to &lt;/span&gt;&lt;span class=&quot;c2&quot;&gt;PLATFORM_IOS&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;Execute the new process via &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;posix_spawn(2)&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;and start it suspended&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;Patch dyld to allow library interposing&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;In the interposed library, claim to possess the com.apple.security.cs.debugger entitlement by replacing &lt;/span&gt;&lt;span class=&quot;c2&quot;&gt;xpc_copy_entitlements_for_self&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot;margin-left: 46pt;&quot; class=&quot;c0 c1 li-bullet-0&quot;&gt;&lt;span&gt;Continue the process by sending it &lt;/span&gt;&lt;span class=&quot;c2&quot;&gt;SIGCONT&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;This can now be seen in action:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&amp;gt; cat hello.c&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;int main() {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;Hello from an iOS binary!&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&amp;gt; clang -arch arm64 hello.c -o hello -isysroot \ &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk interpose.dylib&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c13&quot;&gt;&amp;gt; ./runner hello&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;[*] Preparing to execute iOS binary hello&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;[+] Child process created with pid: 48302&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;[*] Patching child process to allow dyld interposing...&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;[*] _amfi_check_dyld_policy_self at offset 0x54d94 in /usr/lib/dyld&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;[*] /usr/lib/dyld mapped at 0x1049ec000&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;[+] Successfully patched _amfi_check_dyld_policy_self&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;[*] Sending SIGCONT to continue child&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;[*] Faking no-sandbox entitlement in xpc_copy_entitlements_for_self&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c2&quot;&gt;Hello from an iOS binary!&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c11&quot;&gt;[*] Child exited with status 0&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c9&quot; id=&quot;h.n4nfplsmx7xs&quot;&gt;&lt;span&gt;Fuzzing&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;With the ability to launch iOS processes, it now becomes possible to fuzz existing iOS code natively on macOS as well. I decided to use &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://github.com/google/honggfuzz&quot;&gt;Honggfuzz&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for a simple PoC of this that also used lightweight coverage guidance (based on the &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://github.com/googleprojectzero/p0tools/tree/master/TrapFuzz&quot;&gt;Trapfuzz&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;instrumentation approach&lt;/span&gt;&lt;span&gt;). The main issue with this approach is that honggfuzz uses the combination of &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;fork(2)&lt;/span&gt;&lt;span&gt;&amp;nbsp;followed by &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;execve(2)&lt;/span&gt;&lt;span&gt;&amp;nbsp;to create the child processes, while also performing various operations, such as dup2&amp;rsquo;ing file descriptors, setting environment variables, etc after forking but before exec&amp;rsquo;ing. However, the iOS binary must be executed through &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;posix_spawn&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;, which means that these operations must be performed at some other time. Furthermore, as honggfuzz itself is still compiled for macOS, some steps of the compilation of the target binary will fail (they will attempt to link previously compiled .o files, but now the platform no longer matches) and so have to be replaced. There are certainly better ways to do this (and I encourage the reader to implement it properly), but this was the approach that I got to work the quickest. &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span&gt;The hacky proof-of-concept patch for honggfuzz can be found &lt;/span&gt;&lt;span class=&quot;c7&quot;&gt;&lt;a class=&quot;c101&quot; href=&quot;https://github.com/googleprojectzero/p0tools/tree/master/iOSOnMac/honggfuzz_ios_on_mac.patch&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. In addition to building honggfuzz for arm64, the honggfuzz binary is subsequently signed and given the &amp;ldquo;com.apple.security.cs.debugger&amp;rdquo; entitlement in order for &lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;task_for_pid&lt;/span&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp;to work.&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c9&quot; id=&quot;h.qvsv5dvirmh0&quot;&gt;&lt;span class=&quot;c12&quot;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;This blog post discussed how iOS apps are run on macOS and how that functionality can be used to execute any code compiled for iOS natively on macOS. This in turn can facilitate dynamic analysis and fuzzing of iOS code, and thus might make the platform a tiny bit more open for security researchers.&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c9&quot; id=&quot;h.ptze72wmo30c&quot;&gt;&lt;span class=&quot;c12&quot;&gt;Attachment 1: runner.c&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// clang -o runner runner.c&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// cat &amp;lt;&amp;lt;EOF &amp;gt; entitlements.xml&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;\&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// &amp;lt;dict&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// &amp;nbsp; &amp;nbsp; &amp;lt;key&amp;gt;com.apple.security.cs.debugger&amp;lt;/key&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// &amp;nbsp; &amp;nbsp; &amp;lt;true/&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// &amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// &amp;lt;/plist&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// EOF&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// # Find available code signing identities using `security find-identity`&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// codesign -s &amp;quot;$IDENTITY&amp;quot; --entitlements entitlements.xml runner&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;//&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;spawn.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;mach/mach_init.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;mach/vm_map.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;mach/vm_page_size.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#define page_align(addr) (vm_address_t)((uintptr_t)(addr) &amp;amp; (~(vm_page_size - 1)))&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#define PLATFORM_IOS 2&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;extern char **environ;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;extern int posix_spawnattr_set_platform_np(posix_spawnattr_t*, int, int);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;void instrument(pid_t pid) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; kern_return_t kr;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; task_t task;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;[*] Patching child process to allow dyld interposing...&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; // Find patch point&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; FILE* output = popen(&amp;quot;nm -arch arm64e /usr/lib/dyld &amp;nbsp;| grep _amfi_check_dyld_policy_self&amp;quot;, &amp;quot;r&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; unsigned int patch_offset;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; int r = fscanf(output, &amp;quot;%x t _amfi_check_dyld_policy_self&amp;quot;, &amp;amp;patch_offset);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (r != 1) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;Failed to find offset of _amfi_check_dyld_policy_self in /usr/lib/dyld\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] _amfi_check_dyld_policy_self at offset 0x%x in /usr/lib/dyld\n&amp;quot;, patch_offset);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; // Attach to the target process&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; kr = task_for_pid(mach_task_self(), pid, &amp;amp;task);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;task_for_pid failed. Is this binary signed and possesses the com.apple.security.cs.debugger entitlement?\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; vm_address_t dyld_addr = 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; int headers_found = 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; vm_address_t addr = 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; vm_size_t size;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; vm_region_submap_info_data_64_t info;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; mach_msg_type_number_t info_count = VM_REGION_SUBMAP_INFO_COUNT_64;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; unsigned int depth = 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; while (1) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // get next memory region&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr = vm_region_recurse_64(task, &amp;amp;addr, &amp;amp;size, &amp;amp;depth, (vm_region_info_t)&amp;amp;info, &amp;amp;info_count);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; unsigned int header;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; vm_size_t bytes_read;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kr = vm_read_overwrite(task, addr, 4, (vm_address_t)&amp;amp;header, &amp;amp;bytes_read);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // TODO handle this, some mappings are probably just not readable&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;vm_read_overwrite failed\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (bytes_read != 4) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // TODO handle this properly&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;[-] vm_read read to few bytes\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (header == 0xfeedfacf) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; headers_found++;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (headers_found == 2) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // This is dyld&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dyld_addr = addr;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; addr += size;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (dyld_addr == 0) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;[-] Failed to find /usr/lib/dyld\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] /usr/lib/dyld mapped at 0x%lx\n&amp;quot;, dyld_addr);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; vm_address_t patch_addr = dyld_addr + patch_offset;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; // VM_PROT_COPY forces COW, probably, see vm_map_protect in vm_map.c&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; kr = vm_protect(task, page_align(patch_addr), vm_page_size, false, VM_PROT_READ | VM_PROT_WRITE | VM_PROT_COPY);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;vm_protect failed\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; // MOV X8, 0x5f&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; // STR X8, [X1]&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; // RET&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; const char* code = &amp;quot;\xe8\x0b\x80\xd2\x28\x00\x00\xf9\xc0\x03\x5f\xd6&amp;quot;;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; kr = vm_write(task, patch_addr, (vm_offset_t)code, 12);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;vm_write failed\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; kr = vm_protect(task, page_align(patch_addr), vm_page_size, false, VM_PROT_READ | VM_PROT_EXECUTE);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (kr != KERN_SUCCESS) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;vm_protect failed\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;[+] Successfully patched _amfi_check_dyld_policy_self&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;} &lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;int run(const char** argv) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; pid_t pid;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; int rv;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_t attr;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; rv = posix_spawnattr_init(&amp;amp;attr);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (rv != 0) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; perror(&amp;quot;posix_spawnattr_init&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; rv = posix_spawnattr_setflags(&amp;amp;attr, POSIX_SPAWN_START_SUSPENDED);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (rv != 0) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; perror(&amp;quot;posix_spawnattr_setflags&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; rv = posix_spawnattr_set_platform_np(&amp;amp;attr, PLATFORM_IOS, 0);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (rv != 0) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; perror(&amp;quot;posix_spawnattr_set_platform_np&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; rv = posix_spawn(&amp;amp;pid, argv[0], NULL, &amp;amp;attr, argv, environ);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (rv != 0) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; perror(&amp;quot;posix_spawn&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[+] Child process created with pid: %i\n&amp;quot;, pid);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; instrument(pid);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] Sending SIGCONT to continue child\n&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; kill(pid, SIGCONT);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; int status;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; rv = waitpid(pid, &amp;amp;status, 0);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (rv == -1) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;perror(&amp;quot;waitpid&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return -1;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] Child exited with status %i\n&amp;quot;, status);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; posix_spawnattr_destroy(&amp;amp;attr);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;int main(int argc, char* argv[]) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; if (argc &amp;lt;= 1) {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; printf(&amp;quot;Usage: %s path/to/ios_binary\n&amp;quot;, argv[0]);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 0;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; printf(&amp;quot;[*] Preparing to execute iOS binary %s\n&amp;quot;, argv[1]);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; return run(argv + 1);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 class=&quot;c9&quot; id=&quot;h.1d2ckyi1al&quot;&gt;&lt;span&gt;Attachment 2: interpose.c&lt;/span&gt;&lt;/h2&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// clang interpose.c -arch arm64 -o interpose.dylib -shared -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;typedef void* xpc_object_t;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;extern xpc_object_t xpc_dictionary_create(void*, void*, int);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;extern void xpc_dictionary_set_value(xpc_object_t, const char*, xpc_object_t);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;extern xpc_object_t xpc_bool_create(int);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;extern xpc_object_t xpc_copy_entitlements_for_self();&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;// From https://opensource.apple.com/source/dyld/dyld-97.1/include/mach-o/dyld-interposing.h.auto.html&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;/*&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp;Example:&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;*&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp;static&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp;int&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp;my_open(const char* path, int flags, mode_t mode)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp;{&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;int value;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;// do stuff before open (including changing the arguments)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;value = open(path, flags, mode);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;// do stuff after open (including changing the return value(s))&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp; &amp;nbsp;return value;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;* &amp;nbsp;DYLD_INTERPOSE(my_open, open)&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp;*/&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;#define DYLD_INTERPOSE(_replacment,_replacee) \&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp;__attribute__((used)) static struct{ const void* replacment; const void* replacee; } _interpose_##_replacee \&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; __attribute__ ((section (&amp;quot;__DATA,__interpose&amp;quot;))) = { (const void*)(unsigned long)&amp;amp;_replacment, (const void*)(unsigned long)&amp;amp;_replacee };&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;xpc_object_t my_xpc_copy_entitlements_for_self() {&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; puts(&amp;quot;[*] Faking com.apple.private.security.no-sandbox entitlement in interposed xpc_copy_entitlements_for_self&amp;quot;);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; xpc_object_t dict = xpc_dictionary_create(NULL, NULL, 0);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; xpc_dictionary_set_value(dict, &amp;quot;com.apple.private.security.no-sandbox&amp;quot;, xpc_bool_create(1));&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;nbsp; &amp;nbsp; return dict;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0&quot;&gt;&lt;span class=&quot;c3&quot;&gt;DYLD_INTERPOSE(my_xpc_copy_entitlements_for_self, xpc_copy_entitlements_for_self);&lt;/span&gt;&lt;/p&gt;
 &lt;p class=&quot;c0 c4&quot;&gt;&lt;span class=&quot;c6&quot;&gt;&lt;/span&gt;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='https://googleprojectzero.blogspot.com/feeds/2146117790598367776/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://googleprojectzero.blogspot.com/2021/05/fuzzing-ios-code-on-macos-at-native.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/2146117790598367776'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4838136820032157985/posts/default/2146117790598367776'/><link rel='alternate' type='text/html' href='https://googleprojectzero.blogspot.com/2021/05/fuzzing-ios-code-on-macos-at-native.html' title='Fuzzing iOS code on macOS at native speed'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><thr:total>0</thr:total></entry>