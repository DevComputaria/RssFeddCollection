{"?xml":{"@version":"1.0","@encoding":"UTF-8"},"rss":{"@version":"2.0","@xmlns:content":"http://purl.org/rss/1.0/modules/content/","@xmlns:wfw":"http://wellformedweb.org/CommentAPI/","@xmlns:dc":"http://purl.org/dc/elements/1.1/","@xmlns:atom":"http://www.w3.org/2005/Atom","@xmlns:sy":"http://purl.org/rss/1.0/modules/syndication/","@xmlns:slash":"http://purl.org/rss/1.0/modules/slash/","channel":{"title":".NET Blog","atom:link":{"@href":"https://devblogs.microsoft.com/dotnet/feed/","@rel":"self","@type":"application/rss+xml"},"link":"https://devblogs.microsoft.com/dotnet/","description":"Free. Cross-platform. Open source. A developer platform for building all your apps.","lastBuildDate":"Thu, 16 Nov 2023 20:06:48 +0000","language":"en-US","sy:updatePeriod":"\n\thourly\t","sy:updateFrequency":"\n\t1\t","image":{"url":"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2018/10/Microsoft-Favicon.png","title":".NET Blog","link":"https://devblogs.microsoft.com/dotnet/","width":"32","height":"32"},"item":[{"title":"Announcing .NET 8","link":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8/","comments":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8/#comments","dc:creator":{"#cdata-section":"Gaurav Seth"},"pubDate":"Tue, 14 Nov 2023 19:00:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Core"},{"#cdata-section":".net 8"},{"#cdata-section":"featured"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=48790"},"description":{"#cdata-section":"<p>Today Microsoft announced the availability of .NET 8, the latest version of one of the world’s leading programming languages and development platforms.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8/\">Announcing .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p><div style=\"text-align:center\"><a class=\"cta_button_link\" href=\"https://aka.ms/get-dotnet-8\" style=\"text-transform: titlecase; display: inline-block; background-color: #5c33b8; color: white; padding: 10px; margin:10px 0; text-decoration: none;\" target=\"_blank\">Download .NET 8 today!</a></div></p>\n<p>We are happy to announce the availability of <a href=\"https://aka.ms/get-dotnet-8\">.NET 8</a>, the latest <a href=\"https://dotnet.microsoft.com/platform/support/policy/dotnet-core#release-types\">LTS</a> version of one of the world’s leading development platforms, starting today. .NET 8 delivers thousands of performance, stability, and security improvements, as well as platform and tooling enhancements that help increase developer productivity and speed of innovation. The .NET team, our partners, and the .NET community will be talking about what’s new in .NET 8 as well as what people are building with .NET today to meet their needs of tomorrow at  <a href=\"https://www.dotnetconf.net/\">.NET Conf 2023, a three day virtual event (November 14-16)</a>. Come, join us!</p>\n<p><a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\"><img decoding=\"async\" class=\"aligncenter\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/Banner4.png\" alt=\".NET 8 is now available\" width=\"600\" /></a></p>\n<p>With this release, .NET reshapes the way we build intelligent, cloud-native applications and high-traffic services that scale on demand. Whether you’re deploying to Linux or Windows, using containers or a cloud app model of your choice, .NET 8 makes building these apps easier. It includes a set of proven libraries that are used today by the many high-scale services at Microsoft to help you with fundamental challenges around observability, resiliency, scalability, manageability, and more.</p>\n<p><a href=\"https://aka.ms/aspireannouncement\"><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/Cloud-Native-dotnet8.png\" alt=\".NET 8 - Cloud Native Features\" /></a></p>\n<p>Integrate large language models (LLMs) like OpenAI’s GPT directly into your .NET app. Use a single powerful component model to handle all your web UI needs with Blazor. Deploy your mobile applications to the latest version of iOS and Android with .NET MAUI. Discover new language enhancements that make your code more concise and expressive with C# 12.  </p>\n<p>Let’s look at what’s new in .NET 8. </p>\n<h2 id=\"unparalleled-performance-experience-the-fastest-net-to-date\">Unparalleled Performance &#8211; Experience the fastest .NET to date</h2>\n<p>.NET 8 comes with thousands of performance <a href=\"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-8/\">improvements</a> <a href=\"https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-8/\">across</a> <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-8-performance-improvements-in-dotnet-maui/\">the</a> <a href=\"https://devblogs.microsoft.com/dotnet/this-arm64-performance-in-dotnet-8/\">stack</a>. A new code generator called Dynamic Profile-Guided Optimization (PGO) that optimizes your code based on real-world usage is enabled by default and can improve the performance of your apps up to 20%. The AVX-512 instruction set, which is now supported, enables you to perform parallel operations on 512-bit vectors of data, meaning you can process much more data in less time. The primitive types (numerical and beyond) now implement a new formattable and parsable interface, which enable them to directly format and parse as UTF-8 without any transcoding overhead.</p>\n<p>Every year we talk about the performance gains across .NET. This year we continue our quest to push the performance of .NET to new heights. From the latest TechEmpower benchmarks with .NET 8, we’re seeing improvements in the JSON API scenario of 18%, hitting nearly one million requests per second with ASP.NET Core Minimal APIs.</p>\n<p><a href=\"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-8/\"><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/Performance2.png\" alt=\"TechEmpower requests per second (RPS)\" /></a></p>\n<p>The Fortunes scenario is closer to a real-world workload, including database access and server-side HTML rendering. In this test, we see an even larger improvement of 24%, now over 300K requests per second with ASP.NET Core.</p>\n<h2 id=\"net-aspire-an-opinionated-stack-to-build-observable-production-ready-cloud-native-applications\">.NET Aspire &#8211; An opinionated stack to build observable, production-ready cloud-native applications</h2>\n<p>.NET Aspire is a stack for building resilient, observable, and configurable cloud-native applications with .NET. It includes a curated set of components enhanced for cloud-native by including telemetry, resilience, configuration, and health checks by default. Combined with a sophisticated but simple local developer experience, .NET Aspire makes it easy to discover, acquire, and configure essential dependencies for cloud-native applications on day 1 as well as day 100. The <a href=\"https://aka.ms/aspireannouncement\">first preview</a> of .NET Aspire is available today.</p>\n<p><a href=\"https://aka.ms/aspireannouncement\"><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/Aspire-CTAs1.png\" alt=\".NET Aspire\" /></a></p>\n<h2 id=\"net-8-container-enhancements-more-secure-compact-and-productive\">.NET 8 Container Enhancements &#8211; More secure, compact, and productive</h2>\n<p>Package your applications with <a href=\"https://devblogs.microsoft.com/dotnet/securing-containers-with-rootless/\">containers more easily and more securely than ever with .NET</a>. Every .NET image includes a non-root user, enabling more secure containers with one-line configuration. The .NET SDK tooling publishes container images without a Dockerfile and are non-root by default. Deploy your containerized apps faster due to smaller .NET base images – including new experimental variants of our images that deliver truly minimal application sizes for native AOT. Opt-in to even more security hardening with the new Chiseled Ubuntu image variants to reduce your attack surface even further. Using Dockerfiles or SDK tooling, build apps and container images for any architecture.</p>\n<p><a href=\"https://devblogs.microsoft.com/dotnet/securing-containers-with-rootless/\"><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/Containers2.png\" alt=\"Modern containers\" /></a></p>\n<h2 id=\"native-aot-journey-towards-higher-density-sustainable-compute\">Native AoT &#8211; Journey towards higher density sustainable compute</h2>\n<p>Compile your .NET apps into <a href=\"https://learn.microsoft.com/dotnet/core/deploying/native-aot\">native code</a> that uses less memory and starts instantly. No need to wait for the JIT (just-in-time) compiler to compile the code at run time. No need to deploy the JIT compiler and IL code. AOT apps deploy just the code that’s needed for your app. Your app is now empowered to run in restricted environments where a JIT compiler isn&#8217;t allowed.</p>\n<p><a href=\"https://learn.microsoft.com/dotnet/core/deploying/native-aot\"><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/AOTOptimizations4.png\" alt=\"Before and After AOT\" /></a></p>\n<h2 id=\"artificial-intelligence-infuse-ai-into-your-net-applications\">Artificial Intelligence &#8211; Infuse AI into your .NET applications</h2>\n<p>Generative AI and large language models are transforming the field of AI, providing developers the ability to create unique AI-powered experiences in their applications. <a href=\"https://aka.ms/dotnet-genai\">.NET 8 makes it simple for you to leverage AI</a> via first-class out-of-the box AI features in the .NET SDK and seamless integration with several tools. </p>\n<p>.NET 8 brings several enhancements to the <code>System.Numerics</code> library to improve its compatibility with Generative AI workloads, such as integrating Tensor Primitives. With the rise of AI-enabled apps, new tools and SDKs emerged. We collaborated with numerous internal and external partners, such as <a href=\"https://azure.microsoft.com/products/ai-services/openai-service\">Azure OpenAI</a>, <a href=\"https://azure.microsoft.com/free/ai-services/?ef_id=_k_b34c5d449bf4175800e738086ecc7267_k_&amp;OCID=AIDcmm5edswduu_SEM__k_b34c5d449bf4175800e738086ecc7267_k_&amp;msclkid=b34c5d449bf4175800e738086ecc7267\">Azure Cognitive Search</a>, <a href=\"https://milvus.io/docs/v2.2.x/install-csharp.md\">Milvus</a>, <a href=\"https://github.com/qdrant/qdrant-dotnet\">Qdrant</a>, and <a href=\"https://github.com/microsoft/teams-ai\">Microsoft Teams</a>, to ensure .NET developers have easy access to various AI models, services, and platforms through their respective SDKs. Additionally, the open-source <a href=\"https://learn.microsoft.com/semantic-kernel/overview/\">Semantic Kernel</a> SDK simplifies the integration of these AI components into new and existing applications, to help you deliver innovative user experiences.</p>\n<p>Various samples and reference templates, showcasing patterns and practices, are now available to make it easy for developers to get started:</p>\n<ul>\n<li><a href=\"https://github.com/dotnet/eShop\">Customer Chatbot</a></li>\n<li><a href=\"https://github.com/Azure-Samples/azure-search-openai-demo-csharp\">Retrieval Augmented Generation</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/demystifying-retrieval-augmented-generation-with-dotnet/\">Developing Apps using Azure AI services</a> </li>\n</ul>\n<p><a href=\"https://github.com/Azure-Samples/azure-search-openai-demo-csharp/assets/2546640/b79090b8-6a8b-45f4-b42b-e21e22b1661a\"><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/InfuseAIdotnetapps1.png\" alt=\"Infuse AI dotnet apps\" /></a></p>\n<h2 id=\"blazor-build-full-stack-web-applications-with-net\">Blazor &#8211; Build full stack web applications with .NET</h2>\n<p>Blazor in .NET 8 can use both the server and client together to handle all your web UI needs. It’s full stack web UI! With several new enhancements focused towards optimizing page load time, scalability, and elevating the user experience, developers can now use <a href=\"https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor\">Blazor Server and Blazor WebAssembly</a> in the same app, automatically shifting users from the server to the client at run time. Your .NET code runs significantly faster on WebAssembly thanks to the new “Jiterpreter”-based runtime and new built-in components. As a part enhancing the overall <a href=\"https://devblogs.microsoft.com/dotnet/whats-new-with-identity-in-dotnet-8/\">authentication, authorization, and identity management in .NET 8</a>, Blazor now supports generating a full Blazor-based Identity UI.</p>\n<p><a href=\"https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor\"><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/Blazor2.png\" alt=\"Full stack Blazor\" /></a></p>\n<h2 id=\"net-maui-elevated-performance-reliability-and-developer-experience\"><a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8\">.NET MAUI &#8211; Elevated performance, reliability, and developer experience</a></h2>\n<p>.NET MAUI provides you with a single project system and single codebase to build WinUI, Mac Catalyst, iOS, and Android applications. Native AOT (experimental) now supports targeting iOS-like platforms. <a href=\"https://aka.ms/maui-devkit-blog\">A new Visual Studio Code extension for .NET MAUI</a> gives you the tools you need to develop cross-platform .NET mobile and desktop apps. Xcode 15 and Android API 34 are now supported allowing you to target the latest version of iOS and Android. A plethora of quality improvements were made to the <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-8-performance-improvements-in-dotnet-maui\">areas of performance</a>, controls and UI elements, and platform-specific behavior, such as desktop interaction adding better click handling, keyboard listeners, and more.</p>\n<p><a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8\"><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/dotnetMAUIin8-1.png\" alt=\".NET MAUI Visual Studio Code Extension\" /></a></p>\n<h2 id=\"c-12-features-simplified-syntax-for-better-developer-productivity\">C# 12 Features &#8211; Simplified syntax for better developer productivity</h2>\n<p>C# 12 makes your coding experience more productive and enjoyable. You can now create primary constructors in any class and struct with a simple and elegant syntax. No more boilerplate code to initialize your fields and properties. Be delighted when creating arrays, spans, and other collection types with a concise and expressive syntax. Use new default values for parameters in lambda expressions. No more overloading or null checks to handle optional arguments. You can even use the <code>using</code> alias directive to alias any type, not just named types!</p>\n<p><strong>Collection expressions</strong></p>\n<pre><code class=\"language-csharp\">// Create a list:\nList&lt;int&gt; a = [1, 2, 3, 4, 5, 6, 7, 8];\n\n// Create a span\nSpan&lt;char&gt; b  = ['a', 'b', 'c', 'd', 'e', 'f', 'h', 'i'];\n\n// Use the spread operator to concatenate\nint[] array1 = [1, 2, 3];\nint[] array2 = [4, 5, 6];\nint[] array3 = [7, 8, 9];\nint[] fullArray = [..array1, ..array2, ..array3]; // contents is [1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre>\n<p>See more about the latest version of C# in <a href=\"https://devblogs.microsoft.com/dotnet/announcing-csharp-12\">Announcing C# 12</a>.</p>\n<h2 id=\"net-8-support-across-visual-studio-family-of-tools\">.NET 8 support across Visual Studio family of tools</h2>\n<p>We have a set of great tools that help you be the most productive in your development workflow and take advantage of .NET 8 today. Released alongside .NET 8, the <a href=\"https://aka.ms/vs/v178GA\">Visual Studio 2022 17.8 release</a> brings support for .NET 8, C# 12 language enhancements, and various new productivity features. <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csdevkit\">VS Code and C# Dev Kit</a> is a great way to get started with .NET 8 if you&#8217;re learning and/or want to quickly kick the tires of the runtime and is available on Linux, macOS, or in GitHub Codespaces. The new <a href=\"https://github.com/codespaces\">GitHub Codespaces template for .NET</a>, which comes with the .NET SDK and a set of configured extensions, is one of the fastest ways to get started with .NET 8. </p>\n<h3 id=\"additional-features-in-net-8\">Additional features in .NET 8:</h3>\n<ul>\n<li><strong>ASP.NET Core.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/whats-new-with-identity-in-dotnet-8/\">Streamlines identity for single-page applications (SPA) and Blazor providing cookie-based authentication, pre-built APIs, token support, and a new identity UI.</a> and <a href=\"https://learn.microsoft.com/aspnet/core/release-notes/aspnetcore-8.0#minimal-apis\">enhances minimal APIs with form-binding, antiforgery support to protect against cross-site request forgery (XSRF/CSRF), and <code>asParameters</code> support for parameter-binding with Open API definitions</a></li>\n<li><strong>ASP.NET Core tooling.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/aspnet-core-route-tooling-dotnet-8/\">Route syntax highlighting, auto-completion, and analyzers to help you create Web APIs.</a></li>\n<li><strong>Entity Framework Core.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/announcing-ef8-rc2/\">Provides new &#8220;complex types&#8221; as value objects, primitive collections, and SQL Server support for hierarchical data.</a></li>\n<li><strong>NuGet.</strong> <a href=\"https://learn.microsoft.com/nuget/concepts/auditing-packages\">Helps you audit your NuGet packages in projects and solutions for any known security vulnerabilities.</a></li>\n<li><strong>.NET Runtime.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-rc1/#androidstripilafteraot-mode-on-android\">Brings a new AOT compilation mode for WebAssembly (WASM) and Android.</a></li>\n<li><strong>.NET SDK.</strong> <a href=\"https://learn.microsoft.com/dotnet/core/whats-new/dotnet-8#net-sdk\">Revitalizes terminal build output and production-ready defaults.</a></li>\n<li><strong>WPF.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/wpf-file-dialog-improvements-in-dotnet-8/\">Supports OpenFolderDialog</a> and <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-rc1/#wpf-hardware-acceleration-in-rdp\">Enabled HW Acceleration in RDP</a></li>\n<li><strong>ARM64.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/this-arm64-performance-in-dotnet-8/\">Significant feature enhancements and improved code quality for ARM64 platforms through collaboration with ARM engineers.</a></li>\n<li><strong>Debugging.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/debugging-enhancements-in-dotnet-8/\">Displays debug summaries and provides simplified debug proxies for commonly used .NET types.</a></li>\n<li><strong>System.Text.Json.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/system-text-json-in-dotnet-8/\">Helps populate read-only members, customizes unmapped member handling, and improves Native AOT support.</a></li>\n<li><strong>.NET Community Toolkit.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-821/\">Accelerates building .NET libraries and applications while ensuring they are trim and AOT compatible (including the MVVM source generators!)</a></li>\n<li><strong>Azure.</strong> <a href=\"https://aka.ms/appservice-dotnet8\">Supports .NET 8 with Azure&#8217;s PaaS services like App Service for Windows and Linux, Static Web Apps, Azure Functions, and Azure Container Apps.</a></li>\n<li><strong>F# 8.</strong> <a href=\"https://devblogs.microsoft.com/dotnet/announcing-fsharp-8/\">Includes significant language changes, new diagnostics, improvements in usability, and performance enhancements in project compilation, as well as upgrades to the FSharp.Core standard library.</a></li>\n<li><strong>What&#8217;s new in .NET 8.</strong> <a href=\"https://learn.microsoft.com/dotnet/core/whats-new/dotnet-8\">Check out our documentation for everything else!</a></li>\n</ul>\n<h3 id=\"get-started-with-net-8\">Get started with .NET 8</h3>\n<p>For the best development experience with .NET 8, we recommend that you use the latest release of <a href=\"https://visualstudio.microsoft.com/downloads/\">Visual Studio</a> and <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csdevkit\">Visual Studio Code&#8217;s C# Dev Kit</a>. Once you&#8217;re set up, here are some of the things you should do:</p>\n<ul>\n<li><strong>Try the new features and APIs.</strong> <a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\">Download .NET 8</a> and <a href=\"https://github.com/dotnet/core/issues/new/choose\">report issues in our issue tracker</a>.</li>\n<li><strong>Test your current app for compatibility.</strong> Learn whether your app is <a href=\"https://learn.microsoft.com/dotnet/core/compatibility/8.0\">affected by default behavior changes in .NET 8</a>.</li>\n<li><strong>Test your app with opt-in changes.</strong> .NET 8 has <a href=\"https://learn.microsoft.com/dotnet/core/compatibility/8.0\">opt-in behavior changes</a> that only affect your app when enabled. It&#8217;s important to understand and assess these changes early as they may become default in the next release.</li>\n<li><strong>Update your app with the Upgrade Assistant.</strong> <a href=\"https://dotnet.microsoft.com/platform/upgrade-assistant\">Upgrade your app with just a few clicks using the Upgrade Assistant</a>.</li>\n<li><strong>Know you&#8217;re supported.</strong> .NET 8 is officially supported by Microsoft as a <a href=\"https://dotnet.microsoft.com/platform/support/policy/dotnet-core#release-types\">long term support (LTS) release that will be supported for three years</a>.</li>\n<li><strong>Bonus: eShop Sample for .NET 8.</strong> Follow all the best coding and architecture practices with our <a href=\"https://github.com/dotnet/eshop\">new eShop sample, now updated for .NET 8</a>!</li>\n</ul>\n<h3 id=\"celebrate-net-8\">Celebrate .NET 8</h3>\n<ul>\n<li><strong>.NET Conf 2023</strong>. <a href=\"https://www.dotnetconf.net/\">Join us November 14-16, 2023 to celebrate the .NET 8 release!</a></li>\n<li><strong>What&#8217;s next in .NET?</strong> <a href=\"https://dotnet.microsoft.com/next\">Get involved and learn the latest news on .NET 8 and the next version of .NET.</a></li>\n<li><strong>Get C# Certified</strong>. <a href=\"https://devblogs.microsoft.com/dotnet/announcing-foundational-csharp-certification/\">Earn a badge of honor with a freeCodeCamp C# certification.</a></li>\n<li><strong>Learn .NET 8</strong>. <a href=\"https://aka.ms/learn-dotnet-8\">Free tutorials, videos, courses, and more for beginner through advanced .NET developers. All updated for .NET 8!</a></li>\n<li><strong>See Developer Stories</strong>. <a href=\"https://devblogs.microsoft.com/dotnet/category/developer-stories/\">Take a look at success stories of developers migrating to modern .NET.</a></li>\n<li><strong>Read about why .NET?</strong>. <a href=\"https://devblogs.microsoft.com/dotnet/why-dotnet/\">Read through our recent blog series about the convenience of .NET.</a></li>\n</ul>\n<h3 id=\"net-%e2%9d%a4%ef%b8%8f-our-community\">.NET <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2764.png\" alt=\"❤\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> Our Community</h3>\n<p>We would just like to end by saying one big&#8230;</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/ThankYou.png\" alt=\"https://dotnet.microsoft.com/thanks/8.0\" /></p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8/\">Announcing .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8/feed/","slash:comments":"63"},{"title":"Introducing .NET Aspire: Simplifying Cloud-Native Development with .NET 8","link":"https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/","comments":"https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/#comments","dc:creator":{"#cdata-section":"Glenn Condron [MSFT]"},"pubDate":"Tue, 14 Nov 2023 18:55:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Core"},{"#cdata-section":"ASP.NET"},{"#cdata-section":"ASP.NET Core"},{"#cdata-section":"C#"},{"#cdata-section":"Cloud"},{"#cdata-section":"Cloud Native"},{"#cdata-section":"Linux"},{"#cdata-section":"Visual Studio"},{"#cdata-section":"Visual Studio Code"},{"#cdata-section":"azure"},{"#cdata-section":"cloud native"},{"#cdata-section":"distribute"},{"#cdata-section":"observable opentelemetry"},{"#cdata-section":"otel"},{"#cdata-section":"scalable"},{"#cdata-section":"stack"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=48863"},"description":{"#cdata-section":"<p>Introducing .NET Aspire: A cloud ready stack for building observable, production ready, distributed applications</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/\">Introducing .NET Aspire: Simplifying Cloud-Native Development with .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>For several releases now we&#8217;ve been making progress on one of our ongoing aspirational goals. Making .NET one of the most productive platforms on the planet for building cloud-native applications.</p>\n<p>We worked alongside some of the most demanding services at Microsoft with scaling needs unheard of for most apps, services supporting hundreds of millions of monthly active users. Working with these services to make sure we satisfied their needs ensured we had foundational capabilities that could meet the demands of high scale cloud services.</p>\n<p>We invested in important technologies and libraries such as Health Checks, YARP, HTTP client factory, and gRPC. With Native AOT, we&#8217;re working towards a sweet spot of perf and size, and SDK Container Builds make it trivial to get any .NET app into a container and ready for the modern cloud with no thought or work from the developer.</p>\n<p>But what we heard from developers is that we needed to do more. Building apps for the cloud was still too hard. Developers are increasingly pulled away from their business logic and what matters most to deal with the complexity of the cloud.</p>\n<p>To help you simplify cloud app complexity, we&#8217;re introducing&#8230;</p>\n<p><a href=\"https://aka.ms/dotnet-aspire\"><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/Aspire-CTAs1.png\" alt=\".NET Aspire\" /></a></p>\n<p>.NET Aspire is an <em>opinionated</em> stack for building resilient, observable, and configurable cloud-native applications with .NET. It includes a curated set of components enhanced for cloud-native by including service discovery, telemetry, resilience, and health checks by default. Combined with a sophisticated but simple local developer experience, .NET Aspire makes it easy to discover, acquire, and configure essential dependencies for cloud-native apps on day 1 as well as day 100, for new and existing .NET apps using .NET 8+.</p>\n<p>We&#8217;re shipping the first preview of .NET Aspire with .NET 8 and will GA as part of .NET 8 in spring next year. It&#8217;s part of .NET 8 and will version with .NET going forward (<strong><a href=\"https://aka.ms/dotnet/aspire/docs/overview\">Docs</a>, <a href=\"https://github.com/dotnet/aspire\">GitHub</a>).</strong></p>\n<h2 id=\"a-tour-of-net-aspire\">A Tour of .NET Aspire</h2>\n<p>To start with, let&#8217;s take a tour of the new <code>.NET Aspire Starter</code> template and touch on all the features before we dive deeper later in the post. This section is designed as a conversational overview that you can follow along with. You will need the latest .NET 8 and Visual Studio 2022 Preview (17.9 Preview 1). If you&#8217;re on Linux or Mac you can still follow along with everything but some of the tooling examples given will not be available yet.</p>\n<h3 id=\"visual-studio-solution-tour\">Visual Studio Solution Tour</h3>\n<p>The starter app is designed to get you up and running with a working .NET Aspire solution that you can try out. The app is made up of two projects and a Redis cache. The front-end project is a Blazor web application that calls a back-end API for weather information.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/dotnetAspire-Solution-Explorer2.png\" alt=\"dotnetAspire-Solution-Explorer\" /></p>\n<p>You&#8217;ll notice two new projects that you haven&#8217;t seen before <code>&lt;appname&gt;.AppHost</code> and <code>&lt;appname&gt;.ServiceDefaults</code>.</p>\n<p>The <code>AppHost</code> project will run any .NET projects, containers, or executables needed as part of getting your distributed application. When in Visual Studio, debugging will attach to all the running projects allowing you to step into and across each service in your application. We&#8217;ll dig deeper into this project and what the code in it is like <a href=\"#application-model\">later in the post</a>.</p>\n<p>The <code>ServiceDefaults</code> project contains common service-centric logic that applies to each of the projects in the app. This is where cross cutting concerns like service discovery, telemetry, and health check endpoints are configured. We wanted this to be consistent across all the projects but also understand that teams and organizations will likely want to tweak some of the settings. Shared code in the project was the most discoverable and developer friendly mechanism we could find to achieve those goals.</p>\n<h3 id=\"dashboard-your-central-hub-for-app-monitoring-and-inspection\">Dashboard &#8211; Your Central Hub for App Monitoring and Inspection</h3>\n<p>Launching a .NET Aspire starter application with <kbd>F5</kbd> in Visual Studio or dotnet run via command-line, brings you to the developer dashboard. This dashboard serves as an essential tool for debugging distributed applications, presenting a unified view of your services alongside their logs, metrics, and traces.</p>\n<p>This Dashboard is not merely a window into your cloud-native application; it&#8217;s an interactive platform that provides valuable insights into your projects and highlights any errors, allowing for deeper investigation. Below is an image showing a project with an identified error, indicated by a red dot:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/dotnet-Aspire-dashboard-projects-errors.png\" alt=\"dotnetAspire-Developer-Dashboard\" /></p>\n<p>We can also see logs across all projects, and even a distributed trace showing a request to the weather page. Traces are an indispensable tool in diagnosing problems in distributed systems.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/dotnet-Aspire-trace-view-filter.png\" alt=\"dotnetAspire-Distributed-Trace\" /></p>\n<p>The developer dashboard is your home for getting all your development time diagnostics data together and troubleshooting slowdowns and bugs on your development machine. It uses all the same open standards as you would use in production when you configure your production telemetry systems like Grafana+Prometheus, Application Insights, etc. We&#8217;ll go deeper into the dashboard <a href=\"#developer-dashboard\">later in this post</a>.</p>\n<p>A few years ago we worked on an experiment called Project Tye, many of the learnings from that experiment are now available in .NET Aspire, including this dashboard that we first tried out in that experiment. If you enjoyed Project Tye and wanted it to continue then we think you will love .NET Aspire.</p>\n<h3 id=\"components\">Components</h3>\n<p>Now let&#8217;s start looking at what is different about the projects. Firstly, the web project has a NuGet package with <code>Aspire</code> in the name <code>Aspire.StackExchange.Redis.OutputCaching</code>.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/dotnetAspire-Components-Dependencies-Packages.png\" alt=\"dotnetAspire-Components-Dependencies-Packages\" /></p>\n<p>If you&#8217;re following along and don&#8217;t see this package, you likely didn&#8217;t check the box to &#8220;use Redis caching&#8221; when you created the project.</p>\n<p>This NuGet package is what we call a <code>.NET Aspire Component</code>. Components are glue libraries that configure an SDK to operate in a cloud environment. Each component must:</p>\n<ul>\n<li>Provide JSON Schema to config to provide statement completion in <code>appsettings.json</code>.</li>\n<li>Leverage configurable resilience patterns such as retries, timeouts, and circuit breakers to maximize availability.</li>\n<li>Expose health checks enabling applications to track and respond to the remote service&#8217;s health.</li>\n<li>Offer integrated logging, metrics, and tracing using modern .NET abstractions (<code>ILogger</code>, <code>Meter</code>, <code>Activity</code>).</li>\n<li>Offer extension methods that &#8216;glue&#8217; the services from the SDK to the DI container with the right lifetime for the types being registered.</li>\n</ul>\n<p>We&#8217;ll go into more detail on components later in the post. The key takeaway is that .NET Aspire Components configure dependencies to honor a set of requirements that we believe sets up consumers for success in the cloud. They don&#8217;t wrap/hide the actual SDK/library, but rather act as glue to make sure the library is configured with a good set of defaults and registered with DI correctly. An exercise that is generally left to the developer today.</p>\n<h3 id=\"code\">Code</h3>\n<p>Now let&#8217;s look at the code in the Blazor app that is calling the weather API, and then at some of the code from the AppHost we talked about earlier. Firstly, in our web project&#8217;s <em>Program.cs</em> you can see code like this:</p>\n<pre><code class=\"language-csharp\">builder.Services.AddHttpClient&lt;WeatherApiClient&gt;(\n    client =&gt; client.BaseAddress = new(\"http://apiservice\"));</code></pre>\n<p>This is configuring our web front-end to be able to call the weather API. But there are a few things that are unusual about it, namely where does this <code>apiservice</code> name come from? To answer that, we&#8217;re going to look in our <code>AppHost</code> project for the first time, here is the <em>Program.cs</em> file from that project.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\n\nvar cache = builder.AddRedisContainer(\"cache\");\n\nvar apiservice = builder.AddProject&lt;Projects.AspireApp_ApiService&gt;(\"apiservice\");\n\nbuilder.AddProject&lt;Projects.AspireApp_Web&gt;(\"webfrontend\")\n    .WithReference(cache)\n    .WithReference(apiservice);\n\nbuilder.Build().Run();</code></pre>\n<p>This code executes because the <code>AppHost</code> is your startup project. It runs your projects, their dependencies and configures them appropriately allowing them to communicate. One of our goals is to remove ports and connection strings from your developer flow as much as possible. We do this via a <a href=\"#service-discovery\">service discovery</a> mechanism that allows developers use logical names instead of IP addresses and ports when making HTTP calls. You can see here that I name my API <code>apiservice</code>, then pass that as a reference to the front-end and can then use <code>apiservice</code> as a name when making HTTP calls via <code>IHttpClientFactory</code>. The calls made using this method will also automatically retry and handle transient failures, thanks to an integration with the <a href=\"https://github.com/App-vNext/Polly\">Polly project</a>.</p>\n<p>The AppHost sets up your app dependencies and requirements, and .NET Aspire tooling fulfills those in your dev loop.</p>\n<h2 id=\"deeper-dive\">Deeper Dive</h2>\n<h3 id=\"components\">Components</h3>\n<p>We&#8217;re going to start our deep dive with components. .NET Aspire Components are designed to solve the pain that we heard from customers getting started with cloud-native development, that there was a lot of techniques/configuration you had to get right and that it wasn&#8217;t obvious what path to start with. We help this by being <em>opinionated</em> about what a component needs to provide, mandating that all components at a minimum provide resiliency defaults, health checks, setup telemetry, and integrate with DI. To highlight that, let&#8217;s look at what an app ready for production might do to configure Redis in their app:</p>\n<ol>\n<li>Add the Redis package with the Redis client library.</li>\n<li>Discover and add a health checks library so your app can respond to the Redis being unavailable. This is frequently missed but useful in practice.</li>\n<li>Add Redis to DI and configure connection strings. This is tricky because you need to know what lifetime the Redis client library types should have. Which requires research.</li>\n<li>Configure Redis client library to send log output to your telemetry system.</li>\n<li>Logs and Metrics are different and require different plumbing.</li>\n<li>Decide what resiliency policy and logic is needed and configure Redis or wrap calls with a library like Poly that can implement resiliency policies. This again requires research into the capabilities of Redis and knowledge of what resiliency policy you should have, which is frequently not something you know starting out and results in people shipping without it until something breaks in production that could&#8217;ve been avoided with a retry policy with exponential backoff.</li>\n</ol>\n<p>If we contrast that with using .NET Aspire:</p>\n<ol>\n<li>Add the .NET Aspire Redis package.</li>\n<li>Call <code>AddRedis</code> on the builder.</li>\n<li>Optionally override default config in <em>appSettings.json</em> (which is now schematized so you have completion to discover what can be set).</li>\n</ol>\n<p>The .NET Aspire Components are crafted to provide you with an optimal production-ready configuration without concealing the underlying SDK. In both examples mentioned, your code for utilizing Redis will consistently employ the same Redis client library and types.</p>\n<p>A component must do the following to be considered ready for use:</p>\n<ul>\n<li>Provide detailed, schematized, configuration.</li>\n<li>Setup Health Checks to track and respond to the remote services health.</li>\n<li>Provide a default, configurable, resiliency pattern (retries, timeouts, etc) to maximize availability.</li>\n<li>Offer integrated logging, metrics, and tracing to make the component observable.</li>\n</ul>\n<p>Our initial set of components are listed below, and more documentation can be found at <a href=\"https://learn.microsoft.com/dotnet/aspire/components-overview\">.NET Aspire components overview | Microsoft Learn</a>.</p>\n<h3 id=\"cloud-agnostic-components\">Cloud-agnostic components</h3>\n<table>\n<thead>\n<tr>\n<th><strong>Component</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/database/postgresql-entity-framework-component\">PostgreSQL Entity Framework Core</a></td>\n<td>Provides a client library for accessing PostgreSQL databases using Entity Framework Core.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/database/postgresql-component\">PostgreSQL</a></td>\n<td>Provides a client library for accessing PostgreSQL databases.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/messaging/rabbitmq-client-component\">RabbitMQ</a></td>\n<td>Provides a client library for accessing RabbitMQ.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/caching/stackexchange-redis-distributed-caching-component\">Redis Distributed Caching</a></td>\n<td>Provides a client library for accessing Redis caches for distributed caching.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/caching/stackexchange-redis-output-caching-component\">Redis Output Caching</a></td>\n<td>Provides a client library for accessing Redis caches for output caching.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/caching/stackexchange-redis-component\">Redis</a></td>\n<td>Provides a client library for accessing Redis caches.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/database/sql-server-entity-framework-component\">SQL Server Entity Framework Core</a></td>\n<td>Provides a client library for accessing SQL Server databases using Entity Framework Core.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/database/sql-server-component\">SQL Server</a></td>\n<td>Provides a client library for accessing SQL Server databases.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"azure-specific-components\">Azure specific components</h3>\n<table>\n<thead>\n<tr>\n<th><strong>Component</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/storage/azure-storage-blobs-component\">Azure Blob Storage</a></td>\n<td>Provides a client library for accessing Azure Blob Storage.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/database/azure-cosmos-db-entity-framework-component\">Azure Cosmos DB Entity Framework Core</a></td>\n<td>Provides a client library for accessing Azure Cosmos DB databases with Entity Framework Core.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/database/azure-cosmos-db-component\">Azure Cosmos DB</a></td>\n<td>Provides a client library for accessing Azure Cosmos DB databases.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/security/azure-security-key-vault-component\">Azure Key Vault</a></td>\n<td>Provides a client library for accessing Azure Key Vault.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/messaging/azure-service-bus-component\">Azure Service Bus</a></td>\n<td>Provides a client library for accessing Azure Service Bus.</td>\n</tr>\n<tr>\n<td><a href=\"https://learn.microsoft.com/dotnet/aspire/storage/azure-storage-queues-component\">Azure Storage Queues</a></td>\n<td>Provides a client library for accessing Azure Storage Queues.</td>\n</tr>\n</tbody>\n</table>\n<p>Today, this set of components are available and shipped by Microsoft. Our goal is that the process for becoming an Aspire component and the requirements/best practices for them becomes more community driven as the cloud changes and more libraries want to have components.</p>\n<h3 id=\"application-model\">Application Model</h3>\n<p>The <code>AppHost</code> project in a .NET Aspire app lets you express the needs of your application in your favorite .NET language (C# support initially). It&#8217;s responsible for orchestrating the running of your app on your dev machine.</p>\n<p>Orchestration is a core capability of .NET Aspire designed to streamline the connections and configurations between different parts of your cloud-native app. .NET Aspire provides useful abstractions that allow you to orchestrate concerns like service discovery, environment variables, and container configurations without having to manage low level implementation details. These abstractions also provide consistent setup patterns across applications with many components and services.</p>\n<p>.NET Aspire orchestration assists with the following concerns:</p>\n<ul>\n<li><strong>App composition</strong> : Define resources that make up the application, including .NET projects, containers, executables or cloud resources.</li>\n<li><strong>Service discovery</strong> : Determining how the different resources communicate with each other.</li>\n</ul>\n<p>For example, using .NET Aspire, the following code creates a local Redis container resource, a project resource for an API, and configures the appropriate connection string and URL in the &#8220;webfrontend&#8221; project.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\n\nvar cache = builder.AddRedisContainer(\"cache\");\n\nvar apiservice = builder.AddProject&lt;Projects.AspireApp_ApiService&gt;(\"apiservice\");\n\nbuilder.AddProject&lt;Projects.AspireApp_Web&gt;(\"webfrontend\")\n    .WithReference(cache)\n    .WithReference(apiservice);\n\nbuilder.Build().Run();</code></pre>\n<p>The &#8220;webfrontend&#8221; project can now make HTTP requests to <code>http://apiservice</code> without ever worrying about port mapping. The Redis connection string is even more transparent as the .NET Aspire component configures the Redis client to use the connection string provided automatically. This removes a large source of error prone setup in your development flow and streamlines both getting started and onboarding. If you are using Service Discovery in production, even if only the default Kubernetes features, then this will also mirror production more closely than manual configuration.</p>\n<p>Our initial set of resources are are below:</p>\n<h3 id=\"built-in-resources\">Built-in Resources</h3>\n<ul>\n<li>Project: A .NET project, for example ASP.NET Core web apps.</li>\n<li>Container: A container image, such as a Docker image.</li>\n<li>Executable: An executable file.</li>\n</ul>\n<h3 id=\"cloud-agnostic-extensions\">Cloud-agnostic Extensions</h3>\n<p>Each of these become available when you add the NuGet package (component) for the corresponding resource. For each of these you can either have .NET Aspire launch a container during development or connect to an existing/external resource via connection strings.</p>\n<ul>\n<li>Postgress</li>\n<li>RabbitMQ</li>\n<li>Redis </li>\n<li>SQL Server</li>\n</ul>\n<h3 id=\"azure-specific-extensions\">Azure Specific Extensions</h3>\n<p>Each of these methods become available when you add the NuGet package (component) for the corresponding resource. Azure Storage is currently the only one of these resources that supports running a local container, the rest require connection information for actual Azure resources.</p>\n<ul>\n<li>Azure Storage (blobs, Tables, Queues)</li>\n<li>Azure Cosmos DB</li>\n<li>Azure KeyVault</li>\n<li>Azure Redis Cache</li>\n<li>Azure Service Bus</li>\n</ul>\n<p>You can find more about how orchestration works in the .NET Aspire docs: <a href=\"https://learn.microsoft.com/dotnet/aspire/app-host-overview\">.NET Aspire orchestration overview | Microsoft Learn</a></p>\n<h3 id=\"developer-dashboard\">Developer Dashboard</h3>\n<p>The .NET Aspire dashboard is only visible while the AppHost is running and will launch automatically when you start the project. The left navigation provides links to the different parts of the dashboard we will describe here. Additionally, the cog icon in the upper right of the dashboard provides access to the settings page, which allows you to configure your dashboard experience.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/dotnet-Aspire-metrics-view.png\" alt=\"dotnetAspire-Developer-Dashboard\" /></p>\n<ul>\n<li><em>Projects</em>: The projects page is the home page of the dashboard, it lists all the project resources in your application. It&#8217;s main function is to show you the state of each project and to give you the URLs to parts of the app. It will also show a badge when an error has been logged for a project allowing you to easily zero in on problems.</li>\n<li><em>Containers</em>: This page is the same as the projects page, but for the container resources of your application. In our tour above the Redis cache container would be displayed here.</li>\n<li><em>Executables</em>: This page is the same as the projects page, but for the executable resources of your application.</li>\n<li><em>Logs</em>: The logs section of the dashbaord provides access the logs of all the parts of your application in a cental location.\n<ul>\n<li><em>Project Logs</em>: The output from the logging provider in your .NET projects can be viewed here, you can switch between each project and each log severity is represented with a different color.</li>\n<li><em>Container Logs</em>: This page is the same as the Project Logs but for containers.</li>\n<li><em>Executable Logs</em>: This page is the same as the Project Logs but for executables.</li>\n<li><em>Structured Logs</em>: The structured logs page provides filterable view of all your logs. The structured logs maintain the properties of your log messages so that they can be individually filtered/searched on, whereas the other logs pages have all properties merged into a single string log message.</li>\n<li><em>Traces</em>: The Traces page shows the path of a single action through all the parts of your application, a distributed trace. This view can be highly valuable in finding bottlenecks, slowdowns, and other diagnosing other behaviors that only appear when the full system is being used and not in isolation. We showed a screenshot of the traces view in the tour section above, highlighting how you can see a single action using the Redis Cache, API, and frontend all in one view.</li>\n<li><em>Metrics</em>: The Metrics page shows all the <a href=\"https://learn.microsoft.com/dotnet/core/diagnostics/built-in-metrics\">metrics</a> for your application.</li>\n</ul>\n</li>\n</ul>\n<p>Learn more about the dashboard here: <a href=\"https://learn.microsoft.com/dotnet/aspire/dashboard\">.NET Aspire dashboard | Microsoft Learn</a></p>\n<h3 id=\"observability\">Observability</h3>\n<p>.NET Aspire applications are observable by default. Great observability means that you can determine what is going on in your solution, especially during an outage, from all the data being collected from the running app. Specifically from logs, metrics, and traces. Just having logs and metrics doesn&#8217;t make your whole system observable if you can&#8217;t determine what is happening, you need the right data in the right view at the right time.</p>\n<p>This means that for an app to be observable then:</p>\n<ol>\n<li>All the parts of the distributed application need to provide data in a way you can consume, including .NET itself, libraries you use, and your own application code.</li>\n<li>That data needs to be sent somewhere that you can access.</li>\n<li>Tools to view/query/make sense of the data need to exist.</li>\n</ol>\n<p>In .NET we have been investing more and more into Open Telemetry both as the format of the data, adopting Open Telemetry naming and structure for data, as well as the Open Telemetry Protocol (OTLP) for getting data out of your application and into an ecosystem of tools.</p>\n<p>In .NET Aspire we provide the code to wire-up Open Telemetry by default in the <code>ServiceDefaults</code> project. We used shared code because there are conventions like the name of your health endpoints that we expect some people will want to customize for their project or company. When experimenting we found that shared code gave a better experience for defining these types of defaults that people could tweak rather than putting them in a library with configuration settings.</p>\n<p>.NET Aspire also provides the Developer Dashboard we mentioned above which gives you all the logs, metrics, and traces from your app. One of the highlight features of the dashboard is the Traces view which provides a distributed trace of requests that went through your app. In the example below we made a request to the weather page of the <code>Aspire Starter App</code> template. You can see how the request goes from the frontend to a Redis cache to see if the data is cached (the DATA redis GET line), then because there is no data in the cache it makes a call to the backend API, and finally caches that data.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/dotnetAspire-Redis-Cache-View.png\" alt=\"dotnetAspire-Redis-Cache-View\" /></p>\n<p>This type of view makes finding things like user actions that cause inefficient paths through the system. You will be able to see immediately things like multiple database calls being made or individual services that are slowing down other parts of the system. These types of issues can be difficult to discover without this type of data and view of the data.</p>\n<h3 id=\"service-discovery\">Service Discovery</h3>\n<p>One of the key pieces of building any distributed application is the ability to call remote services. As part of .NET Aspire, we&#8217;ve built a new service discovery library, <strong>Microsoft.Extensions.ServiceDiscovery</strong>. This library provides the core abstraction and various implementations of client side service discovery and load balancing that enable seamless integration with HttpClientFactory, and YARP, and also in deployed environments Kuberentes and Azure Container Apps.</p>\n<p>Learn more about service discovery here: <a href=\"https://learn.microsoft.com/dotnet/aspire/service-discovery/overview\">Service discovery in .NET Aspire</a></p>\n<h3 id=\"deploying-a-net-aspire-application\">Deploying a .NET Aspire Application</h3>\n<p>The final artifacts of a .NET Aspire application are .NET apps and configuration that can be deployed to your cloud environments. With the strong container-first mindset of .NET Aspire, the .NET SDK native container builds serve as a valuable tool to publish these apps to containers with ease.</p>\n<p>While .NET Aspire itself doesn&#8217;t natively provide a direct mechanism to deploy your applications to their final destinations, the Application Model as described above knows all about the application, it&#8217;s dependencies, configurations, and connections to each services. The application model can produce a manifest definition that describes all of these relationships and dependencies that tools can consume, augment, and build upon for deployment.</p>\n<p>With this manifest, we&#8217;ve enabled getting your .NET Aspire application into Azure using Azure Container Apps in the simplest and fastest way possible. Working with new capabilities in the Azure Developer CLI and .NET Aspire, these combined experiences enable you to quickly detect a .NET Aspire environment, understand the application, and immediately provision and deploy the Azure resources in one step.</p>\n<p><div style=\"width: 640px;\" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-48863-1\" width=\"640\" height=\"360\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/azdinit-fast-aspire.mp4?_=1\" /><a href=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/azdinit-fast-aspire.mp4\">https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/azdinit-fast-aspire.mp4</a></video></div></p>\n<p><em>(Note: portions of this video are sped up. The aspire-starter app typically takes ~5 minutes to provision and deploy)</em></p>\n<p>As you can see in the above video, it&#8217;s one of the fastest ways to get from code to cloud with .NET Aspire. We will continue to evolve this capability of deploying .NET Aspire apps extending ease of deployment from tools like Visual Studio&#8217;s publish mechanism, leveraging the same underlying manifest and integration with Azure Developer CLI, right from your favorite IDE!</p>\n<p>The Azure Developer CLI can also create bicep from the manifest to allow developers and platform engineers to audit or augment the deployment processes.</p>\n<p>We expect this to be a key component that many IaC systems integrate with. For more information about the manifest and deployment of .NET Aspire apps, see: <a href=\"https://learn.microsoft.com/dotnet/aspire/deployment/manifest-format\">.NET Aspire manifest format &#8211; .NET | Microsoft Learn</a></p>\n<h3 id=\"existing-apps\">Existing Apps</h3>\n<p>We have shown a lot of new applications in this blog post so far, but .NET Aspire can also be used with existing applications as it&#8217;s possible to incrementally adopt various parts of the stack.</p>\n<p>Firstly, .NET Aspire is part of .NET 8. So, you will need to upgrade before trying to use any of the parts of the stack. We have tooling and guidance to help you with that here: <a href=\"https://dotnet.microsoft.com/platform/upgrade-assistant\">Upgrade Assistant | .NET (microsoft.com)</a>. You will also need the latest preview version of Visual Studio if you want to use the Visual Studio tooling, 17.9 at the time of writing.</p>\n<p>Once you have that you can right-&gt;click a Project in Visual Studio and chose <code>Add</code> -&gt; <code>Aspire Orchestrator Support</code>.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/dotnetAspire-Visual-Studio-Context-Menu-Add.png\" alt=\"dotnetAspire-Visual-Studio-Context-Menu-Add\" /></p>\n<p>You will then be prompted with the following to confirm the project and action.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/dotnetAspire-Add-Orchestrator-Support.png\" alt=\"dotnetAspire-Add-Orchestrator-Support\" /></p>\n<p>This will create an <code>AppHost</code> and <code>ServiceDefaults</code> project, the project you selected will already be added to the <code>AppHost</code>. You can now launch the AppHost project and will see the developer dashboard. From here you can add a reference to the <code>ServiceDefaults</code> project and call the <code>AddServiceDefaults()</code> method on your application builder. This will setup Open Telemetry, health check endpoints, service discovery, and the default resiliency patterns for this project.</p>\n<p>When not using Visual Studio you can still add the <code>AppHost</code> and <code>ServiceDefaults</code> projects to an existing solution using <code>dotnet new</code>, but they will not already reference an existing project like in the example above.</p>\n<p>You can now switch over to .NET Aspire components if you are using any of the services that have components. This may mean you can remove some explicit configuration if your already setup what the component does yourself. You are also free to use components in any .NET 8 app without orchestration. This will get you resiliency and other configuration applied to the component, but you will not get the rest of .NET Aspire like the dashboard, service discovery, and automatic ports, urls, or connection strings.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>We&#8217;re really excited to deliver this first preview of .NET Aspire to you today. Building on rock solid foundation of fundamentals and an incredibly productive API surface in .NET 8, we&#8217;re confident you&#8217;re going to love the productivity in building your cloud native apps using .NET Aspire.</p>\n<p>Get started today with these resources:</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/dotnet/aspire/setup-tooling?tabs=visual-studio#install-net-aspire\">Download the Aspire workload using the Visual Studio Installer</a></li>\n<li><a href=\"https://learn.microsoft.com/dotnet/aspire/get-started/quickstart-build-your-first-aspire-app\">Build your first .NET Aspire solution</a></li>\n</ul>\n<p>We also have some samples showcasing a few things we think are interesting:</p>\n<ul>\n<li>Node frontend with .NET Backend: <a href=\"https://github.com/dotnet/aspire-samples/tree/main/samples/AspireWithNode\">https://github.com/dotnet/aspire-samples/tree/main/samples/AspireWithNode</a></li>\n<li>DAPR integration: <a href=\"https://github.com/dotnet/aspire-samples/tree/main/samples/AspireWithDapr\">https://github.com/dotnet/aspire-samples/tree/main/samples/AspireWithDapr</a></li>\n<li>The eShop sample application all running with Aspire: <a href=\"https://github.com/dotnet/eshop\">https://github.com/dotnet/eshop</a></li>\n</ul>\n<p>Most importantly, we want to hear what&#8217;s working for you and what we can improve. .NET Aspire is a part of the .NET platform and foundation and is an open source project alongside the platform. Engage with us here at <a href=\"https://github.com/dotnet/aspire\">https://github.com/dotnet/aspire</a>.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/\">Introducing .NET Aspire: Simplifying Cloud-Native Development with .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/feed/","slash:comments":"32","enclosure":{"@url":"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/azdinit-fast-aspire.mp4","@length":"5408543","@type":"video/mp4"}},{"title":".NET Framework November 2023 Security and Quality Rollup","link":"https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2023-security-and-quality-rollup/","comments":"https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2023-security-and-quality-rollup/#comments","dc:creator":{"#cdata-section":"Immo Landwerth"},"pubDate":"Tue, 14 Nov 2023 18:45:17 +0000","category":[{"#cdata-section":".NET Framework"},{"#cdata-section":"Maintenance & Updates"},{"#cdata-section":"Security"},{"#cdata-section":"WPF"},{"#cdata-section":".net framework"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=49002"},"description":{"#cdata-section":"<p>November 2023 Security and Quality Rollup Updates for .NET Framework</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2023-security-and-quality-rollup/\">.NET Framework November 2023 Security and Quality Rollup</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p><em><strong>Revised</strong> </em><strong><em>11/15/23</em>: </strong>To remove CVE details which were not affected by the .NET Framework November Security and Quality rollup.</p>\n<p>Today, we are releasing the November 2023 Security and Quality Rollup updates for .NET Framework.</p>\n<h3 id=\"security\">Security</h3>\n<h5 id=\"cve-2023-36560-net-framework-security-feature-bypass-vulnerability\">CVE-2023-36560 – .NET Framework Security Feature Bypass Vulnerability</h5>\n<p>This security update addresses a security feature bypass vulnerability detailed in <a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2023-36560\" rel=\"nofollow\">CVE 2023-36560</a>.</p>\n<h5 id=\"cve-2023-36049-net-framework-elevation-of-privilege-vulnerability\">CVE-2023-36049 – .NET Framework Elevation of Privilege Vulnerability</h5>\n<p>This security update addresses a elevation of privilege vulnerability detailed in <a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2023-36049\" rel=\"nofollow\">CVE 2023-36049</a>.</p>\n<h3 id=\"quality-and-reliability\">Quality and Reliability</h3>\n<p>This release contains the following quality and reliability improvements.</p>\n<h5 id=\"wpf1\">WPF<span style=\"font-size: 12pt;\"><sup>1</sup></span></h5>\n<ul>\n<li>Addresses an issue to provide an appconfig mechanism to allow users to extend the list of allowed types in case of XAML/XPS parsing. (applies to: .NET Framework 4.8.1)</li>\n</ul>\n<p><sup>1 </sup>Windows Presentation Foundation (WPF)</p>\n<h3><a id=\"user-content-getting-the-update\" class=\"anchor\" href=\"#getting-the-update\"></a>Getting the Update</h3>\n<p>The Security and Quality Rollup is available via Windows Update, Windows Server Update Services, and Microsoft Update Catalog. The Security Only Update is available via Windows Server Update Services and Microsoft Update Catalog.</p>\n<h5><a id=\"user-content-microsoft-update-catalog\" class=\"anchor\" href=\"#microsoft-update-catalog\"></a>Microsoft Update Catalog</h5>\n<p>You can get the update via the Microsoft Update Catalog. For Windows 10, NET Framework 4.8 updates are available via Windows Update, Windows Server Update Services, Microsoft Update Catalog. Updates for other versions of .NET Framework are part of the Windows 10 Monthly Cumulative Update.</p>\n<p>**Note**: Customers that rely on Windows Update and Windows Server Update Services will automatically receive the .NET Framework version-specific updates. Advanced system administrators can also take use of the below direct Microsoft Update Catalog download links to .NET Framework-specific updates. Before applying these updates, please ensure that you carefully review the .NET Framework version applicability, to ensure that you only install updates on systems where they apply.</p>\n<p>The following table is for Windows 10+ and Windows Server 2016+ versions.</p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"8px\">\n<thead>\n<tr>\n<th>Product Version</th>\n<th colspan=\"2\">Cumulative Update</th>\n</tr>\n</thead>\n<tbody>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Microsoft server operating system, version 23H2 </strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032004\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032004\" rel=\"nofollow\">5032004</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 11, version 22H2 and Windows 11, version 23H2 </strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032007\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032007\" rel=\"nofollow\">5032007</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 11, version 21H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032340\" rel=\"nofollow\">5032340</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031991\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031991\" rel=\"nofollow\">5031991</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032006\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032006\" rel=\"nofollow\">5032006</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Microsoft server operating system, version 22H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032478\" rel=\"nofollow\">5032478</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031993\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031993\" rel=\"nofollow\">5031993</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032008\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032008\" rel=\"nofollow\">5032008</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Microsoft server operating system version 21H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032336\" rel=\"nofollow\">5032336</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031993\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031993\" rel=\"nofollow\">5031993</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032008\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032008\" rel=\"nofollow\">5032008</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10, version 22H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032339\" rel=\"nofollow\">5032339</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031988\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031988\" rel=\"nofollow\">5031988</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032005\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032005\" rel=\"nofollow\">5032005</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10, version 21H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032338\" rel=\"nofollow\">5032338</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031988\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031988\" rel=\"nofollow\">5031988</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032005\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032005\" rel=\"nofollow\">5032005</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10, version 1809 and Windows Server 2019</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032337\" rel=\"nofollow\">5032337</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.7.2</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031984\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031984\" rel=\"nofollow\">5031984</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031990\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031990\" rel=\"nofollow\">5031990</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5018210\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5018210\" rel=\"nofollow\">5018210</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10, version 1607 and Windows Server 2016</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 3.5 + 4.6.2, 4.7, 4.7.1, 4.7.2</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032197\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032197\" rel=\"nofollow\">5032197</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031989\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031989\" rel=\"nofollow\">5031989</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10, version 1507</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 3.5 + 4.6, 4.6.2</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032199\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032199\" rel=\"nofollow\">5032199</a></td>\n</tr>\n</tbody>\n</table>\n<p>The following table is for earlier Windows and Windows Server versions.</p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"8px\">\n<thead>\n<tr>\n<th>Product Version</th>\n<th colspan=\"2\">Security and Quality Rollup</th>\n<th colspan=\"2\">Security Only Update</th>\n</tr>\n</thead>\n<tbody>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows Server 2008 R2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032341\" rel=\"nofollow\">5032341</a></strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032185\" rel=\"nofollow\">5032185</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032000\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032000\" rel=\"nofollow\">5032000</a></td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032012\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032012\" rel=\"nofollow\">5032012</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.6.2, 4.7, 4.7.1, 4.7.2</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031987\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031987\" rel=\"nofollow\">5031987</a></td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032009\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032009\" rel=\"nofollow\">5032009</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031995\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031995\" rel=\"nofollow\">5031995</a></td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032010\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032010\" rel=\"nofollow\">5032010</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows Server 2008</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032344\" rel=\"nofollow\">5032344</a></strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5032186\" rel=\"nofollow\">5032186</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 2.0, 3.0</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031999\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031999\" rel=\"nofollow\">5031999</a></td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032011\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032011\" rel=\"nofollow\">5032011</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.6.2</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5031987\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5031987\" rel=\"nofollow\">5031987</a></td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5032009\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5032009\" rel=\"nofollow\">5032009</a></td>\n</tr>\n</tbody>\n</table>\n<p>The operating system row lists a KB which will be used for update offering purposes. When the operating system KB is offered, the applicability logic will determine the specific .NET Framework update(s) will be installed. Updates for individual .NET Framework versions will be installed based on the version of .NET Framework that is already present on the device. Because of this the operating system KB is not expected to be listed as installed updates on the device. The expected update to be installed are the .NET Framework specific version updates listed in the table above.</p>\n<p>&nbsp;</p>\n<h5 id=\"previous-monthly-rollups\">Previous Monthly Rollups</h5>\n<p>The last few .NET Framework Monthly updates are listed below for your convenience:</p>\n<ul>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/net-framework-october-2023-cumulative-update-preview/\" rel=\"nofollow\">.NET Framework October 2023 Cumulative Update Preview</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2023-security-and-quality-rollup-updates/\" rel=\"nofollow\">.NET Framework October 2023 Security and Quality Rollup Updates</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2023-cumulative-update-preview/\" rel=\"nofollow\">.NET Framework September 2023 Cumulative Update Preview</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2023-security-and-quality-rollup-updates/\" rel=\"nofollow\">.NET Framework September 2023 Security and Quality Rollup Updates</a></li>\n</ul>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2023-security-and-quality-rollup/\">.NET Framework November 2023 Security and Quality Rollup</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2023-security-and-quality-rollup/feed/","slash:comments":"6"},{"title":".NET November 2023 Updates – .NET 7.0.14, .NET 6.0.25","link":"https://devblogs.microsoft.com/dotnet/november-2023-updates/","comments":"https://devblogs.microsoft.com/dotnet/november-2023-updates/#respond","dc:creator":{"#cdata-section":"Rahul Bhandari (MSFT)"},"pubDate":"Tue, 14 Nov 2023 18:07:15 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Core"},{"#cdata-section":"Maintenance & Updates"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=48996"},"description":{"#cdata-section":"<p>Check out latest November 2023 updates for .NET 7.0 and .NET 6.0</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/november-2023-updates/\">.NET November 2023 Updates – .NET 7.0.14, .NET 6.0.25</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>Today, we are releasing the <a href=\"https://github.com/dotnet/announcements/issues/285\">.NET November 2023 Updates</a>. These updates contain security and non-security improvements. <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/cve.md\">Your app may be vulnerable</a> if you have not deployed a recent .NET update.</p>\n<p>You can download <a href=\"https://dotnet.microsoft.com/download/dotnet/7.0\">7.0.14</a> and <a href=\"https://dotnet.microsoft.com/download/dotnet/6.0\">6.0.25</a> versions for Windows, macOS, and Linux, for x86, x64, Arm32, and Arm64.</p>\n<ul>\n<li>Installers and binaries: <a href=\"https://dotnet.microsoft.com/download/dotnet/7.0\">7.0.14</a> | <a href=\"https://dotnet.microsoft.com/download/dotnet/6.0\">6.0.25</a></li>\n<li>Release notes: <a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/7.0.14/7.0.14.md\">7.0.14</a> | <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/6.0.25/6.0.25.md\">6.0.25</a></li>\n<li><a href=\"https://mcr.microsoft.com/catalog?search=dotnet/\">Container images</a></li>\n<li>Linux packages: <a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/install-linux.md\">7.0.14</a> | <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/install-linux.md\">6.0.25</a></li>\n<li><a href=\"https://github.com/dotnet/core/issues/8910\">Release feedback/issue</a></li>\n<li>Known issues: <a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/known-issues.md\">7.0</a> | <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/known-issues.md\">6.0</a></li>\n</ul>\n<h3 id=\"windows-package-manager-cli-winget\">Windows Package Manager CLI (winget)</h3>\n<p>You can now install .NET updates using the Windows Package Manager CLI (winget):</p>\n<ul>\n<li>To install the .NET 7 runtime: <code>winget install dotnet-runtime-7</code></li>\n<li>To install the .NET 7 SDK: <code>winget install dotnet-sdk-7</code></li>\n<li>To update an existing installation: <code>winget upgrade</code></li>\n</ul>\n<p>See <a href=\"https://learn.microsoft.com/dotnet/core/install/windows?tabs=net70#install-with-windows-package-manager-winget\">Install with Windows Package Manager (winget)</a> for more information.</p>\n<h2 id=\"security\">Security</h2>\n<p><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36049\">CVE-2023-36049 &#8211; .NET Elevation of Privilege Vulnerability</a></p>\n<p>Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 RC2. This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.</p>\n<p>An elevation of privilege vulnerability exists in .NET where untrusted URIs provided to System.Net.WebRequest.Create can be used to inject arbitrary commands to backend FTP servers.</p>\n<p><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36558\">CVE-2023-36558 &#8211; .NET Security Feature Bypass Vulnerability</a></p>\n<p>Microsoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 6.0, ASP.NET Core 7.0 and, ASP.NET Core 8.0 RC2. This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.</p>\n<p>A security feature bypass vulnerability exists in ASP.NET where an unauthenticated user is able to bypass validation on Blazor server forms which could trigger unintended actions.</p>\n<h2 id=\"visual-studio\">Visual Studio</h2>\n<p>See release notes for Visual Studio compatibility for <a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/7.0.14/7.0.14.md#visual-studio-compatibility\">.NET 7.0</a> and <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/6.0.25/6.0.25.md#visual-studio-compatibility\">.NET 6.0</a>.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/november-2023-updates/\">.NET November 2023 Updates – .NET 7.0.14, .NET 6.0.25</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/november-2023-updates/feed/","slash:comments":"0"},{"title":"Announcing F# 8","link":"https://devblogs.microsoft.com/dotnet/announcing-fsharp-8/","comments":"https://devblogs.microsoft.com/dotnet/announcing-fsharp-8/#comments","dc:creator":{"#cdata-section":"RNDr. Tomáš Grošup, Ph.D."},"pubDate":"Tue, 14 Nov 2023 16:00:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":"F#"},{"#cdata-section":".net 8"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=48815"},"description":{"#cdata-section":"<p>Read what is new in F# 8 - the language, compiler tooling and FSharp.Core standard library</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-fsharp-8/\">Announcing F# 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>F# 8 is released as part of .NET 8. It is included with new updates of Visual Studio 2022 and .NET 8 SDK.</p>\n<ul>\n<li><a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\">Download the latest version of .NET 8</a></li>\n<li><a href=\"https://visualstudio.microsoft.com/vs/preview/\">Install Visual Studio 2022</a></li>\n</ul>\n<p>F# 8 brings in many features to make F# programs simpler, more uniform and more performant.\nRead more about language changes, new diagnostics, quality of life improvements, performance boosts for project compilation and upgrades given to the FSharp.Core standard library.</p>\n<p>This announcement lists the major changes brought in by F# 8 developed at <a href=\"https://github.com/dotnet/fsharp\">F#&#8217;s open source code repository</a>.</p>\n<p>Do you want to learn more about .NET 8 in general? Join us and many other speakers at <a href=\"https://dotnetconf.net/\">.NET Conf 2023</a>, an online event scheduled for November 14th-16th.</p>\n<p>Are you new to F#? Start your journey at <a href=\"https://dotnet.microsoft.com/languages/fsharp\">the .NET guide to F# with learning materials, examples and YouTube videos</a>.</p>\n<p>Do you want to see how others are using F#? See recordings of <a href=\"http://fsharpconf.com/\">this year&#8217;s fsharpConf</a>, the F# Community Virtual Conference. For more advanced topics as well as recordings of live contributions to F# compiler and the F# library ecosystem, see the <a href=\"https://amplifying-fsharp.github.io/\">sessions of Amplifying F#</a>, a community initiative to grow F#.</p>\n<p>If you want to stay up-to-date with F#, follow @fsharponline on social media &#8211; <a href=\"https://www.linkedin.com/company/fsharponline/\">LinkedIn</a>, <a href=\"https://twitter.com/fsharponline\">X</a> and <a href=\"https://hachyderm.io/@fsharponline\">Hachyderm</a>.</p>\n<h2 id=\"f-language-changes\">F# language changes</h2>\n<p>This section describes updates to the language itself, changes you will notice when writing or reading F# code the most.\nMost of the code samples in this blog post are duplicated in the <a href=\"https://github.com/T-Gro/FSharp8_news\">FSharp 8 News repository</a> as a F# project. If you installed the latest .NET 8 tooling, you can check it out and experiment with the code already.</p>\n<p>Do you have any interesting use cases for the new features you want to make public for others?\nLet me know in <a href=\"https://github.com/T-Gro/FSharp8_news\">that repository</a> via a new issue or open a direct pull request straight away!</p>\n<h3 id=\"_-property-shorthand-for-fun-x-x-property\">_.Property shorthand for (fun x -&gt; x.Property)</h3>\n<p>The first feature I want to introduce is a shorthand for defining simple lambda functions &#8211; useful for situations, when a lambda only does an atomic expression on the lambda argument. An atomic expression is an expression which has no whitespace unless enclosed in method call parentheses.</p>\n<p>Let&#8217;s have a look at a practical example before and after this feature.</p>\n<p><strong>Before:</strong></p>\n<pre><code class=\"language-fsharp\">type Person = {Name : string; Age : int}\r\nlet people = [ {Name = \"Joe\"; Age = 20} ; {Name = \"Will\"; Age = 30} ; {Name = \"Joe\"; Age = 51}]\r\n\r\nlet beforeThisFeature = \r\n    people \r\n    |&gt; List.distinctBy (fun x -&gt; x.Name)\r\n    |&gt; List.groupBy (fun x -&gt; x.Age)\r\n    |&gt; List.map (fun (x,y) -&gt; y)\r\n    |&gt; List.map (fun x -&gt; x.Head.Name)\r\n    |&gt; List.sortBy (fun x -&gt; x.ToString())\r\n</code></pre>\n<p><strong>After:</strong></p>\n<pre><code class=\"language-fsharp\">type Person = {Name : string; Age : int}\r\nlet people = [ {Name = \"Joe\"; Age = 20} ; {Name = \"Will\"; Age = 30} ; {Name = \"Joe\"; Age = 51}]\r\n\r\nlet possibleNow = \r\n    people \r\n    |&gt; List.distinctBy _.Name\r\n    |&gt; List.groupBy _.Age\r\n    |&gt; List.map snd\r\n    |&gt; List.map _.Head.Name\r\n    |&gt; List.sortBy _.ToString()\r\n</code></pre>\n<p>As you can see, the snippet <code>(fun x -&gt; x.)</code> got replaced with just <code>_.</code>, and the need for parantheses was eliminated.\nThis can come especially handy in a sequence of <code>|&gt;</code> pipelined calls, as typically used for F#&#8217;s combinators in List, Option and many other modules.\nThe feature works for single property access, nested property access, method calls and even indexers. The example demonstrates this feature on a list of records, but it works on all values that you can use in a regular lambda function, too. So for example also covering objects, primitives, anonymous records or discriminated unions:</p>\n<pre><code class=\"language-fsharp\">let getIdx5 : {| Foo : int array |} -&gt; int = _.Foo[5]\r\n</code></pre>\n<p><strong>Also:</strong></p>\n<p>What&#8217;s more, this feature can also be used outside of a function call to define a standalone lambda to future usage.\nIn the second example <code>getNameLength</code>, you can also see that the feature works without the need to annotate the definition.</p>\n<pre><code class=\"language-fsharp\">let ageAccessor : Person -&gt; int = _.Age\r\nlet getNameLength = _.Name.Length\r\n</code></pre>\n<p>The same syntax can be used to define accessors via <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/generics/statically-resolved-type-parameters\">SRTP syntax</a>, allowing the same binding to be used by all items having the same member, without the need to share a common interface.</p>\n<pre><code class=\"language-fsharp\">let inline myPropertyGetter (x: 'a) = x |&gt; _.WhatANiceProperty\r\n</code></pre>\n<p>There is a situation where this syntax is not suitable: when the surrounding scope already makes use of the <code>_</code> underscore symbol, typically to discard a parameter.</p>\n<pre><code class=\"language-fsharp\">let a : string -&gt; string = (fun _ -&gt; 5 |&gt; _.ToString())\r\n</code></pre>\n<p>Such code will end up producing a warning FS3570, saying <code>\"The meaning of _ is ambiguous here. It cannot be used for a discarded variable and a function shorthand in the same scope.\"</code></p>\n<h3 id=\"nested-record-field-copy-and-update\">Nested record field copy and update</h3>\n<p>Next new feature is a <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/copy-and-update-record-expressions\">copy-and-update</a> enhancement for nested records.\nLet&#8217;s again demonstrate the feature with before and after examples.</p>\n<p><strong>Before:</strong></p>\n<pre><code class=\"language-fsharp\">type SteeringWheel = { Type: string }\r\ntype CarInterior = { Steering: SteeringWheel; Seats: int }\r\ntype Car = { Interior: CarInterior; ExteriorColor: string option }\r\n\r\nlet beforeThisFeature x = \r\n    { x with Interior = { x.Interior with \r\n                            Steering = {x.Interior.Steering with Type = \"yoke\"}\r\n                            Seats = 5\r\n                        }\r\n    }\r\n</code></pre>\n<p><strong>After:</strong></p>\n<pre><code class=\"language-fsharp\">let withTheFeature x = { x with Interior.Steering.Type = \"yoke\"; Interior.Seats = 5 }\r\n</code></pre>\n<p>The two blocks make the identical change. Instead of having to write multiple nested <code>with</code> keywords, the new language feature allows you to use the dot-notation to reach to lower levels of nested records and update those.\nAs seen in the example, the syntax still allows copy-and-updating multiple fields using the same expression. Each copy-and-update within the same expression can be on a different level of nesting (see <code>Interior.Steering.Type</code> and <code>Interior.Seats</code> being used in the same snippet above).</p>\n<p><strong>Also works for anonymous records:</strong>\nThe same syntax extension can be used on anonymous records, or when updating regular records into anonymous ones.\nUsing the same type definitions from the example above, we can update the field <code>Interior.Seats</code> using the new feature as well as as add a brand new field <code>Price</code> within the same expression.</p>\n<pre><code class=\"language-fsharp\">let alsoWorksForAnonymous (x:Car) = {| x with Interior.Seats = 7; Price = 99_999 |}\r\n</code></pre>\n<p><strong>Beware of name clashes between types and record fields:</strong></p>\n<p>When trying out this feature, you <a href=\"https://github.com/dotnet/fsharp/issues/16180\">might get into a conflict</a> when naming a field the same as an existing type.\nBefore F# 8, it was possible to qualify record updates using the <code>Type.Field</code> notation. For backwards compatibility, this behavior still works and has a higher priority over a new language feature.</p>\n<pre><code class=\"language-fsharp\">type Author = {\r\n    Name: string\r\n    YearBorn: int\r\n}\r\ntype Book = {\r\n    Title: string\r\n    Year: int\r\n    Author: Author\r\n}\r\n\r\nlet oneBook = { Title = \"Book1\"; Year = 2000; Author = { Name = \"Author1\"; YearBorn = 1950 } }\r\nlet codeWhichWorks = {oneBook with Book.Author.Name = \"Author1Updated\"}\r\nlet codeWhichLeadsToAnError = {oneBook with Author.Name = \"Author1Updated\"}\r\n</code></pre>\n<p>The last example, since it has to prefer to pre-existing <code>Type.Field</code> notation for the existing <code>Author</code> type, leads to an error:</p>\n<p><code>This expression was expected to have type 'Book' but here has type 'Author'</code></p>\n<p><strong>Workaround:</strong>\nWhen this happens, it is sufficient to qualify the update with the right type, as in the <code>codeWhichWorks</code> sample: <code>Book.Author.Name</code> works fine here.</p>\n<h3 id=\"while\">while!</h3>\n<p>The <code>while!</code> (while bang) feature was announced when as part of an earlier preview. You can read in <a href=\"https://devblogs.microsoft.com/dotnet/simplifying-fsharp-computations-with-the-new-while-keyword/\">blog post introducing while!</a>.</p>\n<p>What does <code>while!</code> do?\nIt simplifies the usage of computation expressions when looping over a boolean condition that has to be evaluated by the computation expression first (e.g., inside an <code>async{}</code> block).</p>\n<p><strong>Before this feature:</strong></p>\n<pre><code class=\"language-fsharp\">let mutable count = 0\r\nlet asyncCondition = async {\r\n    return count &lt; 10\r\n}\r\n\r\nlet doStuffBeforeThisFeature = \r\n    async {\r\n       let! firstRead = asyncCondition\r\n       let mutable read = firstRead\r\n       while read do\r\n         count &lt;- count + 2\r\n         let! nextRead = asyncCondition\r\n         read &lt;- nextRead\r\n       return count\r\n    }\r\n</code></pre>\n<p><strong>With <code>while!</code>:</strong></p>\n<pre><code class=\"language-fsharp\">let doStuffWithWhileBang =\r\n    async {\r\n        while! asyncCondition do\r\n            count &lt;- count + 2\r\n        return count\r\n    }\r\n</code></pre>\n<p>The two code blocks are equivalent in their behavior.</p>\n<p>The addition of <code>while!</code> means a reduction of boilerplate code needed to maintain the <code>mutable read</code> boolean variable which was being looped over. The regular <code>while</code> (no bang) can only loop over a bool value, and not over an <code>async&lt;bool&gt;</code> (or similar wrapper in a different computation expression). <code>while!</code> brings this possibility to the language.</p>\n<p>The <a href=\"https://devblogs.microsoft.com/dotnet/simplifying-fsharp-computations-with-the-new-while-keyword/\">separate blog post</a> uses the <code>&lt;LangVersion&gt;preview&lt;/LangVersion&gt;</code> project setting to enable it. That is no longer needed with .NET 8 being released. As a <a href=\"https://learn.microsoft.com/dotnet/fsharp/whats-new/fsharp-47#language-version\">reminder</a>, newly developed language and compiler features can be tested using the <code>preview</code> value before the final version (in this case, 8) is released.</p>\n<h3 id=\"extended-string-interpolation-syntax\">Extended string interpolation syntax</h3>\n<p>F# 8 took inspiration from <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/tokens/interpolated#interpolated-raw-string-literals\">interpolated raw string literals in C#</a> and improved the support for existing <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/interpolated-strings\">interpolated strings in F#</a>.</p>\n<p>In interpolated strings, literal text output can be combined with values and expressions by wrapping them into a pair of braces <code>{}</code>.\nBraces therefore are special symbols, and need to be escaped by doubling them (via <code>{{</code> and <code>}}</code> ) if they are meant to be a literal part of the output.</p>\n<p>This gets in the way if the text naturally contains a lot of braces, e.g. in the context of embedding other languages in F# strings &#8211; JSON, CSS or HTML-based templating languages such as <a href=\"https://mustache.github.io/\">mustache</a>.</p>\n<p><strong>Embedding CSS in F# strings before:</strong>\nNotice how each brace for the literal output had to be doubled.</p>\n<pre><code class=\"language-fsharp\">let classAttr = \"item-panel\"\r\nlet cssOld = $\"\"\".{classAttr}:hover {{background-color: #eee;}}\"\"\"\r\n</code></pre>\n<p>The extended interpolation syntax introduces the ability to redefine that behaviour by entering multiple <code>$</code> dollar signs at the beginning of the interpolated string literal. The number of starting dollars then dictates the number of braces needed to enter interpolation mode. Any smaller number of braces just becomes part of the output, without any need to escape them.</p>\n<p><strong>With new feature:</strong></p>\n<pre><code class=\"language-fsharp\">let cssNew = $$\"\"\".{{classAttr}}:hover {background-color: #eee;}\"\"\"\r\n</code></pre>\n<p><strong>HTML templating:</strong>\nIn HTML-based templating languages, doubled braces are commonly used to render variables.\nIn the example below, you can see how F# strings compare with and without extended interpolation syntax.</p>\n<pre><code class=\"language-fsharp\">let templateOld = $\"\"\"\r\n&lt;div class=\"{classAttr}\"&gt;\r\n  &lt;p&gt;{{{{title}}}}&lt;/p&gt;\r\n&lt;/div&gt;\r\n\"\"\"\r\nlet templateNew = $$$\"\"\"\r\n&lt;div class=\"{{{classAttr}}}\"&gt;\r\n  &lt;p&gt;{{title}}&lt;/p&gt;\r\n&lt;/div&gt;\r\n\"\"\"\r\n</code></pre>\n<p>You can read more about the feature in the <a href=\"https://devblogs.microsoft.com/dotnet/new-syntax-for-string-interpolation-in-fsharp/\">blog post about new syntax for string interpolation in F# 8</a>.</p>\n<h3 id=\"use-and-compose-string-literals-for-printf-and-related-functions\">Use and compose string literals for printf and related functions</h3>\n<p>String literals have received one more update in this release, for usages of built-in printing functions (printfn, sprintfn <a href=\"https://fsharpforfunandprofit.com/posts/printf/#the-printf-family-of-functions\">and others</a>).</p>\n<p><strong>Before F# 8:</strong></p>\n<pre><code class=\"language-fsharp\">let renderedCoordinatesOld = sprintf \"(%f,%f)\" 0.25 0.75\r\nlet renderedTextOld = sprintf \"Person at coordinates(%f,%f)\" 0.25 0.75\r\n</code></pre>\n<p>Before F# 8, the format specified has to be a string literal typed directly at the place of usage.\nWith F# 8, string literals defined elsewhere are supported.\nWhat&#8217;s more, you can define a string literal using a concatenation of existing string literals.\nThat way, commonly repeating format specifiers can be reused as patterns, instead of repeating same string snippets throughout the codebase.</p>\n<p>Why does it have to be a <code>[&lt;Literal&gt;]</code> string that is known at compile time? Since the compiler is doing typechecking on the format string in conjuction with other arguments, full content of it must be known at compile time and it cannot be a runtime value.</p>\n<p><strong>String format reuse with F# 8:</strong></p>\n<pre><code class=\"language-fsharp\">[&lt;Literal&gt;] \r\nlet formatBody = \"(%f,%f)\"\r\n[&lt;Literal&gt;] \r\nlet formatPrefix = \"Person at coordinates\"\r\n[&lt;Literal&gt;] \r\nlet fullFormat = formatPrefix + formatBody\r\n\r\nlet renderedCoordinates = sprintf formatBody 0.25 0.75\r\nlet renderedText = sprintf fullFormat 0.25 0.75\r\n</code></pre>\n<h3 id=\"arithmetic-operators-in-literals\">Arithmetic operators in literals</h3>\n<p>Numeric literals have also received an update.\nIn the past, they had to be fully specified using constant values.</p>\n<p><strong>Before:</strong></p>\n<pre><code class=\"language-fsharp\">module ArithmeticLiteralsBefore =\r\n    let [&lt;Literal&gt;] bytesInKB = 1024f\r\n    let [&lt;Literal&gt;] bytesInMB = 1048576f\r\n    let [&lt;Literal&gt;] bytesInGB = 1073741824\r\n    let [&lt;Literal&gt;] customBitMask =  0b01010101uy\r\n    let [&lt;Literal&gt;] inverseBitMask = 0b10101010uy\r\n</code></pre>\n<p>With F# 8, numeric literals can also be expressed using existing operators and other literals.\nThe compiler evaluates the expression at compile time, and stores the resulting value in the produced assembly. You will notice this when you hover over a defined literal (or its usage) in Visual Studio &#8211; it will show you the calculated value.</p>\n<ul>\n<li>Supported for numeric types: <code>+,-,*, /, %, &amp;&amp;&amp;, |||, &lt;&lt;&lt;, &gt;&gt;&gt;, ^^^, ~~~, **</code>\n<ul>\n<li>The operators have the same semantics as they have in non-literal expressions.</li>\n</ul>\n</li>\n<li>Supported for bools: <code>not, &amp;&amp;, ||</code></li>\n</ul>\n<p><strong>Example using F# 8:</strong></p>\n<pre><code class=\"language-fsharp\">\r\nlet [&lt;Literal&gt;] bytesInKB = 2f ** 10f\r\nlet [&lt;Literal&gt;] bytesInMB = bytesInKB * bytesInKB\r\nlet [&lt;Literal&gt;] bytesInGB = 1 &lt;&lt;&lt; 30\r\nlet [&lt;Literal&gt;] customBitMask = 0b01010101uy\r\nlet [&lt;Literal&gt;] inverseBitMask = ~~~ customBitMask\r\n</code></pre>\n<p><strong>Also works for enum values and literals:</strong></p>\n<p>The feature can be used at places which require literal values, such as enum values or attribute parameters.</p>\n<pre><code class=\"language-fsharp\">type MyEnum = \r\n    | A = (1 &lt;&lt;&lt; 5)\r\n    | B = (17 * 45 % 13)\r\n    | C = bytesInGB\r\n\r\n[&lt;System.Runtime.CompilerServices.MethodImplAttribute(enum(1+2+3))&gt;]\r\nlet doStuff = ()\r\n</code></pre>\n<p>In the case of enum values, arithmetic expressions need to be wrapped in parentheses like in the example above.</p>\n<h3 id=\"type-constraint-intersection-syntax\">Type constraint intersection syntax</h3>\n<p>F# 8 brings in a new feature to simplify definition of multiple intersected generic constraints using <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/flexible-types\">flexible types</a>.</p>\n<p><strong>Code prior to F# 8:</strong></p>\n<pre><code class=\"language-fsharp\">let beforeThis(arg1 : 't \r\n    when 't:&gt;IDisposable \r\n    and 't:&gt;IEx \r\n    and 't:&gt;seq&lt;int&gt;) =\r\n    arg1.h(arg1)\r\n    arg1.Dispose()\r\n    for x in arg1 do\r\n        printfn \"%i\" x\r\n</code></pre>\n<p>The definiton does require repeating the generic type argument <code>'t</code> for every clause and they have to be connected using the <code>and</code> keyword.\nWith F# 8, intersected constrains can be specified using the <code>&amp;</code> characters and achieve the same result:</p>\n<pre><code class=\"language-fsharp\">let withNewFeature (arg1: 't &amp; #IEx &amp; \r\n    #IDisposable &amp; #seq&lt;int&gt;) =\r\n    arg1.h(arg1)\r\n    arg1.Dispose()\r\n    for x in arg1 do\r\n        printfn \"%i\" x\r\n</code></pre>\n<p>The same syntax also works on specifying signatures, e.g. in signature files or for defining abstract functions:</p>\n<pre><code class=\"language-fsharp\">type IEx =\r\n    abstract h: #IDisposable &amp; #seq&lt;int&gt; -&gt; unit\r\n</code></pre>\n<h3 id=\"extended-fixed-bindings\">Extended fixed bindings</h3>\n<p><a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/fixed\">F# has the fixed keyword</a>, which can be used to pin memory and get its address as <code>nativeptr&lt;int&gt;</code>. It is used in low-level programming scenarios.</p>\n<p><a href=\"https://github.com/fsharp/fslang-design/blob/main/FSharp-8.0/FS-1081-extended-fixed-bindings.md\">F# 8 extends this feature</a> with additionally allowing it on:</p>\n<ul>\n<li><code>byref&lt;'t&gt;</code></li>\n<li><code>inref&lt;'t&gt;</code></li>\n<li><code>outref&lt;'t&gt;</code></li>\n<li>any type &#8216;a when &#8216;a has an instance/extension method <code>GetPinnableReference : unit -&gt; byref&lt;'t&gt;</code></li>\n<li>any type &#8216;a when &#8216;a has an instance/extension method <code>GetPinnableReference : unit -&gt; inref&lt;'t&gt;</code></li>\n</ul>\n<p>The last two additions are especially relevant for the growing ecosystem and the types like <a href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1.getpinnablereference?view=net-7.0\">ReadOnlySpan</a> or <a href=\"https://learn.microsoft.com/dotnet/api/system.span-1.getpinnablereference?view=net-7.0\">Span</a>.</p>\n<p><strong>Possible now:</strong></p>\n<pre><code class=\"language-fsharp\">open System\r\nopen FSharp.NativeInterop\r\n\r\n#nowarn \"9\"\r\n// \"Warning no. 9 is a warning about using unsafe code with nativeint. We are disabling it here when we know we know what we are doing\"\r\nlet pinIt (span: Span&lt;char&gt;, byRef: byref&lt;int&gt;, inRef: inref&lt;int&gt;) =\r\n    // Calls span.GetPinnableReference()\r\n    // The following lines wouldn't compile before\r\n    use ptrSpan = fixed span\r\n    use ptrByRef = fixed &amp;byRef\r\n    use ptrInref = fixed &amp;inRef\r\n\r\n    NativePtr.copyBlock ptrByRef ptrInref 1\r\n</code></pre>\n<h3 id=\"easier-extension-method-definition\">Easier <code>[&lt;Extension&gt;]</code> method definition</h3>\n<p>The <code>[&lt;Extension&gt;]</code> attribute exists in order to define C#-style extension methods, which can be consumed both by F# and C#.\nHowever, in order to satisfy the C# compiler, the attribute had to be applied both on the member as well as on the type:</p>\n<p><strong>Before:</strong></p>\n<pre><code class=\"language-fsharp\">open System.Runtime.CompilerServices\r\n[&lt;Extension&gt;]\r\ntype Foo =\r\n    [&lt;Extension&gt;]\r\n    static member PlusOne (a:int) : int = a + 1\r\nlet f (b:int) = b.PlusOne()\r\n</code></pre>\n<p>With F# 8, the compiler will only require the attribute on the extension method, and will automatically add the type-level attribute for you.</p>\n<p><strong>After:</strong></p>\n<pre><code class=\"language-fsharp\">open System.Runtime.CompilerServices\r\ntype Foo =\r\n    [&lt;Extension&gt;]\r\n    static member PlusOne (a:int) : int = a + 1\r\nlet f (b:int) = b.PlusOne()\r\n</code></pre>\n<h2 id=\"making-f-more-uniform\">Making F# more uniform</h2>\n<p>The following changes are making F# more consistent by allowing existing constructs at previously forbidden contexts.\nThis aims to reduce beginner confusion, reduce the need for workarounds and lead to a more succinct code.</p>\n<h3 id=\"static-members-in-interfaces\">Static members in interfaces</h3>\n<p>This change allows to declare and implement static members in interfaces.\nNot to confuse with <a href=\"https://devblogs.microsoft.com/dotnet/announcing-fsharp-7/#static-abstract-members-support-in-interfaces\">static abstract members in interfaces from F#7</a>, the upcoming change is about concrete members in interfaces, with their implementation.</p>\n<p>Today, the same would be typically accomplished by putting a module with implemented function(s) below the type.</p>\n<p><strong>Before:</strong></p>\n<pre><code class=\"language-fsharp\">[&lt;Interface&gt;]\r\ntype IDemoableOld =\r\n    abstract member Show: string -&gt; unit\r\n\r\nmodule IDemoableOld =\r\n    let autoFormat(a) = sprintf \"%A\" a\r\n</code></pre>\n<p>With F# 8, interfaces can have concrete members on them and a standalone module is not needed.</p>\n<p><strong>After:</strong></p>\n<pre><code class=\"language-fsharp\">[&lt;Interface&gt;]\r\ntype IDemoable =\r\n    abstract member Show: string -&gt; unit\r\n    static member AutoFormat(a) = sprintf \"%A\" a\r\n</code></pre>\n<h3 id=\"static-let-in-discriminated-unions-records-structs-and-types-without-primary-constructors\">Static let in discriminated unions, records, structs, and types without primary constructors</h3>\n<p>Second example of uniformity is enablement of static <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/members/let-bindings-in-classes\">bindings</a> in more F# types. We are talking about the following constructs:</p>\n<ul>\n<li><code>static let</code></li>\n<li><code>static let mutable</code></li>\n<li><code>static do</code></li>\n<li><code>static member val</code></li>\n</ul>\n<p>Before F# 8, those were only possible in regular class definitions. With F# 8, they can be added to:</p>\n<ul>\n<li>Discriminated unions</li>\n<li>Records</li>\n<li>Structs\n<ul>\n<li>incl. <code>[&lt;Struct&gt;]</code> unions and records</li>\n</ul>\n</li>\n<li>Types without primary constructors</li>\n</ul>\n<p>This addition can again help with encapsulating data and logic within the type definition, as opposed to declaring a standalone <code>module</code> and putting the bindings in that module.</p>\n<p><strong>Possible now:</strong>\nAs an example, a simple lookup for converting from string to cases of a disriminated union can now be declared directly inside the type definiton.</p>\n<pre><code class=\"language-fsharp\">open FSharp.Reflection\r\n\r\ntype AbcDU = A | B | C\r\n    with   \r\n        static let namesAndValues = \r\n            FSharpType.GetUnionCases(typeof) \r\n            |&gt; Array.map (fun c -&gt; c.Name, FSharpValue.MakeUnion (c,[||]) :?&gt; AbcDU)\r\n        static let stringMap = namesAndValues |&gt; dict\r\n        static let mutable cnt = 0\r\n\r\n        static do printfn \"Init done! We have %i cases\" stringMap.Count\r\n        static member TryParse text = \r\n            let cnt = Interlocked.Increment(&amp;cnt)\r\n            stringMap.TryGetValue text, sprintf \"Parsed %i\" cnt\r\n</code></pre>\n<p>The example also shows how a static mutable can be added, and how side effects can be triggered via <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/members/do-bindings-in-classes\">static do</a>. This feature respects the declaration order within the file, as well as the declaration order of types and bindings within a single <code>module</code>.</p>\n<p><strong>Also possible:</strong></p>\n<p>The syntax also allows you to define <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/members/explicit-fields-the-val-keyword\">explicit static fields with automatic properties using the &#8216;member val&#8217; keywords</a>.</p>\n<pre><code class=\"language-fsharp\">type AnotherDu = D | E\r\n    with\r\n        static member val X = 42 with get,set\r\n</code></pre>\n<p>Active patterns can also be implemented in <code>static let</code> bindings. The active pattern is private to the type, but it can be used by following members within the same type definition.</p>\n<pre><code class=\"language-fsharp\">type AB = \r\n    | A\r\n    | B of int\r\n\r\n    static let (|B0PatPrivate|_|) value = if value = 0 then Some (B 999) else None\r\n    static member ParseUsingActivePattern x = match x with | B0PatPrivate x -&gt; x | _ -&gt; A\r\n\r\nlet testThis = AB.ParseUsingActivePattern 0\r\n</code></pre>\n<p><strong>Good to know:</strong>\nThis feature does not work for &#8216;types&#8217; which are not real types at runtime. In particular type aliases and units of measure, which are being erased during compilation, and plain .NET enums.</p>\n<p>As with other statics in generic types in .NET, all static values are created per generic instantiation and can make use of the generic parameters provided, e.g. via reflection.</p>\n<p>The following example shows a <code>static let</code> in a generic type, in particular a type without primary constructor.</p>\n<pre><code class=\"language-fsharp\">type EmptyT =\r\n    static let cachedName = \r\n        let name = typeof.Name\r\n        printfn \"Accessing name for %s\" name\r\n        name\r\n    static member Name = cachedName\r\n</code></pre>\n<p>This might be useful to retrieve and cache information retrieved by reflection or by runtime-only features such as the <code>sizeof</code> instruction, per generic type instantiation.</p>\n<pre><code class=\"language-fsharp\">[&lt;Struct&gt;]\r\ntype MyUnion = \r\n    | A of aval:'A\r\n    | B of bval:'B\r\n    | C\r\n\r\n    static let sizeOfTCached = \r\n        printfn \"Creating cached val for %s * %s\" (typeof.Name) (typeof.Name)\r\n        sizeof&lt;MyUnion&gt;\r\n</code></pre>\n<h3 id=\"try-with-within-seq-and-collection-expressions\"><code>try-with</code> within <code>seq{}</code>,<code>[]</code> and <code>[||]</code> collection expressions</h3>\n<p>Third addition in the &#8216;uniformity&#8217; category is new support of the the try-with code construct within collection builders &#8211; <code>seq{}</code> for <code>IEnumerable</code> definitions, <code>[]</code> list builders, and <code>[||]</code> array builders.</p>\n<p>With this change, exception handling in those expressions is possible.\nThe following combinations are possible:</p>\n<ul>\n<li>&#8216;try&#8217; part can yield values, &#8216;with&#8217; can just produce a side effect (e.g. logging)</li>\n<li>both &#8216;try&#8217; and &#8216;with&#8217; can yield values</li>\n<li>&#8216;try&#8217; can be empty from the perspective of yielding values, and only &#8216;with&#8217; produces data\n<ul>\n<li>This scenario is less likely to be meaningful in real code, but it is supported</li>\n</ul>\n</li>\n</ul>\n<p>In the examples below, exception throwing is simulated by dividing by 0, which produces a <code>DivideByZeroException</code> on .NET.</p>\n<p><strong>Possible now:</strong></p>\n<pre><code class=\"language-fsharp\">let sum =\r\n    [ for x in [0;1] do       \r\n            try          \r\n                yield 1              \r\n                yield (10/x)    \r\n                yield 100  \r\n            with _ -&gt;\r\n                yield 1000 ]\r\n    |&gt; List.sum\r\n</code></pre>\n<p>When executed, the code yields a list <code>[1;1000;1;10;100]</code> which sums up to 1112.</p>\n<p><strong>Also: recursive calls and <code>yield!</code></strong></p>\n<p>Recursive calls from within the exception handler are also supported. In the case of <code>seq{}</code>, the behavior still maintains the lazy semantics and only executes code one value at a time. The example below shows how the exception handler can &#8220;retry&#8221; by recursively <code>yield!</code>-ing the same calculation again.</p>\n<p>Do note that exception handling (the <code>'with'</code> handler) has a non-trivial cost in .NET which will be noticable in case of repetitive exceptions being thrown and handled.</p>\n<pre><code class=\"language-fsharp\">let rec f () = seq {\r\n    try \r\n        yield 123    \r\n        yield (456/0)\r\n    with exn -&gt;\r\n        eprintfn \"%s\" exn.Message\r\n        yield 789\r\n        yield! f()\r\n}\r\n\r\nlet first5 = \r\n    f() \r\n    |&gt; Seq.take 5 \r\n    |&gt; Seq.toArray\r\n</code></pre>\n<p>When executed, the code produces <code>[|123; 789; 123; 789; 123|]</code>.</p>\n<h2 id=\"new-diagnostics\">New diagnostics</h2>\n<p>A big part of new F# 8 development is dedicated to new and updated diagnostics.\nThose are the errors, warnings and information messages which compiler reports when it encounters issues.\nThis section lists a few selected categories of diagnostics enhancements.\nBetween F# 7 and F# 8, 34 new diagnostic errors and messages have been added into the <a href=\"https://github.com/dotnet/fsharp/blame/main/src/Compiler/FSComp.txt\">F# definition of diagnostical messages</a>.</p>\n<h3 id=\"tailcall-attribute\">TailCall attribute</h3>\n<p>In F#, <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/functions/recursive-functions-the-rec-keyword\">recursive functions</a> are possible using the &#8216;rec&#8217; keyword. An important aspect of recursive functions is the ability to do <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/functions/recursive-functions-the-rec-keyword#tail-recursion\">tail recursion</a> in order to prevent deep stacks and eventually StackOverflowException errors.</p>\n<p>You can also read <a href=\"https://cs.stackexchange.com/questions/6230/what-is-tail-recursion\">this Q&amp;A</a> to learn what tail recursion means independent of the F# programming language.</p>\n<p>Starting with F# 8.0, you can use the <code>TailCall</code> attribute to explicitly state your intention of defining a tail-recursive function to the compiler. The compiler will then warn you if your function makes non-tail recursive calls. You can use the attribute on methods and module-level functions.</p>\n<p>The attribute is purely informational to the compiler and doesn&#8217;t affect generated code, it ensures the compiler checks for tail call consistency and raises a warning if it is not met.</p>\n<p><strong>Possible now:</strong>\nThe first function, <code>factorialClassic</code> is the text book example for starting with functional programming and implementing the factorial function.\nIn this snippet, it is not tail recursive: When building the project, a <code>\"warning FS3569: The member or function 'factorialClassic' has the 'TailCallAttribute' attribute, but is not being used in a tail recursive way.\"</code> is produced.</p>\n<p>The second function, <code>factorialWithAcc</code>, uses the accummulator technique to implement the calculation in a tail-recursive way. Therefore, when the attribute is applied, no warning is being produced.</p>\n<pre><code class=\"language-fsharp\">\r\n[&lt;TailCall&gt;]\r\nlet rec factorialClassic n =\r\n    match n with\r\n    | 0u | 1u -&gt; 1u\r\n    | _ -&gt; n * (factorialClassic (n - 1u))\r\n// This produces a warning\r\n\r\n[&lt;TailCall&gt;]\r\nlet rec factorialWithAcc n accumulator = \r\n    match n with\r\n    | 0u | 1u -&gt; accumulator\r\n    | _ -&gt; factorialWithAcc (n - 1u) (n * accumulator)\r\n// This is a tail call and does NOT produce a warning\r\n</code></pre>\n<h3 id=\"diagnostics-on-static-classes\">Diagnostics on static classes</h3>\n<p>F# does not have a dedicated set of keywords for creating a <code>static class</code>.\nHowever, types that are sealed cannot be inherited, and types which are abstract cannot be instantiated.\nThis in practice means that only static members can be accessed on such type.</p>\n<p>In order to eliminate runtime errors and dead code, a suite of new warnings for detecting invalid scenarios has been created.\nThe following diagnostics have been added as warnings enabled for F# 8:</p>\n<p><strong>New warnings emitted:</strong></p>\n<p>If a type uses both [&lt;Sealed&gt;] and [&lt;AbstractClass&gt;] attributes, it means it is static. This means:</p>\n<ul>\n<li>Instance let bindings are not allowed.</li>\n<li>Implementing interfaces is not allowed.</li>\n<li>Explicit field declarations are not allowed.</li>\n<li>Constructor with arguments is not allowed.</li>\n<li>Additional constructor is not allowed.</li>\n<li>Abstract member declarations are not allowed.</li>\n</ul>\n<h3 id=\"diagnostics-on-obsolete-usage\">Diagnostics on <code>[&lt;Obsolete&gt;]</code> usage</h3>\n<p>The <code>[&lt;Obsolete&gt;]</code> attribute can be used to mark types and members not recommended for usage.\nThe compiler should then emit a warning with a user-defined message (the message is taken from the attribute&#8217;s content) when a usage is being detected.</p>\n<p>The diagnostics around obsolete members have received the following support with F# 8:</p>\n<ul>\n<li>Detection on enum value usage</li>\n<li>Detection on an event</li>\n<li>Detection on record copy-and-update syntax (<code>with</code>) only when the obsolete field is part of the update</li>\n</ul>\n<p><strong>Example of code which now produces a warning</strong></p>\n<pre><code class=\"language-fsharp\">open System\r\ntype Color =\r\n    | [&lt;Obsolete(\"Use B instead\")&gt;] Red = 0\r\n    | Green = 1\r\n\r\nlet c = Color.Red // warning \"This construct is deprecated. Use B instead\" at this line\r\n</code></pre>\n<h3 id=\"optional-warning-when-obj-is-inferred\">Optional warning when <code>obj</code> is inferred</h3>\n<p>F# has a strong <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/type-inference\">type inference</a> on both parameter and return types.\nFor consumption of certain APIs, it can happen that <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/type-inference#automatic-generalization\">automatic generalization</a> fails to infer a value as a generic, and type is instead infered as <code>obj</code>.</p>\n<p>Most of the times (not always), this is an indication of an unintended action.\nF# 8 brings in a new optional information-level diagnostics with the number FS3559 and text:\n<code>\"A type has been implicitly inferred as 'obj', which may be unintended. Consider adding explicit type annotations. You can disable this warning by using '#nowarn \\\"3559\\\"' or '--nowarn:3559'.\"</code></p>\n<p>Example of code that can trigger it:</p>\n<pre><code class=\"language-fsharp\">([] = [])\r\n</code></pre>\n<p>This warning is off by default, meaning it has to be explicitely enabled using <code>&lt;WarnOn&gt;FS3559&lt;/WarnOn&gt;</code> in your .fsproj project file.</p>\n<h3 id=\"optional-warning-when-copy-and-update-changes-all-fields\">Optional warning when copy and update changes all fields</h3>\n<p>F# records offer a handy syntax to create a copy with selected fields modified, using the <code>with</code> keyword.\nThe project can be configured (via <code>&lt;WarnOn&gt;FS3560&lt;/WarnOn&gt;</code>) to detect a situation in which copying syntax happens to change all fields of a record.\nIn such cases, it will be shorter and more efficient to create a new record from scratch, and populate all the fields directly.\nThe compiler will then report a warning saying:\n<code>\"This copy-and-update record expression changes all fields of record type '..name of your type..'. Consider using the record construction syntax instead.\"</code></p>\n<h2 id=\"quality-of-life-improvements\">Quality of life improvements</h2>\n<p>F# 8 also brings in many quality of life improvements, not related to new language features nor new diagnostics.\nHere are a few selected ones:</p>\n<h3 id=\"trimmability-for-compiler-generated-code\">Trimmability for compiler-generated code</h3>\n<p>.NET platform supports <a href=\"https://learn.microsoft.com/dotnet/core/deploying/trimming/trim-self-contained\">trimming</a> since .NET 6. 3 improvements have been done to better support for trimming F#-compiler-generated code:</p>\n<ul>\n<li>Discriminated unions are now trimmable.</li>\n<li>Anonymous records are now trimmable.</li>\n<li>Code using <code>printfn \"%A\"</code> for trimmed records is now trimmable.</li>\n</ul>\n<h3 id=\"parser-recovery\">Parser recovery</h3>\n<p>Parser recovery comes to play when the F# parser encounters an invalid code construct, but should still attempt to continue parsing the rest of the file at a best-attempt basis.</p>\n<p>This ensures that IDE features like coloring and navigation keep working even for code with syntactical errors or code which is being typed and is not finished yet. Mistakes like missing equals signs, unfinished declarations or incorrect indentation have received vastly improved parser recovery; bringing a better typing experience to F# users.</p>\n<p>It very likely is the area of most improvements in F# 8 considering the number of pull requests targetting it.</p>\n<p><a href=\"https://amplifying-fsharp.github.io/sessions/2023/07/07/\">Watch this video session</a> to learn more about parser recovery in depth.</p>\n<h3 id=\"strict-indentation-rules\">Strict indentation rules</h3>\n<p>As part of work needed for improved parser recovery, F# 8 turns on a strict indentation mode. This mode respects the rules of the language for indentation and reports an error in invalid scenarios where the previous language versions reported a warning only.</p>\n<p>Projects targetting F# language version 7 or lower keep the current behavior, projects for F# 8 and newer have the strict indentation rules turned on automatically.</p>\n<p>The default selection can be configured using a compiler switch:</p>\n<p><code>--strict-indentation[+|-] Override indentation rules implied by the language version</code></p>\n<p>This can be also turned off in the project file, by specifying:</p>\n<p><code>&lt;OtherFlags&gt;--strict-indentation-&lt;/..&gt;</code> to turn this feature off or</p>\n<p><code>&lt;OtherFlags&gt;--strict-indentation+&lt;/..&gt;</code> to turn it on.</p>\n<h3 id=\"autocomplete-improvements\">Autocomplete improvements</h3>\n<p>The F# compiler provides a library which brings in autocomplete logic for F# code to your favourite editors, such as Visual Studio, Visual Studio Code or Rider.</p>\n<p>The improvements cover both recall and precision &#8211; suggesting names which are needed in the given context, and not offering the entities which cannot be used there.</p>\n<p>The following completion scenarios have been improved:</p>\n<ul>\n<li>Record completions in patterns</li>\n<li>Union fields in patterns</li>\n<li>Return type annotations</li>\n<li>Method completions for overrides</li>\n<li>Constant value completions in pattern matching (e.g. matching against constant in System.Double type)</li>\n<li>Expressions in enum values</li>\n<li>Suggesting names based on labels of union-case fields if they are defined</li>\n<li>Completions for collections of anonymous records</li>\n<li>Settable properties in attribute completions</li>\n</ul>\n<h3 id=\"struct-unions-can-now-have-49-cases\"><code>[&lt;Struct&gt;]</code> unions can now have &gt; 49 cases</h3>\n<p>Many issues have been resolved as part of F# 8 and they will not all be mentioned in this blog post. One I&#8217;d like to mention was a limiting factor for F# codebases:</p>\n<p>Before F# 8, declarations of struct unions with more than 49 cases caused an unexpected runtime error. As a workaround, they typically had to be converted to regular class-based unions.</p>\n<p>With F# 8, this limitation is removed and struct unions do not come with a size limitation &#8211; making them suitable for longer definitions of union cases. Examples might be unions of countries or phone codes.</p>\n<h2 id=\"compiler-performance\">Compiler performance</h2>\n<p>Compiler performance is a big topic for the F# compiler and related tooling. The compiler is what powers independent builds, language features in IDEs as well as popular libraries built on top of it (e.g. <a href=\"https://fsprojects.github.io/fantomas/docs/index.html\">Fantomas</a>, the F# code formatter).</p>\n<p>Two areas have received special attention in this release of F# &#8211; incremental builds of large graphs of projects via the <code>Reference assemblies</code> feature, and CPU-parallelization of the compiler process.</p>\n<h3 id=\"reference-assemblies\">Reference assemblies</h3>\n<p><a href=\"https://learn.microsoft.com/dotnet/standard/assembly/reference-assemblies\">Reference assemblies</a> are special assemblies in .NET which can be used in design-time and build-time scenarios.</p>\n<p>They work by keeping the public shape of an API (surface area), but stripping out implementation details and replacing them with a <code>\"throw null\"</code> instruction. That way, they get smaller and, more importantly, more robust to change. If the implementation details in the real project change, chances are that the reference assembly remains the same as long as APIs have not changed.</p>\n<p>This is an existing feature which was already working for F#, but not utilized to its potential due to F#&#8217;s compiler-generated resources. F# compiler enriches produces assemblies with embedded resources, binary data representing the F# signature information and F# optimizer for cross-assembly F# support and cross-assembly function inlining.</p>\n<p>For the purpose of reference assemblies, optimization data has been reduced to <code>\"let inline\"</code> definitions only in DEBUG builds, and F# signature data has been replaced with a custom hash function covering the public surface of F# types, modules and namespaces.</p>\n<p>With those two changes, changes of implementation details in a low-level F# project will not require a full rebuild of all the projects transitively depending on it. This can be a big factor especially in a large solutions with interconnected projects.</p>\n<p>When using Visual Studio, the benefit of reference assemblies can go even further by avoiding the need to call into <code>msbuild.exe</code> alltogether, by replicating up-to-date checks in VisualStudio. This <a href=\"https://devblogs.microsoft.com/visualstudio/vs-toolbox-accelerate-your-builds-of-sdk-style-net-projects/\">blog about AccelerateBuildsInVisualStudio</a> explains the feature in bigger details.</p>\n<p>If you want to give it a try, add the following to your .fsproj project properties:</p>\n<ul>\n<li><code>&lt;AccelerateBuildsInVisualStudio&gt;true&lt;/..&gt;</code></li>\n</ul>\n<h3 id=\"switches-for-compiler-parallelization\">Switches for compiler parallelization</h3>\n<p>Second area of improvements I want to mention is compiler parallelization.\nHistorically, the F# compiler has been single-threaded. In recent F# versions, parallelization has been enabled for parsing and for typechecking implementation files backed by signature files.</p>\n<p>F# 8 brings in 3 new experimental features that have been added to cover 3 other stages of the F# compilation process.\nAt the moment, they are not enabled by default and are only configurable via dedicated <code>--test:</code> flags to the command line compiler. They can be also passed to the compiler based on project file, using the following property syntax for <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/compiler-options\">F# compiler options</a>:</p>\n<ul>\n<li><code>&lt;OtherFlags&gt;--test:..&lt;/..&gt;</code></li>\n</ul>\n<p>Graph-based typechecking has the potential of speeding up the build process the most. It works by deriving dependencies of F# files from the untyped syntax tree before the expensive typechecking phase, and then controlling which files can be typechecked in parallel by following the connected graph of files.</p>\n<p>This feature has been demonstrated in an <a href=\"https://amplifying-fsharp.github.io/\">Amplifying F#</a> session on <a href=\"https://amplifying-fsharp.github.io/sessions/2023/04/28/\">Graph-based type-checking</a> and is described in <a href=\"https://devblogs.microsoft.com/dotnet/a-new-fsharp-compiler-feature-graphbased-typechecking/\">this blog post</a>.</p>\n<p>This can be turned on by the flag:</p>\n<ul>\n<li>&#8211;test:GraphBasedChecking</li>\n</ul>\n<p>Next phase of the compilation process are the optimizations applied to F# code. The technical description of the chosen approach is well described in the <a href=\"https://github.com/dotnet/fsharp/pull/14390\">pull request implementing the feature</a>.</p>\n<p>Timings for <code>FSharp.Compiler.Service</code> showing the difference with (Parallel) or without (Sequential) this feature:\nTest run on a 8-core/16-thread CPU.\nIt&#8217;s worth noting that no more than 7 items are processed at a time.</p>\n<table>\n<thead>\n<tr>\n<th>Optimize</th>\n<th>Mode</th>\n<th>Optimization Time</th>\n<th>Total Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>Sequential</td>\n<td>12.9s</td>\n<td>31.0s</td>\n</tr>\n<tr>\n<td>+</td>\n<td>Parallel</td>\n<td>7.1s (-45%)</td>\n<td>25.5s (-18%)</td>\n</tr>\n<tr>\n<td>&#8211;</td>\n<td>Sequential</td>\n<td>5.6s</td>\n<td>24.3s</td>\n</tr>\n<tr>\n<td>&#8211;</td>\n<td>Parallel</td>\n<td>3.7s (-34%)</td>\n<td>23.6s (-3%)</td>\n</tr>\n</tbody>\n</table>\n<p>The feature can be enabled using the following flag:</p>\n<ul>\n<li>&#8211;test:ParallelOptimization</li>\n</ul>\n<p>Last phase of the F# build process is the code generation of IL instructions and creation of an assembly.\nIn this phase, the parallelization happens by converting methods bodies into .NET IL in parallel.\nFor the main test project in the F# repository, this change lead to an improvement from 0.6s to 0.4s to the IL conversion, therefore a -33% speed improvement.</p>\n<p>The feature can be enabled using the following flag:</p>\n<ul>\n<li>&#8211;test:ParallelIlxGen</li>\n</ul>\n<p>Alternatively, all of the features can be enabled globally using an <code>FSHARP_EXPERIMENTAL_FEATURES</code> environment variable, for example like this in PowerShell: <code>$env:FSHARP_EXPERIMENTAL_FEATURES = '1</code>.</p>\n<h2 id=\"enhancements-to-the-fsharp-core-standard-library\">Enhancements to the FSharp.Core standard library</h2>\n<h3 id=\"inlining\">Inlining</h3>\n<p>F# already has a powerful feature called inlining.\nInstead of calling a function directly, the compiler can decide to put the body of the called function (=inline it) into the call site. That way, not only is a function call being eliminated, but the compiler can also optimize further based on type arguments and function arguments available at the call site. For example, a regular generic function for equality would have to go via standard interfaces and contracts (e.g., the <code>.Equals()</code> method). When inlining the generic usage in a call site that uses it on integers, it can instead replace it with a single instruction that compares two integers.</p>\n<p>Furthermore, F# also has the <code>[&lt;InlineIfLambda&gt;]</code> attribute which allows to replace a lambda function with a direct call when inlining happens. On top of all the previous advantages, this also means a saved allocation for the closure of the lambda.</p>\n<p>F# 8 comes with inlining changes to two standard modules in FSharp.Core:</p>\n<ul>\n<li><a href=\"https://github.com/dotnet/fsharp/pull/14927\">Inlining</a> for functions in the <code>Option</code> module</li>\n<li><a href=\"https://github.com/dotnet/fsharp/pull/15709\">Inlining</a> for functions in the <code>ValueOption</code> module</li>\n</ul>\n<p>Lambda allocations have been removed, which in the case of <code>ValueOption</code> functions means zero allocations alltogether.\nAs an example of the reduced overhead, mapping of the <code>None</code> value now takes 0.17ns instead of 2.77ns, which is a 16x improvement in terms of time.</p>\n<p>Another example is an equality-inlining issue which has been spotted at <a href=\"https://github.com/dotnet/fsharp/issues/15720\">this issue about List.contains performance</a>.\nThe reason was a stopped inlining because of recursive scope &#8211; when a function is recursive, it cannot be inlined (inlining effectively means embedding the code of the inlined function at the call site &#8211; which for a recursive function would mean including it infinitely many times).\nOnce the equality check was moved outside of the recursive scope, equality check can be inlined and properly special-cased.</p>\n<p><a href=\"https://github.com/dotnet/fsharp/pull/15726/files#diff-3564806fd5c409bdb92242766794a120c6897330a21c0b12ce2138c2e6aa44ecR462\">This is the minimal code change</a> which improved it, leading up to an 16x improvement in certain scenarios.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th style=\"text-align: right\">Mean</th>\n<th style=\"text-align: right\">Error</th>\n<th style=\"text-align: right\">StdDev</th>\n<th style=\"text-align: right\">Median</th>\n<th style=\"text-align: right\">Gen0</th>\n<th style=\"text-align: right\">Allocated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&#8216;int &#8211; List.containsOld&#8217;</td>\n<td style=\"text-align: right\">9,284.4 μs</td>\n<td style=\"text-align: right\">158.63 μs</td>\n<td style=\"text-align: right\">148.38 μs</td>\n<td style=\"text-align: right\">9,266.7 μs</td>\n<td style=\"text-align: right\">1906.2500</td>\n<td style=\"text-align: right\">24024049 B</td>\n</tr>\n<tr>\n<td>&#8216;int &#8211; List.containsNew&#8217;</td>\n<td style=\"text-align: right\">548.4 μs</td>\n<td style=\"text-align: right\">10.35 μs</td>\n<td style=\"text-align: right\">15.17 μs</td>\n<td style=\"text-align: right\">541.9 μs</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">41 B</td>\n</tr>\n<tr>\n<td>&#8216;string &#8211; List.containsOld&#8217;</td>\n<td style=\"text-align: right\">2,393.9 μs</td>\n<td style=\"text-align: right\">43.59 μs</td>\n<td style=\"text-align: right\">83.98 μs</td>\n<td style=\"text-align: right\">2,359.5 μs</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">42 B</td>\n</tr>\n<tr>\n<td>&#8216;string &#8211; List.containsNew&#8217;</td>\n<td style=\"text-align: right\">838.6 μs</td>\n<td style=\"text-align: right\">21.62 μs</td>\n<td style=\"text-align: right\">62.38 μs</td>\n<td style=\"text-align: right\">824.1 μs</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">41 B</td>\n</tr>\n<tr>\n<td>&#8216;record &#8211; List.containsOld&#8217;</td>\n<td style=\"text-align: right\">3,796.8 μs</td>\n<td style=\"text-align: right\">66.80 μs</td>\n<td style=\"text-align: right\">113.44 μs</td>\n<td style=\"text-align: right\">3,753.0 μs</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">45 B</td>\n</tr>\n<tr>\n<td>&#8216;record &#8211; List.containsNew&#8217;</td>\n<td style=\"text-align: right\">691.4 μs</td>\n<td style=\"text-align: right\">13.61 μs</td>\n<td style=\"text-align: right\">16.20 μs</td>\n<td style=\"text-align: right\">688.9 μs</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">41 B</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"improvements\">Improvements</h3>\n<h3 id=\"array-parallel-apis\"><code>Array.Parallel.*</code> APIs</h3>\n<p>Fsharp.Core offers many standard functions for major collection types &#8211; arrays, lists and sequences.\nArray contains a nested module, Array.Parallel, intended for CPU-intensive tasks over large arrays. Before F# 8, that module was not on par with the non-parallel functions, and was missing many basic functions. With this release, many new APIs have been added to support multi-threaded programming.</p>\n<p>Each of the functions will try to consume all the logical processors available to it (this can be fine-tuned via the <code>DOTNET_PROCESSOR_COUNT</code> environment variable if the default is not desired).\nThey are especially useful in CPU-intensive processing. That is, either when the arrays are very large, when the function parameter passed in is itself computationally expensive, or both.\nThey do carry the overhead of creating new tasks and coordinating them, therefore can be slower then their non-parallel counterparts for simple inputs.</p>\n<ul>\n<li>exists</li>\n<li>forAll</li>\n<li>tryFindIndex</li>\n<li>tryFind</li>\n<li>tryPick</li>\n<li>reduceBy</li>\n<li>reduce</li>\n<li>minBy</li>\n<li>min</li>\n<li>sumBy</li>\n<li>sum</li>\n<li>maxBy</li>\n<li>max</li>\n<li>averageBy</li>\n<li>average</li>\n<li>zip</li>\n<li>groupBy</li>\n<li>filter</li>\n<li>sortInPlaceWith</li>\n<li>sortInPlaceBy</li>\n<li>sortInPlace</li>\n<li>sortWith</li>\n<li>sortBy</li>\n<li>sort</li>\n<li>sortByDescending</li>\n<li>sortDescending\n<h4 id=\"selected-benchmarks\">Selected benchmarks</h4>\n<p>To demonstrate the difference between <code>Array</code>, <code>Array.Parallel</code> and <code>PLINQ</code>, several benchmarks are included in this blog post.\nAll of these were running for an array of <strong>500.000 randomly generated structs</strong> using the following definition of the struct, and an artificial function representing <em>&#8220;complex CPU-intensive business logic&#8221;</em>.</li>\n</ul>\n<p><strong>Possible now:</strong></p>\n<pre><code class=\"language-fsharp\">[&lt;Struct&gt;]\r\ntype SampleRecord = {Age : int; Balance : int64; Molecules : float; IsMiddle : bool}\r\n\r\nlet complexLogic (sr:SampleRecord) = \r\n    let mutable total = float sr.Balance\r\n    total &lt;- total + sin sr.Molecules\r\n    total &lt;- atan total\r\n    for a=0 to sr.Age do\r\n        total &lt;- total + cos (float a)\r\n    total &lt;- total + float (hash sr)\r\n    total\r\n </code></pre>\n<p>This was executed on a 11th Gen Intel Core i9-11950H 2.60GHz machine, with 16 logical and 8 physical cores.\nThe comparisons were done across three different approaches:</p>\n<ul>\n<li>Array module from FSharp.Core</li>\n<li>PLINQ (Parallel Enumerable via <code>AsParallel()</code>), a stable and robust implementation from .NET</li>\n<li>Newly added functions to the <code>Array.Parallel</code> moduleThe major outcome for the comparison is the classical <em>&#8220;it depends&#8221;</em> consulting advice.\n500.000 elements can still be processed sequentially very fast (notice we are in the <code>ms</code> time range at most) and in cases of trivial calculation (e.g. just a property/field accessor, and not an expensive lambda function), the non-parallelized functions from the <code>Array</code> module perform the best. See for example the &#8216;GroupBy &#8211; field only&#8217;, &#8216;Sort &#8211; by int field&#8217; and &#8216;SumBy(plain field access)&#8217; categories in the results.The parallel versions start to get an advantage when the calculation to be invoked on every element gets more complex, like the <code>complexLogic</code> function above. In those cases, the <code>Array.Parallel</code> module brings both faster speed compared to the classical version, as well as better allocation footprint compared to PLINQ.</p>\n<p>A very significant performance improvement occurs at the <code>MinBy</code> calculation, where the <code>Array.Parallel.minBy</code> version is 68% faster than <code>Array.minBy</code> and 70% faster than <code>AsParallel().MinBy(..)</code> from PLINQ. MinBy is an example of an aggregation function, just like max, sum or average. They are all built on a lower-level <code>reduce</code> function utilizing a map-reduce routine, and very similar performance is expected across them all.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Categories</th>\n<th style=\"text-align: right\">Mean</th>\n<th style=\"text-align: right\">Ratio</th>\n<th style=\"text-align: right\">Allocated</th>\n<th style=\"text-align: right\">Alloc Ratio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ArrayGroupBy2</td>\n<td>GroupBy &#8211; calculation</td>\n<td style=\"text-align: right\">169,024.8 us</td>\n<td style=\"text-align: right\">baseline</td>\n<td style=\"text-align: right\">70.17 MB</td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>PlinqGroupBy2</td>\n<td>GroupBy &#8211; calculation</td>\n<td style=\"text-align: right\">74,683.8 us</td>\n<td style=\"text-align: right\">-56%</td>\n<td style=\"text-align: right\">103.93 MB</td>\n<td style=\"text-align: right\">+48%</td>\n</tr>\n<tr>\n<td>ArrayParallelGroupBy2</td>\n<td>GroupBy &#8211; calculation</td>\n<td style=\"text-align: right\">62,574.3 us</td>\n<td style=\"text-align: right\">-63%</td>\n<td style=\"text-align: right\">70.61 MB</td>\n<td style=\"text-align: right\">+1%</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>ArrayGroupBy</td>\n<td>GroupBy &#8211; field only</td>\n<td style=\"text-align: right\">14,274.3 us</td>\n<td style=\"text-align: right\">baseline</td>\n<td style=\"text-align: right\">57.28 MB</td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>PlinqGroupBy</td>\n<td>GroupBy &#8211; field only</td>\n<td style=\"text-align: right\">30,933.6 us</td>\n<td style=\"text-align: right\">+117%</td>\n<td style=\"text-align: right\">88.77 MB</td>\n<td style=\"text-align: right\">+55%</td>\n</tr>\n<tr>\n<td>ArrayParallelGroupBy</td>\n<td>GroupBy &#8211; field only</td>\n<td style=\"text-align: right\">18,318.6 us</td>\n<td style=\"text-align: right\">+29%</td>\n<td style=\"text-align: right\">47.72 MB</td>\n<td style=\"text-align: right\">-17%</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>ArrayMinBy</td>\n<td>MinBy(calculationFunction)</td>\n<td style=\"text-align: right\">157,463.5 us</td>\n<td style=\"text-align: right\">baseline</td>\n<td style=\"text-align: right\">11.44 MB</td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>PlinqMinBy</td>\n<td>MinBy(calculationFunction)</td>\n<td style=\"text-align: right\">160,243.5 us</td>\n<td style=\"text-align: right\">+2%</td>\n<td style=\"text-align: right\">11.44 MB</td>\n<td style=\"text-align: right\">+0%</td>\n</tr>\n<tr>\n<td>ArrayParallelMinBy</td>\n<td>MinBy(calculationFunction)</td>\n<td style=\"text-align: right\">48,768.7 us</td>\n<td style=\"text-align: right\">-68%</td>\n<td style=\"text-align: right\">11.45 MB</td>\n<td style=\"text-align: right\">+0%</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>ArraySort</td>\n<td>Sort &#8211; by int field</td>\n<td style=\"text-align: right\">27,352.1 us</td>\n<td style=\"text-align: right\">baseline</td>\n<td style=\"text-align: right\">17.17 MB</td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>PlinqSort</td>\n<td>Sort &#8211; by int field</td>\n<td style=\"text-align: right\">38,723.7 us</td>\n<td style=\"text-align: right\">+42%</td>\n<td style=\"text-align: right\">172.89 MB</td>\n<td style=\"text-align: right\">+907%</td>\n</tr>\n<tr>\n<td>ArrayParallelSort</td>\n<td>Sort &#8211; by int field</td>\n<td style=\"text-align: right\">76,744.8 us</td>\n<td style=\"text-align: right\">+179%</td>\n<td style=\"text-align: right\">112.76 MB</td>\n<td style=\"text-align: right\">+557%</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>ArraySortBy</td>\n<td>SortBy &#8211; calculation</td>\n<td style=\"text-align: right\">214,042.4 us</td>\n<td style=\"text-align: right\">baseline</td>\n<td style=\"text-align: right\">30.52 MB</td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>PlinqSortBy</td>\n<td>SortBy &#8211; calculation</td>\n<td style=\"text-align: right\">97,214.3 us</td>\n<td style=\"text-align: right\">-55%</td>\n<td style=\"text-align: right\">193.99 MB</td>\n<td style=\"text-align: right\">+536%</td>\n</tr>\n<tr>\n<td>ArrayParallelSortBy</td>\n<td>SortBy &#8211; calculation</td>\n<td style=\"text-align: right\">125,951.7 us</td>\n<td style=\"text-align: right\">-41%</td>\n<td style=\"text-align: right\">130.49 MB</td>\n<td style=\"text-align: right\">+328%</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>ArraySumBy</td>\n<td>SumBy(plain field access)</td>\n<td style=\"text-align: right\">466.7 us</td>\n<td style=\"text-align: right\">baseline</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">NA</td>\n</tr>\n<tr>\n<td>PlinqSumBy</td>\n<td>SumBy(plain field access)</td>\n<td style=\"text-align: right\">984.1 us</td>\n<td style=\"text-align: right\">+112%</td>\n<td style=\"text-align: right\">0.01 MB</td>\n<td style=\"text-align: right\">NA</td>\n</tr>\n<tr>\n<td>ArrayParallelSumBy</td>\n<td>SumBy(plain field access)</td>\n<td style=\"text-align: right\">687.6 us</td>\n<td style=\"text-align: right\">+47%</td>\n<td style=\"text-align: right\">0.01 MB</td>\n<td style=\"text-align: right\">NA</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>ArrayTryFind</td>\n<td>TryFind &#8211; calculationFunction</td>\n<td style=\"text-align: right\">76,509.7 us</td>\n<td style=\"text-align: right\">baseline</td>\n<td style=\"text-align: right\">5.72 MB</td>\n<td style=\"text-align: right\"></td>\n</tr>\n<tr>\n<td>PlinqTryFind</td>\n<td>TryFind &#8211; calculationFunction</td>\n<td style=\"text-align: right\">41,256.7 us</td>\n<td style=\"text-align: right\">-47%</td>\n<td style=\"text-align: right\">10.74 MB</td>\n<td style=\"text-align: right\">+88%</td>\n</tr>\n<tr>\n<td>ArrayParallelTryFind</td>\n<td>TryFind &#8211; calculationFunction</td>\n<td style=\"text-align: right\">23,094.4 us</td>\n<td style=\"text-align: right\">-69%</td>\n<td style=\"text-align: right\">5.73 MB</td>\n<td style=\"text-align: right\">+0%</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"async-improvements\"><code>async</code> improvements</h3>\n<ul>\n<li><code>Bind</code> of <code>Async&lt;&gt;</code> within <code>task{}</code> <a href=\"https://github.com/dotnet/fsharp/pull/14499\">now starts on the same thread</a>\n<ul>\n<li>This saves resources by keeping the computation on the same .NET thread and not starting a new one</li>\n</ul>\n</li>\n<li><code>MailBoxProcessor</code> <a href=\"https://github.com/dotnet/fsharp/pull/14929\">now comes</a> with a public <code>.Dispose()</code> member\n<ul>\n<li>Better discoverability that <code>MailboxProcessor</code> implements <code>IDisposable</code> and thus must be disposed</li>\n<li>Removes need to manually cast to <code>IDisposable</code>, as in <code>(mailboxProcessor :&gt; IDisposable).Dispose()</code> before disposing</li>\n</ul>\n</li>\n<li><code>MailBoxProcessor</code> <a href=\"https://github.com/dotnet/fsharp/pull/14931\">now comes</a> with <code>StartImmediate</code>\n<ul>\n<li>Existing <code>Start</code> method starts the execution on the thread pool. The new <code>StartImmediate</code> ensures starting on the same thread as the calling one.</li>\n<li>This is useful for situations in which you want to force the MailboxProcessor to start on a given thread or even run on a single thread throughout its lifetime. For example, a <code>MailboxProcessor</code> may be desired to wrap some unmanaged state, such as a window or some communication session that is not thread safe, and this is not currently possible with <code>MailboxProcessor.Start</code>.\n<h2 id=\"thanks-and-acknowledgements\">Thanks and acknowledgements</h2>\n</li>\n</ul>\n</li>\n</ul>\n<p>F# is developed as a collaboration between the .NET Foundation, the F# Software Foundation, their members and other contributors including Microsoft. The F# community is involved at all stages of innovation, design, implementation and delivery and we’re proud to be a contributing part of this community.</p>\n<p>Between October 2022 and October 2023, the <a href=\"https://github.com/dotnet/fsharp/graphs/contributors?from=2022-10-01&amp;to=2023-10-01&amp;type=c\">dotnet/fsharp</a> repository tracks 33 contributors with commits in that period. On top of that, there are numerous contributors filing <a href=\"https://github.com/dotnet/fsharp\">issues</a>, <a href=\"https://github.com/fsharp/fslang-suggestions\">raising and voting on suggestions</a> and contributing to <a href=\"https://github.com/fsharp/fslang-design\">feature design</a>. Thank you all!</p>\n<p>Below is a wall created from the profile pictures listed at GitHub&#8217;s <a href=\"https://github.com/dotnet/fsharp/graphs/contributors?from=2022-10-01&amp;to=2023-10-01&amp;type=c\">automated statistics</a> for the <a href=\"https://github.com/dotnet/fsharp\">dotnet/fsharp</a> repository over the F# 8 development period. Visit the link and see all the contributors including the changes they have brought to F#. Order of the profile pictures here is ASCII alphabetical.</p>\n<p><img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/217092?s=60&amp;v=4\" alt=\"0101\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/26364714?s=60&amp;v=4\" alt=\"DedSec256\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/19922066?s=60&amp;v=4\" alt=\"Happypig375\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/5175830?s=60&amp;v=4\" alt=\"KevinRansom\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/7862010?s=60&amp;v=4\" alt=\"MattGal\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/9423618?s=60&amp;v=4\" alt=\"NikolaMilosavljevic\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/4218809?s=60&amp;v=4\" alt=\"NinoFloris\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/3138005?s=60&amp;v=4\" alt=\"Smaug123\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/46543583?s=60&amp;v=4\" alt=\"T-Gro\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/20281641?s=60&amp;v=4\" alt=\"abonie\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/8275461?s=60&amp;v=4\" alt=\"alfonsogarciacaro\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/3923587?s=60&amp;v=4\" alt=\"auduchinok\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/65685447?s=60&amp;v=4\" alt=\"bmitc\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/6309070?s=60&amp;v=4\" alt=\"cartermp\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/3221269?s=60&amp;v=4\" alt=\"dawedawe\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/7204669?s=60&amp;v=4\" alt=\"dsyme\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/31915729?s=60&amp;v=4\" alt=\"edgarfgp\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/884885?s=60&amp;v=4\" alt=\"goswinr\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/1261319?s=60&amp;v=4\" alt=\"gusty\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/4031185?s=60&amp;v=4\" alt=\"jwosty\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/4257079?s=60&amp;v=4\" alt=\"kant2002\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/5063478?s=60&amp;v=4\" alt=\"kerams\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/1760221?s=60&amp;v=4\" alt=\"majocha\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/8725170?s=60&amp;v=4\" alt=\"mmitche\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/2621499?s=60&amp;v=4\" alt=\"nojaf\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/5451366?s=60&amp;v=4\" alt=\"psfinaki\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/94796738?s=60&amp;v=4\" alt=\"rosskuehl\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/2478401?s=60&amp;v=4\" alt=\"safesparrow\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/447391?s=60&amp;v=4\" alt=\"tboby\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/12659251?s=60&amp;v=4\" alt=\"teo-tsirpanis\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/1260985?s=60&amp;v=4\" alt=\"vzarytovskii\" /></p>\n<p><img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/29605222?s=60&amp;v=4\" width=\"60\" />\n<img decoding=\"async\" src=\"https://avatars.githubusercontent.com/u/87944?s=60&amp;v=4\" width=\"60\" /></p>\n<p>We want to thank all contributors, community members and users of F#. On top of that, we want to call out the following heavily contributing members and a selection of their recent work in the <a href=\"https://github.com/dotnet/fsharp\">F# repository</a> explicitly:</p>\n<ul>\n<li><a href=\"https://github.com/kerams\">@kerams</a> for the majority of new language features, completion improvements and many other additions to F#.</li>\n<li><a href=\"https://github.com/auduchinok\">@auduchinok</a> for parser recovery improvements, strict indentation mode and many performance improvements in the F# compiler itself.</li>\n<li><a href=\"https://github.com/nojaf\">@nojaf</a> for syntax tree additions, code printing additions, signature files improvements and graph-based typechecking.</li>\n<li><a href=\"https://github.com/safesparrow\">@safesparrow</a> for compiler observability and tracing, graph-based typechecking and parallel optimization.</li>\n<li><a href=\"https://github.com/majocha\">@majocha</a> for improvements in the VS editor support which improve user experience, editor speed and code search experience.</li>\n<li><a href=\"https://github.com/edgarfgp\">@edgarfp</a> for improvements in error handling, user friendliness of existing diagnostics and additions of many new F# diagnostics.</li>\n</ul>\n<h2 id=\"contributor-showcase\">Contributor showcase</h2>\n<p>As in our last release, we want to highlight individuals who contribute to F#, and publish a short text about them using their own words.</p>\n<h3 id=\"dawedawe\">dawedawe</h3>\n<p>I&#8217;m David Schaefer, aka dawe, living near Cologne, Germany.</p>\n<p>I fell in love with functional programming (FP) while being exposed to theoretical computer science during my time at the university.\nBack then, I made my first stab at contributing to open source by maintaining some Haskell packages of OpenBSD.\nAfter university, I wasn&#8217;t able to find an FP job and fell out of package maintainership.\nBut a C# job at least allowed me to stay in touch with FP by using F# in my free time.</p>\n<p>Motivated to use F# professionally, I joined an awesome small company (Rhein-Spree) which uses F# quite a lot.\nThat led to small contributions to <a href=\"https://fsprojects.github.io/fantomas/\">Fantomas</a> and with the great mentorship of Florian,\nI worked my way up to co-maintainership of it.</p>\n<p>The ride really got wild when I joined the G-Research Open Source team in March 2023 to work full time on the F# eco-system.\nIn parallel, we launched the Amplifying F# initiative. Watch our video of <a href=\"https://www.youtube.com/watch?v=69VVSnng8TY\">fsharpconf 2023</a> to learn more.\nToday, I help maintaining various pieces in the eco-system. I&#8217;m proud I earned the needed trust for that.</p>\n<p>With the <a href=\"https://datascienceinfsharp.com/\">Data Science in F#</a> conference still fresh on my mind, I want to emphasize how much the human side means to me.\nSharing a coffee or a beer with friends from all over the world,\ndiscussing new ideas how to move things forward,\ncelebrating wins together and consoling each other after a loss &#8211; that&#8217;s for a large part why I do this.\nAnd all the green squares on GitHub, of course.</p>\n<p><img decoding=\"async\" src=\"./david.jpg\" alt=\"Dawe\" /></p>\n<h3 id=\"auduchinok\">auduchinok</h3>\n<p>I&#8217;m Eugene Auduchinok, I work on F# support in JetBrains Rider and currently live in Amsterdam.\nI have first met with F# in the university as some of the courses used it. F# worked good for the tasks and was really fun to use.\nWhen Rider was announced, I was happy since I loved working on a Mac and using IntelliJ. The problem was it didn&#8217;t have any support for F#, so I&#8217;ve applied for an internship to try to make it happen. This worked out and now I use it daily and enjoy seeing other people using it too. <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png\" alt=\"🙂\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />\nSince then I&#8217;ve had a chance to contribute to various parts of F# tooling, work with wonderful people, and even make some impact on the language design itself.</p>\n<p><img decoding=\"async\" src=\"./eugene.jpg\" alt=\"Eugene\" /></p>\n<h2 id=\"whats-next\">What&#8217;s next?</h2>\n<p>We continue working on F#: be it the language itself, compiler performance, Visual Studio features and improvements and many other aspects of F#.</p>\n<ul>\n<li>See the <a href=\"https://github.com/orgs/dotnet/projects/126/views/17\">overall work tracking issues</a></li>\n<li>Do you want to help? There is a <a href=\"https://github.com/dotnet/fsharp/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22help+wanted%22\">&#8220;help wanted&#8221; issues list</a></li>\n<li>Getting started with the compiler codebase? We have a curated list of <a href=\"https://github.com/dotnet/fsharp/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">good first issues</a></li>\n</ul>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-fsharp-8/\">Announcing F# 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/announcing-fsharp-8/feed/","slash:comments":"3"},{"title":"Announcing C# 12","link":"https://devblogs.microsoft.com/dotnet/announcing-csharp-12/","comments":"https://devblogs.microsoft.com/dotnet/announcing-csharp-12/#comments","dc:creator":{"#cdata-section":"Kathleen Dollard"},"pubDate":"Tue, 14 Nov 2023 16:00:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Core"},{"#cdata-section":"C#"},{"#cdata-section":".net 8"},{"#cdata-section":"c# 12"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=48818"},"description":{"#cdata-section":"<p>Announcing the official release of C# 12, including collection expressions, primary constructors, and more!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-csharp-12/\">Announcing C# 12</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>C# 12 is available today! You can get it by downloading <a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\">.NET 8</a>, the latest <a href=\"https://visualstudio.microsoft.com/downloads\">Visual Studio</a>, or <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csdevkit\">Visual Studio Code&#8217;s C# Dev Kit</a>.</p>\n<p>For your existing projects, you&#8217;ll also need to indicate that you want to change your language version. You can change your language version by changing your <code>TargetFramework</code> to .NET 8:</p>\n<pre><code class=\"language-xml\">&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\r\n    &lt;PropertyGroup&gt;\r\n        &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\r\n...\r\n    &lt;/PropertyGroup&gt;\r\n&lt;/Project&gt;</code></pre>\n<p>C# 12 brings better developer productivity with simplified syntax, and faster execution. You can check out details on each feature in the <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/csharp-12\">What&#8217;s new in C# 12</a> article on MS Learn. The <em>What&#8217;s new</em> article includes links to updates across the C# documentation on MS Learn that reflect the new features.</p>\n<h2 id=\"simplifying-your-code\">Simplifying your code</h2>\n<p>Every version of C# helps you write better code &#8211; simpler code that better expresses your intent. Compared with the code you previously wrote, the new approach is as fast or faster and has the same or fewer allocations. You can adopt these new features with confidence. One design goal for new features is to ensure that adopting the new feature doesn&#8217;t degrade performance.</p>\n<p>C# 12 introduces collection expressions, primary constructors for all classes and structs, syntax to alias any type, and default parameters for lambda expressions that simplify your code.</p>\n<h3 id=\"collection-expressions\">Collection expressions</h3>\n<p>Prior to C# 12, creating collections required different syntax for different scenarios. Initializing a <code>List&lt;int&gt;</code> required different syntax than an <code>int[]</code> or <code>Span&lt;int&gt;</code>. Here are just a few of the ways collections might be created:</p>\n<pre><code class=\"language-csharp\">int[] x1 = new int[] { 1, 2, 3, 4 };\r\nint[] x2 = Array.Empty&lt;int&gt;();\r\nWriteByteArray(new[] { (byte)1, (byte)2, (byte)3 });\r\nList&lt;int&gt; x4 = new() { 1, 2, 3, 4 };\r\nSpan&lt;DateTime&gt; dates = stackalloc DateTime[] { GetDate(0), GetDate(1) };\r\nWriteByteSpan(stackalloc[] { (byte)1, (byte)2, (byte)3 });</code></pre>\n<p>Collection expressions are a unified syntax:</p>\n<pre><code class=\"language-csharp\">int[] x1 = [1, 2, 3, 4];\r\nint[] x2 = [];\r\nWriteByteArray([1, 2, 3]);\r\nList&lt;int&gt; x4 = [1, 2, 3, 4];\r\nSpan&lt;DateTime&gt; dates = [GetDate(0), GetDate(1)];\r\nWriteByteSpan([1, 2, 3]);</code></pre>\n<p>Not only can you use a single syntax, but the compiler creates fast code for you. In many cases, the compiler sets the collection capacity and avoids copying data.</p>\n<p>And if this wasn&#8217;t enough &#8211; you can use the new spread operator to include the elements of one or more collections or enumerable expressions within a collection expression:</p>\n<pre><code class=\"language-csharp\">int[] numbers1 = [1, 2, 3];\r\nint[] numbers2 = [4, 5, 6];\r\nint[] moreNumbers = [.. numbers1, .. numbers2, 7, 8, 9];\r\n// moreNumbers contains [1, 2, 3, 4, 5, 6, 7, 8, ,9];</code></pre>\n<p>The implementation of any spread expression is optimized, and will often be better than the code you might write to combine collections.</p>\n<p>We are very interested in <a href=\"https://github.com/dotnet/csharplang/discussions/7666\">feedback on possible future work on collection expressions</a>. We are considering expanding collection expressions to include dictionaries and support for <code>var</code> (natural types) in a future version of C#. </p>\n<p>Like many new C# features, analyzers can help you check out the new feature and update your code:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/collection-expresion-analyzer.png\" alt=\"Screenshot of analyzer dropdown\" /></p>\n<p>Find out more about <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/csharp-12#collection-expressions\">collection expressions in this article on MS Learn</a>.</p>\n<h3 id=\"primary-constructors-on-any-class-or-struct\">Primary constructors on any class or struct</h3>\n<p>C# 12 extends primary constructors to work on all classes and structs, not just records. Primary constructors let you define constructor parameters when you declare the class:</p>\n<pre><code class=\"language-csharp\">public class BankAccount(string accountID, string owner)\r\n{\r\n    public string AccountID { get; } = accountID;\r\n    public string Owner { get; } = owner;\r\n\r\n    public override string ToString() =&gt; $\"Account ID: {AccountID}, Owner: {Owner}\";\r\n}</code></pre>\n<p>The most common uses for a primary constructor parameter are:</p>\n<ul>\n<li>As an argument to a base() constructor invocation.</li>\n<li>To initialize a member field or property.</li>\n<li>Referencing the constructor parameter in an instance member.</li>\n<li>To remove boilerplate in dependency injection.</li>\n</ul>\n<p>You can think of a primary constructor parameter as a parameter that is in scope for the entire class declaration. </p>\n<p>You can add primary constructors to any type: <code>class</code>, <code>struct</code>, <code>record class</code> and <code>record struct</code>. When used on <code>class</code> and <code>struct</code> types, primary constructor parameters are in scope in the entire <code>class</code> or <code>struct</code> definition. You can use the parameters to initialize fields or properties, or in the body of other members. When used on <code>record</code> types, the compiler generates a public property for each primary constructor parameter. Those properties are simply one of the many members automatically generated for <code>record</code> types.</p>\n<p>We are very interested in <a href=\"https://github.com/dotnet/csharplang/discussions/7667\">feedback on possible future work on primary constructors</a>. We are considering allowing you to mark primary constructor parameters as <code>readonly</code> and to indicate that you want a public property created.</p>\n<p>Find out <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/csharp-12#primary-constructors\">more about primary constructors in this article</a>. To dive deeper into using primary constructors for records and non-records, check out <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/tutorials/primary-constructors\">Tutorial: Explore primary constructors</a>.</p>\n<h3 id=\"alias-any-type\">Alias any type</h3>\n<p>Aliasing types is a convenient way to remove complex type signatures from your code. Starting with C# 12, additional types are valid in <code>using</code> alias directives. For example, these aliases are not valid in earlier versions of C#:</p>\n<pre><code class=\"language-csharp\">using intArray = int[]; // Array types.\r\nusing Point = (int x, int y);  // Tuple type\r\nusing unsafe ArrayPtr = int*;  // Pointer type (requires \"unsafe\")</code></pre>\n<p>You can check out the feature spec <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/proposals/csharp-12.0/using-alias-types\">Allow using alias directive to reference any kind of Type</a> for <code>using</code> alias with pointer and unsafe types.</p>\n<p>Like other <code>using</code> aliases, these types can be used at the top of a file and in <code>global using</code> statements.</p>\n<p>Find out <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/csharp-12#alias-any-type\">more about alias any type in this article</a>.</p>\n<h3 id=\"default-lambda-parameters\">Default lambda parameters</h3>\n<p>Starting in C# 12, you can declare default parameters in lambda expressions:</p>\n<pre><code class=\"language-csharp\">var IncrementBy = (int source, int increment = 1) =&gt; source + increment;\r\n\r\nConsole.WriteLine(IncrementBy(5)); // 6\r\nConsole.WriteLine(IncrementBy(5, 2)); // 7</code></pre>\n<p>Default lambda parameters let calling code skip passing values and lets you add parameters to existing lambda expressions without breaking calling code. This simplifies accessing lambda expressions in the same way default parameters in methods simplify calling methods.</p>\n<p>Find out <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/csharp-12#default-lambda-parameters\">more about default lambda parameters in this article</a>.</p>\n<h2 id=\"making-your-code-faster\">Making your code faster</h2>\n<p>We continue to improve your ability to work with raw memory to improve application performance.</p>\n<p>The performance improvements we have made in C# over the years are important, whether you directly use them or not. Most applications get faster because the .NET runtime and other libraries leverage these enhancements. Of course, if your application uses buffers of memory in hot paths, you can also take advantage of these features. They&#8217;ll make your app that much faster.</p>\n<p>In C# 12, we add <code>ref readonly</code> parameters and inline arrays.</p>\n<h3 id=\"ref-readonly-parameters\">ref readonly parameters</h3>\n<p>The addition of <code>ref readonly</code> parameters provides the final combination of passing parameters by reference or by value. An argument to a <code>ref readonly</code> parameter must be a variable. Similar to<code>ref</code> and <code>out</code> arguments, the argument shouldn&#8217;t be a literal value or a constant.  A literal argument generates a warning and the compiler creates a temporary variable. Like <code>in</code> parameters, a <code>ref readonly</code> parameter can&#8217;t be modified. A method should declare <code>ref readonly</code> parameters when that method won&#8217;t modify the argument, but needs its memory location.</p>\n<p>Find out <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/csharp-12#ref-readonly-parameters\">more about <code>ref readonly</code> parameters in this article</a>.</p>\n<h3 id=\"inline-arrays\">inline arrays</h3>\n<p>Inline arrays provide a safe way to work with memory buffers. An inline array is a struct-based, fixed length array type. You have been able to manipulate a block of memory using <code>stackalloc</code> storage or pointers. But those techniques required that your assembly enable unsafe code. When your application needs to work with a block of memory to store an array of structures, you can now declare an inline array type. That type represents a fixed size array. You can use them in safe code, and improve your app&#8217;s performance when manipulating buffers.</p>\n<p>Find out <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/csharp-12#inline-arrays\">more about inline arrays in this article</a>.</p>\n<h2 id=\"helping-us-go-faster\">Helping us go faster</h2>\n<p>Occasionally we add features to C# as experiments or to make developing C# or .NET more efficient. C# 12 brings two of these features: the experimental attribute and interceptors.</p>\n<h3 id=\"experimental-attribute\">Experimental attribute</h3>\n<p>We occasionally place features into released versions of .NET or C# because we want feedback or the feature cannot be completed in a single cycle. In these cases, we want to make it clear that we are not yet committed to the feature or the implementation. We added the <code>System.Diagnostics.CodeAnalysis.ExperimentalAttribute</code> to better clarify when this occurs.</p>\n<p>When code uses types or members that are experimental, an error will occur unless the calling code is also marked as experimental. Each use of <code>ExperimentalAttribute</code> includes a diagnostic ID, which lets you suppress the error for individual experimental features by an explicit compiler option or #pragma so you can explore an experimental feature.</p>\n<p>Types, members, and assemblies can be marked with the <code>ExperimentalAttribute</code>. If a type is marked as experimental, all of its members are considered experimental. If an assembly or module is marked as experimental, all of the types in it are marked as experimental.</p>\n<p>We highly recommend that library authors with dependencies on anything with an <code>Experimental</code> attribute also mark all code using it with the <code>ExperimentalAttribute</code>. We also encourage library authors to use <code>ExperimentalAttribute</code> if they have experimental features in their libraries.</p>\n<p>Find out <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/csharp-12#experimental-attribute\">more about the experimental attribute in this article</a>.</p>\n<h3 id=\"interceptors\">Interceptors</h3>\n<p>Interceptors are an experimental feature, available in preview mode with C# 12. The feature may be subject to breaking changes or removal in a future release. Therefore, it is not recommended for production or released applications. If you use interceptors, mark your library with the <code>ExperimentalAttribute</code>.</p>\n<p>Interceptors allow redirection of method calls. For example, this would allow an optimized version of a method generated for the specific parameters to replace a less efficient generalized method.</p>\n<p>If you&#8217;re interested, you can learn more about interceptors by reading the <a href=\"https://github.com/dotnet/roslyn/blob/main/docs/features/interceptors.md\">Interceptors feature specification</a>.</p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>C# 12 is just one part of the exciting .NET 8 release. You can learn about other features in <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8\">the .NET 8 blog post</a>. </p>\n<p>Download <a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\">.NET 8</a>, <a href=\"https://visualstudio.microsoft.com/downloads\">Visual Studio 2022 17.8</a> and check out C# 12!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-csharp-12/\">Announcing C# 12</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/announcing-csharp-12/feed/","slash:comments":"10"},{"title":"Entity Framework Core 8 (EF8) is available today","link":"https://devblogs.microsoft.com/dotnet/announcing-ef8/","comments":"https://devblogs.microsoft.com/dotnet/announcing-ef8/#comments","dc:creator":{"#cdata-section":"Arthur Vickers"},"pubDate":"Tue, 14 Nov 2023 16:00:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":"Entity Framework"},{"#cdata-section":".net 8"},{"#cdata-section":"EF Core"},{"#cdata-section":"ef8"},{"#cdata-section":"efcore"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=48927"},"description":{"#cdata-section":"<p>Announcing EF Core 8 (EF8) with complex types, primitive collections, better JSON, and exciting new query translations!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-ef8/\">Entity Framework Core 8 (EF8) is available today</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>Entity Framework Core (EF Core) 8 is <a href=\"https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/8.0.0\">available on NuGet today</a>!</p>\n<h2 id=\"basic-information\">Basic information</h2>\n<p>EF Core 8, or just EF8, is the successor to EF Core 7. EF8 requires .NET 8. It will not work with .NET 6 or 7, or with any version of .NET Framework.</p>\n<p>EF8 aligns with .NET 8 as a long-term support (LTS) release. See the <a href=\"https://dotnet.microsoft.com/platform/support/policy/dotnet-core\">.NET support policy</a> for more information.</p>\n<p>The following sections give an overview of the major enhancements in EF8. In total, EF8 ships with <a href=\"https://github.com/dotnet/efcore/issues?q=is%3Aissue+milestone%3A8.0.0+is%3Aclosed+label%3Aclosed-fixed+label%3Atype-enhancement\">117 enhancements and new features, both large and small</a>, as well as <a href=\"https://github.com/dotnet/efcore/issues?q=is%3Aissue+milestone%3A8.0.0+is%3Aclosed+label%3Aclosed-fixed+label%3Atype-bug\">128 bug fixes</a>.</p>\n<blockquote>\n<p><strong>TIP</strong>\nFull details of all new EF8 features can be found in the <a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew\"><em>What&#8217;s New in EF8</em></a> documentation. All the code is available in <a href=\"https://github.com/dotnet/EntityFramework.Docs\">runnable samples on GitHub</a>.</p>\n</blockquote>\n<h2 id=\"value-objects-using-complex-types\">Value objects using Complex Types</h2>\n<p>Prior to EF8, there was no good way to map objects that are structured to hold multiple values, but do not have a key defining identity. For example, <code>Address</code>, <code>Coordinate</code>. <a href=\"https://learn.microsoft.com/ef/core/modeling/owned-entities\">Owned types</a> can be used, but since owned types are actually entity types, they have semantics based on a key value, even when that key value is hidden.</p>\n<p>EF8 now supports &#8220;Complex Types&#8221; to cover this type of &#8220;value object&#8221;. Complex type objects:</p>\n<ul>\n<li>Are not identified or tracked by key value.</li>\n<li>Must be defined as part of an entity type.  (In other words, you cannot have a <code>DbSet</code> of a complex type.)</li>\n<li>Can be either .NET <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/value-types\">value types</a> or <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/reference-types\">reference types</a> (Owned types must reference types.)</li>\n<li>Instances can be shared by multiple properties. (Owned type instances cannot be shared.)</li>\n</ul>\n<h3 id=\"simple-example\">Simple example</h3>\n<p>For example, consider an <code>Address</code> type:</p>\n<pre><code class=\"language-csharp\">public class Address\n{\n    public required string Line1 { get; set; }\n    public string? Line2 { get; set; }\n    public required string City { get; set; }\n    public required string Country { get; set; }\n    public required string PostCode { get; set; }\n}</code></pre>\n<p><code>Address</code> is then used in three places in a simple customer/orders model:</p>\n<pre><code class=\"language-csharp\">public class Customer\n{\n    public int Id { get; set; }\n    public required string Name { get; set; }\n    public required Address Address { get; set; }\n    public List&lt;Order&gt; Orders { get; } = new();\n}\n\npublic class Order\n{\n    public int Id { get; set; }\n    public required string Contents { get; set; }\n    public required Address ShippingAddress { get; set; }\n    public required Address BillingAddress { get; set; }\n    public Customer Customer { get; set; } = null!;\n}</code></pre>\n<p>Let&#8217;s create and save a customer with their address:</p>\n<pre><code class=\"language-csharp\">var customer = new Customer\n{\n    Name = \"Willow\",\n    Address = new() { Line1 = \"Barking Gate\", City = \"Walpole St Peter\", Country = \"UK\", PostCode = \"PE14 7AV\" }\n};\n\ncontext.Add(customer);\nawait context.SaveChangesAsync();</code></pre>\n<p>This results in the following row being inserted into the database:</p>\n<pre><code class=\"language-sql\">INSERT INTO [Customers] ([Name], [Address_City], [Address_Country], [Address_Line1], [Address_Line2], [Address_PostCode])\nOUTPUT INSERTED.[Id]\nVALUES (@p0, @p1, @p2, @p3, @p4, @p5);</code></pre>\n<p>Notice that the complex types do not get their own tables. Instead, they are saved inline to columns of the <code>Customers</code> table. This matches the table sharing behavior of owned types.</p>\n<blockquote>\n<p><strong>NOTE</strong>\nWe don&#8217;t plan to allow complex types to be mapped to their own table. However, in a future release, we do plan to allow the complex type to be saved as a JSON document in a single column. Vote for <a href=\"https://github.com/dotnet/efcore/issues/31252\">Issue #31252</a> if this is important to you.</p>\n</blockquote>\n<p>Now let&#8217;s say we want to ship an order to a customer and use the customer&#8217;s address as both the default billing an shipping address. The natural way to do this is to copy the <code>Address</code> object from the <code>Customer</code> into the <code>Order</code>. For example:</p>\n<pre><code class=\"language-csharp\">customer.Orders.Add(\n    new Order { Contents = \"Tesco Tasty Treats\", BillingAddress = customer.Address, ShippingAddress = customer.Address, });\n\nawait context.SaveChangesAsync();</code></pre>\n<p>With complex types, this works as expected, and the address is inserted into the <code>Orders</code> table:</p>\n<pre><code class=\"language-sql\">INSERT INTO [Orders] ([Contents], [CustomerId],\n    [BillingAddress_City], [BillingAddress_Country], [BillingAddress_Line1], [BillingAddress_Line2], [BillingAddress_PostCode],\n    [ShippingAddress_City], [ShippingAddress_Country], [ShippingAddress_Line1], [ShippingAddress_Line2], [ShippingAddress_PostCode])\nOUTPUT INSERTED.[Id]\nVALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);</code></pre>\n<p>If we try the same thing with owned types, EF warns and then throws:</p>\n<pre><code class=\"language-text\">warn: 8/20/2023 12:48:01.678 CoreEventId.DuplicateDependentEntityTypeInstanceWarning[10001] (Microsoft.EntityFrameworkCore.Update) \n      The same entity is being tracked as different entity types 'Order.BillingAddress#Address' and 'Customer.Address#Address' with defining navigations. If a property value changes, it will result in two store changes, which might not be the desired outcome.\nfail: 8/20/2023 12:48:01.709 CoreEventId.SaveChangesFailed[10000] (Microsoft.EntityFrameworkCore.Update) \n      An exception occurred in the database while saving changes for context type 'NewInEfCore8.ComplexTypesSample+CustomerContext'.\n      System.InvalidOperationException: Cannot save instance of 'Order.ShippingAddress#Address' because it is an owned entity without any reference to its owner. Owned entities can only be saved as part of an aggregate also including the owner entity.\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave()</code></pre>\n<p>This is because a single instance of the <code>Address</code> entity type (with the same hidden key value) is being used for three <em>different</em> entity instances. On the other hand, sharing the same instance between complex properties is allowed, and so the code works as expected when using complex types.</p>\n<h3 id=\"immutable-records-as-complex-types\">Immutable records as complex types</h3>\n<p>The .NET type used for a complex type in the EF model can be:</p>\n<ul>\n<li>.NET <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/value-types\">value types</a> or <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/reference-types\">reference types</a></li>\n<li>Mutable or Immutable</li>\n<li>A C# <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record\">record type</a> </li>\n</ul>\n<p>The <a href=\"https://aka.ms/ef8-new\"><em>What&#8217;s new in EF8</em></a> documentation covers all of these possibilities, but <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/struct#record-struct\">immutable record value types</a> are usually the best fit for representing complex types.  </p>\n<p>For example, let&#8217;s use the following immutable struct record to represent the address: </p>\n<pre><code class=\"language-csharp\">public readonly record struct Address(string Line1, string? Line2, string City, string Country, string PostCode);</code></pre>\n<p>We can now use the <code>with</code> syntax to update the <code>customer.Address</code> property with a new object that has one or more properties changes. For example: </p>\n<p>The code for changing the address now looks the same as when using immutable class record:</p>\n<pre><code class=\"language-csharp\">customer.Address = customer.Address with { Line1 = \"Peacock Lodge\" };\n\nawait context.SaveChangesAsync();</code></pre>\n<h3 id=\"current-limitations\">Current limitations</h3>\n<p>Complex types represent a significant investment across the EF stack. We were not able to make everything work in this release, but we plan to close some of the gaps in a future release. Make sure to vote (<img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f44d.png\" alt=\"👍\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />) on the appropriate GitHub issues if fixing any of these limitations is important to you.</p>\n<p>Complex type limitations in EF8 include:</p>\n<ul>\n<li>Support collections of complex types. (<a href=\"https://github.com/dotnet/efcore/issues/31237\">Issue #31237</a>)</li>\n<li>Allow complex type properties to be null. (<a href=\"https://github.com/dotnet/efcore/issues/31376\">Issue #31376</a>)</li>\n<li>Map complex type properties to JSON columns. (<a href=\"https://github.com/dotnet/efcore/issues/31252\">Issue #31252</a>)</li>\n<li>Constructor injection for complex types. (<a href=\"https://github.com/dotnet/efcore/issues/31621\">Issue #31621</a>)</li>\n<li>Add seed data support for complex types. (<a href=\"https://github.com/dotnet/efcore/issues/31254\">Issue #31254</a>)</li>\n<li>Map complex type properties for the Cosmos provider. (<a href=\"https://github.com/dotnet/efcore/issues/31253\">Issue #31253</a>)</li>\n<li>Implement complex types for the in-memory database. (<a href=\"https://github.com/dotnet/efcore/issues/31464\">Issue #31464</a>)</li>\n</ul>\n<h3 id=\"more-information-on-complex-types\">More information on complex types</h3>\n<p>For more information on complex types, see:</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#value-objects-using-complex-types\">What&#8217;s new in EF8: Complex types</a> in the EF documentation.</li>\n<li><a href=\"https://www.youtube.com/live/H-soJYqWSds?si=lbq9OsdsPn6BnwXf\">.NET Data Community Standup recording</a> on YouTube.</li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/announcing-ef8-rc1/\">Complex types as value objects</a> on the .NET blog.</li>\n</ul>\n<h2 id=\"primitive-collections\">Primitive collections</h2>\n<p>A persistent question when using relational databases is what to do with collections of primitive types; that is, lists or arrays of integers, date/times, strings, and so on. If you&#8217;re using PostgreSQL, then its easy to store these things using PostgreSQL&#8217;s <a href=\"https://www.postgresql.org/docs/current/arrays.html\">built-in array type</a>. For other databases, a common approach is to serialize the primitive collection into a type that is handled by the database&#8211;for example, serialize to and from a string with comma delimiters.</p>\n<p>EF8 now includes built-in support for this kind of mapping, using JSON as the serialization format. JSON works well for this since modern relational databases include built-in mechanisms for querying and manipulating JSON, such that the JSON column can, effectively, be treated as a table when needed, without the overhead of actually creating that table.</p>\n<h3 id=\"primitive-collection-properties\">Primitive collection properties</h3>\n<p>EF Core can map ordered collections of primitive types to a JSON column in the database. The collection property must be typed as <code>IEnumerable&lt;T&gt;</code>, where <code>T</code> is a primitive type, and at runtime the collection object must implement <code>IList&lt;T&gt;</code>, indicating that it is ordered and supports random access. </p>\n<p>For example, all properties in the following entity type are mapped to JSON columns by convention:</p>\n<pre><code class=\"language-csharp\">public class PrimitiveCollections\n{\n    public IList&lt;DateOnly&gt; Dates { get; set; }\n    public uint[] UnsignedInts { get; set; }\n    public List&lt;bool&gt; Booleans { get; set; }\n    public List&lt;Uri&gt; Urls { get; set; }\n    public IEnumerable&lt;int&gt; Ints { get; set; } // Must be an IList&lt;int&gt;() at runtime.\n    public ICollection&lt;string&gt; Strings { get; set; } // Must be an IList&lt;int&gt;() at runtime.\n}</code></pre>\n<p>Let&#8217;s look at a query that makes use of a column containing a list of dates. For example, using this entity type to represent a British Public House:</p>\n<pre><code class=\"language-csharp\">public class Pub\n{\n    public int Id { get; set; }\n    public required string Name { get; set; }\n    public required string[] Beers { get; set; }\n    public List&lt;DateOnly&gt; DaysVisited { get; private set; } = new();\n}</code></pre>\n<p>We can write a query to find pubs visited this year:</p>\n<pre><code class=\"language-csharp\">var thisYear = DateTime.Now.Year;\nvar pubsVisitedThisYear = await context.Pubs\n    .Where(e =&gt; e.DaysVisited.Any(v =&gt; v.Year == thisYear))\n    .Select(e =&gt; e.Name)\n    .ToListAsync();</code></pre>\n<p>This translates to the following on SQL Server:</p>\n<pre><code class=\"language-sql\">SELECT [p].[Name]\nFROM [Pubs] AS [p]\nWHERE EXISTS (\n    SELECT 1\n    FROM OPENJSON([p].[DaysVisited]) AS [d]\n    WHERE DATEPART(year, CAST([d].[value] AS date)) = @__thisYear_0)</code></pre>\n<p>EF is using the <a href=\"https://learn.microsoft.com/sql/t-sql/functions/OPENJSON-transact-sql?view=sql-server-ver16\">SQL Server OPENJSON function</a> to parse the JSON saved into the <code>DaysVisited</code> column and treat it like a table. Notice that the query makes use of the date-specific function <code>DATEPART</code> here because EF <em>knows that the primitive collection contains dates</em>. It might not seem like it, but this is actually really important. Because EF knows what&#8217;s in the collection, it can generate appropriate SQL to use the typed values with parameters, functions, other columns etc.</p>\n<h3 id=\"primitive-collections-in-json-documents\">Primitive collections in JSON documents</h3>\n<p>Primitive collections embedded in <a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns\">an owned entity type to a column containing a JSON document</a>, which was introduced in EF7, can be persisted and queried in the same way.</p>\n<p>For example, the following query extracts data from the JSON document, including use of sub-queries into the primitive collections contained in the document:</p>\n<pre><code class=\"language-csharp\">var walksWithADrink = await context.Walks.Select(\n    w =&gt; new\n    {\n        WalkName = w.Name,\n        PubName = w.ClosestPub.Name,\n        WalkLocationTag = w.Visits.LocationTag,\n        PubLocationTag = w.ClosestPub.Visits.LocationTag,\n        Count = w.Visits.DaysVisited.Count(v =&gt; w.ClosestPub.Visits.DaysVisited.Contains(v)),\n        TotalCount = w.Visits.DaysVisited.Count\n    }).ToListAsync();</code></pre>\n<p>This translates to the following on SQL Server:</p>\n<pre><code class=\"language-sql\">SELECT [w].[Name] AS [WalkName], [p].[Name] AS [PubName], JSON_VALUE([w].[Visits], '$.LocationTag') AS [WalkLocationTag], JSON_VALUE([p].[Visits], '$.LocationTag') AS [PubLocationTag], (\n    SELECT COUNT(*)\n    FROM OPENJSON(JSON_VALUE([w].[Visits], '$.DaysVisited')) AS [d]\n    WHERE EXISTS (\n        SELECT 1\n        FROM OPENJSON(JSON_VALUE([p].[Visits], '$.DaysVisited')) AS [d0]\n        WHERE CAST([d0].[value] AS date) = CAST([d].[value] AS date) OR ([d0].[value] IS NULL AND [d].[value] IS NULL))) AS [Count], (\n    SELECT COUNT(*)\n    FROM OPENJSON(JSON_VALUE([w].[Visits], '$.DaysVisited')) AS [d1]) AS [TotalCount]\nFROM [Walks] AS [w]\nINNER JOIN [Pubs] AS [p] ON [w].[ClosestPubId] = [p].[Id]</code></pre>\n<h3 id=\"better-contains-queries\">Better Contains queries</h3>\n<p>The use of JSON to represent primitive collections has opened several new query translations that make use of the JSON capabilities of relational databases to create what are effectively inline, temporary tables of values. This is very powerful. For example, consider the following entity type:</p>\n<pre><code class=\"language-csharp\">public class DogWalk\n{\n    public int Id { get; set; }\n    public required string Name { get; set; }\n    public Terrain Terrain { get; set; }\n    public List&lt;DateOnly&gt; DaysVisited { get; private set; } = new();\n    public Pub? ClosestPub { get; set; }\n}\n\npublic enum Terrain\n{\n    Forest,\n    River,\n    Hills,\n    Village,\n    Park,\n    Beach,\n}</code></pre>\n<p>Using this model, we can write simple <code>Contains</code> query to find all walks with one of several different terrains:</p>\n<pre><code class=\"language-csharp\">var terrains = new[] { Terrain.River, Terrain.Beach, Terrain.Park };\nvar walksWithTerrain = await context.Walks\n    .Where(e =&gt; terrains.Contains(e.Terrain))\n    .Select(e =&gt; e.Name)\n    .ToListAsync();</code></pre>\n<p>This is already translated by current versions of EF Core by inlining the values to look for. For example, when using SQL Server:</p>\n<pre><code class=\"language-sql\">SELECT [w].[Name]\nFROM [Walks] AS [w]\nWHERE [w].[Terrain] IN (1, 5, 4)</code></pre>\n<p>However, this strategy does not work well with database query caching; see <a href=\"https://devblogs.microsoft.com/dotnet/announcing-ef8-preview-4/\">Announcing EF8 Preview 4</a> on the .NET Blog for a discussion of the issue.</p>\n<p>For EF8, the default is now to pass the list of terrains as a single parameter containing a JSON collection. For example:</p>\n<pre><code class=\"language-none\">@__terrains_0='[1,5,4]'</code></pre>\n<p>The query then uses <code>OPENJSON</code> on SQL Server:</p>\n<pre><code class=\"language-sql\">SELECT [w].[Name]\nFROM [Walks] AS [w]\nWHERE EXISTS (\n    SELECT 1\n    FROM OPENJSON(@__terrains_0) AS [t]\n    WHERE CAST([t].[value] AS int) = [w].[Terrain])</code></pre>\n<p>Or <code>json_each</code> on SQLite:</p>\n<pre><code class=\"language-sql\">SELECT \"w\".\"Name\"\nFROM \"Walks\" AS \"w\"\nWHERE EXISTS (\n    SELECT 1\n    FROM json_each(@__terrains_0) AS \"t\"\n    WHERE \"t\".\"value\" = \"w\".\"Terrain\")</code></pre>\n<h3 id=\"more-information-on-primitive-collections\">More information on primitive collections</h3>\n<p>For more information on complex types, see:</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#primitive-collections\">What&#8217;s new in EF8: Primitive collections</a> in the EF documentation.</li>\n<li><a href=\"https://www.youtube.com/live/AUS2OZjsA2I?si=tpcPyw9FxmGn6kwq\">.NET Data Community Standup recording</a> on YouTube.</li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/announcing-ef8-preview-4/\">Primitive collections and improved Contains</a> on the .NET blog.</li>\n</ul>\n<h2 id=\"enhancements-to-json-column-mapping\">Enhancements to JSON column mapping</h2>\n<p>EF8 includes improvements to the <a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns\">JSON column mapping support introduced in EF7</a>.</p>\n<h3 id=\"translate-element-access-into-json-arrays\">Translate element access into JSON arrays</h3>\n<p>EF8 supports indexing in JSON arrays when executing queries. For example, the following query checks whether the first two updates were made before a given date.</p>\n<pre><code class=\"language-csharp\">var cutoff = DateOnly.FromDateTime(DateTime.UtcNow - TimeSpan.FromDays(365));\nvar updatedPosts = await context.Posts\n    .Where(\n        p =&gt; p.Metadata!.Updates[0].UpdatedOn &lt; cutoff\n             &amp;&amp; p.Metadata!.Updates[1].UpdatedOn &lt; cutoff)\n    .ToListAsync();</code></pre>\n<p>This translates into the following SQL when using SQL Server:</p>\n<pre><code class=\"language-sql\">SELECT [p].[Id], [p].[Archived], [p].[AuthorId], [p].[BlogId], [p].[Content], [p].[Discriminator], [p].[PublishedOn], [p].[Title], [p].[PromoText], [p].[Metadata]\nFROM [Posts] AS [p]\nWHERE CAST(JSON_VALUE([p].[Metadata],'$.Updates[0].UpdatedOn') AS date) &lt; @__cutoff_0\n  AND CAST(JSON_VALUE([p].[Metadata],'$.Updates[1].UpdatedOn') AS date) &lt; @__cutoff_0</code></pre>\n<h3 id=\"json-columns-for-sqlite-and-postgresql\">JSON Columns for SQLite and PostgreSQL</h3>\n<p>EF7 introduced support for mapping to JSON columns when using Azure SQL/SQL Server. EF8 extends this support to SQLite databases, and the <a href=\"https://www.nuget.org/packages/Npgsql.EntityFrameworkCore.PostgreSQL/\">Npgsql.EntityFrameworkCore.PostgreSQL</a> EF Core provider brings this same support to PostgreSQL databases. As for the SQL Server support, this includes:</p>\n<ul>\n<li>Mapping of aggregates built from .NET types to JSON documents stored in columns</li>\n<li>Queries into JSON columns, such as filtering and sorting by the elements of the documents</li>\n<li>Queries that project elements out of the JSON document into results</li>\n<li>Updating and saving changes to JSON documents</li>\n</ul>\n<p>The existing <a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns\">documentation from What&#8217;s New in EF7</a> provides detailed information on JSON mapping, queries, and updates. This documentation now also applies to SQLite and PostgreSQL.</p>\n<h2 id=\"hierarchyid-in-net-and-ef-core\">HierarchyId in .NET and EF Core</h2>\n<p>Azure SQL and SQL Server have a special data type called <a href=\"https://learn.microsoft.com/sql/t-sql/data-types/hierarchyid-data-type-method-reference?view=sql-server-ver16\"><code>hierarchyid</code></a> that is used to store <a href=\"https://learn.microsoft.com/sql/relational-databases/hierarchical-data-sql-server?view=sql-server-ver16\">hierarchical data</a>. In this case, &#8220;hierarchical data&#8221; essentially means data that forms a tree structure, where each item can have a parent and/or children. Examples of such data are:</p>\n<ul>\n<li>An organizational structure</li>\n<li>A file system</li>\n<li>A set of tasks in a project</li>\n<li>A taxonomy of language terms</li>\n<li>A graph of links between Web pages</li>\n</ul>\n<p>The database is then able to run queries against this data using its hierarchical structure. For example, a query can find ancestors and dependents of given items, or find all items at a certain depth in the hierarchy.</p>\n<h3 id=\"modeling-hierarchies\">Modeling hierarchies</h3>\n<p>The <code>HierarchyId</code> type can be used for properties of an entity type. For example, assume we want to model the paternal family tree of some fictional <a href=\"https://en.wikipedia.org/wiki/Halfling\">halflings</a>. In the entity type for <code>Halfling</code>, a <code>HierarchyId</code> property can be used to locate each halfling in the family tree.</p>\n<pre><code class=\"language-csharp\">public class Halfling\n{\n    public Halfling(HierarchyId pathFromPatriarch, string name, int? yearOfBirth = null)\n    {\n        PathFromPatriarch = pathFromPatriarch;\n        Name = name;\n        YearOfBirth = yearOfBirth;\n    }\n\n    public int Id { get; private set; }\n    public HierarchyId PathFromPatriarch { get; set; }\n    public string Name { get; set; }\n    public int? YearOfBirth { get; set; }\n}</code></pre>\n<p>In this case, the family tree is rooted with the patriarch of the family. Each halfling can be traced from the patriarch down the tree using its <code>PathFromPatriarch</code> property. SQL Server uses a compact binary format for these paths, but it is common to parse to and from a human-readable string representation when when working with code. In this representation, the position at each level is separated by a <code>/</code> character. For example, consider the family tree in the diagram below:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/familytree.png\" alt=\"Halfling family tree\" /></p>\n<h3 id=\"querying-hierarchies\">Querying hierarchies</h3>\n<p>The following query uses <code>GetAncestor</code> to find the direct ancestor of a halfling, given that halfling&#8217;s name:</p>\n<pre><code class=\"language-csharp\">async Task&lt;Halfling?&gt; FindDirectAncestor(string name)\n    =&gt; await context.Halflings\n        .SingleOrDefaultAsync(\n            ancestor =&gt; ancestor.PathFromPatriarch == context.Halflings\n                .Single(descendent =&gt; descendent.Name == name).PathFromPatriarch\n                .GetAncestor(1));</code></pre>\n<p>This translates to the following SQL:</p>\n<pre><code class=\"language-sql\">SELECT TOP(2) [h].[Id], [h].[Name], [h].[PathFromPatriarch], [h].[YearOfBirth]\nFROM [Halflings] AS [h]\nWHERE [h].[PathFromPatriarch] = (\n    SELECT TOP(1) [h0].[PathFromPatriarch]\n    FROM [Halflings] AS [h0]\n    WHERE [h0].[Name] = @__name_0).GetAncestor(1)</code></pre>\n<p>Running this query for the halfling &#8220;Bilbo&#8221; returns &#8220;Bungo&#8221;.</p>\n<h3 id=\"updating-hierarchies\">Updating hierarchies</h3>\n<p>The normal <a href=\"https://learn.microsoft.com/ef/core/change-tracking/\">change tracking</a> and <a href=\"https://learn.microsoft.com/ef/core/saving/basic\">SaveChanges</a> mechanisms can be used to update <code>hierarchyid</code> columns.</p>\n<p>For example, I&#8217;m sure we all remember the scandal of SR 1752 (a.k.a. &#8220;LongoGate&#8221;) when DNA testing revealed that Longo was not in fact the son of Mungo, but actually the son of Ponto! One fallout from this scandal was that the family tree needed to be re-written. In particular, Longo and all his descendents needed to be re-parented from Mungo to Ponto. <code>GetReparentedValue</code> can be used to do this. For example, first &#8220;Longo&#8221; and all his descendents are queried:</p>\n<pre><code class=\"language-csharp\">var longoAndDescendents = await context.Halflings.Where(\n        descendent =&gt; descendent.PathFromPatriarch.IsDescendantOf(\n            context.Halflings.Single(ancestor =&gt; ancestor.Name == \"Longo\").PathFromPatriarch))\n    .ToListAsync();</code></pre>\n<p>Then <code>GetReparentedValue</code> is used to update the <code>HierarchyId</code> for Longo and each descendent, followed by a call to <code>SaveChangesAsync</code>:</p>\n<pre><code class=\"language-csharp\">foreach (var descendent in longoAndDescendents)\n{\n    descendent.PathFromPatriarch\n        = descendent.PathFromPatriarch.GetReparentedValue(\n            mungo.PathFromPatriarch, ponto.PathFromPatriarch)!;\n}\n\nawait context.SaveChangesAsync();</code></pre>\n<pre><code class=\"language-sql\">SET NOCOUNT ON;\nUPDATE [Halflings] SET [PathFromPatriarch] = @p0\nOUTPUT 1\nWHERE [Id] = @p1;\nUPDATE [Halflings] SET [PathFromPatriarch] = @p2\nOUTPUT 1\nWHERE [Id] = @p3;\nUPDATE [Halflings] SET [PathFromPatriarch] = @p4\nOUTPUT 1\nWHERE [Id] = @p5;</code></pre>\n<p>Using these parameters:</p>\n<pre><code class=\"language-text\"> @p1='9',\n @p0='0x7BC0' (Nullable = false) (Size = 2) (DbType = Object),\n @p3='16',\n @p2='0x7BD6' (Nullable = false) (Size = 2) (DbType = Object),\n @p5='23',\n @p4='0x7BD6B0' (Nullable = false) (Size = 3) (DbType = Object)</code></pre>\n<blockquote>\n<p><strong>NOTE</strong>\nThe parameters values for <code>HierarchyId</code> properties are sent to the database in their compact, binary format.</p>\n</blockquote>\n<p>Following the update, querying for the descendents of &#8220;Mungo&#8221; returns &#8220;Bungo&#8221;, &#8220;Belba&#8221;, &#8220;Linda&#8221;, &#8220;Bingo&#8221;, &#8220;Bilbo&#8221;, &#8220;Falco&#8221;, and &#8220;Poppy&#8221;, while querying for the descendents of &#8220;Ponto&#8221; returns &#8220;Longo&#8221;, &#8220;Rosa&#8221;, &#8220;Polo&#8221;, &#8220;Otho&#8221;, &#8220;Posco&#8221;, &#8220;Prisca&#8221;, &#8220;Lotho&#8221;, &#8220;Ponto&#8221;, &#8220;Porto&#8221;, &#8220;Peony&#8221;, and &#8220;Angelica&#8221;.</p>\n<h3 id=\"more-information-hierarchies-and-ef-core\">More information hierarchies and EF Core</h3>\n<p>For more information on mapping hierarchies with EF Core, see:</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#hierarchyid-in-net-and-ef-core\">What&#8217;s new in EF8: HierarchyId</a> in the EF documentation.</li>\n<li><a href=\"https://www.youtube.com/live/pmnHGWYpCfg?si=NOrlBo1TVKmT7biO\">.NET Data Community Standup recording</a> on YouTube.</li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/announcing-ef8-preview-2/\">Lite and familiar</a> on the .NET blog.</li>\n</ul>\n<h2 id=\"raw-sql-queries-for-unmapped-types\">Raw SQL queries for unmapped types</h2>\n<p>EF7 introduced <a href=\"https://learn.microsoft.com/ef/core/querying/sql-queries#querying-scalar-(non-entity)-types\">raw SQL queries returning scalar types</a>. This is enhanced in EF8 to include raw SQL queries returning any mappable CLR type, without including that type in the EF model.</p>\n<p>Queries using unmapped types are executed using <a href=\"https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.relationaldatabasefacadeextensions.sqlquery\">SqlQuery</a> or <a href=\"https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.relationaldatabasefacadeextensions.sqlqueryraw\">SqlQueryRaw</a> The former uses string interpolation to parameterize the query, which helps ensure that all non-constant values are parameterized. </p>\n<p>The types used for SQL queries must have a property for every value in the result set, but do not need to match any specific table in the database. For example, the following type represents only a subset of information for each post, and includes the blog name, which comes from the <code>Blogs</code> table:</p>\n<pre><code class=\"language-csharp\">public class PostSummary\n{\n    public string BlogName { get; set; }\n    public string PostTitle { get; set; }\n    public DateOnly PublishedOn { get; set; }\n}</code></pre>\n<p>Instances of this type can be returned using <code>SqlQuery</code>:</p>\n<pre><code class=\"language-csharp\">var summaries =\n    await context.Database.SqlQuery&lt;PostSummary&gt;(\n            @$\"SELECT b.Name AS BlogName, p.Title AS PostTitle, p.PublishedOn\n            FROM Posts AS p\n            INNER JOIN Blogs AS b ON p.BlogId = b.Id\")\n        .ToListAsync();</code></pre>\n<h2 id=\"more-features-in-ef8\">More features in EF8</h2>\n<p>The <em>What&#8217;s new in EF8</em> documentation covers some additional interesting enhancements in EF8, including:</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#lazy-loading-for-no-tracking-queries\">Lazy-loading for no-tracking queries</a></li>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#opt-out-of-lazy-loading-for-specific-navigations\">Opt-out of lazy-loading for specific navigations</a></li>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#lookup-tracked-entities-by-primary-alternate-or-foreign-key\">Lookup tracked entities by primary, alternate, or foreign key</a></li>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#discriminator-columns-have-max-length\">Discriminator columns have max length</a></li>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#dateonlytimeonly-supported-on-sql-server\">DateOnly/TimeOnly supported on SQL Server</a></li>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#enhancements-to-math-translations\">Enhancements to Math translations</a></li>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#checking-for-pending-model-changes\">Checking for pending model changes</a></li>\n<li><a href=\"https://learn.microsoft.com/ef/core/what-is-new/ef-core-8.0/whatsnew#enhancements-to-sqlite-scaffolding\">Enhancements to SQLite scaffolding</a></li>\n</ul>\n<h2 id=\"how-to-get-ef8\">How to get EF8</h2>\n<p>EF8 is distributed exclusively as a set of NuGet packages. For example, to add the SQL Server provider to your project, you can use the following command using the dotnet tool:</p>\n<pre><code class=\"language-bash\">dotnet add package Microsoft.EntityFrameworkCore.SqlServer</code></pre>\n<h2 id=\"installing-the-ef8-command-line-interface-cli\">Installing the EF8 Command Line Interface (CLI)</h2>\n<p>The <code>dotnet-ef</code> tool must be installed before executing EF8 Core migration or scaffolding commands.</p>\n<p>To install the tool globally, use:</p>\n<pre><code class=\"language-bash\">dotnet tool install --global dotnet-ef</code></pre>\n<p>If you already have the tool installed, you can upgrade it with the following command:</p>\n<pre><code class=\"language-bash\">dotnet tool update --global dotnet-ef</code></pre>\n<h2 id=\"the-net-data-community-standup\">The .NET Data Community Standup</h2>\n<p>The .NET data access team is now live streaming every other Wednesday at 10am Pacific Time, 1pm Eastern Time, or 18:00 UTC. Join the stream learn and ask questions about many .NET Data related topics.</p>\n<ul>\n<li><a href=\"https://aka.ms/efstandups\">Watch our YouTube playlist</a> of previous shows</li>\n<li><a href=\"https://live.dot.net\">Visit the .NET Community Standup</a> page to preview upcoming shows</li>\n<li><a href=\"https://github.com/dotnet/efcore/issues/22700\">Submit your ideas</a> for a guest, product, demo, or other content to cover</li>\n</ul>\n<h2 id=\"documentation-and-feedback\">Documentation and Feedback</h2>\n<p>The starting point for all EF Core documentation is <a href=\"https://docs.microsoft.com/ef/\">docs.microsoft.com/ef/</a>. Please file issues found and any other feedback on the <a href=\"https://github.com/dotnet/efcore\">dotnet/efcore GitHub repo</a>.</p>\n<h2 id=\"helpful-links\">Helpful Links</h2>\n<p>The following links are provided for easy reference and access.</p>\n<ul>\n<li>EF Core Community Standup Playlist: <a href=\"https://aka.ms/efstandups\">aka.ms/efstandups</a></li>\n<li>Main documentation: <a href=\"https://aka.ms/efdocs\">aka.ms/efdocs</a></li>\n<li>What&#8217;s New in EF Core 8: <a href=\"https://aka.ms/ef8-new\">aka.ms/ef8-new</a></li>\n<li>What&#8217;s New in EF Core 7: <a href=\"https://aka.ms/ef7-new\">aka.ms/ef7-new</a></li>\n<li>Issues and feature requests for EF Core: <a href=\"https://github.com/dotnet/efcore/issues\">github.com/dotnet/efcore/issues</a></li>\n<li>Entity Framework Roadmap: <a href=\"https://aka.ms/efroadmap\">aka.ms/efroadmap</a></li>\n</ul>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-ef8/\">Entity Framework Core 8 (EF8) is available today</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/announcing-ef8/feed/","slash:comments":"1"},{"title":"Announcing ASP.NET Core in .NET 8","link":"https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-8/","comments":"https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-8/#comments","dc:creator":{"#cdata-section":"Daniel Roth"},"pubDate":"Tue, 14 Nov 2023 16:00:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":"ASP.NET"},{"#cdata-section":"ASP.NET Core"},{"#cdata-section":"Blazor"},{"#cdata-section":".net 8"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=48949"},"description":{"#cdata-section":"<p>.NET 8 is now available! Check out all the new features and improvements in ASP.NET Core in this release.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-8/\">Announcing ASP.NET Core in .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>ASP.NET Core in .NET 8 is your complete solution for modern web development. It handles all of your web development needs from the frontend to the backend. You can build beautiful, richly interactive web experiences with Blazor, and high-performance backend APIs and services that are reliable and secure. ASP.NET Core in .NET 8 is perfect for building cloud-native apps, and great tooling in Visual Studio and Visual Studio Code supercharges your productivity. With ASP.NET Core in .NET 8, every developer is a full stack developer!</p>\n<p>.NET 8 is now <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8\">available</a> &#8211; Upgrade your ASP.NET Core projects today! </p>\n<h2 id=\"get-started\">Get started</h2>\n<p>To get started with ASP.NET Core in .NET 8, <a href=\"https://dotnet.microsoft.com/download\">install the .NET 8 SDK</a>. .NET 8 is also included with <a href=\"https://visualstudio.com\">Visual Studio 2022</a> and is supported in <a href=\"https://code.visualstudio.com\">Visual Studio Code</a> with the C# Dev Kit.</p>\n<p>If you&#8217;re new to ASP.NET Core, you can start your learning journey by going to https://asp.net and exploring what ASP.NET Core has to offer.</p>\n<h2 id=\"whats-new\">What&#8217;s new?</h2>\n<p>Let&#8217;s take a look at some of the great new features and improvements now available with ASP.NET Core in .NET 8.</p>\n<h2 id=\"performance\">Performance</h2>\n<p>ASP.NET Core in .NET 8 is the fastest release yet! Compared to .NET 7, ASP.NET Core in .NET 8 is 18% faster on the Techempower JSON benchmark and 24% faster on the Fortunes benchmark:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/techempower.png\" alt=\"Techempower benchmark comparison of .NET 7 and .NET 8\" /></p>\n<p>You can read all about the ASP.NET Core performance improvements in Brennan Conroy&#8217;s <a href=\"https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-8/\">Performance Improvements in ASP.NET Core 8</a> blog post.</p>\n<h2 id=\"asp-net-core-support-for-native-aot\">ASP.NET Core support for native AOT</h2>\n<p>In .NET 8, we&#8217;re introducing native AOT support for ASP.NET Core, with an initial focus on cloud-native API applications. It&#8217;s now possible to <a href=\"https://learn.microsoft.com/aspnet/core/fundamentals/native-aot\">publish an ASP.NET Core app with native AOT</a>, producing a self-contained app that&#8217;s ahead-of-time (AOT) compiled to native code.</p>\n<p>Native AOT apps can have a smaller deployment size, start up very quickly, and use less memory. The application can be run on a machine that doesn&#8217;t have the .NET runtime installed. The benefit of native AOT is most significant for workloads with many deployed instances, such as cloud infrastructure and hyper-scale services.</p>\n<h3 id=\"benefits-of-using-native-aot-with-asp-net-core\">Benefits of using native AOT with ASP.NET Core</h3>\n<p>Publishing and deploying a native AOT app can provide the following benefits:</p>\n<ul>\n<li><strong>Reduced disk footprint:</strong> When publishing using native AOT, a single executable is produced containing the program along with the subset of code from external dependencies that the program uses. Reduced executable size can lead to:\n<ul>\n<li>Smaller container images, for example in containerized deployment scenarios.</li>\n<li>Reduced deployment time due to smaller images.</li>\n</ul>\n</li>\n<li><strong>Reduced startup time:</strong> Native AOT applications can start-up more quickly, in part due to the removal of JIT compilation. Reduced start-up means:\n<ul>\n<li>The app is ready to service requests quicker.</li>\n<li>Improved deployment with container orchestrators that manage transitions from one version of the app to another.</li>\n</ul>\n</li>\n<li><strong>Reduced memory demand:</strong> ASP.NET Core apps published as native AOT can have reduced memory demands depending on the work being performed, as they enable the new <a href=\"https://maoni0.medium.com/dynamically-adapting-to-application-sizes-2d72fcb6f1ea\">DATAS GC mode</a> by default. Reduced memory consumption can lead to greater deployment density and improved scalability.</li>\n</ul>\n<p>As an example, we ran a <a href=\"https://github.com/aspnet/Benchmarks/tree/6683984fada4f506ff0eed92343cc24d633ac608/src/BenchmarksApps/BasicMinimalApi\">simple ASP.NET Core API app</a> in our benchmarking lab to compare the differences in app size, memory use, startup time, and CPU load, published with and without native AOT:</p>\n<table>\n<thead>\n<tr>\n<th>Publish kind</th>\n<th style=\"text-align: right\">Startup time (ms)</th>\n<th style=\"text-align: right\">App size (MB)</th>\n<th style=\"text-align: right\">Working set (MB)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default</td>\n<td style=\"text-align: right\">156</td>\n<td style=\"text-align: right\">92.6</td>\n<td style=\"text-align: right\">96</td>\n</tr>\n<tr>\n<td>Native AOT</td>\n<td style=\"text-align: right\">48</td>\n<td style=\"text-align: right\">10.0</td>\n<td style=\"text-align: right\">41</td>\n</tr>\n</tbody>\n</table>\n<p>The table above shows that publishing the app as native AOT dramatically improves startup time, app size, and memory use. Startup time was reduced by <strong>70%</strong>, app size was reduced by <strong>89%</strong>, and memory use under load was reduced by <strong>57%</strong>!</p>\n<p>A <a href=\"https://github.com/aspnet/Benchmarks/tree/6683984fada4f506ff0eed92343cc24d633ac608/src/BenchmarksApps/TodosApi\">more complex sample API app</a> with CRUD-style methods including model validation, OpenAPI, JWT authentication &amp; policy-based authorization, configuration binding, and presistence to a PostgreSQL database using <a href=\"https://www.npgsql.org/\">Npgsql</a>, sees the following changes to its metrics from native AOT:</p>\n<table>\n<thead>\n<tr>\n<th>Publish kind</th>\n<th style=\"text-align: right\">Startup time (ms)</th>\n<th style=\"text-align: right\">App size (MB)</th>\n<th style=\"text-align: right\">Working set (MB)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default</td>\n<td style=\"text-align: right\">473</td>\n<td style=\"text-align: right\">98.27</td>\n<td style=\"text-align: right\">193</td>\n</tr>\n<tr>\n<td>Native AOT</td>\n<td style=\"text-align: right\">115</td>\n<td style=\"text-align: right\">21.55</td>\n<td style=\"text-align: right\">121</td>\n</tr>\n</tbody>\n</table>\n<p>For this more complex app, startup time was reduced by <strong>76%</strong>, app size was reduced by <strong>78%</strong>, and memory use under load was reduced by <strong>37%</strong>!</p>\n<p>You can explore these metrics and more on our <a href=\"https://msit.powerbi.com/view?r=eyJrIjoiYTZjMTk3YjEtMzQ3Yi00NTI5LTg5ZDItNmUyMGRlOTkwMGRlIiwidCI6IjcyZjk4OGJmLTg2ZjEtNDFhZi05MWFiLTJkN2NkMDExZGI0NyIsImMiOjV9&amp;pageName=ReportSectiond12fbb3dbabb493336cd\">public benchmarks dashboard</a>.</p>\n<h3 id=\"asp-net-core-and-native-aot-compatibility\">ASP.NET Core and native AOT compatibility</h3>\n<p>Not all features in ASP.NET Core are compatible with native AOT. Similarly, not all libraries commonly used in ASP.NET Core are compatible with native AOT. .NET 8 represents the start of work to enable native AOT in ASP.NET Core, with an initial focus on enabling support for apps using Minimal APIs or gRPC, and deployed in cloud environments. As a reminder, <a href=\"https://learn.microsoft.com/dotnet/core/deploying/native-aot/?tabs=net7#limitations-in-the-net-native-aot-deployment-model\">.NET 7 introduced support for native AOT publish for console projects</a>. Your feedback will help guide our efforts for future releases, to ensure we focus on the places where the benefits of native AOT can have the largest impact.</p>\n<p>Native AOT applications come with a few fundamental compatibility requirements. The key ones include:</p>\n<ul>\n<li>No dynamic loading (for example, <code>Assembly.LoadFile</code>)</li>\n<li>No runtime code generation via JIT (for example, <code>System.Reflection.Emit</code>)</li>\n<li>No C++/CLI</li>\n<li>No built-in COM (only applies to Windows)</li>\n<li>Requires trimming, which has <a href=\"https://learn.microsoft.com/dotnet/core/deploying/trimming/incompatibilities\">limitations</a></li>\n<li>Implies compilation into a single file, which has <a href=\"https://learn.microsoft.com/dotnet/core/deploying/single-file/overview?tabs=cli#api-incompatibility\">known incompatibilities</a></li>\n<li>Apps include required runtime libraries (just like self-contained apps, increasing their size as compared to framework-dependent apps)</li>\n</ul>\n<p>Use of these features will likely make an app incompatible with native AOT. To aid the process of ensuring an app is AOT compatible, the tooling will provide <a href=\"https://learn.microsoft.com/dotnet/core/deploying/native-aot/fixing-warnings\">warnings</a> when it detects use of incompatible features. If the use is in the source code of the application itself, these warnings will appear as diagnostics in the editor and during compilation. If the use is in a dependency (such as a NuGet package), the warnings will appear during publish, when the IL of the enitre application is compiled to native code.</p>\n<p>In cases where more information is required in order to determine if the use of a feature is done in a way that&#8217;s compatible with native AOT, developers can annotate their code with instructional attributes, such as <a href=\"https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.dynamicallyaccessedmembersattribute?view=net-8.0\"><code>[DynamicallyAccessedMembers]</code></a> to indicate that members are dynamically accessed and should be left untrimmed.</p>\n<p>In some cases, functionality in apps or libraries will need to be reimplemented in order to be compatible with native AOT. A common example of this is the use of reflection for runtime code generation. <a href=\"https://learn.microsoft.com/dotnet/csharp/roslyn-sdk/source-generators-overview\">Roslyn source generators</a> allow code to be generated at compile time with similar type discovery and inspection capabilities as runtime-based reflection, and are a useful alternative when preparing for native AOT compatibility.</p>\n<p>The following table summarizes ASP.NET Core feature compatibility with native AOT:</p>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Fully Supported</th>\n<th>Partially Supported</th>\n<th>Not Supported</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gRPC</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Minimal APIs</td>\n<td></td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Partially supported</span></td>\n<td></td>\n</tr>\n<tr>\n<td>MVC</td>\n<td></td>\n<td></td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Not supported</span></td>\n</tr>\n<tr>\n<td>Blazor</td>\n<td></td>\n<td></td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Not supported</span></td>\n</tr>\n<tr>\n<td>SignalR</td>\n<td></td>\n<td></td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Not supported</span></td>\n</tr>\n<tr>\n<td>JWT Authentication</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Other Authentication</td>\n<td></td>\n<td></td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Not supported</span></td>\n</tr>\n<tr>\n<td>CORS</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Health checks</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Http logging</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Localization</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Output caching</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Rate limiting</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Request decompression</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Response caching</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Response compression</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Rewrite</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Session</td>\n<td></td>\n<td></td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Not supported</span></td>\n</tr>\n<tr>\n<td>SPA</td>\n<td></td>\n<td></td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/274c.png\" alt=\"❌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Not supported</span></td>\n</tr>\n<tr>\n<td>Static files</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>WebSockets</td>\n<td><span aria-hidden=\"true\"><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/2705.png\" alt=\"✅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></span><span class=\"visually-hidden\">Fully supported</span></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>You can see <a href=\"https://github.com/dotnet/core/issues/8288\">current known issues regarding ASP.NET Core and native AOT compatibility in .NET 8 here</a>.</p>\n<p>When building your application, keep an eye out for <a href=\"https://learn.microsoft.com/dotnet/core/deploying/native-aot/fixing-warnings\">AOT warnings</a>. An application that produces AOT warnings during publishing is not guaranteed to work correctly. If you don&#8217;t get any AOT warnings at publish time, you should be confident that your application will work consistently after publishing for AOT as it did during your F5 / <code>dotnet run</code> development workflow. That said, it is still important to test your application thoroughly when moving to a native AOT deployment model, to ensure that functionality observed during development (when the app is untrimmed and JIT-compiled) is preserved in the native executable.</p>\n<h3 id=\"minimal-apis-and-native-aot\">Minimal APIs and native AOT</h3>\n<p>In order to make Minimal APIs compatible with native AOT, we&#8217;ve introduced the <a href=\"https://learn.microsoft.com/aspnet/core/fundamentals/aot/request-delegate-generator/rdg?view=aspnetcore-8.0\">Request Delegate Generator (RDG)</a>. The RDG is a <a href=\"https://learn.microsoft.com/dotnet/csharp/roslyn-sdk/source-generators-overview\">source generator</a> that performs similar work to the <a href=\"https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.http.requestdelegatefactory\"><code>RequestDelegateFactory</code> (RDF)</a>, turning the various <code>MapGet()</code>, <code>MapPost()</code>, etc., calls in your application into <code>RequestDelegate</code>s associated with the specified routes, but rather than doing it in-memory in your application when it starts, it does it at compile-time and generates C# code directly into your project. This removes the runtime generation of this code, and ensures the types used in your APIs are preserved in your application code in a way that is statically analyzable by the native AOT tool-chain, ensuring that required code is not trimmed away. We&#8217;ve worked to ensure that most of the Minimal API features you enjoy today are supported by the RDG and thus compatible with native AOT.</p>\n<p>The RDG is enabled automatically in your project when you enable publishing with native AOT. You can also manually enable RDG even when not using native AOT by setting <code>&lt;EnableRequestDelegateGenerator&gt;true&lt;/EnableRequestDelegateGenerator&gt;</code> in your project file. This can be useful when initially evaluating your project&#8217;s readiness for native AOT, or potentially to reduce the startup time of your application.</p>\n<p>Minimal APIs are optimized for receiving and returning JSON payloads using <code>System.Text.Json</code>, and as such the compatibility requirements for JSON and native AOT apply too. This requires the use of the <a href=\"https://learn.microsoft.com/dotnet/standard/serialization/system-text-json/source-generation\"><code>System.Text.Json</code> source generator</a>. All types accepted as parameters to or returned from request delegates in your Minimal APIs must be configured on a <code>JsonSerializerContext</code> that is registered via ASP.NET Core&#8217;s dependency injection, e.g.:</p>\n<pre><code class=\"language-csharp\">// Register the JSON serializer context with DI\nbuilder.Services.ConfigureHttpJsonOptions(options =&gt;\n{\n    options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default);\n});\n\n...\n\n// Add types used in your Minimal APIs to source generated JSON serializer content\n[JsonSerializable(typeof(Todo[]))]\ninternal partial class AppJsonSerializerContext : JsonSerializerContext\n{\n\n}</code></pre>\n<h3 id=\"grpc-and-native-aot\">gRPC and native AOT</h3>\n<p>gRPC supports native AOT in .NET 8. Native AOT enables publishing gRPC client and server apps as small, fast native executables. Learn more about <a href=\"https://learn.microsoft.com/aspnet/core/grpc/native-aot?view=aspnetcore-8.0\">gRPC and native AOT</a> in the related docs.</p>\n<h3 id=\"libraries-and-native-aot\">Libraries and native AOT</h3>\n<p>Many of the common libraries you enjoy using in your ASP.NET Core projects today will have some compatibility issues when used in a project targeting native AOT. Popular libraries often rely on the dynamic capabilities of .NET reflection to inspect and discover types, conditionally load libraries at runtime, and generate code on the fly to implement their functionality. As stated earlier, these behaviors can cause compatibility issues with native AOT, and as such, these libraries will need to be updated in order to work with native AOT by using tools like <a href=\"https://learn.microsoft.com/dotnet/csharp/roslyn-sdk/source-generators-overview\">Roslyn source generators</a>.</p>\n<p>Library authors wishing to learn more about preparing their libraries for native AOT are encouraged to start by <a href=\"https://learn.microsoft.com/dotnet/core/deploying/trimming/prepare-libraries-for-trimming\">preparing their library for trimming</a> and learning more about enabling the <a href=\"https://learn.microsoft.com/dotnet/core/deploying/native-aot/?tabs=net8plus#aot-compatibility-analyzers\">AOT-compatibility analyzers</a> in their library projects.</p>\n<h3 id=\"getting-started-with-native-aot-deployment-in-asp-net-core\">Getting started with native AOT deployment in ASP.NET Core</h3>\n<p>Native AOT is a publishing option. AOT compilation happens when the app is published. A project that uses native AOT publishing will use JIT compilation when debugging or running as part of the developer inner-loop, but there are some observable differences:</p>\n<ul>\n<li>Some features that aren&#8217;t compatible with native AOT are disabled and throw exceptions at runtime.</li>\n<li>A source analyzer is enabled to highlight project code that isn&#8217;t compatible with native AOT. At publish time, the entire app, including referenced NuGet packages, is analyzed for compatibility again.</li>\n</ul>\n<p>Native AOT analysis during publish includes all code from the app and the libraries the app depends on. Review <a href=\"https://learn.microsoft.com/dotnet/core/deploying/native-aot/fixing-warnings\">native AOT warnings</a> and take corrective steps. It&#8217;s a good idea to test publishing apps frequently to discover issues early in the development lifecycle.</p>\n<p>The <a href=\"https://learn.microsoft.com/dotnet/core/deploying/native-aot/#prerequisites\">following prerequisites</a> need to be installed before publishing .NET projects with native AOT.</p>\n<p>On Windows, install <a href=\"https://visualstudio.microsoft.com/vs/\">Visual Studio 2022</a>, and include the &#8220;Desktop development with C++&#8221; workload with all default components.</p>\n<p><img decoding=\"async\" src=\"./vs-install-c++-workload.png\" alt=\"A screenshot of the &#039;Desktop development with C++&#039; workload in the Visual Studio 2022 installer\" /></p>\n<p>On Linux, install the compiler toolchain and developer packages for libraries that the .NET runtime depends on:</p>\n<ul>\n<li>\n<p>Ubuntu (18.04+)</p>\n<pre><code class=\"language-sh\">sudo apt-get install clang zlib1g-dev</code></pre>\n</li>\n<li>\n<p>Alpine (3.15+)</p>\n<pre><code class=\"language-sh\">sudo apk add clang build-base zlib-dev</code></pre>\n</li>\n</ul>\n<p>Note that at this time, cross-platform native AOT publishing is not supported, meaning you need to perform the publish on the same platform type as the intended target, e.g. if targeting a deployment to Linux, perform the publish on Linux. Docker containers can be a convenient way to enable cross-platform publishing, an <a href=\"https://github.com/dotnet/dotnet-docker/blob/1a88de08b1fef937c628b877d8300634f8f650fe/samples/releasesapi/README.md#cross-compilation\">example of which can be found in the dotnet-docker repo</a>.</p>\n<p>Native AOT published ASP.NET Core apps can be deployed and run anywhere native executables can. Containers are a popular choice for this. Native AOT published .NET applications have the same platform requirements as .NET self-contained applications, and as such should set <a href=\"https://mcr.microsoft.com/product/dotnet/runtime-deps/about\"><code>mcr.microsoft.com/dotnet/runtime-deps</code></a> as their base image.</p>\n<h3 id=\"native-aot-ready-project-templates\">Native AOT-ready project templates</h3>\n<p><img decoding=\"async\" src=\"./vs-aspnetcore-aot-templates.png\" alt=\"Templates for creating ASP.NET Core projects with native AOT in Visual Studio\" /></p>\n<p>In .NET 8, there are two native AOT-enabled project templates to help get you started building ASP.NET Core apps with native AOT.</p>\n<p>The &#8220;ASP.NET Core gRPC Service&#8221; project template has been updated to include a new &#8220;Enable native AOT publish&#8221; option that, when selected, configures the new project to publish as native AOT. This is done by setting <code>&lt;PublishAot&gt;true&lt;/PublishAot&gt;</code> in the project&#8217;s .csproj file.</p>\n<p>There is also a brand new &#8220;ASP.NET Core Web API (native AOT)&#8221; project template, that produces a project more directly focused on cloud-native, API-first scenarios. This template is pre-configured for native AOT, and differs from the existing &#8220;Web API&#8221; project template in the following ways:</p>\n<ul>\n<li>Uses Minimal APIs only, as MVC is not yet native AOT compatible</li>\n<li>Uses the new <code>WebApplication.CreateSlimBuilder</code> API to ensure only the essential features are enabled by default, minimzing the app&#8217;s deployed size</li>\n<li>Configured to listen on HTTP only, as HTTPS traffic is commonly handled by an ingress service in cloud-native deployments</li>\n<li>Does not include a launch profile for running under IIS or IIS Express</li>\n<li>Enables the JSON serializer source generator</li>\n<li>Includes a sample &#8220;Todos API&#8221; instead of the weather forecast sample</li>\n</ul>\n<p>You can create a new Web API project configured to publish as native AOT using the dotnet CLI:</p>\n<pre><code class=\"language-sh\">dotnet new webapiaot</code></pre>\n<p>Here is the content of <em>Program.cs</em> in a project created with the new &#8220;ASP.NET Core Web API (native AOT)&#8221; template:</p>\n<pre><code class=\"language-csharp\">using System.Text.Json.Serialization;\n\nvar builder = WebApplication.CreateSlimBuilder(args);\n\nbuilder.Services.ConfigureHttpJsonOptions(options =&gt;\n{\n    options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default);\n});\n\nvar app = builder.Build();\n\nvar sampleTodos = new Todo[] {\n    new(1, \"Walk the dog\"),\n    new(2, \"Do the dishes\", DateOnly.FromDateTime(DateTime.Now)),\n    new(3, \"Do the laundry\", DateOnly.FromDateTime(DateTime.Now.AddDays(1))),\n    new(4, \"Clean the bathroom\"),\n    new(5, \"Clean the car\", DateOnly.FromDateTime(DateTime.Now.AddDays(2)))\n};\n\nvar todosApi = app.MapGroup(\"/todos\");\ntodosApi.MapGet(\"/\", () =&gt; sampleTodos);\ntodosApi.MapGet(\"/{id}\", (int id) =&gt;\n    sampleTodos.FirstOrDefault(a =&gt; a.Id == id) is { } todo\n        ? Results.Ok(todo)\n        : Results.NotFound());\n\napp.Run();\n\npublic record Todo(int Id, string? Title, DateOnly? DueBy = null, bool IsComplete = false);\n\n[JsonSerializable(typeof(Todo[]))]\ninternal partial class AppJsonSerializerContext : JsonSerializerContext { }</code></pre>\n<h3 id=\"native-aot-call-to-action\">Native AOT call to action</h3>\n<p>Native AOT deployment is not suitable for every application, but in the scenarios where the benefits that native AOT offers are compelling, it can have a huge impact. While this is just the beginning, we&#8217;d love for you try out native AOT support for ASP.NET Core in .NET 8, and share any feedback you have by leaving a comment here, or <a href=\"https://github.com/dotnet/aspnetcore/issues/new\">logging an issue on GitHub</a>. Be sure to read the <a href=\"https://github.com/dotnet/core/issues/8288\">current known issues regarding ASP.NET Core and native AOT compatibility</a>.</p>\n<p>In .NET 8, along with the features of ASP.NET Core detailed here, JWT authentication, options validation, and ADO.NET data access for SQLite and PostgreSQL, have all been updated for native AOT compatibility. We look forward to the .NET ecosystem continuing to enable more libraries and features for native AOT.</p>\n<h2 id=\"full-stack-web-ui-with-blazor\">Full stack web UI with Blazor</h2>\n<p>Blazor in .NET 8 has grown from being a compelling client web UI framework to a full-stack web UI framework that can handle all of your web UI needs. Blazor in .NET 8 combines the strengths of Blazor WebAssembly, Blazor Server, and advanced server-side rendering techniques into a single component-based framework. By leveraging both the client and server, Blazor enables you to deliver an optimized web UI experience that will delight your users.</p>\n<p>Blazor in .NET 8 now supports the following new capabilities:</p>\n<ul>\n<li><strong><a href=\"https://learn.microsoft.com/aspnet/core/blazor/components/render-modes#static-render-mode\">Static server-side rendering</a></strong>: Host Blazor components as ASP.NET Core endpoints that render static HTML in response to requests, so that content renders immediately without the need to download any client code. Also <a href=\"https://learn.microsoft.com/aspnet/core/blazor/forms\">handle form requests</a> using Blazor&#8217;s built-in form components and convenient event-based programming model.</li>\n<li><strong><a href=\"https://learn.microsoft.com/aspnet/core/blazor/fundamentals/routing#enhanced-navigation-and-form-handling\">Enhanced navigation &amp; form handling</a></strong>: Blazor will automatically enhance how pages are loaded and form requests are handled by intercepting these requests and then programmatically patching the server rendered content into the DOM. No need to re-download previously retrieved web assets, and existing DOM state is preserved. Your app feels fast and smooth like a single-page app even though it&#8217;s still doing static server-side rendering.</li>\n<li><strong><a href=\"https://learn.microsoft.com/aspnet/core/blazor/components/rendering#streaming-rendering\">Streaming rendering</a></strong>: Immediately render components to get pixels on the screen fast while long running async tasks execute, and then automatically stream updates to the browser as content becomes available.</li>\n<li><strong><a href=\"https://learn.microsoft.com/aspnet/core/blazor/components/render-modes\">Enable interactivity per component or page</a></strong>: Enable interactive rendering based on Blazor Server or Blazor WebAssembly for individual components or pages using the new <code>@rendermode</code> Razor directive. You only incur the cost for interactivity, like setting up a WebSocket connection or downloading the .NET WebAssembly runtime, where it&#8217;s used.</li>\n<li><strong><a href=\"https://learn.microsoft.com/aspnet/core/blazor/components/render-modes#auto-render-mode\">Auto select the render mode at runtime</a></strong>: Automatically shift users from the server to the client at runtime to improve app load time and scalability​. The component initially renders interactively using Blazor Server while the .NET WebAssembly runtime is downloaded in the background. For future visits, the component switches to use Blazor WebAssembly automatically so you get a fast initial load time and less load on your servers.</li>\n</ul>\n<h2 id=\"more-built-in-blazor-components-and-capabilities\">More built-in Blazor components and capabilities</h2>\n<p>Blazor also includes many new built-in components and capabilities that make you more productive and help get the job done fast.</p>\n<p>Blazor now ships with <a href=\"https://learn.microsoft.com/aspnet/core/blazor/components/quickgrid\">QuickGrid</a>, a fast and functional data grid component for handling your most common data needs. <code>QuickGrid</code> can load strongly-typed data from a variety of data sources, included Entity Framework Core, and you can quickly wire up <code>QuickGrid</code> to an existing data model using the new Blazor CRUD scaffolder. It supports sorting, filtering, paging, and virtualization. Check out the <a href=\"https://aka.ms/blazor/quickgrid\">QuickGrid demo site</a> to see the component in action.</p>\n<p>Blazor also now supports <a href=\"https://learn.microsoft.com/aspnet/core/blazor/components/sections\">sections</a>, which are outlets for content that can be filled in by other components using the new <code>SectionOutlet</code> and <code>SectionContent</code> components. Sections are a great way to define outlets in your app layout that can then be customized by individual pages.</p>\n<p>Routing in Blazor also got a big upgrade in .NET 8. The Blazor router can now route to named elements using standard URL fragments, and you can now use most ASP.NET Core routing features when defining Blazor page routes, like specifying route constraints.</p>\n<h2 id=\"net-webassembly-improvements\">.NET WebAssembly improvements</h2>\n<p>Running your .NET code on WebAssembly from the browser is significantly improved in .NET 8. Your .NET code runs much faster thanks to the new Jiterpreter based runtime, which enables partial just-in-time (JIT) compilation support for WebAssembly. With the new runtime, components render 20% faster and JSON deserialization is twice as fast!</p>\n<p>The .NET WebAssembly runtime also supports many new edit types with Hot Reload, including full parity with the Hot Reload capabilities of CoreCLR and editing of generic types.</p>\n<p>A new web-friendly packaging format for Blazor WebAssembly apps, called <a href=\"https://learn.microsoft.com/aspnet/core/release-notes/aspnetcore-8.0#web-friendly-webcil-packaging\">WebCIL</a>, streamlines deployment by removing all Windows-specific bits from your .NET assemblies and repackaging them as WebAssembly files. With WebCIL, you can deploy your Blazor WebAssembly apps with confidence.</p>\n<h2 id=\"new-blazor-web-app-template\">New Blazor Web App template</h2>\n<p>Getting started with all the new Blazor features in .NET 8 is easy with the new Blazor Web App project template. It&#8217;s your one-stop-shop for all your web development needs.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/blazor-web-app-template.png\" alt=\"Blazor Web App template\" /></p>\n<p>The Blazor Web App template includes convenient options for:</p>\n<ul>\n<li><strong>Authentication type</strong>: Quickly get set up with authentication using ASP.NET Core Identity with a UI completely implemented using Blazor components.</li>\n<li><strong>Interactive render mode</strong>: Decide which interactive render modes you want to enable: Server, WebAssembly, or both with Auto.</li>\n<li><strong>Interactive location</strong>: Decide if you want your entire app to be interactive, or just individual components and pages.</li>\n<li><strong>Include sample pages</strong>: Choose to include some sample pages to get you going, or just start with an empty project.</li>\n</ul>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/blazor-web-app-template-options.png\" alt=\"Blazor Web App template options\" /></p>\n<p>To try out building your first Blazor Web App with .NET 8, just head over to https://blazor.net and click on <a href=\"https://dotnet.microsoft.com/learn/aspnet/blazor-tutorial\">Get started</a> to begin your Blazor learning journey.</p>\n<h2 id=\"new-blazor-scaffolder-preview\">New Blazor scaffolder (Preview)</h2>\n<p>You can quickly get started using Blazor static server rendering and <code>QuickGrid</code> to display data from a database using the new Blazor scaffolder now available with the latest <a href=\"https://visualstudio.com/preview\">Visual Studio Preview</a>. You can use the Blazor scaffolder by right clicking on the project in the Solution Explorer and selecting Add &gt;  New Scaffolded Item, and then selecting <strong>Razor Components using Entity Framework (CRUD)</strong>.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/blazor-crud-scaffolder.png\" alt=\"Blazor scaffolder\" /></p>\n<p>The Blazor scaffolder generates basic Create, Read, Update, and Delete (CRUD) pages based on an Entity Framework Core data model. You can scaffold individual pages or all the CRUD pages in one go. You select the model class and the <code>DbContext</code> that should be used, optionally creating a new <code>DbContext</code> if needed.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/blazor-crud-scaffolder-options.png\" alt=\"Blazor scaffolder options\" /></p>\n<p>The scaffolded Blazor components will then be added to your project to enable the CRUD operations on the model class selected.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/scaffolded-pages.png\" alt=\"Scaffolded Blazor components\" /></p>\n<p>Note that these pages are based on server-side rendering, so they aren&#8217;t support when running on WebAssembly.</p>\n<p>The generated <em>Index.razor</em> component uses <code>QuickGrid</code> to display the data, so you can easily customize how your data is displayed and enable interactivity to take advantage of its many features.</p>\n<p>Here&#8217;s an example of what the scaffolded components look like when the app is running:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/scaffolded-ui.png\" alt=\"Scaffolded Blazor UI with QuickGrid\" /></p>\n<h2 id=\"generic-attributes-for-mvc\">Generic attributes for MVC</h2>\n<p>MVC attributes that previously required a <code>Type</code> parameter are now available as generic attributes, for a much cleaner syntax.</p>\n<p>For example, you can now specify the response type for an API controller action like this:</p>\n<pre><code class=\"language-csharp\">[ApiController]\n[Route(\"api/[controller]\")]\npublic class TodosController : Controller\n{\n  [HttpGet(\"/\")]\n  [ProducesResponseType&lt;Todo&gt;(StatusCodes.Status200OK)]\n  public Todo Get() =&gt; new Todo(1, \"Write a sample\", DateTime.Now, false);\n}</code></pre>\n<p>You can find a full list of the new <a href=\"https://learn.microsoft.com/aspnet/core/release-notes/aspnetcore-8.0#support-for-generic-attributes\">generic attributes for MVC</a> in the release notes.</p>\n<h2 id=\"identity-api-endpoints\">Identity API endpoints</h2>\n<p>ASP.NET Core now provides API endpoints for interacting with ASP.NET Core Identity. These endpoints enable programmatic access to functionality for registering and logging in users, which simplifies setting up authentication for browser and mobile client apps. The endpoints can be used for both cookie and token-based authentication. Check out Jeremy Likness&#8217;s blog post on <a href=\"https://devblogs.microsoft.com/dotnet/whats-new-with-identity-in-dotnet-8/\">What&#8217;s new with identity in .NET 8</a> to learn all about how to set up and use these new endpoints.</p>\n<h2 id=\"enhanced-form-binding-for-minimal-apis-and-anti-forgery-middleware\">Enhanced form binding for Minimal APIs and anti-forgery middleware</h2>\n<p>ASP.NET Core adds support for an anti-forgery middleware that supports validating anti-forgery tokens in requests across all framework implementations (Blazor, Minimal APIs, MVC). Alongside this, form binding in Minimal APIs is also enhanced with support for binding complex types from form inputs, using the same binding logic shared by Blazor.</p>\n<h2 id=\"signalr-stateful-reconnect\">SignalR stateful reconnect</h2>\n<p>SignalR can now reduce the perceived downtime for clients when there is a temporary disconnect in the network connection, like when switching networks or a brief loss in connectivity. You can configure SignalR to do a <a href=\"https://learn.microsoft.com/aspnet/core/signalr/configuration#configure-stateful-reconnect\">stateful reconnect</a>, which will set up the client and server to replay messages that might have been sent while the connection was down. SignalR will automatically take care of buffering messages and keeping track of which messages were already received.</p>\n<h2 id=\"keyed-services-support-in-dependency-injection\">Keyed Services Support in Dependency Injection</h2>\n<p>ASP.NET Core now supports using keyed services in dependency injection (sometimes called &#8220;Keyed DI&#8221;). Keyed DI allows you to have multiple implementations of some service which are distinguished using a developer-friendly name. For example, you can have a database connection for user profiles called &#8220;UserProfiles&#8221; and another for shopping cart contents called &#8220;ShoppingCarts&#8221;.</p>\n<p>Keyed DI is particularly valuable in scenarios where different implementations of a service are needed under different conditions. For instance, in multi-tenant applications, it allows for tenant-specific services, enabling customization and scalability without complicating the codebase. It&#8217;s also instrumental in feature management, allowing for dynamic toggling of features or testing different implementations seamlessly. This level of control and modularity is a significant step forward for developers aiming for clean, maintainable, and adaptable code.</p>\n<p>Registering and using keyed services is both intuitive and flexible. Here&#8217;s a glimpse of how it works:</p>\n<h3 id=\"registration-of-keyed-services\">Registration of Keyed Services:</h3>\n<p>Keyed services are registered in the service collection with unique keys:</p>\n<pre><code class=\"language-csharp\">services.AddKeyedSingleton&lt;IMyService, MyService&gt;(\"key1\");\nservices.AddKeyedTransient&lt;IMyService, MyService&gt;(\"key2\");</code></pre>\n<p>This approach allows the same interface to be associated with different implementations, each identifiable by a unique key.</p>\n<h3 id=\"using-keyed-services\">Using Keyed Services:</h3>\n<p>Keyed services are supported in controllers, minimal API, and SignalR Hubs.</p>\n<p>To leverage the new keyed services support, annotate the target parameter with the [FromKeyedServices(&#8220;keyName&#8221;)] attribute. </p>\n<p>For instance, here are examples of how to use keyed services in controllers and minimal APIs:</p>\n<p><strong>In MVC Controllers:</strong></p>\n<pre><code class=\"language-csharp\">public class SomeApiController : Controller\n{\n    // Keyed service binding on constructor\n    public SomeApiController([FromKeyedServices(\"key1\")] IMyService service)\n    { [...] }\n    // Keyed service binding on method\n    [HttpGet(\"SomeAction\")]\n    public ActionResult&lt;string&gt; SomeAction([FromKeyedServices(\"key2\")] IMyService service)\n    { [...] }\n}</code></pre>\n<p><strong>In Minimal APIs:</strong></p>\n<p>Similarly, in minimal API setups, injecting multiple keyed services into endpoints is streamlined:</p>\n<pre><code class=\"language-csharp\">app.MapGet(\"/\", \n    ([FromKeyedServices(\"key1\")] IMyService s1, [FromKeyedServices(\"key2\")] IMyService s2) =&gt; [...]);</code></pre>\n<p>You can learn more about keyed services from the <a href=\"https://learn.microsoft.com/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-8.0#keyed-services\">dependency injection docs</a>.</p>\n<h2 id=\"metrics\">Metrics</h2>\n<p>Metrics are numerical measurements reported over time, like requests received per second, or the number of error responses sent. Metrics are used to monitor the health of apps and raise alerts.</p>\n<p>ASP.NET Core now provides rich runtime metrics using <a href=\"https://learn.microsoft.com/dotnet/core/diagnostics/compare-metric-apis#systemdiagnosticsmetrics\">System.Diagnostics.Metrics</a>, a new cross-platform API designed in close collaboration with the <a href=\"https://opentelemetry.io/\">OpenTelemetry</a> community.</p>\n<p>These new metrics offers many improvements compared to existing event counters:</p>\n<ul>\n<li>New kinds of measurements with counters, gauges and histograms.</li>\n<li>Powerful reporting with multi-dimensional values.</li>\n<li>Integration into the wider cloud native ecosystem by aligning with OpenTelemetry standards.</li>\n</ul>\n<p>You can read all about the new metrics available in ASP.NET Core and how to integrate them into your monitoring systems in the <a href=\"https://learn.microsoft.com/aspnet/core/log-mon/metrics/metrics\">ASP.NET Core metrics</a> doc.</p>\n<p>A popular way to use metrics is with Grafana, an OSS cloud-native data visualization tool. The .NET team has published Grafana dashboards built on top of the new metrics. The dashboards allow you to see the real-time status of your ASP.NET Core apps. </p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/grafana-dashboard.png\" alt=\".NET Grafana dashboard\" /></p>\n<p>Download the dashboards directly from <a href=\"https://aka.ms/dotnet/grafana-dashboards\">.NET team @ grafana.com</a> and find out more at <a href=\"https://aka.ms/dotnet/grafana-source#readme\">.NET Grafana dashboards</a>.</p>\n<h2 id=\"named-pipes-transport\">Named pipes transport</h2>\n<p>ASP.NET Core now provides a named pipes transport for inter-process communication (IPC) on Windows. Named pipes integrate well with Windows security to control client access to the pipe. See the ASP.NET Core docs on <a href=\"https://learn.microsoft.com/aspnet/core/grpc/interprocess\">Inter-process communication with gRPC</a> to learn all about setting up IPC with named pipes or Unix domain sockets.</p>\n<h2 id=\"redis-based-output-caching\">Redis-based output caching</h2>\n<p>ASP.NET Core in .NET 8 adds support for <a href=\"https://learn.microsoft.com/aspnet/core/performance/caching/output#redis-cache\">using Redis as a distributed cache for output caching</a>. Output caching provides a flexible way to cache HTTP responses from the server. Using Redis for cache storage provides consistency between server nodes via a shared cache that outlives individual server processes.</p>\n<h2 id=\"route-tooling\">Route tooling</h2>\n<p>Routing requests is a key part of any web app. New route tooling features in Visual Studio make working with ASP.NET Core routes easier than ever before. These features include:</p>\n<ul>\n<li>Route syntax highlighting</li>\n<li>Editor completions for matching parameter and route names</li>\n<li>Editor completions for route constraints</li>\n<li>Route analyzers and fixers for common syntax mistakes</li>\n</ul>\n<p>For example, here&#8217;s what routes look like with .NET 7:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/route-tooling-before.png\" alt=\"Route tooling .NET 7\" /></p>\n<p>And here&#8217;s what they look like with .NET 8:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/route-tooling-after.png\" alt=\"Route tooling .NET 8\" /></p>\n<p>You can read all about the new route tooling features in James Newton-King&#8217;s <a href=\"https://devblogs.microsoft.com/dotnet/aspnet-core-route-tooling-dotnet-8/\">ASP.NET Core Route Tooling Enhancements in .NET 8</a> blog post.</p>\n<h2 id=\"debugging-improvements\">Debugging improvements</h2>\n<p>.NET&#8217;s powerful debugger plays a critical role in the development of any .NET app, and ASP.NET is no exception. In .NET 8 we&#8217;ve improved the debugging visualization experience for commonly used types in ASP.NET Core apps so that the debugger surfaces the most important information right away. </p>\n<p>For example, here&#8217;s what examining the <code>HttpContext</code> looks like with .NET 7:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/06/httpcontext-debugging-before.png\" alt=\"Debugging HttpContext with .NET 7\" /></p>\n<p>Here&#8217;s what it looks like with .NET 8, where the most important values are visible right away:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/06/httpcontext-debugging-after.png\" alt=\"Debugging HttpContext with .NET 8\" /></p>\n<p>Check out all the new ASP.NET debugging improvements in James Newton-King&#8217;s post on <a href=\"https://devblogs.microsoft.com/dotnet/debugging-enhancements-in-dotnet-8/\">Debugging Enhancements in .NET 8</a> blog post.</p>\n<h2 id=\"javascript-sdk-and-project-system\">JavaScript SDK and project system</h2>\n<p>Often when working with ASP.NET Core you also need to work with some JavaScript and the JavaScript ecosystem. Bridging the .NET and JavaScript world can be challenging. The new JavaScript SDK and project system in Visual Studio make it easy to use .NET with frontend JavaScript frameworks. The JavaScript SDK provides MSBuild integration for building, running, debugging, testing, and publishing your JavaScript or TypeScript code alongside your .NET code. You can easily integrate with popular JavaScript build tools, like WebPack, Rollup, Parcel, esbuild, and others.</p>\n<p>You can quickly get started using ASP.NET Core with Angular, React, and Vue using the provide Visual Studio templates:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/spa-templates.png\" alt=\"SPA templates\" /></p>\n<p>These templates are available for both JavaScript and TypeScript and use the latest frontend JavaScript CLI tooling to generate the client app, so you&#8217;re always up to date with the latest version.</p>\n<p>You can use the <strong>Install New npm Packages</strong> dialog to easily search for and install npm dependencies:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/install-new-npm-packages.png\" alt=\"Install New npm Packages dialog\" /></p>\n<p>When you build your JavaScript project, the JavaScript SDK will install any npm package dependencies. You can then run your app from Visual Studio or on the command-line using <code>dotnet run</code>. In Visual Studio, you get rich debugging support for both your .NET and JavaScript code.</p>\n<p>You can also use the Visual Studio Test Explorer to discover and run your tests:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/js-test-explorer.png\" alt=\"Test Explorer for JavaScript tests\" /></p>\n<p>You can learn more about working with .NET and JavaScript together in Visual Studio in the <a href=\"https://aka.ms/dotnet/js\">Visual Studio for JavaScript docs</a>.</p>\n<h2 id=\"and-theres-much-more\">And there&#8217;s much more!</h2>\n<p>This was just a sampling of what&#8217;s new in ASP.NET Core for .NET 8. For the full list, check out the <a href=\"https://learn.microsoft.com/aspnet/core/release-notes/aspnetcore-8.0\">ASP.NET Core in .NET 8 release notes</a>.</p>\n<h2 id=\"upgrade-an-existing-project\">Upgrade an existing project</h2>\n<p>To upgrade an existing ASP.NET Core app from .NET 7 to .NET 8, follow the steps in <a href=\"https://learn.microsoft.com/aspnet/core/migration/70-80\">Migrate from ASP.NET Core 7.0 to 8.0</a></p>\n<p>To upgrade an existing ASP.NET Core app from .NET 8 RC2 to .NET 8, update all ASP.NET Core package references to <code>8.0.0</code>. In Blazor Web Apps, you should also replace the earlier render mode attributes with the new <code>@rendermode</code> directive:</p>\n<ul>\n<li>Add <code>@using static Microsoft.AspNetCore.Components.Web.RenderMode</code> to your <em>_Imports.razor</em> file</li>\n<li>Replace <code>@attribute [RenderModeInteractiveServer]</code> with <code>@rendermode InteractiveServer</code></li>\n<li>Replace <code>@attribute [RenderModeInteractiveWebAssembly]</code> with <code>@rendermode InteractiveWebAssembly</code></li>\n<li>Replace <code>@attribute [RenderModeInteractiveAuto]</code> with <code>@rendermode InteractiveAuto</code></li>\n</ul>\n<p>That&#8217;s it! You should be all set to enjoy the benefits of .NET 8.</p>\n<p>See also the full list of <a href=\"https://learn.microsoft.com/dotnet/core/compatibility/8.0\">breaking changes</a> in ASP.NET Core for .NET 8.</p>\n<h2 id=\"net-8-on-azure\">.NET 8 on Azure</h2>\n<p>.NET 8 is already deployed and ready to be used with all your favorite Azure services, including <a href=\"https://aka.ms/appservice-dotnet8\">Azure App Service</a>, <a href=\"https://aka.ms/af-dotnet-isolated-net8\">Azure Functions</a>, and <a href=\"https://aka.ms/swa-dotnet8\">Azure Static Web Apps</a>. Get started building with .NET 8 on Azure today!</p>\n<h2 id=\"build-cloud-native-apps-seamlessly-with-net-aspire-and-asp-net-core\">Build cloud-native apps seamlessly with .NET Aspire and ASP.NET Core</h2>\n<p>.NET 8 introduces an integrated approach to cloud-native applications through .NET Aspire, crafted using the robust capabilities of ASP.NET Core. This collaboration offers ASP.NET developers a familiar environment to leverage their existing skills while benefiting from an opinionated stack designed for resilience, observability, and configurability in the cloud. .NET Aspire seamlessly enhances ASP.NET Core, incorporating essential cloud-native components like telemetry, resilience strategies, configuration management, and health checks out-of-the-box. For a smooth transition to cloud-native development with tools you know and trust, explore the <a href=\"https://aka.ms/dotnet/aspire\">.NET Aspire announcement</a> and discover how it can streamline your cloud-native application development.</p>\n<h2 id=\"join-us-for-the-net-8-release-at-net-conf-2023\">Join us for the .NET 8 release at .NET Conf 2023</h2>\n<p>Come celebrate with us and learn all about the .NET 8 release at <a href=\"https://dotnetconf.net\">.NET Conf 2023</a>, a FREE, three day virtual developer event featuring speakers from the .NET team and the broader .NET community. The conference starts TODAY and goes from November 14-16. We hope you can join us!</p>\n<h2 id=\"thank-you\">Thank you!</h2>\n<p>Thank you to everyone in the community who helped make this release of .NET 8 possible! This release represents the culmination of many GitHub issues, pull requests, design feedback comments and documentation updates contributed by many members of the .NET community. We couldn&#8217;t have made it to this point without you!</p>\n<p>We hope you enjoy this release of ASP.NET Core in .NET 8. We&#8217;re eager to hear about your experiences building with it. Let us know about any feedback you have on this release on <a href=\"https://github.com/dotnet/aspnetcore/issues\">GitHub</a>.</p>\n<p>Thanks again, and happy coding!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-8/\">Announcing ASP.NET Core in .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-8/feed/","slash:comments":"43"},{"title":"Announcing .NET MAUI in .NET 8","link":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8/","comments":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8/#comments","dc:creator":{"#cdata-section":"David Ortinau"},"pubDate":"Tue, 14 Nov 2023 16:00:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET MAUI"},{"#cdata-section":".net 8"},{"#cdata-section":".net maui"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=48958"},"description":{"#cdata-section":"<p>.NET MAUI in .NET 8 has arrived with quality improvements, performance and memory improvements, desktop enhancements, and more.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8/\">Announcing .NET MAUI in .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>Today our team is thrilled to introduce you to the latest major stable release of .NET MAUI in .NET 8! We build .NET MAUI to enable .NET developers to create cross-platform applications for Android, iOS, macOS, and Windows with deep native integrations, platform-native user interfaces, and hybrid experiences that extend the reach of Blazor and other web UI technologies. Today marks the third major release of .NET MAUI in the past 18 months which turns the corner from our unifying of the Xamarin platform with .NET into pushing forward .NET as one.</p>\n<p>In addition to all the <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8\">amazing work in the .NET SDK and runtime</a>, we have labored with extreme focus on .NET 8 to fix high impact bugs, isolate and resolve memory leaks, improve the accuracy and reliability of hot reload, ease the path for customers upgrading from Xamarin, retain and improve performance at startup and runtime, and so much more. We are very proud of this release and cannot wait for everyone to start using it.</p>\n<blockquote><p>&#8220;Creating Right to Left layouts in .NET MAUI is now a reality thanks to .NET 8. Visual elements are perfectly arranged and Carousels work great now. We&#8217;ve been working with the latests preview bits for a while and the improvements the MAUI team did have proven key to successfully deliver RTL apps to our clients.&#8221; &#8211; Leo, UX Divers for Umrahme</p></blockquote>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/rtl-after-before.png\" alt=\"right to left comparing .net 8 and 7\" /></p>\n<p>Early feedback like this has been encouraging, and we are eager to hear from you next. Let&#8217;s take a look at some of the biggest improvements you&#8217;ll get in .NET MAUI.</p>\n<h2 id=\"overall-quality\">Overall Quality</h2>\n<p>Firstly looking at the release by the numbers, in .NET 8 we have:</p>\n<ul>\n<li>1618 pull requests merged (up from 577)</li>\n<li>689 bug issues resolved (up from 180)</li>\n</ul>\n<p>Compared to the .NET 7 GA release that&#8217;s a 180% increase in pull requests merged and 283% more bug issues resolved. Since .NET 7 was a shorter release for .NET MAUI, I thought it would be interesting to include all the .NET 7 service releases as well. Taking that into account, .NET 8 still has 18% more pull requests merged and 13% more bug issues resolved.</p>\n<p>This would not have been possible without the 94 wonderful contributors across teams at Microsoft and especially from the community. On behalf of all .NET MAUI users we thank you so much for your continued contributions and support!</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/net8-avatars.png\" alt=\"Contributors to .NET MAUI in .NET 8\" /></p>\n<p>Early in .NET 7 servicing we heard loud and clear from developers that we needed to raise the quality of releases, and so we did just that raising the bar on what we would backport from our .NET 8 work to release in .NET 7 until we had more automated testing in place and other processes to better guard against this. During subsequent releases we enabled a dormant suite of Xamarin.Forms tests to run on .NET and against .NET MAUI, and added more than 3500 device tests on Windows spread across the Controls, Core, and Essentials areas among other tests.</p>\n<p>Going forward in .NET 8 servicing, the bar is back down and we will ship more bug fixes to .NET 8 than you saw in .NET 7. We know that this was not a popular decision, and we did the work to be more confident in the quality of our quick servicing releases to meet your need. </p>\n<p>The top areas of quality improvements are:</p>\n<ul>\n<li>Keyboard behavior, especially on mobile</li>\n<li>FlowDirection support for right-to-left languages</li>\n<li>Layout fidelity and performance</li>\n<li>Scroll performance</li>\n<li>Memory management</li>\n</ul>\n<p>Visit the <a href=\"https://github.com/dotnet/maui/releases\" rel=\"noopener\" target=\"_blank\">release notes</a> for a complete list of fixes and improvements.</p>\n<h2 id=\"whats-new\">What&#8217;s new</h2>\n<p>The .NET MAUI pedigree is rooted in touch interfaces on mobile and tablet devices, so we have some work to do to enable more desktop specific experiences where user input is more often from keyboard and mouse. This release enables keyboard accelerators, enhances pointer gestures, and more.</p>\n<h3 id=\"keyboard-accelerators\">Keyboard accelerators</h3>\n<p>A keyboard accelerator is the shortcut you can associate with any menu item in a desktop application, like copy (Ctrl+C), paste (Ctrl+V), and Cut (Ctrl+X).</p>\n<pre><code class=\"language-xaml\">&lt;ContentPage.MenuBarItems&gt;\r\n    &lt;MenuFlyoutItem Text=\"Cut\"\r\n                    Clicked=\"OnCutMenuFlyoutItemClicked\"&gt;\r\n        &lt;MenuFlyoutItem.KeyboardAccelerators&gt;\r\n            &lt;KeyboardAccelerator Modifiers=\"Ctrl\"\r\n                                Key=\"X\" /&gt;\r\n        &lt;/MenuFlyoutItem.KeyboardAccelerators&gt;\r\n    &lt;/MenuFlyoutItem&gt;\r\n&lt;/ContentPage.MenuBarItems&gt;</code></pre>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/menubar-accelerators.png\" alt=\"desktop menu bar\" /></p>\n<p>For more details and advanced examples, see the <a href=\"https://learn.microsoft.com/dotnet/maui/user-interface/keyboard-accelerators?view=net-maui-8.0\">Keyboard Accelerators documentation</a>.</p>\n<h3 id=\"pointer-gesture-enhancements\">Pointer gesture enhancements</h3>\n<p>.NET MAUI has included a <code>PointerGesture</code> for a while so you knew when the cursor was over an element, and now in .NET 8 you gain <code>PointerPressed</code> and <code>PointerReleased</code> events along with event arguments containing more information about the position of the pointer. This works across Android, iPadOS, Mac Catalyst, and Windows.</p>\n<p><div style=\"width: 640px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-48958-2\" width=\"640\" height=\"360\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/pointer-gestures.mp4?_=2\" /><a href=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/pointer-gestures.mp4\">https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/pointer-gestures.mp4</a></video></div></p>\n<p>See the updated <a href=\"https://learn.microsoft.com/dotnet/maui/fundamentals/gestures/pointer?view=net-maui-8.0tabs=windows\">Recognize a pointer gesture documentation</a>.</p>\n<h3 id=\"drag-and-drop-gesture-enhancements\">Drag and drop gesture enhancements</h3>\n<p>To improve the drag and drop user experience we have exposed more APIs on Windows such as including custom glyphs when you initiate a drag, custom captions when you drag, and on iOS and Mac Catalyst for the size of the item you&#8217;re dragging, adding custom shapes or images, and customizing the drop actions to indicate if it&#8217;s a copy, a move, or a forbidden action.</p>\n<p><div style=\"width: 640px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-48958-3\" width=\"640\" height=\"360\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/windowsDragNDropSample.mp4?_=3\" /><a href=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/windowsDragNDropSample.mp4\">https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/windowsDragNDropSample.mp4</a></video></div></p>\n<p>&nbsp;</p>\n<p><div style=\"width: 300px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-48958-4\" width=\"300\" height=\"360\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/iosDragNDropSample.mp4?_=4\" /><a href=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/iosDragNDropSample.mp4\">https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/iosDragNDropSample.mp4</a></video></div></p>\n<p>See the updated <a href=\"https://learn.microsoft.com/dotnet/maui/fundamentals/gestures/drag-and-drop?view=net-maui-8.0&amp;tabs=windows\">Recognize a drag and drop gesture documentation</a>.</p>\n<h2 id=\"performance-and-memory-improvements\">Performance and memory improvements</h2>\n<p>Jonathan Peppers has <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-8-performance-improvements-in-dotnet-maui/\">written in-depth</a> about the work in .NET 8 to improve performance, app size, and address memory leaks. <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-8-performance-improvements-in-dotnet-maui/\">New features</a> include AndroidStripILAfterAOT, AndroidEnableMarshalMethods, and NativeAOT for iOS. These and many other improvements are available so you can choose the best path for reducing your app size and improve performance.</p>\n<p>By staying on the leading edge of .NET, you get most of these improvements without having to make any changes to your code.</p>\n<h2 id=\"miscellaneous-highlights\">Miscellaneous highlights</h2>\n<p>With the enormous amount of work that has gone into this release, it should be no surprise that there&#8217;s even more to highlight. For the complete list of changes, enjoy a lengthy read of the <a href=\"https://github.com/dotnet/maui/releases\">.NET MAUI 8.0.3 release notes</a>, and for an abbreviated summary enjoy reading the <a href=\"https://learn.microsoft.com/dotnet/maui/whats-new/dotnet-8?view=net-maui-8.0\">What&#8217;s new in .NET MAUI for .NET 8</a>.</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/dotnet/maui/windows/deployment/publish-unpackaged-cli?view=net-maui-8.0\">Publish an unpackaged .NET MAUI app for Windows with the CLI</a>.</li>\n<li>Use <code>ContentPage.HideSoftInpuOnTapped</code> to <a href=\"https://learn.microsoft.com/dotnet/maui/user-interface/pages/contentpage?view=net-maui-8.0\">dismiss the keyboard</a> when tapping anywhere on the page</li>\n<li>Controls that support text input gain extension methods that support hiding and showing the soft input keyboard. For more information, see <a href=\"https://learn.microsoft.com/dotnet/maui/user-interface/controls/entry?view=net-maui-8.0#hide-and-show-the-soft-input-keyboard\">Hide and show the soft input keyboard</a>.</li>\n<li>WebView gains a UserAgent property. For more information, see <a href=\"https://learn.microsoft.com/dotnet/maui/user-interface/controls/webview?view=net-maui-8.0\">WebView</a>.</li>\n<li>Inline media playback of HTML5 video, including autoplay and picture in picture, has been enabled by default for the WebView on iOS. For more information, see <a href=\"https://learn.microsoft.com/dotnet/maui/user-interface/controls/webview?view=net-maui-8.0#set-media-playback-preferences-on-ios-and-mac-catalyst\">Set media playback preferences on iOS and Mac Catalyst</a>.</li>\n<li>BlazorWebView gains a StartPath property, a TryDispatchAsync method, and enhanced logging capabilities. For more information, see <a href=\"https://learn.microsoft.com/dotnet/maui/user-interface/controls/blazorwebview?view=net-maui-8.0\">Host a Blazor web app in a .NET MAUI app using BlazorWebView</a>.</li>\n<li>The TapGestureRecognizer class gains the ability to handle secondary taps on Android. For more information, see <a href=\"https://learn.microsoft.com/dotnet/maui/fundamentals/gestures/tap?view=net-maui-8.0\">Recognize a tap gesture</a>.</li>\n</ul>\n<h2 id=\"get-started-today\">Get started today</h2>\n<p>.NET MAUI and .NET 8 are included in today&#8217;s stable release of <a href=\"https://visualstudio.microsoft.com/vs/\">Visual Studio 2022 17.8</a>.</p>\n<p>On all platforms, you can develop with .NET MAUI using Visual Studio Code. Install the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-maui\">.NET MAUI extension</a> and <a href=\"https://www.surveymonkey.com/r/W789CW2\">let us know</a> how we can improve this preview experience for you in the future.</p>\n<p>Download the <a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\">.NET 8 installer</a>, and then install .NET MAUI from the command line:</p>\n<pre><code class=\"language-bash\">dotnet workload install maui</code></pre>\n<p>Through the <a href=\"https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/\">retirement of Visual Studio for Mac next year</a> you can continue developing using Visual Studio for Mac after enabling the preview feature for .NET 8 in Preferences.</p>\n<p>For upgrading projects to .NET 8, follow the <a href=\"https://github.com/dotnet/maui/wiki/Upgrading-.NET-MAUI-from-.NET-7-to-.NET-8\" rel=\"noopener\" target=\"_blank\">upgrade guidance</a> on our wiki.</p>\n<h2 id=\"thank-you\">Thank You</h2>\n<p>On behalf of the .NET MAUI team, thank you for all of your engagement, contributions, and support! We look forward to hearing about <a href=\"mailto:david.ortinau@microsoft.com\">your successes</a>, and <a href=\"https://github.com/dotnet/maui/issues/new/choose\">your feedback</a> on how we can improve the product through .NET 8 service releases and into .NET 9.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8/\">Announcing .NET MAUI in .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8/feed/","slash:comments":"26","enclosure":[{"@url":"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/pointer-gestures.mp4","@length":"1625097","@type":"video/mp4"},{"@url":"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/windowsDragNDropSample.mp4","@length":"729533","@type":"video/mp4"},{"@url":"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/11/iosDragNDropSample.mp4","@length":"1724985","@type":"video/mp4"}]},{"title":"Join us for the Great .NET 8 Hack","link":"https://devblogs.microsoft.com/dotnet/join-us-for-the-great-dotnet-8-hack/","comments":"https://devblogs.microsoft.com/dotnet/join-us-for-the-great-dotnet-8-hack/#comments","dc:creator":{"#cdata-section":"Aaron Powell"},"pubDate":"Tue, 07 Nov 2023 18:05:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET MAUI"},{"#cdata-section":"AI Machine Learning"},{"#cdata-section":"Cloud Native"},{"#cdata-section":".net 8"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=48742"},"description":{"#cdata-section":"<p>Join us for a virtual hackathon, November 20 to December 4, 2023 to learn how to build awesome apps with .NET, AI, or Cloud Native. And a chance to win exciting prizes!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/join-us-for-the-great-dotnet-8-hack/\">Join us for the Great .NET 8 Hack</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>Are you ready to unleash your creativity and coding skills with .NET 8? Join us for <strong>The Great .NET 8 Hack</strong>, a virtual hackathon to learn how to build cloud native apps or AI apps with the latest version of .NET. Whether you’re a beginner, a student, or an expert looking for a new challenge, this is the perfect opportunity for you!</p>\n<p>.NET 8 is the newest release of the popular open source and cross-platform development platform that powers millions of apps across the web, mobile, desktop, gaming, IoT, and more. With .NET 8, you can take advantage of the latest features and improvements such as:</p>\n<ul>\n<li><strong>C# 12</strong>: The latest version of the modern and expressive programming language that supports <a href=\"https://learn.microsoft.com/dotnet/csharp/whats-new/csharp-12\">nullable reference types, records, pattern matching, and more</a>.</li>\n<li><strong>ASP.NET Core 8.0</strong>: The high-performance and scalable web framework that lets you build dynamic web apps, APIs, microservices, and serverless functions.</li>\n</ul>\n<p>The Great .NET 8 Hack will run online from November 20 to December 4, 2023. You will have two weeks to build your own .NET 8 app based on one of the three themes: cloud native apps or AI apps. You can participate by yourself or as a team with your friends or colleagues!</p>\n<p>To help you get started and learn new skills, we will also host live sessions with experts on the technologies from Microsoft including Gaurav Seth, Diego Colombo, and more! They will share their insights and tips on how to build awesome apps with .NET 8.</p>\n<p>For the schedule and more information about the sessions, check out our <a href=\"https://github.com/microsoft/hack-together-dotnet\">GitHub repo</a>.</p>\n<p>All hackathon participants who submit an app will receive a digital badge. In addition, the winners selected by our judges will receive the following exciting prizes (up to 4 individuals if submitting as a team, prizes for each person on the team):</p>\n<p><strong><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f3c6.png\" alt=\"🏆\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> Grand Prize winner:</strong> <em>The best of the best! This category rewards the solution that meets all judging criteria, wows judges, and has potential real-world value.</em></p>\n<ul>\n<li>$500 per individual, up to $1500 total for a team of three <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f4b8.png\" alt=\"💸\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></li>\n</ul>\n<p><strong><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f947.png\" alt=\"🥇\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> Best Intelligent Apps solution:</strong></p>\n<ul>\n<li>$500 cash prize per team <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f4b8.png\" alt=\"💸\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></li>\n</ul>\n<p><strong><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f947.png\" alt=\"🥇\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> Best Cloud Native solution:</strong></p>\n<ul>\n<li>$500 cash prize per team <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f4b8.png\" alt=\"💸\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></li>\n</ul>\n<p><strong><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f3c5.png\" alt=\"🏅\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> All hackathon participants who submit an app will receive a digital badge.</strong></p>\n<p>We can&#8217;t wait to see what you will create with .NET 8! Share your journey throughout the hack on social with the #GreatDotNet8Hack hashtag. Let us know if you have any questions. Our team is always here to help you! Follow us on Twitter/X and Mastodon to stay up to date on our latest news and announcements.</p>\n<p>Register today and we look forward to meeting you at #GreatDotNet8Hack.</p>\n<p><div style=\"text-align:center\"><a class=\"cta_button_link\" href=\"https://aka.ms/hacktogether/dotnet/register\" style=\"text-transform: titlecase; display: inline-block; background-color: #5C2D91; color: white; padding: 10px; margin:10px 0; text-decoration: none;\" target=\"_blank\">Register</a></div></p>\n<p>PS: Do you think this blog post was written by a human or AI? <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png\" alt=\"😉\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/join-us-for-the-great-dotnet-8-hack/\">Join us for the Great .NET 8 Hack</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/join-us-for-the-great-dotnet-8-hack/feed/","slash:comments":"5"}]}}}