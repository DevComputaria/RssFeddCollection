{"?xml":{"@version":"1.0","@encoding":"UTF-8"},"rss":{"@version":"2.0","@xmlns:content":"http://purl.org/rss/1.0/modules/content/","@xmlns:wfw":"http://wellformedweb.org/CommentAPI/","@xmlns:dc":"http://purl.org/dc/elements/1.1/","@xmlns:atom":"http://www.w3.org/2005/Atom","@xmlns:sy":"http://purl.org/rss/1.0/modules/syndication/","@xmlns:slash":"http://purl.org/rss/1.0/modules/slash/","channel":{"title":".NET Blog","atom:link":{"@href":"https://devblogs.microsoft.com/dotnet/feed/","@rel":"self","@type":"application/rss+xml"},"link":"https://devblogs.microsoft.com/dotnet/","description":"Free. Cross-platform. Open source. A developer platform for building all your apps.","lastBuildDate":"Thu, 25 Jan 2024 16:05:00 +0000","language":"en-US","sy:updatePeriod":"\n\thourly\t","sy:updateFrequency":"\n\t1\t","image":{"url":"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2018/10/Microsoft-Favicon.png","title":".NET Blog","link":"https://devblogs.microsoft.com/dotnet/","width":"32","height":"32"},"item":[{"title":"Microsoft Office’s RTC (Real-Time Channel) migration to modern .NET","link":"https://devblogs.microsoft.com/dotnet/office-rtc-dotnet-migration/","comments":"https://devblogs.microsoft.com/dotnet/office-rtc-dotnet-migration/#comments","dc:creator":{"#cdata-section":"Gilad Oren"},"pubDate":"Thu, 25 Jan 2024 16:05:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":"ASP.NET Core"},{"#cdata-section":"Developer Stories"},{"#cdata-section":"SignalR"},{"#cdata-section":".net 7"},{"#cdata-section":"collab"},{"#cdata-section":"office"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=50210"},"description":{"#cdata-section":"<p>Real-Time Channel is Microsoft Office Online's service that powers real time collaboration and coauthoring. This blog post describes the journey to migrate the service from .NET Framework to modern .NET.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/office-rtc-dotnet-migration/\">Microsoft Office&#8217;s RTC (Real-Time Channel) migration to modern .NET</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>Real-Time Channel (RTC) is Microsoft Office Online&#8217;s websocket service that powers the real-time collaboration experiences for Office applications. It serves hundreds of millions of document sessions per day from dozens of datacenters and thousands of server VMs around the world. </p>\n<p>The service was written in .NET Framework (4.7.2) with IIS and ASP.NET. It is mainly built around a SignalR service providing real-time communication and has additional functionality like routing, session management, and notifications. </p>\n<p>In April 2021, the service team made the decision to start the migration from from .NET Framework to  modern .NET  (at this time, it was .NET 5). The main motivation for the migration was <strong>improving performance</strong>, <strong>reliability</strong>, <strong>cost (or COGS)</strong>, and <strong>modernizing the platform and code base</strong> to reduce technical debt and increase engineering satisfaction. Two approaches were considered for the migration – a complete rewrite, or a lift-and-shift.</p>\n<p>RTC&#8217;s code is integrated into the entire Office Online code base, which uses a lot of common shared libraries across Office Online apps including Word, Excel, PowerPoint. Since there are so many other common libraries shared between apps, a complete rewrite did not make a lot of sense as the other libraries would need to be rewritten as well. It would not have been feasible for a single service team to undertake such a large platform rewrite. This left us with the &#8220;lift-and-shift&#8221; approach – meaning modifying the .NET Framework code base to compile against modern .NET.  While all at the same time using conditional compiler directives to write custom code in places where the .NET Framework code was not compatible with modern .NET.</p>\n<p>Through the migration, we had some major highlights including:</p>\n<ul>\n<li>30% reduction in CPU</li>\n<li>A corresponding 30% reduction in Virtual Machine COGS.</li>\n<li>60% reduction in memory and GC time.</li>\n<li>Over 50% average decrease in latency for main APIs.</li>\n</ul>\n<p>Now, let&#8217;s get into some deeper details on the migration itself.</p>\n<h2 id=\"pre-migration-challenges\">Pre-migration Challenges</h2>\n<p>The first two migration challenges became apparent even before the work had started:</p>\n<ol>\n<li>RTC (and all Office Online services) use ASP.NET’s Http Modules and Handlers. These concepts don’t exist in modern .NET and are replaced by middleware. As our approach is lift-and-shift of existing code, how can we use the existing Http Modules and Handlers without having to rewrite them as middleware?</li>\n<li>ASP.NET Core SignalR server component is not backward compatible with ASP.NET Framework SignalR clients. Even if we do the migration to modern .NET, how can we support existing in-market legacy SignalR clients (especially on Windows applications, where older version need to be supported for many years)? This was our biggest challenge that put the migration at a major risk.</li>\n</ol>\n<p><strong>Solutions:</strong></p>\n<ol>\n<li>To continue using ASP.NET HTTP Modules and Handlers, we wrote an ASP.NET Core middleware that can dynamically load HTTP Modules and Handlers from DLLs and invoke their lifetime methods (such as <code>BeginRequest</code>, <code>EndRequest</code>, etc.) in order.</li>\n<li>\n<p>To solve this challenge, two design solution were evaluated:</p>\n<ol>\n<li>having the modern .NET and the .NET Framework servers running side by side for some number of years, with some bridging layer between them to allow SignalR clients of different versions to communicate with each other.</li>\n<li>write a custom in-process translation layer that would run in the modern .NET service, intercept legacy SignalR client requests and connections, and translate them to SignalR Core requests and message formats.</li>\n</ol>\n<p>The 2nd option (translation middleware) was preferable because it allowed us to completely move to modern .NET without having to keep the .NET Framework service supported and maintained for years.</p>\n<p>Since we only use a subset of the SignalR features, we wrote a middleware that intercepts ASP.NET SignalR connections and rewrites them to be compatible with ASP.NET Core SignalR. This would allow us to use ASP.NET Core SignalR while still allowing our legacy clients to connect, and will provide a seamless transition for new clients that will be using ASP.NET Core SignalR.</p>\n</li>\n</ol>\n<h2 id=\"post-migration-challenges\">Post-migration Challenges</h2>\n<p>The next set of challenges were only discovered after the modern .NET service was ready and deployed in Production and started taking some small percentage of the traffic. These were mostly scale and performance issues that could only be discovered when running in high scale:</p>\n<ol>\n<li><strong>High CPU from IIS</strong> &#8211; After converting our first few datacenters to modern .NET, we quickly noticed that modern .NET servers were running with up to 30% worse CPU utilization than our .NET Framework servers. This required some thorough investigation. The problem was traced to the use of expensive <code>CancelIoEx()</code> calls made by the IIS ASP.NET Core module whenever a websocket connection is closed.\nThe solution involved a workaround of manually closing the connection by calling <code>IISHttpContext.Abort()</code> ourselves, which cancels the pending async IO tasks without calling <code>CancelIOEx()</code>.\nAfter this fix, we saw a 45% reduction in the process CPU (which makes it 30% better compared with the .NET Framework version of the service). It seems that this problem would be a performance issue for any high throughput ASP.NET Core websocket application on IIS. The ultimate solution to this issue that was recommended by the .NET team is to switch from IIS to Kestrel, which was in our future plan.</li>\n<li><strong>High CPU from SignalR Core</strong> – Another investigation into high CPU pointed to an issue in ASP.NET SignalR Core’s <code>OnDisconnectedAsync()</code> event. Whenever a connection is disconnected, SignalR iterates over the entire concurrent dictionary of groups that this connection needs to be removed from rather than removing just that group directly from the dictionary.\nTo address this issue, the solution was to remove the connection from the group manually upon disconnect, instead of having SignalR do it. This was possible thanks to the highly extensible SignalR Core and the use of a custom <code>HubLifetimeManager</code>. A GitHub issue was also opened to track the more permanent fix of this issue in the SignalR Core source code.</li>\n</ol>\n<h2 id=\"using-event-counters\">Using Event Counters</h2>\n<p>One of the most useful tools that we found during the migration work was the use of Event Counters to track interesting metrics.</p>\n<p>In modern .NET the traditional performance counters that were available in ASP.NET were replaced by Event Counters. These event counters provide a richer set of behavior and performance data points that allowed us to get a better understanding of our service.</p>\n<p>We used the EventSource model to capture built-in .NET counters and emit them per-minute into our telemetry pipeline. Then we aggregated these data points and built visualizations that can be presented at the individual VM level, datacenter level, etc.</p>\n<p>For example, we used the &#8220;active-timer-count&#8221; counter to track the number of System.Timer instances created by our process. We found that our websocket proxy module was unnecessarily creating a new timer per connection, even in our legacy .NET Framework version of the service that had been running for many years but never had this kind of counter available. By reducing the number of timers from linear to constant, we saved some significant CPU and lock time, both in the new modern .NET and in the old .NET Framework service.</p>\n<p>Other interesting counters are in the HTTP stack (HTTP requests, HTTP queue size, DNS lookups, and many more), in the memory and GC usage, lock contention, and others. This granular view of the service behavior made it easier to investigate bugs and performance issues.</p>\n<h2 id=\"production-rollout\">Production Rollout</h2>\n<p>With the above solutions and customizations we reached a point where all metrics were satisfying and even exceeded our expectations, and the modern .NET version of RTC was ready to be rolled out fully in production.</p>\n<p>Our original rollout launched with .NET 6 and we soon wanted to make the migration to .NET 7 to continue our investment in modern .NET and gain more performance to reduce our costs. During the migration from .NET 6 to ..NET 7,  we suddenly noticed a significant increase of 3x-4x in memory (Gen2) heap size.</p>\n<p>The GC implementation in .NET 7 underwent a major refactoring and redesign compared to .NET 6 and prior versions. Our usage pattern of websockets, which heavily uses async pinned handles, was not optimal for the new GC implementation, and we had to use the extensibility option in .NET 7 to run with .NET 6’s GC module. This allowed us to keep the memory usage optimal, while still benefiting from the latest features of .NET 7 and above.</p>\n<p>The rest of the production rollout was smooth, and here are some key metrics where we saw the greatest improvements. These improvements translate into both COGS savings, and better user experience:</p>\n<p>CPU utilization – 30% decrease:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/rtc-migration-Picture1.png\" alt=\"CPU utilization – 30% decrease\" /></p>\n<p>CPU time in GC – 60% decrease:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/rtc-migration-Picture2.png\" alt=\"CPU time in GC – 60% decrease\" /></p>\n<p>Memory usage – 60% decrease:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/rtc-migration-Picture3.png\" alt=\"Memory usage – 60% decrease\" /></p>\n<p>API latency – over 50% decrease:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/rtc-migration-Picture4.png\" alt=\"API latency – over 50% decrease\" /></p>\n<h2 id=\"next-stop-net-8\">Next Stop: .NET 8!</h2>\n<p>The outcome of the migration to modern .NET exceeded our expectations, and we believe that it was a worthwhile investment that will benefit our service, our engineers, and our customers for years to come. We are not done with our journey in .NET, and are continuously looking for ways to improve our service and take advantage of the new features and capabilities that .NET offers. Now that .NET 8 is released, we are starting our migration to .NET 8. In addition, some of the areas that we are exploring and working on include:</p>\n<ul>\n<li>Moving Office client applications (web clients and desktop apps) from ASP.NET Framework SignalR to ASP.NET Core SignalR, letting us deprecate the custom translation middleware and benefit from the latest protocol improvements.</li>\n<li>Moving from IIS to Kestrel.</li>\n</ul>\n<p>We hope that you enjoyed reading this post and found some useful information that will help you achieve more with modern .NET!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/office-rtc-dotnet-migration/\">Microsoft Office&#8217;s RTC (Real-Time Channel) migration to modern .NET</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/office-rtc-dotnet-migration/feed/","slash:comments":"7"},{"title":"Introducing the MSTest Runner – CLI, Visual Studio, & More","link":"https://devblogs.microsoft.com/dotnet/introducing-ms-test-runner/","comments":"https://devblogs.microsoft.com/dotnet/introducing-ms-test-runner/#comments","dc:creator":{"#cdata-section":"Amaury Levé"},"pubDate":"Wed, 24 Jan 2024 18:00:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":"C#"},{"#cdata-section":"Performance"},{"#cdata-section":"Csharp"},{"#cdata-section":"dotnet"},{"#cdata-section":"mstest"},{"#cdata-section":"testing"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=50058"},"description":{"#cdata-section":"<p>MSTest runner is a new, light-weight and portable runner for MSTest tests available in the .NET CLI, Visual Studio, and more!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/introducing-ms-test-runner/\">Introducing the MSTest Runner &#8211; CLI, Visual Studio, &amp; More</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>It is our pleasure to introduce MSTest runner, a new lightweight runner for MSTest tests. This new runner makes tests more portable and reliable, makes tests run faster and is extensible to provide you with an a la carte testing experience to add the tools you need to be successful.</p>\n<h2 id=\"what-is-it\">What is it?</h2>\n<p>MSTest runner is a way to build and run MSTest tests as an independent portable executable. A simple console application is used to host and run your tests, so you don’t need  any external tools such as <code>vstest.console</code>, <code>dotnet test</code>, or <code>Visual Studio</code>, to run your tests. Making this the perfect tool for authoring tests for devices with limited power or storage.</p>\n<h2 id=\"installing-mstest-runner\">Installing MSTest runner</h2>\n<p>Developers of all experience levels and projects of any size can take advantage of the speed and portability of the new MSTest runner. We welcome you to try it out!</p>\n<p>MSTest runner comes bundled with <code>MSTest.TestAdapter</code> NuGet package since version <code>3.2.0</code>.</p>\n<p>Enabling it for your project is as simple as installing the updated package and setting two MSBuild properties, <code>&lt;EnableMSTestRunner&gt;</code> and <code>&lt;OutputType&gt;</code>:</p>\n<pre><code class=\"language-xml\">&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\r\n\r\n  &lt;PropertyGroup&gt;\r\n    &lt;!-- Enable the MSTest runner, this is an opt-in feature --&gt;\r\n    &lt;EnableMSTestRunner&gt;true&lt;/EnableMSTestRunner&gt;\r\n    &lt;!-- We need to produce an executable and not a DLL --&gt;\r\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\r\n\r\n    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\r\n    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\r\n    &lt;Nullable&gt;enable&lt;/Nullable&gt;\r\n\r\n    &lt;IsPackable&gt;false&lt;/IsPackable&gt;\r\n  &lt;/PropertyGroup&gt;\r\n\r\n  &lt;ItemGroup&gt;\r\n    &lt;!-- \r\n      MSTest meta package is the recommended way to reference MSTest.\r\n      It's equivalent to referencing:\r\n          Microsoft.NET.Test.Sdk\r\n          MSTest.TestAdapter\r\n          MSTest.TestFramework\r\n          MSTest.Analyzers\r\n    --&gt;    \r\n    &lt;PackageReference Include=\"MSTest\" Version=\"3.2.0\" /&gt;\r\n\r\n  &lt;/ItemGroup&gt;\r\n\r\n&lt;/Project&gt;</code></pre>\n<p>After making these changes, re-build your test project and your tests will create an executable that directly runs your tests:</p>\n<p><img decoding=\"async\" src=\"./passing-tests.png\" alt=\"Test summary showing 1 passed test.\" /></p>\n<p><a href=\"https://github.com/microsoft/testfx/tree/main/samples/mstest-runner/Simple1\">Full example &#8211; Simple1</a></p>\n<p>In the screenshot above you see that we did not need to run <code>dotnet test</code>, use <code>vstest.console</code> or run in <code>Visual Studio</code> to run our tests. Our tests are just a normal console application that discovers and runs tests.</p>\n<p>That said the runner does integrate with <code>dotnet test</code>, <code>vstest.console</code>, <code>Visual Studio Test Explorer</code> and <code>Visual Studio Code Test Explorer</code> to provide you with the same experience you are used to. See our <a href=\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-mstest-runner-intro\">documentation to learn more</a>.</p>\n<h2 id=\"benefits-of-using-the-runner-vs-vstest\">Benefits of using the runner vs. VSTest</h2>\n<h3 id=\"portability\">Portability</h3>\n<p>Running tests directly from an executable removes a lot of the complexity and infrastructure that is normally needed to run tests. Because test projects are no longer special, you can use the existing <code>dotnet</code> tooling to do interesting things with your test projects, such as building them as self-contained:</p>\n<pre><code class=\"language-cli\">dotnet publish --runtime win-x64 --self-contained</code></pre>\n<p>The example above will publish the test project together with the runtime it needs to run. This allows you to move the project to a computer that does not have this runtime and run your tests on multiple computers without additional setup.</p>\n<p>Or you can use this capability to create a zip file after every failed test run, to reproduce the failure locally the same way it failed on your CI server and get an easy way to debug your failed runs interactively.</p>\n<p>Here is another example of running tests against a dotnet application hosted in a docker container that has no dotnet SDK available. A scenario that is a frequent stumbling point for our advanced users:</p>\n<pre><code class=\"language-cli\">RunInDocker&gt; docker build . -t my-server-tests\r\n\r\nRunInDocker&gt; docker run my-server-tests\r\nMicrosoft(R) Testing Platform Execution Command Line Tool\r\nVersion: 1.0.0-preview.23622.9+fe96e7475 (UTC 2023/12/22)\r\nRuntimeInformation: linux-x64 - .NET 8.0.0\r\nCopyright(c) Microsoft Corporation.  All rights reserved.\r\ninfo: Microsoft.Hosting.Lifetime[14]\r\n      Now listening on: http://[::]:8080\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /test/test\r\ninfo: Microsoft.AspNetCore.Hosting.Diagnostics[1]\r\n      Request starting HTTP/1.1 GET http://localhost:8080/hello - - -\r\ninfo: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]\r\n      Executing endpoint 'HTTP: GET /hello'\r\ninfo: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\r\n      Executed endpoint 'HTTP: GET /hello'\r\ninfo: Microsoft.AspNetCore.Hosting.Diagnostics[2]\r\n      Request finished HTTP/1.1 GET http://localhost:8080/hello - 200 - text/plain;+charset=utf-8 73.5556ms\r\nPassed! - Failed: 0, Passed: 1, Skipped: 0, Total: 1, Duration: 1.7s - MyServer.Tests.dll (linux-x64 - .NET 8.0.0)</code></pre>\n<p><a href=\"https://github.com/microsoft/testfx/tree/main/samples/mstest-runner/RunInDocker\">Full example &#8211; RunInDocker</a></p>\n<p>Another advantage of MSTest runner portability is that you can now easily debug your tests as you would do for any regular executable. For example, in <code>Visual Studio</code> you can now simply:</p>\n<ol>\n<li>Navigate the test project you want to run in Solution Explorer, right select it and select <strong>Set as Startup Project</strong>.</li>\n<li>Navigate to the test you want to debug and add a breakpoint</li>\n<li>Select <strong>Debug</strong> &gt; <strong>Start Debugging</strong> (or use <kbd>F5</kbd>) to run the selected test project.</li>\n</ol>\n<p>You can also use <code>--filter</code> to filter down to the method or methods you want to debug to speed-up debugging experience. For example, <code>--filter MSTestNamespace.UnitTest1.TestMethod2</code> to allow running (debugging) only the test method <code>TestMethod2</code> from the class <code>UnitTest1</code> in namespace <code>MSTestNamespace</code>. You can find more information about available filters at <a href=\"https://learn.microsoft.com/dotnet/core/testing/selective-unit-tests\">text</a>.\nHere is an example of a <code>launchSettings.json</code>:</p>\n<pre><code class=\"language-json\">{\r\n  \"profiles\": {\r\n    \"MSTestProject\": {\r\n      \"commandName\": \"Project\",\r\n      \"commandLineArgs\": \"--filter MSTestNamespace.UnitTest1.TestMethod2\"\r\n    }\r\n  }\r\n}</code></pre>\n<p>Finally, we are looking into making MSTest NativeAOT compatible, to let you test your applications in NativeAOT mode. To be able to do this we need to significantly change the internals of MSTest, please <a href=\"https://github.com/microsoft/testfx/issues/1837\">add a comment or thumbs up on our GitHub issue</a>, if you find this useful.</p>\n<h3 id=\"performance\">Performance</h3>\n<p>MSTest runner uses one less process, and one less process-hop to run tests (when compared to <code>dotnet test</code>), to save resources on your build server.</p>\n<p>It also avoids the need for inter-process serialized communication and relies on modern .NET APIs to increase parallelism and reduce footprint.</p>\n<p>In the internal Microsoft projects that switched to use the new MSTest runner, we saw massive savings in both CPU and memory. Some projects seen were able to complete their tests 3 times as fast, while using 4 times less memory when running with <code>dotnet test</code>.</p>\n<p>Even though those numbers might be impressive, there are much bigger gains to get when you enable parallel test runs in your test project. To help with this, we added a new set of analyzers for <a href=\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-mstest-analyzers\">MSTest code analysis</a> that promote good practice and correct setup of your tests.</p>\n<h3 id=\"reliability\">Reliability</h3>\n<p>MSTest runner is setting new defaults, that are safer and make it much harder for you to accidentally miss running any of your tests. When making decisions we always err on the side of being stricter, and let you choose when you don’t need this strictness.</p>\n<p>For example, MSTest runner will fail by default when there are zero tests run from a project, this can be controlled by <code>--minimum-expected-tests</code>, which defaults to <code>1</code>. You can set it to <code>0</code>, to not fail on you when there are no tests, but you can easily set it to a higher number to prevent regressions:</p>\n<pre><code class=\"language-cli\">C:\\p\\testfx\\samples\\mstest-runner\\Simple1&gt; C:\\p\\testfx\\artifacts\\bin\\Simple1\\Debug\\net8.0\\Simple1.exe --minimum-expected-tests 10\r\nMicrosoft(R) Testing Platform Execution Command Line Tool\r\nVersion: 1.0.0-preview.23622.9+fe96e7475 (UTC 2023/12/22)\r\nRuntimeInformation: win-x64 - .NET 8.0.0\r\nCopyright(c) Microsoft Corporation.  All rights reserved.\r\nMinimum expected tests policy violation, tests ran 1, minimum expected 10 - Failed: 0, Passed: 1, Skipped: 0, Total: 1, Duration: 153ms - Simple1.dll (win-x64 - .NET 8.0.0)</code></pre>\n<p>But this is not the only reliability improvement. We wrote MSTest runner from ground up to make it more reliable.</p>\n<p>MSTest runner, thanks to its new architecture, doesn’t rely on folder scanning, dynamic loading, or reflection to detect and load extensions. This makes it easier to have the same behavior on local and in CI, and it reduces the time between starting the test application and running the first test significantly.</p>\n<p>The runner is designed to be async and parallelizable all the way, preventing some of the hangs or deadlocks that can be noticed when using VSTest.</p>\n<p>The runner does not detect the target framework or the platform, or any other .NET configuration. It fully relies on the .NET platform to do that. This avoids duplication of logic, and avoids many edge cases that would break your tests when the rules suddenly change.</p>\n<h3 id=\"extensibility\">Extensibility</h3>\n<p>MSTest runner is based on a new barebone testing platform and an extensibility model that makes it easy to extend or override many aspects of the test execution.</p>\n<p>It is now easy to provide your own report generator, test orchestration, loggers or even to increase the available command line options.</p>\n<p>Microsoft is providing a <a href=\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-mstest-runner-extensions\">list of optional extensions</a> for you to be equipped with all you need to run and troubleshoot your tests.</p>\n<p>We will continue to work on providing more extensions and features to enrich your testing experience. If you have specific needs or would like to help with growing the library extensions, please reach out to us.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>MSTest runner is a performant, hostable, extensible, reliable, and integrated solution for running your MSTest tests.\nWhether you are a tech enthusiast, you are facing some issues with VSTest or simply curious, we welcome you to try it out and share your feedback below this article.</p>\n<h2 id=\"special-thanks\">Special thanks</h2>\n<p>We would like to thank the team, whose relentless efforts and unwavering commitment brought this feature to fruition.</p>\n<p>Additionally, we would like to express our heartfelt gratitude to the internal teams who helped dogfood and support this initiative.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/introducing-ms-test-runner/\">Introducing the MSTest Runner &#8211; CLI, Visual Studio, &amp; More</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/introducing-ms-test-runner/feed/","slash:comments":"16"},{"title":".NET Framework January 2024 Cumulative Update Preview","link":"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-cumulative-update-preview/","comments":"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-cumulative-update-preview/#comments","dc:creator":{"#cdata-section":"Salini Agarwal"},"pubDate":"Tue, 23 Jan 2024 22:41:45 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Framework"},{"#cdata-section":"ASP.NET"},{"#cdata-section":"Maintenance & Updates"},{"#cdata-section":".net framework"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=50185"},"description":{"#cdata-section":"<p>January 2024 Cumulative Update Preview Updates for .NET Framework.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-cumulative-update-preview/\">.NET Framework January 2024 Cumulative Update Preview</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>Today, we are releasing the January 2024 Cumulative Update Preview Updates for .NET Framework.  </p>\n<h3 id=\"quality-and-reliability\"> Quality and Reliability</h3>\n<p>This release contains the following quality and reliability improvements.</p>\n<h5 id=\"asp-net\"> ASP.NET <span style=\"font-size: 12pt\"></span></h5>\n<ul>\n<li> Addresses an issue with &#8220;System.ArgumentException: Illegal characters in path&#8221; in some ASP.Net MVC requests.</li>\n</ul>\n<h5 id=\"net-libraries\"> .NET Libraries  <span style=\"font-size: 12pt\"></span></h5>\n<ul>\n<li>Addresses an issue where version of the OSS zlib library is out of date.</li>\n</ul>\n<h3> <a id=\"user-content-getting-the-update\" class=\"anchor\" href=\"#getting-the-update\"></a>Getting the Update</h3>\n<p>The Cumulative Update Preview is available via Windows Update and <a id=\"user-content-microsoft-update-catalog\" class=\"anchor\" href=\"#microsoft-update-catalog\"></a>Microsoft Update Catalog.</p>\n<p>Customers using Windows 11, version 22H2 and Windows 11, version 23H2, you will now find .NET Framework updates on the <strong> Settings &gt; Windows Update &gt; Advanced options &gt; Optional updates </strong> page.   </p>\n<p>Advanced system administrators can also take use of the below direct Microsoft Update Catalog download links to .NET Framework-specific updates. Before applying these updates, please ensure that you carefully review the .NET Framework version applicability, to ensure that you only install updates on systems where they apply. </p>\n<p>The following table is for Windows 10+ versions.  </p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"8px\">\n<thead>\n<tr>\n<th>\n        Product Version\n      </th>\n<th colspan=\"2\">\n        Cumulative Update\n      </th>\n</tr>\n</thead>\n<tbody>\n<tr bgcolor=\"#F0F0F0\">\n<td>\n        <strong>Windows 11, version 23H2</strong>\n      </td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>\n       .NET Framework 3.5, 4.8.1\n      </td>\n<td>\n       <a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5034467\" rel=\"nofollow\">Catalog</a>\n      </td>\n<td>\n       <a href=\"https://support.microsoft.com/kb/5034467\" rel=\"nofollow\">5034467</a>\n      </td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td>\n        <strong>Windows 11, version 22H2</strong>\n      </td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>\n       .NET Framework 3.5, 4.8.1\n      </td>\n<td>\n       <a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5034467\" rel=\"nofollow\">Catalog</a>\n      </td>\n<td>\n       <a href=\"https://support.microsoft.com/kb/5034467\" rel=\"nofollow\">5034467</a>\n      </td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td>\n        <strong>Windows 10, version 22H2</strong>\n      </td>\n<td></td>\n<td>\n        <strong><a href=\"https://support.microsoft.com/kb/5034582\" rel=\"nofollow\">5034582</a></strong>\n      </td>\n</tr>\n<tr>\n<td>\n       .NET Framework 3.5, 4.8\n      </td>\n<td>\n       <a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5034468\" rel=\"nofollow\">Catalog</a>\n      </td>\n<td>\n       <a href=\"https://support.microsoft.com/kb/5034468\" rel=\"nofollow\">5034468</a>\n      </td>\n</tr>\n<tr>\n<td>\n       .NET Framework 3.5, 4.8.1\n      </td>\n<td>\n       <a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5034466\" rel=\"nofollow\">Catalog</a>\n      </td>\n<td>\n       <a href=\"https://support.microsoft.com/kb/5034466\" rel=\"nofollow\">5034466</a>\n      </td>\n</tr>\n</tbody>\n</table>\n<p>The operating system row lists a KB which will be used for update offering purposes. When the operating system KB is offered, the applicability logic will determine the specific .NET Framework update(s) will be installed. Updates for individual .NET Framework versions will be installed based on the version of .NET Framework that is already present on the device. Because of this the operating system KB is not expected to be listed as installed updates on the device. The expected update to be installed are the .NET Framework specific version updates listed in the table above.</p>\n<p>    </p>\n<h3 id=\"previous-monthly-rollups\"> Previous Monthly Rollups </h3>\n<p>The last few .NET Framework Monthly updates are listed below for your convenience:  </p>\n<ul>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-security-and-quality-rollup/\" rel=\"nofollow\">.NET Framework January 2024 Security and Quality Rollup</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-november-2023-security-and-quality-rollup/\" rel=\"nofollow\">.NET Framework November 2023 Security and Quality Rollup</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/net-framework-october-2023-cumulative-update-preview/\" rel=\"nofollow\">.NET Framework October 2023 Cumulative Update Preview</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2023-security-and-quality-rollup-updates/\" rel=\"nofollow\">.NET Framework October 2023 Security and Quality Rollup Updates</a></li>\n</ul>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-cumulative-update-preview/\">.NET Framework January 2024 Cumulative Update Preview</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-cumulative-update-preview/feed/","slash:comments":"2"},{"title":"Sortable Lists for Blazor using a SortableJS Component","link":"https://devblogs.microsoft.com/dotnet/introducing-blazor-sortable/","comments":"https://devblogs.microsoft.com/dotnet/introducing-blazor-sortable/#comments","dc:creator":{"#cdata-section":"Burke Holland"},"pubDate":"Fri, 12 Jan 2024 18:05:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":"ASP.NET"},{"#cdata-section":"Blazor"},{"#cdata-section":"C#"},{"#cdata-section":"aspnet"},{"#cdata-section":"Csharp"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=49972"},"description":{"#cdata-section":"<p>Blazor Sortable is a new a open source community Blazor component for creating sortable lists of items using SortableJS.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/introducing-blazor-sortable/\">Sortable Lists for Blazor using a SortableJS Component</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>A common feature for web apps is sortable lists. <a href=\"https://github.com/SortableJS/Sortable\">SortableJS</a> is one of my favorite JavaScript libraries and I missed it when developing with Blazor. To remedy this, I decided to wrap SortableJS to make it a Blazor component, named <a href=\"https://blazorsortable.theurlist.com\">Bazor Sortable</a>, that I have made open source on GitHub that I think you will love. In this post I will walk you through how to add it into your own Blazor web apps. </p>\n<blockquote>\n<p>Note: Blazor Sortable is an open-source community component and not an official component from Microsoft. The Fluent UI for Blazor team is working on integrating a sortable component in an upcoming release of Fluent UI for Blazor. You can try the <a href=\"https://black-pebble-0dc79cb03-1334.westeurope.3.azurestaticapps.net/SortableList\">Fluent UI Sortable Demo</a> today.</p>\n</blockquote>\n<p>Check the demo out here: <a href=\"https://blazorsortable.theurlist.com\">https://blazorsortable.theurlist.com</a></p>\n<p><img decoding=\"async\" src=\"./simple-list.gif\" alt=\"A screenshot of the blazor sortable demos\" /></p>\n<p>Every Friday, <a href=\"https://twitter.com/jongalloway\">Jon Galloway</a> (you&#8217;ve never heard of him but he&#8217;s cool trust) and I work on rebuilding a real app called <a href=\"https://theurlist.com\">theurlist.com</a> in Blazor. The stream is called &#8220;<a href=\"https://dotnet.microsoft.com/live/burke-learns-blazor\">Burke Learns Blazor</a>&#8221; on Twitch and .NET YouTube (<a href=\"https://www.youtube.com/@dotnet/\">Like and Subscribe!</a>). And we&#8217;d love for you to join us. Mostly because we need all the help we can get with this thing because I have no idea what I&#8217;m doing.</p>\n<p>We ended up needing a sortable list component for this rebuild, and while there are a few &#8220;Blazor Sortable&#8221; examples out there, I kinda had my heart set on <a href=\"https://github.com/SortableJS/Sortable\">SortableJS</a>. SortableJS is a brilliant library for building sortable lists of items with virtually every feature you could need &#8211; sorting, sorting between lists, cloning items, filtering, custom animation easing, lumbar support. OK &#8211; not that last one, but that&#8217;s, like, that&#8217;s the only thing it doesn&#8217;t have.</p>\n<p>So with a little help from Steve Sanderson, we built a simple abstraction on SortableJS that you can drop in and use in your own apps. Let&#8217;s take a look at how to use and customize Blazor Sortable for your own Blazor apps.</p>\n<h3 id=\"using-blazor-sortable\">Using Blazor Sortable</h3>\n<p>The GitHub repo for Blazor Sortable contains the source code for the sortable list as well as demos. For your own project, all you need is the <code>Shared/SortableList.razor</code>, <code>Shared/SortableList.razor.css</code> and <code>Shared/SortableList.razor.js</code> files.</p>\n<p><img decoding=\"async\" src=\"./sortable-components.png\" alt=\"a screenshot of the files needed for Blazor Sortable in GitHub\" /></p>\n<p>The <code>SortableList</code> component is a generic component that takes a list of items and <code>SortableItemTemplate</code> that defines how to render each item in the sortable list. For instance, let&#8217;s say that you have a list of books that looks like this&#8230;</p>\n<pre><code class=\"language-csharp\">public class Book\n{\n    public string Title { get; set; } = \"\";\n    public string Author { get; set; }  = \"\";\n    public int Year { get; set; }\n}\n\npublic List&lt;Book&gt; books = new List&lt;Book&gt;\n{\n    new Book { Title = \"The Very Hungry Caterpillar\", Author = \"Eric Carle\", Year = 1969 },\n    new Book { Title = \"Where the Wild Things Are\", Author = \"Maurice Sendak\", Year = 1963 },\n    new Book { Title = \"Goodnight Moon\", Author = \"Margaret Wise Brown\", Year = 1947 },\n    new Book { Title = \"The Cat in the Hat\", Author = \"Dr. Seuss\", Year = 1957 },\n    new Book { Title = \"Charlotte's Web\", Author = \"E.B. White\", Year = 1952 },\n    new Book { Title = \"Harry Potter and the Sorcerer's Stone\", Author = \"J.K. Rowling\", Year = 1997 },\n    new Book { Title = \"The Lion, the Witch and the Wardrobe\", Author = \"C.S. Lewis\", Year = 1950 },\n    new Book { Title = \"Matilda\", Author = \"Roald Dahl\", Year = 1988 },\n    new Book { Title = \"The Giving Tree\", Author = \"Shel Silverstein\", Year = 1964 },\n    new Book { Title = \"Oh, the Places You'll Go!\", Author = \"Dr. Seuss\", Year = 1990 }\n};</code></pre>\n<p>You can render this list in a <code>SortableList</code> like this&#8230;</p>\n<pre><code class=\"language-html\">&lt;div&gt;\n    &lt;SortableList Items=\"books\" Context=\"book\"&gt;\n        &lt;SortableItemTemplate&gt;\n            &lt;div class=\"book\"&gt;\n                &lt;p&gt;@book.Title&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/SortableItemTemplate&gt;\n    &lt;/SortableList&gt;\n&lt;/div&gt;</code></pre>\n<p><img decoding=\"async\" src=\"./sortable-book-example.png\" alt=\"a screenshot of a sortable list of books\" /></p>\n<p>The <code>SortableList</code> component will render the list of items using the <code>SortableItemTemplate</code> and then make the list sortable using SortableJS. The <code>Context</code> parameter is used to define the name of the variable that will be used to represent each item in the list. In this case, the <code>Context</code> is <code>book</code> and so each item in the list will be represented by a variable called <code>book</code>.</p>\n<p>However, if you were to try and drag and drop items around at this point, you would notice that whenever you drop one, it just goes back to where it was before. That&#8217;s because we haven&#8217;t told the <code>SortableList</code> what to do when the list is sorted. We do that by handling the <code>OnUpdate</code> event and doing the sorting ourselves.</p>\n<pre><code class=\"language-html\">&lt;div&gt;\n    &lt;SortableList Items=\"books\" Context=\"book\" OnUpdate=\"@SortList\"&gt;\n        &lt;SortableItemTemplate&gt;\n            &lt;div class=\"book\"&gt;\n                &lt;p&gt;@book.Title&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/SortableItemTemplate&gt;\n    &lt;/SortableList&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class=\"language-csharp\">...\npublic void SortList((int oldIndex, int newIndex) indices)\n{\n    // deconstruct the tuple\n    var (oldIndex, newIndex) = indices;\n\n    var items = this.books;\n    var itemToMove = items[oldIndex];\n    items.RemoveAt(oldIndex);\n\n    if (newIndex &lt; items.Count)\n    {{\n        items.Insert(newIndex, itemToMove);\n    }}\n    else\n    {{\n        items.Add(itemToMove);\n    }}\n}</code></pre>\n<p>The <code>OnUpdate</code> event handler will be called whenever the list is sorted. It will pass a tuple containing the old index and the new index of the item that was moved. In the <code>SortList</code> method, we deconstruct the tuple into two variables and then use those to move the item in the list. </p>\n<p>It&#8217;s SUPER important that you never ever mutate DOM that Blazor controls. Blazor keeps an internal copy of the DOM and if you change it with something like JavaScript, you will get bizarre results since the page state will be out of sync with Blazor&#8217;s internal state. So what we do behind the scenes here is cancel the JavaScript move so that the item doesn&#8217;t actually move on the page. Then we move the item in the list and Blazor will re-render the list with the new order.</p>\n<h3 id=\"a-more-complex-example\">A More Complex Example</h3>\n<p>SortableJS is a very powerful library and it can do a lot more than just sort lists. It can also sort between lists, clone items, filter items, and more. The <code>SortableList</code> component supports many of these features. Let&#8217;s take a look at a more complex example &#8211; sorting between two lists&#8230;</p>\n<pre><code class=\"language-html\">&lt;div&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"columns\"&gt;\n            &lt;div class=\"column\"&gt;\n                &lt;h3&gt;Books&lt;/h3&gt;\n                &lt;SortableList Items=\"books\" Context=\"book\" OnRemove=\"@AddToFavoriteList\" Group=\"favorites\"&gt;\n                    &lt;SortableItemTemplate&gt;\n                        &lt;div class=\"book\"&gt;\n                            &lt;p&gt;@book.Title&lt;/p&gt;\n                        &lt;/div&gt;\n                    &lt;/SortableItemTemplate&gt;\n                &lt;/SortableList&gt;\n            &lt;/div&gt;\n            &lt;div class=\"column\"&gt;\n                &lt;h3&gt;Favorite Books&lt;/h3&gt;\n                &lt;SortableList Items=\"favoriteBooks\" Context=\"book\" OnRemove=\"@RemoveFromFavoriteList\" Group=\"favorites\"&gt;\n                    &lt;SortableItemTemplate&gt;\n                        &lt;div class=\"book\"&gt;\n                            &lt;p&gt;@book.Title&lt;/p&gt;\n                        &lt;/div&gt;\n                    &lt;/SortableItemTemplate&gt;\n                &lt;/SortableList&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>In this example, we have two lists &#8211; a list of all books and a list of favorite books. They are linked together via the <code>Group</code> property. </p>\n<p>We want to be able to drag and drop books from the list of all books to the list of favorite books. To do that, we need to handle the <code>OnRemove</code> event for both lists. </p>\n<pre><code class=\"language-csharp\">public void AddToFavoriteList((int oldIndex, int newIndex) indices)\n{\n    var (oldIndex, newIndex) = indices;\n\n    var book = books[oldIndex];\n    favoriteBooks.Insert(newIndex, book);\n    books.RemoveAt(oldIndex);\n}\n\npublic void RemoveFromFavoriteList((int oldIndex, int newIndex) indices)\n{\n    var (oldIndex, newIndex) = indices;\n\n    var book = favoriteBooks[oldIndex];\n    books.Insert(newIndex, book);\n    favoriteBooks.RemoveAt(oldIndex);\n}</code></pre>\n<p><img decoding=\"async\" src=\"./blazor-sortable.gif\" alt=\"a screenshot of multiple lists linked together\" /></p>\n<h3 id=\"styling-the-sortablelist\">Styling the SortableList</h3>\n<p>By default, the <code>SortableList</code> contains some default styling that hides the &#8220;ghost&#8221; element while dragging. This will give you a gap between items as you are dragging. Without this style change, the item itself is shown as the drop target. This is a little weird because it means that the item you are dragging is also the item you are dropping on. But if that&#8217;s your jam, you can just override the styles in the <code>SortableList.razor.css</code> file or just don&#8217;t include it at all.</p>\n<p>Since all of the content rendered inside of a <code>SortableList</code> is rendered inside of a <code>SortableItemTemplate</code> child, you always have to use the &#8220;::deep&#8221; modifier for any changes to take effect. </p>\n<p>If you style the <code>SortableList</code> from a parent page/component (i.e. Index.razor.css) you MUST wrap the <code>SortableList</code> in a container element and use the &#8220;::deep&#8221; modifier as well. If you don&#8217;t do this, your styles won&#8217;t take effect and you&#8217;ll be sad and confused and mad at me for making this component. This is a Blazor thing, not a SortableJS thing. You can read more about scope styles in the <a href=\"https://learn.microsoft.com/aspnet/core/blazor/components/css-isolation?view=aspnetcore-7.0#child-component-support\">ASP.NET Core docs</a>.</p>\n<p>I feel like nobody is going to read that last paragraph and there will be much wailing and gnashing of teeth. But I tried. I&#8217;m sorry in advance.</p>\n<h2 id=\"why-not-html5-drag-and-drop\">Why not HTML5 Drag and Drop?</h2>\n<p>Fair question and one that I certainly looked into before going to a JavaScript solution. The long and short of it is that the native HTML5 support for drag and drop simply isn&#8217;t robust enough for a decent sortable. For instance, there is no way to style much of the behaviour of the drag and drop. It looks&#8230;goofy&#8230;and there isn&#8217;t anything you can really do about it. It also has <a href=\"https://caniuse.com/?search=drag\">pretty flaky support</a> across browsers. There are some essential properties that only work in Chrome.</p>\n<p>All of that said, SortableJS actually will try and use HTML5 drag and drop and fallback to a JavaScript solution on platforms like iOS. However, you still lose control over the styling and you get the goofy looking drag and drop. So I&#8217;ve got HTML5 <strong>turned off</strong> on the <code>SortableList</code>. If you want it back on, go into the <code>SortableList.razor.razor.js</code> file and remove the <code>forceFallback: true</code> attribute. I should probably make this a setting at some point.</p>\n<h2 id=\"get-blazor-sortable\">Get Blazor Sortable</h2>\n<p>Check out <a href=\"https://blazorsortable.theurlist.com\">Blazor Sortable</a> and let us know what you think! You can do a lot with it, including cloning items, disabling sorting on certain items, specifying drag handles and more. We haven&#8217;t implemented every single feature of SortableJS. Yet. Pull requests are welcome! <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png\" alt=\"😉\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n<blockquote>\n<p>Blazor Sortable is an open-source community project. </p>\n</blockquote>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/introducing-blazor-sortable/\">Sortable Lists for Blazor using a SortableJS Component</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/introducing-blazor-sortable/feed/","slash:comments":"6"},{"title":".NET Framework January 2024 Security and Quality Rollup","link":"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-security-and-quality-rollup/","comments":"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-security-and-quality-rollup/#comments","dc:creator":{"#cdata-section":"Salini Agarwal"},"pubDate":"Tue, 09 Jan 2024 22:14:26 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Framework"},{"#cdata-section":"Maintenance & Updates"},{"#cdata-section":".net framework"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=49928"},"description":{"#cdata-section":"<p>January 2024 Security and Quality Rollup Updates for .NET Framework</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-security-and-quality-rollup/\">.NET Framework January 2024 Security and Quality Rollup</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p><em><strong>[Revised</strong> </em><strong><em>01/24/2024</em></strong><b><i>] </i></b><em>To add missing product versions of Windows Server 2012 and Windows Server 2012 R2.</em></p>\n<p><em><strong>[Revised 01/16/2024] </strong>To fix the typo and link for CVE.</em></p>\n<p>Today, we are releasing the January 2024 Security and Quality Rollup Updates for .NET Framework.</p>\n<h3 id=\"security\">Security</h3>\n<h5 id=\"cve-2023-36042-net-framework-denial-of-service-vulnerability\">CVE-2023-36042 – .NET Framework Denial of Service Vulnerability</h5>\n<p>This security update addresses a security feature bypass vulnerability detailed in <a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2023-36042\" rel=\"nofollow\">CVE 2023-36042</a>.</p>\n<h5 id=\"cve-2024-0056-net-framework-security-feature-bypass-vulnerability\">CVE-2024-0056 – .NET Framework Security Feature Bypass Vulnerability</h5>\n<p>This security update addresses a security feature bypass vulnerability detailed in <a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2024-0056\" rel=\"nofollow\">CVE 2024-0056</a>.</p>\n<h5 id=\"cve-2024-0057-net-framework-security-feature-vulnerability\">CVE-2024-0057 – .NET Framework Security Feature Vulnerability</h5>\n<p>This security update addresses an elevation of privilege vulnerability detailed in <a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2024-0057\" rel=\"nofollow\">CVE 2024-0057</a>.</p>\n<h5 id=\"cve-2024-21312-net-framework-denial-of-service-vulnerability\">CVE-2024-21312 – .NET Framework Denial of Service Vulnerability</h5>\n<p>This security update addresses a denial of service vulnerability detailed in <a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2024-21312\" rel=\"nofollow\">CVE 2024-21312</a>.</p>\n<h5 id=\"net-framework-remote-code-execution-vulnerability\">.NET Framework Remote Code Execution Vulnerability</h5>\n<p>This security update addresses a remote code execution vulnerability to HTTP .NET remoting server channel chain.</p>\n<h3 id=\"quality-and-reliability\">Quality and Reliability</h3>\n<p>There are no new Quality and Reliability Improvements in this update.</p>\n<h3><a id=\"user-content-getting-the-update\" class=\"anchor\" href=\"#getting-the-update\"></a>Getting the Update</h3>\n<p>The Security and Quality Rollup is available via Windows Update, Windows Server Update Services, and Microsoft Update Catalog. The Security Only Update is available via Windows Server Update Services and Microsoft Update Catalog.</p>\n<h5><a id=\"user-content-microsoft-update-catalog\" class=\"anchor\" href=\"#microsoft-update-catalog\"></a>Microsoft Update Catalog</h5>\n<p>You can get the update via the Microsoft Update Catalog. For Windows 10, NET Framework 4.8 updates are available via Windows Update, Windows Server Update Services, Microsoft Update Catalog. Updates for other versions of .NET Framework are part of the Windows 10 Monthly Cumulative Update.</p>\n<p>**Note**: Customers that rely on Windows Update and Windows Server Update Services will automatically receive the .NET Framework version-specific updates. Advanced system administrators can also take use of the below direct Microsoft Update Catalog download links to .NET Framework-specific updates. Before applying these updates, please ensure that you carefully review the .NET Framework version applicability, to ensure that you only install updates on systems where they apply.</p>\n<p>The following table is for Windows 10 and Windows Server 2016+ versions.</p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"8px\">\n<thead>\n<tr>\n<th>Product Version</th>\n<th colspan=\"2\">Cumulative Update</th>\n</tr>\n</thead>\n<tbody>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Microsoft server operating system, version 23H2</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033917\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033917\" rel=\"nofollow\">5033917</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 11, version 22H2 and Windows 11, version 23H2</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033920\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033920\" rel=\"nofollow\">5033920</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 11, version 21H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5034276\" rel=\"nofollow\">5034276</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033912\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033912\" rel=\"nofollow\">5033912</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033919\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033919\" rel=\"nofollow\">5033919</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Microsoft server operating system, version 22H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5034272\" rel=\"nofollow\">5034272</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033914\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033914\" rel=\"nofollow\">5033914</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033922\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033922\" rel=\"nofollow\">5033922</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Microsoft server operating system version 21H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5034272\" rel=\"nofollow\">5034272</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"https://www.catalog.update.microsoft.com/Search.aspx?q=5034272\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033914\" rel=\"nofollow\">5033914</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033922\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033922\" rel=\"nofollow\">5033922</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10, version 22H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5034275\" rel=\"nofollow\">5034275</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5034275\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033909\" rel=\"nofollow\">5033909</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033918\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033918\" rel=\"nofollow\">5033918</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10, version 21H2</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5034274\" rel=\"nofollow\">5034274</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5034274\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033909\" rel=\"nofollow\">5033909</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8.1</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033918\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033918\" rel=\"nofollow\">5033918</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10 1809 and Windows Server 2019</strong></td>\n<td></td>\n<td><strong><a href=\"https://support.microsoft.com/kb/5034273\" rel=\"nofollow\">5034273</a></strong></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.7.2</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033904\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033904\" rel=\"nofollow\">5033904</a></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033911\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033911\" rel=\"nofollow\">5033911</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10 1607 and Windows Server 2016</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.6.2, 4.7, 4.7.1, 4.7.2</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5034119\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5034119\" rel=\"nofollow\">5034119</a></td>\n</tr>\n<tr>\n<td>.NET Framework 4.8</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033910\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5033910\" rel=\"nofollow\">5033910</a></td>\n</tr>\n<tr bgcolor=\"#F0F0F0\">\n<td><strong>Windows 10 1507</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>.NET Framework 3.5, 4.6, 4.6.2</td>\n<td><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5034134\" rel=\"nofollow\">Catalog</a></td>\n<td><a href=\"https://support.microsoft.com/kb/5034134\" rel=\"nofollow\">5034134</a></td>\n</tr>\n</tbody>\n</table>\n<p>The following table is for earlier Windows and Windows Server versions.</p>\n<table style=\"width: 41.8974%; height: 802px;\" border=\"1\" cellspacing=\"0\" cellpadding=\"8px\">\n<thead>\n<tr style=\"height: 67px;\">\n<th style=\"height: 67px; width: 43.8988%;\">Product Version</th>\n<th style=\"height: 67px; width: 30.9524%;\" colspan=\"2\">Security and Quality Rollup</th>\n<th style=\"height: 67px; width: 24.8512%;\" colspan=\"2\">Security Only Update</th>\n</tr>\n</thead>\n<tbody>\n<tr style=\"height: 41px;\" bgcolor=\"#F0F0F0\">\n<td style=\"height: 41px; width: 43.8988%;\"><strong>Windows Server 2012 R2</strong></td>\n<td style=\"height: 41px; width: 14.7321%;\"></td>\n<td style=\"height: 41px; width: 16.2202%;\"><strong><a href=\"https://support.microsoft.com/kb/5034279\" rel=\"nofollow\">5034279</a></strong></td>\n</tr>\n<tr style=\"height: 41px;\">\n<td style=\"height: 41px; width: 43.8988%;\">.NET Framework 3.5</td>\n<td style=\"height: 41px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033900\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033900\" rel=\"nofollow\">5033900</a></td>\n</tr>\n<tr style=\"height: 67px;\">\n<td style=\"height: 67px; width: 43.8988%;\">.NET Framework 4.6.2, 4.7, 4.7.1, 4.7.2</td>\n<td style=\"height: 67px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033906\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 67px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033906\" rel=\"nofollow\">5033906</a></td>\n</tr>\n<tr style=\"height: 41px;\">\n<td style=\"height: 41px; width: 43.8988%;\">.NET Framework 4.8</td>\n<td style=\"height: 41px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033915\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033915\" rel=\"nofollow\">5033915</a></td>\n</tr>\n<tr style=\"height: 41px;\" bgcolor=\"#F0F0F0\">\n<td style=\"height: 41px; width: 43.8988%;\"><strong>Windows Server 2012</strong></td>\n<td style=\"height: 41px; width: 14.7321%;\"></td>\n<td style=\"height: 41px; width: 16.2202%;\"><strong><a href=\"https://support.microsoft.com/kb/5034278\" rel=\"nofollow\">5034278</a></strong></td>\n</tr>\n<tr style=\"height: 41px;\">\n<td style=\"height: 41px; width: 43.8988%;\">.NET Framework 3.5</td>\n<td style=\"height: 41px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033897\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033897\" rel=\"nofollow\">5033897</a></td>\n</tr>\n<tr style=\"height: 67px;\">\n<td style=\"height: 67px; width: 43.8988%;\">.NET Framework 4.6.2, 4.7, 4.7.1, 4.7.2</td>\n<td style=\"height: 67px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033905\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 67px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033905\" rel=\"nofollow\">5033905</a></td>\n</tr>\n<tr style=\"height: 41px;\">\n<td style=\"height: 41px; width: 43.8988%;\">.NET Framework 4.8</td>\n<td style=\"height: 41px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033913\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033913\" rel=\"nofollow\">5033913</a></td>\n</tr>\n<tr style=\"height: 41px;\" bgcolor=\"#F0F0F0\">\n<td style=\"height: 41px; width: 43.8988%;\"><strong>Windows Server 2008</strong></td>\n<td style=\"height: 41px; width: 14.7321%;\"></td>\n<td style=\"height: 41px; width: 16.2202%;\"><strong><a href=\"https://support.microsoft.com/kb/5034280\" rel=\"nofollow\">5034280</a></strong></td>\n<td style=\"height: 41px; width: 11.756%;\"></td>\n<td style=\"height: 41px; width: 13.0952%;\"><strong><a href=\"https://support.microsoft.com/kb/5034270\" rel=\"nofollow\">5034270</a></strong></td>\n</tr>\n<tr style=\"height: 41px;\">\n<td style=\"height: 41px; width: 43.8988%;\">.NET Framework 2.0, 3.0</td>\n<td style=\"height: 41px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033898\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033898\" rel=\"nofollow\">5033898</a></td>\n<td style=\"height: 41px; width: 11.756%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033945\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 13.0952%;\"><a href=\"https://support.microsoft.com/kb/5033945\" rel=\"nofollow\">5033945</a></td>\n</tr>\n<tr style=\"height: 41px;\">\n<td style=\"height: 41px; width: 43.8988%;\">.NET Framework 3.5</td>\n<td style=\"height: 41px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5034008\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5034008\" rel=\"nofollow\">5034008</a></td>\n<td style=\"height: 41px; width: 11.756%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033952\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 13.0952%;\"><a href=\"https://support.microsoft.com/kb/5033952\" rel=\"nofollow\">5033952</a></td>\n</tr>\n<tr style=\"height: 41px;\">\n<td style=\"height: 41px; width: 43.8988%;\">.NET Framework 4.6.2</td>\n<td style=\"height: 41px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033907\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033907\" rel=\"nofollow\">5033907</a></td>\n<td style=\"height: 41px; width: 11.756%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033947\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 13.0952%;\"><a href=\"https://support.microsoft.com/kb/5033947\" rel=\"nofollow\">5033947</a></td>\n</tr>\n<tr style=\"height: 41px;\" bgcolor=\"#F0F0F0\">\n<td style=\"height: 41px; width: 43.8988%;\"><strong>Windows Server 2008 R2</strong></td>\n<td style=\"height: 41px; width: 14.7321%;\"></td>\n<td style=\"height: 41px; width: 16.2202%;\"><strong><a href=\"https://support.microsoft.com/kb/5034277\" rel=\"nofollow\">5034277</a></strong></td>\n<td style=\"height: 41px; width: 11.756%;\"></td>\n<td style=\"height: 41px; width: 13.0952%;\"><strong><a href=\"https://support.microsoft.com/kb/5034269\" rel=\"nofollow\">5034269</a></strong></td>\n</tr>\n<tr style=\"height: 41px;\">\n<td style=\"height: 41px; width: 43.8988%;\">.NET Framework 3.5.1</td>\n<td style=\"height: 41px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033899\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033899\" rel=\"nofollow\">5033899</a></td>\n<td style=\"height: 41px; width: 11.756%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033946\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 41px; width: 13.0952%;\"><a href=\"https://support.microsoft.com/kb/5033946\" rel=\"nofollow\">5033946</a></td>\n</tr>\n<tr style=\"height: 67px;\">\n<td style=\"height: 67px; width: 43.8988%;\">.NET Framework 4.6.2, 4.7, 4.7.1, 4.7.2</td>\n<td style=\"height: 67px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033907\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 67px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033907\" rel=\"nofollow\">5033907</a></td>\n<td style=\"height: 67px; width: 11.756%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033947\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 67px; width: 13.0952%;\"><a href=\"https://support.microsoft.com/kb/5033947\" rel=\"nofollow\">5033947</a></td>\n</tr>\n<tr style=\"height: 42px;\">\n<td style=\"height: 42px; width: 43.8988%;\">.NET Framework 4.8</td>\n<td style=\"height: 42px; width: 14.7321%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033916\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 42px; width: 16.2202%;\"><a href=\"https://support.microsoft.com/kb/5033916\" rel=\"nofollow\">5033916</a></td>\n<td style=\"height: 42px; width: 11.756%;\"><a href=\"http://www.catalog.update.microsoft.com/Search.aspx?q=5033948\" rel=\"nofollow\">Catalog</a></td>\n<td style=\"height: 42px; width: 13.0952%;\"><a href=\"https://support.microsoft.com/kb/5033948\" rel=\"nofollow\">5033948</a></td>\n</tr>\n</tbody>\n</table>\n<p>The operating system row lists a KB which will be used for update offering purposes. When the operating system KB is offered, the applicability logic will determine the specific .NET Framework update(s) will be installed. Updates for individual .NET Framework versions will be installed based on the version of .NET Framework that is already present on the device. Because of this the operating system KB is not expected to be listed as installed updates on the device. The expected update to be installed are the .NET Framework specific version updates listed in the table above.</p>\n<p>&nbsp;</p>\n<h5 id=\"previous-monthly-rollups\">Previous Monthly Rollups</h5>\n<p>The last few .NET Framework Monthly updates are listed below for your convenience:</p>\n<ul>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/net-framework-october-2023-cumulative-update-preview/\" rel=\"nofollow\">.NET Framework October 2023 Cumulative Update Preview</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-october-2023-security-and-quality-rollup-updates/\" rel=\"nofollow\">.NET Framework October 2023 Security and Quality Rollup Updates</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-september-2023-cumulative-update-preview/\" rel=\"nofollow\">.NET Framework September 2023 Cumulative Update Preview</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2023-cumulative-update-preview/\" rel=\"nofollow\">.NET Framework August 2023 Cumulative Update Preview</a></li>\n</ul>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-security-and-quality-rollup/\">.NET Framework January 2024 Security and Quality Rollup</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/dotnet-framework-january-2024-security-and-quality-rollup/feed/","slash:comments":"6"},{"title":".NET January 2024 Updates – .NET 8.0.1, 7.0.15, .NET 6.0.26","link":"https://devblogs.microsoft.com/dotnet/january-2024-updates/","comments":"https://devblogs.microsoft.com/dotnet/january-2024-updates/#comments","dc:creator":{"#cdata-section":"Rahul Bhandari (MSFT)"},"pubDate":"Tue, 09 Jan 2024 18:00:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Core"},{"#cdata-section":"Maintenance & Updates"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=49920"},"description":{"#cdata-section":"<p>Check out latest Janaury 2024 updates for .NET 7.0 and .NET 6.0</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/january-2024-updates/\">.NET January 2024 Updates – .NET 8.0.1, 7.0.15, .NET 6.0.26</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>Today, we are releasing the <a href=\"https://github.com/dotnet/announcements/issues/289\">.NET January 2024 Updates</a>. These updates contain security and non-security improvements. <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/cve.md\">Your app may be vulnerable</a> if you have not deployed a recent .NET update.</p>\n<p>You can download <a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\">8.0.1</a>, <a href=\"https://dotnet.microsoft.com/download/dotnet/7.0\">7.0.15</a> and, <a href=\"https://dotnet.microsoft.com/download/dotnet/6.0\">6.0.26</a> versions for Windows, macOS, and Linux, for x86, x64, Arm32, and Arm64.</p>\n<ul>\n<li>Installers and binaries: <a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\">8.0.1</a> |<a href=\"https://dotnet.microsoft.com/download/dotnet/7.0\">7.0.15</a> | <a href=\"https://dotnet.microsoft.com/download/dotnet/6.0\">6.0.26</a></li>\n<li>Release notes: <a href=\"https://github.com/dotnet/core/blob/main/release-notes/8.0/8.0.1/8.0.1.md\">8.0.1</a> | <a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/7.0.15/7.0.15.md\">7.0.15</a> | <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/6.0.26/6.0.26.md\">6.0.26</a></li>\n<li><a href=\"https://mcr.microsoft.com/catalog?search=dotnet/\">Container images</a></li>\n<li>Linux packages: <a href=\"https://github.com/dotnet/core/blob/main/release-notes/8.0/install-linux.md\">8.0.1</a> | <a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/install-linux.md\">7.0.15</a> | <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/install-linux.md\">6.0.26</a></li>\n<li><a href=\"https://github.com/dotnet/core/issues/9052\">Release feedback/issue</a></li>\n<li>Known issues: <a href=\"https://github.com/dotnet/core/blob/main/release-notes/8.0/known-issues.md\">8.0</a> | <a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/known-issues.md\">7.0</a> | <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/known-issues.md\">6.0</a></li>\n</ul>\n<h3 id=\"windows-package-manager-cli-winget\">Windows Package Manager CLI (winget)</h3>\n<p>You can now install .NET updates using the Windows Package Manager CLI (winget):</p>\n<ul>\n<li>To install the .NET 8 runtime: <code>winget install dotnet-runtime-8</code></li>\n<li>To install the .NET 8 SDK: <code>winget install dotnet-sdk-8</code></li>\n<li>To update an existing installation: <code>winget upgrade</code></li>\n</ul>\n<p>See <a href=\"https://learn.microsoft.com/dotnet/core/install/windows?tabs=net80#install-with-windows-package-manager-winget\">Install with Windows Package Manager (winget)</a> for more information.</p>\n<h2 id=\"improvements\">Improvements</h2>\n<ul>\n<li>ASP.NET Core: <a href=\"https://github.com/dotnet/aspnetcore/issues?q=milestone%3A8.0.1+is%3Aclosed+label%3Aservicing-approved+\">8.0.1</a> | <a href=\"https://github.com/dotnet/aspnetcore/issues?q=milestone%3A7.0.15+is%3Aclosed+label%3Aservicing-approved+\">7.0.15</a> | <a href=\"https://github.com/dotnet/aspnetcore/issues?q=milestone%3A6.0.26+is%3Aclosed+label%3Aservicing-approved+\">6.0.26</a></li>\n<li>Entity Framework Core: <a href=\"https://github.com/dotnet/efcore/issues?q=milestone%3A8.0.1+is%3Aclosed+label%3Aservicing-approved+\">8.0.1</a></li>\n<li>Roslyn-Analysers: <a href=\"https://github.com/dotnet/roslyn-analyzers/issues?q=milestone%3A8.0.1xx+is%3Aclosed+label%3Aservicing-approved+\">8.0.1</a></li>\n<li>Runtime: <a href=\"https://github.com/dotnet/runtime/issues?q=milestone%3A8.0.1+is%3Aclosed+label%3Aservicing-approved+\">8.0.1</a> | <a href=\"https://github.com/dotnet/runtime/issues?q=milestone%3A7.0.15+is%3Aclosed+label%3Aservicing-approved+\">7.0.15</a> | <a href=\"https://github.com/dotnet/runtime/issues?q=milestone%3A6.0.26+is%3Aclosed+label%3Aservicing-approved+\">6.0.26</a></li>\n<li>SDK: <a href=\"https://github.com/dotnet/sdk/issues?q=milestone%3A8.0.1+is%3Aclosed+label%3Aservicing-approved+\">8.0.1</a></li>\n<li>WPF: <a href=\"https://github.com/dotnet/wpf/issues?q=milestone%3A8.0.1+is%3Aclosed+label%3Aservicing-approved+\">8.0.1</a></li>\n</ul>\n<h2 id=\"security\">Security</h2>\n<p><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-0056\">CVE-2024-0056 &#8211; Microsoft.Data.SqlClient and System.Data.SqlClient SQL Data provider Information Disclosure Vulnerability</a></p>\n<p>Microsoft is releasing this security advisory to provide information about a vulnerability in .NET&#8217;s System.Data.SqlClient and Microsoft.Data.SqlClient NuGet Packages. This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.</p>\n<p>A vulnerability exists in the Microsoft.Data.SqlClient and System.Data.SqlClient SQL Data provider where an attackercan perform an AiTM (adversary-in-the-middle) attack between the SQL client and the SQL server. This may allow the attacker to steal authentication credentials intended for the database server, even if the connection is established over an encrypted channel like TLS.</p>\n<p><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-0057\">CVE-2024-0057- .NET Security Feature bypass Vulnerability</a></p>\n<p>Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 . This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.</p>\n<p>A security feature bypass vulnerability exists when Microsoft .NET Framework-based applications use X.509 chain building APIs but do not completely validate the X.509 certificate due to a logic flaw. An attacker could present an arbitrary untrusted certificate with malformed signatures, triggering a bug in the framework. The framework will correctly report that X.509 chain building failed, but it will return an incorrect reason code for the failure. Applications which utilize this reason code to make their own chain building trust decisions may inadvertently treat this scenario as a successful chain build. This could allow an adversary to subvert the app&#8217;s typical authentication logic.</p>\n<p><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-21319\">CVE-2024-21319 &#8211; .NET Denial of Service Vulnerability</a></p>\n<p>Microsoft is releasing this security advisory to provide information about a vulnerability in the ASP.NET Core project templates. This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.</p>\n<p>A Denial of Service vulnerability exists in ASP.NET Core project templates which utilize JWT-based authentication tokens. This vulnerability allows an unauthenticated client to consume arbitrarily large amounts of server memory, potentially triggering an out-of-memory condition on the server and making the server no longer able to respond to legitimate requests.</p>\n<h2 id=\"visual-studio\">Visual Studio</h2>\n<p>See release notes for Visual Studio compatibility for <a href=\"https://github.com/dotnet/core/blob/main/release-notes/8.0/8.0.1/8.0.1.md#visual-studio-compatibility\">.NET 8.0</a>, <a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/7.0.15/7.0.15.md#visual-studio-compatibility\">.NET 7.0</a> and, <a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/6.0.26/6.0.26.md#visual-studio-compatibility\">.NET 6.0</a>.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/january-2024-updates/\">.NET January 2024 Updates – .NET 8.0.1, 7.0.15, .NET 6.0.26</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/january-2024-updates/feed/","slash:comments":"3"},{"title":"Announcing the Azure Migrate application and code assessment tool for .NET","link":"https://devblogs.microsoft.com/dotnet/azure-migrate-app-and-code-assessment-tool-release/","comments":"https://devblogs.microsoft.com/dotnet/azure-migrate-app-and-code-assessment-tool-release/#comments","dc:creator":{"#cdata-section":"Olia Gavrysh"},"pubDate":"Wed, 03 Jan 2024 22:30:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Core"},{"#cdata-section":".NET Framework"},{"#cdata-section":"ASP.NET"},{"#cdata-section":"ASP.NET Core"},{"#cdata-section":"Azure"},{"#cdata-section":"cloud"},{"#cdata-section":"Migration"},{"#cdata-section":"on-premises"},{"#cdata-section":"re-platforming"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=49832"},"description":{"#cdata-section":"<p>The new tool to help you move your .NET applications from on-premises to Azure is available in Visual Studio Marketplace and as a .NET CLI tool!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/azure-migrate-app-and-code-assessment-tool-release/\">Announcing the Azure Migrate application and code assessment tool for .NET</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>We are happy to announce the release of a new tool that can assist you in migrating your on-premises .NET applications to Azure.</p>\n<p>Azure Migrate application and code assessment tool for .NET (or AppCAT for short) allows you to assess .NET source code, configurations, and binaries of your application to identify potential issues and opportunities when migrating an app to Azure. It helps to discover any issues your application might have when it is ported to Azure and improve the performance, scalability, and security by suggesting modern, cloud-native solutions.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/appcat-report.png\" alt=\"Screenshot of the Azure Migrate application and code assessment for .NET in Visual Studio\" /></p>\n<p>Once you run the analysis, the tool will show you a report of all possible things that you need to check or change to ensure your application works properly once it is moved from on-premises to Azure.</p>\n<p>AppCAT discovers application technology usage through static code analysis of your code and its dependencies. It will also allow you to jump to a line that requires your attention, address issues and mark them as fixed, save the current state of the issues and the report so you or your coworkers can start exactly where you left off and effectively collaborate. The tool will give you an estimate of how much effort each issue will take to fix as well as giving estimates for the components of your apps and whole projects. And it will provide detailed guidance on how to fix the issues and connect you to the Microsoft documentation.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/issues-view.png\" alt=\"Screenshot of issues description in the Azure Migrate application and code assessment for .NET in Visual Studio\" /></p>\n<p>AppCAT is available in two &#8220;flavors&#8221; &#8211; as a Visual Studio extension and as a .NET CLI tool.</p>\n<h2 id=\"install-visual-studio-extension\">Install Visual Studio extension</h2>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<ul>\n<li>Windows operating system</li>\n<li>Visual Studio 2022 version 17.1 or later</li>\n</ul>\n<h3 id=\"installation-steps\">Installation steps</h3>\n<p>Use the following steps to install it from inside Visual Studio. Alternatively, you can download and install the extension from the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.appcat\">Visual Studio Marketplace</a>.</p>\n<ol>\n<li>With Visual Studio open, press the <strong>Extensions &gt; Manage Extensions</strong> menu item, which opens the <strong>Manage Extensions</strong> window.\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/vs-extensions.png\" alt=\"Screenshot of Visual Studio extensions\" /></li>\n<li>In the <strong>Manage Extensions</strong> window, enter <strong>&#8220;Azure Migrate&#8221;</strong> into the search input box.\n<img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/appcat-vsix.png\" alt=\"Screenshot of the Azure Migrate application and code assessment for .NET vsix\" /></li>\n<li>Select the <strong>Azure Migrate application and code assessment</strong> item, and then select <strong>Download</strong>.</li>\n<li>Once the extension has been downloaded, close Visual Studio. This starts the installation of the extension.</li>\n<li>In the VSIX Installer dialog select <strong>Modify</strong> and follow the directions to install the extension.</li>\n</ol>\n<h2 id=\"install-the-cli-tool\">Install the CLI tool</h2>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<ul>\n<li>.NET SDK</li>\n</ul>\n<h3 id=\"installation-steps\">Installation steps</h3>\n<p>To install the tool, run the following command in a CLI:</p>\n<pre><code class=\"language-dotnetcli\">dotnet tool install -g dotnet-appcat</code></pre>\n<p>To update the tool, run the following command in a CLI:</p>\n<pre><code class=\"language-dotnetcli\">dotnet tool update -g dotnet-appcat</code></pre>\n<p>Note that installing this tool may fail if you&#8217;ve configured additional NuGet feed sources. Use the <code>--ignore-failed-sources</code> parameter to treat those failures as warnings instead of errors.</p>\n<pre><code class=\"language-dotnetcli\">dotnet tool install -g --ignore-failed-sources dotnet-appcat</code></pre>\n<h2 id=\"analyze-applications-with-visual-studio\">Analyze applications with Visual Studio</h2>\n<p>Once you have installed the Visual Studio extension, you are ready to analyze your application in Visual Studio. You can do so by right clicking on any of the projects or a solution in the Solution Explorer window and selecting <strong>Re-platform to Azure</strong>.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/replatform.png\" alt=\"Screenshot of the Re-platform to Azure menu item in Visual Studio\" /></p>\n<p>The tool&#8217;s window will open offering you to either create a new report or open an existing reort.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/appcat-start-screen.png\" alt=\"Screenshot of the first AppCAT screen\" /></p>\n<p>If you are selecting to create a new report, on the next screen you can choose which projects in your solution you would like to analyze. Web projects will be pre-selected for you and you can change the selection by checking or unchecking the boxes next to the projects. When the tool runs, it also analyzes the dependencies your selected projects have.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/analyze-project-selection.png\" alt=\"Screenshot of the projects selection screen\" /></p>\n<p>On the next screen you can choose if youu want to analyze just your source code and settings or all binary dependencies that your code has as well.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/analyze-project-component-selection.png\" alt=\"Screenshot of the type of project components selection screen\" /></p>\n<p>Once you click <strong>Analyze</strong> button and the tool completes the analysis, you will see the results in a dashboard that can be saved in different formats (HTML, CSV and JSON).</p>\n<p>Read this <a href=\"https://aka.ms/appcat/dotnet/vs\">step by step guide</a> for detailed instructions on the Visual Studio experience.</p>\n<h2 id=\"analyze-applications-with-net-cli\">Analyze applications with .NET CLI</h2>\n<p>Once you installed the CLI tool, you are ready to analyze your application in CLI. In CLI run the command:</p>\n<pre><code class=\"language-dotnetcli\">appcat analyze &lt;APPLICATION_PATH&gt;</code></pre>\n<p>You can specify a path and a format (.html, .json, or .csv) for the report file that the tool will produce:</p>\n<pre><code class=\"language-dotnetcli\">appcat analyze &lt;APPLICATION_PATH&gt; --report MyAppReport --serializer html</code></pre>\n<p>Read this <a href=\"https://aka.ms/appcat/dotnet/cli\">step by step guide</a> for detailed instructions on the CLI experience.</p>\n<h2 id=\"interpret-results\">Interpret results</h2>\n<p>Both CLI tool and Visual Studio allow you to save the results of the analysis in HTML, CSV and JSON formats. HTML report looks very similar to the dashboard you&#8217;ll see in the Visual Studio after the analysis is completed.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/dashboard.png\" alt=\"AppCAT report\" /></p>\n<p>The report will show you information about the number of projects analyzed, issues and incidents and an evaluation of how much effort each incident, issue and project take to be fixed. Incidents are grouped by categories and severity. There are different views that allow you to see the incidents, get help on how to fix them, jump to your code where those incidents occur and so on.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/01/aggregate-dashboard.png\" alt=\"Aggregated issuees view\" /></p>\n<p>Read this <a href=\"https://aka.ms/appcat/dotnet/report\">Interpret the results guide</a> for detailed description of the different parts of the reports and how to understand and interpret the data.</p>\n<h2 id=\"supported-languages\">Supported languages</h2>\n<p>Application and code assessment for .NET can analyze projects written in the following languages:</p>\n<ul>\n<li>C#</li>\n<li>Visual Basic</li>\n</ul>\n<h2 id=\"supported-project-types\">Supported project types</h2>\n<p>It analyzes your code in the following project types:</p>\n<ul>\n<li>ASP.NET and ASP.NET Core</li>\n<li>Class libraries</li>\n</ul>\n<h2 id=\"supported-net-frameworks\">Supported .NET frameworks</h2>\n<p>All .NET frameworks (.NET Framework, .NET Core, .NET 5+).</p>\n<h2 id=\"supported-azure-targets\">Supported Azure targets</h2>\n<p>Currently application identifies potential issues for migration to Azure App Service, AKS, and Azure Container Apps. In the future the tool might have an ability to set the target explicitly and filter the exact issues and recommendations for each target separately.</p>\n<h2 id=\"whats-next\">What’s next</h2>\n<p>Next, we are going to focus on infusing the tool with AI capabilities and adding integration with Copilot, so you can get help on overall migration as well as fixing particular issues.</p>\n<p>Another big feature that we are currently working on is to get you a more curated assessment based on the Azure target you choose. We plan to add the ability to set the target before the report and build the report based on that target.</p>\n<h2 id=\"useful-materials\">Useful materials</h2>\n<p>We have lots of materials to help you with your upgrade process:</p>\n<ul>\n<li><a href=\"https://aka.ms/appcat/dotnet\">AppCAT documentation</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.appcat\">AppCAT installation for Visual Studio</a></li>\n<li><a href=\"https://learn.microsoft.com/dotnet/azure/migration/appcat/install#install-the-net-global-tool\">AppCAT CLI installation</a></li>\n</ul>\n<h2 id=\"give-us-feedback\">Give us feedback!</h2>\n<p>Please give us your feedback or report any issues via <a href=\"https://learn.microsoft.com/visualstudio/ide/suggest-a-feature\">Visual Studio feedback channel</a> by choosing <strong>Help</strong> | <strong>Send Feedback</strong> in Visual Studio. Please mention &#8220;AppCAT&#8221; in the title so it will get routed to my team faster. We appreciate your input and want to build the right tools for you!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/azure-migrate-app-and-code-assessment-tool-release/\">Announcing the Azure Migrate application and code assessment tool for .NET</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/azure-migrate-app-and-code-assessment-tool-release/feed/","slash:comments":"4"},{"title":"Safer recursion in F#","link":"https://devblogs.microsoft.com/dotnet/safer-recursion-in-fsharp/","comments":"https://devblogs.microsoft.com/dotnet/safer-recursion-in-fsharp/#comments","dc:creator":{"#cdata-section":"David Schaefer"},"pubDate":"Thu, 28 Dec 2023 18:05:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":"F#"},{"#cdata-section":"algorithms"},{"#cdata-section":"recursion"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=49714"},"description":{"#cdata-section":"<p>Tail recursion is a new F# compiler feature which helps to avoid stack overflows.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/safer-recursion-in-fsharp/\">Safer recursion in F#</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<blockquote>\n<p>This is a guest blog post by <strong>David Schaefer</strong>. David is a freelancing software developer with a focus on functional programming. He&#8217;s a member of the <a href=\"https://opensource.gresearch.com\">G-Research</a> Open Source Team. There he works on improving the F# ecosystem, mainly developer tooling. Furthermore, he helps maintaining various F# Open Source projects.</p>\n</blockquote>\n<p>It&#8217;s very common to define algorithms in a recursive way in functional programming. It fits very well with the mindset of avoiding mutation, and often there&#8217;s no performance downside. The compiler tries to rewrite recursive definitions into more efficient loops during its optimization phase. </p>\n<p>However, the compiler is not always able to do this transformation into loops. And here is where the danger starts.</p>\n<h2 id=\"stack-frames-vs-production\">Stack frames vs. Production</h2>\n<p>Calling a function <code>g</code> from inside a function <code>f</code> normally creates a new stack frame on the call stack of the process. After the function <code>g</code> is done, its stack frame isn&#8217;t needed anymore and its space can be reused.</p>\n<p>Now, with recursive functions, this stack frame creation can be vital to understand. In general, for every recursive call, a new stack frame is created. During development time, when problem sizes are rather small, this often doesn&#8217;t cause an issue. But later in production, with bigger problem sizes, the program crashes all of a sudden with a stack overflow.</p>\n<p>What happened? There were so many stack frames created for the recursive calls, that all space for the stack was used up and the runtime decided to stop it. To demonstrate this, take a look at this recursive function:</p>\n<pre><code class=\"language-fsharp\">let rec countDown1 n =\n    if n = 0\n    then 0\n    else\n        countDown1 (n - 1) + 1</code></pre>\n<p>The generated IL code for it looks like this:</p>\n<pre><code class=\"language-csharp\">.method public static \n    int32 countDown1 (\n        int32 n\n    ) cil managed \n{\n    // Method begins at RVA 0x2050\n    // Header size: 1\n    // Code size: 17 (0x11)\n    .maxstack 8\n\n    IL_0000: nop\n    IL_0001: ldarg.0\n    IL_0002: brtrue.s IL_0006\n\n    IL_0004: ldc.i4.0\n    IL_0005: ret\n\n    IL_0006: ldarg.0\n    IL_0007: ldc.i4.1\n    IL_0008: sub\n    IL_0009: call int32 Program::countDown1(int32)\n    IL_000e: ldc.i4.1\n    IL_000f: add\n    IL_0010: ret\n} // end of method Program::countDown1</code></pre>\n<p>You can see the recursive call at <code>IL_0009</code>. Calling <code>coundDown1</code> with <code>n = 1_000</code>, like one would casually do during development, terminates just fine, but calling it with <code>n = 1_000_000</code> crashes with a stack overflow.</p>\n<p>Compare this to the following:</p>\n<pre><code class=\"language-fsharp\">let rec countDown2 n =\n    if n = 0\n    then 0\n    else\n        countDown2 (n - 1)</code></pre>\n<p>which results in:</p>\n<pre><code class=\"language-csharp\">.method public static \n    int32 countDown2 (\n        int32 n\n    ) cil managed \n{\n    // Method begins at RVA 0x2064\n    // Header size: 1\n    // Code size: 13 (0xd)\n    .maxstack 8\n\n    // loop start\n        IL_0000: nop\n        IL_0001: ldarg.0\n        IL_0002: brtrue.s IL_0006\n\n        IL_0004: ldc.i4.0\n        IL_0005: ret\n\n        IL_0006: ldarg.0\n        IL_0007: ldc.i4.1\n        IL_0008: sub\n        IL_0009: starg.s n\n        IL_000b: br.s IL_0000\n    // end loop\n} // end of method Program::countDown2</code></pre>\n<p>The difference is that in <code>countDown1</code> the returned value of the recursive call was used to construct the final value of the function by adding 1 to it. In contrast, in <code>countDown2</code> the returned value of the recursive call is also the value of the function itself. Meaning, the recursive call is the last instruction in the function definition &#8211; a style known as <a href=\"https://en.wikipedia.org/wiki/Tail_call\">tail recursion</a>. This style allowed the compiler to transform the function into a loop, thus eliminating the need to create new stack frames.</p>\n<p>Besides the chance for the compiler to rewrite a recursive function into a loop, there&#8217;s another escape-door that opens up through the use of tail recursion: the IL prefix <code>tail.</code> In <a href=\"https://ecma-international.org/publications-and-standards/standards/ecma-335/\">ECMA-335</a>, it is explained like this:</p>\n<pre><code class=\"language-txt\">It indicates that the current method’s stack frame is no longer required and thus can be removed before the call instruction is executed. Because the value returned by the call will be the value returned by this method, the call can be converted into a cross-method jump.</code></pre>\n<p>To demonstrate it, we use the example from <a href=\"https://github.com/fsharp/fslang-design/blob/main/FSharp-8.0/FS-1011-warn-on-recursive-without-tail-call.md\">RFC-1011</a>, more on that later. Consider the mutually recursive F# functions:</p>\n<pre><code class=\"language-fsharp\">let foo x =\n    printfn \"Foo: %x\" x\n\n[&lt;TailCall&gt;]\nlet rec bar x =\n    match x with\n    | 0 -&gt;\n        foo x           // OK: non-tail-recursive call to a function which doesn't share the current stack frame (i.e., 'bar' or 'baz').\n        printfn \"Zero\"\n\n    | 1 -&gt;\n        bar (x - 1)     // Warning: this call is not tail-recursive\n        printfn \"Uno\"\n        baz x           // OK: tail-recursive call.\n\n    | x -&gt;\n        printfn \"0x%08x\" x\n        bar (x - 1)     // OK: tail-recursive call.\n\nand [&lt;TailCall&gt;] baz x =\n    printfn \"Baz!\"\n    bar (x - 1)         // OK: tail-recursive call.</code></pre>\n<p>Here we get the following IL code for case <code>1</code> in <code>bar</code>:</p>\n<pre><code class=\"language-csharp\">    ...\n    IL_0030: ldarg.0\n    IL_0031: ldc.i4.1\n    IL_0032: sub\n    IL_0033: call void Program::bar(int32)\n    IL_0038: nop\n    IL_0039: ldstr \"Uno\"\n    IL_003e: newobj instance void class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`5&lt;class [FSharp.Core]Microsoft.FSharp.Core.Unit, class [System.Runtime]System.IO.TextWriter, class [FSharp.Core]Microsoft.FSharp.Core.Unit, class [FSharp.Core]Microsoft.FSharp.Core.Unit, class [FSharp.Core]Microsoft.FSharp.Core.Unit&gt;::.ctor(string)\n    IL_0043: stloc.0\n    IL_0044: call class [netstandard]System.IO.TextWriter [netstandard]System.Console::get_Out()\n    IL_0049: ldloc.0\n    IL_004a: call !!0 [FSharp.Core]Microsoft.FSharp.Core.PrintfModule::PrintFormatLineToTextWriter&lt;class [FSharp.Core]Microsoft.FSharp.Core.Unit&gt;(class [System.Runtime]System.IO.TextWriter, class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`4&lt;!!0, class [System.Runtime]System.IO.TextWriter, class [FSharp.Core]Microsoft.FSharp.Core.Unit, class [FSharp.Core]Microsoft.FSharp.Core.Unit&gt;)\n    IL_004f: pop\n    IL_0050: ldarg.0\n    IL_0051: tail.\n    IL_0053: call void Program::baz(int32)\n    IL_0058: ret\n    ...</code></pre>\n<p>Because the call to <code>baz</code> happens in a tail recursive way, the compiler can use the <code>tail.</code> prefix for it in <code>IL_0051</code>. Compare this to the call to <code>bar</code> in  <code>IL_0033</code>.</p>\n<h2 id=\"let-the-compiler-understand-your-intent\">Let the compiler understand your intent</h2>\n<p>So, all we have to do to keep using elegant recursive functions is to define them in the tail recursive style, right?</p>\n<p>Well, easier said than done. Making sure a function is defined in a tail recursive way can be a challenge as the complexity of the function increases and various programmers work on the code. So it would be desirable that the compiler warns about a function which isn&#8217;t tail recursive but should be according to the stated intend of the developer.</p>\n<p>This is exactly what happened with <a href=\"https://github.com/fsharp/fslang-design/blob/main/FSharp-8.0/FS-1011-warn-on-recursive-without-tail-call.md\">RFC-1011</a>. A new attribute, <code>[&lt;TailCall&gt;]</code>, was implemented in the F# compiler. Developers can use it to make their intent clear &#8211; that a function should be tail recursive. Functions annotated with this attribute are checked if they are really tail recursive and if not, a warning is emitted. </p>\n<p>The analysis for the warning is made after the optimization phase of the compiler, so any rewrite of a recursive function has already been applied. Otherwise, a false warning could be emitted about a function that the compiler is able to rewrite into a loop, for example. During the analysis the typed abstract syntax tree (TAST) is traversed and recursive calls to functions with the new attribute are checked if they happen in a tail recursive manner. An example of a characteristic that would render a function call non-tail recursive would be the first position in a <code>Sequential</code> expression.</p>\n<p>Applying this new attribute to <code>countDown1</code> would look like this:</p>\n<pre><code class=\"language-fsharp\">[&lt;TailCall&gt;]\nlet rec countDown1 n =\n    if n = 0\n    then 0\n    else\n        countDown1 (n - 1) + 1</code></pre>\n<p>With F# 8, the compiler warns about the non-tail recursive definition of the function:</p>\n<pre><code class=\"language-txt\">Program.fs(6,9): warning FS3569: The member or function 'countDown1' has the 'TailCallAttribute' attribute, but is not being used in a tail recursive way. [tailrec_blog.fsproj]</code></pre>\n<p>With this feature of the compiler, developers should be able to concentrate more on the domain of their work and\nworry less about technical details of the compiled code.</p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>So far, implementing this warning was my biggest contribution to the F# compiler. I had to try different approaches until the <a href=\"https://github.com/dotnet/fsharp/pull/15503\">PR</a> was approved. A few bug fixes followed which didn&#8217;t make the cut for .NET 8, but should be in the first patch release.</p>\n<p>I want to thank everyone who helped me along the way and I want to thank <a href=\"https://github.com/AviAvni\">Avi Avni</a> for opening the first <a href=\"https://github.com/dotnet/fsharp/pull/1976\">PR</a> of this feature many years ago.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/safer-recursion-in-fsharp/\">Safer recursion in F#</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/safer-recursion-in-fsharp/feed/","slash:comments":"1"},{"title":"What’s New in Our Code Coverage Tooling?","link":"https://devblogs.microsoft.com/dotnet/whats-new-in-our-code-coverage-tooling/","comments":"https://devblogs.microsoft.com/dotnet/whats-new-in-our-code-coverage-tooling/#comments","dc:creator":{"#cdata-section":"Jakub Chocholowicz"},"pubDate":"Thu, 21 Dec 2023 18:05:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Core"},{"#cdata-section":".NET Framework"},{"#cdata-section":"Performance"},{"#cdata-section":".net framework"},{"#cdata-section":"performance"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=49643"},"description":{"#cdata-section":"<p>Discover enhanced code coverage tools with better platform support, new report formats and improved performance.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/whats-new-in-our-code-coverage-tooling/\">What&#8217;s New in Our Code Coverage Tooling?</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>Exciting news for developers! We&#8217;ve enhanced our code coverage tools, <a href=\"https://www.nuget.org/packages/Microsoft.CodeCoverage\">Microsoft.CodeCoverage</a> and <a href=\"https://aka.ms/dotnet-coverage\">dotnet-coverage</a>, with some fantastic features. If you&#8217;re new to our tools, check out our <a href=\"https://github.com/microsoft/codecoverage#get-started\">Get Started</a> guide. Let&#8217;s dive into the changes that will simplify your coding experience.</p>\n<h2 id=\"support-for-all-platforms\">Support for All Platforms</h2>\n<p>Our tools can run on any platform supported by .NET, thanks to the addition of static instrumentation. Learn more about <a href=\"https://github.com/microsoft/codecoverage/blob/main/docs/instrumentation.md\">static and dynamic instrumentation</a>, and discover <a href=\"https://github.com/microsoft/codecoverage/blob/main/docs/supported-os.md\">supported platforms</a>.</p>\n<h2 id=\"fresh-report-formats\">Fresh Report Formats</h2>\n<p>We&#8217;ve revamped our code coverage report formats to integrate smoothly with tools like ReportGenerator. While the default remains the familiar <code>.coverage</code> format, we&#8217;ve introduced some new ones:</p>\n<ul>\n<li><strong>Binary (Default):</strong> .coverage (Microsoft&#8217;s special format) &#8211; Open it in Visual Studio Enterprise. <a href=\"https://github.com/microsoft/codecoverage/blob/main/samples/Calculator/scenarios/scenario01/README.md\">Example</a></li>\n<li><strong>Cobertura:</strong> .cobertura.xml (Open-source XML format) &#8211; Open it in Visual Studio Enterprise, any text editor, or generate an HTML report with ReportGenerator. <a href=\"https://github.com/microsoft/codecoverage/blob/main/samples/Calculator/scenarios/scenario02/README.md\">Example</a></li>\n<li><strong>XML:</strong> .xml (Microsoft&#8217;s XML Format) &#8211; Open it in Visual Studio Enterprise and any text editor. <a href=\"https://github.com/microsoft/codecoverage/blob/main/samples/Calculator/scenarios/scenario04/README.md\">Example</a></li>\n</ul>\n<h2 id=\"meet-dotnet-coverage\">Meet dotnet-coverage</h2>\n<p>Introducing our new tool, dotnet-coverage! It performs following tasks:</p>\n<ul>\n<li>Collects code coverage for console applications. <a href=\"https://github.com/microsoft/codecoverage/blob/main/samples/Calculator/scenarios/scenario08/README.md\">Example</a></li>\n<li>Collects code coverage for web applications. <a href=\"https://github.com/microsoft/codecoverage/blob/main/samples/Calculator/scenarios/scenario14/README.md\">Example</a></li>\n<li>Merges coverage reports. <a href=\"https://github.com/microsoft/codecoverage/blob/main/samples/Calculator/scenarios/scenario18/README.md\">Example</a></li>\n<li>Instruments binaries. <a href=\"https://github.com/microsoft/codecoverage/blob/main/samples/Calculator/scenarios/scenario10/README.md\">Example</a></li>\n<li>Calculates code coverage for each test separately. <a href=\"https://github.com/microsoft/codecoverage/blob/main/samples/Calculator/scenarios/scenario16/README.md\">Example</a></li>\n</ul>\n<p>Visit <a href=\"https://aka.ms/dotnet-coverage\">dotnet-coverage</a> documentation to learn more.</p>\n<h2 id=\"auto-merge-for-solutions\">Auto-Merge for solutions</h2>\n<p>Running <code>dotnet test --collect \"Code Coverage\"</code> at the solution level now automatically merges code coverage for all your test projects. Visit <a href=\"https://github.com/microsoft/codecoverage/blob/main/samples/Calculator/scenarios/scenario24/README.md\">Scenario 24 Code coverage for solution</a> to see full example.</p>\n<h2 id=\"improved-documentation\">Improved Documentation</h2>\n<p>Explore our fresh GitHub repository at <a href=\"https://github.com/microsoft/codecoverage\">microsoft/codecoverage</a> for all the <a href=\"https://github.com/microsoft/codecoverage#readme\">info</a> and <a href=\"https://github.com/microsoft/codecoverage/tree/main/samples/Calculator#readme\">samples</a> you need.</p>\n<h2 id=\"faster-performance\">Faster Performance</h2>\n<p>Prior to the 16.5 release, the collection of code coverage report significantly slowed down test execution. We addressed this issue, resulting in an impressive 80% performance gain. See <a href=\"https://github.com/microsoft/codecoverage/tree/main/docs/performance\">performance</a> section for detailed results and logs.</p>\n<table>\n<thead>\n<tr>\n<th>Package</th>\n<th>Time</th>\n<th>Ratio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Microsoft.CodeCoverage 16.5</td>\n<td>03:52:53</td>\n<td>1.00</td>\n</tr>\n<tr>\n<td>Microsoft.CodeCoverage 17.0</td>\n<td>02:25:49</td>\n<td>0.63</td>\n</tr>\n<tr>\n<td>Microsoft.CodeCoverage 17.5</td>\n<td>01:27:52</td>\n<td>0.38</td>\n</tr>\n<tr>\n<td>Microsoft.CodeCoverage 17.9</td>\n<td>00:50:00</td>\n<td>0.21</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"what-you-need-to-do\">What You Need to Do</h2>\n<p>To enjoy the latest features and speed up your builds, make sure to use our latest stable packages in your test projects:</p>\n<pre><code class=\"language-xml\">&lt;PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.8.0\" /&gt;\n&lt;PackageReference Include=\"Microsoft.CodeCoverage\" Version=\"17.8.0\" /&gt;</code></pre>\n<p>If your solution doesn&#8217;t have any C++ code, make it faster and more reliable by turning off native code coverage with these flags in runsettings:</p>\n<pre><code class=\"language-xml\">&lt;EnableStaticNativeInstrumentation&gt;False&lt;/EnableStaticNativeInstrumentation&gt;\n&lt;EnableDynamicNativeInstrumentation&gt;False&lt;/EnableDynamicNativeInstrumentation&gt;</code></pre>\n<p>Visit <a href=\"https://github.com/microsoft/codecoverage/blob/main/docs/configuration.md\">configuration</a> documenation to see other options and full example of our settings.</p>\n<h2 id=\"special-thanks\">Special Thanks</h2>\n<p>A big thank you to <a href=\"https://github.com/fhnaseer\">Faisal Hafeez</a>, <a href=\"https://twitter.com/MarcoRossignoli\">Marco Rossignoli</a>, <a href=\"https://github.com/mariam-abdulla\">Mariam Abdullah</a>, <a href=\"https://github.com/cvpoienaru\">Codrin-Victor Poienaru</a> and <a href=\"https://twitter.com/pavelhorak0\">Pavel Horak</a> for their exceptional contributions to this project! <img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f64c.png\" alt=\"🙌\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><img src=\"https://s.w.org/images/core/emoji/14.0.0/72x72/1f680.png\" alt=\"🚀\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/whats-new-in-our-code-coverage-tooling/\">What&#8217;s New in Our Code Coverage Tooling?</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/whats-new-in-our-code-coverage-tooling/feed/","slash:comments":"17"},{"title":"Announcing .NET Aspire Preview 2","link":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-preview-2/","comments":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-preview-2/#comments","dc:creator":{"#cdata-section":"Damian Edwards"},"pubDate":"Wed, 20 Dec 2023 18:10:00 +0000","category":[{"#cdata-section":".NET"},{"#cdata-section":".NET Core"},{"#cdata-section":"ASP.NET Core"},{"#cdata-section":"Cloud"},{"#cdata-section":"Cloud Native"},{"#cdata-section":"aspire"},{"#cdata-section":"azure"},{"#cdata-section":"cloud native"},{"#cdata-section":"distribute"},{"#cdata-section":"observable"},{"#cdata-section":"OpenTelemetry"},{"#cdata-section":"otel"},{"#cdata-section":"scalable"},{"#cdata-section":"stack"}],"guid":{"@isPermaLink":"false","#text":"https://devblogs.microsoft.com/dotnet/?p=49677"},"description":{"#cdata-section":"<p>.NET Aspire Preview 2 is now available and includes many improvements and new capabilities.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-preview-2/\">Announcing .NET Aspire Preview 2</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"content:encoded":{"#cdata-section":"<p>The feedback we&#8217;ve received since our <a href=\"https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/\">announcement and launch of .NET Aspire last month</a> has been amazing! The engagement on the repo via issues and pull-requests has been inspiring to the team. We are learning a lot about how developers are using &#8212; and want to use &#8212; .NET Aspire or other components in your development of distributed cloud applications. Some awesome contributions from the community have already been made and many are in-progress as well. On behalf of the team, thank you for your excitement and feedback!</p>\n<p>.NET Aspire <strong>Preview 2</strong> is now available! Here&#8217;s a summary of what&#8217;s new in this preview release:</p>\n<ul>\n<li><a href=\"#dashboard-updates\">Dashboard</a>\n<ul>\n<li>All resource types are now combined into a single &#8220;Resources&#8221; view</li>\n<li>New details pane design</li>\n<li>Console logs for all resource types are now combined into a single &#8220;Console Logs&#8221; view</li>\n<li>Log category name added to the Structured Logs view</li>\n<li>Outgoing requests to other resources and development services are displayed with the resource/service name instead of URL</li>\n</ul>\n</li>\n<li><a href=\"#hosting--orchestration-updates\">Hosting &amp; orchestration</a>\n<ul>\n<li>Containers now support configuring arguments to be passed to them on start</li>\n<li>Containers &amp; executables can now reference other resources with endpoints for service discovery configuration</li>\n<li>Add projects without a <code>&lt;ProjectReference /&gt;</code></li>\n<li>Resources can now reference existing URI endpoints for service discovery configuration</li>\n<li>Support for adding Node.js apps as resources</li>\n<li>Projects now use the port from their launch profile when hosted with or without replicas</li>\n</ul>\n</li>\n<li><a href=\"#components-updates\">Components</a>\n<ul>\n<li>Component packages now have individual icons</li>\n<li><strong>NEW</strong>: MySqlConnector component added</li>\n<li><strong>NEW</strong>: MongoDB component added</li>\n<li>Azure SDK components now enable distributed tracing by default (except for Service Bus)</li>\n</ul>\n</li>\n<li><a href=\"#deployment-updates\">Deployment</a>\n<ul>\n<li>Azure Developer CLI improvements</li>\n<li>Aspir8: A community-developed tool for deploying .NET Aspire apps to Kubernetes</li>\n</ul>\n</li>\n<li><a href=\"#updates-for-dapr-support\">Dapr</a>\n<ul>\n<li>IDs for Dapr sidecars no longer needs to be specified</li>\n<li>First-class support for describing all Dapr components in the app model</li>\n<li>Azure Developer CLI (AZD) support for deploying .NET Aspire apps that use Dapr to Azure Container Apps (ACA)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"getting-net-aspire-preview-2\">Getting .NET Aspire Preview 2</h2>\n<p>To install or upgrade to .NET Aspire Preview 2, perform the following steps:</p>\n<ol>\n<li>If on Windows and using Visual Studio to work with .NET Aspire, install/update to the latest <a href=\"https://aka.ms/vspreview\">Visual Studio 2022 Preview</a> release (17.9.0 Preview 2.0 at the time of writing)\n<ul>\n<li>Ensure that the &#8220;.NET Aspire SDK (Preview)&#8221; component is selected under the &#8220;Individual components&#8221; tab of the Visual Studio installer:<strong>Note you must follow the remaining steps in these instructions to update to Preview 2</strong>\n<img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/VS-aspire-sdk-component.png\" alt=\"Visual Studio Installer component selection screen with the &quot;.NET Aspire SDK (Preview)&quot; component highlighted\" /></li>\n</ul>\n</li>\n<li>If on Windows and you have Visual Studio 2022 17.8.x installed but intend to only use .NET Aspire via the .NET CLI (<code>dotnet</code>), download and install the <a href=\"https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-8.0.100-windows-x64-installer\">.NET 8.0.100 SDK using the standalone installer</a></li>\n<li>If on macOS or Linux, download and install the <a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\">.NET 8.0.100 SDK</a></li>\n<li>From a terminal, run the following commands to update the .NET Aspire workload:\n<pre><code class=\"language-dotnetcli\">dotnet workload update\r\ndotnet workload install aspire</code></pre>\n<p><em>Note that if you had the Preview 1 version of the .NET Aspire workload already installed, you may see messages informing you that the workload is already installed. These can be safely ignored.</em></li>\n<li>Refer to the docs for <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/setup-tooling\">detailed instructions on installing .NET Aspire</a></li>\n</ol>\n<p>After updating you can run <code>dotnet workload list</code> to see the updated version (note: your version of Visual Sudio may differ):</p>\n<pre><code class=\"language-text\">Installed Workload Id      Manifest Version                     Installation Source\r\n----------------------------------------------------------------------------------------------\r\n\r\naspire                     8.0.0-preview.2.23619.3/8.0.100      SDK 8.0.100, VS 17.9.34310.174</code></pre>\n<h3 id=\"updating-existing-apps\">Updating existing apps</h3>\n<p>For existing .NET Aspire apps, after performing the above steps to get the latest workload, you&#8217;ll want to change your package references for any Aspire components. Update <strong>all Aspire package references (hosting and components)</strong> to <code>8.0.0-preview.2.23619.3</code>, for example the hosting would change to:</p>\n<pre><code class=\"language-xml\">&lt;PackageReference Include=\"Aspire.Hosting\" Version=\"8.0.0-preview.2.23619.3\" /&gt;</code></pre>\n<p>All other packages being referenced should be updated to the Preview 2 version as well. If using Visual Studio, you can also use NuGet Package Manager and update all packages being used via the IDE (be sure to check the pre-release checkbox in the UI).</p>\n<h3 id=\"api-changes\">API changes</h3>\n<p>Additionally we made some hosting API changes in Preview 2. In existing code, API calls such as <code>builder.AddPostgresContainer(...)</code> should now be changed to <code>builder.AddPostgres(...)</code> to retain the same behavior (there are similar changes for other resource types as well). We wanted to add distinction between the notion of an &#8220;abstract&#8221; resource type such as a Redis server (e.g. <code>AddRedis(...)</code>), and a container which is running Redis (e.g. <code>AddRedisContainer(...)</code>). Builders for types such as <code>RedisContainer</code> support extension methods such as <code>WithEnvironment(...)</code> and <code>WithVolumeMount(...)</code> whereas builders for types such as <code>RedisServer</code> do not because the expectation is that the deployment tool for the .NET Aspire application will likely use a managed resource type in the target cloud environment which does not support customizations in this way.</p>\n<p>Further we have removed the <code>builder.AddXYZConnection(...)</code> methods where <code>XYZ</code> is the name of a type of resource. These extensions were very thin wrappers over adding an environment variable such as <code>ConnectionString_myresource</code>.</p>\n<h2 id=\"dashboard-updates\">Dashboard updates</h2>\n<p>We got an incredible response to the dashboard in the initial preview release of .NET Aspire! Folks are really enthusiastic about being able to easily see how .NET Aspire helps to make apps observable by default, along with the status of all the separate resources that make up the distributed system. Based on your feedback, we&#8217;ve made the following changes to the dashboard in Preview 2.</p>\n<h3 id=\"new-combined-views-for-resources-and-console-logs\">New combined views for resources and console logs</h3>\n<p>In preview 1, there were separate pages on the dashboard for viewing the details of the projects, executables, and containers configured as part of a .NET Aspire application. These have been combined into a single &#8220;Resources&#8221; page in Preview 2, making it much easier to see the status and key details of all your resources in one place. The &#8220;Name&#8221; column now includes the process ID for projects and executables, and the container ID for containers. The &#8220;Source&#8221; column details the path for projects and executables, and for containers the image name and tag is displayed, along with the container port if one is exposed.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/dashboard-resources-page.png\" alt=\"A screenshot of the updated .NET Aspire dashboard with all resources displayed on one page\" /></p>\n<p>Console logs got the same treatment, making it easier to select any resource to view the console logs for from a single page:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/dashboard-console-logs-page.png\" alt=\"A screenshot of the updated .NET Aspire dashboard with console logs for all resources displayed on one page\" /></p>\n<h3 id=\"dockable-details-pane\">Dockable details pane</h3>\n<p>An new details pane is now used to show more information for relevant items, such as the environment variables for a resource, or the details of a structured log or tracing span. This pane can be docked to the bottom or the side of the current view, making it simpler to switch between the details of the different items shown in the current view.</p>\n<p><div style=\"width: 640px;\" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-49677-1\" width=\"640\" height=\"288\" poster=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/dashboard-details-pane-thumb.png\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/dashboard-details-pane.mp4?_=1\" /><a href=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/dashboard-details-pane.mp4\">https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/dashboard-details-pane.mp4</a></video></div></p>\n<h3 id=\"log-category-name-added-to-the-structured-logs-view\">Log category name added to the Structured Logs view</h3>\n<p>The category name for a log message is now displayed in the details pane of the Structured Logs view, making it simple to see the source of the message:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/dashboard-structured-logs-category.png\" alt=\"A screenshot of the Structured Logs view with the details pane open and the log category name highlighted\" /></p>\n<h3 id=\"outgoing-requests-to-known-destinations-are-displayed-with-the-name-instead-of-url\">Outgoing requests to known destinations are displayed with the name instead of URL</h3>\n<p>Outgoing requests to known destinations like other resources and endpoints hosted by Visual Studio to support the development experience (e.g. Browser Link), are now automatically resolved and named appropriately in the Traces view:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/dashboard-outgoing-requests-named.png\" alt=\"Screenshot of the Traces view with outgoing request named destinations highlighted\" /></p>\n<h2 id=\"hosting-orchestration-updates\">Hosting &amp; orchestration updates</h2>\n<h3 id=\"configuring-container-launch-arguments\">Configuring container launch arguments</h3>\n<p>You can now configure arguments to pass to containers configured in your AppHost projects using the <code>IResourceBuilder&lt;ContainerResource&gt;.WithArgs</code> method. These arguments will be passed to the container at startup. The following is an example of using this capability taken from the newly added <a href=\"https://github.com/dotnet/aspire-samples/tree/main/samples/DatabaseContainers\">Database Containers sample</a>.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\nvar addressBookDb = builder.AddSqlServerContainer(\"sqlserver\")\r\n    // Mount the init scripts directory into the container.\r\n    .WithVolumeMount(\"./sqlserverconfig\", \"/usr/config\", VolumeMountType.Bind)\r\n    // Mount the SQL scripts directory into the container so that the init scripts run.\r\n    .WithVolumeMount(\"../DatabaseContainers.ApiService/data/sqlserver\", \"/docker-entrypoint-initdb.d\", VolumeMountType.Bind)\r\n    // Run the custom entrypoint script on startup.\r\n    .WithArgs(\"/usr/config/entrypoint.sh\")\r\n    .AddDatabase(\"AddressBook\");</code></pre>\n<h3 id=\"service-discovery-between-all-resource-types\">Service discovery between all resource types</h3>\n<p>It&#8217;s now possible to configure containers and executables to expose service endpoints using the <code>WithServiceBinding</code> method, and then pass them as references to other resources using <code>WithReference</code> and have their service endpoints injected as <a href=\"https://learn.microsoft.com/dotnet/aspire/service-discovery/overview#implicit-service-discovery-by-reference\">configuration for service discovery</a>.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\n// Add customer API container built by partner team\r\nvar customerApi = builder.AddContainer(\"customerapi\", image: \"contoso.com/eshop/customers\")\r\n    .WithServiceBinding(containerPort: 8080, scheme: \"http\");\r\n\r\n// Configure our storefront web project to reference the customer service API so that it can\r\n// reference the service by name instead of by IP address, e.g. http://customerapi\r\nvar storeFront = builder.AddProject&lt;Projects.Contoso_eShop_Storefront&gt;(\"storefront\")\r\n    .WithReference(customerApi);</code></pre>\n<h3 id=\"add-projects-based-on-project-file-path\">Add projects based on project file path</h3>\n<p>There are cases where adding project references from the AppHost project to service projects as <a href=\"https://learn.microsoft.com/visualstudio/msbuild/common-msbuild-project-items#projectreference\">project references</a> might be undesirable. It&#8217;s now possible to add projects as resources without a project reference by simply passing the project file path to the <code>AddProject</code> method. This can make it easier to integrate projects from outside of the current solution in more complex source layout situations, e.g. when using git submodules to bring in the contents of partner team repos.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\nvar pathBasedProject = builder.AddProject(\r\n    name: \"customerapi\",\r\n    // The project will be resolved relative to the AppHost project directory\r\n    projectPath: \"../../submodules/customerapi/src/CustomerApi/CustomerApi.csproj\");</code></pre>\n<h3 id=\"reference-existing-uri-endpoints-for-service-discovery-configuration\">Reference existing URI endpoints for service discovery configuration</h3>\n<p>Another pattern for referencing services from outside of the current solution, and even managed by a different team, can be to use an existing instance of the service specially hosted for development purposes. You can now directly reference HTTP-based services and have the consuming resource configured with the required values for service discovery:</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\nvar cache = builder.AddRedis(\"cache\");\r\n\r\nbuilder.AddProject&lt;Projects.AspireApp30_Web&gt;(\"webfrontend\")\r\n    .WithReference(cache)\r\n    // The app can reference this service simply via http://apiservice\r\n    .WithReference(\"apiservice\", new Uri(\"http://apiservice.v2.dev.contoso.com\"));</code></pre>\n<h3 id=\"support-for-adding-node-js-apps-as-resources\">Support for adding Node.js apps as resources</h3>\n<p>Support for configuring Node.js-based apps into a .NET Aspire AppHost project is now included. The <code>AddNodeApp</code> and <code>AddNpmApp</code> methods can be used to easily include Node.js applications in an Aspire AppHost project, e.g. a React-based frontend. Included Node.js apps can participate in service discovery and connection string configuration and will have the dashboard OTLP endpoint URL injected to enable OpenTelemetry. To configure the app to be deployed as a container, call the <code>AsDockerFileInManifest</code> method on the returned resource.</p>\n<p>The <a href=\"https://github.com/dotnet/aspire-samples/tree/main/samples/AspireWithNode\">Aspire with Node.js sample</a> has been updated to use this built-in support and demonstrates configuring the Node.js app to egress OpenTelemetry traces to the Aspire dashboard.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\nvar cache = builder.AddRedisContainer(\"cache\");\r\n\r\nvar apiservice = builder.AddProject&lt;Projects.ApiService&gt;(\"apiservice\");\r\n\r\nbuilder.AddNodeApp(\"webapp\", \"../webapp/app.js\")\r\n    .WithReference(apiservice)\r\n    .WithReference(cache)\r\n    // Dynamically assign an http port for the the Node.js app.\r\n    // The port will be set in the 'PORT' environment variable.\r\n    .WithServiceBinding(scheme: \"http\", env: \"PORT\")\r\n    .AsDockerfileInManifest();</code></pre>\n<h3 id=\"projects-now-consistently-use-the-port-specified-in-their-launch-profile\">Projects now consistently use the port specified in their launch profile</h3>\n<p>When launching an AppHost project, <code>Aspire.Hosting</code> launches reverse-proxies in front of all configured services, so that tasks like load-balancing to <a href=\"https://learn.microsoft.com/dotnet/api/aspire.hosting.projectresourcebuilderextensions.withreplicas\">configured replicas</a> can be performed. The instances of the project applications themselves will be assigned random ports to listen on and the proxies will forward client requests to that port. The proxies will now use the port specified in the project launch profile (i.e. the <code>\"applicationUrl\"</code> property in the <em>Properties/launchSettings.json</em> file) as the incoming port when running locally during development. This means the localhost URL you use to access a project should now be consistent during development as it&#8217;s controlled by the project&#8217;s launch profile, whether launching the project directly, or launching it via an AppHost project, with or without replicas.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/apphost-proxy-port.png\" alt=\"A project launchSettings.json file, console logs and endpoint displayed on the dashboard with ports in each place highlighted\" /></p>\n<h2 id=\"components-updates\">Components updates</h2>\n<h3 id=\"component-packages-now-have-individual-icons\">Component packages now have individual icons</h3>\n<p>Most of the NuGet packages for Aspire components now have representative icons to make it easier to identify them in the NuGet Package Manager dialog and bring a bit of visual variance to the experience:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/component-package-icons.png\" alt=\"Visual Studio NuGet Package Manager dialog showing a list of Aspire component packages with their icons and descriptions\" /></p>\n<h3 id=\"component-and-hosting-support-for-mysqlconnector\">Component and hosting support for MySqlConnector</h3>\n<p>Thanks to community member <a href=\"https://github.com/bgrainger\">Bradley Grainger</a>, author of the popular <a href=\"https://www.nuget.org/packages/MySqlConnector\">MySqlConnector client library</a> for MySQL, there is now an Aspire component for MySQL, with support for configuration, DI, tracing, logging, and health checks, enabling observable and resilient access to MySQL databases from your service applications.</p>\n<pre><code class=\"language-csharp\">var builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add service defaults &amp; Aspire components.\r\nbuilder.AddServiceDefaults();\r\nbuilder.AddMySqlDataSource(\"catalog\");\r\n\r\nar app = builder.Build();\r\n\r\napp.MapGet(\"/catalog\", async (MySqlConnection db) =&gt;\r\n{\r\n    const string sql = \"\"\"\r\n        SELECT Id, Name, Description, Price\r\n        FROM catalog\r\n        \"\"\";\r\n\r\n    return await db.QueryAsync&lt;CatalogItem&gt;(sql);\r\n});\r\n\r\napp.MapDefaultEndpoints();\r\n\r\napp.Run();</code></pre>\n<p>In addition, <code>Aspire.Hosting</code> support for MySQL resources has been added, making it easier than ever to spin up a MySQL container for local development, or connect to an existing MySQL instance.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\nvar catalogDb = builder.AddMySqlContainer(\"mysql\")\r\n    // Mount the SQL scripts directory into the container so that the init scripts run.\r\n    .WithVolumeMount(\"../DatabaseContainers.ApiService/data/mysql\", \"/docker-entrypoint-initdb.d\", VolumeMountType.Bind)\r\n    .AddDatabase(\"catalog\");</code></pre>\n<h3 id=\"component-and-hosting-support-for-mongodb\">Component and hosting support for MongoDB</h3>\n<p>Another community contribution, this time by <a href=\"https://github.com/ailtonguitar\">Ailton Pinto</a>, has brought support for MongoDB to Aspire via the new <code>Aspire.MongoDB.Driver</code> package. The component uses the <a href=\"https://www.nuget.org/packages/MongoDB.Driver\"><code>MongoDB.Driver</code></a> client library and, like the MySQL component, supports configuration, DI, tracing, logging, and health checks.</p>\n<pre><code class=\"language-csharp\">var builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add service defaults &amp; Aspire components.\r\nbuilder.AddServiceDefaults();\r\nbuilder.AddMongoDBClient(\"mydatabase\");\r\n\r\nar app = builder.Build();\r\n\r\napp.MapGet(\"/\", async (IMongoClient client) =&gt;\r\n{\r\n    // Use the client here\r\n    ...\r\n});\r\n\r\napp.MapDefaultEndpoints();\r\n\r\napp.Run();</code></pre>\n<p>On the hosting side, you can configure a MongoDB container using <code>AddMongoDBContainer</code>, or point at an existing instance using <code>AddMongoDBConnection</code>.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\nvar mongodb = builder.AddMongoDBContainer(\"mongodb\")\r\n    .AddDatabase(\"mydatabase\");\r\n\r\nvar myService = builder.AddProject&lt;Projects.MyService&gt;()\r\n    .WithReference(mongodb);</code></pre>\n<h3 id=\"azure-sdk-components-now-enable-distributed-tracing-by-default\">Azure SDK components now enable distributed tracing by default</h3>\n<p>The Aspire components for the Azure SDK now have distributed tracing enabled by default (except for the Azure Service Bus component). Using these components to connect to the currently supported Azure services will automatically contribute to your app&#8217;s distributed tracing output, helping to make it more observable.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/azure-tracing.png\" alt=\"A screenshot of the Aspire dashboard showing trace messages related to talking to Azure Storage Blob service\" /></p>\n<h2 id=\"deployment-updates\">Deployment updates</h2>\n<p>One of the great features of .NET Aspire is the ability for deployment tools to add support for the distributed application you describe and compose together in an Aspire AppHost project. It&#8217;s still very early days in this space but we&#8217;re seeing some exciting work already.</p>\n<h3 id=\"aspir8-a-community-developed-tool-for-deploying-net-aspire-apps-to-kubernetes\">Aspir8: A community-developed tool for deploying .NET Aspire apps to Kubernetes</h3>\n<p>We saw lots of feedback from folks interested in support for deploying Aspire apps to Kubernetes. In another fantastic showing of community-driven development, <a href=\"https://github.com/prom3theu5/aspirational-manifests\">Aspirate (Aspir8)</a> was created by GitHub user <a href=\"https://github.com/prom3theu5\">prom3theu5</a>. This .NET global tool leverages the <a href=\"https://learn.microsoft.com/dotnet/aspire/deployment/manifest-format\">Aspire manifest</a> to automate deploying Aspire apps to Kubernetes clusters. Be sure to check out the <a href=\"https://github.com/prom3theu5/aspirational-manifests\">project README</a> for more details, and follow along with the <a href=\"https://github.com/dotnet/aspire/issues/830\">GitHub issue in the Aspire repo</a>.</p>\n<h3 id=\"azure-developer-cli-azd-aspire-improvements\">Azure Developer CLI (azd) Aspire improvements</h3>\n<p>The <a href=\"https://learn.microsoft.com/azure/developer/azure-developer-cli/\">Azure Developer CLI (azd)</a> is an open-source tool that makes it easier to get your applications running in the cloud on Azure. We are working to ensure that <code>azd</code> enables the fastest and simplest way to get an Aspire app provisioned and deployed to Azure in minutes. In this release we are still primarily targeting Azure Container Apps.</p>\n<p>In this release, we added a few new features to better support Aspire deployments:</p>\n<ul>\n<li>Deploying Dockerfile projects configured with <code>AsDockerFileInManifest</code>.</li>\n<li>Deploying Dapr-related components. This is explained more in-detail in the <a href=\"#updates-for-dapr-support\">next section below</a>.</li>\n<li>Preliminary support for <code>pipeline config</code> to configure CI/CD deployment variables for Aspire apps.</li>\n</ul>\n<p>And a few other notable improvements made:</p>\n<ul>\n<li>Enabled admin user authentication by default for the provisioned Azure Container Registry. This avoids authorization related failures for users that are Classic Administrators in subscriptions not fully migrated to RBAC.</li>\n<li><code>docker</code> tooling is no longer required to be installed when only building and publishing .NET projects using <code>dotnet publish</code>.</li>\n</ul>\n<p>Get the latest azd release (1.5.1) by <a href=\"https://learn.microsoft.com/azure/developer/azure-developer-cli/install-azd\">installing or updating your Azure Developer CLI</a>.</p>\n<h2 id=\"updates-for-dapr-support\">Updates for Dapr support</h2>\n<p>For those wanting to use Aspire together with <a href=\"https://dapr.io/\">Dapr</a>, a number of improvements have been made in Preview 2.</p>\n<h3 id=\"dapr-application-ids-no-longer-need-to-be-specified\">Dapr application IDs no longer need to be specified</h3>\n<p>Dapr application IDs will now default to the resource names given to their respective projects. In addition, the resource name given to the Dapr sidecar is now derived from that of its respective project whereas, in Preview 1, the resource name was the application ID itself. This enables the project resource name and application ID to be the same value. You can still explicitly set the application ID to an explicit value, if desired.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\n// The Dapr application ID will default to \"servicea\".\r\nbuilder.AddProject&lt;Projects.DaprServiceA&gt;(\"servicea\")\r\n       .WithDaprSidecar();\r\n\r\n// The Dapr application ID is explicitly set to \"serviceb-dapr\".\r\nbuilder.AddProject&lt;Projects.DaprServiceB&gt;(\"serviceb\")\r\n       .WithDaprSidecar(\"serviceb-dapr\");</code></pre>\n<h3 id=\"dapr-components-as-first-class-aspire-resources\">Dapr components as first-class Aspire resources</h3>\n<p>.NET Aspire Preview 2 introduces <a href=\"https://docs.dapr.io/concepts/components-concept/\">Dapr components</a> as first-class resources which allows Aspire to make smarter decisions when running Dapr applications as well as enabling the same of other tools, such as those used for deployment.</p>\n<p>In Preview 1, you might configure Dapr resources for sidecars altogether with <code>DaprSidecarOptions</code>, where the sidecar will load all components found in the resources directory.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\n// Configure service A's sidecar to load components from the resources path.\r\nbuilder.AddProject&lt;Projects.DaprServiceA&gt;(\"servicea\")\r\n       .WithDaprSidecar(\r\n            new DaprSidecarOptions\r\n            {\r\n                AppId = \"service-a\",\r\n                ResourcesPaths = ImmutableHashSet&lt;string&gt;.Create(\"&lt;path to resources directory&gt;\")\r\n            });\r\n\r\n// Configure service B's sidecar to load components from the resources path.\r\nbuilder.AddProject&lt;Projects.DaprServiceB&gt;(\"serviceb\")\r\n       .WithDaprSidecar(\r\n            new DaprSidecarOptions\r\n            {\r\n                AppId = \"service-b\",\r\n                ResourcesPaths = ImmutableHashSet&lt;string&gt;.Create(\"&lt;path to resources directory&gt;\")\r\n            });</code></pre>\n<p>In Preview 2, you can create individual Dapr component resources and reference them from the projects which actually use them (via <code>WithReference()</code>). Aspire will ensure that the sidecars are configured to load their referenced components.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\nvar stateStore = builder.AddDaprComponent(\r\n    \"statestore\",\r\n    \"state.redis\",\r\n    new DaprComponentOptions { LocalPath = \"&lt;path to state store YAML file&gt;\" });\r\n\r\nvar pubSub = builder.AddDaprComponent(\r\n    \"pubsub\",\r\n    \"pubsub.redis\",\r\n    new DaprComponentOptions { LocalPath = \"&lt;path to pub-sub YAML file&gt;\" });\r\n\r\nbuilder.AddProject&lt;Projects.DaprServiceA&gt;(\"servicea\")\r\n       .WithDaprSidecar()\r\n       .WithReference(stateStore)\r\n       .WithReference(pubSub);\r\n\r\nbuilder.AddProject&lt;Projects.DaprServiceB&gt;(\"serviceb\")\r\n       .WithDaprSidecar()\r\n       .WithReference(pubSub);</code></pre>\n<p>For basic components, such as state stores and pub-sub, you need not create or specify a local component YAML path. Instead, the <code>AddDaprStateStore()</code> and <code>AddDaprPubSub()</code> methods create Dapr component resources of &#8220;generic&#8221; types, which indicate that Aspire should configure an appropriate component on the Dapr sidecar&#8217;s behalf when the application is run.</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\r\n\r\nvar stateStore = builder.AddDaprStateStore(\"statestore\");\r\nvar pubSub = builder.AddDaprPubSub(\"pubsub\");\r\n\r\nbuilder.AddProject&lt;Projects.DaprServiceA&gt;(\"servicea\")\r\n       .WithDaprSidecar()\r\n       .WithReference(stateStore)\r\n       .WithReference(pubSub);\r\n\r\nbuilder.AddProject&lt;Projects.DaprServiceB&gt;(\"serviceb\")\r\n       .WithDaprSidecar()\r\n       .WithReference(pubSub);</code></pre>\n<p>In the previous example, if Dapr is fully initialized on the machine, Aspire will configure the sidecars to use Redis components backed by the Dapr default Redis container. If, instead, Dapr was initialized &#8220;slim&#8221;, Aspire will configure the sidecars to use in-memory components. The real benefit to declaring individual Dapr component resources is it enables the tools, both for local development and deployment, to make better decisions about how Dapr is configured.</p>\n<h3 id=\"support-for-deploying-dapr-applications-to-azure-container-apps-aca-using-azure-developer-cli-azd\">Support for deploying Dapr applications to Azure Container Apps (ACA) using Azure Developer CLI (azd)</h3>\n<p>Preview 2 writes Dapr-specific resources to the application manifest, which enables tools like Azure Developer CLI (azd) to make Dapr-specific decisions during deployment. AZD can now be used to deploy and configure .NET Aspire applications that use Dapr to Azure Container Apps (ACA). Each project with a Dapr sidecar will have Dapr enabled in its corresponding ACA application and its Dapr settings will reflect the following <code>DaprSidecarOptions</code> properties (if set):</p>\n<ul>\n<li><code>AppId</code></li>\n<li><code>AppPort</code></li>\n<li><code>AppProtocol</code></li>\n<li><code>EnableApiLogging</code></li>\n<li><code>HttpMaxRequestSize</code></li>\n<li><code>HttpReadBufferSize</code></li>\n<li><code>LogLevel</code></li>\n</ul>\n<p>If your applications declare generic state store and pub-sub Dapr component references, azd will also configure the ACA environment with the Redis add-on and generate and deploy the Dapr component configuration in order to use it from your application. This means that basic Dapr applications can be deployed without any explicit configuration or provisioning of backing stores.</p>\n<blockquote><p>[!IMPORTANT] If your application declares Dapr component types beyond the generic state store and pub-sub types, those must still be manually configured in the ACA environment.</p></blockquote>\n<h2 id=\"community-contributions\">Community contributions</h2>\n<p>Despite only a short amount of time passing since we announced .NET Aspire and published <a href=\"https://github.com/dotnet/aspire\">the repo</a>, we&#8217;ve <a href=\"https://github.com/dotnet/aspire/pulse/monthly\">seen an incredible level of participation and contribution</a> from the .NET community. From the aforementioned new components and Aspir8 deployment tool in Preview 2, to the <a href=\"https://github.com/dotnet/aspire/pulls?q=is%3Aopen+is%3Apr+label%3Aarea-components+label%3Acommunity-contribution\">numerous community contributed components still being worked on</a> (look out for Preview 3&#8230;), detailed issues, and folks helping each other out in <a href=\"https://github.com/dotnet/aspire/discussions\">discussions</a>, people are taking part in shaping what Aspire will become. We&#8217;d like to send a huge &#8220;THANK YOU&#8221; to everybody who tried out Aspire and took the extra time to contribute.</p>\n<h2 id=\"whats-next\">What&#8217;s next?</h2>\n<p>We plan to release a new Aspire preview every month as we work towards a stable 8.0 release during the second quarter of 2024. Check back on the .NET blog for details of future releases or get involved over on the <a href=\"https://github.com/dotnet/aspire\">Aspire project on GitHub</a>. Official samples are available in the <a href=\"https://github.com/dotnet/aspire-samples\">dotnet/aspire-samples repo</a>.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>Thanks again for your response to .NET Aspire. We&#8217;re having a lot of fun working hard to make building distributed applications with .NET a great experience and would love for you to <a href=\"#getting-net-aspire-preview-2\">try out Preview 2</a> and let us know what you think.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-preview-2/\">Announcing .NET Aspire Preview 2</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"},"wfw:commentRss":"https://devblogs.microsoft.com/dotnet/announcing-dotnet-aspire-preview-2/feed/","slash:comments":"6","enclosure":{"@url":"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2023/12/dashboard-details-pane.mp4","@length":"4198752","@type":"video/mp4"}}]}}}