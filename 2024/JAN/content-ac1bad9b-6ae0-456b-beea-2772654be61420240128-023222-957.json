{"?xml":{"@version":"1.0","@encoding":"UTF-8"},"feed":{"@xmlns":"http://www.w3.org/2005/Atom","link":[{"@href":"https://martinfowler.com/feed.atom","@rel":"self"},{"@href":"https://martinfowler.com"}],"id":"https://martinfowler.com/feed.atom","title":"Martin Fowler","subtitle":"Master feed of news and updates from martinfowler.com","author":{"name":"Martin Fowler","email":"martin@martinfowler.com","uri":"https://martinfowler.com"},"updated":"2024-01-25T13:20:00-05:00","entry":[{"title":"Improving my Emacs experience with completion","link":{"@href":"https://martinfowler.com/articles/2024-emacs-completion.html"},"updated":"2024-01-25T13:20:00-05:00","id":"https://martinfowler.com/articles/2024-emacs-completion.html","author":{"name":"Martin Fowler","email":"martin@martinfowler.com","uri":"https://martinfowler.com"},"content":{"@type":"html","#text":"<p>I’ve been using Emacs for many years, using it for any writing for my website, writing my books, and most of my programming. (Exceptions have been IntellJ IDEA for Java and RStudio for R.) As such I’ve been happy to see a lot of activity in the last few years to improve Emacs’s capabilities, making it feel rather less than a evolutionary dead end. One of the biggest improvements to my Emacs experience is using regexs for completion lists.</p>\n\n<p>Many Emacs commands generate lists of things to pick from. I want to visit (open) a file I type the key combination to find a file, and Emacs pops up a list of candidate files in the minibuffer (a special area for to interact with commands). These file lists can be quite long, particularly should I ask for a list of all files in my current project.</p>\n\n<p>To specify the file I want, I can type some text to filter the list, so if I want to open the file <code>articles/simple/2024-emacs-completion.md</code> I might type <code>emacs</code>. I don’t have to get only that one file, just filtering to a small enough list is often enough.</p>\n\n<p>There’s a particular style of regex builder that I find the most helpful, one that separates regexs by spaces. This would allow me to type <code>articles emacs</code> to get a list of any file paths that contain “articles” and “emacs” in their file path. It essentially turns the string “articles emacs” into the regex <code>\\\\(articles\\\\).*\\\\(emacs\\\\)</code>. Better yet, such a matcher allows me to type the regexs in any order, so that “emacs articles” would also match. This way once the first regex pops up a filtered list, I can use a second regex to pick the one I want, even if the distinguishing regex is earlier than my initial search.</p>\n\n<p>Installing such a completion matcher has had a remarkable effect on my use of Emacs, since it makes it a breeze to filter large lists when interacting with commands. One of the most significant of these is how it changes my use of <code>M-x</code>, the key combo that brings up a list of all interactive Emacs functions. With a regex matcher to filter the list, it allows me to invoke an Emacs command using its name, with just a few keystrokes. That way I don’t have to remember the keyboard shortcut. With this, I invoke commands that I use less frequently through <code>M-x</code>. I don’t list all open buffers very often, so rather than try to remember the key combination for it, I just type <code>M-x ib</code> and <code>ibuffer</code> quickly pops up. This is helped that the command I use for <code>M-x</code> (<code>counsel-M-x</code>) inserts a “<code>^</code>” as the first character in the regex, which anchors the first regex to the beginning of the line. Since I prefix all my self-written functions with <code>mf-</code>, I can easily find my own functions, even if they have a long name. I wrote a command to remove the domain from a URL, I call it <code>mf-url-remove-domain</code> and can invoke it with <code>M-x mf url</code>.</p>\n\n<p>There are quite a few packages in Emacs that do this kind of matching, enough to be rather confusing. The one I’m using these days is <a href=\"https://oremacs.com/swiper/\">Ivy</a>. By default it uses a space-separated regex matcher, but one that doesn’t support any order. To configure it the way I like it I use</p>\n\n<pre><code>(setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))\n</code></pre>\n\n<p>Ivy is part of a package called <code>counsel</code> that includes various commands that enhance these kind of selections.</p>\n\n<p>Ivy isn’t the only tool that does this kind of thing. Indeed the world of completion tools in Emacs is one I find very confusing: lots of tools with overlaps and interactions that I don’t really understand. The tools in this territory include <a href=\"https://emacs-helm.github.io/helm/\">Helm</a>, <a href=\"https://company-mode.github.io/\">company</a>,  <a href=\"https://github.com/minad/vertico\">Vertico</a>, and <a href=\"https://github.com/minad/consult\">Consult</a>. Mastering Emacs has an article on <a href=\"https://www.masteringemacs.org/article/understanding-minibuffer-completion\">Understanding Minibuffer Completion</a>, but it doesn’t explain how the mechanisms it talks about fit in with what Ivy does, and I haven’t spent the time to figure it all out.</p>\n\n<p>And as a general note, I strongly recommend the book <a href=\"https://www.masteringemacs.org/\">Mastering Emacs</a> to learn how to use this incredible tool. Emacs has so many capabilities, that even a decades-old user like me found that book led to “I didn’t know it could do that” moments.</p>\n\n<p>For those that are curious, here’s the relevant bits of my Emacs config</p>\n\n<pre><code>(use-package ivy\n  :demand t\n  :diminish ivy-mode\n  :config\n  (ivy-mode 1)\n  (counsel-mode 1)\n  (setq ivy-use-virtual-buffers t)\n  (setq ivy-use-selectable-prompt t)\n  (setq ivy-ignore-buffers '(\\\\` \" \"\\\\`\\\\*magit\"))\n  (setq ivy-re-builders-alist '(\n                                (t . ivy--regex-ignore-order)\n                                ))\n  (setq ivy-height 10)\n  (setq counsel-find-file-at-point t)\n  (setq ivy-count-format \"(%d/%d) \"))\n\n(use-package counsel\n  :bind (\n         (\"C-x C-b\" . ivy-switch-buffer)\n         (\"C-x b\" . ivy-switch-buffer)\n         (\"M-r\" . counsel-ag)\n         (\"C-x C-d\" . counsel-dired)\n         (\"C-x d\" . counsel-dired)\n         )\n  :diminish\n  :config\n  (global-set-key [remap org-set-tags-command] #'counsel-org-tag))\n\n(use-package swiper\n  :bind((\"M-C-s\" . swiper)))\n\n(use-package ivy-hydra)\n</code></pre>\n\n"}},{"title":"Onboarding bottleneck: creating a path to effectiveness","link":{"@href":"https://martinfowler.com/articles/bottlenecks-of-scaleups/06-onboarding.html#exit"},"updated":"2024-01-24T10:45:00-05:00","id":"tag:martinfowler.com,2024-01-24:Onboarding-bottleneck--creating-a-path-to-effectiveness","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/06-onboarding.html#exit'><img src = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/card.png' width = ''></img></a></div>\n\n<p><b class = 'author'>Tim and Premand</b> begin their discussion of how to get out of the\n       difficulties of onboarding by explaining how to <a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/06-onboarding.html#exit'>create a path to\n       effectiveness</a> for new hires. Such a path outlines the needs of employee\n       and how the onboarding process should fulfill them.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/06-onboarding.html#exit'>more…</a></p>"}},{"title":"Bottlenecks of  Scaleups #06: Onboarding","link":{"@href":"https://martinfowler.com/articles/bottlenecks-of-scaleups/06-onboarding.html"},"updated":"2024-01-23T09:13:00-05:00","id":"tag:martinfowler.com,2024-01-23:Bottlenecks-of--Scaleups--06--Onboarding","content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/06-onboarding.html'><img src = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/card.png' width = ''></img></a></div>\n\n<p>The last year has been a hard one for the technology industry, which\n      faced its greatest waves of cutbacks and layoffs since the dotcom crash at\n      the beginning of the century. As 2024 begins, we're seeing the early signs of a\n      turn-around, which hopefully means technology organizations will soon be thinking of\n      hiring again. Should such happy days return, firms will again run into\n      the common problem of\n      taking too long for new hires to become effective. <b class = 'author'>Tim\n      Cochran and Premanand Chandrasekaran</b> address this in the sixth part of our\n      series on the bottlenecks of scaleups. In this first installment, Tim and Prem\n      look the signs that a growing organization is <a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/06-onboarding.html'>running into this bottleneck</a>.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/06-onboarding.html'>more…</a></p>"}},{"title":"A major revision of Continuous Integration","link":{"@href":"https://martinfowler.com/articles/continuousIntegration.html"},"updated":"2024-01-18T10:01:00-05:00","id":"tag:martinfowler.com,2024-01-18:A-major-revision-of-Continuous-Integration","content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/continuousIntegration.html'><img src = 'https://martinfowler.com/articles/continuousIntegration/card.png' width = ''></img></a></div>\n\n<p>At the turn of the century, I was lucky to involved in several\n       projects that developed the practice of Continuous Integration. I wrote\n       up our lessons from this work in article on my website, where it\n       continues to be a oft-referenced resource for this important practice.\n       Late last year a colleague contacted me to say that the article, now\n       nearly twenty years old, was still useful, but was showing its age. He\n       sent me some suggested revisions, and I used this as a trigger to do <a href = 'https://martinfowler.com/articles/continuousIntegration.html'>a\n       thorough revision of the article</a>, considering every section in the\n       original, and adding new ones to deal with issues that have appeared in the last\n       two decades.</p>\n\n<p>During those decades Feature Branching has been widely adopted in the\n       industry. Many colleagues of mine feel that Continuous Integration is a\n       better fit for many teams, I hope this article will help readers assess\n       if this is the case, and if so, how to implement Continuous Integration\n       effectively.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/continuousIntegration.html'>more…</a></p>"}},{"title":"Bliki: Legacy Seam","link":{"@href":"https://martinfowler.com/bliki/LegacySeam.html"},"updated":"2024-01-04T09:13:00-05:00","id":"https://martinfowler.com/bliki/LegacySeam.html","category":{"@term":"bliki"},"content":{"@type":"html","#text":"\n<p>When working with a legacy system it is valuable to identify and create seams:\n  places where we can alter the behavior of the system without editing\n  source code. Once we've found a seam, we can use it to break dependencies to\n  simplify testing, insert probes to gain observability, and redirect program\n  flow to new modules as part of legacy displacement.</p>\n\n<p>Michael Feathers coined the term “seam” in the context of legacy systems in\n  his book <a href=\"https://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0131177052&amp;linkCode=as2&amp;tag=martinfowlerc-20\">Working Effectively with Legacy Code</a>. His definition: <b>“a seam is a place\n  where you can alter behavior in your program without editing in that place”</b>.</p>\n\n<p>Here's an example of where a seam would be handy. Imagine some code to\n  calculate the price of an order.</p>\n\n<pre>// TypeScript\nexport async function calculatePrice(order:Order) {\n  const itemPrices = order.items.map(i =&gt; calculateItemPrice(i))\n  const basePrice = itemPrices.reduce((acc, i) =&gt; acc + i.price, 0)\n  const discount = calculateDiscount(order)\n  const shipping = await <span class=\"highlight\">calculateShipping</span>(order)\n  const adjustedShipping = applyShippingDiscounts(order, shipping)\n  return basePrice + discount + adjustedShipping\n}\n</pre>\n\n<p>The function <code>calculateShipping</code> hits an external service, which is slow (and\n  expensive), so we don't want to hit it when testing. Instead we want to\n  introduce a <a href=\"/bliki/TestDouble.html\">stub</a>, so we can provide a canned and deterministic response for\n  each of the testing scenarios. Different tests may need different responses\n  from the function, but we can't edit the code of\n  <code>calculatePrice</code> inside the test. Thus we need to introduce a seam around the call\n  to <code>calculateShipping</code>, something that will allow our test to\n  redirect the call to the stub.</p>\n\n<p>One way to do this is to pass the function for\n  <code>calculateShipping</code> as a parameter</p>\n\n<pre>export async function calculatePrice(order:Order, <span class=\"highlight\">shippingFn</span>: (o:Order) =&gt; Promise&lt;number&gt;) {\n  const itemPrices = order.items.map(i =&gt; calculateItemPrice(i))\n  const basePrice = itemPrices.reduce((acc, i) =&gt; acc + i.price, 0)\n  const discount = calculateDiscount(order)\n  const shipping = await <span class=\"highlight\">shippingFn</span>(order)\n  const adjustedShipping = applyShippingDiscounts(order, shipping)\n  return basePrice + discount + adjustedShipping\n}\n</pre>\n\n<p>A unit test for this function can then substitute a simple stub.</p>\n\n<pre>const shippingFn = async (o:Order) =&gt; 113\nexpect(await calculatePrice(sampleOrder, shippingFn)).toStrictEqual(153)</pre>\n\n<p>Each seam comes with an <b>enabling point</b>: “a place where you can\n  make the decision to use one behavior or another” <a href=\"https://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0131177052&amp;linkCode=as2&amp;tag=martinfowlerc-20\">[WELC]</a>. Passing the function as\n  parameter opens up an enabling point in the caller of \n  <code>calculateShipping</code>.</p>\n\n<p>This now makes testing a lot easier, we can put in different values of\n  shipping costs, and check that <code>applyShippingDiscounts</code> responds\n  correctly. Although we had to change the original source code to introduce the\n  seam, any further changes to that function don't require us to alter that\n  code, the changes all occur in the enabling point, which lies in the test code.</p>\n\n<p>Passing a function as a parameter isn't the only way we can introduce a\n  seam. After all, changing the signature of <code>calculateShipping</code> may\n  be fraught, and we may not want to thread the shipping function parameter\n  through the legacy call stack in the production code. In this case a lookup\n  may be a better approach, such as using a service locator.</p>\n\n<pre>export async function calculatePrice(order:Order) {\n  const itemPrices = order.items.map(i =&gt; calculateItemPrice(i))\n  const basePrice = itemPrices.reduce((acc, i) =&gt; acc + i.price, 0)\n  const discount = calculateDiscount(order)\n  const shipping = await <span class=\"highlight\">ShippingServices.calculateShipping</span>(order)\n  const adjustedShipping = applyShippingDiscounts(order, shipping)\n  return basePrice + discount + adjustedShipping\n}\n</pre>\n\n<pre>class ShippingServices {\n  static #soleInstance: ShippingServices\n  static init(arg?:ShippingServices) {\n    this.#soleInstance = arg || new ShippingServices()\n  }\n  static async calculateShipping(o:Order) {return this.#soleInstance.calculateShipping(o)}\n  async calculateShipping(o:Order)  {return legacy_calcuateShipping(o)}\n  // ... more services\n</pre>\n\n<p>The locator allows us to override the behavior by defining a subclass.</p>\n\n<pre>class ShippingServicesStub extends ShippingServices {\n  calculateShippingFn: typeof ShippingServices.calculateShipping =\n     (o) =&gt; {throw new Error(\"no stub provided\")}\n  async calculateShipping(o:Order) {return this.calculateShippingFn(o)}\n  // more services\n</pre>\n\n<p>We can then use an enabling point in our test</p>\n\n<pre>const stub = new ShippingServicesStub()\nstub.calculateShippingFn = async (o:Order) =&gt; 113\nShippingServices.init(stub)\nexpect(await calculatePrice(sampleOrder)).toStrictEqual(153)</pre>\n\n<p>This kind of service locator is a classical object-oriented way to set up a\n  seam via function lookup, which I'm showing here to indicate the kind of\n  approach I might use in other languages, but I wouldn't use this approach in\n  TypeScript or JavaScript. Instead I'd put something like this into a module.</p>\n\n<pre>export let calculateShipping = legacy_calculateShipping\n\nexport function reset_calculateShipping(fn?: typeof legacy_calculateShipping) {\n  calculateShipping = fn || legacy_calculateShipping\n}\n</pre>\n\n<p>We can then use the code in a test like this</p>\n\n<pre>const shippingFn = async (o:Order) =&gt; 113\nreset_calculateShipping(shippingFn)\nexpect(await calculatePrice(sampleOrder)).toStrictEqual(153)</pre>\n\n<p>As the final example suggests, the best mechanism to use for a seam depends\n  very much on the language, available frameworks, and indeed the style of the\n  legacy system. Getting a legacy system under control means learning how to\n  introduce various seams into the code to provide the right kind of enabling\n  points while minimizing the disturbance to the legacy software. While a\n  function call is a simple example of introducing such seams, they can be much\n  more intricate in practice. A team can spend several months figuring out how\n  to introduce seams into a well-worn legacy system. The best mechanism for\n  adding seams to a legacy system may be different to what we'd do for similar\n  flexibility in a green field.</p>\n\n<p>Feathers's book focuses primarily on getting a legacy system under test, as\n  that is often the key to being able to work with it in a sane way. But seams\n  have more uses than that. Once we have a seam, we are in the position to place\n  probes into the legacy system, allowing us to increase the observability of\n  the system. We might want to monitor calls to <code>calculateShipping</code>,\n  figuring out how often we use it, and capturing its results for separate analysis.</p>\n\n<p>But probably the most valuable use of seams is that they\n  allow us to migrate behavior away from the legacy.\n  A seam might redirect high-value customers to a different shipping calculator.\n  Effective legacy displacement is founded on introducing seams into the legacy\n  system, and using them to gradually move behavior into a more modern environment.</p>\n\n<p>Seams are also something to think about as we write new software, after all\n  every new system will become legacy sooner or later. Much of my design advice\n  is about building software with appropriately placed seams, so we can easily test,\n  observe, and enhance it. If we write our software with testing in mind, we\n  tend to get a good set of seams, which is a reason why <a href=\"/bliki/TestDrivenDevelopment.html\">Test Driven Development</a> is such a useful technique.</p>\n"}},{"title":"My favorite musical discoveries of 2023","link":{"@href":"https://martinfowler.com/articles/2023-music.html"},"updated":"2024-01-02T18:42:00-05:00","id":"tag:martinfowler.com,2024-01-02:My-favorite-musical-discoveries-of-2023","content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/2023-music.html'><img src = 'https://martinfowler.com/articles/2023-music/card.png' width = ''></img></a></div>\n\n<p>Another year, another time to pick <a href = 'https://martinfowler.com/articles/2023-music.html'>six favorite musical\n     discoveries</a>. 2023 includes ambient bluegrass, Afro-Andean funk, Northumbrian\n     smallpipes, dancing kora, and Ukrainian folk jazz.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/2023-music.html'>more…</a></p>"}},{"title":"Bliki: Software And Engineering","link":{"@href":"https://martinfowler.com/bliki/SoftwareAndEngineering.html"},"updated":"2023-12-13T00:00:00-05:00","id":"https://martinfowler.com/bliki/SoftwareAndEngineering.html","category":{"@term":"bliki"},"content":{"@type":"html","#text":"\n<p>Throughout my career, people have compared software development to\n  “traditional” engineering, usually in a way to scold software developers for not\n  doing a proper job. As someone who got his degree in Electronic Engineering,\n  this resonated with me early in my career. But this way of thinking is flawed\n  because most people have the wrong impression of how engineering works in\n  practice.</p>\n\n<p><a href=\"https://vanderburg.org\">Glenn Vanderburg</a> has spent a lot of time digging\n  into these misconceptions, and I strongly urge anyone who wants to compare\n  software development to engineering to watch his talk <a href=\"https://www.youtube.com/watch?v=RhdlBHHimeM\">Real Software Engineering</a>. It's also well worth\n  listening to <a href=\"https://podcast.oddly-influenced.dev/episodes/glenn-vanderburg-on-engineering\">his interview on the podcast Oddly\n  Influenced.</a> Sadly I've not been able to persuade him to write this\n  material down - it would make a great article.</p>\n\n<p>Another good thinker on this relationship is Hillel Wayne. He interviewed a\n  bunch of “crossovers” - people who had worked both in traditional engineering\n  and in software. He wrote up what he learned in a series of essays, starting\n  with <a href=\"https://www.hillelwayne.com/post/are-we-really-engineers/\">Are We Really Engineers?</a></p>\n"}},{"title":"Bliki: Test Driven Development","link":{"@href":"https://martinfowler.com/bliki/TestDrivenDevelopment.html"},"updated":"2023-12-11T14:40:00-05:00","id":"https://martinfowler.com/bliki/TestDrivenDevelopment.html","category":{"@term":"bliki"},"content":{"@type":"html","#text":"\n<p>Test-Driven Development (TDD) is a technique for building\n  software that guides software development by writing tests. It was\n  developed by <a href=\"https://substack.com/@kentbeck\">Kent\n  Beck</a> in the late 1990's as part of\n  Extreme Programming. In essence we follow three simple\n  steps repeatedly:</p>\n\n<ul>\n<li>Write a test for the next bit of functionality you want to add.</li>\n\n<li>Write the functional code until the test passes.</li>\n\n<li>Refactor both new and old code to make it well structured.</li>\n</ul>\n\n<div class=\"figure \"><img src=\"https://martinfowler.com/bliki/images/test-driven-development/card.png\">\n<p class=\"photoCaption\"></p>\n</div>\n\n<p>Although these three steps, often summarized as <i>Red - Green -\n  Refactor</i>, are the heart of the process, there's also a vital initial\n  step where we write out a list of test cases first. We then pick one of these\n  tests, apply red-green-refactor to it, and once we're done pick the next.\n  Sequencing the tests properly is a skill, we want to pick tests that drive us\n  quickly to the salient points in the design. During the process we should add\n  more tests to our lists as they occur to us.</p>\n\n<p>Writing the test first, what <a href=\"https://www.amazon.com/gp/product/0321278658/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321278658&amp;linkCode=as2&amp;tag=martinfowlerc-20\">XPE2</a> calls\n  Test-First Programming, provides two main benefits. Most obviously it's a way\n  to get <a href=\"/bliki/SelfTestingCode.html\">SelfTestingCode</a>, since we can only write some functional\n  code in response to making a test pass. The second benefit is that thinking\n  about the test first forces us to think about the interface to the code first.\n  This focus on interface and how you use a class helps us separate interface\n  from implementation, a key element of good design that many programmers\n  struggle with.</p>\n\n<p>The most common way that I hear to screw up TDD is neglecting\n  the third step. Refactoring the code to keep it clean is a key part\n  of the process, otherwise we just end up with a messy aggregation of\n  code fragments. (At least these will have tests, so it's a less\n  painful result than most failures of design.)</p>\n\n<div class=\"furtherReading\">\n<h2>Further Reading</h2>\n\n<p>Kent's summary of the <a href=\"https://tidyfirst.substack.com/p/canon-tdd\">canonical way to do TDD</a>\n    is the key online summary.</p>\n\n<p>For more depth, head to Kent Beck's book\n    <a href=\"https://www.amazon.com/gp/product/0321146530/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321146530&amp;linkCode=as2&amp;tag=martinfowlerc-20\">Test-Driven Development</a>.</p>\n\n<p>The relevant chapter of James Shore's <a href=\"https://www.amazon.com/gp/product/1492080691/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1492080691&amp;linkCode=as2&amp;tag=martinfowlerc-20\">The\n    Art of Agile Development</a> is another sound description that also\n    connects it to the rest of effective agile development. James also wrote a\n    series of screencasts called <a href=\"http://www.jamesshore.com/Blog/Lets-Play\">Let's Play TDD</a>.</p>\n</div>\n\n<div class=\"revisions\">\n<h2>Revisions</h2>\n\n<p>My original post of this page was 2005-03-05. Inspired by Kent's\n    canonical post, I updated it on 2023-12-11</p>\n</div>\n"}},{"title":"Bliki: Diff Debugging","link":{"@href":"https://martinfowler.com/bliki/DiffDebugging.html"},"updated":"2023-12-04T00:00:00-05:00","id":"https://martinfowler.com/bliki/DiffDebugging.html","category":{"@term":"bliki"},"content":{"@type":"html","#text":"\n<p>Regression bugs are newly appeared bugs in features of the software that have been around\n  for a while. When hunting them, it usually valuable to figure out which change\n  in the software caused them to appear. Looking at that change can give\n  invaluable clues about where the bug is and how to squash it. There isn't a\n  well-known term for this form of investigation, but I call it Diff Debugging.</p>\n\n<p>Diff debugging only works if we have our code in version control, but\n  fortunately these days that's the norm. But there are some more things that\n  are needed to make it work effectively. We need <a href=\"/bliki/ReproducibleBuild.html\">Reproducible Builds</a>, so that we can run old versions of\n  the software easily. It helps greatly to have small commits, due to <a href=\"/articles/branching-patterns.html#integration-frequency\">high-frequency\n  integration</a>. That way when we find the guilty commit, we can more easily\n  narrow down what happened.</p>\n\n<p>To find the commit that bred the bug, we begin by finding any past version\n  without the bug. Mark this as a <i>last-good</i> version and the current\n  version as the <i>earliest-bad</i>. Then find the commit half-way between the\n  two and see if the bug is there. If so then this commit becomes the earliest-bad,\n  otherwise it becomes the last-good. Repeat the process (which is a\n  “half-interval” or “binary” search) until we've got the guilty commit.</p>\n\n<p>If we use git, then the <a href=\"https://git-scm.com/docs/git-bisect/\">git\n  bisect</a> command will automate much of this for us. If we can write a test\n  that will show the presence of the bug, then git bisect can use that too,\n  automating the whole process of finding the guilty commit.</p>\n\n<p>I often find diff debugging to be useful within a programming session. If I\n  have slow tests that take a few minutes to run, I might program for\n  half-an-hour running only a subset of the most relevant tests. As long as I\n  commit after every green test run, I can use diff debugging should one of\n  those slower tests fail. Such is the value of committing extremely frequently,\n  even if they are so small that I feel its best to squash them for the long-term\n  history. Some IDEs make this easier by keeping a local history automatically\n  that is finer-grained than the commits to version control.</p>\n\n<div class=\"revisions\">\n<h2>Revisions</h2>\n\n<p>I originally posted this page on 2004-06-01. In its original form it was\n    more of a casual experience report. I rewrote it on 2023-12-04 to make it\n    more like a definition of the term. Diff debugging isn't a term that's\n    caught on much in the industry, but I haven't seen a another term generally\n    used to describe it.</p>\n</div>\n"}},{"title":"How to tackle unreliability of coding assistants","link":{"@href":"https://martinfowler.com/articles/exploring-gen-ai.html#memo-08"},"updated":"2023-11-28T10:21:00-05:00","id":"tag:martinfowler.com,2023-11-28:How-to-tackle-unreliability-of-coding-assistants","content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/exploring-gen-ai.html#memo-08'><img src = 'https://martinfowler.com/articles/exploring-gen-ai/assistant-persona.png' width = ''></img></a></div>\n\n<p>Over the last year, lots of developers have incorporated LLM coding\n     assistants into their work, finding them a useful tool. But one of the\n     problems of these tools is that they are unreliable, often coming up with\n     poor or outright wrong-headed suggestions. <b class = 'author'>Birgitta\n     B&#xF6;ckeler</b> continues her exploration of GenAI for developers by\n     passing on what she's learned about <a href = 'https://martinfowler.com/articles/exploring-gen-ai.html#memo-08'>how think about this unreliability</a>, and\n     why it may be good to call your LLM tool &#x201C;Dusty&#x201D;. </p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/exploring-gen-ai.html#memo-08'>more…</a></p>"}},{"title":"Patterns of Distributed Systems is published by Pearson","link":{"@href":"https://martinfowler.com/books/patterns-distributed.html"},"updated":"2023-11-24T14:11:00-05:00","id":"tag:martinfowler.com,2023-11-24:Patterns-of-Distributed-Systems-is-published-by-Pearson","content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/books/patterns-distributed.html'><img src = 'https://martinfowler.com/books/joshi.jpg' width = '150px'></img></a></div>\n\n<p>During the last four years, my colleague <b class = 'author'>Unmesh Joshi</b>\n     been developing a collection of patterns to help us all better understand\n     how modern distributed systems work. We've been publishing drafts of these\n     patterns on this site. Now these have turned into a <a href = 'https://martinfowler.com/books/patterns-distributed.html'>book, published\n     by Addison-Wesley</a> in my signature series. As such, we've now removed\n     the work-in-progress drafts from this site, and have replaced them with a\n     <a href = '/articles/patterns-of-distributed-systems/'>catalog of pattern\n     summaries</a>. For those with a subscription to oreilly.com, we have deep\n     links from the summaries to the relevant chapter of the online book.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/books/patterns-distributed.html'>more…</a></p>"}},{"title":"Three reasons a liberal arts degree helped me succeed in tech","link":{"@href":"https://martinfowler.com/articles/2023-liberal-arts.html"},"updated":"2023-11-09T10:12:00-05:00","id":"tag:martinfowler.com,2023-11-09:Three-reasons-a-liberal-arts-degree-helped-me-succeed-in-tech","content":{"@type":"html","#text":"\n<p>My colleague <b class = 'author'>Sannie Lee</b> has met many students who are looking into\n     getting into technology, taking narrow professionally-oriented majors.\n     Sannie, however, has found that a traditional liberal-arts degree <a href = 'https://martinfowler.com/articles/2023-liberal-arts.html'>has given\n     her skills</a> that are highly relevant to her work as a product manager.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/2023-liberal-arts.html'>more…</a></p>"}},{"title":"Enhancing the Headless Component","link":{"@href":"https://martinfowler.com/articles/headless-component.html#AdaptingToANewUiRequirement"},"updated":"2023-11-07T10:00:00-05:00","id":"tag:martinfowler.com,2023-11-07:Enhancing-the-Headless-Component","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/headless-component.html#AdaptingToANewUiRequirement'><img src = 'https://martinfowler.com/articles/headless-component/headless-component.png' width = ''></img></a></div>\n\n<p>In the <a href = 'https://martinfowler.com/articles/headless-component.html#AdaptingToANewUiRequirement'>second (and final) part</a> of his explanation of React Headless Components\n     <b class = 'author'>Juntao Qiu</b> explores how a headless component allows us to\n     create a visually different component that does the same base behavior, and\n     how it encourages better factoring as we extend base behavior further.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/headless-component.html#AdaptingToANewUiRequirement'>more…</a></p>"}},{"title":"Current thoughts on social media","link":{"@href":"https://martinfowler.com/articles/2023-social-media.html"},"updated":"2023-11-02T12:33:00-04:00","id":"tag:martinfowler.com,2023-11-02:Current-thoughts-on-social-media","content":{"@type":"html","#text":"\n<p>It's now been a year since The Muskover, what does my use of social\n     media look like now, both as a reader and a writer?</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/2023-social-media.html'>more…</a></p>"}},{"title":"Headless Component: a pattern for composing React UIs","link":{"@href":"https://martinfowler.com/articles/headless-component.html"},"updated":"2023-11-01T10:34:00-04:00","id":"tag:martinfowler.com,2023-11-01:Headless-Component--a-pattern-for-composing-React-UIs","content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/headless-component.html'><img src = 'https://martinfowler.com/articles/headless-component/headless-component.png' width = ''></img></a></div>\n\n<p>As React UI controls become more sophisticated, complex logic can get\n     intertwined with the visual representation. This makes it hard to reason\n     about the behavior of the component, hard to test it, and necessary to\n     build similar components that need a different look. <b class = 'author'>Juntao\n     Qiu</b> tackles this by using a <a href = 'https://martinfowler.com/articles/headless-component.html'>Headless Component</a>, which\n     extracts all non-visual logic and state management, separating the brain of\n     a component from its looks.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/headless-component.html'>more…</a></p>"}},{"title":"How is GenAI different from other code generators?","link":{"@href":"https://martinfowler.com/articles/exploring-gen-ai.html#memo-07"},"updated":"2023-09-19T08:57:00+01:00","id":"tag:martinfowler.com,2023-09-19:How-is-GenAI-different-from-other-code-generators-","content":{"@type":"html","#text":"\n<p>How is code generation with GenAI different from more \"traditional\" code\n     generators? The newest memo in  <b class = 'author'>Birgitta B&#xF6;ckeler's</b>\n     explorations of GenAI talks about <a href = 'https://martinfowler.com/articles/exploring-gen-ai.html#memo-07'>abstraction\n     levels</a> in software engineering, and on which levels GenAI sits in the\n     translation of our thoughts into zeros and ones.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/exploring-gen-ai.html#memo-07'>more…</a></p>"}},{"title":"Technology Strategy for Emerging Technologies and Markets","link":{"@href":"https://martinfowler.com/articles/creating-integrated-tech-strategy.html#RespondingToTheEverChangingFuture"},"updated":"2023-08-24T09:44:00-04:00","id":"tag:martinfowler.com,2023-08-24:Technology-Strategy-for-Emerging-Technologies-and-Markets","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#RespondingToTheEverChangingFuture'><img src = 'https://martinfowler.com/articles/creating-integrated-tech-strategy/card.png' width = ''></img></a></div>\n\n<p><b class = 'author'>Sarah Taraporewalla</b> completes her study of building a\n     technology strategy that's integrated with strategic business interests.\n     This final strategic direction considers <a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#RespondingToTheEverChangingFuture'>the ever-changing future</a>,\n     suggesting lines of inquiry to consider the impact of new\n     technologies, market trends, and broader social-political changes. </p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#RespondingToTheEverChangingFuture'>more…</a></p>"}},{"title":"Demo Front-End: A front-end application to test and explore an API","link":{"@href":"https://martinfowler.com/articles/demo-front-end.html"},"updated":"2023-08-23T10:37:00-04:00","id":"tag:martinfowler.com,2023-08-23:Demo-Front-End--A-front-end-application-to-test-and-explore-an-API","content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/demo-front-end.html'><img src = 'https://martinfowler.com/articles/demo-front-end/card.png' width = ''></img></a></div>\n\n<p>Many software teams create services exposed as APIs, designed to be\n     consumed by other software and thus without any user-interface. Such\n     services are hard to demonstrate, as they effectively just dump pages of\n     JSON. A <a href = 'https://martinfowler.com/articles/demo-front-end.html'>demo front-end</a> is a simple user-interface just used to\n     manipulate such an API. <b class = 'author'>Matteo Vaccari</b> describes how and\n     why to build one - showing its usefulness both in explaining the\n     API's capabilities to stakeholders and to help client developers explore\n     how to interact with the API.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/demo-front-end.html'>more…</a></p>"}},{"title":"Strategic Directions supporting the people","link":{"@href":"https://martinfowler.com/articles/creating-integrated-tech-strategy.html#SupportingThePeople"},"updated":"2023-08-22T11:22:00-04:00","id":"tag:martinfowler.com,2023-08-22:Strategic-Directions-supporting-the-people","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#SupportingThePeople'><img src = 'https://martinfowler.com/articles/creating-integrated-tech-strategy/card.png' width = ''></img></a></div>\n\n<p>Having a robust digital talent strategy is a competitive advantage in\n     today&#x2019;s fiercely competitive market. This enables businesses to have the\n     right talent and have the right competencies to meet current and future\n     demand to meet business goals or to stay on track for digital\n     transformation aspirations. <b class = 'author'>Sarah Taraporewalla</b> continues\n     her article on how to create an integrated business and technology strategy\n     by looking at questions raised by <a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#SupportingThePeople'>two strategic directions that\n     support people</a>: culture and internal systems.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#SupportingThePeople'>more…</a></p>"}},{"title":"Bottlenecks of Scaleups #05: Resilience and Observability","link":{"@href":"https://martinfowler.com/articles/bottlenecks-of-scaleups/05-resilience-and-observability.html"},"updated":"2023-08-22T10:21:00-04:00","id":"tag:martinfowler.com,2023-08-22:Bottlenecks-of-Scaleups--05--Resilience-and-Observability","content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/05-resilience-and-observability.html'><img src = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/card-resilience-observability.png' width = ''></img></a></div>\n\n<p>Here is a new article in the bottlenecks of scaleups series, looking at\n     resilience and observability. Startups tend to only address resilience when\n     their systems are already down, often taking a very reactive approach. For\n     a scaleup, <a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/05-resilience-and-observability.html'>excessive system downtime represents a significant\n     bottleneck</a> to the organization, both from the effort expended on\n     restoring function and also from the impact of customer dissatisfaction.\n     <b class = 'author'>Punit Lad</b> and <b class = 'author'>Carl Nygard</b> explain that to\n     move past this, resilience needs to be built into the business objectives,\n     which will influence the architecture, design, product management, and even\n     governance of business systems. </p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/05-resilience-and-observability.html'>more…</a></p>"}},{"title":"TDD with GitHub Copilot","link":{"@href":"https://martinfowler.com/articles/exploring-gen-ai.html#memo-06"},"updated":"2023-08-17T14:44:00-04:00","id":"tag:martinfowler.com,2023-08-17:TDD-with-GitHub-Copilot","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<p>At Thoughtworks, we are strong practitioners of <a href = '/bliki/TestDrivenDevelopment.html'>Test Driven Development</a> (TDD).\n     Naturally this leads to the question of how generative AI can help with\n     this technique. <b class = 'author'>Paul Sobocinski</b> writes a brief memo\n     explaining how some of our teams have used <a href = 'https://martinfowler.com/articles/exploring-gen-ai.html#memo-06'>TDD with GitHub\n     Copilot</a>. As ever, co-pilot can't be relied on to fly the plane, but\n     can suggest some useful ideas for the red and green steps. It isn't\n     very helpful for the all-important refactoring step.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/exploring-gen-ai.html#memo-06'>more…</a></p>"}},{"title":"Final parts of the cost bottleneck of scaleups","link":{"@href":"https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#ReviewAndGovernTechnologyPortfolio"},"updated":"2023-08-17T00:00:00+00:00","id":"tag:martinfowler.com,2023-08-17:Final-parts-of-the-cost-bottleneck-of-scaleups","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#ReviewAndGovernTechnologyPortfolio'><img src = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/card-cost.png' width = ''></img></a></div>\n\n<p><b class = 'author'>Sofia Tania </b> and <b class = 'author'> Stefania\n       Stefansdottir</b> complete their examination of how to <a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#ReviewAndGovernTechnologyPortfolio'>overcome the\n       bottleneck that costs impose on a scaleup</a>. In this final installment,\n       they look at how to review and govern the technology portfolio,\n       optimize rates, and provide a general view of cost efficiency initiatives\n       during the life-cycle of a scaleup.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#ReviewAndGovernTechnologyPortfolio'>more…</a></p>"}},{"title":"Strategic directions: minimizing risk and being data driven ","link":{"@href":"https://martinfowler.com/articles/creating-integrated-tech-strategy.html#risk"},"updated":"2023-08-16T15:49:00-04:00","id":"tag:martinfowler.com,2023-08-16:Strategic-directions--minimizing-risk-and-being-data-driven-","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#risk'><img src = 'https://martinfowler.com/articles/creating-integrated-tech-strategy/card.png' width = ''></img></a></div>\n\n<p>Time for <a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#risk'>two more strategic directions</a> from <b class = 'author'>Sarah\n     Taraporewalla</b>. These look at the questions that need to be investigated when\n     reducing cost, minimizing operation risk, and enabling data-driven decision\n     making.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#risk'>more…</a></p>"}},{"title":"Bottlenecks of Scaleups Webinar: Sep 7 2023","link":{"@href":"https://www.thoughtworks.com/about-us/events/webinars/scaling-bottlenecks--technology-mistakes-every-growing-startup-m"},"updated":"2023-08-15T14:35:00-04:00","id":"tag:martinfowler.com,2023-08-15:Bottlenecks-of-Scaleups-Webinar--Sep-7-2023","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://www.thoughtworks.com/about-us/events/webinars/scaling-bottlenecks--technology-mistakes-every-growing-startup-m'><img src = 'https://martinfowler.com/snips/2023-scaleup-webinar.jpg' width = ''></img></a></div>\n\n<p>Join Tim Cochran and Rickey Zachary on <b>Thursday, September 7th 1-2pm EST</b>\n     for a <a href = 'https://www.thoughtworks.com/about-us/events/webinars/scaling-bottlenecks--technology-mistakes-every-growing-startup-m'>webinar on Bottlenecks of\n     Scaleups:</a> Technology mistakes every growing startup makes. They researched\n     Thoughtwork's portfolio to analyze why companies struggle to scale,\n     spanning across Technology, People, and Product. Covering areas such as\n     experimentation culture, overcomplicated architectures, onboarding,\n     developer productivity, product and engineering collaboration, and cost\n     efficiency.</p>\n\n<p><a class = 'more' href = 'https://www.thoughtworks.com/about-us/events/webinars/scaling-bottlenecks--technology-mistakes-every-growing-startup-m'>more…</a></p>"}},{"title":"Strategic directions to build a strong foundation","link":{"@href":"https://martinfowler.com/articles/creating-integrated-tech-strategy.html#BuildingAStrongFoundation"},"updated":"2023-08-15T10:16:00-04:00","id":"tag:martinfowler.com,2023-08-15:Strategic-directions-to-build-a-strong-foundation","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#BuildingAStrongFoundation'><img src = 'https://martinfowler.com/articles/creating-integrated-tech-strategy/card.png' width = ''></img></a></div>\n\n<p>Any business that wants to grow needs to be built on strong and stable\n     foundations. While these strategic directions are often familiar to\n     technical folks it's important that the improvements to engineering align\n     with the themes that resonate with the rest of the organization.\n     <b class = 'author'>Sarah Taraporewalla</b> illustrates how this appears with <a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#BuildingAStrongFoundation'>two\n     strategic directions</a> that consider improvements in efficiency and quality.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#BuildingAStrongFoundation'>more…</a></p>"}},{"title":"Actions to sustain cost control for scaleups","link":{"@href":"https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#SustainPhase"},"updated":"2023-08-15T10:15:00-04:00","id":"tag:martinfowler.com,2023-08-15:Actions-to-sustain-cost-control-for-scaleups","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#SustainPhase'><img src = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/card-cost.png' width = ''></img></a></div>\n\n<p>When scaling up, getting costs under control is vital to stabilizing\n       financial health. But as a weight-loss expert might say, the key to\n       long-term health is to do things that promote a sustainable lifestyle.\n       <b class = 'author'>Sofia Tania </b> and <b class = 'author'> Stefania\n       Stefansdottir</b> now move on to begin to <a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#SustainPhase'>describe these\n       initiatives</a>: federated accountability, visibility, and nudges\n       towards better financial discipline.\n       </p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#SustainPhase'>more…</a></p>"}},{"title":"We will miss Stefan Tilkov","link":{"@href":"https://martinfowler.com/articles/202308-stefan-tilkov.html"},"updated":"2023-08-14T14:58:00-04:00","id":"https://martinfowler.com/articles/202308-stefan-tilkov.html","author":{"name":"Martin Fowler","email":"martin@martinfowler.com","uri":"https://martinfowler.com"},"content":{"@type":"html","#text":"<p>We are saddened today to learn of the <a href=\"https://www.innoq.com/en/news/2023/08/stefan-tilkov-english/\">passing of Stefan Tilkov</a>. We’ve met Stefan several times at workshops and conferences and always enjoyed his good company and insightful views. He advocated many of the things that we and our colleagues support - and as well as skillfully explaining these ideas, he also backed them up with concrete experience from his work. We shall really miss his wise contributions online, and regret that we won’t get the chance to chat with him again. We offer our condolences to his family, friends, and colleagues at INNOQ.</p>\n\n<ul>\n  <li>Birgitta Boeckeler</li>\n  <li>Erik Dörnenburg</li>\n  <li>Dave Farley</li>\n  <li>Neal Ford</li>\n  <li>Martin Fowler</li>\n  <li>James Lewis</li>\n  <li>Sam Newman</li>\n  <li>Rebecca Parsons</li>\n  <li>Daniel Terhorst-North</li>\n</ul>\n"}},{"title":"First stage of reducing costs for a scaleup","link":{"@href":"https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#ReducePhase"},"updated":"2023-08-10T11:17:00-04:00","id":"tag:martinfowler.com,2023-08-10:First-stage-of-reducing-costs-for-a-scaleup","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#ReducePhase'><img src = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/card-cost.png' width = ''></img></a></div>\n\n<p>When scaleups need to start working on cost efficiency, our experience\n       is that they need to form a cost optimization team to work on the\n       immediate steps that are needed. <a href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#ReducePhase'>In this installment</a>&#xA0;<b class = 'author'>Sofia and\n       Stefania</b> describe how to understand the primary cost drivers,\n       together with the levers to get them under control. </p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/bottlenecks-of-scaleups/04-costs.html#ReducePhase'>more…</a></p>"}},{"title":"Tech strategy for new customer segments and inorganic growth","link":{"@href":"https://martinfowler.com/articles/creating-integrated-tech-strategy.html#expand-segments"},"updated":"2023-08-10T10:12:00-04:00","id":"tag:martinfowler.com,2023-08-10:Tech-strategy-for-new-customer-segments-and-inorganic-growth","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<div class = 'img-link'><a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#expand-segments'><img src = 'https://martinfowler.com/articles/creating-integrated-tech-strategy/card.png' width = ''></img></a></div>\n\n<p><b class = 'author'>Sarah Taraporewalla</b> moves on to the remaining two\n     strategic directions that are part of <a href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#expand-segments'>growing the business</a>.\n     Expanding into new customer segments can introduce new operational\n     processes or channels. Inorganic growth (eg acquisitions and mergers) needs\n     an understanding of the drivers of increased value and the long term\n     expectation (eg merge or keep separate and divest) for the business unit. </p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/creating-integrated-tech-strategy.html#expand-segments'>more…</a></p>"}},{"title":"Coding assistants do not replace pair programming","link":{"@href":"https://martinfowler.com/articles/exploring-gen-ai.html#memo-05"},"updated":"2023-08-10T09:31:00-04:00","id":"tag:martinfowler.com,2023-08-10:Coding-assistants-do-not-replace-pair-programming","category":{"@term":"skip-home-page"},"content":{"@type":"html","#text":"\n<p>In her 5th memo about exploring GenAI for software development,\n      <b class = 'author'>Birgitta B&#xF6;ckeler</b> answers the frequently asked question if\n      coding assistants are <a href = 'https://martinfowler.com/articles/exploring-gen-ai.html#memo-05'>making the practice of Pair Programming\n      obsolete</a>. Spoiler alert: They don't.</p>\n\n<p><a class = 'more' href = 'https://martinfowler.com/articles/exploring-gen-ai.html#memo-05'>more…</a></p>"}}]}}